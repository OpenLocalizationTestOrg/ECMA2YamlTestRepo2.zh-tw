### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.InputBinding
  id: InputBinding
  children:
  - System.Windows.Input.InputBinding.#ctor
  - System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)
  - System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.Command
  - System.Windows.Input.InputBinding.CommandParameter
  - System.Windows.Input.InputBinding.CommandParameterProperty
  - System.Windows.Input.InputBinding.CommandProperty
  - System.Windows.Input.InputBinding.CommandTarget
  - System.Windows.Input.InputBinding.CommandTargetProperty
  - System.Windows.Input.InputBinding.CreateInstanceCore
  - System.Windows.Input.InputBinding.Gesture
  - System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  langs:
  - csharp
  name: InputBinding
  nameWithType: InputBinding
  fullName: System.Windows.Input.InputBinding
  type: Class
  summary: "表示之間的繫結<xref href=&quot;System.Windows.Input.InputGesture&quot;></xref>和命令。 此命令可能是<xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref>。"
  remarks: "You can specify that user input invokes a command by creating a InputBinding. When the user performs the specified input, the <xref:System.Windows.Input.ICommand> that is set to the <xref:System.Windows.Input.InputBinding.Command%2A> property is executed.  \n  \n You can specify that the InputBinding invokes a command that is defined on an object by creating a binding on the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties. This enables you to define a custom command and associate it with user input. For more information, see the second example in the Examples section.  \n  \n An InputBinding can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> with the <xref:System.Windows.Input.CommandManager>.  \n  \n The InputBinding class itself does not support [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (there is a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from InputBinding with a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage. Two existing InputBinding-derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>. The typical property in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] programming that is set in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and takes one or more InputBinding objects as values is the <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=fullName> property.  \n  \n<a name=\"xamlObjectElementUsage_InputBinding\"></a>   \n## XAML Object Element Usage  \n \\<*inputBindingDerivedClass…/*>  \n  \n<a name=\"xamlValues_InputBinding\"></a>   \n## XAML Values  \n `inputBindingDerivedClass`  \n A derived class of InputBinding that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks."
  example:
  - "The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command. When the key gesture is performed, the Open command is invoked.  \n  \n [!code-xml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/add/codesnippet/xaml/CommandingOverviewSnippets/Window1.xaml#commandingoverviewxamlkeybinding)]  \n  \n The following examples show how to bind a custom command to InputBinding objects. These examples create an application that enables the user to change the background color by performing one of the following actions:  \n  \n-   Clicking a button.  \n  \n-   Pressing CTRL+C.  \n  \n-   Right-clicking a <xref:System.Windows.Controls.StackPanel> (outside the <xref:System.Windows.Controls.ListBox>).  \n  \n The first example creates a class named `SimpleDelegateCommand`. This class accepts a delegate so that the object creating the command can define the action that occurs when the command executes. `SimpleDelegateCommand` also defines properties that specify what key and mouse input invokes the command. `GestureKey` and `GestureModifier` specify the keyboard input; `MouseGesture` specifies the mouse input.  \n  \n [!code-cs[InputCommandBinding#DelegateCommand](~/add/codesnippet/csharp/inputcommandbinding/mainwindow.xaml.cs#delegatecommand)]\n [!code-vb[InputCommandBinding#DelegateCommand](~/add/codesnippet/visualbasic/inputcommandbinding/mainwindow.xaml.vb#delegatecommand)]  \n  \n The following example creates and initializes the `ColorChangeCommand`, which is a `SimpleDelegateCommand`. The example also defines the method that executes when the command is invoked and sets the `GestureKey`, `GestureModifier`, and `MouseGesture` properties. An application would call the `InitializeCommand` method when the program begins, such as in the constructor of a <xref:System.Windows.Window>.  \n  \n [!code-cs[InputCommandBinding#InitializeCommand](~/add/codesnippet/csharp/inputcommandbinding/mainwindow.xaml.cs#initializecommand)]\n [!code-vb[InputCommandBinding#InitializeCommand](~/add/codesnippet/visualbasic/inputcommandbinding/mainwindow.xaml.vb#initializecommand)]  \n  \n Finally, the following example creates the user interface. The example adds a <xref:System.Windows.Input.KeyBinding> and a <xref:System.Windows.Input.MouseBinding> to a <xref:System.Windows.Controls.StackPanel> that contains a <xref:System.Windows.Controls.Button> and a <xref:System.Windows.Controls.ListBox>. When the user selects an item in the <xref:System.Windows.Controls.ListBox>, he or she can change the color of the background to the selected color. In each case, the `CommandParameter` property is bound to the selected item in the <xref:System.Windows.Controls.ListBox>, and the `Command` property is bound to the `ColorChangeCommand`. The <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=fullName>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=fullName>, and <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=fullName> properties are bound to the corresponding properties on the `SimpleDelegateCommand` class.  \n  \n [!code-xml[InputCommandBinding#UI](~/add/codesnippet/xaml/inputcommandbinding/mainwindow.xaml#ui)]"
  syntax:
    content: 'public class InputBinding : System.Windows.Freezable, System.Windows.Input.ICommandSource'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Freezable
  implements:
  - System.Windows.Input.ICommandSource
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Freezable.CanFreeze
  - System.Windows.Freezable.Changed
  - System.Windows.Freezable.Clone
  - System.Windows.Freezable.CloneCurrentValue
  - System.Windows.Freezable.CreateInstance
  - System.Windows.Freezable.Freeze
  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)
  - System.Windows.Freezable.FreezeCore(System.Boolean)
  - System.Windows.Freezable.GetAsFrozen
  - System.Windows.Freezable.GetCurrentValueAsFrozen
  - System.Windows.Freezable.IsFrozen
  - System.Windows.Freezable.OnChanged
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)
  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.Freezable.ReadPreamble
  - System.Windows.Freezable.WritePostscript
  - System.Windows.Freezable.WritePreamble
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.#ctor
  id: '#ctor'
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: InputBinding()
  nameWithType: InputBinding.InputBinding()
  fullName: System.Windows.Input.InputBinding.InputBinding()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "提供初始化基底類別衍生自<xref href=&quot;System.Windows.Input.InputBinding&quot;> </xref>。"
  remarks: "<xref:System.Windows.Input.InputBinding>不技術上來說是抽象類別，而預設建構函式是刻意保護的存取權。</xref:System.Windows.Input.InputBinding> 這是進行的效果<xref:System.Windows.Input.InputBinding>「 抽象 」 類別[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]。</xref:System.Windows.Input.InputBinding> 中的現有屬性[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]具有[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]預期類型的物件的使用方式<xref:System.Windows.Input.InputBinding>，不過您不能指定<xref:System.Windows.Input.InputBinding>執行個體中[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]。</xref:System.Windows.Input.InputBinding> </xref:System.Windows.Input.InputBinding> 相反地，您可以指定其中一個裝置特定<xref:System.Windows.Input.InputBinding>衍生類別執行個體<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>.</xref:System.Windows.Input.MouseBinding></xref:System.Windows.Input.KeyBinding>的值為</xref:System.Windows.Input.InputBinding>"
  syntax:
    content: protected InputBinding ();
    parameters: []
  overload: System.Windows.Input.InputBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)'
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: InputBinding(ICommand,InputGesture)
  nameWithType: InputBinding.InputBinding(ICommand,InputGesture)
  fullName: System.Windows.Input.InputBinding.InputBinding(ICommand,InputGesture)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.Input.InputBinding&quot;></xref>使用指定的命令與輸入的動作的類別。"
  remarks: "如果您是軟體開發人員使用現有的輸入繫結類別，您通常不會使用這個建構函式，即使您正在定義的自訂命令。 相反地，您會使用衍生的類別建構函式 (<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>)，或您將使用這個建構函式做為自訂類別的基底具現化</xref:System.Windows.Input.MouseBinding></xref:System.Windows.Input.KeyBinding> 雖然<xref:System.Windows.Input.InputBinding>類別支援不同的輸入的裝置原則，實際上您必須選擇將代表輸入繫結的裝置。</xref:System.Windows.Input.InputBinding> 您只可以設定只有一個<xref:System.Windows.Input.InputBinding.Gesture%2A>是裝置特定的值上輸入的繫結和手勢。</xref:System.Windows.Input.InputBinding.Gesture%2A>"
  example:
  - "The following example shows how to use this constructor to associate a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.RoutedCommand>.  \n  \n [!code-cs[commandlibrarysnippets#InputBindingAddingComand](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#inputbindingaddingcomand)]\n [!code-vb[commandlibrarysnippets#InputBindingAddingComand](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#inputbindingaddingcomand)]"
  syntax:
    content: public InputBinding (System.Windows.Input.ICommand command, System.Windows.Input.InputGesture gesture);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "與命令`gesture`。"
    - id: gesture
      type: System.Windows.Input.InputGesture
      description: "輸入的動作與`command`。"
  overload: System.Windows.Input.InputBinding.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>command</code>or <code>gesture</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)
  id: CloneCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CloneCore(Freezable)
  nameWithType: InputBinding.CloneCore(Freezable)
  fullName: System.Windows.Input.InputBinding.CloneCore(Freezable)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "複製指定之物件的屬性的基底 （非動畫） 值。"
  syntax:
    content: protected override void CloneCore (System.Windows.Freezable sourceFreezable);
    parameters:
    - id: sourceFreezable
      type: System.Windows.Freezable
      description: "要複製的物件。"
  overload: System.Windows.Input.InputBinding.CloneCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)
  id: CloneCurrentValueCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CloneCurrentValueCore(Freezable)
  nameWithType: InputBinding.CloneCurrentValueCore(Freezable)
  fullName: System.Windows.Input.InputBinding.CloneCurrentValueCore(Freezable)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "複製指定之物件的屬性的目前值。"
  syntax:
    content: protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);
    parameters:
    - id: sourceFreezable
      type: System.Windows.Freezable
      description: "要複製的物件。"
  overload: System.Windows.Input.InputBinding.CloneCurrentValueCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.Command
  id: Command
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: Command
  nameWithType: InputBinding.Command
  fullName: System.Windows.Input.InputBinding.Command
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得或設定<xref:System.Windows.Input.ICommand>此輸入繫結相關聯。</xref:System.Windows.Input.ICommand>"
  remarks: "<xref:System.Windows.Input.InputBinding>類別不支援[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]使用量因為它不會公開公用預設建構函式 （預設的建構函式，但受到保護）。</xref:System.Windows.Input.InputBinding> 不過，衍生的類別可以公開的公用建構函式，因此，可以使用繼承自<xref:System.Windows.Input.InputBinding>.</xref:System.Windows.Input.InputBinding>屬性 兩個現有<xref:System.Windows.Input.InputBinding>衍生類別中執行個體化[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]和可以設定屬性與[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]使用方式會<xref:System.Windows.Input.KeyBinding>和<xref:System.Windows.Input.MouseBinding>。</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.InputBinding>       <xref:System.Windows.Input.ICommand>參考型別轉換子，可讓某些預先存在<xref:System.Windows.Input.ICommand>實作，其指定的字串形式的值。</xref:System.Windows.Input.ICommand></xref:System.Windows.Input.ICommand> 此類型轉換行為設定這個屬性的屬性值格式。 您也可以繫結命令<xref:System.Windows.Input.InputBinding.CommandParameter%2A>，和<xref:System.Windows.Input.InputBinding.CommandTarget%2A>屬性<xref:System.Windows.Input.ICommand>物件上定義的。</xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.InputBinding.CommandTarget%2A> </xref:System.Windows.Input.InputBinding.CommandParameter%2A> 這可讓您定義自訂的命令，並將它與使用者輸入關聯。 如需詳細資訊，請參閱<xref:System.Windows.Input.InputBinding>.</xref:System.Windows.Input.InputBinding>的第二個範例      <a name=&quot;xamlAttributeUsage_Command&quot;></a># # XAML 屬性使用方式`inputBindingDerivedClass` `Command`=&quot;<xref:System.Windows.Input.ICommand>&quot;/ > <a name=&quot;xamlPropertyElementUsage_Command&quot;> </a> # # XAML 屬性項目用法```   <inputBindingDerivedClass>     <inputBindingDerivedClass.Command>       <iCommandImplementation/>     </inputBindingDerivedClass.Command>   </inputBindingDerivedClass>   ``` <a name=&quot;xamlValues_Command&quot;> </a> # # XAML 值`inputBindingDerivedClass`的衍生的類別<xref:System.Windows.Input.InputBinding>可支援物件項目語法，例如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>.</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.InputBinding>       </xref:System.Windows.Input.ICommand> 請參閱 < 備註 >。       `iCommandImplementation`物件實作<xref:System.Windows.Input.ICommand>支援物件項目語法 （具有公用預設建構函式）。</xref:System.Windows.Input.ICommand>"
  example:
  - "The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=fullName> command. When the key gesture is performed, the Open command is invoked.  \n  \n [!code-xml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/add/codesnippet/xaml/CommandingOverviewSnippets/Window1.xaml#commandingoverviewxamlkeybinding)]  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewkeybinding)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewkeybinding)]"
  syntax:
    content: public System.Windows.Input.ICommand Command { get; set; }
    return:
      type: System.Windows.Input.ICommand
      description: "相關聯的命令。"
  overload: System.Windows.Input.InputBinding.Command*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "命令值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CommandParameter
  id: CommandParameter
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CommandParameter
  nameWithType: InputBinding.CommandParameter
  fullName: System.Windows.Input.InputBinding.CommandParameter
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得或設定特定命令的特定命令的資料。"
  remarks: "CommandParameter 屬性用來執行時傳遞給命令的特定資訊。 命令所定義的資料類型。 許多命令不會預期命令參數。這些命令，將會忽略任何傳遞的命令參數。       如果輸入的繫結相關聯的命令是<xref:System.Windows.Input.RoutedCommand>，輸入繫結的 CommandParameter 傳遞至<xref:System.Windows.Input.RoutedCommand>處理常式透過<xref:System.Windows.Input.ExecutedRoutedEventArgs>和<xref:System.Windows.Input.CanExecuteRoutedEventArgs>處理命令時，事件資料。</xref:System.Windows.Input.CanExecuteRoutedEventArgs> </xref:System.Windows.Input.ExecutedRoutedEventArgs> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand>       資料類型和用途命令參數的每個命令會以不同的方式定義，而且可以是`null`。 您可以繫結<xref:System.Windows.Input.InputBinding.Command%2A>，CommandParameter，和<xref:System.Windows.Input.InputBinding.CommandTarget%2A>屬性<xref:System.Windows.Input.ICommand>物件上定義的。</xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.InputBinding.CommandTarget%2A> </xref:System.Windows.Input.InputBinding.Command%2A> 這可讓您定義自訂的命令，並將它與使用者輸入關聯。 如需詳細資訊，請參閱<xref:System.Windows.Input.InputBinding>.</xref:System.Windows.Input.InputBinding>的第二個範例       <xref:System.Windows.Input.InputBinding>類別不支援[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]使用量因為它不會公開公用預設建構函式 （預設的建構函式，但受到保護）。</xref:System.Windows.Input.InputBinding> 然而，衍生的類別可以公開的公用建構函式，因此，可以設定屬性，都繼承自<xref:System.Windows.Input.InputBinding>與[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]使用量。</xref:System.Windows.Input.InputBinding> 兩個現有<xref:System.Windows.Input.InputBinding>衍生類別中執行個體化[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]中可設定屬性和[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]和<xref:System.Windows.Input.KeyBinding><xref:System.Windows.Input.MouseBinding>.</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.InputBinding>      <a name=&quot;xamlAttributeUsage_CommandParameter&quot;></a># # XAML 屬性使用方式```   <inputBindingDerivedClass CommandParameter=&quot;commandParameterString&quot;/>   ``` <a name=&quot;xamlPropertyElementUsage_CommandParameter&quot;> </a> # # XAML 屬性項目用法```   <inputBindingDerivedClass>     <inputBindingDerivedClass.CommandParameter>       <commandParameterObject/>     </inputBindingDerivedClass.CommandParameter>   </inputBindingDerivedClass>   ``` <a name=&quot;xamlValues_CommandParameter&quot;> </a> # # XAML 值`inputBindingDerivedClass`<xref:System.Windows.Input.InputBinding>支援物件項目語法，例如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>.</xref:System.Windows.Input.MouseBinding></xref:System.Windows.Input.KeyBinding></xref:System.Windows.Input.InputBinding>的衍生的類別             請參閱 < 備註 >。       `commandParameterString`字串處理的特定命令。 字串是用於命令參數，因為它們可以輕鬆地在中設定的一般型別[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]。 必須是的字串格式及它的目的，請參閱特定命令的輸入繫結相關聯的文件。 許多命令不會預期參數。       `commandParameterObject`特定的命令處理物件。 所有現有[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]命令會使用字串。 因此，此屬性項目語法才相關的自訂命令的案例。 為了支援此語法，`commandParameterObject`物件也必須支援物件項目語法 （必須有公用預設建構函式）。"
  syntax:
    content: public object CommandParameter { get; set; }
    return:
      type: System.Object
      description: "命令特有的資料。 預設值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.InputBinding.CommandParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CommandParameterProperty
  id: CommandParameterProperty
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CommandParameterProperty
  nameWithType: InputBinding.CommandParameterProperty
  fullName: System.Windows.Input.InputBinding.CommandParameterProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "識別<xref:System.Windows.Input.InputBinding.CommandParameter*>相依性屬性。</xref:System.Windows.Input.InputBinding.CommandParameter*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty CommandParameterProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CommandProperty
  id: CommandProperty
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CommandProperty
  nameWithType: InputBinding.CommandProperty
  fullName: System.Windows.Input.InputBinding.CommandProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "識別<xref:System.Windows.Input.InputBinding.Command*>相依性屬性。</xref:System.Windows.Input.InputBinding.Command*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty CommandProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CommandTarget
  id: CommandTarget
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CommandTarget
  nameWithType: InputBinding.CommandTarget
  fullName: System.Windows.Input.InputBinding.CommandTarget
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得或設定命令的目標項目。"
  remarks: "在[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]指揮上的系統，CommandTarget 屬性<xref:System.Windows.Input.ICommandSource>物件是時才適用<xref:System.Windows.Input.ICommand>為<xref:System.Windows.Input.RoutedCommand>。</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.ICommandSource> 如果上設定 CommandTarget<xref:System.Windows.Input.ICommandSource>和對應的命令不是<xref:System.Windows.Input.RoutedCommand>，會忽略命令目標。</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommandSource>       當搭配<xref:System.Windows.Input.RoutedCommand>，命令目標會在其上的物件<xref:System.Windows.Input.CommandManager.Executed>和<xref:System.Windows.Input.CommandManager.CanExecute>引發事件。</xref:System.Windows.Input.CommandManager.CanExecute> </xref:System.Windows.Input.CommandManager.Executed> </xref:System.Windows.Input.RoutedCommand> 如果未設定 CommandTarget 屬性，具有鍵盤焦點的項目會使用做為目標。       <xref:System.Windows.Input.InputBinding>類別本身不支援[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]使用量，因為它不會公開公用預設建構函式 （沒有預設建構函式，但受到保護）。</xref:System.Windows.Input.InputBinding> 不過，衍生的類別可以公開的公用建構函式，因此可以設定屬性，都繼承自<xref:System.Windows.Input.InputBinding>與[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]使用量。</xref:System.Windows.Input.InputBinding> 兩個現有<xref:System.Windows.Input.InputBinding>衍生類別中執行個體化[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]中可設定屬性和[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]和<xref:System.Windows.Input.KeyBinding><xref:System.Windows.Input.MouseBinding>.</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.InputBinding>      <a name=&quot;xamlAttributeUsage_CommandTarget&quot;></a># # XAML 屬性使用方式```   <inputBindingDerivedClass CommandTarget=&quot;bindingToTarget&quot;/>   ``` <a name=&quot;xamlValues_CommandTarget&quot;> </a> # # XAML 值`inputBindingDerivedClass`<xref:System.Windows.Input.InputBinding>支援物件項目語法，例如<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>.</xref:System.Windows.Input.MouseBinding></xref:System.Windows.Input.KeyBinding></xref:System.Windows.Input.InputBinding>的衍生的類別       請參閱 < 備註 >。       `bindingToTarget`字串，會使用一種可傳回的物件參考現有的繫結語法具名項目。 請參閱 < 備註 >。"
  syntax:
    content: public System.Windows.IInputElement CommandTarget { get; set; }
    return:
      type: System.Windows.IInputElement
      description: "命令的目標。 預設值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.InputBinding.CommandTarget*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CommandTargetProperty
  id: CommandTargetProperty
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CommandTargetProperty
  nameWithType: InputBinding.CommandTargetProperty
  fullName: System.Windows.Input.InputBinding.CommandTargetProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "識別<xref:System.Windows.Input.InputBinding.CommandTarget*>相依性屬性。</xref:System.Windows.Input.InputBinding.CommandTarget*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty CommandTargetProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CreateInstanceCore
  id: CreateInstanceCore
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CreateInstanceCore()
  nameWithType: InputBinding.CreateInstanceCore()
  fullName: System.Windows.Input.InputBinding.CreateInstanceCore()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "建立的執行個體<xref href=&quot;System.Windows.Input.InputBinding&quot;> </xref>。"
  syntax:
    content: protected override System.Windows.Freezable CreateInstanceCore ();
    parameters: []
    return:
      type: System.Windows.Freezable
      description: "新的物件。"
  overload: System.Windows.Input.InputBinding.CreateInstanceCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.Gesture
  id: Gesture
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: Gesture
  nameWithType: InputBinding.Gesture
  fullName: System.Windows.Input.InputBinding.Gesture
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得或設定<xref href=&quot;System.Windows.Input.InputGesture&quot;></xref>此輸入繫結相關聯。"
  remarks: "The input gesture is the action that invokes the command. Examples of input gestures in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] are <xref:System.Windows.Input.KeyGesture> and <xref:System.Windows.Input.MouseGesture>. A <xref:System.Windows.Input.KeyGesture> is a combination of a <xref:System.Windows.Input.Key> and a set of <xref:System.Windows.Input.ModifierKeys>. A <xref:System.Windows.Input.MouseGesture> is a combination of a <xref:System.Windows.Input.MouseAction> and a set of <xref:System.Windows.Input.ModifierKeys>.  \n  \n The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage, because it does not expose a public default constructor (there is a default constructor, but it is protected). However, derived classes can expose a public constructor and thus can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.  \n  \n<a name=\"xamlAttributeUsage_gesture\"></a>   \n## XAML Attribute Usage  \n <<xref:System.Windows.Input.KeyBinding> `Gesture`=\"<xref:System.Windows.Input.KeyGesture>\"/>  \n  \n \\- or -  \n  \n <<xref:System.Windows.Input.MouseBinding> `Gesture`=\"<xref:System.Windows.Input.MouseGesture>\"/>  \n  \n \\- or -  \n  \n <`inputBindingDerivedClass` `Gesture`=\"<xref:System.Windows.Input.InputGesture>\"/>  \n  \n<a name=\"xamlPropertyElementUsage_gesture\"></a>   \n## XAML Property Element Usage  \n  \n```  \n<inputBindingDerivedClass>  \n  <inputBindingDerivedClass.Gesture>  \n    <inputGestureImplementation/>  \n  </inputBindingDerivedClass.Gesture>  \n</inputBindingDerivedClass>  \n```  \n  \n<a name=\"xamlValues_gesture\"></a>   \n## XAML Values  \n `inputBindingDerivedClass`  \n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.  \n  \n `inputGestureImplementation`  \n A custom derived class of <xref:System.Windows.Input.InputGesture> that supports object element syntax."
  example:
  - "The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand>. When the <xref:System.Windows.Input.KeyGesture> ALT+L is pressed, the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command is invoked.  \n  \n [!code-xml[commandlibrarysnippets#KeyBindingWithKeyAndModifiersXAML](~/add/codesnippet/xaml/CommandLibarySnippets/Window1.xaml#keybindingwithkeyandmodifiersxaml)]  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]"
  syntax:
    content: public virtual System.Windows.Input.InputGesture Gesture { get; set; }
    return:
      type: System.Windows.Input.InputGesture
      description: "相關聯的筆勢。 預設值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.InputBinding.Gesture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)
  id: GetAsFrozenCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: GetAsFrozenCore(Freezable)
  nameWithType: InputBinding.GetAsFrozenCore(Freezable)
  fullName: System.Windows.Input.InputBinding.GetAsFrozenCore(Freezable)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "將執行個體設為指定的凍結的複製品<xref href=&quot;System.Windows.Freezable&quot;></xref>使用基底 （非動畫） 屬性值。"
  syntax:
    content: protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);
    parameters:
    - id: sourceFreezable
      type: System.Windows.Freezable
      description: "要複製的物件。"
  overload: System.Windows.Input.InputBinding.GetAsFrozenCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  id: GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: GetCurrentValueAsFrozenCore(Freezable)
  nameWithType: InputBinding.GetCurrentValueAsFrozenCore(Freezable)
  fullName: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(Freezable)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "將目前的執行個體設為指定的凍結的複製品<xref href=&quot;System.Windows.Freezable&quot;> </xref>。 如果物件具有動畫相依性屬性，則會複製其目前的動畫的值。"
  syntax:
    content: protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);
    parameters:
    - id: sourceFreezable
      type: System.Windows.Freezable
      description: "要複製的物件。"
  overload: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Freezable
  isExternal: false
  name: System.Windows.Freezable
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.InputBinding.#ctor
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: InputBinding()
  nameWithType: InputBinding.InputBinding()
  fullName: System.Windows.Input.InputBinding.InputBinding()
- uid: System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: InputBinding(ICommand,InputGesture)
  nameWithType: InputBinding.InputBinding(ICommand,InputGesture)
  fullName: System.Windows.Input.InputBinding.InputBinding(ICommand,InputGesture)
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.InputGesture
  parent: System.Windows.Input
  isExternal: false
  name: InputGesture
  nameWithType: InputGesture
  fullName: System.Windows.Input.InputGesture
- uid: System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CloneCore(Freezable)
  nameWithType: InputBinding.CloneCore(Freezable)
  fullName: System.Windows.Input.InputBinding.CloneCore(Freezable)
- uid: System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CloneCurrentValueCore(Freezable)
  nameWithType: InputBinding.CloneCurrentValueCore(Freezable)
  fullName: System.Windows.Input.InputBinding.CloneCurrentValueCore(Freezable)
- uid: System.Windows.Input.InputBinding.Command
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: Command
  nameWithType: InputBinding.Command
  fullName: System.Windows.Input.InputBinding.Command
- uid: System.Windows.Input.InputBinding.CommandParameter
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandParameter
  nameWithType: InputBinding.CommandParameter
  fullName: System.Windows.Input.InputBinding.CommandParameter
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.InputBinding.CommandParameterProperty
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandParameterProperty
  nameWithType: InputBinding.CommandParameterProperty
  fullName: System.Windows.Input.InputBinding.CommandParameterProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Input.InputBinding.CommandProperty
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandProperty
  nameWithType: InputBinding.CommandProperty
  fullName: System.Windows.Input.InputBinding.CommandProperty
- uid: System.Windows.Input.InputBinding.CommandTarget
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandTarget
  nameWithType: InputBinding.CommandTarget
  fullName: System.Windows.Input.InputBinding.CommandTarget
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.InputBinding.CommandTargetProperty
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandTargetProperty
  nameWithType: InputBinding.CommandTargetProperty
  fullName: System.Windows.Input.InputBinding.CommandTargetProperty
- uid: System.Windows.Input.InputBinding.CreateInstanceCore
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CreateInstanceCore()
  nameWithType: InputBinding.CreateInstanceCore()
  fullName: System.Windows.Input.InputBinding.CreateInstanceCore()
- uid: System.Windows.Input.InputBinding.Gesture
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: Gesture
  nameWithType: InputBinding.Gesture
  fullName: System.Windows.Input.InputBinding.Gesture
- uid: System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: GetAsFrozenCore(Freezable)
  nameWithType: InputBinding.GetAsFrozenCore(Freezable)
  fullName: System.Windows.Input.InputBinding.GetAsFrozenCore(Freezable)
- uid: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: GetCurrentValueAsFrozenCore(Freezable)
  nameWithType: InputBinding.GetCurrentValueAsFrozenCore(Freezable)
  fullName: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(Freezable)
- uid: System.Windows.Input.InputBinding.#ctor*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: InputBinding
  nameWithType: InputBinding.InputBinding
- uid: System.Windows.Input.InputBinding.CloneCore*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CloneCore
  nameWithType: InputBinding.CloneCore
- uid: System.Windows.Input.InputBinding.CloneCurrentValueCore*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CloneCurrentValueCore
  nameWithType: InputBinding.CloneCurrentValueCore
- uid: System.Windows.Input.InputBinding.Command*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: Command
  nameWithType: InputBinding.Command
- uid: System.Windows.Input.InputBinding.CommandParameter*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandParameter
  nameWithType: InputBinding.CommandParameter
- uid: System.Windows.Input.InputBinding.CommandTarget*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandTarget
  nameWithType: InputBinding.CommandTarget
- uid: System.Windows.Input.InputBinding.CreateInstanceCore*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CreateInstanceCore
  nameWithType: InputBinding.CreateInstanceCore
- uid: System.Windows.Input.InputBinding.Gesture*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: Gesture
  nameWithType: InputBinding.Gesture
- uid: System.Windows.Input.InputBinding.GetAsFrozenCore*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: GetAsFrozenCore
  nameWithType: InputBinding.GetAsFrozenCore
- uid: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: GetCurrentValueAsFrozenCore
  nameWithType: InputBinding.GetCurrentValueAsFrozenCore
