### YamlMime:ManagedReference
items:
- uid: System.ResolveEventArgs
  id: ResolveEventArgs
  children:
  - System.ResolveEventArgs.#ctor(System.String)
  - System.ResolveEventArgs.#ctor(System.String,System.Reflection.Assembly)
  - System.ResolveEventArgs.Name
  - System.ResolveEventArgs.RequestingAssembly
  langs:
  - csharp
  name: ResolveEventArgs
  nameWithType: ResolveEventArgs
  fullName: System.ResolveEventArgs
  type: Class
  summary: "提供的資料載入器解析事件，例如<xref href=&quot;System.AppDomain.TypeResolve&quot;> </xref>， <xref href=&quot;System.AppDomain.ResourceResolve&quot;> </xref>， <xref href=&quot;System.AppDomain.ReflectionOnlyAssemblyResolve&quot;> </xref>，和<xref href=&quot;System.AppDomain.AssemblyResolve&quot;></xref>事件。"
  remarks: "當載入器無法解析組件參考和處理常式已提供適當的載入器的解析度事件，就會引發事件和 ResolveEventArgs 包含要解析之項目的相關資訊。      -<xref:System.ResolveEventArgs.Name%2A>屬性包含要解析之項目的名稱。</xref:System.ResolveEventArgs.Name%2A>      -開頭[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]、<xref:System.ResolveEventArgs.RequestingAssembly%2A>屬性包含要求的組件，可以提供的具名項目之組件。</xref:System.ResolveEventArgs.RequestingAssembly%2A> 如需詳細資訊，請參閱<xref:System.ResolveEventArgs.RequestingAssembly%2A>屬性。</xref:System.ResolveEventArgs.RequestingAssembly%2A>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class ResolveEventArgs : EventArgs
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ResolveEventArgs.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.ResolveEventArgs
  langs:
  - csharp
  name: ResolveEventArgs(String)
  nameWithType: ResolveEventArgs.ResolveEventArgs(String)
  fullName: System.ResolveEventArgs.ResolveEventArgs(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新執行個體<xref href=&quot;System.ResolveEventArgs&quot;></xref>類別，指定要解析之項目的名稱。"
  remarks: "只能由通用語言執行平台，通常會呼叫這個建構函式。"
  syntax:
    content: public ResolveEventArgs (string name);
    parameters:
    - id: name
      type: System.String
      description: "若要解決項目的名稱。"
  overload: System.ResolveEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ResolveEventArgs.#ctor(System.String,System.Reflection.Assembly)
  id: '#ctor(System.String,System.Reflection.Assembly)'
  parent: System.ResolveEventArgs
  langs:
  - csharp
  name: ResolveEventArgs(String,Assembly)
  nameWithType: ResolveEventArgs.ResolveEventArgs(String,Assembly)
  fullName: System.ResolveEventArgs.ResolveEventArgs(String,Assembly)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新執行個體<xref href=&quot;System.ResolveEventArgs&quot;></xref>類別，指定要解析的項目和其相依性正在解析組件的名稱。"
  syntax:
    content: public ResolveEventArgs (string name, System.Reflection.Assembly requestingAssembly);
    parameters:
    - id: name
      type: System.String
      description: "若要解決項目的名稱。"
    - id: requestingAssembly
      type: System.Reflection.Assembly
      description: "正在解析的相依性的組件。"
  overload: System.ResolveEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ResolveEventArgs.Name
  id: Name
  parent: System.ResolveEventArgs
  langs:
  - csharp
  name: Name
  nameWithType: ResolveEventArgs.Name
  fullName: System.ResolveEventArgs.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得要解析之項目的名稱。"
  remarks: "如<xref:System.AppDomain.AssemblyResolve>事件，名稱是組件名稱之前套用原則。</xref:System.AppDomain.AssemblyResolve>"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "若要解決的項目名稱。"
  overload: System.ResolveEventArgs.Name*
  exceptions: []
  platform:
  - net462
- uid: System.ResolveEventArgs.RequestingAssembly
  id: RequestingAssembly
  parent: System.ResolveEventArgs
  langs:
  - csharp
  name: RequestingAssembly
  nameWithType: ResolveEventArgs.RequestingAssembly
  fullName: System.ResolveEventArgs.RequestingAssembly
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得正在解析的相依性的組件。"
  remarks: "這個屬性所傳回的組件是無法解析指定的項目之組件<xref:System.ResolveEventArgs.Name%2A>屬性，因為項目不存在於這個組件，或任何相依項目中任何一個載入的相依性，載入器找透過探查找。</xref:System.ResolveEventArgs.Name%2A>       例如，假設目前的組件使用<xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=fullName>方法，從外部探查路徑中，目錄中載入組件 A，若要使用類別 CA。</xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=fullName> 假設進一步 CA 該類別會使用類別 CB，組件中 B 和組件 A 的組件 B 的編譯時期參考也位於探查路徑外。 當具現化 CA 嘗試目前的組件時，載入器會嘗試解析組件 b 的參考不過，因為組件已載入使用<xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=fullName>方法，載入器無法解析相依性。</xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=fullName> 如果沒有處理常式<xref:System.AppDomain.AssemblyResolve?displayProperty=fullName>引發事件，事件時，以及所產生的 RequestingAssembly 內容<xref:System.ResolveEventArgs>物件包含組件 A，因為組件的組件，缺少相依性。</xref:System.ResolveEventArgs> </xref:System.AppDomain.AssemblyResolve?displayProperty=fullName>       語意 RequestingAssembly 屬性而異的載入要求的組件的方式:-載入內容︰ 屬性的值可能是`null`。 載入內容，而且載入順序無關的要求識別組件不一定有意義。 非 null 範例，就會發生時<xref:System.Type.GetType%2A?displayProperty=fullName>方法呼叫，而且指定的型別並不知道提出要求的組件或任何其相依性。</xref:System.Type.GetType%2A?displayProperty=fullName>      -載入內容中︰ 屬性可用來當做探查的提示，但事件處理常式應該不會取得指定的組件名稱的多個要求。      -無內容 (也就是提出要求的組件已載入使用<xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=fullName>方法，以位元組資料流，或在混合模式中): 處理常式可以使用 RequestingAssembly 屬性載入相同組件要求的組件的識別為基礎的不同實作。</xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=fullName>"
  syntax:
    content: public System.Reflection.Assembly RequestingAssembly { get; }
    return:
      type: System.Reflection.Assembly
      description: "要求的項目所指定的組件<xref:System.ResolveEventArgs.Name*>屬性。</xref:System.ResolveEventArgs.Name*>"
  overload: System.ResolveEventArgs.RequestingAssembly*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.ResolveEventArgs.#ctor(System.String)
  parent: System.ResolveEventArgs
  isExternal: false
  name: ResolveEventArgs(String)
  nameWithType: ResolveEventArgs.ResolveEventArgs(String)
  fullName: System.ResolveEventArgs.ResolveEventArgs(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ResolveEventArgs.#ctor(System.String,System.Reflection.Assembly)
  parent: System.ResolveEventArgs
  isExternal: false
  name: ResolveEventArgs(String,Assembly)
  nameWithType: ResolveEventArgs.ResolveEventArgs(String,Assembly)
  fullName: System.ResolveEventArgs.ResolveEventArgs(String,Assembly)
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.ResolveEventArgs.Name
  parent: System.ResolveEventArgs
  isExternal: false
  name: Name
  nameWithType: ResolveEventArgs.Name
  fullName: System.ResolveEventArgs.Name
- uid: System.ResolveEventArgs.RequestingAssembly
  parent: System.ResolveEventArgs
  isExternal: false
  name: RequestingAssembly
  nameWithType: ResolveEventArgs.RequestingAssembly
  fullName: System.ResolveEventArgs.RequestingAssembly
- uid: System.ResolveEventArgs.#ctor*
  parent: System.ResolveEventArgs
  isExternal: false
  name: ResolveEventArgs
  nameWithType: ResolveEventArgs.ResolveEventArgs
- uid: System.ResolveEventArgs.Name*
  parent: System.ResolveEventArgs
  isExternal: false
  name: Name
  nameWithType: ResolveEventArgs.Name
- uid: System.ResolveEventArgs.RequestingAssembly*
  parent: System.ResolveEventArgs
  isExternal: false
  name: RequestingAssembly
  nameWithType: ResolveEventArgs.RequestingAssembly
