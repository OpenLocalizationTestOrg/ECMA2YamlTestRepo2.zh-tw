### YamlMime:ManagedReference
items:
- uid: System.Threading.WaitCallback
  id: WaitCallback
  langs:
  - csharp
  name: WaitCallback
  nameWithType: WaitCallback
  fullName: System.Threading.WaitCallback
  type: Delegate
  summary: "表示要執行之執行緒集區執行緒的回呼方法。"
  remarks: "WaitCallback 代表您想要在上執行的回呼方法<xref:System.Threading.ThreadPool>執行緒。</xref:System.Threading.ThreadPool> 將回呼方法傳遞至 WaitCallback 建構函式建立委派。 您的方法必須有簽章如下所示。       佇列工作，來執行，藉由傳遞至<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName>。</xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName> WaitCallback 委派 使用執行緒集區執行緒時執行回呼方法。      > [!NOTE] > Visual Basic 使用者可以省略 WaitCallback 建構函式，並想要使用`AddressOf`運算子時傳遞至<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>。</xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>回呼方法 Visual Basic 會自動呼叫正確的委派建構函式。       如果您想要將資訊傳遞至回呼方法，建立包含必要資訊的物件，並將它傳遞給<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>時您排入佇列工作，來執行。</xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> 執行回呼方法時，每次`state`參數包含此物件。       如需使用回呼來同步處理執行緒集區執行緒的詳細資訊，請參閱[Managed 執行緒集區](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "This section contains two examples. The first example demonstrates how you can queue a simple task for execution by the thread pool.  \n  \n The second example demonstrates how you can queue a task and pass information to it.  \n  \n **Example 1**  \n  \n This example shows how to use the WaitCallback delegate to queue a task for execution by the thread pool. The code example uses the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=fullName> method overload to queue a task, which is represented by a WaitCallback that wraps the `ThreadProc` method, to execute when a thread becomes available. No task information is supplied with this overload. Therefore, the information that is available to the `ThreadProc` method is limited to the object the method belongs to.  \n  \n [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/cpp/t-system.threading.waitc_1.cpp)]\n [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/visualbasic/t-system.threading.waitc_1.vb)]\n [!code-cs[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/csharp/t-system.threading.waitc_1.cs)]  \n  \n **Example 2**  \n  \n This example shows how to create an object that contains task information. It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.  \n  \n [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/cpp/t-system.threading.waitc_2.cpp)]\n [!code-cs[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/csharp/t-system.threading.waitc_2.cs)]\n [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/visualbasic/t-system.threading.waitc_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public delegate void WaitCallback(object state);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
