### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.SendKeys
  id: SendKeys
  children:
  - System.Windows.Forms.SendKeys.Flush
  - System.Windows.Forms.SendKeys.Send(System.String)
  - System.Windows.Forms.SendKeys.SendWait(System.String)
  langs:
  - csharp
  name: SendKeys
  nameWithType: SendKeys
  fullName: System.Windows.Forms.SendKeys
  type: Class
  summary: "提供傳送按鍵至應用程式的方法。"
  remarks: "使用 SendKeys 傳送按鍵和按鍵組合，作用中的應用程式。 這個類別無法具現化。 按鍵動作傳送至類別，並且立即繼續您的程式流程，請使用<xref:System.Windows.Forms.SendKeys.Send%2A>.</xref:System.Windows.Forms.SendKeys.Send%2A> 若要等待按鍵動作來啟動任何處理序，請使用  <xref:System.Windows.Forms.SendKeys.SendWait%2A>.</xref:System.Windows.Forms.SendKeys.SendWait%2A>       每個索引鍵是由一個或多個字元表示。 若要指定鍵盤字元，請使用字元本身。 例如，代表字母 A，傳遞字串&quot;A&quot;中方法。 若要顯示多個字元，將附加至先前的每個字元。 若要表示字母 A、 B 和 C，指定為&quot;ABC&quot;的參數。       加號 （+）、 插入號 (^)、 百分比符號 （%）、 波狀符號 （~） 和括號 （） 有特殊意義 SendKeys。 若要指定其中一個字元，請將它括在括號 （{}）。 例如，若要指定加號，使用&quot;{+}&quot;。 指定的大括號字元，使用&quot;{{}&quot;和&quot;{}}&quot;。 括號 ([]) 有 SendKeys，沒有特殊意義，但您必須將其括在括號中。 其他應用程式，在方括號沒有特殊意義，特別是當動態資料交換 (DDE)，就會發生。      > [!CAUTION] > 如果您的應用程式用於各種不同的鍵盤，則使用可搭配國際<xref:System.Windows.Forms.SendKeys.Send%2A>可能會產生無法預期的結果，應該予以避免。</xref:System.Windows.Forms.SendKeys.Send%2A>       若要指定不會顯示當您按下 ENTER 或索引標籤上，等動作，而不是字元，代表索引鍵的索引鍵的字元使用下表中的代碼。      |索引鍵 |程式碼 |  |---------|----------|  |退格鍵 |{退格鍵}，{BS，} 或 {BKSP} |  |中斷 |{中斷} |  |CAPS LOCK |{CAPSLOCK} |  |DEL 或 DELETE |{刪除} 或 {DEL} |  |向下箭號 |{向下} |  |結束 |{結束} |  |輸入 |{輸入} 或 ~ |  |ESC |{ESC} |  |說明 |{協助} |  |首頁 |{首頁} |  |單元或插入 |{插入} 或 {單元} |  |向左箭號 |{LEFT} |  |NUM LOCK |{NUMLOCK} |  |向下翻頁 |{PGDN} |  |向上翻頁 |{PGUP} |  |PRINT SCREEN 鍵 |{PRTSC}（保留供日後使用） |  |向右箭號 |{右邊} |  |SCROLL LOCK |{SCROLLLOCK} |  |索引標籤 |{TAB} |  |向上鍵 |{啟動} |  |F1 |{F1} |  |F2 |{F2} |  |F3 |{F3} |  |F4 |{F4} |  |F5 |{F5} |  |F6 |{F6} |  |F7 |{F7} |  |F8 |{F8} |  |F9 |{F9} |  |F10 |{F10} |  |F11 |{F11} |  |F12 |{F12} |  |F13 |{F13} |  |F14 |{F14} |  |F15 |{F15} |  |F16 |{F16} |  |數字鍵台將加入 |{新增} |  |數字鍵台減去 |{減去} |  |數字鍵台乘 |{乘} |  |數字鍵台除以 |{分割} |      若要指定索引鍵結合的 SHIFT、 CTRL 和 ALT 鍵的任何組合，在之前的按鍵碼和一或多個下列的程式碼。      |索引鍵 |程式碼 |  |---------|----------|  |SHIFT | + |  |CTRL | ^ |  |ALT | %|      若要指定的任何組合的 SHIFT、 CTRL 和 alt 鍵應該按住時按下其他幾個索引鍵，將這些機碼的程式碼括在括號中。 例如，若要指定按住 shift 鍵，E 和 C 按下時，使用&quot;+ (EC)&quot;。 若要指定按住 shift 鍵，E 按下，後面接著不 shift 鍵，C 時使用&quot;+ EC&quot;。       若要指定重複的索引鍵，使用表單 {索引鍵的數目}。 您必須將索引鍵和數字之間的空格。 例如，{左 42} 表示 42 倍; 按向左鍵{h 10} 表示按下 H 10 倍。      > [!NOTE] > 因為沒有可啟動另一個應用程式的 managed 的方法，您可以使用這個類別，在目前應用程式或使用原生 Windows 方法，例如`FindWindow`和`SetForegroundWindow`，強制將焦點放在其他應用程式。      > [!NOTE] > SendKeys 類別已進行更新的.NET Framework 3.0，以便能夠在 Windows Vista 執行的應用程式中使用。 如預期般，Windows Vista （又稱為使用者帳戶控制或 UAC） 的增強式的安全性可防止工作從之前的實作。   >> SendKeys 類別容易受到時間問題，某些開發人員必須解決。 更新的實作仍然容易受到時間問題，但是會稍微快一些，而且可能需要變更才能因應措施。 SendKeys 類別會先嘗試使用之前的實作，以及如果失敗，請使用新的實作。 如此一來，SendKeys 類別可能會有不同的行為在不同作業系統上。 此外，當 SendKeys 類別會使用新的實作，<xref:System.Windows.Forms.SendKeys.SendWait%2A>方法將不會等候要傳送至另一個處理序時處理的訊息。</xref:System.Windows.Forms.SendKeys.SendWait%2A>   >> 如果您的應用程式依賴一致的行為，不論作業系統為何，您可以強制使用新的實作方法是加入 app.config 檔案中的下列應用程式設定的 SendKeys 類別。   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> 若要強制 SendKeys 類別使用之前的實作，使用值`&quot;JournalHook&quot;`改為。"
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.SendKeys.Send%2A> method. To run the example, paste the following code in a form called Form1 containing a button called Button1. Ensure the click events are associated with their event-handling methods in this example. The button control's <xref:System.Windows.Forms.Control.TabIndex%2A> property should be set to 0. When the example is running, double-click the form to trigger the button's click event.  \n  \n [!code-cs[System.Windows.Forms.SendKeys#1](~/add/codesnippet/csharp/t-system.windows.forms.s_16_1.cs)]\n [!code-cpp[System.Windows.Forms.SendKeys#1](~/add/codesnippet/cpp/t-system.windows.forms.s_16_1.cpp)]\n [!code-vb[System.Windows.Forms.SendKeys#1](~/add/codesnippet/visualbasic/t-system.windows.forms.s_16_1.vb)]"
  syntax:
    content: public class SendKeys
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.Flush
  id: Flush
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: Flush()
  nameWithType: SendKeys.Flush()
  fullName: System.Windows.Forms.SendKeys.Flush()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "處理目前在訊息佇列中的所有 Windows 訊息。"
  remarks: "用於排清等候處理的按鍵輸入與訊息佇列中的其他作業系統訊息應用程式。 這就相當於呼叫<xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName>之前有未處理的更多索引鍵。</xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName>      > [!NOTE] > 因為沒有可啟動另一個應用程式的 managed 的方法，您可以使用這個類別，在目前應用程式或使用原生 Windows 方法，例如`FindWindow`和`SetForegroundWindow`，強制將焦點放在其他應用程式。"
  syntax:
    content: public static void Flush ();
    parameters: []
  overload: System.Windows.Forms.SendKeys.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.Send(System.String)
  id: Send(System.String)
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: Send(String)
  nameWithType: SendKeys.Send(String)
  fullName: System.Windows.Forms.SendKeys.Send(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "將按鍵傳送至作用中的應用程式。"
  remarks: "每個索引鍵是由一個或多個字元表示。 若要指定鍵盤字元，請使用字元本身。 例如，代表字母 A，傳遞字串&quot;A&quot;中方法。 若要顯示多個字元，將附加至先前的每個字元。 若要表示字母 A、 B 和 C，指定為&quot;ABC&quot;的參數。       加號 （+）、 插入號 (^)、 百分比符號 （%）、 波狀符號 （~） 和括號 （） 有特殊意義<xref:System.Windows.Forms.SendKeys>.</xref:System.Windows.Forms.SendKeys> 若要指定其中一個字元，請將它括在括號 （{}）。 例如，若要指定加號，使用&quot;{+}&quot;。 指定的大括號字元，使用&quot;{{}&quot;和&quot;{}}&quot;。 括號 ([]) 有沒有特殊意義<xref:System.Windows.Forms.SendKeys>，但您必須將其括在括號中。</xref:System.Windows.Forms.SendKeys> 其他應用程式，在方括號沒有特殊意義，特別是當動態資料交換 (DDE)，就會發生。      > [!CAUTION] > 的各種鍵盤可搭配國際供您的應用程式，如果傳送的使用可能會產生無法預期的結果，且應予以避免。       若要指定不會顯示當您按下 ENTER 或索引標籤上，等動作，而不是字元，代表索引鍵的索引鍵的字元使用下表中的代碼。      |索引鍵 |程式碼 |  |---------|----------|  |退格鍵 |{退格鍵}，{BS，} 或 {BKSP} |  |中斷 |{中斷} |  |CAPS LOCK |{CAPSLOCK} |  |DEL 或 DELETE |{刪除} 或 {DEL} |  |向下箭號 |{向下} |  |結束 |{結束} |  |輸入 |{輸入} 或 ~ |  |ESC |{ESC} |  |說明 |{協助} |  |首頁 |{首頁} |  |單元或插入 |{插入} 或 {單元} |  |向左箭號 |{LEFT} |  |NUM LOCK |{NUMLOCK} |  |向下翻頁 |{PGDN} |  |向上翻頁 |{PGUP} |  |PRINT SCREEN 鍵 |{PRTSC}（保留供日後使用） |  |向右箭號 |{右邊} |  |SCROLL LOCK |{SCROLLLOCK} |  |索引標籤 |{TAB} |  |向上鍵 |{啟動} |  |F1 |{F1} |  |F2 |{F2} |  |F3 |{F3} |  |F4 |{F4} |  |F5 |{F5} |  |F6 |{F6} |  |F7 |{F7} |  |F8 |{F8} |  |F9 |{F9} |  |F10 |{F10} |  |F11 |{F11} |  |F12 |{F12} |  |F13 |{F13} |  |F14 |{F14} |  |F15 |{F15} |  |F16 |{F16} |  |數字鍵台將加入 |{新增} |  |數字鍵台減去 |{減去} |  |數字鍵台乘 |{乘} |  |數字鍵台除以 |{分割} |      若要指定索引鍵結合的 SHIFT、 CTRL 和 ALT 鍵的任何組合，在之前的按鍵碼和一或多個下列的程式碼。      |索引鍵 |程式碼 |  |---------|----------|  |SHIFT | + |  |CTRL | ^ |  |ALT | %|      若要指定的任何組合的 SHIFT、 CTRL 和 alt 鍵應該按住時按下其他幾個索引鍵，將這些機碼的程式碼括在括號中。 例如，若要指定按住 shift 鍵，E 和 C 按下時，使用&quot;+ (EC)&quot;。 若要指定按住 shift 鍵，E 按下，後面接著不 shift 鍵，C 時使用&quot;+ EC&quot;。       若要指定重複的索引鍵，使用表單 {索引鍵的數目}。 您必須將索引鍵和數字之間的空格。 例如，{左 42} 表示 42 倍; 按向左鍵{h 10} 表示按下 H 10 倍。      > [!NOTE] > 因為沒有可啟動另一個應用程式的 managed 的方法，您可以使用這個類別，在目前應用程式或使用原生 Windows 方法，例如`FindWindow`和`SetForegroundWindow`，強制將焦點放在其他應用程式。      > [!NOTE] ><xref:System.Windows.Forms.SendKeys>類別已針對.NET Framework 3.0，以便能夠在 Windows Vista 執行的應用程式中使用已更新。</xref:System.Windows.Forms.SendKeys> 如預期般，Windows Vista （又稱為使用者帳戶控制或 UAC） 的增強式的安全性可防止工作從之前的實作。   >><xref:System.Windows.Forms.SendKeys>類別容易受到時間問題，某些開發人員必須解決。</xref:System.Windows.Forms.SendKeys> 更新的實作仍然容易受到時間問題，但是會稍微快一些，而且可能需要變更才能因應措施。 <xref:System.Windows.Forms.SendKeys>類別先嘗試使用之前的實作，以及如果失敗，請使用新的實作。</xref:System.Windows.Forms.SendKeys> 如此一來，<xref:System.Windows.Forms.SendKeys>類別方式的行為可能在不同作業系統上。</xref:System.Windows.Forms.SendKeys> 此外，當<xref:System.Windows.Forms.SendKeys>類別會使用新的實作，<xref:System.Windows.Forms.SendKeys.SendWait%2A>方法將不會等候要傳送至另一個處理序時處理的訊息。</xref:System.Windows.Forms.SendKeys.SendWait%2A> </xref:System.Windows.Forms.SendKeys>   >> 如果您的應用程式依賴一致的行為，不論作業系統為何，您可以強制<xref:System.Windows.Forms.SendKeys>類別，以使用新的實作方法是加入 app.config 檔案中的下列應用程式設定。</xref:System.Windows.Forms.SendKeys>   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> 強制<xref:System.Windows.Forms.SendKeys>類別使用之前的實作，使用值`&quot;JournalHook&quot;`改用。</xref:System.Windows.Forms.SendKeys>"
  example:
  - "The following code example demonstrates how to use the Send method.To run the example, paste the following code in a form called Form1 containing a button called Button1. Ensure the click events are associated with their event-handling methods in this example. The button control's <xref:System.Windows.Forms.Control.TabIndex%2A> property should be set to 0. When the example is running, double-click the form to trigger the button's click event.  \n  \n [!code-cs[System.Windows.Forms.SendKeys#1](~/add/codesnippet/csharp/m-system.windows.forms.s_9_1.cs)]\n [!code-cpp[System.Windows.Forms.SendKeys#1](~/add/codesnippet/cpp/m-system.windows.forms.s_9_1.cpp)]\n [!code-vb[System.Windows.Forms.SendKeys#1](~/add/codesnippet/visualbasic/m-system.windows.forms.s_9_1.vb)]"
  syntax:
    content: public static void Send (string keys);
    parameters:
    - id: keys
      type: System.String
      description: "要傳送的按鍵字串。"
  overload: System.Windows.Forms.SendKeys.Send*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "沒有任何作用中傳送按鍵至應用程式。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keys</code>不是有效的按鍵"
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.SendWait(System.String)
  id: SendWait(System.String)
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: SendWait(String)
  nameWithType: SendKeys.SendWait(String)
  fullName: System.Windows.Forms.SendKeys.SendWait(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "傳送指定的按鍵至使用中的應用程式，並再等待要處理的訊息。"
  remarks: "使用 SendWait 將按鍵組合傳送到作用中的應用程式，並等待要處理的按鍵輸入訊息。 您可以使用這個方法來傳送按鍵至應用程式，並等候完成的按鍵啟動任何處理程序。 這可以是很重要，如果其他應用程式必須完成才能繼續執行您的應用程式。      > [!NOTE] > 因為沒有可啟動另一個應用程式的 managed 的方法，您可以使用這個類別，在目前應用程式或使用原生 Windows 方法，例如`FindWindow`和`SetForegroundWindow`，強制將焦點放在其他應用程式。      > [!NOTE] ><xref:System.Windows.Forms.SendKeys>類別已針對.NET Framework 3.0，以便能夠在 Windows Vista 執行的應用程式中使用已更新。</xref:System.Windows.Forms.SendKeys> 如預期般，Windows Vista （又稱為使用者帳戶控制或 UAC） 的增強式的安全性可防止工作從之前的實作。   >><xref:System.Windows.Forms.SendKeys>類別容易受到時間問題，某些開發人員必須解決。</xref:System.Windows.Forms.SendKeys> 更新的實作仍然容易受到時間問題，但是會稍微快一些，而且可能需要變更才能因應措施。 <xref:System.Windows.Forms.SendKeys>類別先嘗試使用之前的實作，以及如果失敗，請使用新的實作。</xref:System.Windows.Forms.SendKeys> 如此一來，<xref:System.Windows.Forms.SendKeys>類別方式的行為可能在不同作業系統上。</xref:System.Windows.Forms.SendKeys> 此外，當<xref:System.Windows.Forms.SendKeys>類別使用新的實作、 SendWait 方法將不會等候要傳送至另一個處理序時處理的訊息。</xref:System.Windows.Forms.SendKeys>   >> 如果您的應用程式依賴一致的行為，不論作業系統為何，您可以強制<xref:System.Windows.Forms.SendKeys>類別，以使用新的實作方法是加入 app.config 檔案中的下列應用程式設定。</xref:System.Windows.Forms.SendKeys>   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> 強制<xref:System.Windows.Forms.SendKeys>類別使用之前的實作，使用值`&quot;JournalHook&quot;`改用。</xref:System.Windows.Forms.SendKeys>"
  syntax:
    content: public static void SendWait (string keys);
    parameters:
    - id: keys
      type: System.String
      description: "要傳送的按鍵字串。"
  overload: System.Windows.Forms.SendKeys.SendWait*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Forms.SendKeys.Flush
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Flush()
  nameWithType: SendKeys.Flush()
  fullName: System.Windows.Forms.SendKeys.Flush()
- uid: System.Windows.Forms.SendKeys.Send(System.String)
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Send(String)
  nameWithType: SendKeys.Send(String)
  fullName: System.Windows.Forms.SendKeys.Send(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Forms.SendKeys.SendWait(System.String)
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: SendWait(String)
  nameWithType: SendKeys.SendWait(String)
  fullName: System.Windows.Forms.SendKeys.SendWait(String)
- uid: System.Windows.Forms.SendKeys.Flush*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Flush
  nameWithType: SendKeys.Flush
- uid: System.Windows.Forms.SendKeys.Send*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Send
  nameWithType: SendKeys.Send
- uid: System.Windows.Forms.SendKeys.SendWait*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: SendWait
  nameWithType: SendKeys.SendWait
