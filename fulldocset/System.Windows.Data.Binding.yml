### YamlMime:ManagedReference
items:
- uid: System.Windows.Data.Binding
  id: Binding
  children:
  - System.Windows.Data.Binding.#ctor
  - System.Windows.Data.Binding.#ctor(System.String)
  - System.Windows.Data.Binding.AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  - System.Windows.Data.Binding.AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  - System.Windows.Data.Binding.AsyncState
  - System.Windows.Data.Binding.BindsDirectlyToSource
  - System.Windows.Data.Binding.Converter
  - System.Windows.Data.Binding.ConverterCulture
  - System.Windows.Data.Binding.ConverterParameter
  - System.Windows.Data.Binding.DoNothing
  - System.Windows.Data.Binding.ElementName
  - System.Windows.Data.Binding.GetXmlNamespaceManager(System.Windows.DependencyObject)
  - System.Windows.Data.Binding.IndexerName
  - System.Windows.Data.Binding.IsAsync
  - System.Windows.Data.Binding.Mode
  - System.Windows.Data.Binding.NotifyOnSourceUpdated
  - System.Windows.Data.Binding.NotifyOnTargetUpdated
  - System.Windows.Data.Binding.NotifyOnValidationError
  - System.Windows.Data.Binding.Path
  - System.Windows.Data.Binding.RelativeSource
  - System.Windows.Data.Binding.RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  - System.Windows.Data.Binding.RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  - System.Windows.Data.Binding.SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)
  - System.Windows.Data.Binding.ShouldSerializePath
  - System.Windows.Data.Binding.ShouldSerializeSource
  - System.Windows.Data.Binding.ShouldSerializeValidationRules
  - System.Windows.Data.Binding.Source
  - System.Windows.Data.Binding.SourceUpdatedEvent
  - System.Windows.Data.Binding.TargetUpdatedEvent
  - System.Windows.Data.Binding.UpdateSourceExceptionFilter
  - System.Windows.Data.Binding.UpdateSourceTrigger
  - System.Windows.Data.Binding.ValidatesOnDataErrors
  - System.Windows.Data.Binding.ValidatesOnExceptions
  - System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
  - System.Windows.Data.Binding.ValidationRules
  - System.Windows.Data.Binding.XmlNamespaceManagerProperty
  - System.Windows.Data.Binding.XPath
  langs:
  - csharp
  name: Binding
  nameWithType: Binding
  fullName: System.Windows.Data.Binding
  type: Class
  summary: "提供的連接屬性的繫結目標物件的繫結定義的高層級存取 (一般而言，[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]項目)，和任何資料來源 (例如資料庫、[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]檔案或任何包含資料的物件)。"
  remarks: "[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]資料繫結會提供簡單且一致的方式呈現，並與資料互動的應用程式。 資料繫結可讓您同步處理兩個不同物件的屬性值。       若要建立的繫結，使用的繫結類別或其中一個繼承<xref:System.Windows.Data.BindingBase>.</xref:System.Windows.Data.BindingBase>的類別 不論什麼物件繫結，您的資料來源的本質，每個繫結會遵循模型，如下圖所示。       ![基本資料繫結圖表](~/add/media/databindingmostbasic.png &quot;基本資料繫結圖表&quot;)圖示範下列基本[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]資料繫結的概念。      -每個繫結通常會有四個元件︰ 繫結目標物件、 目標屬性、 繫結來源和<xref:System.Windows.Data.Binding.Path%2A>中要使用的繫結來源值。</xref:System.Windows.Data.Binding.Path%2A> 例如，如果您想要繫結的內容<xref:System.Windows.Controls.TextBox>Employee 物件的 Name 屬性，您的目標物件是<xref:System.Windows.Controls.TextBox>，目標屬性是<xref:System.Windows.Controls.TextBox.Text%2A>屬性，要使用的值是名稱，而來源物件是 Employee 物件。</xref:System.Windows.Controls.TextBox.Text%2A> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.TextBox>      -目標屬性必須是相依性屬性。 這也表示您無法繫結欄位。 大部分屬性<xref:System.Windows.UIElement>物件是相依性屬性，大多數相依性屬性，唯讀的除了預設支援資料繫結。</xref:System.Windows.UIElement> （僅限<xref:System.Windows.DependencyObject>類型可以定義相依性屬性和所有<xref:System.Windows.UIElement>物件都衍生自<xref:System.Windows.DependencyObject>）。     -雖然沒有指定在圖中，但請注意繫結來源物件不受限制的自訂[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]物件。</xref:System.Windows.DependencyObject> </xref:System.Windows.UIElement> </xref:System.Windows.DependencyObject> [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]資料繫結的形式支援資料[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]物件和[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]。 若要提供一些範例，可能是繫結來源<xref:System.Windows.UIElement>，任何清單物件，[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]與其相關聯物件[!INCLUDE[TLA#tla_adonet](~/add/includes/tlasharptla-adonet-md.md)]資料、 Web 服務或 XmlNode，其中包含您[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]資料。</xref:System.Windows.UIElement>       使用<xref:System.Windows.Data.Binding.Mode%2A>屬性，以指定資料流程的方向。</xref:System.Windows.Data.Binding.Mode%2A> 若要偵測來源變更單向或雙向繫結中，來源必須實作適當的屬性變更通知機制，例如<xref:System.ComponentModel.INotifyPropertyChanged>.</xref:System.ComponentModel.INotifyPropertyChanged> 如需範例，請參閱[How to︰ 實作屬性變更告知](~/add/includes/ajax-current-ext-md.md)。 <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>屬性會指定來源更新的時機。</xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> 如需詳細資訊，請參閱 < 基本資料繫結概念 > 中[資料繫結概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;xamlAttributeUsage_PriorityBinding&quot;></a># # XAML 屬性使用方式```   <object property=&quot;{Binding  declaration}&quot;/>   ``` <a name=&quot;xamlValues_PriorityBinding&quot;> </a> # # XAML 值*宣告*以逗號 （，） 分隔的零個或多個屬性指派子句。       如需詳細資訊，請參閱[繫結標記延伸](~/add/includes/ajax-current-ext-md.md)或[繫結宣告概觀](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: 'public class Binding : System.Windows.Data.BindingBase'
  inheritance:
  - System.Windows.Markup.MarkupExtension
  - System.Windows.Data.BindingBase
  implements: []
  inheritedMembers:
  - System.Windows.Data.BindingBase.BindingGroupName
  - System.Windows.Data.BindingBase.Delay
  - System.Windows.Data.BindingBase.FallbackValue
  - System.Windows.Data.BindingBase.ProvideValue(System.IServiceProvider)
  - System.Windows.Data.BindingBase.ShouldSerializeFallbackValue
  - System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue
  - System.Windows.Data.BindingBase.StringFormat
  - System.Windows.Data.BindingBase.TargetNullValue
  platform:
  - net462
- uid: System.Windows.Data.Binding.#ctor
  id: '#ctor'
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Binding()
  nameWithType: Binding.Binding()
  fullName: System.Windows.Data.Binding.Binding()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.Data.Binding&quot;></xref>類別。"
  syntax:
    content: public Binding ();
    parameters: []
  overload: System.Windows.Data.Binding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Binding(String)
  nameWithType: Binding.Binding(String)
  fullName: System.Windows.Data.Binding.Binding(String)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.Data.Binding&quot;></xref>使用初始路徑的類別。"
  syntax:
    content: public Binding (string path);
    parameters:
    - id: path
      type: System.String
      description: "初始<xref:System.Windows.Data.Binding.Path*>繫結。</xref:System.Windows.Data.Binding.Path*>"
  overload: System.Windows.Data.Binding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  id: AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "加入的處理常式<xref:System.Windows.Data.Binding.SourceUpdated>附加事件。</xref:System.Windows.Data.Binding.SourceUpdated>"
  remarks: "這個方法支援附加的事件的使用中[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]。"
  syntax:
    content: public static void AddSourceUpdatedHandler (System.Windows.DependencyObject element, EventHandler<System.Windows.Data.DataTransferEventArgs> handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>或<xref href=&quot;System.Windows.ContentElement&quot;></xref>接聽事件。"
    - id: handler
      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
      description: "要加入處理常式。"
  overload: System.Windows.Data.Binding.AddSourceUpdatedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  id: AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "加入的處理常式<xref:System.Windows.Data.Binding.TargetUpdated>附加事件。</xref:System.Windows.Data.Binding.TargetUpdated>"
  remarks: "這個方法支援附加的事件的使用中[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]。"
  syntax:
    content: public static void AddTargetUpdatedHandler (System.Windows.DependencyObject element, EventHandler<System.Windows.Data.DataTransferEventArgs> handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>或<xref href=&quot;System.Windows.ContentElement&quot;></xref>接聽事件。"
    - id: handler
      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
      description: "要加入處理常式。"
  overload: System.Windows.Data.Binding.AddTargetUpdatedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.AsyncState
  id: AsyncState
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: AsyncState
  nameWithType: Binding.AsyncState
  fullName: System.Windows.Data.Binding.AsyncState
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得或設定傳遞至非同步資料發送器的不透明資料。"
  syntax:
    content: public object AsyncState { get; set; }
    return:
      type: System.Object
      description: "資料傳遞至非同步資料發送器。"
  overload: System.Windows.Data.Binding.AsyncState*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.BindsDirectlyToSource
  id: BindsDirectlyToSource
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: BindsDirectlyToSource
  nameWithType: Binding.BindsDirectlyToSource
  fullName: System.Windows.Data.Binding.BindsDirectlyToSource
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得或設定值，這個值，指出是否要評估<xref:System.Windows.Data.Binding.Path*>相對於資料的項目或<xref href=&quot;System.Windows.Data.DataSourceProvider&quot;></xref>物件。</xref:System.Windows.Data.Binding.Path*>"
  remarks: "正常行為 (當這個屬性是`false`) 包含特殊處理方式<xref:System.Windows.Data.DataSourceProvider>物件。</xref:System.Windows.Data.DataSourceProvider> 在此情況下，繫結引擎會評估<xref:System.Windows.Data.Binding.Path%2A>相對於物件取自<xref:System.Windows.Data.DataSourceProvider.Data%2A>屬性。</xref:System.Windows.Data.DataSourceProvider.Data%2A> </xref:System.Windows.Data.Binding.Path%2A> 此外，繫結會接聽<xref:System.Windows.Data.DataSourceProvider.DataChanged>事件並據以回應。</xref:System.Windows.Data.DataSourceProvider.DataChanged> 此屬性設定為`true`會覆寫此行為，並提供繫結存取屬性<xref:System.Windows.Data.DataSourceProvider>物件本身。</xref:System.Windows.Data.DataSourceProvider>"
  syntax:
    content: public bool BindsDirectlyToSource { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>若要評估與資料項目本身; 相對路徑否則， <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.BindsDirectlyToSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.Converter
  id: Converter
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Converter
  nameWithType: Binding.Converter
  fullName: System.Windows.Data.Binding.Converter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得或設定要使用的轉換子。"
  remarks: "繫結，會隱含地使用嘗試執行類型轉換的來源值與目標值之間的預設轉換子。 如果無法進行轉換，則預設值轉換器會傳回`null`。       如果您想要與繫結產生關聯的自訂值轉換器，您應該建立一個類別，實作<xref:System.Windows.Data.IValueConverter>介面，並提供實作<xref:System.Windows.Data.IValueConverter.Convert%2A>和<xref:System.Windows.Data.IValueConverter.ConvertBack%2A>方法。</xref:System.Windows.Data.IValueConverter.ConvertBack%2A> </xref:System.Windows.Data.IValueConverter.Convert%2A> </xref:System.Windows.Data.IValueConverter> 值轉換器可以將資料從一個類型變更為另一個、 翻譯文化特性的詳細資料，例如字元集，或修改其簡報的其他層面。 一般轉換案例的範例，請參閱 「 資料轉換 」，在[資料繫結概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;xamlAttributeUsage_Converter&quot;></a># # XAML 屬性使用方式```   <object Converter=&quot;myConverter&quot;/>   ``` <a name=&quot;xamlValues_Converter&quot;> </a> # # XAML 值*myConverter*實作的類別資源參考<xref:System.Windows.Data.IValueConverter>介面，其中包含實作<xref:System.Windows.Data.IValueConverter.Convert%2A>和<xref:System.Windows.Data.IValueConverter.ConvertBack%2A>方法。</xref:System.Windows.Data.IValueConverter.ConvertBack%2A> </xref:System.Windows.Data.IValueConverter.Convert%2A> </xref:System.Windows.Data.IValueConverter>       若要參考的值轉換器，請使用[StaticResource 標記延伸](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Windows.Data.IValueConverter Converter { get; set; }
    return:
      type: System.Windows.Data.IValueConverter
      description: "型別的值<xref href=&quot;System.Windows.Data.IValueConverter&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.Converter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ConverterCulture
  id: ConverterCulture
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ConverterCulture
  nameWithType: Binding.ConverterCulture
  fullName: System.Windows.Data.Binding.ConverterCulture
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得或設定要在其中評估轉換器的文化特性。"
  remarks: "如果您未設定這個屬性，就會使用繫結引擎`Language`繫結目標物件的屬性。 在[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]這預設為&quot;EN-US&quot;或繼承自 頁面上，根項目 （或任何項目） 的值，如果其中一個已明確設定。       資料轉換的相關資訊，請參閱中的資料轉換 」 一節[資料繫結概觀](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Globalization.CultureInfo ConverterCulture { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "預設值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.ConverterCulture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ConverterParameter
  id: ConverterParameter
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ConverterParameter
  nameWithType: Binding.ConverterParameter
  fullName: System.Windows.Data.Binding.ConverterParameter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得或設定要傳遞至<xref:System.Windows.Data.Binding.Converter*>。</xref:System.Windows.Data.Binding.Converter*>的參數"
  remarks: "您可以使用 ConverterParameter 屬性來指定物件轉換的方式。  這個屬性會將其他資訊傳遞至您的繫結使用的轉換器。  當您指定 ConverterParameter 時，值會傳遞至<xref:System.Windows.Data.IValueConverter.Convert%2A>和<xref:System.Windows.Data.IValueConverter.ConvertBack%2A>方法`parameter`參數。</xref:System.Windows.Data.IValueConverter.ConvertBack%2A> </xref:System.Windows.Data.IValueConverter.Convert%2A>       如需範例，請參閱[如何︰ 產生清單的繫結項目值以](~/add/includes/ajax-current-ext-md.md)。 該範例會示範實作<xref:System.Windows.Data.IMultiValueConverter>但仍適用於使用方式。</xref:System.Windows.Data.IMultiValueConverter>"
  syntax:
    content: public object ConverterParameter { get; set; }
    return:
      type: System.Object
      description: "要傳遞至<xref:System.Windows.Data.Binding.Converter*>。</xref:System.Windows.Data.Binding.Converter*>的參數 預設值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.ConverterParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.DoNothing
  id: DoNothing
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: DoNothing
  nameWithType: Binding.DoNothing
  fullName: System.Windows.Data.Binding.DoNothing
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "做為傳回的值，指示繫結引擎不要執行任何動作。"
  remarks: "繫結來源屬性或轉換子可以傳回 DoNothing，指示繫結引擎不要執行任何動作。 例如，若要指示繫結引擎不要傳輸繫結目標時，不將移至下一個值<xref:System.Windows.Data.Binding>中<xref:System.Windows.Data.PriorityBinding>，或不使用`FallBackValue`或預設值。</xref:System.Windows.Data.PriorityBinding> </xref:System.Windows.Data.Binding>"
  syntax:
    content: public static readonly object DoNothing;
    return:
      type: System.Object
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ElementName
  id: ElementName
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ElementName
  nameWithType: Binding.ElementName
  fullName: System.Windows.Data.Binding.ElementName
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得或設定要作為繫結來源物件的項目名稱。"
  remarks: "當您想要繫結至應用程式中的另一個項目的屬性，這個屬性是很有用。 例如，如果您想要使用<xref:System.Windows.Controls.Slider>來控制應用程式中的另一個控制項的高度或如果您想要繫結<xref:System.Windows.Controls.ContentControl.Content%2A>至控制項的<xref:System.Windows.Controls.Primitives.Selector.SelectedValue%2A>屬性您<xref:System.Windows.Controls.ListBox>控制項。</xref:System.Windows.Controls.ListBox> </xref:System.Windows.Controls.Primitives.Selector.SelectedValue%2A> </xref:System.Windows.Controls.ContentControl.Content%2A> </xref:System.Windows.Controls.Slider>       根據預設，繫結繼承所指定的資料內容`DataContext`如果其中一個已設定的屬性。 不過，ElementName 內容是一種方式，您可以明確設定的來源<xref:System.Windows.Data.Binding>並覆寫繼承的資料內容。</xref:System.Windows.Data.Binding> 如需詳細資訊，請參閱[How to︰ 指定的繫結來源](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Windows.Data.Binding.Source%2A>和<xref:System.Windows.Data.Binding.RelativeSource%2A>屬性<xref:System.Windows.Data.Binding>類別也可讓您設定的繫結來源明確。</xref:System.Windows.Data.Binding> </xref:System.Windows.Data.Binding.RelativeSource%2A> </xref:System.Windows.Data.Binding.Source%2A> 不過，只有三個屬性，也就是項目名稱，其中<xref:System.Windows.Data.Binding.Source%2A>，和<xref:System.Windows.Data.Binding.RelativeSource%2A>、 應該設定為每個繫結，或可能會發生衝突。</xref:System.Windows.Data.Binding.RelativeSource%2A> </xref:System.Windows.Data.Binding.Source%2A> 如果繫結來源衝突，則這個屬性會擲回例外狀況。"
  syntax:
    content: public string ElementName { get; set; }
    return:
      type: System.String
      description: "值<xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;></xref>屬性或[X:name 指示詞](~/add/includes/ajax-current-ext-md.md)感興趣的項目。 您可以參考程式碼中的項目才將其登錄到適當<xref:System.Windows.NameScope>透過<xref uid=&quot;langword_csharp_RegisterName&quot; name=&quot;RegisterName&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.NameScope> 如需詳細資訊，請參閱[WPF XAML Namescopes](~/add/includes/ajax-current-ext-md.md)。       預設值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.ElementName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.GetXmlNamespaceManager(System.Windows.DependencyObject)
  id: GetXmlNamespaceManager(System.Windows.DependencyObject)
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: GetXmlNamespaceManager(DependencyObject)
  nameWithType: Binding.GetXmlNamespaceManager(DependencyObject)
  fullName: System.Windows.Data.Binding.GetXmlNamespaceManager(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "傳回[!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)]附加到指定的物件的繫結所使用的命名空間管理員物件。"
  remarks: "這個方法支援附加的屬性的使用方式的<xref:System.Windows.Data.Binding.XmlNamespaceManager%2A>附加屬性。</xref:System.Windows.Data.Binding.XmlNamespaceManager%2A>       [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]命名空間管理員才有意義的資料繫結中來自[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]繫結來源 (<xref:System.Windows.Data.XmlDataProvider>物件)。</xref:System.Windows.Data.XmlDataProvider>       如果命名空間管理員沒有特別套用在原始資料來源建立或由後續呼叫<xref:System.Windows.Data.Binding.SetXmlNamespaceManager%2A>的繫結，則這個方法將傳回`null`。</xref:System.Windows.Data.Binding.SetXmlNamespaceManager%2A>       這個方法一律會傳回`null`如果繫結背後的資料不是[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]。"
  syntax:
    content: public static System.Xml.XmlNamespaceManager GetXmlNamespaceManager (System.Windows.DependencyObject target);
    parameters:
    - id: target
      type: System.Windows.DependencyObject
      description: "要從中取得命名空間資訊的物件。"
    return:
      type: System.Xml.XmlNamespaceManager
      description: "傳回的物件，用於檢視[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]與傳遞的物件項目繫結相關的命名空間。 此物件應轉換為&lt;xref:System.Xml.XmlNamespaceManager?displayProperty=fullName&gt;。"
  overload: System.Windows.Data.Binding.GetXmlNamespaceManager*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> target </code>參數不可為<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Windows.Data.Binding.IndexerName
  id: IndexerName
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: IndexerName
  nameWithType: Binding.IndexerName
  fullName: System.Windows.Data.Binding.IndexerName
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "做為<xref:System.ComponentModel.PropertyChangedEventArgs.PropertyName*>的&lt;xref:System.ComponentModel.PropertyChangedEventArgs?displayProperty=fullName&gt; ，指出索引子屬性已變更。</xref:System.ComponentModel.PropertyChangedEventArgs.PropertyName*>"
  syntax:
    content: public const string IndexerName;
    return:
      type: System.String
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.IsAsync
  id: IsAsync
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: IsAsync
  nameWithType: Binding.IsAsync
  fullName: System.Windows.Data.Binding.IsAsync
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得或設定值，指出是否<xref href=&quot;System.Windows.Data.Binding&quot;></xref>應該取得並設定值，以非同步的方式。"
  remarks: "使用 IsAsync 屬性時`get`存取子，您的繫結來源屬性可能需要很長的時間。 其中一個範例是以影像屬性`get`從網路下載的存取子。 若要設定 IsAsync`true`可避免[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]下載進行時。       繫結會等待到達的值，報告<xref:System.Windows.Data.BindingBase.FallbackValue%2A>，如果有的話，或預設值繫結的目標屬性。</xref:System.Windows.Data.BindingBase.FallbackValue%2A>       不過，不應該有許多案例中您需要使用 IsAsync 屬性。 [!INCLUDE[TLA2#tla_net](~/add/includes/tla2sharptla-net-md.md)]指導方針，建議您不要定義速度較慢比欄位集的屬性。 當您建立您的類別時，請考慮將處理的速度非常慢作業之外的`get`存取子和快取結果。 如需詳細資訊，請參閱[NIB︰ 選擇之間指定屬性和方法](http://msdn.microsoft.com/en-us/55825e8f-7e2e-448a-9505-7217cc91b1af)。"
  syntax:
    content: public bool IsAsync { get; set; }
    return:
      type: System.Boolean
      description: "預設值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.IsAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.Mode
  id: Mode
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Mode
  nameWithType: Binding.Mode
  fullName: System.Windows.Data.Binding.Mode
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得或設定值，指出繫結中資料流程的方向。"
  remarks: "若要支援<xref:System.Windows.Data.BindingMode>，而且<xref:System.Windows.Data.BindingMode>基礎資料繫結必須實作<xref:System.ComponentModel.INotifyPropertyChanged>.</xref:System.ComponentModel.INotifyPropertyChanged> </xref:System.Windows.Data.BindingMode> </xref:System.Windows.Data.BindingMode> 如需詳細資訊，請參閱[How to︰ 實作屬性變更告知](~/add/includes/ajax-current-ext-md.md)。       如<xref:System.Windows.Data.BindingMode>或<xref:System.Windows.Data.BindingMode>繫結，您可以設定來控制目標到來源更新<xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>屬性。</xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> </xref:System.Windows.Data.BindingMode> </xref:System.Windows.Data.BindingMode> 如需詳細資訊，請參閱<xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>.</xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>       如需有關不同的繫結模式的詳細資訊，請參閱[資料繫結概觀](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Windows.Data.BindingMode Mode { get; set; }
    return:
      type: System.Windows.Data.BindingMode
      description: "其中一個<xref href=&quot;System.Windows.Data.BindingMode&quot;></xref>值。 預設值是<xref href=&quot;System.Windows.Data.BindingMode&quot;> </xref>，它會傳回目標相依性屬性的預設繫結模式值。 不過，預設值則會為每個相依性屬性而有所不同。 一般情況下，使用者可編輯的控制項屬性，例如文字方塊和核取方塊的屬性預設雙向繫結，而其他大多數屬性預設為單向繫結。       若要取得的屬性使用的屬性中繼資料是程式設計的方式，來判斷是否相依性屬性預設繫結單向或雙向<> *>，然後檢查的布林值<> *> 屬性。"
  overload: System.Windows.Data.Binding.Mode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.NotifyOnSourceUpdated
  id: NotifyOnSourceUpdated
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: NotifyOnSourceUpdated
  nameWithType: Binding.NotifyOnSourceUpdated
  fullName: System.Windows.Data.Binding.NotifyOnSourceUpdated
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得或設定值，指出是否引發<xref:System.Windows.Data.Binding.SourceUpdated>值從繫結目標轉送到繫結來源時的事件。</xref:System.Windows.Data.Binding.SourceUpdated>"
  syntax:
    content: public bool NotifyOnSourceUpdated { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Windows.Data.Binding.SourceUpdated>更新，否則繫結來源值時，應該引發事件<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.Data.Binding.SourceUpdated> 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.NotifyOnSourceUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.NotifyOnTargetUpdated
  id: NotifyOnTargetUpdated
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: NotifyOnTargetUpdated
  nameWithType: Binding.NotifyOnTargetUpdated
  fullName: System.Windows.Data.Binding.NotifyOnTargetUpdated
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得或設定值，指出是否引發<xref:System.Windows.Data.Binding.TargetUpdated>值從繫結來源轉送到繫結目標時的事件。</xref:System.Windows.Data.Binding.TargetUpdated>"
  syntax:
    content: public bool NotifyOnTargetUpdated { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Windows.Data.Binding.TargetUpdated>更新，否則繫結目標值時，應該引發事件<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.Data.Binding.TargetUpdated> 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.NotifyOnTargetUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.NotifyOnValidationError
  id: NotifyOnValidationError
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: NotifyOnValidationError
  nameWithType: Binding.NotifyOnValidationError
  fullName: System.Windows.Data.Binding.NotifyOnValidationError
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得或設定值，指出是否引發<xref:System.Windows.Controls.Validation.Error>附加繫結物件上的事件。</xref:System.Windows.Controls.Validation.Error>"
  remarks: "如果繫結具有<xref:System.Windows.Data.Binding.ValidationRules%2A>與它相關聯，繫結引擎會檢查每個規則，每次傳輸來源屬性的目標屬性值。</xref:System.Windows.Data.Binding.ValidationRules%2A> 如果規則導致無效的值，就會建立繫結引擎<xref:System.Windows.Controls.ValidationError>物件，並將它加入至<xref:System.Windows.Controls.Validation>。<xref:System.Windows.Controls.Validation.Errors%2A>繫結之物件的集合。</xref:System.Windows.Controls.Validation.Errors%2A> </xref:System.Windows.Controls.Validation> </xref:System.Windows.Controls.ValidationError> 當<xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>屬性不是空的<xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=fullName>附加的屬性的物件設定為`true`。</xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=fullName> </xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> 如果 NotifyOnValidationError 屬性<xref:System.Windows.Data.Binding>設`true`，然後繫結引擎引發<xref:System.Windows.Controls.Validation.Error?displayProperty=fullName>附加物件上的事件。</xref:System.Windows.Controls.Validation.Error?displayProperty=fullName> </xref:System.Windows.Data.Binding>       驗證程序的詳細討論，請參閱中的資料驗證一節[資料繫結概觀](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public bool NotifyOnValidationError { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Windows.Controls.Validation.Error>附加的事件應該在來源更新期間驗證錯誤時在繫結物件上引發，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.Controls.Validation.Error> 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.NotifyOnValidationError*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.Path
  id: Path
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Path
  nameWithType: Binding.Path
  fullName: System.Windows.Data.Binding.Path
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得或設定繫結來源屬性的路徑。"
  remarks: "每個繫結通常會有四個元件︰ 繫結目標物件、 目標屬性、 繫結來源、 和中要使用的繫結來源值的路徑。 如需有關這些資料繫結概念的詳細資訊，請參閱[資料繫結概觀](~/add/includes/ajax-current-ext-md.md)。       使用 Path 屬性來指定您想要繫結來源值:-簡單的情況下，屬性值是使用繫結，例如來源物件的屬性名稱的路徑在`Path=PropertyName`。      -子屬性的屬性可以指定類似中所使用的語法[!INCLUDE[TLA#tla_cshrp](~/add/includes/tlasharptla-cshrp-md.md)]。 比方說，在子句`Path=ShoppingCart.Order`設定的繫結至子屬性`Order`物件或屬性的`ShoppingCart`。      -若要繫結到附加的屬性，加上括附加屬性。 例如，若要附加的屬性繫結<xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName>，語法是`Path=(DockPanel.Dock)`。</xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName>      -索引子的屬性可以指定在方括弧內的屬性名稱後面套用索引子的位置。 比方說，在子句`Path=ShoppingCart[0]`設定的繫結至對應到屬性的內部索引如何處理常值字串&quot;0&quot;的索引。 也支援多個索引子。      -索引子和子屬性可以混合在`Path`子句，例如`Path=ShoppingCart.ShippingInfo[MailingAddress,Street].`-內部索引子可以有多個以逗號 （，） 分隔的索引子參數。 加上括弧，可以指定每個參數的型別。 例如，您可以有`Path=&quot;[(sys:Int32)42,(sys:Int32)24]&quot;`，其中`sys`對應至`System`命名空間。      -當來源是集合檢視，可以使用斜線 （/） 來指定目前的項目。 例如，在子句`Path=/`設定的繫結至檢視中目前的項目。 當來源集合，此語法會指定預設集合檢視的目前項目。      屬性名稱和斜線，都可以結合周遊是集合的屬性。 例如，`Path=/Offices/ManagerName`指定來源集合，其中包含目前的項目`Offices`也是集合的屬性。 其目前的項目是包含物件`ManagerName`屬性。      -（選擇性） 的句號 （.） 的路徑可以用來繫結至目前的來源。 例如，`Text=&quot;{Binding}&quot;`相當於`Text=&quot;{Binding Path=.}&quot;`。       路徑語法的詳細資訊，請參閱[繫結宣告概觀](~/add/includes/ajax-current-ext-md.md)或[PropertyPath XAML 語法](~/add/includes/ajax-current-ext-md.md)。       如[!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)]繫結，請參閱<xref:System.Windows.Data.Binding.XPath%2A>屬性。</xref:System.Windows.Data.Binding.XPath%2A>       要繫結至整個物件時，您不需要指定路徑屬性。 如需詳細資訊，請參閱 「 指定的路徑以值&quot;中[資料繫結概觀](../Topic/Data%20Binding%20Overview.md)。"
  example:
  - "The following example shows a style trigger that creates a <xref:System.Windows.Controls.ToolTip> that reports a validation error message. The value of the setter binds to the error content of the current <xref:System.Windows.Controls.TextBox> (the <xref:System.Windows.Controls.TextBox> using the style) using the <xref:System.Windows.Data.Binding.RelativeSource%2A> property. For more information on this example, see [How to: Implement Binding Validation](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-xml[BindValidation#5](~/add/codesnippet/xaml/BindingValidation/Window1.xaml#5)]"
  syntax:
    content: public System.Windows.PropertyPath Path { get; set; }
    return:
      type: System.Windows.PropertyPath
      description: "繫結來源的路徑。 預設值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.Path*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.RelativeSource
  id: RelativeSource
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: RelativeSource
  nameWithType: Binding.RelativeSource
  fullName: System.Windows.Data.Binding.RelativeSource
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得或設定所指定的繫結目標位置相對的繫結來源。"
  remarks: "這個屬性常用物件的一個屬性繫結至相同的物件，另一個屬性，或在樣式或範本中定義的繫結。       根據預設，繫結繼承所指定的資料內容`DataContext`如果其中一個已設定的屬性。 不過，RelativeSource 屬性是一種方式，您可以明確設定的來源<xref:System.Windows.Data.Binding>並覆寫繼承的資料內容。</xref:System.Windows.Data.Binding> 如需詳細資訊，請參閱[How to︰ 指定的繫結來源](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName>和<xref:System.Windows.Data.Binding.Source%2A?displayProperty=fullName>屬性也可讓您設定的繫結來源明確。</xref:System.Windows.Data.Binding.Source%2A?displayProperty=fullName> </xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName> 不過，只有三個屬性，其中<xref:System.Windows.Data.Binding.ElementName%2A>， <xref:System.Windows.Data.Binding.Source%2A>，和 RelativeSource，應設定為每個繫結，或可能會發生衝突。</xref:System.Windows.Data.Binding.Source%2A> </xref:System.Windows.Data.Binding.ElementName%2A> 如果繫結來源衝突，則這個屬性會擲回例外狀況。       如[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]的詳細資訊，請參閱[RelativeSource MarkupExtension](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;xamlTextUsage_RelativeSource&quot;></a># # XAML 文字用法"
  example:
  - "The following example shows a style trigger that creates a <xref:System.Windows.Controls.ToolTip> that reports a validation error message. The value of the setter binds to the error content of the current <xref:System.Windows.Controls.TextBox> (the <xref:System.Windows.Controls.TextBox> using the style) using the RelativeSource property. For more information on this example, see [How to: Implement Binding Validation](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-xml[BindValidation#5](~/add/codesnippet/xaml/BindingValidation/Window1.xaml#5)]  \n  \n To see the full example, see [Binding Validation Sample](http://go.microsoft.com/fwlink/?LinkID=159972)."
  syntax:
    content: public System.Windows.Data.RelativeSource RelativeSource { get; set; }
    return:
      type: System.Windows.Data.RelativeSource
      description: "A <xref href=&quot;System.Windows.Data.RelativeSource&quot;> </xref>物件，指定要使用的繫結來源相對位置。 預設值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.RelativeSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  id: RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "移除的處理常式<xref:System.Windows.Data.Binding.SourceUpdated>附加事件。</xref:System.Windows.Data.Binding.SourceUpdated>"
  remarks: "這個方法支援附加的事件的使用中[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]。"
  syntax:
    content: public static void RemoveSourceUpdatedHandler (System.Windows.DependencyObject element, EventHandler<System.Windows.Data.DataTransferEventArgs> handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>或<xref href=&quot;System.Windows.ContentElement&quot;></xref>接聽事件。"
    - id: handler
      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
      description: "若要移除處理常式。"
  overload: System.Windows.Data.Binding.RemoveSourceUpdatedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  id: RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "移除的處理常式<xref:System.Windows.Data.Binding.TargetUpdated>附加事件。</xref:System.Windows.Data.Binding.TargetUpdated>"
  remarks: "這個方法支援附加的事件的使用中[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]。"
  syntax:
    content: public static void RemoveTargetUpdatedHandler (System.Windows.DependencyObject element, EventHandler<System.Windows.Data.DataTransferEventArgs> handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>或<xref href=&quot;System.Windows.ContentElement&quot;></xref>接聽事件。"
    - id: handler
      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
      description: "若要移除處理常式。"
  overload: System.Windows.Data.Binding.RemoveTargetUpdatedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)
  id: SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  nameWithType: Binding.SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  fullName: System.Windows.Data.Binding.SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "設定所提供的項目附加的繫結使用的命名空間管理員物件。"
  remarks: "這個方法支援附加的屬性的使用方式的<xref:System.Windows.Data.Binding.XmlNamespaceManager%2A>附加屬性。</xref:System.Windows.Data.Binding.XmlNamespaceManager%2A>"
  syntax:
    content: public static void SetXmlNamespaceManager (System.Windows.DependencyObject target, System.Xml.XmlNamespaceManager value);
    parameters:
    - id: target
      type: System.Windows.DependencyObject
      description: "要從中取得命名空間資訊的物件。"
    - id: value
      type: System.Xml.XmlNamespaceManager
      description: "&lt;Xref:System.Xml.XmlNamespaceManager?displayProperty=fullName&gt;用於命名空間評估傳遞的項目中。"
  overload: System.Windows.Data.Binding.SetXmlNamespaceManager*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>target</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Data.Binding.ShouldSerializePath
  id: ShouldSerializePath
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ShouldSerializePath()
  nameWithType: Binding.ShouldSerializePath()
  fullName: System.Windows.Data.Binding.ShouldSerializePath()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "指出是否<xref:System.Windows.Data.Binding.Path*>屬性必須永續性。</xref:System.Windows.Data.Binding.Path*>"
  remarks: "這`ShouldSerialize`方法提供，因為<xref:System.Windows.Data.Binding.Path%2A>屬性並沒有簡單的預設值。</xref:System.Windows.Data.Binding.Path%2A> 這個方法會指出屬性是否已變更其預設值。 如果您開發的設計工具<xref:System.Windows.Data.Binding>或開發您自己的 control 納入<xref:System.Windows.Data.Binding>.</xref:System.Windows.Data.Binding></xref:System.Windows.Data.Binding>通常呼叫這個方法"
  syntax:
    content: public bool ShouldSerializePath ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果屬性值已經從其預設值;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.ShouldSerializePath*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ShouldSerializeSource
  id: ShouldSerializeSource
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ShouldSerializeSource()
  nameWithType: Binding.ShouldSerializeSource()
  fullName: System.Windows.Data.Binding.ShouldSerializeSource()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "指出是否<xref:System.Windows.Data.Binding.Source*>屬性必須永續性。</xref:System.Windows.Data.Binding.Source*>"
  remarks: "這`ShouldSerialize`方法提供，因為<xref:System.Windows.Data.Binding.Source%2A>屬性並沒有簡單的預設值。</xref:System.Windows.Data.Binding.Source%2A> 這個方法會指出屬性是否已變更其預設值。 如果您開發的設計工具<xref:System.Windows.Data.Binding>或開發您自己的 control 納入<xref:System.Windows.Data.Binding>.</xref:System.Windows.Data.Binding></xref:System.Windows.Data.Binding>通常呼叫這個方法"
  syntax:
    content: public bool ShouldSerializeSource ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果屬性值已經從其預設值;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.ShouldSerializeSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ShouldSerializeValidationRules
  id: ShouldSerializeValidationRules
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ShouldSerializeValidationRules()
  nameWithType: Binding.ShouldSerializeValidationRules()
  fullName: System.Windows.Data.Binding.ShouldSerializeValidationRules()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "指出是否<xref:System.Windows.Data.Binding.ValidationRules*>屬性必須永續性。</xref:System.Windows.Data.Binding.ValidationRules*>"
  remarks: "這`ShouldSerialize`方法提供，因為<xref:System.Windows.Data.Binding.ValidationRules%2A>屬性並沒有簡單的預設值。</xref:System.Windows.Data.Binding.ValidationRules%2A> 這個方法會指出屬性是否已變更其預設值。 如果您開發的設計工具<xref:System.Windows.Data.Binding>或開發您自己的 control 納入<xref:System.Windows.Data.Binding>.</xref:System.Windows.Data.Binding></xref:System.Windows.Data.Binding>通常呼叫這個方法"
  syntax:
    content: public bool ShouldSerializeValidationRules ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果屬性值已經從其預設值;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.ShouldSerializeValidationRules*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.Source
  id: Source
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Source
  nameWithType: Binding.Source
  fullName: System.Windows.Data.Binding.Source
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得或設定要作為繫結來源物件。"
  remarks: "根據預設，繫結繼承所指定的資料內容`DataContext`如果其中一個已設定的屬性。 不過，來源屬性是一種方式，您可以明確設定的來源<xref:System.Windows.Data.Binding>並覆寫繼承的資料內容。</xref:System.Windows.Data.Binding> 如果您不需要建立的領域，在其中幾個屬性繼承相同的資料內容的功能，您可以使用 [來源] 屬性，而不是`DataContext`屬性。       <xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName>和<xref:System.Windows.Data.Binding.RelativeSource%2A?displayProperty=fullName>屬性也可讓您設定的繫結來源明確。</xref:System.Windows.Data.Binding.RelativeSource%2A?displayProperty=fullName> </xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName> 不過，只有三個屬性，其中<xref:System.Windows.Data.Binding.ElementName%2A>，來源和<xref:System.Windows.Data.Binding.RelativeSource%2A>、 應該設定為每個繫結，或可能會發生衝突。</xref:System.Windows.Data.Binding.RelativeSource%2A> </xref:System.Windows.Data.Binding.ElementName%2A> 如果繫結來源衝突，則這個屬性會擲回例外狀況。       若要清除此屬性，將它設定為<xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName>.</xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName>      <a name=&quot;xamlAttributeUsage_Source&quot;></a># # XAML 屬性使用方式```   <object Source=&quot;object&quot;/>   ``` <a name=&quot;xamlValues_Source&quot;> </a> # # XAML 值*物件*現有的物件。       若要參考現有的物件，使用[StaticResource 標記延伸](~/add/includes/ajax-current-ext-md.md)"
  example:
  - "In this example, you have a `Person` object with a string property named `PersonName`. The `Person` object is defined in the namespace called `SDKSample`.  \n  \n The following example instantiates the `Person` object with a `PersonName` property value of `Joe`. This is done in the `Resources` section and assigned an `x:Key`.  \n  \n [!code-xml[SimpleBinding#Instantiation](~/add/codesnippet/xaml/SimpleBinding.SimpleBinding/Page1.xaml#instantiation)]  \n[!code-xml[SimpleBinding#2](~/add/codesnippet/xaml/SimpleBinding.SimpleBinding/Page1.xaml#2)]  \n[!code-xml[SimpleBinding#EndWindow](~/add/codesnippet/xaml/SimpleBinding.SimpleBinding/Page1.xaml#endwindow)]  \n  \n To bind to the `PersonName` property you would do the following:  \n  \n [!code-xml[SimpleBinding#BDO1](~/add/codesnippet/xaml/SimpleBinding.SimpleBinding/Page1.xaml#bdo1)]  \n  \n As a result, the <xref:System.Windows.Controls.TextBlock> appears with the value \"Joe\".  \n  \n In the following example, the Source values of the <xref:System.Windows.Data.Binding> objects are set to the `static` property <xref:System.Windows.Application.Current%2A?displayProperty=fullName>:  \n  \n [!code-xml[DataBindingLab#ComboBoxMultiBinding](~/add/codesnippet/xaml/DataBindingLab/AddProductWindow.xaml#comboboxmultibinding)]  \n  \n For the full example, see [Data Binding Demo](http://go.microsoft.com/fwlink/?LinkID=163703)."
  syntax:
    content: public object Source { get; set; }
    return:
      type: System.Object
      description: "要作為繫結來源物件。"
  overload: System.Windows.Data.Binding.Source*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.SourceUpdatedEvent
  id: SourceUpdatedEvent
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: SourceUpdatedEvent
  nameWithType: Binding.SourceUpdatedEvent
  fullName: System.Windows.Data.Binding.SourceUpdatedEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "識別<xref:System.Windows.Data.Binding.SourceUpdated>附加事件。</xref:System.Windows.Data.Binding.SourceUpdated>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent SourceUpdatedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.TargetUpdatedEvent
  id: TargetUpdatedEvent
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: TargetUpdatedEvent
  nameWithType: Binding.TargetUpdatedEvent
  fullName: System.Windows.Data.Binding.TargetUpdatedEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "識別<xref:System.Windows.Data.Binding.TargetUpdated>附加事件。</xref:System.Windows.Data.Binding.TargetUpdated>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TargetUpdatedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.UpdateSourceExceptionFilter
  id: UpdateSourceExceptionFilter
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: UpdateSourceExceptionFilter
  nameWithType: Binding.UpdateSourceExceptionFilter
  fullName: System.Windows.Data.Binding.UpdateSourceExceptionFilter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得或設定可用來提供自訂邏輯以處理繫結引擎在更新繫結來源值期間所遇到的例外狀況處理常式。 這個內容僅適用於具有相關聯<xref href=&quot;System.Windows.Controls.ExceptionValidationRule&quot;></xref>與繫結。"
  remarks: "<xref:System.Windows.Controls.ExceptionValidationRule>是內建的驗證規則會檢查繫結來源屬性更新期間擲回的例外狀況。</xref:System.Windows.Controls.ExceptionValidationRule> 如果您有相關聯<xref:System.Windows.Controls.ExceptionValidationRule>與您<xref:System.Windows.Data.Binding>物件，您可以使用這個屬性設定來提供自訂邏輯以處理這些例外狀況處理常式。</xref:System.Windows.Data.Binding> </xref:System.Windows.Controls.ExceptionValidationRule> 上未指定 UpdateSourceExceptionFilter <xref:System.Windows.Data.Binding>，建立繫結引擎<xref:System.Windows.Controls.ValidationError>與例外狀況並將它加入<xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>繫結項目的集合。</xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> </xref:System.Windows.Controls.ValidationError> </xref:System.Windows.Data.Binding>"
  example:
  - "The <xref:System.Windows.Controls.TextBox.Text%2A> property of the following <xref:System.Windows.Controls.TextBox> is data-bound to a source property `Age3` that is of type `int`. The <xref:System.Windows.Controls.ExceptionValidationRule> checks for exceptions that are thrown during the update of the source property (such as when the user enters a value that cannot be converted to an integer).  \n  \n [!code-xml[BindValidation#tbExceptionFilter](~/add/codesnippet/xaml/BindingValidation/Window1.xaml#tbexceptionfilter)]  \n  \n You can provide custom logic to handle those exceptions. The following example shows how to use the UpdateSourceExceptionFilter property to set an <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  \n  \n [!code-cs[BindValidation#filtercallback](~/add/codesnippet/csharp/BindingValidation/Window1.xaml.cs#filtercallback)]  \n  \n The following is an example implementation of an <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  \n  \n [!code-cs[BindValidation#Handler](~/add/codesnippet/csharp/BindingValidation/Window1.xaml.cs#handler)]  \n  \n The <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback> can also return `null`, the exception itself, or a <xref:System.Windows.Controls.ValidationError>. For more information, see <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  \n  \n For the complete sample, see [Binding Validation Sample](http://go.microsoft.com/fwlink/?LinkID=159972)."
  syntax:
    content: public System.Windows.Data.UpdateSourceExceptionFilterCallback UpdateSourceExceptionFilter { get; set; }
    return:
      type: System.Windows.Data.UpdateSourceExceptionFilterCallback
      description: "提供自訂邏輯以處理繫結引擎在更新繫結來源值期間所遇到之例外狀況的方法。"
  overload: System.Windows.Data.Binding.UpdateSourceExceptionFilter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.UpdateSourceTrigger
  id: UpdateSourceTrigger
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: UpdateSourceTrigger
  nameWithType: Binding.UpdateSourceTrigger
  fullName: System.Windows.Data.Binding.UpdateSourceTrigger
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得或設定值，這個值會判斷繫結來源更新的時機。"
  remarks: "繫結<xref:System.Windows.Data.BindingMode>或<xref:System.Windows.Data.BindingMode>接聽中的目標屬性的變更，並將它們傳播回來源。</xref:System.Windows.Data.BindingMode> </xref:System.Windows.Data.BindingMode> 這稱為更新來源。 通常，當目標屬性變更時，就可能發生這些更新。 這是正常的核取方塊和其他簡單的控制項，但它通常不是適用於文字欄位。 每個按鍵動作可能會降低效能，並拒絕使用者一般機會退格鍵並認可新的值之前修正輸入錯誤之後更新。 因此的預設 UpdateSourceTrigger 值<xref:System.Windows.Controls.TextBox.Text%2A>屬性是<xref:System.Windows.Data.UpdateSourceTrigger>而非<xref:System.Windows.Data.UpdateSourceTrigger>.</xref:System.Windows.Data.UpdateSourceTrigger> </xref:System.Windows.Data.UpdateSourceTrigger> </xref:System.Windows.Controls.TextBox.Text%2A>       如果您將設定 UpdateSourceTrigger 值<xref:System.Windows.Data.UpdateSourceTrigger>，您必須呼叫<xref:System.Windows.Data.BindingExpression.UpdateSource%2A>方法或所做的變更將不會傳播到來源。</xref:System.Windows.Data.BindingExpression.UpdateSource%2A> </xref:System.Windows.Data.UpdateSourceTrigger>"
  syntax:
    content: public System.Windows.Data.UpdateSourceTrigger UpdateSourceTrigger { get; set; }
    return:
      type: System.Windows.Data.UpdateSourceTrigger
      description: "其中一個<xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;></xref>值。 預設值是<xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>，它會傳回預設<xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;></xref>目標相依性屬性的值。 不過，大多數相依性屬性的預設值是<xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>，雖然<> *> 屬性具有預設值是<xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>。     若要取得屬性中繼資料屬性使用的是程式設計的方式，以判斷相依性屬性的預設 UpdateSourceTrigger 值<> *>，然後檢查值<xref:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger*>屬性。</xref:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger*>"
  overload: System.Windows.Data.Binding.UpdateSourceTrigger*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ValidatesOnDataErrors
  id: ValidatesOnDataErrors
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ValidatesOnDataErrors
  nameWithType: Binding.ValidatesOnDataErrors
  fullName: System.Windows.Data.Binding.ValidatesOnDataErrors
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得或設定值，指出是否要包含<xref href=&quot;System.Windows.Controls.DataErrorValidationRule&quot;> </xref>。"
  remarks: "設定這個屬性提供替代<xref:System.Windows.Controls.DataErrorValidationRule>元素明確。</xref:System.Windows.Controls.DataErrorValidationRule> <xref:System.Windows.Controls.DataErrorValidationRule>是內建的驗證規則，以檢查所引發的錯誤<xref:System.ComponentModel.IDataErrorInfo>來源物件的實作。</xref:System.ComponentModel.IDataErrorInfo> </xref:System.Windows.Controls.DataErrorValidationRule> 如果會引發錯誤，就會建立繫結引擎<xref:System.Windows.Controls.ValidationError>發生錯誤並將它加入<xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>繫結項目的集合。</xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> </xref:System.Windows.Controls.ValidationError> 錯誤缺乏清除這個驗證回應，除非另一項規則會引發驗證問題。       .NET Framework 3.5 版中引進 ValidatesOnDataErrors。  如需詳細資訊，請參閱[.NET Framework 版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following examples uses <xref:System.ComponentModel.IDataErrorInfo> and ValidatesOnDataErrors to validate user input in a <xref:System.Windows.Controls.TextBox>. The first example creates a data type that implements <xref:System.ComponentModel.IDataErrorInfo> to report validation errors.  \n  \n [!code-cs[BindingValidationAttributesSnippets#IDataErrorInfoData](~/add/codesnippet/csharp/bindingvalidationattributessnippets/data.cs#idataerrorinfodata)]\n [!code-vb[BindingValidationAttributesSnippets#IDataErrorInfoData](~/add/codesnippet/visualbasic/bindingvalidationattributessnippets/window1.xaml.vb#idataerrorinfodata)]  \n  \n The following example binds the `Age` property to the <xref:System.Windows.Controls.TextBox> and sets ValidatesOnDataErrors to `true` on the <xref:System.Windows.Data.Binding>.  When the user enters an invalid value, a red border appears in the <xref:System.Windows.Controls.TextBox> and the <xref:System.Windows.Controls.ToolTip> reports the error message.  \n  \n [!code-xml[BindingValidationAttributesSnippets#IDataErrorInfoXaml](~/add/codesnippet/xaml/bindingvalidationattributessnippets/window1.xaml#idataerrorinfoxaml)]"
  syntax:
    content: public bool ValidatesOnDataErrors { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>要包含<xref href=&quot;System.Windows.Controls.DataErrorValidationRule&quot;> </xref>，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.ValidatesOnDataErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ValidatesOnExceptions
  id: ValidatesOnExceptions
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ValidatesOnExceptions
  nameWithType: Binding.ValidatesOnExceptions
  fullName: System.Windows.Data.Binding.ValidatesOnExceptions
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得或設定值，指出是否要包含<xref href=&quot;System.Windows.Controls.ExceptionValidationRule&quot;> </xref>。"
  remarks: "設定這個屬性提供替代<xref:System.Windows.Controls.ExceptionValidationRule>元素明確。</xref:System.Windows.Controls.ExceptionValidationRule> <xref:System.Windows.Controls.ExceptionValidationRule>是內建的驗證規則會檢查來源屬性更新期間所擲回的例外狀況。</xref:System.Windows.Controls.ExceptionValidationRule> 如果擲回例外狀況，就會建立繫結引擎<xref:System.Windows.Controls.ValidationError>與例外狀況並將它加入<xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>繫結項目的集合。</xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> </xref:System.Windows.Controls.ValidationError> 錯誤缺乏清除這個驗證回應，除非另一項規則會引發驗證問題。       .NET Framework 3.5 版中引進 ValidatesOnExceptions。  如需詳細資訊，請參閱[.NET Framework 版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following examples use ValidatesOnExceptions to validate user input in a <xref:System.Windows.Controls.TextBox>. The first example creates a data type that throws an exception when the `Age` property is set to an invalid property.  \n  \n [!code-cs[BindingValidationAttributesSnippets#ThrowExceptionData](~/add/codesnippet/csharp/bindingvalidationattributessnippets/data.cs#throwexceptiondata)]\n [!code-vb[BindingValidationAttributesSnippets#ThrowExceptionData](~/add/codesnippet/visualbasic/bindingvalidationattributessnippets/window1.xaml.vb#throwexceptiondata)]  \n  \n The following example binds the `Age` property to the <xref:System.Windows.Controls.TextBox> and sets ValidatesOnExceptions to `true` on the <xref:System.Windows.Data.Binding>. When the user enters an invalid value, a red border appears in the <xref:System.Windows.Controls.TextBox> and the <xref:System.Windows.Controls.ToolTip> reports the error message.  \n  \n [!code-xml[BindingValidationAttributesSnippets#ThrowExceptionXaml](~/add/codesnippet/xaml/bindingvalidationattributessnippets/window1.xaml#throwexceptionxaml)]"
  syntax:
    content: public bool ValidatesOnExceptions { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>要包含<xref href=&quot;System.Windows.Controls.ExceptionValidationRule&quot;> </xref>，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.ValidatesOnExceptions*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
  id: ValidatesOnNotifyDataErrors
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ValidatesOnNotifyDataErrors
  nameWithType: Binding.ValidatesOnNotifyDataErrors
  fullName: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得或設定值，指出是否要包含<xref href=&quot;System.Windows.Controls.NotifyDataErrorValidationRule&quot;> </xref>。"
  remarks: "ValidatesOnNotifyDataErrors 時`true`，繫結檢查，並報告的資料來源所實作<xref:System.ComponentModel.INotifyDataErrorInfo>.</xref:System.ComponentModel.INotifyDataErrorInfo>所引發的錯誤"
  syntax:
    content: public bool ValidatesOnNotifyDataErrors { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>要包含<xref href=&quot;System.Windows.Controls.NotifyDataErrorValidationRule&quot;> </xref>，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ValidationRules
  id: ValidationRules
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ValidationRules
  nameWithType: Binding.ValidationRules
  fullName: System.Windows.Data.Binding.ValidationRules
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得檢查使用者輸入有效性的規則集合。"
  remarks: "[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]資料繫結模型可讓您將使用 ValidationRules 您<xref:System.Windows.Data.Binding>或<xref:System.Windows.Data.MultiBinding>物件。</xref:System.Windows.Data.MultiBinding> </xref:System.Windows.Data.Binding> 您可以建立自訂規則衍生自<xref:System.Windows.Controls.ValidationRule>類別，並實作<xref:System.Windows.Controls.ValidationRule.Validate%2A>方法，或者您可以使用內建<xref:System.Windows.Controls.ExceptionValidationRule>，這會使值，如果在來源更新期間有例外狀況。</xref:System.Windows.Controls.ExceptionValidationRule> </xref:System.Windows.Controls.ValidationRule.Validate%2A> </xref:System.Windows.Controls.ValidationRule>       繫結引擎會檢查每個<xref:System.Windows.Controls.ValidationRule>每次輸入的值 （繫結目標屬性值） 轉送到繫結來源屬性的繫結相關聯。</xref:System.Windows.Controls.ValidationRule> 驗證程序的詳細討論，請參閱中的資料驗證一節[資料繫結概觀](~/add/includes/ajax-current-ext-md.md)。      > [!NOTE] >，可以設定這個屬性[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]只能使用集合語法所示，或藉由存取的集合物件，使用的各種方法，例如`Add`。 要存取的集合物件的屬性是唯讀的而集合本身則是讀寫。      <a name=&quot;xamlPropertyElementUsage_ValidationRules&quot;></a># # XAML 屬性項目用法```   <object>     <object.ValidationRules>       oneOrMoreValidationRules     </object.ValidationRules>   </object>      ``` <a name=&quot;xamlValues_ValidationRules&quot;> </a> # # XAML 值*oneOrMoreValidationRules*一或多個<xref:System.Windows.Controls.ValidationRule>物件。</xref:System.Windows.Controls.ValidationRule>       您可以使用<xref:System.Windows.Controls.ExceptionValidationRule>類別或建立自訂規則的子類別化<xref:System.Windows.Controls.ValidationRule>類別。</xref:System.Windows.Controls.ValidationRule> </xref:System.Windows.Controls.ExceptionValidationRule>"
  syntax:
    content: public System.Collections.ObjectModel.Collection<System.Windows.Controls.ValidationRule> ValidationRules { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Windows.Controls.ValidationRule}
      description: "集合<xref href=&quot;System.Windows.Controls.ValidationRule&quot;></xref>物件。"
  overload: System.Windows.Data.Binding.ValidationRules*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.XmlNamespaceManagerProperty
  id: XmlNamespaceManagerProperty
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: XmlNamespaceManagerProperty
  nameWithType: Binding.XmlNamespaceManagerProperty
  fullName: System.Windows.Data.Binding.XmlNamespaceManagerProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "識別<xref:System.Windows.Data.Binding.XmlNamespaceManager*>附加屬性。</xref:System.Windows.Data.Binding.XmlNamespaceManager*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty XmlNamespaceManagerProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.XPath
  id: XPath
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: XPath
  nameWithType: Binding.XPath
  fullName: System.Windows.Data.Binding.XPath
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得或設定<xref uid=&quot;langword_csharp_XPath&quot; name=&quot;XPath&quot; href=&quot;&quot;></xref>傳回的值的查詢[!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)]繫結來源使用。"
  remarks: "繫結來源時[!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)]資料，而非[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]物件，而不是使用 XPath 屬性<xref:System.Windows.Data.Binding.Path%2A>屬性，指出要使用的繫結來源上的值的路徑。</xref:System.Windows.Data.Binding.Path%2A>       藉由設定 [XPath] 屬性，您要建立`XPath`查詢，以選取的節點的集合 (<xref:System.Xml.XmlElement?displayProperty=fullName>和<xref:System.Xml.XmlAttribute?displayProperty=fullName>兩者都衍生自<xref:System.Xml.XmlNode?displayProperty=fullName>)。</xref:System.Xml.XmlNode?displayProperty=fullName> </xref:System.Xml.XmlAttribute?displayProperty=fullName> </xref:System.Xml.XmlElement?displayProperty=fullName> <xref:System.Xml.XmlNode?displayProperty=fullName>是[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]物件，這表示您可以使用其屬性的繫結<xref:System.Windows.Data.Binding.Path%2A>屬性。</xref:System.Windows.Data.Binding.Path%2A></xref:System.Xml.XmlNode?displayProperty=fullName>       <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>方法會處理`XPath`XPath 屬性中的運算式。</xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName> `XPath`不支援函式。 如`XPath`運算式的詳細資訊，請參閱<xref:System.Xml.XmlNode.SelectNodes%2A>文件集和範例 > 一節中提供一些範例。</xref:System.Xml.XmlNode.SelectNodes%2A>       LINQ to XML 物件<xref:System.Xml.Linq.XDocument>和<xref:System.Xml.Linq.XElement>不要使用`XPath`。</xref:System.Xml.Linq.XElement> </xref:System.Xml.Linq.XDocument> 如需詳細資訊，請參閱[How to: for XML 查詢結果繫結至 XDocument、 XElement 或 LINQ](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public string XPath { get; set; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_XPath&quot; name=&quot;XPath&quot; href=&quot;&quot;> </xref>查詢。 預設值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.XPath*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Data.BindingBase
  isExternal: false
  name: System.Windows.Data.BindingBase
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Data.Binding.#ctor
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Binding()
  nameWithType: Binding.Binding()
  fullName: System.Windows.Data.Binding.Binding()
- uid: System.Windows.Data.Binding.#ctor(System.String)
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Binding(String)
  nameWithType: Binding.Binding(String)
  fullName: System.Windows.Data.Binding.Binding(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Data.Binding.AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<DataTransferEventArgs>
  nameWithType: EventHandler<DataTransferEventArgs>
  fullName: System.EventHandler<System.Windows.Data.DataTransferEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Data.DataTransferEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Data.DataTransferEventArgs
    name: DataTransferEventArgs
    nameWithType: DataTransferEventArgs
    fullName: DataTransferEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Data.Binding.AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
- uid: System.Windows.Data.Binding.AsyncState
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AsyncState
  nameWithType: Binding.AsyncState
  fullName: System.Windows.Data.Binding.AsyncState
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Data.Binding.BindsDirectlyToSource
  parent: System.Windows.Data.Binding
  isExternal: false
  name: BindsDirectlyToSource
  nameWithType: Binding.BindsDirectlyToSource
  fullName: System.Windows.Data.Binding.BindsDirectlyToSource
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Data.Binding.Converter
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Converter
  nameWithType: Binding.Converter
  fullName: System.Windows.Data.Binding.Converter
- uid: System.Windows.Data.IValueConverter
  parent: System.Windows.Data
  isExternal: false
  name: IValueConverter
  nameWithType: IValueConverter
  fullName: System.Windows.Data.IValueConverter
- uid: System.Windows.Data.Binding.ConverterCulture
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ConverterCulture
  nameWithType: Binding.ConverterCulture
  fullName: System.Windows.Data.Binding.ConverterCulture
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Windows.Data.Binding.ConverterParameter
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ConverterParameter
  nameWithType: Binding.ConverterParameter
  fullName: System.Windows.Data.Binding.ConverterParameter
- uid: System.Windows.Data.Binding.DoNothing
  parent: System.Windows.Data.Binding
  isExternal: false
  name: DoNothing
  nameWithType: Binding.DoNothing
  fullName: System.Windows.Data.Binding.DoNothing
- uid: System.Windows.Data.Binding.ElementName
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ElementName
  nameWithType: Binding.ElementName
  fullName: System.Windows.Data.Binding.ElementName
- uid: System.Windows.Data.Binding.GetXmlNamespaceManager(System.Windows.DependencyObject)
  parent: System.Windows.Data.Binding
  isExternal: false
  name: GetXmlNamespaceManager(DependencyObject)
  nameWithType: Binding.GetXmlNamespaceManager(DependencyObject)
  fullName: System.Windows.Data.Binding.GetXmlNamespaceManager(DependencyObject)
- uid: System.Xml.XmlNamespaceManager
  parent: System.Xml
  isExternal: true
  name: XmlNamespaceManager
  nameWithType: XmlNamespaceManager
  fullName: System.Xml.XmlNamespaceManager
- uid: System.Windows.Data.Binding.IndexerName
  parent: System.Windows.Data.Binding
  isExternal: false
  name: IndexerName
  nameWithType: Binding.IndexerName
  fullName: System.Windows.Data.Binding.IndexerName
- uid: System.Windows.Data.Binding.IsAsync
  parent: System.Windows.Data.Binding
  isExternal: false
  name: IsAsync
  nameWithType: Binding.IsAsync
  fullName: System.Windows.Data.Binding.IsAsync
- uid: System.Windows.Data.Binding.Mode
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Mode
  nameWithType: Binding.Mode
  fullName: System.Windows.Data.Binding.Mode
- uid: System.Windows.Data.BindingMode
  parent: System.Windows.Data
  isExternal: false
  name: BindingMode
  nameWithType: BindingMode
  fullName: System.Windows.Data.BindingMode
- uid: System.Windows.Data.Binding.NotifyOnSourceUpdated
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnSourceUpdated
  nameWithType: Binding.NotifyOnSourceUpdated
  fullName: System.Windows.Data.Binding.NotifyOnSourceUpdated
- uid: System.Windows.Data.Binding.NotifyOnTargetUpdated
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnTargetUpdated
  nameWithType: Binding.NotifyOnTargetUpdated
  fullName: System.Windows.Data.Binding.NotifyOnTargetUpdated
- uid: System.Windows.Data.Binding.NotifyOnValidationError
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnValidationError
  nameWithType: Binding.NotifyOnValidationError
  fullName: System.Windows.Data.Binding.NotifyOnValidationError
- uid: System.Windows.Data.Binding.Path
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Path
  nameWithType: Binding.Path
  fullName: System.Windows.Data.Binding.Path
- uid: System.Windows.PropertyPath
  parent: System.Windows
  isExternal: false
  name: PropertyPath
  nameWithType: PropertyPath
  fullName: System.Windows.PropertyPath
- uid: System.Windows.Data.Binding.RelativeSource
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RelativeSource
  nameWithType: Binding.RelativeSource
  fullName: System.Windows.Data.Binding.RelativeSource
- uid: System.Windows.Data.RelativeSource
  parent: System.Windows.Data
  isExternal: false
  name: RelativeSource
  nameWithType: RelativeSource
  fullName: System.Windows.Data.RelativeSource
- uid: System.Windows.Data.Binding.RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
- uid: System.Windows.Data.Binding.RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
- uid: System.Windows.Data.Binding.SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)
  parent: System.Windows.Data.Binding
  isExternal: false
  name: SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  nameWithType: Binding.SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  fullName: System.Windows.Data.Binding.SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
- uid: System.Windows.Data.Binding.ShouldSerializePath
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializePath()
  nameWithType: Binding.ShouldSerializePath()
  fullName: System.Windows.Data.Binding.ShouldSerializePath()
- uid: System.Windows.Data.Binding.ShouldSerializeSource
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializeSource()
  nameWithType: Binding.ShouldSerializeSource()
  fullName: System.Windows.Data.Binding.ShouldSerializeSource()
- uid: System.Windows.Data.Binding.ShouldSerializeValidationRules
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializeValidationRules()
  nameWithType: Binding.ShouldSerializeValidationRules()
  fullName: System.Windows.Data.Binding.ShouldSerializeValidationRules()
- uid: System.Windows.Data.Binding.Source
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Source
  nameWithType: Binding.Source
  fullName: System.Windows.Data.Binding.Source
- uid: System.Windows.Data.Binding.SourceUpdatedEvent
  parent: System.Windows.Data.Binding
  isExternal: false
  name: SourceUpdatedEvent
  nameWithType: Binding.SourceUpdatedEvent
  fullName: System.Windows.Data.Binding.SourceUpdatedEvent
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Windows.Data.Binding.TargetUpdatedEvent
  parent: System.Windows.Data.Binding
  isExternal: false
  name: TargetUpdatedEvent
  nameWithType: Binding.TargetUpdatedEvent
  fullName: System.Windows.Data.Binding.TargetUpdatedEvent
- uid: System.Windows.Data.Binding.UpdateSourceExceptionFilter
  parent: System.Windows.Data.Binding
  isExternal: false
  name: UpdateSourceExceptionFilter
  nameWithType: Binding.UpdateSourceExceptionFilter
  fullName: System.Windows.Data.Binding.UpdateSourceExceptionFilter
- uid: System.Windows.Data.UpdateSourceExceptionFilterCallback
  parent: System.Windows.Data
  isExternal: false
  name: UpdateSourceExceptionFilterCallback
  nameWithType: UpdateSourceExceptionFilterCallback
  fullName: System.Windows.Data.UpdateSourceExceptionFilterCallback
- uid: System.Windows.Data.Binding.UpdateSourceTrigger
  parent: System.Windows.Data.Binding
  isExternal: false
  name: UpdateSourceTrigger
  nameWithType: Binding.UpdateSourceTrigger
  fullName: System.Windows.Data.Binding.UpdateSourceTrigger
- uid: System.Windows.Data.UpdateSourceTrigger
  parent: System.Windows.Data
  isExternal: false
  name: UpdateSourceTrigger
  nameWithType: UpdateSourceTrigger
  fullName: System.Windows.Data.UpdateSourceTrigger
- uid: System.Windows.Data.Binding.ValidatesOnDataErrors
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnDataErrors
  nameWithType: Binding.ValidatesOnDataErrors
  fullName: System.Windows.Data.Binding.ValidatesOnDataErrors
- uid: System.Windows.Data.Binding.ValidatesOnExceptions
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnExceptions
  nameWithType: Binding.ValidatesOnExceptions
  fullName: System.Windows.Data.Binding.ValidatesOnExceptions
- uid: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnNotifyDataErrors
  nameWithType: Binding.ValidatesOnNotifyDataErrors
  fullName: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
- uid: System.Windows.Data.Binding.ValidationRules
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidationRules
  nameWithType: Binding.ValidationRules
  fullName: System.Windows.Data.Binding.ValidationRules
- uid: System.Collections.ObjectModel.Collection{System.Windows.Controls.ValidationRule}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<ValidationRule>
  nameWithType: Collection<ValidationRule>
  fullName: System.Collections.ObjectModel.Collection<System.Windows.Controls.ValidationRule>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Windows.Controls.ValidationRule>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Controls.ValidationRule
    name: ValidationRule
    nameWithType: ValidationRule
    fullName: ValidationRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Data.Binding.XmlNamespaceManagerProperty
  parent: System.Windows.Data.Binding
  isExternal: false
  name: XmlNamespaceManagerProperty
  nameWithType: Binding.XmlNamespaceManagerProperty
  fullName: System.Windows.Data.Binding.XmlNamespaceManagerProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Data.Binding.XPath
  parent: System.Windows.Data.Binding
  isExternal: false
  name: XPath
  nameWithType: Binding.XPath
  fullName: System.Windows.Data.Binding.XPath
- uid: System.Windows.Data.Binding.#ctor*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Binding
  nameWithType: Binding.Binding
- uid: System.Windows.Data.Binding.AddSourceUpdatedHandler*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AddSourceUpdatedHandler
  nameWithType: Binding.AddSourceUpdatedHandler
- uid: System.Windows.Data.Binding.AddTargetUpdatedHandler*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AddTargetUpdatedHandler
  nameWithType: Binding.AddTargetUpdatedHandler
- uid: System.Windows.Data.Binding.AsyncState*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AsyncState
  nameWithType: Binding.AsyncState
- uid: System.Windows.Data.Binding.BindsDirectlyToSource*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: BindsDirectlyToSource
  nameWithType: Binding.BindsDirectlyToSource
- uid: System.Windows.Data.Binding.Converter*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Converter
  nameWithType: Binding.Converter
- uid: System.Windows.Data.Binding.ConverterCulture*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ConverterCulture
  nameWithType: Binding.ConverterCulture
- uid: System.Windows.Data.Binding.ConverterParameter*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ConverterParameter
  nameWithType: Binding.ConverterParameter
- uid: System.Windows.Data.Binding.ElementName*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ElementName
  nameWithType: Binding.ElementName
- uid: System.Windows.Data.Binding.GetXmlNamespaceManager*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: GetXmlNamespaceManager
  nameWithType: Binding.GetXmlNamespaceManager
- uid: System.Windows.Data.Binding.IsAsync*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: IsAsync
  nameWithType: Binding.IsAsync
- uid: System.Windows.Data.Binding.Mode*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Mode
  nameWithType: Binding.Mode
- uid: System.Windows.Data.Binding.NotifyOnSourceUpdated*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnSourceUpdated
  nameWithType: Binding.NotifyOnSourceUpdated
- uid: System.Windows.Data.Binding.NotifyOnTargetUpdated*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnTargetUpdated
  nameWithType: Binding.NotifyOnTargetUpdated
- uid: System.Windows.Data.Binding.NotifyOnValidationError*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnValidationError
  nameWithType: Binding.NotifyOnValidationError
- uid: System.Windows.Data.Binding.Path*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Path
  nameWithType: Binding.Path
- uid: System.Windows.Data.Binding.RelativeSource*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RelativeSource
  nameWithType: Binding.RelativeSource
- uid: System.Windows.Data.Binding.RemoveSourceUpdatedHandler*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RemoveSourceUpdatedHandler
  nameWithType: Binding.RemoveSourceUpdatedHandler
- uid: System.Windows.Data.Binding.RemoveTargetUpdatedHandler*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RemoveTargetUpdatedHandler
  nameWithType: Binding.RemoveTargetUpdatedHandler
- uid: System.Windows.Data.Binding.SetXmlNamespaceManager*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: SetXmlNamespaceManager
  nameWithType: Binding.SetXmlNamespaceManager
- uid: System.Windows.Data.Binding.ShouldSerializePath*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializePath
  nameWithType: Binding.ShouldSerializePath
- uid: System.Windows.Data.Binding.ShouldSerializeSource*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializeSource
  nameWithType: Binding.ShouldSerializeSource
- uid: System.Windows.Data.Binding.ShouldSerializeValidationRules*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializeValidationRules
  nameWithType: Binding.ShouldSerializeValidationRules
- uid: System.Windows.Data.Binding.Source*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Source
  nameWithType: Binding.Source
- uid: System.Windows.Data.Binding.UpdateSourceExceptionFilter*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: UpdateSourceExceptionFilter
  nameWithType: Binding.UpdateSourceExceptionFilter
- uid: System.Windows.Data.Binding.UpdateSourceTrigger*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: UpdateSourceTrigger
  nameWithType: Binding.UpdateSourceTrigger
- uid: System.Windows.Data.Binding.ValidatesOnDataErrors*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnDataErrors
  nameWithType: Binding.ValidatesOnDataErrors
- uid: System.Windows.Data.Binding.ValidatesOnExceptions*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnExceptions
  nameWithType: Binding.ValidatesOnExceptions
- uid: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnNotifyDataErrors
  nameWithType: Binding.ValidatesOnNotifyDataErrors
- uid: System.Windows.Data.Binding.ValidationRules*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidationRules
  nameWithType: Binding.ValidationRules
- uid: System.Windows.Data.Binding.XPath*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: XPath
  nameWithType: Binding.XPath
