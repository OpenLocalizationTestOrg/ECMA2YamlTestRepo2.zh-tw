### YamlMime:ManagedReference
items:
- uid: System.Security.Claims.ClaimsIdentity
  id: ClaimsIdentity
  children:
  - System.Security.Claims.ClaimsIdentity.#ctor
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.Actor
  - System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.AuthenticationType
  - System.Security.Claims.ClaimsIdentity.BootstrapContext
  - System.Security.Claims.ClaimsIdentity.Claims
  - System.Security.Claims.ClaimsIdentity.Clone
  - System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsIdentity.CustomSerializationData
  - System.Security.Claims.ClaimsIdentity.DefaultIssuer
  - System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  - System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  - System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  - System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  - System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.IsAuthenticated
  - System.Security.Claims.ClaimsIdentity.Label
  - System.Security.Claims.ClaimsIdentity.Name
  - System.Security.Claims.ClaimsIdentity.NameClaimType
  - System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.RoleClaimType
  - System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  langs:
  - csharp
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
  type: Class
  summary: "代表宣告式身分識別。"
  remarks: "ClaimsIdentity 類別是具象實作的宣告式身分識別。也就是宣告的集合所描述的身分識別。 宣告是由未描述的屬性，權限的簽發者或某些其他品質，該實體的實體有關的陳述式。 這種實體稱為宣告主體。 宣告被以<xref:System.Security.Claims.Claim>類別。</xref:System.Security.Claims.Claim> ClaimsIdentity 中包含的宣告描述的實體，代表對應身分識別，而且可用來做出授權和驗證。 宣告型存取模型有許多優於傳統依賴角色的存取模型。 例如，宣告可以提供更豐富的身分識別，它們代表，並且可以以更特定的方式進行評估的授權或驗證相關資訊。       從.NET Framework 4.5 開始，Windows Identity Foundation (WIF) 和宣告式身分識別已完全整合到.NET Framework。 這表示代表.NET Framework 中的身分識別的許多類別現在是衍生自 ClaimsIdentity，並描述其屬性，透過宣告的集合。 這點不同於舊版的.NET Framework 中，在其中實作這些類別<xref:System.Security.Principal.IIdentity>介面直接。</xref:System.Security.Principal.IIdentity> 可以透過存取所描述的身分識別的宣告集合<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>屬性。</xref:System.Security.Claims.ClaimsIdentity.Claims%2A> ClaimsIdentity 類別提供數種方法來尋找和修改宣告，並完全支援語言整合查詢 (LINQ)。 在應用程式碼中，身分識別物件通常會透過<xref:System.Security.Claims.ClaimsPrincipal>物件; 例如， <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>.</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>所傳回的主體</xref:System.Security.Claims.ClaimsPrincipal>      > [!NOTE] ><xref:System.Security.Claims.ClaimsPrincipal>類別具有<xref:System.Security.Claims.ClaimsPrincipal.Claims%2A>以及屬性。</xref:System.Security.Claims.ClaimsPrincipal.Claims%2A> </xref:System.Security.Claims.ClaimsPrincipal> 在大多數情況下，您應該存取使用者的宣告行經<xref:System.Security.Claims.ClaimsPrincipal.Claims%2A?displayProperty=fullName>集合而非透過<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>集合。</xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsPrincipal.Claims%2A?displayProperty=fullName> 您必須存取個別的 ClaimsIdentity 只在其中主體包含多個身分識別，而您需要評估，或修改特定的身分識別的案例中的宣告。      > [!IMPORTANT] > 來新增或移除的宣告<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>集合中，呼叫端必須具有完全信任。</xref:System.Security.Claims.ClaimsIdentity.Claims%2A>       在宣告為基礎的模型，<xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>屬性和<xref:System.Security.Principal.IPrincipal.IsInRole%28System.String%29?displayProperty=fullName>方法由評估包含由身分識別的宣告。</xref:System.Security.Principal.IPrincipal.IsInRole%28System.String%29?displayProperty=fullName> </xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName> 宣告為基礎的模型中的基底實作所提供的<xref:System.Security.Claims.ClaimsIdentity.Name%2A?displayProperty=fullName>屬性和<xref:System.Security.Claims.ClaimsPrincipal.IsInRole%2A?displayProperty=fullName>方法。</xref:System.Security.Claims.ClaimsPrincipal.IsInRole%2A?displayProperty=fullName> </xref:System.Security.Claims.ClaimsIdentity.Name%2A?displayProperty=fullName> <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>和<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>屬性可讓您指定應該用來評估執行這些作業時，由識別所包含的宣告的宣告類型。</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>       透過支援案例委派<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>和<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>屬性。</xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class ClaimsIdentity : System.Security.Principal.IIdentity
  inheritance:
  - System.Object
  implements:
  - System.Security.Principal.IIdentity
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor
  id: '#ctor'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity()
  nameWithType: ClaimsIdentity.ClaimsIdentity()
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>空類別宣告的集合。"
  remarks: "下表顯示的<xref:System.Security.Claims.ClaimsIdentity>類別</xref:System.Security.Claims.ClaimsIdentity>執行個體的初始屬性值      |屬性 |值 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|空的集合。 |  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**附註︰**存取時，<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>屬性的值根據傳回<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>屬性的值。 |  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|**附註︰**存取時，<xref:System.Security.Claims.ClaimsIdentity.Name%2A>屬性的值根據傳回<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>和<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>的集合。 |  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>.|  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>.|</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType></xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Label%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.Actor%2A>"
  syntax:
    content: public ClaimsIdentity ();
    parameters: []
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>類別使用的列舉的集合<xref href=&quot;System.Security.Claims.Claim&quot;></xref>物件。"
  remarks: "下表顯示的<xref:System.Security.Claims.ClaimsIdentity>類別</xref:System.Security.Claims.ClaimsIdentity>執行個體的初始屬性值      |屬性 |值 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|初始化從`claims`參數。 |  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**附註︰**存取時，<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>屬性的值根據傳回<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>屬性的值。 |  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|**附註︰**存取時，<xref:System.Security.Claims.ClaimsIdentity.Name%2A>屬性的值根據傳回<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>和<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>的集合。 |  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>.|  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>.|</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType></xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Label%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.Actor%2A>"
  syntax:
    content: public ClaimsIdentity (System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims);
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "用來填入宣告身分識別宣告。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader)
  id: '#ctor(System.IO.BinaryReader)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(BinaryReader)
  nameWithType: ClaimsIdentity.ClaimsIdentity(BinaryReader)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(BinaryReader)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: public ClaimsIdentity (System.IO.BinaryReader reader);
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "即將加入。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(SerializationInfo)
  nameWithType: ClaimsIdentity.ClaimsIdentity(SerializationInfo)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(SerializationInfo)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>類別建立使用序列化資料流從<xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref>。"
  syntax:
    content: protected ClaimsIdentity (System.Runtime.Serialization.SerializationInfo info);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "序列化的資料。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Claims.ClaimsIdentity)
  id: '#ctor(System.Security.Claims.ClaimsIdentity)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(ClaimsIdentity)
  nameWithType: ClaimsIdentity.ClaimsIdentity(ClaimsIdentity)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(ClaimsIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected ClaimsIdentity (System.Security.Claims.ClaimsIdentity other);
    parameters:
    - id: other
      type: System.Security.Claims.ClaimsIdentity
      description: "即將加入。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity)
  id: '#ctor(System.Security.Principal.IIdentity)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IIdentity)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>類別使用的名稱和驗證類型，從指定<xref:System.Security.Principal.IIdentity>.</xref:System.Security.Principal.IIdentity>"
  remarks: "下表顯示的<xref:System.Security.Claims.ClaimsIdentity>類別</xref:System.Security.Claims.ClaimsIdentity>執行個體的初始屬性值      |屬性 |值 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|如果`identity` <xref:System.Security.Claims.ClaimsIdentity>，從指派的值`identity.Actor`屬性，否則`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|值`identity.AuthenticationType`(<xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName>) 屬性使用。 |  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|如果`identity` <xref:System.Security.Claims.ClaimsIdentity>，從指派的值`identity.BootStrapContext`屬性，否則`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|如果`identity`會依從<xref:System.Security.Claims.ClaimsIdentity>，來自宣告`identity`會加入至新的執行個體; 否則為空集合。 |  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**附註︰**存取時，<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>屬性的值根據傳回<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>屬性的值。 |  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|如果`identity` <xref:System.Security.Claims.ClaimsIdentity>，從指派的值`identity.Label`屬性，否則`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|如果`identity`無法從<xref:System.Security.Claims.ClaimsIdentity>，不是`null`，且具有<xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>屬性不是`null`; 名稱宣告會新增至新的執行個體使用的值<xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>屬性。</xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName> </xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Label%2A> </xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A> </xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> </xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> **注意︰**存取時，<xref:System.Security.Claims.ClaimsIdentity.Name%2A>屬性的值根據傳回<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>和<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>的集合。 |  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|如果`identity` <xref:System.Security.Claims.ClaimsIdentity>，從指派的值`identity.NameClaimType`屬性使用; 否則會使用<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>。 |  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|如果`identity`會依從<xref:System.Security.Claims.ClaimsIdentity>，值`identity.RoleClaimType`屬性是用，否則<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>使用。 |</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A>"
  syntax:
    content: public ClaimsIdentity (System.Security.Principal.IIdentity identity);
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "從要依據新的宣告身分識別。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>空類別的宣告集合，以及指定的驗證類型。"
  remarks: "下表顯示的<xref:System.Security.Claims.ClaimsIdentity>類別</xref:System.Security.Claims.ClaimsIdentity>執行個體的初始屬性值      |屬性 |值 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|值`authenticationType`參數。</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 如果`authenticationType`參數是`null`或空字串，此屬性設為`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|空集合。 |  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**附註︰**存取時，<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>屬性的值根據傳回<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>屬性的值。 |  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|**附註︰**存取時，<xref:System.Security.Claims.ClaimsIdentity.Name%2A>屬性的值根據傳回<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>和<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>的集合。 |  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>.|  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>.|</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType></xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Label%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>"
  syntax:
    content: public ClaimsIdentity (string authenticationType);
    parameters:
    - id: authenticationType
      type: System.String
      description: "使用的驗證類型。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IEnumerable<Claim>,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>類別具有指定的宣告和驗證類型。"
  remarks: "下表顯示的<xref:System.Security.Claims.ClaimsIdentity>類別</xref:System.Security.Claims.ClaimsIdentity>執行個體的初始屬性值      |屬性 |值 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|值`authenticationType`參數。</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 如果`authenticationType`參數是`null`或空字串，此屬性設為`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|初始化從`claims`參數。 |  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**附註︰**存取時，<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>屬性的值根據傳回<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>屬性的值。 |  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|**附註︰**存取時，<xref:System.Security.Claims.ClaimsIdentity.Name%2A>屬性的值根據傳回<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>和<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>的集合。 |  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>.|  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>.|</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType></xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Label%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>"
  syntax:
    content: public ClaimsIdentity (System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType);
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "用來填入宣告身分識別宣告。"
    - id: authenticationType
      type: System.String
      description: "使用的驗證類型。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(SerializationInfo,StreamingContext)
  nameWithType: ClaimsIdentity.ClaimsIdentity(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>類別建立使用序列化資料流從<xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref>。"
  syntax:
    content: protected ClaimsIdentity (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "序列化的資料。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "序列化的內容。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  id: '#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IIdentity,IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>類別使用指定的宣告和指定<xref:System.Security.Principal.IIdentity>.</xref:System.Security.Principal.IIdentity>"
  remarks: "下表顯示的<xref:System.Security.Claims.ClaimsIdentity>類別</xref:System.Security.Claims.ClaimsIdentity>執行個體的初始屬性值      |屬性 |值 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|如果`identity` <xref:System.Security.Claims.ClaimsIdentity>，從指派的值`identity.Actor`屬性，否則`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|`authenticationType`參數。</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 如果`authenticationType`參數是`null`或空字串，值`identity.AuthenticationType`(<xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName>) 屬性使用。 |  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|如果`identity` <xref:System.Security.Claims.ClaimsIdentity>，從指派的值`identity.BootStrapContext`屬性，否則`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|初始化從`claims`參數。</xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A> </xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> 如果`identity`會依從<xref:System.Security.Claims.ClaimsIdentity>，來自宣告`identity`會加入至之前所指定的新執行個體`claims`參數。 |  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**附註︰**存取時，<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>屬性的值根據傳回<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>屬性的值。 |  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|如果`identity` <xref:System.Security.Claims.ClaimsIdentity>，從指派的值`identity.Label`屬性，否則`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|如果`identity`無法從<xref:System.Security.Claims.ClaimsIdentity>，不是`null`，且具有<xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>屬性不是`null`; 名稱宣告會新增至新的執行個體使用的值<xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>屬性。</xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName> </xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Label%2A> </xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity> **注意︰**存取時，<xref:System.Security.Claims.ClaimsIdentity.Name%2A>屬性的值根據傳回<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>和<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>的集合。 |  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|如果`identity` <xref:System.Security.Claims.ClaimsIdentity>，從指派的值`identity.NameClaimType`屬性使用; 否則會使用<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>。 |  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|如果`identity`會依從<xref:System.Security.Claims.ClaimsIdentity>，值`identity.RoleClaimType`屬性是用，否則<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>使用。 |</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A>"
  syntax:
    content: public ClaimsIdentity (System.Security.Principal.IIdentity identity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims);
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "從要依據新的宣告身分識別。"
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "用來填入宣告身分識別宣告。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(String,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>類別具有指定的驗證類型、 名稱宣告類型和角色宣告類型。"
  remarks: "下表顯示的<xref:System.Security.Claims.ClaimsIdentity>類別</xref:System.Security.Claims.ClaimsIdentity>執行個體的初始屬性值      |屬性 |值 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|值`authenticationType`參數。</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 如果`authenticationType`參數是`null`或空字串，此屬性設為`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|空集合。 |  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**附註︰**存取時，<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>屬性的值根據傳回<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>屬性的值。 |  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|**附註︰**存取時，<xref:System.Security.Claims.ClaimsIdentity.Name%2A>屬性的值根據傳回<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>和<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>的集合。 |  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|值`nameType`參數。</xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity.Label%2A> </xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A> 如果`nameType`參數為 null 或空字串，此屬性設為<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>。 |  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|值`roleType`參數。</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType> 如果`roleType`參數為 null 或空字串，此屬性設為<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>。 |</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>"
  syntax:
    content: public ClaimsIdentity (string authenticationType, string nameType, string roleType);
    parameters:
    - id: authenticationType
      type: System.String
      description: "使用的驗證類型。"
    - id: nameType
      type: System.String
      description: "要用於名稱宣告的宣告類型。"
    - id: roleType
      type: System.String
      description: "若要使用的角色宣告的宣告類型。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IEnumerable<Claim>,String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>類別指定的宣告、 驗證類型、 名稱宣告類型和角色宣告類型。"
  remarks: "下表顯示的<xref:System.Security.Claims.ClaimsIdentity>類別</xref:System.Security.Claims.ClaimsIdentity>執行個體的初始屬性值      |屬性 |值 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|值`authenticationType`參數。</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 如果`authenticationType`參數是`null`或空字串，此屬性設為`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|初始化從`claims`參數。 |  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**附註︰**存取時，<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>屬性的值根據傳回<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>屬性的值。 |  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|**附註︰**存取時，<xref:System.Security.Claims.ClaimsIdentity.Name%2A>屬性的值根據傳回<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>和<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>的集合。 |  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|值`nameType`參數。</xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity.Label%2A> </xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A> 不過，如果`nameType`參數是`null`或空字串，此屬性設為<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>。 |  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|值`roleClaimType`參數。</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType> 不過，如果`roleClaimType`參數是`null`或空字串，此屬性設為<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>。 |</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>"
  syntax:
    content: public ClaimsIdentity (System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType, string nameType, string roleType);
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "用來填入宣告身分識別宣告。"
    - id: authenticationType
      type: System.String
      description: "使用的驗證類型。"
    - id: nameType
      type: System.String
      description: "要用於名稱宣告的宣告類型。"
    - id: roleType
      type: System.String
      description: "若要使用的角色宣告的宣告類型。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  id: '#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>從指定的類別<xref:System.Security.Principal.IIdentity>使用指定的宣告、 驗證類型、 名稱宣告的型別，以及角色宣告類型。</xref:System.Security.Principal.IIdentity>"
  remarks: "下表顯示的<xref:System.Security.Claims.ClaimsIdentity>類別</xref:System.Security.Claims.ClaimsIdentity>執行個體的初始屬性值      |屬性 |值 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|如果`identity` <xref:System.Security.Claims.ClaimsIdentity>，從指派的值`identity.Actor`屬性，否則`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|`authenticationType`參數。</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 如果`authenticationType`參數是`null`或空字串，值`identity.AuthenticationType`(<xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName>) 屬性使用。 |  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|如果`identity` <xref:System.Security.Claims.ClaimsIdentity>，從指派的值`identity.BootStrapContext`屬性，否則`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|初始化從`claims`參數。</xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A> </xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> 如果`identity`會依從<xref:System.Security.Claims.ClaimsIdentity>，來自宣告`identity`會加入至之前所指定的新執行個體`claims`參數。 |  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**附註︰**存取時，<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>屬性的值根據傳回<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>屬性的值。 |  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|如果`identity` <xref:System.Security.Claims.ClaimsIdentity>，從指派的值`identity.Label`屬性，否則`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|如果`identity`無法從<xref:System.Security.Claims.ClaimsIdentity>，不是`null`，且具有<xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>屬性不是`null`; 名稱宣告會新增至新的執行個體使用的值<xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>屬性。</xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName> </xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Label%2A> </xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity> **注意︰**存取時，<xref:System.Security.Claims.ClaimsIdentity.Name%2A>屬性的值根據傳回<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>和<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>的集合。 |  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|值`nameType`參數。</xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> 不過，如果值`nameType`參數是`null`或空字串和`identity` <xref:System.Security.Claims.ClaimsIdentity>，從指派的值`identity.NameClaimType`屬性使用; 否則會使用<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>。 |  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|值`roleClaimType`參數。</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType> </xref:System.Security.Claims.ClaimsIdentity> 不過，如果值`roleClaimType`參數是`null`或空白字串，並識別可從<xref:System.Security.Claims.ClaimsIdentity>，值`identity.RoleClaimType`屬性是用，否則<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>使用。 |</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType> </xref:System.Security.Claims.ClaimsIdentity>"
  syntax:
    content: public ClaimsIdentity (System.Security.Principal.IIdentity identity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType, string nameType, string roleType);
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "從要依據新的宣告身分識別。"
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "用來填入新的宣告身分識別宣告。"
    - id: authenticationType
      type: System.String
      description: "使用的驗證類型。"
    - id: nameType
      type: System.String
      description: "要用於名稱宣告的宣告類型。"
    - id: roleType
      type: System.String
      description: "若要使用的角色宣告的宣告類型。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.Actor
  id: Actor
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: Actor
  nameWithType: ClaimsIdentity.Actor
  fullName: System.Security.Claims.ClaimsIdentity.Actor
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得或設定呼叫的合作對象已授與委派權限的身分識別。"
  remarks: "應用程式可以存取目前的呼叫，遞迴地檢查動作項目屬性所造成的委派鏈結。 可以透過存取的權杖呼叫被委派代表其<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>屬性。</xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>"
  syntax:
    content: public System.Security.Claims.ClaimsIdentity Actor { get; set; }
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "已授與委派權限，呼叫方。"
  overload: System.Security.Claims.ClaimsIdentity.Actor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "嘗試將屬性設定為目前的執行個體，就會發生。"
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  id: AddClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: AddClaim(Claim)
  nameWithType: ClaimsIdentity.AddClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaim(Claim)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "加入至這個單一宣告會宣告身分識別。"
  remarks: "會檢查宣告，如果主體是不同於此宣告身分識別，<xref:System.Security.Claims.Claim.Clone%28System.Security.Claims.ClaimsIdentity%29?displayProperty=fullName>方法用來叫用此宣告身分識別做為參數來建立新的宣告具有正確的主旨。</xref:System.Security.Claims.Claim.Clone%28System.Security.Claims.ClaimsIdentity%29?displayProperty=fullName>       這個方法有`SecurityCritical`屬性套用至哪些實體可以將宣告新增至身分識別的控制項。 進一步向管道，授權決策依據進行的宣告，會在<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>集合。</xref:System.Security.Claims.ClaimsIdentity.Claims%2A>"
  syntax:
    content: public virtual void AddClaim (System.Security.Claims.Claim claim);
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
      description: "要新增的宣告。"
  overload: System.Security.Claims.ClaimsIdentity.AddClaim*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>claim</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  id: AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: AddClaims(IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.AddClaims(IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaims(IEnumerable<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新增宣告至這個清單宣告身分識別。"
  remarks: "會檢查每個宣告，如果主體是不同於此宣告身分識別，<xref:System.Security.Claims.Claim.Clone%28System.Security.Claims.ClaimsIdentity%29?displayProperty=fullName>方法用來叫用此宣告身分識別做為參數來建立新的宣告具有正確的主旨。</xref:System.Security.Claims.Claim.Clone%28System.Security.Claims.ClaimsIdentity%29?displayProperty=fullName>       這個方法有`SecurityCritical`屬性套用至哪些實體可以將宣告新增至身分識別的控制項。 進一步向管道，授權決策依據進行的宣告，會在<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>集合。</xref:System.Security.Claims.ClaimsIdentity.Claims%2A>"
  syntax:
    content: public virtual void AddClaims (System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims);
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "若要加入的宣告。"
  overload: System.Security.Claims.ClaimsIdentity.AddClaims*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>claims</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.AuthenticationType
  id: AuthenticationType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: AuthenticationType
  nameWithType: ClaimsIdentity.AuthenticationType
  fullName: System.Security.Claims.ClaimsIdentity.AuthenticationType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得驗證類型。"
  remarks: "通常是其中一個值定義的<xref:System.Security.Claims.AuthenticationTypes>類別。</xref:System.Security.Claims.AuthenticationTypes>"
  syntax:
    content: public virtual string AuthenticationType { get; }
    return:
      type: System.String
      description: "驗證類型。"
  overload: System.Security.Claims.ClaimsIdentity.AuthenticationType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.BootstrapContext
  id: BootstrapContext
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: BootstrapContext
  nameWithType: ClaimsIdentity.BootstrapContext
  fullName: System.Security.Claims.ClaimsIdentity.BootstrapContext
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得或設定用來建立的語彙基元這宣告身分識別。"
  remarks: "The underlying object is an instance of the <xref:System.IdentityModel.Tokens.BootstrapContext?displayProperty=fullName> class.  \n  \n Set the `saveBootstrapContext` attribute on either the [\\&lt;identityConfiguration\\&gt;](../Topic/%3CidentityConfiguration%3E.md) or the [\\&lt;securityTokenHandlerConfiguration\\&gt;](../Topic/%3CsecurityTokenHandlerConfiguration%3E.md) element in a configuration file to specify whether the token used to generate the <xref:System.Security.Claims.ClaimsIdentity> should be preserved in the BootstrapContext property.  \n  \n If the BootstrapContext property is not `null`, applications can access the original token and the claims it produced through the properties and methods of the <xref:System.IdentityModel.Tokens.BootstrapContext?displayProperty=fullName> class."
  syntax:
    content: public object BootstrapContext { get; set; }
    return:
      type: System.Object
      description: "啟動程序的內容。"
  overload: System.Security.Claims.ClaimsIdentity.BootstrapContext*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.Claims
  id: Claims
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: Claims
  nameWithType: ClaimsIdentity.Claims
  fullName: System.Security.Claims.ClaimsIdentity.Claims
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得相關聯的宣告此宣告身分識別。"
  remarks: "集合可能包含的項目`null`。       基本上，宣告集合中包含的宣告描述<xref:System.Security.Claims.ClaimsIdentity>.</xref:System.Security.Claims.ClaimsIdentity>所表示的實體 宣告描述的屬性和實體所擁有的權限，並檢驗做出有關驗證和授權的應用程式。      > [!NOTE] ><xref:System.Security.Claims.ClaimsPrincipal>類別具有<xref:System.Security.Claims.ClaimsPrincipal.Claims%2A>以及屬性。</xref:System.Security.Claims.ClaimsPrincipal.Claims%2A> </xref:System.Security.Claims.ClaimsPrincipal> 在大多數情況下，您應該存取使用者的宣告行經<xref:System.Security.Claims.ClaimsPrincipal.Claims%2A?displayProperty=fullName>集合而非透過宣告集合。</xref:System.Security.Claims.ClaimsPrincipal.Claims%2A?displayProperty=fullName> 您將需要存取的個人宣告<xref:System.Security.Claims.ClaimsIdentity>只在其中主體會包含一個以上的案例中<xref:System.Security.Claims.ClaimsIdentity>和您要評估或修改特定的身分識別。</xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity>"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> Claims { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "與相關聯的宣告集合此宣告身分識別。"
  overload: System.Security.Claims.ClaimsIdentity.Claims*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.Clone
  id: Clone
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: Clone()
  nameWithType: ClaimsIdentity.Clone()
  fullName: System.Security.Claims.ClaimsIdentity.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "傳回新<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>從複製此宣告身分識別。"
  syntax:
    content: public virtual System.Security.Claims.ClaimsIdentity Clone ();
    parameters: []
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "目前的執行個體的複本。"
  overload: System.Security.Claims.ClaimsIdentity.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  id: CreateClaim(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: CreateClaim(BinaryReader)
  nameWithType: ClaimsIdentity.CreateClaim(BinaryReader)
  fullName: System.Security.Claims.ClaimsIdentity.CreateClaim(BinaryReader)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual System.Security.Claims.Claim CreateClaim (System.IO.BinaryReader reader);
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "即將加入。"
    return:
      type: System.Security.Claims.Claim
      description: "即將加入。"
  overload: System.Security.Claims.ClaimsIdentity.CreateClaim*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.CustomSerializationData
  id: CustomSerializationData
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: CustomSerializationData
  nameWithType: ClaimsIdentity.CustomSerializationData
  fullName: System.Security.Claims.ClaimsIdentity.CustomSerializationData
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual byte[] CustomSerializationData { get; }
    return:
      type: System.Byte[]
      description: "即將加入。"
  overload: System.Security.Claims.ClaimsIdentity.CustomSerializationData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.DefaultIssuer
  id: DefaultIssuer
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: DefaultIssuer
  nameWithType: ClaimsIdentity.DefaultIssuer
  fullName: System.Security.Claims.ClaimsIdentity.DefaultIssuer
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "預設簽發者;「 本機授權 」。"
  syntax:
    content: public const string DefaultIssuer;
    return:
      type: System.String
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  id: DefaultNameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: DefaultNameClaimType
  nameWithType: ClaimsIdentity.DefaultNameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "預設名稱宣告類型。<xref href=&quot;System.Security.Claims.ClaimTypes.Name&quot;></xref>."
  syntax:
    content: public const string DefaultNameClaimType;
    return:
      type: System.String
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  id: DefaultRoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: DefaultRoleClaimType
  nameWithType: ClaimsIdentity.DefaultRoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "預設角色宣告類型。<xref href=&quot;System.Security.Claims.ClaimTypes.Role&quot;></xref>."
  syntax:
    content: public const string DefaultRoleClaimType;
    return:
      type: System.String
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  id: FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: FindAll(Predicate<Claim>)
  nameWithType: ClaimsIdentity.FindAll(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "擷取所有符合指定述詞的宣告。"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "執行比對邏輯的函式。"
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "相符的宣告。 清單是唯讀的。"
  overload: System.Security.Claims.ClaimsIdentity.FindAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  id: FindAll(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: FindAll(String)
  nameWithType: ClaimsIdentity.FindAll(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "擷取所有具有指定的宣告類型的宣告。"
  remarks: "會使用序數的情況中區分上進行比較`type`。"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll (string type);
    parameters:
    - id: type
      type: System.String
      description: "要比宣告對宣告類型。"
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "相符的宣告。 清單是唯讀的。"
  overload: System.Security.Claims.ClaimsIdentity.FindAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  id: FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: FindFirst(Predicate<Claim>)
  nameWithType: ClaimsIdentity.FindFirst(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "擷取指定之述詞所比對的第一個宣告。"
  syntax:
    content: public virtual System.Security.Claims.Claim FindFirst (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "執行比對邏輯的函式。"
    return:
      type: System.Security.Claims.Claim
      description: "第一個符合的宣告或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果找到相符項目。"
  overload: System.Security.Claims.ClaimsIdentity.FindFirst*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  id: FindFirst(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: FindFirst(String)
  nameWithType: ClaimsIdentity.FindFirst(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "擷取指定的宣告類型的第一個宣告。"
  syntax:
    content: public virtual System.Security.Claims.Claim FindFirst (string type);
    parameters:
    - id: type
      type: System.String
      description: "要比對的宣告類型。"
    return:
      type: System.Security.Claims.Claim
      description: "第一個符合的宣告或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果找到相符項目。"
  overload: System.Security.Claims.ClaimsIdentity.FindFirst*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ClaimsIdentity.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsIdentity.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "於其中填入<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref>序列化目前所需資料<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>物件。"
  syntax:
    content: protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "要填入資料的物件。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "這個序列化的目的端。 Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Claims.ClaimsIdentity.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  id: HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: HasClaim(Predicate<Claim>)
  nameWithType: ClaimsIdentity.HasClaim(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "決定是否此宣告身分識別具有指定之述詞所比對的宣告。"
  syntax:
    content: public virtual bool HasClaim (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "執行比對邏輯的函式。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果符合的宣告存在，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Claims.ClaimsIdentity.HasClaim*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  id: HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: HasClaim(String,String)
  nameWithType: ClaimsIdentity.HasClaim(String,String)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "決定是否此宣告識別必須具有指定宣告類型和值的宣告。"
  remarks: "不會檢查<xref:System.Security.Claims.Claim.Issuer%2A>或<xref:System.Security.Claims.Claim.OriginalIssuer%2A>屬性。</xref:System.Security.Claims.Claim.OriginalIssuer%2A> </xref:System.Security.Claims.Claim.Issuer%2A> 會使用序數，區分大小寫; 的值進行比較案例中區分型別上。"
  syntax:
    content: public virtual bool HasClaim (string type, string value);
    parameters:
    - id: type
      type: System.String
      description: "要比對宣告型別。"
    - id: value
      type: System.String
      description: "要比對宣告值。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果找到相符項目否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Claims.ClaimsIdentity.HasClaim*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**.       -or-       <code>value</code> is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.IsAuthenticated
  id: IsAuthenticated
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: ClaimsIdentity.IsAuthenticated
  fullName: System.Security.Claims.ClaimsIdentity.IsAuthenticated
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得值，指出是否已經驗證識別身分。"
  remarks: '`true`如果<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>屬性不是`null`或空字串。</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>'
  syntax:
    content: public virtual bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果驗證的身分識別。否則， **false**。"
  overload: System.Security.Claims.ClaimsIdentity.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.Label
  id: Label
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: Label
  nameWithType: ClaimsIdentity.Label
  fullName: System.Security.Claims.ClaimsIdentity.Label
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得或設定標籤，此宣告身分識別。"
  syntax:
    content: public string Label { get; set; }
    return:
      type: System.String
      description: "標籤。"
  overload: System.Security.Claims.ClaimsIdentity.Label*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.Name
  id: Name
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: Name
  nameWithType: ClaimsIdentity.Name
  fullName: System.Security.Claims.ClaimsIdentity.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得這個名稱宣告身分識別。"
  remarks: "傳回宣告中所設定的值型別符合名稱的第一個宣告<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>屬性。</xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> 如果沒有宣告找到符合名稱宣告類型，會傳回`null`。"
  syntax:
    content: public virtual string Name { get; }
    return:
      type: System.String
      description: "名稱或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Claims.ClaimsIdentity.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.NameClaimType
  id: NameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: NameClaimType
  nameWithType: ClaimsIdentity.NameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.NameClaimType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得用來判斷哪些宣告會提供值的宣告型別<xref:System.Security.Claims.ClaimsIdentity.Name*>屬性，這個宣告身分識別。</xref:System.Security.Claims.ClaimsIdentity.Name*>"
  remarks: "NameClaimType 屬性指定的宣告類型 (<xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName>)，用來提供此身分識別的名稱。</xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName> 名稱透過存取<xref:System.Security.Claims.ClaimsIdentity.Name%2A>屬性。</xref:System.Security.Claims.ClaimsIdentity.Name%2A>       這個屬性設定的建構函式。"
  syntax:
    content: public string NameClaimType { get; }
    return:
      type: System.String
      description: "名稱的宣告類型。"
  overload: System.Security.Claims.ClaimsIdentity.NameClaimType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  id: RemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: RemoveClaim(Claim)
  nameWithType: ClaimsIdentity.RemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.RemoveClaim(Claim)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "嘗試移除的宣告識別的宣告。"
  remarks: "很可能無法移除宣告，因為它不由識別所擁有。 比方說，這就是主體所擁有的角色宣告的情況。 不同於<xref:System.Security.Claims.ClaimsIdentity.TryRemoveClaim%2A>方法，這個方法會傳回布林值，指出是否已移除的宣告，RemoveClaim 時擲回例外狀況宣告不會移除物件參考所比對指定的宣告 (<xref:System.Object.ReferenceEquals%2A>)。</xref:System.Object.ReferenceEquals%2A> </xref:System.Security.Claims.ClaimsIdentity.TryRemoveClaim%2A>       這個方法有`SecurityCritical`屬性套用至控制項的哪些實體可以移除身分識別的宣告。 進一步向管道，授權決策依據進行的宣告，會在<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>集合。</xref:System.Security.Claims.ClaimsIdentity.Claims%2A>"
  syntax:
    content: public virtual void RemoveClaim (System.Security.Claims.Claim claim);
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
      description: "要移除的宣告。"
  overload: System.Security.Claims.ClaimsIdentity.RemoveClaim*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "無法移除宣告。"
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.RoleClaimType
  id: RoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: RoleClaimType
  nameWithType: ClaimsIdentity.RoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.RoleClaimType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得宣告類型，將會被解譯為.NET Framework 眾多角色中的宣告會宣告身分識別。"
  remarks: "角色宣告類型是宣告類型 (<xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName>) 評估為此身分識別時，用<xref:System.Security.Claims.ClaimsPrincipal.IsInRole%28System.String%29?displayProperty=fullName>方法。</xref:System.Security.Claims.ClaimsPrincipal.IsInRole%28System.String%29?displayProperty=fullName> </xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName> <xref:System.Security.Claims.ClaimsPrincipal.IsInRole%28System.String%29?displayProperty=fullName>呼叫方法來判斷目前的主體是否為指定角色中。</xref:System.Security.Claims.ClaimsPrincipal.IsInRole%28System.String%29?displayProperty=fullName> 宣告為基礎的模型會擴充至使用宣告為主體所呈現的這項檢查。 A<xref:System.Security.Claims.ClaimsPrincipal>物件可以包含一或多個<xref:System.Security.Claims.ClaimsIdentity>物件和每個身分識別的物件可以包含多個<xref:System.Security.Claims.Claim>物件。</xref:System.Security.Claims.Claim> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsPrincipal> RoleClaimType 屬性指定的宣告類型應評估這時，角色提供值的宣告<xref:System.Security.Claims.ClaimsIdentity>物件。</xref:System.Security.Claims.ClaimsIdentity> 這個屬性是設定的建構函式。 共通的值為<xref:System.Security.Claims.ClaimTypes.Role?displayProperty=fullName>。</xref:System.Security.Claims.ClaimTypes.Role?displayProperty=fullName>"
  syntax:
    content: public string RoleClaimType { get; }
    return:
      type: System.String
      description: "角色宣告類型。"
  overload: System.Security.Claims.ClaimsIdentity.RoleClaimType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  id: TryRemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: TryRemoveClaim(Claim)
  nameWithType: ClaimsIdentity.TryRemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(Claim)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "嘗試移除的宣告識別的宣告。"
  remarks: "很可能無法移除宣告，因為它不由識別所擁有。 比方說，這就是主體所擁有的角色宣告的情況。       物件參考所比對指定的宣告 (<xref:System.Object.ReferenceEquals%2A>)。</xref:System.Object.ReferenceEquals%2A>       這個方法有`SecurityCritical`屬性套用至控制項的哪些實體可以移除身分識別的宣告。 進一步向管道，授權決策依據進行的宣告，會在<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>集合。</xref:System.Security.Claims.ClaimsIdentity.Claims%2A>"
  syntax:
    content: public virtual bool TryRemoveClaim (System.Security.Claims.Claim claim);
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
      description: "要移除的宣告。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果成功移除宣告。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Claims.ClaimsIdentity.TryRemoveClaim*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  id: WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: WriteTo(BinaryWriter)
  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(BinaryWriter)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: public virtual void WriteTo (System.IO.BinaryWriter writer);
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "即將加入。"
  overload: System.Security.Claims.ClaimsIdentity.WriteTo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  id: WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: WriteTo(BinaryWriter,Byte[])
  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter,Byte[])
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(BinaryWriter,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual void WriteTo (System.IO.BinaryWriter writer, byte[] userData);
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "即將加入。"
    - id: userData
      type: System.Byte[]
      description: "即將加入。"
  overload: System.Security.Claims.ClaimsIdentity.WriteTo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.Claims.ClaimsIdentity.#ctor
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity()
  nameWithType: ClaimsIdentity.ClaimsIdentity()
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity()
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>)
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(BinaryReader)
  nameWithType: ClaimsIdentity.ClaimsIdentity(BinaryReader)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(BinaryReader)
- uid: System.IO.BinaryReader
  parent: System.IO
  isExternal: true
  name: BinaryReader
  nameWithType: BinaryReader
  fullName: System.IO.BinaryReader
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(SerializationInfo)
  nameWithType: ClaimsIdentity.ClaimsIdentity(SerializationInfo)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(SerializationInfo)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(ClaimsIdentity)
  nameWithType: ClaimsIdentity.ClaimsIdentity(ClaimsIdentity)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(ClaimsIdentity)
- uid: System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IIdentity)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity)
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: true
  name: IIdentity
  nameWithType: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IEnumerable<Claim>,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String)
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(SerializationInfo,StreamingContext)
  nameWithType: ClaimsIdentity.ClaimsIdentity(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IIdentity,IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>)
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(String,String,String)
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IEnumerable<Claim>,String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String,String,String)
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
- uid: System.Security.Claims.ClaimsIdentity.Actor
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Actor
  nameWithType: ClaimsIdentity.Actor
  fullName: System.Security.Claims.ClaimsIdentity.Actor
- uid: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AddClaim(Claim)
  nameWithType: ClaimsIdentity.AddClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaim(Claim)
- uid: System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: false
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AddClaims(IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.AddClaims(IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaims(IEnumerable<Claim>)
- uid: System.Security.Claims.ClaimsIdentity.AuthenticationType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AuthenticationType
  nameWithType: ClaimsIdentity.AuthenticationType
  fullName: System.Security.Claims.ClaimsIdentity.AuthenticationType
- uid: System.Security.Claims.ClaimsIdentity.BootstrapContext
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: BootstrapContext
  nameWithType: ClaimsIdentity.BootstrapContext
  fullName: System.Security.Claims.ClaimsIdentity.BootstrapContext
- uid: System.Security.Claims.ClaimsIdentity.Claims
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Claims
  nameWithType: ClaimsIdentity.Claims
  fullName: System.Security.Claims.ClaimsIdentity.Claims
- uid: System.Security.Claims.ClaimsIdentity.Clone
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Clone()
  nameWithType: ClaimsIdentity.Clone()
  fullName: System.Security.Claims.ClaimsIdentity.Clone()
- uid: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: CreateClaim(BinaryReader)
  nameWithType: ClaimsIdentity.CreateClaim(BinaryReader)
  fullName: System.Security.Claims.ClaimsIdentity.CreateClaim(BinaryReader)
- uid: System.Security.Claims.ClaimsIdentity.CustomSerializationData
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: CustomSerializationData
  nameWithType: ClaimsIdentity.CustomSerializationData
  fullName: System.Security.Claims.ClaimsIdentity.CustomSerializationData
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Claims.ClaimsIdentity.DefaultIssuer
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: DefaultIssuer
  nameWithType: ClaimsIdentity.DefaultIssuer
  fullName: System.Security.Claims.ClaimsIdentity.DefaultIssuer
- uid: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: DefaultNameClaimType
  nameWithType: ClaimsIdentity.DefaultNameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
- uid: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: DefaultRoleClaimType
  nameWithType: ClaimsIdentity.DefaultRoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindAll(Predicate<Claim>)
  nameWithType: ClaimsIdentity.FindAll(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(Predicate<Claim>)
- uid: System.Predicate{System.Security.Claims.Claim}
  parent: System
  isExternal: true
  name: Predicate<Claim>
  nameWithType: Predicate<Claim>
  fullName: System.Predicate<System.Security.Claims.Claim>
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate<System.Security.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindAll(String)
  nameWithType: ClaimsIdentity.FindAll(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(String)
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindFirst(Predicate<Claim>)
  nameWithType: ClaimsIdentity.FindFirst(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(Predicate<Claim>)
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindFirst(String)
  nameWithType: ClaimsIdentity.FindFirst(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(String)
- uid: System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ClaimsIdentity.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsIdentity.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: HasClaim(Predicate<Claim>)
  nameWithType: ClaimsIdentity.HasClaim(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(Predicate<Claim>)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: HasClaim(String,String)
  nameWithType: ClaimsIdentity.HasClaim(String,String)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(String,String)
- uid: System.Security.Claims.ClaimsIdentity.IsAuthenticated
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: IsAuthenticated
  nameWithType: ClaimsIdentity.IsAuthenticated
  fullName: System.Security.Claims.ClaimsIdentity.IsAuthenticated
- uid: System.Security.Claims.ClaimsIdentity.Label
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Label
  nameWithType: ClaimsIdentity.Label
  fullName: System.Security.Claims.ClaimsIdentity.Label
- uid: System.Security.Claims.ClaimsIdentity.Name
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Name
  nameWithType: ClaimsIdentity.Name
  fullName: System.Security.Claims.ClaimsIdentity.Name
- uid: System.Security.Claims.ClaimsIdentity.NameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: NameClaimType
  nameWithType: ClaimsIdentity.NameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.NameClaimType
- uid: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: RemoveClaim(Claim)
  nameWithType: ClaimsIdentity.RemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.RemoveClaim(Claim)
- uid: System.Security.Claims.ClaimsIdentity.RoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: RoleClaimType
  nameWithType: ClaimsIdentity.RoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.RoleClaimType
- uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: TryRemoveClaim(Claim)
  nameWithType: ClaimsIdentity.TryRemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(Claim)
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: WriteTo(BinaryWriter)
  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(BinaryWriter)
- uid: System.IO.BinaryWriter
  parent: System.IO
  isExternal: true
  name: BinaryWriter
  nameWithType: BinaryWriter
  fullName: System.IO.BinaryWriter
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: WriteTo(BinaryWriter,Byte[])
  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter,Byte[])
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(BinaryWriter,Byte[])
- uid: System.Security.Claims.ClaimsIdentity.#ctor*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity.ClaimsIdentity
- uid: System.Security.Claims.ClaimsIdentity.Actor*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Actor
  nameWithType: ClaimsIdentity.Actor
- uid: System.Security.Claims.ClaimsIdentity.AddClaim*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AddClaim
  nameWithType: ClaimsIdentity.AddClaim
- uid: System.Security.Claims.ClaimsIdentity.AddClaims*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AddClaims
  nameWithType: ClaimsIdentity.AddClaims
- uid: System.Security.Claims.ClaimsIdentity.AuthenticationType*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AuthenticationType
  nameWithType: ClaimsIdentity.AuthenticationType
- uid: System.Security.Claims.ClaimsIdentity.BootstrapContext*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: BootstrapContext
  nameWithType: ClaimsIdentity.BootstrapContext
- uid: System.Security.Claims.ClaimsIdentity.Claims*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Claims
  nameWithType: ClaimsIdentity.Claims
- uid: System.Security.Claims.ClaimsIdentity.Clone*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Clone
  nameWithType: ClaimsIdentity.Clone
- uid: System.Security.Claims.ClaimsIdentity.CreateClaim*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: CreateClaim
  nameWithType: ClaimsIdentity.CreateClaim
- uid: System.Security.Claims.ClaimsIdentity.CustomSerializationData*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: CustomSerializationData
  nameWithType: ClaimsIdentity.CustomSerializationData
- uid: System.Security.Claims.ClaimsIdentity.FindAll*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindAll
  nameWithType: ClaimsIdentity.FindAll
- uid: System.Security.Claims.ClaimsIdentity.FindFirst*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindFirst
  nameWithType: ClaimsIdentity.FindFirst
- uid: System.Security.Claims.ClaimsIdentity.GetObjectData*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: GetObjectData
  nameWithType: ClaimsIdentity.GetObjectData
- uid: System.Security.Claims.ClaimsIdentity.HasClaim*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: HasClaim
  nameWithType: ClaimsIdentity.HasClaim
- uid: System.Security.Claims.ClaimsIdentity.IsAuthenticated*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: IsAuthenticated
  nameWithType: ClaimsIdentity.IsAuthenticated
- uid: System.Security.Claims.ClaimsIdentity.Label*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Label
  nameWithType: ClaimsIdentity.Label
- uid: System.Security.Claims.ClaimsIdentity.Name*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Name
  nameWithType: ClaimsIdentity.Name
- uid: System.Security.Claims.ClaimsIdentity.NameClaimType*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: NameClaimType
  nameWithType: ClaimsIdentity.NameClaimType
- uid: System.Security.Claims.ClaimsIdentity.RemoveClaim*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: RemoveClaim
  nameWithType: ClaimsIdentity.RemoveClaim
- uid: System.Security.Claims.ClaimsIdentity.RoleClaimType*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: RoleClaimType
  nameWithType: ClaimsIdentity.RoleClaimType
- uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: TryRemoveClaim
  nameWithType: ClaimsIdentity.TryRemoveClaim
- uid: System.Security.Claims.ClaimsIdentity.WriteTo*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: WriteTo
  nameWithType: ClaimsIdentity.WriteTo
