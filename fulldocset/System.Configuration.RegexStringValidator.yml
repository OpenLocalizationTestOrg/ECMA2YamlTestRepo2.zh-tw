### YamlMime:ManagedReference
items:
- uid: System.Configuration.RegexStringValidator
  id: RegexStringValidator
  children:
  - System.Configuration.RegexStringValidator.#ctor(System.String)
  - System.Configuration.RegexStringValidator.CanValidate(System.Type)
  - System.Configuration.RegexStringValidator.Validate(System.Object)
  langs:
  - csharp
  name: RegexStringValidator
  nameWithType: RegexStringValidator
  fullName: System.Configuration.RegexStringValidator
  type: Class
  summary: "提供字串的規則運算式所提供的規則為基礎的驗證。"
  remarks: "RegexStringValidator 物件包含規則需要驗證根據規則運算式的字串物件。 建立 RegexStringValidator 類別的執行個體時，會建立規則。       <xref:System.Configuration.RegexStringValidator.CanValidate%2A>方法會判斷要驗證的物件型別是否符合預期的類型。</xref:System.Configuration.RegexStringValidator.CanValidate%2A> 正在驗證的物件會傳遞做為參數的<xref:System.Configuration.RegexStringValidator.Validate%2A>方法。</xref:System.Configuration.RegexStringValidator.Validate%2A>"
  example:
  - "The following code example demonstrates how to use the RegexStringValidator type.  \n  \n [!code-vb[System.Configuration.RegexStringValidator#1](~/add/codesnippet/visualbasic/t-system.configuration.r_0_1.vb)]\n [!code-cs[System.Configuration.RegexStringValidator#1](~/add/codesnippet/csharp/t-system.configuration.r_0_1.cs)]"
  syntax:
    content: 'public class RegexStringValidator : System.Configuration.ConfigurationValidatorBase'
  inheritance:
  - System.Object
  - System.Configuration.ConfigurationValidatorBase
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Configuration.RegexStringValidator.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Configuration.RegexStringValidator
  langs:
  - csharp
  name: RegexStringValidator(String)
  nameWithType: RegexStringValidator.RegexStringValidator(String)
  fullName: System.Configuration.RegexStringValidator.RegexStringValidator(String)
  type: Constructor
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "初始化的新執行個體<xref href=&quot;System.Configuration.RegexStringValidator&quot;></xref>類別。"
  syntax:
    content: public RegexStringValidator (string regex);
    parameters:
    - id: regex
      type: System.String
      description: "指定規則運算式的字串。"
  overload: System.Configuration.RegexStringValidator.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>regex</code>為 null 或空字串 (&quot;&quot;)。"
  platform:
  - net462
- uid: System.Configuration.RegexStringValidator.CanValidate(System.Type)
  id: CanValidate(System.Type)
  parent: System.Configuration.RegexStringValidator
  langs:
  - csharp
  name: CanValidate(Type)
  nameWithType: RegexStringValidator.CanValidate(Type)
  fullName: System.Configuration.RegexStringValidator.CanValidate(Type)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "判斷是否可以驗證的物件類型。"
  remarks: "如果驗證失敗，則會擲回例外狀況。"
  example:
  - "The following example demonstrates how to use the CanValidate method. This code example is part of a larger example that is provided for the <xref:System.Configuration.RegexStringValidator> class.  \n  \n [!code-vb[System.Configuration.RegexStringValidator#3](~/add/codesnippet/visualbasic/m-system.configuration.r_2_1.vb)]\n [!code-cs[System.Configuration.RegexStringValidator#3](~/add/codesnippet/csharp/m-system.configuration.r_2_1.cs)]"
  syntax:
    content: public override bool CanValidate (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "物件的類型。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> type </code>參數符合的字串，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Configuration.RegexStringValidator.CanValidate*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.RegexStringValidator.Validate(System.Object)
  id: Validate(System.Object)
  parent: System.Configuration.RegexStringValidator
  langs:
  - csharp
  name: Validate(Object)
  nameWithType: RegexStringValidator.Validate(Object)
  fullName: System.Configuration.RegexStringValidator.Validate(Object)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "判斷物件的值是否有效。"
  remarks: "A<xref:System.Configuration.RegexStringValidator>物件包含規則需要驗證根據規則運算式的字串物件。</xref:System.Configuration.RegexStringValidator> 規則的執行個體時，會建立<xref:System.Configuration.RegexStringValidator>類別建立。</xref:System.Configuration.RegexStringValidator> 要驗證的字串物件會傳遞做為驗證方法的參數。"
  example:
  - "The following code example demonstrates how to use the Validate method. This code example is part of a larger example provided for the <xref:System.Configuration.RegexStringValidator> class.  \n  \n [!code-vb[System.Configuration.RegexStringValidator#4](~/add/codesnippet/visualbasic/m-system.configuration.r_1_1.vb)]\n [!code-cs[System.Configuration.RegexStringValidator#4](~/add/codesnippet/csharp/m-system.configuration.r_1_1.cs)]"
  syntax:
    content: public override void Validate (object value);
    parameters:
    - id: value
      type: System.Object
      description: "物件的值。"
  overload: System.Configuration.RegexStringValidator.Validate*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>value</code>不符合參數的<xref:System.Text.RegularExpressions.Regex>類別。"
  platform:
  - net462
references:
- uid: System.Configuration.ConfigurationValidatorBase
  isExternal: false
  name: System.Configuration.ConfigurationValidatorBase
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Configuration.RegexStringValidator.#ctor(System.String)
  parent: System.Configuration.RegexStringValidator
  isExternal: false
  name: RegexStringValidator(String)
  nameWithType: RegexStringValidator.RegexStringValidator(String)
  fullName: System.Configuration.RegexStringValidator.RegexStringValidator(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.RegexStringValidator.CanValidate(System.Type)
  parent: System.Configuration.RegexStringValidator
  isExternal: false
  name: CanValidate(Type)
  nameWithType: RegexStringValidator.CanValidate(Type)
  fullName: System.Configuration.RegexStringValidator.CanValidate(Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Configuration.RegexStringValidator.Validate(System.Object)
  parent: System.Configuration.RegexStringValidator
  isExternal: false
  name: Validate(Object)
  nameWithType: RegexStringValidator.Validate(Object)
  fullName: System.Configuration.RegexStringValidator.Validate(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Configuration.RegexStringValidator.#ctor*
  parent: System.Configuration.RegexStringValidator
  isExternal: false
  name: RegexStringValidator
  nameWithType: RegexStringValidator.RegexStringValidator
- uid: System.Configuration.RegexStringValidator.CanValidate*
  parent: System.Configuration.RegexStringValidator
  isExternal: false
  name: CanValidate
  nameWithType: RegexStringValidator.CanValidate
- uid: System.Configuration.RegexStringValidator.Validate*
  parent: System.Configuration.RegexStringValidator
  isExternal: false
  name: Validate
  nameWithType: RegexStringValidator.Validate
