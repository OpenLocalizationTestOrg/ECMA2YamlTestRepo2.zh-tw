### YamlMime:ManagedReference
items:
- uid: System.Console
  id: Console
  children:
  - System.Console.BackgroundColor
  - System.Console.Beep
  - System.Console.Beep(System.Int32,System.Int32)
  - System.Console.BufferHeight
  - System.Console.BufferWidth
  - System.Console.CancelKeyPress
  - System.Console.CapsLock
  - System.Console.Clear
  - System.Console.CursorLeft
  - System.Console.CursorSize
  - System.Console.CursorTop
  - System.Console.CursorVisible
  - System.Console.Error
  - System.Console.ForegroundColor
  - System.Console.In
  - System.Console.InputEncoding
  - System.Console.IsErrorRedirected
  - System.Console.IsInputRedirected
  - System.Console.IsOutputRedirected
  - System.Console.KeyAvailable
  - System.Console.LargestWindowHeight
  - System.Console.LargestWindowWidth
  - System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)
  - System.Console.NumberLock
  - System.Console.OpenStandardError
  - System.Console.OpenStandardError(System.Int32)
  - System.Console.OpenStandardInput
  - System.Console.OpenStandardInput(System.Int32)
  - System.Console.OpenStandardOutput
  - System.Console.OpenStandardOutput(System.Int32)
  - System.Console.Out
  - System.Console.OutputEncoding
  - System.Console.Read
  - System.Console.ReadKey
  - System.Console.ReadKey(System.Boolean)
  - System.Console.ReadLine
  - System.Console.ResetColor
  - System.Console.SetBufferSize(System.Int32,System.Int32)
  - System.Console.SetCursorPosition(System.Int32,System.Int32)
  - System.Console.SetError(System.IO.TextWriter)
  - System.Console.SetIn(System.IO.TextReader)
  - System.Console.SetOut(System.IO.TextWriter)
  - System.Console.SetWindowPosition(System.Int32,System.Int32)
  - System.Console.SetWindowSize(System.Int32,System.Int32)
  - System.Console.Title
  - System.Console.TreatControlCAsInput
  - System.Console.WindowHeight
  - System.Console.WindowLeft
  - System.Console.WindowTop
  - System.Console.WindowWidth
  - System.Console.Write(System.Boolean)
  - System.Console.Write(System.Char)
  - System.Console.Write(System.Char[])
  - System.Console.Write(System.Decimal)
  - System.Console.Write(System.Double)
  - System.Console.Write(System.Int32)
  - System.Console.Write(System.Int64)
  - System.Console.Write(System.Object)
  - System.Console.Write(System.Single)
  - System.Console.Write(System.String)
  - System.Console.Write(System.UInt32)
  - System.Console.Write(System.UInt64)
  - System.Console.Write(System.String,System.Object)
  - System.Console.Write(System.String,System.Object[])
  - System.Console.Write(System.Char[],System.Int32,System.Int32)
  - System.Console.Write(System.String,System.Object,System.Object)
  - System.Console.Write(System.String,System.Object,System.Object,System.Object)
  - System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)
  - System.Console.WriteLine
  - System.Console.WriteLine(System.Boolean)
  - System.Console.WriteLine(System.Char)
  - System.Console.WriteLine(System.Char[])
  - System.Console.WriteLine(System.Decimal)
  - System.Console.WriteLine(System.Double)
  - System.Console.WriteLine(System.Int32)
  - System.Console.WriteLine(System.Int64)
  - System.Console.WriteLine(System.Object)
  - System.Console.WriteLine(System.Single)
  - System.Console.WriteLine(System.String)
  - System.Console.WriteLine(System.UInt32)
  - System.Console.WriteLine(System.UInt64)
  - System.Console.WriteLine(System.String,System.Object)
  - System.Console.WriteLine(System.String,System.Object[])
  - System.Console.WriteLine(System.Char[],System.Int32,System.Int32)
  - System.Console.WriteLine(System.String,System.Object,System.Object)
  - System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)
  - System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)
  langs:
  - csharp
  name: Console
  nameWithType: Console
  fullName: System.Console
  type: Class
  summary: "代表標準輸入、 輸出和錯誤資料流為主控台應用程式。 這個類別無法被繼承。       若要瀏覽此類型的.NET Framework 原始程式碼，請參閱[參考來源](http://referencesource.microsoft.com/#mscorlib/system/console.cs#f907d79481da6ba4)。"
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/console.cs#f907d79481da6ba4). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n The console is an operating system window where users interact with the operating system or with a text-based console application by entering text input through the computer keyboard, and by reading text output from the computer terminal. For example, in the Windows operating system, the console is called the Command Prompt window and accepts MS-DOS commands. The Console class provides basic support for applications that read characters from, and write characters to, the console.  \n  \n For information about developing with the Console class, see the following sections:  \n  \n-   [Console I/O Streams](#Streams)  \n  \n-   [Screen Buffer and Console Window](#Buffer)  \n  \n-   [Unicode Support for the Console](#Unicode)  \n  \n-   [Common Operations](#Operations)  \n  \n-   [.NET Core Notes](#Core)  \n  \n<a name=\"Streams\"></a>   \n## Console I/O Streams  \n When a console application starts, the operating system automatically associates three I/O streams with the console: standard input stream, standard output stream, and standard error output stream. Your application can read user input from the standard input stream; write normal data to the standard output stream; and write error data to the standard error output stream. These streams are presented to your application as the values of the <xref:System.Console.In%2A?displayProperty=fullName>, <xref:System.Console.Out%2A?displayProperty=fullName>, and <xref:System.Console.Error%2A?displayProperty=fullName> properties.  \n  \n By default, the value of the <xref:System.Console.In%2A> property is a <xref:System.IO.TextReader?displayProperty=fullName> object that represents the keyboard, and the values of the <xref:System.Console.Out%2A> and <xref:System.Console.Error%2A> properties are <xref:System.IO.TextWriter?displayProperty=fullName> objects that represent a console window. However, you can set these properties to streams that do not represent the console window or keyboard; for example, you can set these properties to streams that represent files. To redirect the standard input, standard output, or standard error stream, call the <xref:System.Console.SetIn%2A?displayProperty=fullName>, <xref:System.Console.SetOut%2A?displayProperty=fullName>, or <xref:System.Console.SetError%2A?displayProperty=fullName> method, respectively. I/O operations that use these streams are synchronized, which means that multiple threads can read from, or write to, the streams. This means that methods that are ordinarily asynchronous, such as <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName>, execute synchronously if the object represents a console stream.  \n  \n> [!NOTE]\n>  Do not use the Console class to display output in unattended applications, such as server applications. Calls to methods such as <xref:System.Console.Write%2A?displayProperty=fullName> and <xref:System.Console.WriteLine%2A?displayProperty=fullName> have no effect in GUI applications.  \n  \n Console class members that work normally when the underlying stream is directed to a console might throw an exception if the stream is redirected, for example, to a file. Program your application to catch <xref:System.IO.IOException?displayProperty=fullName> exceptions if you redirect a standard stream. You can also use the <xref:System.Console.IsOutputRedirected%2A>, <xref:System.Console.IsInputRedirected%2A>, and <xref:System.Console.IsErrorRedirected%2A> properties to determine whether a standard stream is redirected before performing an operation that throws an <xref:System.IO.IOException?displayProperty=fullName> exception.  \n  \n It is sometimes useful to explicitly call the members of the stream objects represented by the <xref:System.Console.In%2A>, <xref:System.Console.Out%2A>, and <xref:System.Console.Error%2A> properties. For example, by default, the <xref:System.Console.ReadLine%2A?displayProperty=fullName> method reads input from the standard input stream. Similarly, the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method writes data to the standard output stream, and the data is followed by the default line termination string, which is  a carriage return and line feed (\"\\r\\n\"). However, the Console class does not provide a corresponding method to write data to the standard error output stream, or a property to change the line termination string for data written to that stream.  \n  \n You can solve this problem by setting the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> property of the <xref:System.Console.Out%2A> or <xref:System.Console.Error%2A> property to another line termination string. For example, the following C# statement sets the line termination string for the standard error output stream to two carriage return and line feed sequences:  \n  \n `Console.Error.NewLine = \"\\r\\n\\r\\n\";`  \n  \n You can then explicitly call the <xref:System.IO.TextWriter.WriteLine%2A> method of the error output stream object, as in the following C# statement:  \n  \n `Console.Error.WriteLine();`  \n  \n<a name=\"Buffer\"></a>   \n## Screen Buffer and Console Window  \n Two closely related features of the console are the screen buffer and the console window. Text is actually read from or written to streams owned by the console, but appear to be read from or written to an area owned by the console called the screen buffer. The screen buffer is an attribute of the console, and is organized as a rectangular grid of rows and columns where each grid intersection, or character cell, can contain a character. Each character has its own foreground color, and each character cell has its own background color.  \n  \n The screen buffer is viewed through a rectangular region called the console window. The console window is another attribute of the console; it is not the console itself, which is an operating system window. The console window is arranged in rows and columns, is less than or equal to the size of the screen buffer, and can be moved to view different areas of the underlying screen buffer. If the screen buffer is larger than the console window, the console automatically displays scroll bars so the console window can be repositioned over the screen buffer area.  \n  \n A cursor indicates the screen buffer position where text is currently read or written. The cursor can be hidden or made visible, and its height can be changed. If the cursor is visible, the console window position is moved automatically so the cursor is always in view.  \n  \n The origin for character cell coordinates in the screen buffer is the upper left corner, and the positions of the cursor and the console window are measured relative to that origin. Use zero-based indexes to specify positions; that is, specify the topmost row as row 0, and the leftmost column as column 0. The maximum value for the row and column indexes is <xref:System.Int16.MaxValue?displayProperty=fullName>.  \n  \n<a name=\"Unicode\"></a>   \n## Unicode Support for the Console  \n In general, the console reads input and writes output by using the current console code page, which the system locale defines by default. A code page can handle only a subset of available Unicode characters, so if you try to display characters that are not mapped by a particular code page, the console won't be able to display all characters or represent them accurately. The following example illustrates this problem. It tries to display the characters of the Cyrillic alphabet from U+0410 to U+044F to the console. If you run the example on a system that uses console code page 437, each character is replaced by a question mark (?), because Cyrillic characters do not map to the characters in code page 437.  \n  \n [!code-cs[System.Console.Class#1](~/add/codesnippet/csharp/t-system.console_1.cs)]\n [!code-vb[System.Console.Class#1](~/add/codesnippet/visualbasic/t-system.console_1.vb)]  \n  \n In addition to supporting code pages, the Console class supports UTF-8 encoding with the <xref:System.Text.UTF8Encoding> class. Beginning with the .NET Framework 4.5, the Console class also supports UTF-16 encoding with the <xref:System.Text.UnicodeEncoding> class. To display Unicode characters to the console. you set the <xref:System.Console.OutputEncoding%2A> property to either <xref:System.Text.UTF8Encoding> or  <xref:System.Text.UnicodeEncoding>.  \n  \n Support for Unicode characters requires the encoder to recognize a particular Unicode character, and also requires a font that has the glyphs needed to render that character. To successfully display Unicode characters to the console, the console font must be set to a non-raster or TrueType font such as Consolas or Lucida Console. The following example shows how you can programmatically change the font from a raster font to Lucida Console.  \n  \n [!code-cs[System.Console.Class.Unsafe#3](~/add/codesnippet/csharp/setfont1/setfont1.cs#3)]\n [!code-vb[System.Console.Class.Unsafe#3](~/add/codesnippet/visualbasic/t-system.console_2.vb)]  \n  \n However, TrueType fonts can display only a subset of glyphs. For example, the Lucida Console font displays only 643 of the approximately 64,000 available characters from U+0021 to U+FB02. To see which characters a particular font supports, open the **Fonts** applet in Control Panel, choose the **Find a character** option, and choose the font whose character set you'd like to examine in the **Font** list of the **Character Map** window.  \n  \n Windows uses font linking to display glyphs that are not available in a particular font. For information about font linking to display additional character sets, see [Globalization Step-by-Step: Fonts](http://go.microsoft.com/fwlink/?LinkId=229111). Linked fonts are defined in the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\FontLink\\SystemLink subkey of the registry. Each entry associated with this subkey corresponds to the name of a base font, and its value is a string array that defines the font files and the fonts that are linked to the base font. Each member of the array defines a linked font and takes the form *font-file-name*,*font-name*. The following example illustrates how you can programmatically define a linked font named SimSun found in a font file named simsun.ttc that displays Simplified Han characters.  \n  \n [!code-cs[System.Console.Class#2](~/add/codesnippet/csharp/t-system.console_3.cs)]\n [!code-vb[System.Console.Class#2](~/add/codesnippet/visualbasic/t-system.console_3.vb)]  \n  \n Unicode support for the console has the following limitations:  \n  \n-   UTF-32 encoding is not supported. The only supported Unicode encodings are UTF-8 and UTF-16, which are represented by the <xref:System.Text.UTF8Encoding> and <xref:System.Text.UnicodeEncoding> classes, respectively.  \n  \n-   Bidirectional output is not supported.  \n  \n-   Display of characters outside the Basic Multilingual Plane (that is, of surrogate pairs) is not supported, even if they are defined in a linked font file.  \n  \n-   Display of characters in complex scripts is not supported.  \n  \n-   Combining character sequences (that is, characters that consist of a base character and one or more combining characters) are displayed as separate characters. To work around this limitation, you can normalize the string to be displayed by calling the <xref:System.String.Normalize%2A?displayProperty=fullName> method before sending output to the console. In the following example, a string that contains the combining character sequence U+0061 U+0308 is displayed to the console as two characters before the output string is normalized, and as a single character after the <xref:System.String.Normalize%2A?displayProperty=fullName> method is called.  \n  \n     [!code-cs[System.Console.Class#5](~/add/codesnippet/csharp/t-system.console_4.cs)]\n     [!code-vb[System.Console.Class#5](~/add/codesnippet/visualbasic/t-system.console_4.vb)]  \n  \n     Note that normalization is a viable solution only if the Unicode standard for the character includes a pre-composed form that corresponds to a particular combining character sequence.  \n  \n-   If a font provides a glyph for a code point in the private use area, that glyph will be displayed. However, because characters in the private use area are application-specific, this may not be the expected glyph.  \n  \n The following example displays a range of Unicode characters to the console. The example accepts three command-line parameters: the start of the range to display, the end of the range to display, and whether to use the current console encoding (`false`) or UTF-16 encoding (`true`). It assumes that the console is using a TrueType font.  \n  \n [!code-cs[System.Console.Class#4](~/add/codesnippet/csharp/t-system.console_5.cs)]\n [!code-vb[System.Console.Class#4](~/add/codesnippet/visualbasic/t-system.console_5.vb)]  \n  \n<a name=\"Operations\"></a>   \n## Common Operations  \n The Console class contains the following methods for reading console input and writing console output:  \n  \n-   The overloads of the <xref:System.Console.ReadKey%2A> method read an individual character.  \n  \n-   The <xref:System.Console.ReadLine%2A> method reads an entire line of input.  \n  \n-   The <xref:System.Console.Write%2A> method overloads convert an instance of a value type, an array of characters, or a set of objects to a formatted or unformatted string, and then write that string to the console.  \n  \n-   A parallel set of <xref:System.Console.WriteLine%2A> method overloads output the same string as the <xref:System.Console.Write%2A> overloads but also add a line termination string.  \n  \n The Console class also contains methods and properties to perform the following operations:  \n  \n-   Get or set the size of the screen buffer. The <xref:System.Console.BufferHeight%2A> and <xref:System.Console.BufferWidth%2A> properties let you get or set the buffer height and width, respectively, and the <xref:System.Console.SetBufferSize%2A> method lets you set the buffer size in a single method call.  \n  \n-   Get or set the size of the console window. The <xref:System.Console.WindowHeight%2A> and <xref:System.Console.WindowWidth%2A> properties let you get or set the window height and width, respectively, and the <xref:System.Console.SetWindowSize%2A> method lets you set the window size in a single method call.  \n  \n-   Get or set the size of the cursor. The <xref:System.Console.CursorSize%2A> property specifies the height of the cursor in a character cell.  \n  \n-   Get or set the position of the console window relative to the screen buffer. The <xref:System.Console.WindowTop%2A> and <xref:System.Console.WindowLeft%2A> properties let you get or set the top row and leftmost column of the screen buffer that appears in the console window, and the <xref:System.Console.SetWindowPosition%2A> method lets you set these values in a single method call.  \n  \n-   Get or set the position of the cursor by getting or setting the <xref:System.Console.CursorTop%2A> and <xref:System.Console.CursorLeft%2A> properties, or set the position of the cursor by calling the <xref:System.Console.SetCursorPosition%2A> method.  \n  \n-   Move or clear data in the screen buffer by calling the <xref:System.Console.MoveBufferArea%2A> or <xref:System.Console.Clear%2A> method.  \n  \n-   Get or set the foreground and background colors by using the <xref:System.Console.ForegroundColor%2A> and <xref:System.Console.BackgroundColor%2A> properties, or reset the background and foreground to their default colors by calling the <xref:System.Console.ResetColor%2A> method.  \n  \n-   Play the sound of a beep through the console speaker by calling the <xref:System.Console.Beep%2A> method.  \n  \n<a name=\"Core\"></a>   \n## [!INCLUDE[net_core](~/add/includes/net-core-md.md)] Notes  \n In the .NET Framework on the desktop, the Console class uses the encoding returned by `GetConsoleCP` and `GetConsoleOutputCP`, which typically is a code page encoding. For example code, on systems whose culture is English (United States), code page 437 is the encoding that is used by default. However, [!INCLUDE[net_core](~/add/includes/net-core-md.md)] may make only a limited subset of these encodings available. Where this is the case, <xref:System.Text.Encoding.UTF8%2A?displayProperty=fullName> is used as the default encoding for the console.  \n  \n If your app depends on specific code page encodings, you can still make them available by doing the following *before* you call any Console methods:  \n  \n1.  Add a reference to the System.Text.Encoding.CodePages.dll assembly to your project.  \n  \n2.  Retrieve the <xref:System.Text.EncodingProvider> object from the <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=fullName> property.  \n  \n3.  Pass the <xref:System.Text.EncodingProvider> object to the <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=fullName> method to make the additional encodings supported by the encoding provider available.  \n  \n The Console class will then automatically use the default system encoding rather than UTF8, provided that you have registered the encoding provider before calling any Console output methods."
  example:
  - "The following example demonstrates how to read data from, and write data to, the standard input and output streams. Note that these streams can be redirected by using the <xref:System.Console.SetIn%2A> and <xref:System.Console.SetOut%2A> methods.  \n  \n [!code-cs[Classic Console Example#1](~/add/codesnippet/csharp/t-system.console_6.cs)]\n [!code-cpp[Classic Console Example#1](~/add/codesnippet/cpp/t-system.console_6.cpp)]\n [!code-vb[Classic Console Example#1](~/add/codesnippet/visualbasic/t-system.console_6.vb)]"
  syntax:
    content: public static class Console
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Console.BackgroundColor
  id: BackgroundColor
  parent: System.Console
  langs:
  - csharp
  name: BackgroundColor
  nameWithType: Console.BackgroundColor
  fullName: System.Console.BackgroundColor
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得或設定主控台的背景色彩。"
  remarks: "BackgroundColor 屬性的變更會影響只有個別字元儲存格的背景色彩變更後寫入的輸出。 若要變更整個主控台視窗的背景色彩，請設定 BackgroundColor 屬性並呼叫<xref:System.Console.Clear%2A>方法。</xref:System.Console.Clear%2A> 下列範例提供一個實例。       [!code-vb[System.Console.BackgroundColor#1](~/add/codesnippet/visualbasic/p-system.console.backgro_1.vb)][!code-cs[System.Console.BackgroundColor#1](~/add/codesnippet/csharp/p-system.console.backgro_1.cs) ] Windows 架構應用程式中，在其中的主控台不存在，「 取得 」 作業會傳回<xref:System.ConsoleColor?displayProperty=fullName>.</xref:System.ConsoleColor?displayProperty=fullName>  "
  example:
  - "The following example saves the values of the <xref:System.ConsoleColor> enumeration to an array and stores the current values of the BackgroundColor and <xref:System.Console.ForegroundColor%2A> properties to variables. It then changes the foreground color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current background, and it changes the background color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current foreground. (If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the <xref:System.Console.ResetColor%2A> method to restore the original console colors.  \n  \n [!code-vb[System.ConsoleColor#1](~/add/codesnippet/visualbasic/p-system.console.backgro_2.vb)]\n [!code-cs[System.ConsoleColor#1](~/add/codesnippet/csharp/p-system.console.backgro_2.cs)]"
  syntax:
    content: public static ConsoleColor BackgroundColor { get; set; }
    return:
      type: System.ConsoleColor
      description: "值，指定主控台; 的背景色彩也就是說，會出現在每個字元後面的色彩。 預設為黑色。"
  overload: System.Console.BackgroundColor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "設定作業中指定的色彩不是有效的成員<xref href=&quot;System.ConsoleColor&quot;> </xref>。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "使用者沒有執行此動作的權限。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.Beep
  id: Beep
  parent: System.Console
  langs:
  - csharp
  name: Beep()
  nameWithType: Console.Beep()
  fullName: System.Console.Beep()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "播放嗶聲透過主控台喇叭的音效。"
  remarks: "根據預設，會播放嗶聲 800 赫茲的頻率 200 毫秒持續時間。      > [!NOTE] ><xref:System.Console.Beep%2A>方法不支援在 64 位元版本的 Windows Vista 和 Windows XP。</xref:System.Console.Beep%2A>       嗶聲包裝 Windows 呼叫[函式發出嗶聲](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)。 嗶聲是否會產生 Windows 7 之前的 Windows 版本上的音效，取決於存在的 8254 可程式化間隔計時器晶片。 從 Windows 7，視預設音訊裝置。"
  example:
  - "The following example demonstrates the Beep method. The example accepts a number from 1 through 9 as a command line argument, and plays the beep that number of times.  \n  \n [!code-cs[console.beep#1](~/add/codesnippet/csharp/m-system.console.beep_1.cs)]\n [!code-cpp[console.beep#1](~/add/codesnippet/cpp/m-system.console.beep_1.cpp)]\n [!code-vb[console.beep#1](~/add/codesnippet/visualbasic/m-system.console.beep_1.vb)]"
  syntax:
    content: public static void Beep ();
    parameters: []
  overload: System.Console.Beep*
  exceptions:
  - type: System.Security.HostProtectionException
    commentId: T:System.Security.HostProtectionException
    description: "這個方法已執行的伺服器上，例如 SQL Server 不允許使用者介面的存取權。"
  platform:
  - net462
- uid: System.Console.Beep(System.Int32,System.Int32)
  id: Beep(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: Beep(Int32,Int32)
  nameWithType: Console.Beep(Int32,Int32)
  fullName: System.Console.Beep(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "播放嗶聲指定的頻率和持續期間透過主控台喇叭的音效。"
  remarks: "<xref:System.Console.Beep%2A>包裝 Windows 呼叫[函式發出嗶聲](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)。</xref:System.Console.Beep%2A> 是否<xref:System.Console.Beep%2A>產生 8254 可程式化間隔計時器晶片與否取決於 Windows 7 之前的版本的 Windows 上的音效。</xref:System.Console.Beep%2A> 從 Windows 7，視預設音訊裝置。      > [!NOTE] ><xref:System.Console.Beep%2A>方法不支援在 64 位元版本的 Windows Vista 和 Windows XP。</xref:System.Console.Beep%2A>"
  example:
  - "This example demonstrates the Beep method by playing the first few notes of a song through the console speaker.  \n  \n [!code-cpp[console.beep2#1](~/add/codesnippet/cpp/m-system.console.beep-sy_1.cpp)]\n [!code-vb[console.beep2#1](~/add/codesnippet/visualbasic/m-system.console.beep-sy_1.vb)]\n [!code-cs[console.beep2#1](~/add/codesnippet/csharp/m-system.console.beep-sy_1.cs)]"
  syntax:
    content: public static void Beep (int frequency, int duration);
    parameters:
    - id: frequency
      type: System.Int32
      description: "嗶聲，範圍是從 37 到 32767 赫茲的頻率。"
    - id: duration
      type: System.Int32
      description: "嗶聲的持續時間測量以毫秒為單位。"
  overload: System.Console.Beep*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>frequency</code>小於 37 或超過 32767 赫茲。       -或-<code>duration</code>小於或等於零。"
  - type: System.Security.HostProtectionException
    commentId: T:System.Security.HostProtectionException
    description: "這個方法已執行的伺服器上，例如 SQL Server 不允許存取主控台。"
  platform:
  - net462
- uid: System.Console.BufferHeight
  id: BufferHeight
  parent: System.Console
  langs:
  - csharp
  name: BufferHeight
  nameWithType: Console.BufferHeight
  fullName: System.Console.BufferHeight
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得或設定緩衝區的高度。"
  remarks: "此屬性定義資料列 （或線條） 儲存在緩衝區所存取的主控台模式視窗的數目。 相反地，<xref:System.Console.WindowHeight%2A>屬性定義會在任何特定時間實際顯示在主控台視窗中的資料列數目。</xref:System.Console.WindowHeight%2A> 如果實際寫入緩衝區的資料列數目超過所定義的資料列數目<xref:System.Console.WindowHeight%2A>屬性，使其顯示連續的數字是相等的資料列的視窗也可以垂直捲動<xref:System.Console.WindowHeight%2A>屬性且位於任何位置緩衝區中。</xref:System.Console.WindowHeight%2A> </xref:System.Console.WindowHeight%2A>       如果設定作業減少 BufferHeight 屬性的值，則會移除最上方線條。 例如，如果的行數會從 300 減少到 250、 行 0 到 49 會遭到移除，而現有程式碼行 50 到 299 變成行 0 到 249。"
  example:
  - "This example demonstrates the BufferHeight and <xref:System.Console.BufferWidth%2A> properties. The example reports the dimensions of an operating system window set to a buffer size of 300 rows and 85 columns.  \n  \n [!code-cs[console.bufferHW#1](~/add/codesnippet/csharp/p-system.console.bufferh_1.cs)]\n [!code-cpp[console.bufferHW#1](~/add/codesnippet/cpp/p-system.console.bufferh_1.cpp)]\n [!code-vb[console.bufferHW#1](~/add/codesnippet/visualbasic/p-system.console.bufferh_1.vb)]"
  syntax:
    content: public static int BufferHeight { get; set; }
    return:
      type: System.Int32
      description: "以資料列的緩衝區的目前高度。"
  overload: System.Console.BufferHeight*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "設定作業中的值小於或等於零。       -或-設定作業中的值是大於或等於&lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;。       -或-設定作業中的值是小於<> *> + <> </> *>。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "使用者沒有執行此動作的權限。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.BufferWidth
  id: BufferWidth
  parent: System.Console
  langs:
  - csharp
  name: BufferWidth
  nameWithType: Console.BufferWidth
  fullName: System.Console.BufferWidth
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得或設定緩衝區的寬度。"
  remarks: "如果設定作業減少 BufferWidth 屬性的值，則會移除最右邊的資料行。 例如，如果資料行的數目會從 80 減少為 60，會移除 60 到 79 個每個資料列的資料行。"
  example:
  - "This example demonstrates the <xref:System.Console.BufferHeight%2A> and BufferWidth properties. The example reports the dimensions of an operating system window set to a buffer size of 300 rows and 85 columns.  \n  \n [!code-cs[console.bufferHW#1](~/add/codesnippet/csharp/p-system.console.bufferw_1.cs)]\n [!code-cpp[console.bufferHW#1](~/add/codesnippet/cpp/p-system.console.bufferw_1.cpp)]\n [!code-vb[console.bufferHW#1](~/add/codesnippet/visualbasic/p-system.console.bufferw_1.vb)]"
  syntax:
    content: public static int BufferWidth { get; set; }
    return:
      type: System.Int32
      description: "以資料行緩衝區的目前寬度。"
  overload: System.Console.BufferWidth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "設定作業中的值小於或等於零。       -或-設定作業中的值是大於或等於&lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;。       -或-設定作業中的值是小於<> *> + <> </> *>。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "使用者沒有執行此動作的權限。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.CancelKeyPress
  id: CancelKeyPress
  parent: System.Console
  langs:
  - csharp
  name: CancelKeyPress
  nameWithType: Console.CancelKeyPress
  fullName: System.Console.CancelKeyPress
  type: Event
  assemblies:
  - mscorlib
  namespace: System
  summary: "發生時<xref href=&quot;System.ConsoleModifiers&quot;></xref>輔助按鍵 (Ctrl) 和<xref href=&quot;System.ConsoleKey&quot;></xref>主控台按鍵 (C) 或 Break 鍵同時按下 （Ctrl + C 或 Ctrl + Break）。"
  remarks: "此事件用於搭配<xref:System.ConsoleCancelEventHandler?displayProperty=fullName>和<xref:System.ConsoleCancelEventArgs?displayProperty=fullName>。</xref:System.ConsoleCancelEventArgs?displayProperty=fullName> </xref:System.ConsoleCancelEventHandler?displayProperty=fullName> CancelKeyPress 事件可讓以攔截 Ctrl + C 訊號，讓事件處理常式可以決定是否要繼續執行，或結束主控台應用程式。 如需處理事件的詳細資訊，請參閱[處理和引發事件](~/add/includes/ajax-current-ext-md.md)。       當使用者按 Ctrl + C 或 Ctrl + Break、 在引發事件 CancelKeyPress 和應用程式的<xref:System.ConsoleCancelEventHandler>事件處理常式會執行。</xref:System.ConsoleCancelEventHandler> 此事件處理常式會傳遞<xref:System.ConsoleCancelEventArgs>有兩個實用屬性的物件:- <xref:System.ConsoleCancelEventArgs.SpecialKey%2A>，可讓您判斷是否因使用者按下 Ctrl + C 而叫用處理常式 (屬性值是<xref:System.ConsoleSpecialKey?displayProperty=fullName>) 或 Ctrl + Break (屬性值是<xref:System.ConsoleSpecialKey?displayProperty=fullName>)。</xref:System.ConsoleSpecialKey?displayProperty=fullName> </xref:System.ConsoleSpecialKey?displayProperty=fullName> </xref:System.ConsoleCancelEventArgs.SpecialKey%2A> </xref:System.ConsoleCancelEventArgs>      - <xref:System.ConsoleCancelEventArgs.Cancel%2A>，可讓您判斷如何您的應用程式應該回應使用者按下 Ctrl + C 或 Ctrl + Break。</xref:System.ConsoleCancelEventArgs.Cancel%2A> 根據預設，<xref:System.ConsoleCancelEventArgs.Cancel%2A>屬性是`false`，其中程式終止事件處理常式結束時執行的原因。</xref:System.ConsoleCancelEventArgs.Cancel%2A> 變更它的屬性以`true`指定應用程式應該繼續執行。      > [!TIP] > 如果您的應用程式有簡單的需求，您可以使用<xref:System.Console.TreatControlCAsInput%2A>屬性而不是此事件。</xref:System.Console.TreatControlCAsInput%2A> 此屬性設定為`false`，您可以確保您的應用程式一律會結束，而使用者按下 Ctrl + C。 設定為`true`，您可以確保按 Ctrl + C 將不會終止應用程式。       此事件的事件處理常式是在執行緒集區執行緒上執行。"
  example:
  - "The following example demonstrates how the CancelKeyPress event is used. When you press Ctrl+C, the read operation is interrupted and the `myHandler` event handler is invoked. Upon entry to the event handler, the <xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=fullName> property is `false`, which means that the current process will terminate when the event handler terminates. However, the event handler sets the <xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=fullName> property to `true`, which means that the process will not terminate and the read operation will resume.  \n  \n [!code-cs[console.cancelkeypress#1](~/add/codesnippet/csharp/e-system.console.cancelk_1.cs)]\n [!code-cpp[console.cancelkeypress#1](~/add/codesnippet/cpp/e-system.console.cancelk_1.cpp)]\n [!code-vb[console.cancelkeypress#1](~/add/codesnippet/visualbasic/e-system.console.cancelk_1.vb)]"
  syntax:
    content: public static event ConsoleCancelEventHandler CancelKeyPress;
    return:
      type: System.ConsoleCancelEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Console.CapsLock
  id: CapsLock
  parent: System.Console
  langs:
  - csharp
  name: CapsLock
  nameWithType: Console.CapsLock
  fullName: System.Console.CapsLock
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得值，指出是否開啟或關閉 CAPS LOCK 鍵盤切換。"
  syntax:
    content: public static bool CapsLock { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已開啟 CAPS LOCK;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果 CAPS LOCK 已關閉。"
  overload: System.Console.CapsLock*
  exceptions: []
  platform:
  - net462
- uid: System.Console.Clear
  id: Clear
  parent: System.Console
  langs:
  - csharp
  name: Clear()
  nameWithType: Console.Clear()
  fullName: System.Console.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "清除主控台緩衝區及包含顯示資訊的對應主控台視窗。"
  remarks: "Clear 方法，使用等於叫用 MS-DOS`cls`命令在命令提示字元 視窗中。 Clear 方法呼叫時，游標會自動捲動至視窗的左上角，而螢幕緩衝區的內容會設定為使用目前的前景背景色彩的空白。      > [!NOTE] > 嘗試呼叫方法，主控台應用程式的輸出重新導向至檔案時，會擲回<xref:System.IO.IOException>.</xref:System.IO.IOException> 若要避免這個問題，一律包裝中的清除方法的呼叫`try`...`catch` 區塊。"
  example:
  - "The following example uses the Clear method to clear the console before it executes a loop, prompts the user to select a foreground and background color and to enter a string to display. If the user chooses not to exit the program, the console's original foreground and background colors are restored and the Clear method is called again before re-executing the loop.  \n  \n [!code-vb[System.Console.Clear#1](~/add/codesnippet/visualbasic/m-system.console.clear_1.vb)]\n [!code-cs[System.Console.Clear#1](~/add/codesnippet/csharp/m-system.console.clear_1.cs)]  \n  \n The example relies on a `GetKeyPress` method to validate the user's selection of a foreground and background color.  \n  \n This example demonstrates the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.CursorTop%2A> properties, and the <xref:System.Console.SetCursorPosition%2A> and Clear methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of \"+\", \"&#124;\", and \"-\" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  \n  \n [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/m-system.console.clear_2.cs)]\n [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/m-system.console.clear_2.cpp)]\n [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/m-system.console.clear_2.vb)]"
  syntax:
    content: public static void Clear ();
    parameters: []
  overload: System.Console.Clear*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.CursorLeft
  id: CursorLeft
  parent: System.Console
  langs:
  - csharp
  name: CursorLeft
  nameWithType: Console.CursorLeft
  fullName: System.Console.CursorLeft
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得或設定緩衝區內游標的資料行位置。"
  remarks: ''
  example:
  - "This example demonstrates the CursorLeft and <xref:System.Console.CursorTop%2A> properties, and the <xref:System.Console.SetCursorPosition%2A> and <xref:System.Console.Clear%2A> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of \"+\", \"&#124;\", and \"-\" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  \n  \n [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/p-system.console.cursorl_1.cs)]\n [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/p-system.console.cursorl_1.cpp)]\n [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/p-system.console.cursorl_1.vb)]"
  syntax:
    content: public static int CursorLeft { get; set; }
    return:
      type: System.Int32
      description: "資料指標的資料行中的目前位置。"
  overload: System.Console.CursorLeft*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "設定作業中的值小於零。       -或者-設定作業中的值是大於或等於<xref:System.Console.BufferWidth*>.</xref:System.Console.BufferWidth*>"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "使用者沒有執行此動作的權限。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.CursorSize
  id: CursorSize
  parent: System.Console
  langs:
  - csharp
  name: CursorSize
  nameWithType: Console.CursorSize
  fullName: System.Console.CursorSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得或設定字元儲存格內游標的高度。"
  remarks: "資料指標外觀，範圍從儲存格底部的水平列時的屬性值為 1，到完全填滿資料格，當屬性值為 100 而異。"
  example:
  - "This example demonstrates the CursorSize property. The example increases the size of the cursor each time any console key is pressed, then restores the cursor to its original size before terminating.  \n  \n [!code-cs[console.cursorsize#1](~/add/codesnippet/csharp/p-system.console.cursors_1.cs)]\n [!code-cpp[console.cursorsize#1](~/add/codesnippet/cpp/p-system.console.cursors_1.cpp)]\n [!code-vb[console.cursorsize#1](~/add/codesnippet/visualbasic/p-system.console.cursors_1.vb)]"
  syntax:
    content: public static int CursorSize { get; set; }
    return:
      type: System.Int32
      description: "資料指標的字元儲存格高度的百分比表示的大小。 屬性值的範圍從 1 到 100 之間。"
  overload: System.Console.CursorSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "設定作業中指定的值是小於 1 或大於 100。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "使用者沒有執行此動作的權限。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.CursorTop
  id: CursorTop
  parent: System.Console
  langs:
  - csharp
  name: CursorTop
  nameWithType: Console.CursorTop
  fullName: System.Console.CursorTop
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得或設定緩衝區內游標的資料列位置。"
  remarks: ''
  example:
  - "This example demonstrates the <xref:System.Console.CursorLeft%2A> and CursorTop properties, and the <xref:System.Console.SetCursorPosition%2A> and <xref:System.Console.Clear%2A> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of \"+\", \"&#124;\", and \"-\" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  \n  \n [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/p-system.console.cursortop_1.cs)]\n [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/p-system.console.cursortop_1.cpp)]\n [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/p-system.console.cursortop_1.vb)]"
  syntax:
    content: public static int CursorTop { get; set; }
    return:
      type: System.Int32
      description: "資料指標的資料列中的目前位置。"
  overload: System.Console.CursorTop*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "設定作業中的值小於零。       -或者-設定作業中的值是大於或等於<xref:System.Console.BufferHeight*>.</xref:System.Console.BufferHeight*>"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "使用者沒有執行此動作的權限。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.CursorVisible
  id: CursorVisible
  parent: System.Console
  langs:
  - csharp
  name: CursorVisible
  nameWithType: Console.CursorVisible
  fullName: System.Console.CursorVisible
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得或設定值，指出資料指標是否為可見。"
  remarks: ''
  example:
  - "This example demonstrates the CursorVisible property. The example makes the cursor visible if the first column of input is a '+' character or invisible if the input is a '-' character.  \n  \n [!code-cs[console.cursorvis#1](~/add/codesnippet/csharp/p-system.console.cursorv_1.cs)]\n [!code-vb[console.cursorvis#1](~/add/codesnippet/visualbasic/p-system.console.cursorv_1.vb)]\n [!code-cpp[console.cursorvis#1](~/add/codesnippet/cpp/p-system.console.cursorv_1.cpp)]"
  syntax:
    content: public static bool CursorVisible { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果資料指標是可見的。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Console.CursorVisible*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "使用者沒有執行此動作的權限。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.Error
  id: Error
  parent: System.Console
  langs:
  - csharp
  name: Error
  nameWithType: Console.Error
  fullName: System.Console.Error
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得標準錯誤輸出資料流。"
  remarks: "依預設，此標準錯誤資料流是設定至主控台。 它可以設定為與另一個資料流<xref:System.Console.SetError%2A>方法。</xref:System.Console.SetError%2A> 標準錯誤資料流重新導向之後，可以重新呼叫<xref:System.Console.OpenStandardError%2A>方法。</xref:System.Console.OpenStandardError%2A>       在主控台應用程式的資訊輸出通常會導向至檔案，可透過錯誤內容的標準錯誤資料流可用來對主控台顯示的資訊，即使在重新導向輸出。 下列範例會顯示在從 1 開始的時間為 10 個數字的產品資料表。 在 10 個數字的每個設定之後詢問使用者是否顯示 下一組用於錯誤屬性。 如果標準輸出重新導向至檔案，使用者仍會要求常式是否應該產生下的一個產品集。       [!code-cs[System.Console.Error#1](~/add/codesnippet/csharp/p-system.console.error_1.cs)][!code-vb[System.Console.Error#1  ](~/add/codesnippet/visualbasic/p-system.console.error_1.vb)]"
  example:
  - "The following example is a command line utility named ExpandTabs that replaces tab characters in a text file with four spaces, the value defined by the `tabSize` variable. It redirects the standard input and output streams to files, but uses the Error property to write the standard error stream to the console. It can be launched from the command line by supplying the name of the file that contains tab characters and the name of the output file.  \n  \n [!code-cpp[Console-EXPANDTABSEX#1](~/add/codesnippet/cpp/p-system.console.error_2.cpp)]\n [!code-cs[Console-EXPANDTABSEX#1](~/add/codesnippet/csharp/p-system.console.error_2.cs)]\n [!code-vb[Console-EXPANDTABSEX#1](~/add/codesnippet/visualbasic/p-system.console.error_2.vb)]  \n  \n The following example is a simple text file viewer that displays the contents of one or more text files to the console. If there are no command line arguments, or if any files passed as command line arguments do not exist, the example calls the <xref:System.Console.SetError%2A> method to redirect error information to a file, calls the <xref:System.Console.OpenStandardError%2A> method in the process of reacquiring the standard error stream, and indicates that error information was written to a file.  \n  \n [!code-cs[System.Console.OpenStandardError#1](~/add/codesnippet/csharp/p-system.console.error_3.cs)]\n [!code-vb[System.Console.OpenStandardError#1](~/add/codesnippet/visualbasic/p-system.console.error_3.vb)]  \n  \n Note that the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property is set to `true` before reacquiring the error stream. This ensures that output will be sent to the console immediately rather than buffered."
  syntax:
    content: public static System.IO.TextWriter Error { get; }
    return:
      type: System.IO.TextWriter
      description: "A <xref:System.IO.TextWriter>，代表標準錯誤輸出資料流。</xref:System.IO.TextWriter>"
  overload: System.Console.Error*
  exceptions: []
  platform:
  - net462
- uid: System.Console.ForegroundColor
  id: ForegroundColor
  parent: System.Console
  langs:
  - csharp
  name: ForegroundColor
  nameWithType: Console.ForegroundColor
  fullName: System.Console.ForegroundColor
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得或設定主控台的前景色彩。"
  remarks: "Windows 應用程式中，在其中的主控台不存在，「 取得 」 作業會傳回<xref:System.ConsoleColor>.</xref:System.ConsoleColor>"
  example:
  - "The following example checks whether the console's background color is black and, if it is, it changes the background color to red and the foreground color to black.  \n  \n [!code-cs[System.ConsoleColor#2](~/add/codesnippet/csharp/p-system.console.foregro_1.cs)]\n [!code-vb[System.ConsoleColor#2](~/add/codesnippet/visualbasic/p-system.console.foregro_1.vb)]  \n  \n The following example saves the values of the <xref:System.ConsoleColor> enumeration to an array and stores the current values of the <xref:System.Console.BackgroundColor%2A> and ForegroundColor properties to variables. It then changes the foreground color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current background, and it changes the background color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current foreground. (If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the <xref:System.Console.ResetColor%2A> method to restore the original console colors.  \n  \n [!code-vb[System.ConsoleColor#1](~/add/codesnippet/visualbasic/p-system.console.foregro_2.vb)]\n [!code-cs[System.ConsoleColor#1](~/add/codesnippet/csharp/p-system.console.foregro_2.cs)]"
  syntax:
    content: public static ConsoleColor ForegroundColor { get; set; }
    return:
      type: System.ConsoleColor
      description: "A <xref href=&quot;System.ConsoleColor&quot;> </xref>可指定主控台的前景色彩，也就是每個字元色彩顯示。 預設為灰色。"
  overload: System.Console.ForegroundColor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "設定作業中指定的色彩不是有效的成員<xref href=&quot;System.ConsoleColor&quot;> </xref>。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "使用者沒有執行此動作的權限。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.In
  id: In
  parent: System.Console
  langs:
  - csharp
  name: In
  nameWithType: Console.In
  fullName: System.Console.In
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得標準輸入資料流。"
  remarks: "根據預設，這個屬性是設標準輸入資料流。 這個屬性可以設定為與另一個資料流<xref:System.Console.SetIn%2A>方法。</xref:System.Console.SetIn%2A>       標準輸入資料流的讀取作業會同步執行。 也就是說，他們會封鎖直到指定的讀取的作業已完成。 這就是偶數，則為 true 如果非同步方法，例如<xref:System.IO.TextReader.ReadLineAsync%2A>，會在呼叫<xref:System.IO.TextReader>In 屬性所傳回的物件。</xref:System.IO.TextReader> </xref:System.IO.TextReader.ReadLineAsync%2A>"
  example:
  - "The following sample illustrates the use of the `In` property.  \n  \n [!code-cpp[consolein#1](~/add/codesnippet/cpp/p-system.console.in_1.cpp)]\n [!code-cs[consolein#1](~/add/codesnippet/csharp/p-system.console.in_1.cs)]\n [!code-vb[consolein#1](~/add/codesnippet/visualbasic/p-system.console.in_1.vb)]"
  syntax:
    content: public static System.IO.TextReader In { get; }
    return:
      type: System.IO.TextReader
      description: "A <xref:System.IO.TextReader>，代表標準輸入資料流。</xref:System.IO.TextReader>"
  overload: System.Console.In*
  exceptions: []
  platform:
  - net462
- uid: System.Console.InputEncoding
  id: InputEncoding
  parent: System.Console
  langs:
  - csharp
  name: InputEncoding
  nameWithType: Console.InputEncoding
  fullName: System.Console.InputEncoding
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得或設定主控台用來讀取輸入的編碼方式。"
  remarks: "主控台會使用輸入來轉譯鍵盤輸入成對應的字元編碼方式。 輸入的編碼方式會併入 256 鍵盤字元碼會對應至個別字元的字碼頁。 不同的字碼頁包含不同的特殊字元，一般而言是針對語言或語言群組進行自訂。       從開始[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]，屬性取得作業可能會傳回快取的值，而不是主控台的目前輸入的編碼方式。 這種情形有 InputEncoding 內容的值指派給 InputEncoding 屬性，例如先呼叫 Windows 以外的其他方式修改`SetConsoleCP`函式，或使用`chcp`從 PowerShell 指令碼命令。"
  syntax:
    content: public static System.Text.Encoding InputEncoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "編碼方式，用來讀取主控台輸入。"
  overload: System.Console.InputEncoding*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "設定作業中的屬性值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "此作業執行期間發生錯誤。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "您的應用程式沒有執行這項作業的權限。"
  platform:
  - net462
- uid: System.Console.IsErrorRedirected
  id: IsErrorRedirected
  parent: System.Console
  langs:
  - csharp
  name: IsErrorRedirected
  nameWithType: Console.IsErrorRedirected
  fullName: System.Console.IsErrorRedirected
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得值，指出是否已從標準錯誤資料流重新導向錯誤輸出資料流。"
  syntax:
    content: public static bool IsErrorRedirected { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果重新導向錯誤輸出;，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Console.IsErrorRedirected*
  exceptions: []
  platform:
  - net462
- uid: System.Console.IsInputRedirected
  id: IsInputRedirected
  parent: System.Console
  langs:
  - csharp
  name: IsInputRedirected
  nameWithType: Console.IsInputRedirected
  fullName: System.Console.IsInputRedirected
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得值，指出是否已從標準輸入資料流重新導向輸入。"
  syntax:
    content: public static bool IsInputRedirected { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果輸入已重新導向。，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Console.IsInputRedirected*
  exceptions: []
  platform:
  - net462
- uid: System.Console.IsOutputRedirected
  id: IsOutputRedirected
  parent: System.Console
  langs:
  - csharp
  name: IsOutputRedirected
  nameWithType: Console.IsOutputRedirected
  fullName: System.Console.IsOutputRedirected
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得值，指出是否已從標準輸出資料流重新導向輸出。"
  syntax:
    content: public static bool IsOutputRedirected { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果輸出已重新導向。，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Console.IsOutputRedirected*
  exceptions: []
  platform:
  - net462
- uid: System.Console.KeyAvailable
  id: KeyAvailable
  parent: System.Console
  langs:
  - csharp
  name: KeyAvailable
  nameWithType: Console.KeyAvailable
  fullName: System.Console.KeyAvailable
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得值，指出是否按下按鍵可以輸入資料流中。"
  remarks: "屬性傳回的值會立即;也就是說，KeyAvailable 屬性不會封鎖輸入直到按下按鍵為止。       只有搭配使用 KeyAvailable 屬性<xref:System.Console.ReadKey%2A>方法，不<xref:System.Console.Read%2A>或<xref:System.Console.ReadLine%2A>方法。</xref:System.Console.ReadLine%2A> </xref:System.Console.Read%2A> </xref:System.Console.ReadKey%2A>"
  example:
  - "The following example demonstrates how to use the KeyAvailable property to create a loop that runs until a key is pressed.  \n  \n [!code-cs[console.keyavailable#1](~/add/codesnippet/csharp/p-system.console.keyavai_1.cs)]\n [!code-cpp[console.keyavailable#1](~/add/codesnippet/cpp/p-system.console.keyavai_1.cpp)]\n [!code-vb[console.keyavailable#1](~/add/codesnippet/visualbasic/p-system.console.keyavai_1.vb)]"
  syntax:
    content: public static bool KeyAvailable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果按下按鍵功能;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Console.KeyAvailable*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "標準輸入已重新導向至檔案而非鍵盤。"
  platform:
  - net462
- uid: System.Console.LargestWindowHeight
  id: LargestWindowHeight
  parent: System.Console
  langs:
  - csharp
  name: LargestWindowHeight
  nameWithType: Console.LargestWindowHeight
  fullName: System.Console.LargestWindowHeight
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得最大的可能值的主控台視窗資料列，根據目前的字型和螢幕解析度。"
  syntax:
    content: public static int LargestWindowHeight { get; }
    return:
      type: System.Int32
      description: "以列數測量的最大可能的主控台視窗的高度。"
  overload: System.Console.LargestWindowHeight*
  exceptions: []
  platform:
  - net462
- uid: System.Console.LargestWindowWidth
  id: LargestWindowWidth
  parent: System.Console
  langs:
  - csharp
  name: LargestWindowWidth
  nameWithType: Console.LargestWindowWidth
  fullName: System.Console.LargestWindowWidth
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得最大的可能值的主控台視窗資料行，根據目前的字型和螢幕解析度。"
  syntax:
    content: public static int LargestWindowWidth { get; }
    return:
      type: System.Int32
      description: "資料行中測量的最大可能的主控台視窗的寬度。"
  overload: System.Console.LargestWindowWidth*
  exceptions: []
  platform:
  - net462
- uid: System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "將螢幕緩衝區的指定之來源區域複製到指定之目標區域。"
  remarks: "如果目的地和來源參數都指定在目前螢幕緩衝區界限之外的位置，只可以放入目的區域內之來源區域的一部分會複製。 也就是來源區域會遭到裁剪，以符合目前螢幕緩衝區。       MoveBufferArea 方法會將來源區域複製到目的區域。 如果目的區域沒有交集之來源區域，空白使用目前的前景和背景色彩填滿來源區域。 否則，不會填滿來源區域的交集的部分。"
  syntax:
    content: public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);
    parameters:
    - id: sourceLeft
      type: System.Int32
      description: "來源區域最左邊資料行。"
    - id: sourceTop
      type: System.Int32
      description: "來源區域最上方資料列。"
    - id: sourceWidth
      type: System.Int32
      description: "來源區域中的資料行數目。"
    - id: sourceHeight
      type: System.Int32
      description: "來源區域中的資料列數目。"
    - id: targetLeft
      type: System.Int32
      description: "目的區域最左邊資料行。"
    - id: targetTop
      type: System.Int32
      description: "目的區域最上方的資料列。"
  overload: System.Console.MoveBufferArea*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "一或多個參數小於零。       -or-       <code>sourceLeft</code> or <code>targetLeft</code> is greater than or equal to <>*>.      -or-       <code>sourceTop</code> or <code>targetTop</code> is greater than or equal to <>*>.       -or-       <code>sourceTop</code> + <code>sourceHeight</code> is greater than or equal to <>*>.      -or-       <code>sourceLeft</code> + <code>sourceWidth</code> is greater than or equal to <>*>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "使用者沒有執行此動作的權限。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)
  id: MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)
  parent: System.Console
  langs:
  - csharp
  name: MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
  nameWithType: Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
  fullName: System.Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "將螢幕緩衝區的指定之來源區域複製到指定之目標區域。"
  remarks: "如果目的地和來源參數會指定目前螢幕緩衝區的界限之外的位置，只可以放入目的區域內之來源區域的一部分會複製。 也就是來源區域會遭到裁剪，以符合目前螢幕緩衝區。       <xref:System.Console.MoveBufferArea%2A>方法將來源區域複製到目的區域。</xref:System.Console.MoveBufferArea%2A> 如果目的區域沒有交集之來源區域，與所指定的字元填滿來源區域`sourceChar`，使用所指定的色彩`sourceForeColor`和`sourceBackColor`。 否則，不會填滿來源區域的交集的部分。       <xref:System.Console.MoveBufferArea%2A>方法會執行任何作業，如果`sourceWidth`或`sourceHeight`為零。</xref:System.Console.MoveBufferArea%2A>"
  syntax:
    content: public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);
    parameters:
    - id: sourceLeft
      type: System.Int32
      description: "來源區域最左邊資料行。"
    - id: sourceTop
      type: System.Int32
      description: "來源區域最上方資料列。"
    - id: sourceWidth
      type: System.Int32
      description: "來源區域中的資料行數目。"
    - id: sourceHeight
      type: System.Int32
      description: "來源區域中的資料列數目。"
    - id: targetLeft
      type: System.Int32
      description: "目的區域最左邊資料行。"
    - id: targetTop
      type: System.Int32
      description: "目的區域最上方的資料列。"
    - id: sourceChar
      type: System.Char
      description: "用來填滿來源區域的字元。"
    - id: sourceForeColor
      type: System.ConsoleColor
      description: "用來填滿來源區域的前景色彩。"
    - id: sourceBackColor
      type: System.ConsoleColor
      description: "用來填滿來源區域的背景色彩。"
  overload: System.Console.MoveBufferArea*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "一或多個參數小於零。       -or-       <code>sourceLeft</code> or <code>targetLeft</code> is greater than or equal to <>*>.      -or-       <code>sourceTop</code> or <code>targetTop</code> is greater than or equal to <>*>.       -or-       <code>sourceTop</code> + <code>sourceHeight</code> is greater than or equal to <>*>.      -or-       <code>sourceLeft</code> + <code>sourceWidth</code> is greater than or equal to <>*>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "一或兩個色彩參數不是成員的<xref href=&quot;System.ConsoleColor&quot;></xref>列舉型別。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "使用者沒有執行此動作的權限。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.NumberLock
  id: NumberLock
  parent: System.Console
  langs:
  - csharp
  name: NumberLock
  nameWithType: Console.NumberLock
  fullName: System.Console.NumberLock
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得值，指出是否開啟或關閉 NUM LOCK 鍵盤切換。"
  syntax:
    content: public static bool NumberLock { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已開啟 NUM LOCK;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果 NUM LOCK 已關閉。"
  overload: System.Console.NumberLock*
  exceptions: []
  platform:
  - net462
- uid: System.Console.OpenStandardError
  id: OpenStandardError
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardError()
  nameWithType: Console.OpenStandardError()
  fullName: System.Console.OpenStandardError()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "擷取標準錯誤資料流。"
  remarks: "這個方法可用來重新取得標準錯誤資料流，由變更之後<xref:System.Console.SetError%2A>方法。</xref:System.Console.SetError%2A>"
  example:
  - "The following example is a simple text file viewer that displays the contents of one or more text files to the console. If there are no command line arguments, or if any files passed as command line arguments do not exist, the example calls the <xref:System.Console.SetError%2A> method to redirect error information to a file, calls the OpenStandardError method in the process of reacquiring the standard error stream, and indicates that error information was written to a file.  \n  \n [!code-cs[System.Console.OpenStandardError#1](~/add/codesnippet/csharp/m-system.console.opensta_4_1.cs)]\n [!code-vb[System.Console.OpenStandardError#1](~/add/codesnippet/visualbasic/m-system.console.opensta_4_1.vb)]  \n  \n Note that the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property is set to `true` before reacquiring the error stream. This ensures that output will be sent to the console immediately rather than buffered."
  syntax:
    content: public static System.IO.Stream OpenStandardError ();
    parameters: []
    return:
      type: System.IO.Stream
      description: "標準錯誤資料流中。"
  overload: System.Console.OpenStandardError*
  exceptions: []
  platform:
  - net462
- uid: System.Console.OpenStandardError(System.Int32)
  id: OpenStandardError(System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardError(Int32)
  nameWithType: Console.OpenStandardError(Int32)
  fullName: System.Console.OpenStandardError(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "擷取標準錯誤資料流，設定為指定的緩衝區大小。"
  remarks: "這個方法可用來重新取得標準錯誤資料流，由變更之後<xref:System.Console.SetError%2A>方法。</xref:System.Console.SetError%2A>"
  syntax:
    content: public static System.IO.Stream OpenStandardError (int bufferSize);
    parameters:
    - id: bufferSize
      type: System.Int32
      description: "內部資料流緩衝區大小。"
    return:
      type: System.IO.Stream
      description: "標準錯誤資料流中。"
  overload: System.Console.OpenStandardError*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>bufferSize</code>小於或等於零。"
  platform:
  - net462
- uid: System.Console.OpenStandardInput
  id: OpenStandardInput
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardInput()
  nameWithType: Console.OpenStandardInput()
  fullName: System.Console.OpenStandardInput()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "擷取標準輸入資料流。"
  remarks: "這個方法可用來重新取得標準輸入資料流，由變更之後<xref:System.Console.SetIn%2A>方法。</xref:System.Console.SetIn%2A>"
  example:
  - "The following example illustrates the use of the `OpenStandardInput` property.  \n  \n [!code-cs[System.Console.OpenStandartInput#1](~/add/codesnippet/csharp/m-system.console.opensta_3_1.cs)]\n [!code-vb[System.Console.OpenStandartInput#1](~/add/codesnippet/visualbasic/m-system.console.opensta_3_1.vb)]\n [!code-cpp[System.Console.OpenStandartInput#1](~/add/codesnippet/cpp/m-system.console.opensta_3_1.cpp)]"
  syntax:
    content: public static System.IO.Stream OpenStandardInput ();
    parameters: []
    return:
      type: System.IO.Stream
      description: "標準輸入資料流。"
  overload: System.Console.OpenStandardInput*
  exceptions: []
  platform:
  - net462
- uid: System.Console.OpenStandardInput(System.Int32)
  id: OpenStandardInput(System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardInput(Int32)
  nameWithType: Console.OpenStandardInput(Int32)
  fullName: System.Console.OpenStandardInput(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "擷取標準輸入資料流，它會設定為指定的緩衝區大小。"
  remarks: "這個方法可用來重新取得標準輸出資料流，由變更之後<xref:System.Console.SetIn%2A>方法。</xref:System.Console.SetIn%2A>"
  example:
  - "The following example illustrates the use of the `OpenStandardInput` property.  \n  \n [!code-cs[System.Console.OpenStandartInput#1](~/add/codesnippet/csharp/m-system.console.opensta_2_1.cs)]\n [!code-vb[System.Console.OpenStandartInput#1](~/add/codesnippet/visualbasic/m-system.console.opensta_2_1.vb)]\n [!code-cpp[System.Console.OpenStandartInput#1](~/add/codesnippet/cpp/m-system.console.opensta_2_1.cpp)]"
  syntax:
    content: public static System.IO.Stream OpenStandardInput (int bufferSize);
    parameters:
    - id: bufferSize
      type: System.Int32
      description: "內部資料流緩衝區大小。"
    return:
      type: System.IO.Stream
      description: "標準輸入資料流。"
  overload: System.Console.OpenStandardInput*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>bufferSize</code>小於或等於零。"
  platform:
  - net462
- uid: System.Console.OpenStandardOutput
  id: OpenStandardOutput
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardOutput()
  nameWithType: Console.OpenStandardOutput()
  fullName: System.Console.OpenStandardOutput()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "擷取標準輸出資料流。"
  remarks: "這個方法可用來重新取得標準輸出資料流，由變更之後<xref:System.Console.SetOut%2A>方法。</xref:System.Console.SetOut%2A>"
  example:
  - "The following example illustrates the use of the OpenStandardOutput method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command-line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  \n  \n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.opensta_0_1.cpp)]\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.opensta_0_1.vb)]\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.opensta_0_1.cs)]"
  syntax:
    content: public static System.IO.Stream OpenStandardOutput ();
    parameters: []
    return:
      type: System.IO.Stream
      description: "標準輸出資料流中。"
  overload: System.Console.OpenStandardOutput*
  exceptions: []
  platform:
  - net462
- uid: System.Console.OpenStandardOutput(System.Int32)
  id: OpenStandardOutput(System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardOutput(Int32)
  nameWithType: Console.OpenStandardOutput(Int32)
  fullName: System.Console.OpenStandardOutput(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "擷取標準輸出資料流，設定為指定的緩衝區大小。"
  remarks: "這個方法可用來重新取得標準輸出資料流，由變更之後<xref:System.Console.SetOut%2A>方法。</xref:System.Console.SetOut%2A>"
  example:
  - "The following example illustrates the use of the OpenStandardOutput method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  \n  \n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.opensta_1_1.cpp)]\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.opensta_1_1.vb)]\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.opensta_1_1.cs)]"
  syntax:
    content: public static System.IO.Stream OpenStandardOutput (int bufferSize);
    parameters:
    - id: bufferSize
      type: System.Int32
      description: "內部資料流緩衝區大小。"
    return:
      type: System.IO.Stream
      description: "標準輸出資料流中。"
  overload: System.Console.OpenStandardOutput*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>bufferSize</code>小於或等於零。"
  platform:
  - net462
- uid: System.Console.Out
  id: Out
  parent: System.Console
  langs:
  - csharp
  name: Out
  nameWithType: Console.Out
  fullName: System.Console.Out
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得標準輸出資料流。"
  remarks: "根據預設，這個屬性是設定標準輸出資料流。 這個屬性可以設定為與另一個資料流<xref:System.Console.SetOut%2A>方法。</xref:System.Console.SetOut%2A>       請注意，呼叫`Console.Out.WriteLine`方法相當於呼叫對應<xref:System.Console.WriteLine%2A>方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example uses the Out property to display an array containing the names of files in the application's current directory to the standard output device. It then sets the standard output to a file named Files.txt and lists the array elements to the file. Finally, it sets the output to the standard output stream and again displays the array elements to the standard output device.  \n  \n [!code-cs[System.Console.Out#1](~/add/codesnippet/csharp/p-system.console.out_1.cs)]\n [!code-vb[System.Console.Out#1](~/add/codesnippet/visualbasic/p-system.console.out_1.vb)]"
  syntax:
    content: public static System.IO.TextWriter Out { get; }
    return:
      type: System.IO.TextWriter
      description: "A <xref:System.IO.TextWriter>，代表標準輸出資料流。</xref:System.IO.TextWriter>"
  overload: System.Console.Out*
  exceptions: []
  platform:
  - net462
- uid: System.Console.OutputEncoding
  id: OutputEncoding
  parent: System.Console
  langs:
  - csharp
  name: OutputEncoding
  nameWithType: Console.OutputEncoding
  fullName: System.Console.OutputEncoding
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得或設定主控台用來寫入輸出的編碼方式。"
  remarks: "主控台會使用輸出的編碼方式轉譯成對應的主控台顯示字元的應用程式所寫入的字元。 主控台會使用預設字碼頁是由系統地區設定所決定。       從開始[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]，屬性取得作業可能會傳回快取的值，而不是主控台的目前輸出的編碼方式。 指派至 OutputEncoding 屬性，例如先呼叫 Windows 以外的其他方式修改 OutputEncoding 屬性的值可能發生這`SetConsoleOutputCP`函式。"
  syntax:
    content: public static System.Text.Encoding OutputEncoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "編碼方式，用來寫入主控台輸出。"
  overload: System.Console.OutputEncoding*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "設定作業中的屬性值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "此作業執行期間發生錯誤。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "您的應用程式沒有執行這項作業的權限。"
  platform:
  - net462
- uid: System.Console.Read
  id: Read
  parent: System.Console
  langs:
  - csharp
  name: Read()
  nameWithType: Console.Read()
  fullName: System.Console.Read()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "從標準輸入資料流讀取下一個字元。"
  remarks: "Read 方法會輸入; 的輸入的字元時，封鎖其傳回值當您按下它所終止<xref:System.ConsoleKey>索引鍵。</xref:System.ConsoleKey> 按下 Enter 鍵會將平台相依列終止順序附加至您的輸入 （例如，Windows 會換行字元傳回換行字元序列）。 Read 方法的後續呼叫會擷取您輸入一個字元一次。 讀取擷取最後一個字元之後，封鎖其傳回值一次和循環會重複。      > [!IMPORTANT] ><xref:System.Console.ReadLine%2A>方法，或<xref:System.Console.KeyAvailable%2A>屬性和<xref:System.Console.ReadKey%2A>方法則偏好使用讀取方法。</xref:System.Console.ReadKey%2A> </xref:System.Console.KeyAvailable%2A> </xref:System.Console.ReadLine%2A>       請注意，此方法不會傳回-1 除非您執行下列動作之一:-同時按<xref:System.ConsoleModifiers>輔助按鍵和<xref:System.ConsoleKey>主控台按鍵 (Ctrl + Z)，以指示檔案結尾條件。</xref:System.ConsoleKey> </xref:System.ConsoleModifiers>      -按對等的索引鍵表示的檔案結尾條件，例如在 Windows 中的 F6 函式金鑰。      -輸入資料流重新導向至來源，具有實際的檔案結尾字元的文字檔案，例如。"
  example:
  - "The following example demonstrates the Read method.  \n  \n [!code-cpp[console.read#1](~/add/codesnippet/cpp/m-system.console.read_1.cpp)]\n [!code-cs[console.read#1](~/add/codesnippet/csharp/m-system.console.read_1.cs)]\n [!code-vb[console.read#1](~/add/codesnippet/visualbasic/m-system.console.read_1.vb)]"
  syntax:
    content: public static int Read ();
    parameters: []
    return:
      type: System.Int32
      description: "負一 (-1)，如果目前沒有更多的字元可以讀取或字元輸入資料流，下一步。"
  overload: System.Console.Read*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.ReadKey
  id: ReadKey
  parent: System.Console
  langs:
  - csharp
  name: ReadKey()
  nameWithType: Console.ReadKey()
  fullName: System.Console.ReadKey()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得使用者按下的下一個字元或功能鍵。 按下的按鍵會顯示在主控台視窗中。"
  remarks: "ReadKey 方法等候，也就是發行 ReadKey 方法中，按下字元或功能鍵為止的執行緒上的區塊。 字元或功能鍵可以一起按下與一或多個 Alt、 Ctrl 或 shift 鍵輔助按鍵。 不過，單獨使用時按輔助按鍵時，不會導致 ReadKey 方法傳回。       根據應用程式，您可能想要搭配使用 ReadKey 方法<xref:System.Console.KeyAvailable%2A>屬性。</xref:System.Console.KeyAvailable%2A>       即使標準輸入已重新導向到的檔案從鍵盤讀取 ReadKey 方法<xref:System.Console.SetIn%2A>方法。</xref:System.Console.SetIn%2A>"
  example:
  - "One of the most common uses of the ReadKey method is to halt program execution until the user presses a key and the app either terminates or displays an additional window of information. The following example uses the  ReadKey method to wait for the user to press the Enter key before terminating the app.  \n  \n [!code-cs[System.Console.ReadKey#1](~/add/codesnippet/csharp/m-system.console.readkey_1.cs)]\n [!code-vb[System.Console.ReadKey#1](~/add/codesnippet/visualbasic/m-system.console.readkey_1.vb)]  \n  \n Note that this overload of the <xref:System.Console.ReadKey%2A> method by default echoes any displayable keys that the user presses to the console. To suppress them, call the  <xref:System.Console.ReadKey%2A> method with an `intercept` argument of `true`.  \n  \n The following example uses the ReadKey method to display information about which key the user pressed..  \n  \n [!code-cs[console.readkey1#1](~/add/codesnippet/csharp/m-system.console.readkey_2.cs)]\n [!code-cpp[console.readkey1#1](~/add/codesnippet/cpp/m-system.console.readkey_2.cpp)]\n [!code-vb[console.readkey1#1](~/add/codesnippet/visualbasic/m-system.console.readkey_2.vb)]"
  syntax:
    content: public static ConsoleKeyInfo ReadKey ();
    parameters: []
    return:
      type: System.ConsoleKeyInfo
      description: "物件，描述<xref href=&quot;System.ConsoleKey&quot;></xref>常數和 Unicode 字元，如果有的話，對應至按的主控台按鍵。 <xref href=&quot;System.ConsoleKeyInfo&quot;> </xref>物件也描述中的位元組合<xref href=&quot;System.ConsoleModifiers&quot;></xref>值、 一個或多個 Shift、 Alt 或 Ctrl 輔助按鍵與主控台按鍵的同時按下。"
  overload: System.Console.ReadKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Console.In*>屬性從主控台之外的某些資料流重新導向。</xref:System.Console.In*>"
  platform:
  - net462
- uid: System.Console.ReadKey(System.Boolean)
  id: ReadKey(System.Boolean)
  parent: System.Console
  langs:
  - csharp
  name: ReadKey(Boolean)
  nameWithType: Console.ReadKey(Boolean)
  fullName: System.Console.ReadKey(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得使用者按下的下一個字元或功能鍵。 按下的按鍵會選擇性地顯示在主控台視窗中。"
  remarks: "<xref:System.Console.ReadKey%2A>方法會等候，也就是在執行緒發出的區塊<xref:System.Console.ReadKey%2A>方法，直到按下字元或功能鍵。</xref:System.Console.ReadKey%2A> </xref:System.Console.ReadKey%2A> 字元或功能鍵可以一起按下與一或多個 Alt、 Ctrl 或 shift 鍵輔助按鍵。 不過，單獨使用按鍵修飾詞不會造成<xref:System.Console.ReadKey%2A>方法來傳回。</xref:System.Console.ReadKey%2A>       如果`intercept`參數是`true`、 攔截的按鍵和按鍵未顯示在主控台視窗中; 否則會顯示。       根據應用程式，您可能想要使用<xref:System.Console.ReadKey%2A>方法搭配<xref:System.Console.KeyAvailable%2A>屬性。</xref:System.Console.KeyAvailable%2A> </xref:System.Console.ReadKey%2A>       <xref:System.Console.ReadKey%2A>方法會讀取從鍵盤，即使標準輸入已重新導向到的檔案<xref:System.Console.SetIn%2A>方法。</xref:System.Console.SetIn%2A> </xref:System.Console.ReadKey%2A>"
  example:
  - "One of the most common uses of the <xref:System.Console.ReadKey%2A> method is to halt program execution until the user presses a key and the app either terminates or displays an additional window of information. The following example uses the  ReadKey method to wait for the user to press the Enter key before terminating the app. Note that, if the user presses any other key, it is not echoed to the console.  \n  \n [!code-vb[System.Console.ReadKey#2](~/add/codesnippet/visualbasic/m-system.console.readkey_1.vb)]\n [!code-cs[System.Console.ReadKey#2](~/add/codesnippet/csharp/m-system.console.readkey_1.cs)]  \n  \n The following example uses the ReadKey method to display information about the key pressed by a user without echoing that key to the console.  \n  \n [!code-cs[console.readkey2#1](~/add/codesnippet/csharp/m-system.console.readkey_2.cs)]\n [!code-cpp[console.readkey2#1](~/add/codesnippet/cpp/m-system.console.readkey_2.cpp)]\n [!code-vb[console.readkey2#1](~/add/codesnippet/visualbasic/m-system.console.readkey_2.vb)]"
  syntax:
    content: public static ConsoleKeyInfo ReadKey (bool intercept);
    parameters:
    - id: intercept
      type: System.Boolean
      description: "決定是否要顯示在主控台視窗中按下的按鍵。 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>表示不顯示按下的按鍵。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.ConsoleKeyInfo
      description: "物件，描述<xref href=&quot;System.ConsoleKey&quot;></xref>常數和 Unicode 字元，如果有的話，對應至按的主控台按鍵。 <xref href=&quot;System.ConsoleKeyInfo&quot;> </xref>物件也描述中的位元組合<xref href=&quot;System.ConsoleModifiers&quot;></xref>值、 一個或多個 Shift、 Alt 或 Ctrl 輔助按鍵與主控台按鍵的同時按下。"
  overload: System.Console.ReadKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Console.In*>屬性從主控台之外的某些資料流重新導向。</xref:System.Console.In*>"
  platform:
  - net462
- uid: System.Console.ReadLine
  id: ReadLine
  parent: System.Console
  langs:
  - csharp
  name: ReadLine()
  nameWithType: Console.ReadLine()
  fullName: System.Console.ReadLine()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "從標準輸入資料流讀取下的一行字元。"
  remarks: "ReadLine 方法會從標準輸入資料流讀取一行。 （如行的定義，請參閱下列清單之後的段落）。這表示:: ReadLine 方法封鎖，直到使用者按下鍵盤的標準輸入的裝置是否**Enter**索引鍵。           其中一個最常見的 ReadLine 方法是以暫停程式執行之前清除主控台，並顯示新的資訊，或提示使用者按下 Enter 鍵，然後再結束應用程式時使用。 下列範例將說明這點。           [!code-cpp[System.Console.ReadLine#6](~/add/codesnippet/cpp/m-system.console.readline_1.cpp)][!code-vb[System.Console.ReadLine#6](~/add/codesnippet/visualbasic/m-system.console.readline_1.vb)][!code-cs[System.Console.ReadLine#6](~/add/codesnippet/csharp/m-system.console.readline_1.cs) ] -ReadLine 方法如果標準輸入重新導向至檔案時，會從檔案讀取一行文字。             例如，以下是名為 ReadLine1.txt 的文字檔︰```          This is the first line.       This is the second line.       This is the third line.       This is the fourth line.          ```下列範例會使用 ReadLine 方法來讀取從檔案重新導向輸入。 方法傳回時，讀取的作業會終止`null`，這表示任何線條維持讀取。           [!code-cs[System.Console.ReadLine#3](~/add/codesnippet/csharp/m-system.console.readline_2.cs)][!code-vb[System.Console.ReadLine#3](~/add/codesnippet/visualbasic/m-system.console.readline_2.vb) ]編譯之後的可執行檔名為 ReadLine1.exe 範例，您可以執行命令列語法，從它```       ReadLine1 < ReadLine1.txt       ```可以讀取檔案的內容，並且顯示到主控台。             一條線定義為一串字元後面接著歸位字元 (十六進位 0x000d)、 換行字元 (十六進位的 0x000a) 或值<xref:System.Environment.NewLine%2A?displayProperty=fullName>屬性。</xref:System.Environment.NewLine%2A?displayProperty=fullName> 傳回的字串不包含結束的字元。 根據預設，此方法會讀取來自 256 個字元的輸入緩衝區的輸入。 因為這包括<xref:System.Environment.NewLine%2A?displayProperty=fullName>字元，此方法可以讀取包含多達 254 個字元的行。</xref:System.Environment.NewLine%2A?displayProperty=fullName> 若要閱讀更長的線條，呼叫<xref:System.Console.OpenStandardInput%28System.Int32%29>方法。</xref:System.Console.OpenStandardInput%28System.Int32%29>       ReadLine 方法以同步方式執行。 也就是說，它會封鎖直到讀取一行，或按下 Ctrl + Z 鍵盤組合。 <xref:System.Console.In%2A>屬性會傳回<xref:System.IO.TextReader>物件，代表標準輸入資料流，且具有兩個同步<xref:System.IO.TextReader.ReadLine%2A?displayProperty=fullName>方法和非同步<xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName>方法。</xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName> </xref:System.IO.TextReader.ReadLine%2A?displayProperty=fullName> </xref:System.IO.TextReader> </xref:System.Console.In%2A> 不過，當做為主控台的標準的輸入資料流<xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName>同步而不是以非同步方式執行，並傳回`Task<String>`只有讀取的作業完成後。</xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName>       如果此方法會擲回<xref:System.OutOfMemoryException>例外狀況，在基礎讀取器的位置<xref:System.IO.Stream>物件進階的方法是能夠讀取的字元數，但已經內部 ReadLine 緩衝區所讀取的字元都會被捨棄。</xref:System.IO.Stream> </xref:System.OutOfMemoryException> 因為無法變更資料流中讀取器的位置，所以已讀取的字元無法復原，以及可重新初始化<xref:System.IO.TextReader>.</xref:System.IO.TextReader>來只存取 如果是未知的資料流的初始位置，或資料流不支援搜尋，基礎<xref:System.IO.Stream>也必須重新初始化。</xref:System.IO.Stream> 若要避免這種情況，並產生穩定的程式碼，您應該使用<xref:System.Console.KeyAvailable%2A>屬性和<xref:System.Console.ReadKey%2A>讀取方法，並存放區中預先配置的緩衝區的字元。</xref:System.Console.ReadKey%2A> </xref:System.Console.KeyAvailable%2A>       如果該方法是從主控台讀取輸入時，按下 Ctrl + Z 字元，則方法會傳回`null`。 這可讓使用者在迴圈中呼叫 ReadLine 方法時，防止任何進一步的鍵盤輸入。 下列範例說明這種情況。       [!code-cpp[System.Console.ReadLine#1](~/add/codesnippet/cpp/m-system.console.readline_3.cpp)][!code-cs[System.Console.ReadLine#1](~/add/codesnippet/csharp/m-system.console.readline_3.cs)][!code-vb[System.Console.ReadLine#1    ](~/add/codesnippet/visualbasic/m-system.console.readline_3.vb)]"
  example:
  - "The following example requires two command line arguments: the name of an existing text file, and the name of a file to write the output to. It opens the existing text file and redirects the standard input from the keyboard to that file. It also redirects the standard output from the console to the output file. It then uses the ReadLine method to read each line in the file, replaces every sequence of four spaces with a tab character, and uses the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method to write the result to the output file.  \n  \n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.readline_4.cpp)]\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.readline_4.vb)]\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.readline_4.cs)]"
  syntax:
    content: public static string ReadLine ();
    parameters: []
    return:
      type: System.String
      description: "下的一行字元，輸入資料流，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果沒有其他可用字行。"
  overload: System.Console.ReadLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "沒有足夠的記憶體可為傳回的字串配置緩衝區。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "在下一行字元的字元數大於&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;。"
  platform:
  - net462
- uid: System.Console.ResetColor
  id: ResetColor
  parent: System.Console
  langs:
  - csharp
  name: ResetColor()
  nameWithType: Console.ResetColor()
  fullName: System.Console.ResetColor()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "將前景和背景的主控台色彩設定為其預設值。"
  remarks: "前景和背景色彩會還原到目前的處理程序開始時存在的色彩。 如需詳細資訊，請參閱<xref:System.Console.ForegroundColor%2A>和<xref:System.Console.BackgroundColor%2A>屬性。</xref:System.Console.BackgroundColor%2A> </xref:System.Console.ForegroundColor%2A>"
  example:
  - "The following example saves the values of the <xref:System.ConsoleColor> enumeration to an array and stores the current values of the <xref:System.Console.BackgroundColor%2A> and <xref:System.Console.ForegroundColor%2A> properties to variables. It then changes the foreground color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current background, and it changes the background color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current foreground. (If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the ResetColor method to restore the original console colors.  \n  \n [!code-vb[System.ConsoleColor#1](~/add/codesnippet/visualbasic/m-system.console.resetco_1.vb)]\n [!code-cs[System.ConsoleColor#1](~/add/codesnippet/csharp/m-system.console.resetco_1.cs)]"
  syntax:
    content: public static void ResetColor ();
    parameters: []
  overload: System.Console.ResetColor*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "使用者沒有執行此動作的權限。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.SetBufferSize(System.Int32,System.Int32)
  id: SetBufferSize(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: SetBufferSize(Int32,Int32)
  nameWithType: Console.SetBufferSize(Int32,Int32)
  fullName: System.Console.SetBufferSize(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "為指定的值設定的螢幕緩衝區的寬度與高度。"
  remarks: ''
  example:
  - "The following example demonstrates the <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, and <xref:System.Console.CursorVisible%2A> properties; and the <xref:System.Console.SetWindowPosition%2A>, SetBufferSize, and <xref:System.Console.ReadKey%2A> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.  \n  \n [!code-cpp[console.windowLT#1](~/add/codesnippet/cpp/m-system.console.setbuff_1.cpp)]\n [!code-vb[console.windowLT#1](~/add/codesnippet/visualbasic/m-system.console.setbuff_1.vb)]\n [!code-cs[console.windowLT#1](~/add/codesnippet/csharp/m-system.console.setbuff_1.cs)]"
  syntax:
    content: public static void SetBufferSize (int width, int height);
    parameters:
    - id: width
      type: System.Int32
      description: "資料行中測量的緩衝區的寬度。"
    - id: height
      type: System.Int32
      description: "以列數測量的緩衝區的高度。"
  overload: System.Console.SetBufferSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>height</code>或<code>width</code>小於或等於零。       -<code>height</code>或<code>width</code>大於或等於&lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;。       -or-       <code>width</code> is less than <xref:System.Console.WindowLeft*> + <xref:System.Console.WindowWidth*>.       -or-       <code>height</code> is less than <xref:System.Console.WindowTop*> + <xref:System.Console.WindowHeight*>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "使用者沒有執行此動作的權限。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.SetCursorPosition(System.Int32,System.Int32)
  id: SetCursorPosition(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: SetCursorPosition(Int32,Int32)
  nameWithType: Console.SetCursorPosition(Int32,Int32)
  fullName: System.Console.SetCursorPosition(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "設定游標的位置。"
  remarks: "您可以使用 SetCursorPosition 方法來指定開始下一個寫入作業主控台視窗中的位置。 如果指定的資料指標位置超出目前會顯示在主控台視窗中的區域，視窗原點將自動變更，以顯示資料指標。       資料指標會自動移每次將一個字元寫入至主控台視窗的下一個字元位置。 如果資料指標是在主控台視窗的右下方字元位置，在下一個寫入作業會讓捲動，讓資料指標仍然會顯示 [主控台] 視窗。 如果您想要將字元寫入不用捲動，請使用 [主控台] 視窗的右下方字元位置<xref:System.Console.MoveBufferArea%2A>方法，將字元移至該位置。</xref:System.Console.MoveBufferArea%2A>"
  example:
  - "This example demonstrates the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.CursorTop%2A> properties, and the SetCursorPosition and <xref:System.Console.Clear%2A> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of \"+\", \"&#124;\", and \"-\" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  \n  \n [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/m-system.console.setcurs_1.cs)]\n [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/m-system.console.setcurs_1.cpp)]\n [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/m-system.console.setcurs_1.vb)]"
  syntax:
    content: public static void SetCursorPosition (int left, int top);
    parameters:
    - id: left
      type: System.Int32
      description: "資料指標的資料行位置。 資料行是從左到右 0 開始編號。"
    - id: top
      type: System.Int32
      description: "資料指標的資料列位置。 資料列會從上到下從 0 開始編號。"
  overload: System.Console.SetCursorPosition*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>left</code>或<code>top</code>小於零。       -<code>left</code>大於或等於<xref:System.Console.BufferWidth*>。       -<code>top</code>大於或等於<xref:System.Console.BufferHeight*>。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "使用者沒有執行此動作的權限。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.SetError(System.IO.TextWriter)
  id: SetError(System.IO.TextWriter)
  parent: System.Console
  langs:
  - csharp
  name: SetError(TextWriter)
  nameWithType: Console.SetError(TextWriter)
  fullName: System.Console.SetError(TextWriter)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "設定<xref:System.Console.Error*>屬性來指定<xref:System.IO.TextWriter>物件。</xref:System.IO.TextWriter> </xref:System.Console.Error*>"
  remarks: "根據預設，<xref:System.Console.Error%2A>屬性設定為標準錯誤輸出資料流。</xref:System.Console.Error%2A>       A<xref:System.IO.StreamWriter>封裝<xref:System.IO.FileStream>可用來將錯誤訊息傳送到檔案。</xref:System.IO.FileStream> </xref:System.IO.StreamWriter>"
  example:
  - "The following example shows how to redirect the standard error stream to a file.  \n  \n [!code-vb[System.Console.SetError#1](~/add/codesnippet/visualbasic/m-system.console.seterro_1.vb)]\n [!code-cs[System.Console.SetError#1](~/add/codesnippet/csharp/m-system.console.seterro_1.cs)]\n [!code-cpp[System.Console.SetError#1](~/add/codesnippet/cpp/m-system.console.seterro_1.cpp)]"
  syntax:
    content: public static void SetError (System.IO.TextWriter newError);
    parameters:
    - id: newError
      type: System.IO.TextWriter
      description: "表示新標準錯誤輸出資料流。"
  overload: System.Console.SetError*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>newError</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.Console.SetIn(System.IO.TextReader)
  id: SetIn(System.IO.TextReader)
  parent: System.Console
  langs:
  - csharp
  name: SetIn(TextReader)
  nameWithType: Console.SetIn(TextReader)
  fullName: System.Console.SetIn(TextReader)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "設定<xref:System.Console.In*>屬性來指定<xref:System.IO.TextReader>物件。</xref:System.IO.TextReader> </xref:System.Console.In*>"
  remarks: "根據預設，<xref:System.Console.In%2A>屬性設定為標準輸入資料流。</xref:System.Console.In%2A>       A<xref:System.IO.StreamReader>封裝<xref:System.IO.FileStream>可用來接收來自檔案的輸入。</xref:System.IO.FileStream> </xref:System.IO.StreamReader>"
  example:
  - "The following example illustrates the use of the SetIn method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  \n  \n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.setin-s_1.cpp)]\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.setin-s_1.vb)]\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.setin-s_1.cs)]"
  syntax:
    content: public static void SetIn (System.IO.TextReader newIn);
    parameters:
    - id: newIn
      type: System.IO.TextReader
      description: "表示新標準輸入資料流。"
  overload: System.Console.SetIn*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>newIn</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.Console.SetOut(System.IO.TextWriter)
  id: SetOut(System.IO.TextWriter)
  parent: System.Console
  langs:
  - csharp
  name: SetOut(TextWriter)
  nameWithType: Console.SetOut(TextWriter)
  fullName: System.Console.SetOut(TextWriter)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "設定<xref:System.Console.Out*>屬性來指定<xref:System.IO.TextWriter>物件。</xref:System.IO.TextWriter> </xref:System.Console.Out*>"
  remarks: "根據預設，<xref:System.Console.Out%2A>屬性設定為標準輸出資料流。</xref:System.Console.Out%2A>       A<xref:System.IO.StreamWriter>封裝<xref:System.IO.FileStream>可用來將輸出傳送至檔案。</xref:System.IO.FileStream> </xref:System.IO.StreamWriter> 例如︰ [!code-cs [System.Console.SetOut#1](~/add/codesnippet/csharp/m-system.console.setout-_1.cs)][!code-vb[System.Console.SetOut#1](~/add/codesnippet/visualbasic/m-system.console.setout-_1.vb)][!code-cpp[System.Console.SetOut#1    ](~/add/codesnippet/cpp/m-system.console.setout-_1.cpp)]"
  example:
  - "The following example illustrates the use of the SetOut method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  \n  \n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.setout-_2.cpp)]\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.setout-_2.vb)]\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.setout-_2.cs)]"
  syntax:
    content: public static void SetOut (System.IO.TextWriter newOut);
    parameters:
    - id: newOut
      type: System.IO.TextWriter
      description: "表示新標準輸出資料流。"
  overload: System.Console.SetOut*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>newOut</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.Console.SetWindowPosition(System.Int32,System.Int32)
  id: SetWindowPosition(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: SetWindowPosition(Int32,Int32)
  nameWithType: Console.SetWindowPosition(Int32,Int32)
  fullName: System.Console.SetWindowPosition(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "設定相對於螢幕緩衝區的主控台視窗的位置。"
  remarks: "[作業系統] 視窗會顯示主控台視窗中，並在主控台視窗會顯示螢幕緩衝區的一部分。 SetWindowPosition 方法會影響相對於螢幕緩衝區的主控台視窗的位置，但不會影響相對於桌面作業系統視窗的位置。       主控台和作業系統的 windows 通常不會影響彼此。 不過，如果螢幕緩衝區無法顯示目前的主控台視窗的界限中，作業系統會自動附加捲軸作業系統視窗。 在此情況下，移動作業系統視窗的捲軸影響位置的主控台視窗中，並將主控台視窗移 SetWindowPosition 方法影響的作業系統視窗的捲軸位置。"
  example:
  - "The following example demonstrates the <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, and <xref:System.Console.CursorVisible%2A> properties; and the SetWindowPosition, <xref:System.Console.SetBufferSize%2A>, and <xref:System.Console.ReadKey%2A> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.  \n  \n [!code-cpp[console.windowLT#1](~/add/codesnippet/cpp/m-system.console.setwind_0_1.cpp)]\n [!code-vb[console.windowLT#1](~/add/codesnippet/visualbasic/m-system.console.setwind_0_1.vb)]\n [!code-cs[console.windowLT#1](~/add/codesnippet/csharp/m-system.console.setwind_0_1.cs)]"
  syntax:
    content: public static void SetWindowPosition (int left, int top);
    parameters:
    - id: left
      type: System.Int32
      description: "在主控台視窗左上角的資料行位置。"
    - id: top
      type: System.Int32
      description: "在主控台視窗左上角的資料列位置。"
  overload: System.Console.SetWindowPosition*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>left</code>或<code>top</code>小於零。       - <code>left</code>  + <xref:System.Console.WindowWidth*>大於<xref:System.Console.BufferWidth*>。       - <code>top</code>  + <xref:System.Console.WindowHeight*>大於<xref:System.Console.BufferHeight*>。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "使用者沒有執行此動作的權限。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.SetWindowSize(System.Int32,System.Int32)
  id: SetWindowSize(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: SetWindowSize(Int32,Int32)
  nameWithType: Console.SetWindowSize(Int32,Int32)
  fullName: System.Console.SetWindowSize(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "為指定的值，設定主控台視窗的寬度與高度。"
  remarks: ''
  example:
  - "This example demonstrates the SetWindowSize method, and the <xref:System.Console.WindowWidth%2A> and <xref:System.Console.WindowHeight%2A> properties. You must run the example to see the full effect of changing the console window size.  \n  \n The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key to be pressed. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed, the console window is restored to its original dimensions and the example terminates.  \n  \n [!code-cpp[console.setwindowsize#1](~/add/codesnippet/cpp/m-system.console.setwind_1_1.cpp)]\n [!code-vb[console.setwindowsize#1](~/add/codesnippet/visualbasic/m-system.console.setwind_1_1.vb)]\n [!code-cs[console.setwindowsize#1](~/add/codesnippet/csharp/m-system.console.setwind_1_1.cs)]"
  syntax:
    content: public static void SetWindowSize (int width, int height);
    parameters:
    - id: width
      type: System.Int32
      description: "資料行中測量的主控台視窗的寬度。"
    - id: height
      type: System.Int32
      description: "以列數測量的主控台視窗的高度。"
  overload: System.Console.SetWindowSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>width</code>或<code>height</code>小於或等於零。       -<code>width</code>加上<xref:System.Console.WindowLeft*>或<code>height</code>加上<xref:System.Console.WindowTop*>大於或等於&lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;。       -<code>width</code>或<code>height</code>大於最大視窗寬度或高度對於目前螢幕解析度和主控台字型。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "使用者沒有執行此動作的權限。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.Title
  id: Title
  parent: System.Console
  langs:
  - csharp
  name: Title
  nameWithType: Console.Title
  fullName: System.Console.Title
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得或設定要顯示在主控台標題列中的標題。"
  remarks: ''
  example:
  - "This example demonstrates the Title property. The example displays the current title of the operating system window, waits for a key press, then displays a new title.  \n  \n [!code-cs[console.title#1](~/add/codesnippet/csharp/p-system.console.title_1.cs)]\n [!code-cpp[console.title#1](~/add/codesnippet/cpp/p-system.console.title_1.cpp)]\n [!code-vb[console.title#1](~/add/codesnippet/visualbasic/p-system.console.title_1.vb)]"
  syntax:
    content: public static string Title { get; set; }
    return:
      type: System.String
      description: "要顯示在主控台標題列中的字串。 此標題字串的最大長度是 24500 個字元。"
  overload: System.Console.Title*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在 get 作業中，擷取的標題長度超過 24500 個字元。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "設定作業中，在指定的標題長度超過 24500 個字元。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "設定作業中，在指定的標題是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.TreatControlCAsInput
  id: TreatControlCAsInput
  parent: System.Console
  langs:
  - csharp
  name: TreatControlCAsInput
  nameWithType: Console.TreatControlCAsInput
  fullName: System.Console.TreatControlCAsInput
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得或設定值，指出是否的組合<xref href=&quot;System.ConsoleModifiers&quot;></xref>輔助按鍵和<xref href=&quot;System.ConsoleKey&quot;></xref>主控台按鍵 (Ctrl + C) 視為一般輸入，還是視為由作業系統處理的中斷。"
  remarks: "如果 TreatControlCAsInput 屬性的值是`false`並按下 Ctrl + C、 按下的按鍵不會儲存在輸入緩衝區中，作業系統會終止目前正在執行的處理序。 這是預設值。      > [!CAUTION] > 審慎地使用這個屬性，因為將它設定為`true`有明顯的影響。 大部分使用者應該 Ctrl + C 結束主控台應用程式。 如果您停用 Ctrl + C 的效果，使用者必須請記得使用終止該應用程式是較不熟悉的按鍵組合 Ctrl + Break。"
  example:
  - "The following example demonstrates the TreatControlCAsInput property.  \n  \n [!code-cs[console.readkey1#1](~/add/codesnippet/csharp/p-system.console.treatco_1.cs)]\n [!code-cpp[console.readkey1#1](~/add/codesnippet/cpp/p-system.console.treatco_1.cpp)]\n [!code-vb[console.readkey1#1](~/add/codesnippet/visualbasic/p-system.console.treatco_1.vb)]"
  syntax:
    content: public static bool TreatControlCAsInput { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果 Ctrl + C 會被視為一般輸入;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Console.TreatControlCAsInput*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "無法取得或設定主控台輸入緩衝區的輸入的模式。"
  platform:
  - net462
- uid: System.Console.WindowHeight
  id: WindowHeight
  parent: System.Console
  langs:
  - csharp
  name: WindowHeight
  nameWithType: Console.WindowHeight
  fullName: System.Console.WindowHeight
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得或設定主控台視窗區域的高度。"
  remarks: "嘗試設定 WindowHeight 屬性的值，輸出重新導向時擲回其中<xref:System.ArgumentOutOfRangeException>或<xref:System.IO.IOException>例外狀況。</xref:System.IO.IOException> </xref:System.ArgumentOutOfRangeException> 若要避免例外狀況，您可以設定值的這個屬性只有當<xref:System.Console.IsOutputRedirected%2A>屬性會傳回`false`。</xref:System.Console.IsOutputRedirected%2A>"
  example:
  - "This example demonstrates the <xref:System.Console.SetWindowSize%2A> method, and the <xref:System.Console.WindowWidth%2A> and WindowHeight properties. You must run the example to see the full effect of changing the console window size.  \n  \n The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key press. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed the console window is restored to its original dimensions and the example terminates.  \n  \n [!code-cpp[console.setwindowsize#1](~/add/codesnippet/cpp/p-system.console.windowh_1.cpp)]\n [!code-vb[console.setwindowsize#1](~/add/codesnippet/visualbasic/p-system.console.windowh_1.vb)]\n [!code-cs[console.setwindowsize#1](~/add/codesnippet/csharp/p-system.console.windowh_1.cs)]"
  syntax:
    content: public static int WindowHeight { get; set; }
    return:
      type: System.Int32
      description: "以列數測量的主控台視窗的高度。"
  overload: System.Console.WindowHeight*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "值<> *> 屬性或 WindowHeight 屬性的值是小於或等於 0。      -WindowHeight 屬性的值加上值<> *> 屬性是大於或等於&lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;。       -的值<xref:System.Console.WindowWidth*>屬性或 WindowHeight 屬性的值大於最大視窗寬度或高度對於目前螢幕解析度和主控台字型。</xref:System.Console.WindowWidth*>"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "讀取或寫入資訊。"
  platform:
  - net462
- uid: System.Console.WindowLeft
  id: WindowLeft
  parent: System.Console
  langs:
  - csharp
  name: WindowLeft
  nameWithType: Console.WindowLeft
  fullName: System.Console.WindowLeft
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得或設定相對於螢幕緩衝區的主控台視窗區域最左邊的位置。"
  remarks: "主控台表示成較大的緩衝區矩形區域的矩形視窗。 在視窗和緩衝區會測量以垂直方式透過他們的資料列的數目及水平他們的資料行的數目。 緩衝區的維度由定義<xref:System.Console.BufferHeight%2A>和<xref:System.Console.BufferWidth%2A>屬性。</xref:System.Console.BufferWidth%2A> </xref:System.Console.BufferHeight%2A> 主控台區域的維度由定義<xref:System.Console.WindowHeight%2A>和<xref:System.Console.WindowWidth%2A>屬性。</xref:System.Console.WindowWidth%2A> </xref:System.Console.WindowHeight%2A> WindowLeft 屬性決定主控台視窗的第一個資料行中顯示的緩衝區的資料行。 WindowLeft 屬性的值可以介於 0 到<xref:System.Console.BufferWidth%2A>- <xref:System.Console.WindowWidth%2A>.</xref:System.Console.WindowWidth%2A> </xref:System.Console.BufferWidth%2A> 嘗試將它設為超出該範圍的值會擲回<xref:System.ArgumentOutOfRangeException>.</xref:System.ArgumentOutOfRangeException>       當第一次開啟的主控台視窗時，WindowLeft 屬性的預設值是零，表示顯示在主控台的第一個資料行對應至緩衝區中的第一個資料行 （在位置零的資料行）。 [主控台] 視窗和緩衝區的預設寬度是 80 的資料行。 這表示 WindowLeft 屬性可以在主控台視窗變窄或緩衝區進行更多時，才可以修改。       請注意，是否緩衝區的寬度超過主控台視窗的寬度，WindowLeft 屬性的值會自動調整當使用者使用水平捲軸來緩衝區定義視窗的關聯性。       嘗試設定 WindowLeft 屬性的值時輸出重新導向會擲回<xref:System.IO.IOException>例外狀況。</xref:System.IO.IOException> 若要避免這個例外狀況，您可以設定值的這個屬性只有當<xref:System.Console.IsOutputRedirected%2A>屬性會傳回`false`。</xref:System.Console.IsOutputRedirected%2A>"
  example:
  - "The following example opens an 80-column console window and defines a buffer area that is 120 columns wide. It displays information on window and buffer size, and then waits for the user to press either the LEFT ARROW key or the RIGHT ARROW key. In the former case, it decrements the value of the WindowLeft property by one if the result is a legal value. In the latter case, it increases the value of the WindowLeft property by one if the result would be legal. Note that the example does not have to handle an <xref:System.ArgumentOutOfRangeException>, because it checks that the value to be assigned to the WindowLeft property is not negative and does not cause the sum of the WindowLeft and <xref:System.Console.WindowWidth%2A> properties to exceed the <xref:System.Console.BufferWidth%2A> property value.  \n  \n [!code-vb[System.Console.WindowLeft#1](~/add/codesnippet/visualbasic/p-system.console.windowl_1.vb)]\n [!code-cs[System.Console.WindowLeft#1](~/add/codesnippet/csharp/p-system.console.windowl_1.cs)]\n [!code-cpp[System.Console.WindowLeft#1](~/add/codesnippet/cpp/p-system.console.windowl_1.cpp)]"
  syntax:
    content: public static int WindowLeft { get; set; }
    return:
      type: System.Int32
      description: "資料行中，測量最左邊的主控台視窗的位置。"
  overload: System.Console.WindowLeft*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "在設定作業中，要指派的值小於零。       -或-執行指派、 WindowLeft 加上後<> *> 會超過<> *>。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "讀取或寫入資訊。"
  platform:
  - net462
- uid: System.Console.WindowTop
  id: WindowTop
  parent: System.Console
  langs:
  - csharp
  name: WindowTop
  nameWithType: Console.WindowTop
  fullName: System.Console.WindowTop
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得或設定相對於螢幕緩衝區的主控台視窗區域上方的位置。"
  remarks: "主控台表示成較大的緩衝區矩形區域的矩形視窗。 在視窗和緩衝區會測量以垂直方式透過他們的資料列的數目及水平他們的資料行的數目。 緩衝區的維度由定義<xref:System.Console.BufferHeight%2A>和<xref:System.Console.BufferWidth%2A>屬性。</xref:System.Console.BufferWidth%2A> </xref:System.Console.BufferHeight%2A> 主控台區域的維度由定義<xref:System.Console.WindowHeight%2A>和<xref:System.Console.WindowWidth%2A>屬性。</xref:System.Console.WindowWidth%2A> </xref:System.Console.WindowHeight%2A> WindowTop 屬性會決定哪一個資料列的緩衝區會顯示在主控台視窗的第一個資料行。 WindowTop 屬性的值可以介於 0 到<xref:System.Console.BufferHeight%2A>- <xref:System.Console.WindowHeight%2A>.</xref:System.Console.WindowHeight%2A> </xref:System.Console.BufferHeight%2A> 嘗試將它設為超出該範圍的值會擲回<xref:System.ArgumentOutOfRangeException>.</xref:System.ArgumentOutOfRangeException>       嘗試設定 WindowTop 屬性的值時輸出重新導向會擲回<xref:System.IO.IOException>例外狀況。</xref:System.IO.IOException> 若要避免這個例外狀況，您可以設定值的這個屬性只有當<xref:System.Console.IsOutputRedirected%2A>屬性會傳回`false`。</xref:System.Console.IsOutputRedirected%2A>"
  example:
  - "The following example demonstrates the <xref:System.Console.WindowLeft%2A>, WindowTop, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, and <xref:System.Console.CursorVisible%2A> properties; and the <xref:System.Console.SetWindowPosition%2A>, <xref:System.Console.SetBufferSize%2A>, and <xref:System.Console.ReadKey%2A> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.  \n  \n [!code-cpp[console.windowLT#1](~/add/codesnippet/cpp/p-system.console.windowtop_1.cpp)]\n [!code-vb[console.windowLT#1](~/add/codesnippet/visualbasic/p-system.console.windowtop_1.vb)]\n [!code-cs[console.windowLT#1](~/add/codesnippet/csharp/p-system.console.windowtop_1.cs)]"
  syntax:
    content: public static int WindowTop { get; set; }
    return:
      type: System.Int32
      description: "以列數測量的最上方的主控台視窗的位置。"
  overload: System.Console.WindowTop*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "在設定作業中，要指派的值小於零。       -或-執行指派、 WindowTop 加上後<> *> 會超過<> *>。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "讀取或寫入資訊。"
  platform:
  - net462
- uid: System.Console.WindowWidth
  id: WindowWidth
  parent: System.Console
  langs:
  - csharp
  name: WindowWidth
  nameWithType: Console.WindowWidth
  fullName: System.Console.WindowWidth
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得或設定主控台視窗的寬度。"
  remarks: "嘗試設定 WindowWidth 屬性的值，輸出重新導向時擲回其中<xref:System.ArgumentOutOfRangeException>或<xref:System.IO.IOException>例外狀況。</xref:System.IO.IOException> </xref:System.ArgumentOutOfRangeException> 若要避免例外狀況，您可以設定值的這個屬性只有當<xref:System.Console.IsOutputRedirected%2A>屬性會傳回`false`。</xref:System.Console.IsOutputRedirected%2A>"
  example:
  - "This example demonstrates the <xref:System.Console.SetWindowSize%2A> method, and the WindowWidth and <xref:System.Console.WindowHeight%2A> properties. You must run the example to see the full effect of changing the console window size.  \n  \n The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key press. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed the console window is restored to its original dimensions and the example terminates.  \n  \n [!code-cpp[console.setwindowsize#1](~/add/codesnippet/cpp/p-system.console.windoww_1.cpp)]\n [!code-vb[console.setwindowsize#1](~/add/codesnippet/visualbasic/p-system.console.windoww_1.vb)]\n [!code-cs[console.setwindowsize#1](~/add/codesnippet/csharp/p-system.console.windoww_1.cs)]"
  syntax:
    content: public static int WindowWidth { get; set; }
    return:
      type: System.Int32
      description: "資料行中測量的主控台視窗的寬度。"
  overload: System.Console.WindowWidth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "WindowWidth 屬性或值的值<> *> 屬性小於或等於 0。      -的值<> *> 屬性加上值<> *> 屬性是大於或等於&lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;。      -WindowWidth 屬性的值或值<> *> 屬性大於最大視窗寬度或高度對於目前螢幕解析度和主控台字型。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "讀取或寫入資訊。"
  platform:
  - net462
- uid: System.Console.Write(System.Boolean)
  id: Write(System.Boolean)
  parent: System.Console
  langs:
  - csharp
  name: Write(Boolean)
  nameWithType: Console.Write(Boolean)
  fullName: System.Console.Write(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定的布林值的文字表示寫入標準輸出資料流。"
  remarks: "文字表示`value`產生藉由呼叫<xref:System.Boolean.ToString%2A?displayProperty=fullName>、 輸出<xref:System.Boolean.TrueString?displayProperty=fullName>或<xref:System.Boolean.FalseString?displayProperty=fullName>.</xref:System.Boolean.FalseString?displayProperty=fullName> </xref:System.Boolean.TrueString?displayProperty=fullName> </xref:System.Boolean.ToString%2A?displayProperty=fullName>"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_8_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_8_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_8_1.cpp)]"
  syntax:
    content: public static void Write (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: "要寫入的值。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.Write(System.Char)
  id: Write(System.Char)
  parent: System.Console
  langs:
  - csharp
  name: Write(Char)
  nameWithType: Console.Write(Char)
  fullName: System.Console.Write(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定的 Unicode 字元值寫入標準輸出資料流。"
  remarks: ''
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_9_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_9_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_9_1.cpp)]"
  syntax:
    content: public static void Write (char value);
    parameters:
    - id: value
      type: System.Char
      description: "要寫入的值。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.Write(System.Char[])
  id: Write(System.Char[])
  parent: System.Console
  langs:
  - csharp
  name: Write(Char[])
  nameWithType: Console.Write(Char[])
  fullName: System.Console.Write(Char[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定的 Unicode 字元陣列寫入標準輸出資料流。"
  syntax:
    content: public static void Write (char[] buffer);
    parameters:
    - id: buffer
      type: System.Char[]
      description: "Unicode 字元陣列。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.Write(System.Decimal)
  id: Write(System.Decimal)
  parent: System.Console
  langs:
  - csharp
  name: Write(Decimal)
  nameWithType: Console.Write(Decimal)
  fullName: System.Console.Write(Decimal)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "將指定的文字表示寫入<xref:System.Decimal>值寫入標準輸出資料流。</xref:System.Decimal>"
  remarks: "文字表示`value`產生藉由呼叫<xref:System.Decimal.ToString%2A?displayProperty=fullName>.</xref:System.Decimal.ToString%2A?displayProperty=fullName>"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_12_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_12_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_12_1.cpp)]"
  syntax:
    content: public static void Write (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: "要寫入的值。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.Write(System.Double)
  id: Write(System.Double)
  parent: System.Console
  langs:
  - csharp
  name: Write(Double)
  nameWithType: Console.Write(Double)
  fullName: System.Console.Write(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定的雙精確度浮點值的文字表示寫入標準輸出資料流。"
  remarks: "文字表示`value`產生藉由呼叫<xref:System.Double.ToString%2A?displayProperty=fullName>方法。</xref:System.Double.ToString%2A?displayProperty=fullName>"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_6_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_6_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_6_1.cpp)]"
  syntax:
    content: public static void Write (double value);
    parameters:
    - id: value
      type: System.Double
      description: "要寫入的值。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.Write(System.Int32)
  id: Write(System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: Write(Int32)
  nameWithType: Console.Write(Int32)
  fullName: System.Console.Write(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定的 32 位元帶正負號的整數值的文字表示寫入標準輸出資料流。"
  remarks: "文字表示`value`產生藉由呼叫<xref:System.Int32.ToString%2A?displayProperty=fullName>方法。</xref:System.Int32.ToString%2A?displayProperty=fullName>"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_10_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_10_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_10_1.cpp)]"
  syntax:
    content: public static void Write (int value);
    parameters:
    - id: value
      type: System.Int32
      description: "要寫入的值。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.Write(System.Int64)
  id: Write(System.Int64)
  parent: System.Console
  langs:
  - csharp
  name: Write(Int64)
  nameWithType: Console.Write(Int64)
  fullName: System.Console.Write(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定的 64 位元帶正負號的整數值的文字表示寫入標準輸出資料流。"
  remarks: "文字表示`value`產生藉由呼叫<xref:System.Int64.ToString%2A?displayProperty=fullName>方法。</xref:System.Int64.ToString%2A?displayProperty=fullName>"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_0_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_0_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_0_1.cpp)]"
  syntax:
    content: public static void Write (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "要寫入的值。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.Write(System.Object)
  id: Write(System.Object)
  parent: System.Console
  langs:
  - csharp
  name: Write(Object)
  nameWithType: Console.Write(Object)
  fullName: System.Console.Write(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定之物件的文字表示寫入標準輸出資料流。"
  remarks: "如果`value`是`null`不寫入任何資料，會擲回任何例外狀況。 否則，`ToString`方法`value`呼叫以產生它的字串表示，並將產生的字串寫入標準輸出資料流。"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_3_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_3_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_3_1.cpp)]"
  syntax:
    content: public static void Write (object value);
    parameters:
    - id: value
      type: System.Object
      description: "要寫入值，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.Write(System.Single)
  id: Write(System.Single)
  parent: System.Console
  langs:
  - csharp
  name: Write(Single)
  nameWithType: Console.Write(Single)
  fullName: System.Console.Write(Single)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定的單精確度浮點數值的文字表示寫入標準輸出資料流。"
  remarks: "文字表示`value`產生藉由呼叫<xref:System.Single.ToString%2A?displayProperty=fullName>方法。</xref:System.Single.ToString%2A?displayProperty=fullName>"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_1_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_1_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_1_1.cpp)]"
  syntax:
    content: public static void Write (float value);
    parameters:
    - id: value
      type: System.Single
      description: "要寫入的值。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.Write(System.String)
  id: Write(System.String)
  parent: System.Console
  langs:
  - csharp
  name: Write(String)
  nameWithType: Console.Write(String)
  fullName: System.Console.Write(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定的字串值寫入標準輸出資料流。"
  remarks: "如果值為`null`，不會寫入標準輸出資料流。"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_5_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_5_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_5_1.cpp)]"
  syntax:
    content: public static void Write (string value);
    parameters:
    - id: value
      type: System.String
      description: "要寫入的值。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.Write(System.UInt32)
  id: Write(System.UInt32)
  parent: System.Console
  langs:
  - csharp
  name: Write(UInt32)
  nameWithType: Console.Write(UInt32)
  fullName: System.Console.Write(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定的 32 位元不帶正負號的整數值的文字表示寫入標準輸出資料流。"
  remarks: "文字表示`value`產生藉由呼叫<xref:System.UInt32.ToString%2A?displayProperty=fullName>方法。</xref:System.UInt32.ToString%2A?displayProperty=fullName>"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_7_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_7_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_7_1.cpp)]"
  syntax:
    content: public static void Write (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: "要寫入的值。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.Write(System.UInt64)
  id: Write(System.UInt64)
  parent: System.Console
  langs:
  - csharp
  name: Write(UInt64)
  nameWithType: Console.Write(UInt64)
  fullName: System.Console.Write(UInt64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定的 64 位元不帶正負號的整數值的文字表示寫入標準輸出資料流。"
  remarks: "文字表示`value`產生藉由呼叫<xref:System.UInt64.ToString%2A?displayProperty=fullName>方法。</xref:System.UInt64.ToString%2A?displayProperty=fullName>"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_4_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_4_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_4_1.cpp)]"
  syntax:
    content: public static void Write (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: "要寫入的值。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.Write(System.String,System.Object)
  id: Write(System.String,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: Write(String,Object)
  nameWithType: Console.Write(String,Object)
  fullName: System.Console.Write(String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定之物件的文字表示寫入標準輸出資料流使用指定的格式資訊。"
  remarks: "這個方法會使用[複合格式功能](~/add/includes/ajax-current-ext-md.md)物件的值轉換成它的文字表示，並將該表示內嵌在字串中的.NET framework。 產生的字串寫入至輸出資料流。       `format`參數是由零個或多個文字執行混合零或多個索引的預留位置，稱為對應格式項目，這個方法的參數清單中的物件。 格式化的程序會將每個格式項目取代值的對應物件的文字表示。       格式項目的語法`{`*索引*[`,`*對齊*] [`:`*formatString*]`}`指定必要的索引、 選用的長度和格式化的文字對齊方式，格式化控管的對應值的物件的格式規範字元的選擇性字串。       .NET Framework 提供廣泛的格式化支援，下列格式的主題中的更詳細地說明。      -如需這類方法支援複合格式功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，以及一些多載<xref:System.Console.WriteLine%2A>，請參閱[複合格式化](../Topic/Composite%20Formatting.md)。</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -如需有關數值格式規範的詳細資訊，請參閱[標準數值格式字串](~/add/includes/ajax-current-ext-md.md)和[自訂數值格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需有關日期和時間格式規範的詳細資訊，請參閱[標準日期和時間格式字串](~/add/includes/ajax-current-ext-md.md)和[自訂日期和時間格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需列舉格式規範的詳細資訊，請參閱[列舉格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需有關格式的詳細資訊，請參閱[格式化型別](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example uses the `WriteLine` method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.write-s_2_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.write-s_2_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.write-s_2_1.vb)]  \n  \n The following example illustrates the use of the Write method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_2_2.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_2_2.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_2_2.cpp)]"
  syntax:
    content: public static void Write (string format, object arg0);
    parameters:
    - id: format
      type: System.String
      description: "複合格式字串 （請參閱 < 備註 >）。"
    - id: arg0
      type: System.Object
      description: "要寫入使用物件`format`。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "中的格式規格<code> format </code>無效。"
  platform:
  - net462
- uid: System.Console.Write(System.String,System.Object[])
  id: Write(System.String,System.Object[])
  parent: System.Console
  langs:
  - csharp
  name: Write(String,Object[])
  nameWithType: Console.Write(String,Object[])
  fullName: System.Console.Write(String,Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "將指定的物件陣列的文字表示寫入標準輸出資料流使用指定的格式資訊。"
  remarks: "這個方法會使用[複合格式功能](~/add/includes/ajax-current-ext-md.md)物件的值轉換成它的文字表示，並將該表示內嵌在字串中的.NET framework。 產生的字串寫入至輸出資料流。       `format`參數是由零個或多個文字執行混合零或多個索引的預留位置，稱為對應格式項目，這個方法的參數清單中的物件。 格式化的程序會將每個格式項目取代值的對應物件的文字表示。       格式項目的語法`{`*索引*[`,`*對齊*] [`:`*formatString*]`}`指定必要的索引、 選用的長度和格式化的文字對齊方式，格式化控管的對應值的物件的格式規範字元的選擇性字串。       .NET Framework 提供廣泛的格式化支援，下列格式的主題中的更詳細地說明。      -如需這類方法支援複合格式功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，以及一些多載<xref:System.Console.WriteLine%2A>，請參閱[複合格式化](../Topic/Composite%20Formatting.md)。</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -如需有關數值格式規範的詳細資訊，請參閱[標準數值格式字串](~/add/includes/ajax-current-ext-md.md)和[自訂數值格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需有關日期和時間格式規範的詳細資訊，請參閱[標準日期和時間格式字串](~/add/includes/ajax-current-ext-md.md)和[自訂日期和時間格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需列舉格式規範的詳細資訊，請參閱[列舉格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需有關格式的詳細資訊，請參閱[格式化型別](~/add/includes/ajax-current-ext-md.md)。       `arg`參數為參數陣列。 引數可以傳遞至方法，是陣列或五個或多個項目清單。 這些範例說明兩種形式的方法呼叫。"
  example:
  - "The following example defines a `Person` class with a number of properties that provide information about a person. Its `GetDescription` method returns an array that contains all of the property values except one. The example then uses the array returned by the  `GetDescription` method  to display the values of the Person object.  \n  \n [!code-cs[System.Console.Write#1](~/add/codesnippet/csharp/m-system.console.write-s_13_1.cs)]\n [!code-vb[System.Console.Write#1](~/add/codesnippet/visualbasic/m-system.console.write-s_13_1.vb)]  \n  \n Note that the example calls the Write method rather than the [WriteLine(String, Object\\[\\])](assetId:///M:System.Console.WriteLine(System.String,System.Object[])?qualifyHint=False&autoUpgrade=False) method because it attempts to display the value of the `Person.Remarks` property on the same line. To do this, it examines the value of the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.WindowWidth%2A> properties to determine whether there is enough space for the remark to fit.  If there is, it displays the line. If not, it writes a line, indents three spaces, and displays the remark.  \n  \n The following example is identical to the first, except that it supplies a five-item list as the `arg` argument instead of a parameter array.  \n  \n [!code-vb[System.Console.Write#2](~/add/codesnippet/visualbasic/m-system.console.write-s_13_2.vb)]\n [!code-cs[System.Console.Write#2](~/add/codesnippet/csharp/m-system.console.write-s_13_2.cs)]"
  syntax:
    content: public static void Write (string format, object[] arg);
    parameters:
    - id: format
      type: System.String
      description: "複合格式字串 （請參閱 < 備註 >）。"
    - id: arg
      type: System.Object[]
      description: "寫入使用的物件陣列`format`。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>or <code>arg</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "中的格式規格<code> format </code>無效。"
  platform:
  - net462
- uid: System.Console.Write(System.Char[],System.Int32,System.Int32)
  id: Write(System.Char[],System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: Write(Char[],Int32,Int32)
  nameWithType: Console.Write(Char[],Int32,Int32)
  fullName: System.Console.Write(Char[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定的 Unicode 字元子陣列寫入標準輸出資料流。"
  remarks: "這個方法會寫入`count`字元位置開始`index`的`buffer`標準輸出資料流。"
  syntax:
    content: public static void Write (char[] buffer, int index, int count);
    parameters:
    - id: buffer
      type: System.Char[]
      description: "Unicode 字元陣列。"
    - id: index
      type: System.Int32
      description: "中的開始位置`buffer`。"
    - id: count
      type: System.Int32
      description: "要寫入的字元數目。"
  overload: System.Console.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>或<code>count</code>小於零。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>加上<code>count</code>指定的位置時，不在<code>buffer</code>。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.Write(System.String,System.Object,System.Object)
  id: Write(System.String,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: Write(String,Object,Object)
  nameWithType: Console.Write(String,Object,Object)
  fullName: System.Console.Write(String,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定之物件的文字表示寫入標準輸出資料流使用指定的格式資訊。"
  remarks: "這個方法會使用[複合格式功能](~/add/includes/ajax-current-ext-md.md)物件的值轉換成它的文字表示，並將該表示內嵌在字串中的.NET framework。 產生的字串寫入至輸出資料流。       `format`參數是由零個或多個文字執行混合零或多個索引的預留位置，稱為對應格式項目，這個方法的參數清單中的物件。 格式化的程序會將每個格式項目取代值的對應物件的文字表示。       格式項目的語法`{`*索引*[`,`*對齊*] [`:`*formatString*]`}`指定必要的索引、 選用的長度和格式化的文字對齊方式，格式化控管的對應值的物件的格式規範字元的選擇性字串。       .NET Framework 提供廣泛的格式化支援，下列格式的主題中的更詳細地說明。      -如需這類方法支援複合格式功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，以及一些多載<xref:System.Console.WriteLine%2A>，請參閱[複合格式化](../Topic/Composite%20Formatting.md)。</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -如需有關數值格式規範的詳細資訊，請參閱[標準數值格式字串](~/add/includes/ajax-current-ext-md.md)和[自訂數值格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需有關日期和時間格式規範的詳細資訊，請參閱[標準日期和時間格式字串](~/add/includes/ajax-current-ext-md.md)和[自訂日期和時間格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需列舉格式規範的詳細資訊，請參閱[列舉格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需有關格式的詳細資訊，請參閱[格式化型別](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example uses the `WriteLine` method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.write-s_14_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.write-s_14_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.write-s_14_1.vb)]  \n  \n The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_14_2.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_14_2.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_14_2.cpp)]"
  syntax:
    content: public static void Write (string format, object arg0, object arg1);
    parameters:
    - id: format
      type: System.String
      description: "複合格式字串 （請參閱 < 備註 >）。"
    - id: arg0
      type: System.Object
      description: "使用寫入第一個物件`format`。"
    - id: arg1
      type: System.Object
      description: "要寫入使用的第二個物件`format`。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "中的格式規格<code> format </code>無效。"
  platform:
  - net462
- uid: System.Console.Write(System.String,System.Object,System.Object,System.Object)
  id: Write(System.String,System.Object,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: Write(String,Object,Object,Object)
  nameWithType: Console.Write(String,Object,Object,Object)
  fullName: System.Console.Write(String,Object,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定之物件的文字表示寫入標準輸出資料流使用指定的格式資訊。"
  remarks: "這個方法會使用[複合格式功能](~/add/includes/ajax-current-ext-md.md)物件的值轉換成它的文字表示，並將該表示內嵌在字串中的.NET framework。 產生的字串寫入至輸出資料流。       `format`參數是由零個或多個文字執行混合零或多個索引的預留位置，稱為對應格式項目，這個方法的參數清單中的物件。 格式化的程序會將每個格式項目取代值的對應物件的文字表示。       格式項目的語法`{`*索引*[`,`*對齊*] [`:`*formatString*]`}`指定必要的索引、 選用的長度和格式化的文字對齊方式，格式化控管的對應值的物件的格式規範字元的選擇性字串。       .NET Framework 提供廣泛的格式化支援，下列格式的主題中的更詳細地說明。      -如需這類方法支援複合格式功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，以及一些多載<xref:System.Console.WriteLine%2A>，請參閱[複合格式化](../Topic/Composite%20Formatting.md)。</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -如需有關數值格式規範的詳細資訊，請參閱[標準數值格式字串](~/add/includes/ajax-current-ext-md.md)和[自訂數值格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需有關日期和時間格式規範的詳細資訊，請參閱[標準日期和時間格式字串](~/add/includes/ajax-current-ext-md.md)和[自訂日期和時間格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需列舉格式規範的詳細資訊，請參閱[列舉格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需有關格式的詳細資訊，請參閱[格式化型別](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example uses the `WriteLine` method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.write-s_11_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.write-s_11_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.write-s_11_1.vb)]  \n  \n The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_11_2.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_11_2.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_11_2.cpp)]"
  syntax:
    content: public static void Write (string format, object arg0, object arg1, object arg2);
    parameters:
    - id: format
      type: System.String
      description: "複合格式字串 （請參閱 < 備註 >）。"
    - id: arg0
      type: System.Object
      description: "使用寫入第一個物件`format`。"
    - id: arg1
      type: System.Object
      description: "要寫入使用的第二個物件`format`。"
    - id: arg2
      type: System.Object
      description: "使用寫入第三個物件`format`。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "中的格式規格<code> format </code>無效。"
  platform:
  - net462
- uid: System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)
  id: Write(System.String,System.Object,System.Object,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: Write(String,Object,Object,Object,Object)
  nameWithType: Console.Write(String,Object,Object,Object,Object)
  fullName: System.Console.Write(String,Object,Object,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "將指定之物件和可變長度參數清單的文字表示寫入標準輸出資料流使用指定的格式資訊。"
  remarks: "> [!NOTE]\n>  This API is not CLS-compliant. The CLS-compliant alternative is [Console.Write(String, Object\\[\\])](assetId:///M:System.Console.Write(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False). The C# and Visual Basic compilers automatically resolve a call to this method as a call to [Console.Write(String, Object\\[\\])](assetId:///M:System.Console.Write(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False).  \n  \n This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  \n  \n The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  \n  \n-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example illustrates the use of variable parameters with the Write method. The method is called with a composite format string and five format items.  \n  \n [!code-cpp[System.Console.Write#3](~/add/codesnippet/cpp/04cf3884-a7cc-4915-bdb2-_1.cpp)]"
  syntax:
    content: public static void Write (string format, object arg0, object arg1, object arg2, object arg3);
    parameters:
    - id: format
      type: System.String
      description: "複合格式字串 （請參閱 < 備註 >）。"
    - id: arg0
      type: System.Object
      description: "使用寫入第一個物件`format`。"
    - id: arg1
      type: System.Object
      description: "要寫入使用的第二個物件`format`。"
    - id: arg2
      type: System.Object
      description: "使用寫入第三個物件`format`。"
    - id: arg3
      type: System.Object
      description: "要寫入使用的第四個物件`format`。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "中的格式規格<code> format </code>無效。"
  platform:
  - net462
- uid: System.Console.WriteLine
  id: WriteLine
  parent: System.Console
  langs:
  - csharp
  name: WriteLine()
  nameWithType: Console.WriteLine()
  fullName: System.Console.WriteLine()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "目前的行結束字元寫入標準輸出資料流。"
  remarks: "預設行結束字元是的字串，其值是歸位字元後面接著換行字元 (C# 中的&quot;\\r&quot;或`vbCrLf`在 Visual Basic 中)。 您可以藉由設定變更的行結束字元<xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>屬性<xref:System.Console.Out%2A>屬性與另一個字串。</xref:System.Console.Out%2A> </xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> 此範例提供一個實例。"
  example:
  - "The example changes the line terminator from its default value of \"\\r\\n\" or `vbCrLf` to \"\\r\\n\\r\\n\" or `vbCrLf` + `vbCrLf`. It then calls the WriteLine and <xref:System.Console.WriteLine%28System.String%29> methods to display output to the console.  \n  \n [!code-cpp[System.Console.WriteLine#2](~/add/codesnippet/cpp/m-system.console.writeline_1.cpp)]\n [!code-cs[System.Console.WriteLine#2](~/add/codesnippet/csharp/m-system.console.writeline_1.cs)]\n [!code-vb[System.Console.WriteLine#2](~/add/codesnippet/visualbasic/m-system.console.writeline_1.vb)]"
  syntax:
    content: public static void WriteLine ();
    parameters: []
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Boolean)
  id: WriteLine(System.Boolean)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Boolean)
  nameWithType: Console.WriteLine(Boolean)
  fullName: System.Console.WriteLine(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "將文字表示寫入指定的布林值，後面接著目前的行結束字元，寫入標準輸出資料流。"
  remarks: "文字表示`value`產生藉由呼叫<xref:System.Boolean.ToString%2A?displayProperty=fullName>方法。</xref:System.Boolean.ToString%2A?displayProperty=fullName>       如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不採用任何參數的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example generates ten random integers and uses the WriteLine method to indicate whether they are even.  \n  \n [!code-cpp[System.Console.WriteLine#4](~/add/codesnippet/cpp/m-system.console.writeli_5_1.cpp)]\n [!code-cs[System.Console.WriteLine#4](~/add/codesnippet/csharp/m-system.console.writeli_5_1.cs)]\n [!code-vb[System.Console.WriteLine#4](~/add/codesnippet/visualbasic/m-system.console.writeli_5_1.vb)]"
  syntax:
    content: public static void WriteLine (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: "要寫入的值。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Char)
  id: WriteLine(System.Char)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Char)
  nameWithType: Console.WriteLine(Char)
  fullName: System.Console.WriteLine(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "將指定的 Unicode 字元，後面接著目前的行結束字元寫入標準輸出資料流的值。"
  remarks: "如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不採用任何參數的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the WriteLine method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_13_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_13_1.vb)]"
  syntax:
    content: public static void WriteLine (char value);
    parameters:
    - id: value
      type: System.Char
      description: "要寫入的值。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Char[])
  id: WriteLine(System.Char[])
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Char[])
  nameWithType: Console.WriteLine(Char[])
  fullName: System.Console.WriteLine(Char[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "寫入指定的 Unicode 字元，後面接著目前的行結束字元，寫入標準輸出資料流的陣列。"
  remarks: "如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不採用任何參數的方法。</xref:System.Console.WriteLine%2A>"
  syntax:
    content: public static void WriteLine (char[] buffer);
    parameters:
    - id: buffer
      type: System.Char[]
      description: "Unicode 字元陣列。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Decimal)
  id: WriteLine(System.Decimal)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Decimal)
  nameWithType: Console.WriteLine(Decimal)
  fullName: System.Console.WriteLine(Decimal)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "將指定的文字表示寫入<xref:System.Decimal>值，後面接著目前的行結束字元，寫入標準輸出資料流。</xref:System.Decimal>"
  remarks: "文字表示`value`產生藉由呼叫<xref:System.Decimal.ToString%2A?displayProperty=fullName>方法。</xref:System.Decimal.ToString%2A?displayProperty=fullName>       如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不採用任何參數的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_3_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_3_1.vb)]"
  syntax:
    content: public static void WriteLine (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: "要寫入的值。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Double)
  id: WriteLine(System.Double)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Double)
  nameWithType: Console.WriteLine(Double)
  fullName: System.Console.WriteLine(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "將文字表示寫入指定的雙精確度浮點值，後面接著目前的行結束字元，寫入標準輸出資料流。"
  remarks: "文字表示`value`產生藉由呼叫<xref:System.Double.ToString%2A?displayProperty=fullName>方法。</xref:System.Double.ToString%2A?displayProperty=fullName>       如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不採用任何參數的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_2_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_2_1.vb)]"
  syntax:
    content: public static void WriteLine (double value);
    parameters:
    - id: value
      type: System.Double
      description: "要寫入的值。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Int32)
  id: WriteLine(System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Int32)
  nameWithType: Console.WriteLine(Int32)
  fullName: System.Console.WriteLine(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定的 32 位元帶正負號的整數值，後面接著目前的行結束字元，寫入標準輸出資料流的文字表示寫入。"
  remarks: "文字表示`value`產生藉由呼叫<xref:System.Int32.ToString%2A?displayProperty=fullName>方法。</xref:System.Int32.ToString%2A?displayProperty=fullName>       如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不採用任何參數的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_1_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_1_1.vb)]"
  syntax:
    content: public static void WriteLine (int value);
    parameters:
    - id: value
      type: System.Int32
      description: "要寫入的值。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Int64)
  id: WriteLine(System.Int64)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Int64)
  nameWithType: Console.WriteLine(Int64)
  fullName: System.Console.WriteLine(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定的 64 位元帶正負號的整數值，後面接著目前的行結束字元，寫入標準輸出資料流的文字表示寫入。"
  remarks: "文字表示`value`產生藉由呼叫<xref:System.Int64.ToString%2A?displayProperty=fullName>方法。</xref:System.Int64.ToString%2A?displayProperty=fullName>       如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不採用任何參數的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_10_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_10_1.vb)]"
  syntax:
    content: public static void WriteLine (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "要寫入的值。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Object)
  id: WriteLine(System.Object)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Object)
  nameWithType: Console.WriteLine(Object)
  fullName: System.Console.WriteLine(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "寫入指定的物件，後面接著目前的行結束字元，寫入標準輸出資料流的文字表示。"
  remarks: "如果`value`是`null`，只有行結束字元寫入。 否則，`ToString`方法`value`呼叫以產生它的字串表示，並將產生的字串寫入標準輸出資料流。       如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不採用任何參數的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example uses the WriteLine method to display each value in an object array to the console.  \n  \n [!code-cpp[System.Console.WriteLine#3](~/add/codesnippet/cpp/m-system.console.writeli_6_1.cpp)]\n [!code-cpp[System.Console.WriteLine#3](~/add/codesnippet/cpp/m-system.console.writeli_6_1.cpp)]\n [!code-cs[System.Console.WriteLine#3](~/add/codesnippet/csharp/m-system.console.writeli_6_1.cs)]\n [!code-vb[System.Console.WriteLine#3](~/add/codesnippet/visualbasic/m-system.console.writeli_6_1.vb)]"
  syntax:
    content: public static void WriteLine (object value);
    parameters:
    - id: value
      type: System.Object
      description: "要寫入的值。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Single)
  id: WriteLine(System.Single)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Single)
  nameWithType: Console.WriteLine(Single)
  fullName: System.Console.WriteLine(Single)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "將文字表示寫入指定的單精確度浮點值，後面接著目前的行結束字元，寫入標準輸出資料流。"
  remarks: "文字表示`value`產生藉由呼叫<xref:System.Single.ToString%2A?displayProperty=fullName>方法。</xref:System.Single.ToString%2A?displayProperty=fullName>       如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不採用任何參數的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_4_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_4_1.vb)]"
  syntax:
    content: public static void WriteLine (float value);
    parameters:
    - id: value
      type: System.Single
      description: "要寫入的值。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: Console.WriteLine(String)
  fullName: System.Console.WriteLine(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "將指定的字串值，後面接著目前的行結束字元，寫入標準輸出資料流。"
  remarks: "如果值為`null`，只有行結束字元寫入標準輸出資料流。       如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine>方法。</xref:System.Console.WriteLine>"
  example:
  - "The example changes the line terminator from its default value of \"\\r\\n\" or `vbCrLf` to \"\\r\\n\\r\\n\" or `vbCrLf` + `vbCrLf`. It then calls the <xref:System.Console.WriteLine> and WriteLine methods to display output to the console.  \n  \n [!code-cpp[System.Console.WriteLine#2](~/add/codesnippet/cpp/m-system.console.writeli_0_1.cpp)]\n [!code-cs[System.Console.WriteLine#2](~/add/codesnippet/csharp/m-system.console.writeli_0_1.cs)]\n [!code-vb[System.Console.WriteLine#2](~/add/codesnippet/visualbasic/m-system.console.writeli_0_1.vb)]"
  syntax:
    content: public static void WriteLine (string value);
    parameters:
    - id: value
      type: System.String
      description: "要寫入的值。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.UInt32)
  id: WriteLine(System.UInt32)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(UInt32)
  nameWithType: Console.WriteLine(UInt32)
  fullName: System.Console.WriteLine(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定的 32 位元不帶正負號的整數值，後面接著目前的行結束字元，寫入標準輸出資料流的文字表示寫入。"
  remarks: "文字表示`value`產生藉由呼叫<xref:System.UInt32.ToString%2A?displayProperty=fullName>方法。</xref:System.UInt32.ToString%2A?displayProperty=fullName>       如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不採用任何參數的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_8_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_8_1.vb)]"
  syntax:
    content: public static void WriteLine (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: "要寫入的值。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.UInt64)
  id: WriteLine(System.UInt64)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(UInt64)
  nameWithType: Console.WriteLine(UInt64)
  fullName: System.Console.WriteLine(UInt64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定的 64 位元不帶正負號的整數值，後面接著目前的行結束字元，寫入標準輸出資料流的文字表示寫入。"
  remarks: "文字表示`value`產生藉由呼叫<xref:System.UInt64.ToString%2A?displayProperty=fullName>方法。</xref:System.UInt64.ToString%2A?displayProperty=fullName>       如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不採用任何參數的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_12_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_12_1.vb)]"
  syntax:
    content: public static void WriteLine (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: "要寫入的值。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.String,System.Object)
  id: WriteLine(System.String,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String,Object)
  nameWithType: Console.WriteLine(String,Object)
  fullName: System.Console.WriteLine(String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "寫入指定的物件，後面接著目前的行結束字元，寫入標準輸出資料流使用指定的格式資訊的文字表示。"
  remarks: "這個方法會使用[複合格式功能](~/add/includes/ajax-current-ext-md.md)物件的值轉換成它的文字表示，並將該表示內嵌在字串中的.NET framework。 產生的字串寫入至輸出資料流。       `format`參數是由零個或多個文字執行混合零或多個索引的預留位置，稱為對應格式項目，這個方法的參數清單中的物件。 格式化的程序會將每個格式項目取代值的對應物件的文字表示。       格式項目的語法`{`*索引*[`,`*對齊*] [`:`*formatString*]`}`指定必要的索引、 選用的長度和格式化的文字對齊方式，格式化控管的對應值的物件的格式規範字元的選擇性字串。       .NET Framework 提供廣泛的格式化支援，下列格式的主題中的更詳細地說明。      -如需這類方法支援複合格式功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，以及一些多載<xref:System.Console.WriteLine%2A>，請參閱[複合格式化](../Topic/Composite%20Formatting.md)。</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -如需有關數值格式規範的詳細資訊，請參閱[標準數值格式字串](~/add/includes/ajax-current-ext-md.md)和[自訂數值格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需有關日期和時間格式規範的詳細資訊，請參閱[標準日期和時間格式字串](~/add/includes/ajax-current-ext-md.md)和[自訂日期和時間格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需列舉格式規範的詳細資訊，請參閱[列舉格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需有關格式的詳細資訊，請參閱[格式化型別](~/add/includes/ajax-current-ext-md.md)。       如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不採用任何參數的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example calls the WriteLine method to display five randomly generated <xref:System.Boolean> values.  \n  \n [!code-vb[System.Console.WriteLine#6](~/add/codesnippet/visualbasic/m-system.console.writeli_9_1.vb)]\n [!code-cs[System.Console.WriteLine#6](~/add/codesnippet/csharp/m-system.console.writeli_9_1.cs)]  \n  \n The following example calls the WriteLine method to display the current date.   Note that the format item in the `format` argument uses the \"D\" [standard date and time format string](../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md) to display the date in the long date format of the current culture.  \n  \n [!code-vb[System.Console.WriteLine#7](~/add/codesnippet/visualbasic/m-system.console.writeli_9_2.vb)]\n [!code-cs[System.Console.WriteLine#7](~/add/codesnippet/csharp/m-system.console.writeli_9_2.cs)]"
  syntax:
    content: public static void WriteLine (string format, object arg0);
    parameters:
    - id: format
      type: System.String
      description: "複合格式字串 （請參閱 < 備註 >）。"
    - id: arg0
      type: System.Object
      description: "要寫入使用物件`format`。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "中的格式規格<code> format </code>無效。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.String,System.Object[])
  id: WriteLine(System.String,System.Object[])
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String,Object[])
  nameWithType: Console.WriteLine(String,Object[])
  fullName: System.Console.WriteLine(String,Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定的物件，後面接著目前的行結束字元，寫入標準輸出資料流使用指定的格式資訊之陣列的文字表示寫入。"
  remarks: "這個方法會使用[複合格式功能](~/add/includes/ajax-current-ext-md.md)物件的值轉換成它的文字表示，並將該表示內嵌在字串中的.NET framework。 產生的字串寫入至輸出資料流。       `format`參數是由零個或多個文字執行混合零或多個索引的預留位置，稱為對應格式項目，這個方法的參數清單中的物件。 格式化的程序會將每個格式項目取代值的對應物件的文字表示。       格式項目的語法`{`*索引*[`,`*對齊*] [`:`*formatString*]`}`指定必要的索引、 選用的長度和格式化的文字對齊方式，格式化控管的對應值的物件的格式規範字元的選擇性字串。       .NET Framework 提供廣泛的格式化支援，下列格式的主題中的更詳細地說明。      -如需這類方法支援複合格式功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，以及一些多載<xref:System.Console.WriteLine%2A>，請參閱[複合格式化](../Topic/Composite%20Formatting.md)。</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -如需有關數值格式規範的詳細資訊，請參閱[標準數值格式字串](~/add/includes/ajax-current-ext-md.md)和[自訂數值格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需有關日期和時間格式規範的詳細資訊，請參閱[標準日期和時間格式字串](~/add/includes/ajax-current-ext-md.md)和[自訂日期和時間格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需列舉格式規範的詳細資訊，請參閱[列舉格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需有關格式的詳細資訊，請參閱[格式化型別](~/add/includes/ajax-current-ext-md.md)。       如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不採用任何參數的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.writeli_11_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.writeli_11_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.writeli_11_1.vb)]  \n  \n The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_11_2.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_11_2.vb)]"
  syntax:
    content: public static void WriteLine (string format, object[] arg);
    parameters:
    - id: format
      type: System.String
      description: "複合格式字串 （請參閱 < 備註 >）。"
    - id: arg
      type: System.Object[]
      description: "寫入使用的物件陣列`format`。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>or <code>arg</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "中的格式規格<code> format </code>無效。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Char[],System.Int32,System.Int32)
  id: WriteLine(System.Char[],System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Char[],Int32,Int32)
  nameWithType: Console.WriteLine(Char[],Int32,Int32)
  fullName: System.Console.WriteLine(Char[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "將指定的子陣列的 Unicode 字元，後面接著目前的行結束字元，寫入標準輸出資料流。"
  remarks: "這個方法會寫入`count`字元位置開始`index`的`buffer`標準輸出資料流。       如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不採用任何參數的方法。</xref:System.Console.WriteLine%2A>"
  syntax:
    content: public static void WriteLine (char[] buffer, int index, int count);
    parameters:
    - id: buffer
      type: System.Char[]
      description: "Unicode 字元陣列。"
    - id: index
      type: System.Int32
      description: "中的開始位置`buffer`。"
    - id: count
      type: System.Int32
      description: "要寫入的字元數目。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>或<code>count</code>小於零。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>加上<code>count</code>指定的位置時，不在<code>buffer</code>。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.String,System.Object,System.Object)
  id: WriteLine(System.String,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "寫入指定的物件，後面接著目前的行結束字元，寫入標準輸出資料流使用指定的格式資訊的文字表示。"
  remarks: "這個方法會使用[複合格式功能](~/add/includes/ajax-current-ext-md.md)物件的值轉換成它的文字表示，並將該表示內嵌在字串中的.NET framework。 產生的字串寫入至輸出資料流。       `format`參數是由零個或多個文字執行混合零或多個索引的預留位置，稱為對應格式項目，這個方法的參數清單中的物件。 格式化的程序會將每個格式項目取代值的對應物件的文字表示。       格式項目的語法`{`*索引*[`,`*對齊*] [`:`*formatString*]`}`指定必要的索引、 選用的長度和格式化的文字對齊方式，格式化控管的對應值的物件的格式規範字元的選擇性字串。       .NET Framework 提供廣泛的格式化支援，下列格式的主題中的更詳細地說明。      -如需這類方法支援複合格式功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，以及一些多載<xref:System.Console.WriteLine%2A>，請參閱[複合格式化](../Topic/Composite%20Formatting.md)。</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -如需有關數值格式規範的詳細資訊，請參閱[標準數值格式字串](~/add/includes/ajax-current-ext-md.md)和[自訂數值格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需有關日期和時間格式規範的詳細資訊，請參閱[標準日期和時間格式字串](~/add/includes/ajax-current-ext-md.md)和[自訂日期和時間格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需列舉格式規範的詳細資訊，請參閱[列舉格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需有關格式的詳細資訊，請參閱[格式化型別](~/add/includes/ajax-current-ext-md.md)。       如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不採用任何參數的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.writeli_7_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.writeli_7_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.writeli_7_1.vb)]  \n  \n The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_7_2.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_7_2.vb)]"
  syntax:
    content: public static void WriteLine (string format, object arg0, object arg1);
    parameters:
    - id: format
      type: System.String
      description: "複合格式字串 （請參閱 < 備註 >）。"
    - id: arg0
      type: System.Object
      description: "使用寫入第一個物件`format`。"
    - id: arg1
      type: System.Object
      description: "要寫入使用的第二個物件`format`。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "中的格式規格<code> format </code>無效。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)
  id: WriteLine(System.String,System.Object,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String,Object,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "寫入指定的物件，後面接著目前的行結束字元，寫入標準輸出資料流使用指定的格式資訊的文字表示。"
  remarks: "這個方法會使用[複合格式功能](~/add/includes/ajax-current-ext-md.md)物件的值轉換成它的文字表示，並將該表示內嵌在字串中的.NET framework。 產生的字串寫入至輸出資料流。       `format`參數是由零個或多個文字執行混合零或多個索引的預留位置，稱為對應格式項目，這個方法的參數清單中的物件。 格式化的程序會將每個格式項目取代值的對應物件的文字表示。       格式項目的語法`{`*索引*[`,`*對齊*] [`:`*formatString*]`}`指定必要的索引、 選用的長度和格式化的文字對齊方式，格式化控管的對應值的物件的格式規範字元的選擇性字串。       .NET Framework 提供廣泛的格式化支援，下列格式的主題中的更詳細地說明。      -如需這類方法支援複合格式功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，以及一些多載<xref:System.Console.WriteLine%2A>，請參閱[複合格式化](../Topic/Composite%20Formatting.md)。</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -如需有關數值格式規範的詳細資訊，請參閱[標準數值格式字串](~/add/includes/ajax-current-ext-md.md)和[自訂數值格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需有關日期和時間格式規範的詳細資訊，請參閱[標準日期和時間格式字串](~/add/includes/ajax-current-ext-md.md)和[自訂日期和時間格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需列舉格式規範的詳細資訊，請參閱[列舉格式字串](~/add/includes/ajax-current-ext-md.md)。      -如需有關格式的詳細資訊，請參閱[格式化型別](~/add/includes/ajax-current-ext-md.md)。       如需行結束字元的詳細資訊，請參閱的 < 備註 > 一節<xref:System.Console.WriteLine%2A>不採用任何參數的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/ecdde448-c375-4488-93b7-_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/ecdde448-c375-4488-93b7-_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/ecdde448-c375-4488-93b7-_1.vb)]  \n  \n The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/ecdde448-c375-4488-93b7-_2.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/ecdde448-c375-4488-93b7-_2.vb)]"
  syntax:
    content: public static void WriteLine (string format, object arg0, object arg1, object arg2);
    parameters:
    - id: format
      type: System.String
      description: "複合格式字串 （請參閱 < 備註 >）。"
    - id: arg0
      type: System.Object
      description: "使用寫入第一個物件`format`。"
    - id: arg1
      type: System.Object
      description: "要寫入使用的第二個物件`format`。"
    - id: arg2
      type: System.Object
      description: "使用寫入第三個物件`format`。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "中的格式規格<code> format </code>無效。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)
  id: WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String,Object,Object,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "將文字表示寫入指定之物件和可變長度參數清單中，後面接著目前的行結束字元，寫入標準輸出資料流使用指定的格式資訊。"
  remarks: "> [!NOTE]\n>  This API is not CLS-compliant. The CLS-compliant alternative is [Console.WriteLine(String, Object\\[\\])](assetId:///M:System.Console.WriteLine(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False). The C# and Visual Basic compilers automatically resolve a call to this method as a call to [Console.WriteLine(String, Object\\[\\])](assetId:///M:System.Console.WriteLine(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False).  \n  \n This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  \n  \n The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  \n  \n-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  \n  \n For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters."
  example:
  - "The following example illustrates the use of variable arguments with the WriteLine method. The method is called with a composite format string and five format items.  \n  \n [!code-cpp[System.Console.WriteLine#5](~/add/codesnippet/cpp/b0d255a7-f5e0-4135-8d9b-_1.cpp)]"
  syntax:
    content: public static void WriteLine (string format, object arg0, object arg1, object arg2, object arg3);
    parameters:
    - id: format
      type: System.String
      description: "複合格式字串 （請參閱 < 備註 >）。"
    - id: arg0
      type: System.Object
      description: "使用寫入第一個物件`format`。"
    - id: arg1
      type: System.Object
      description: "要寫入使用的第二個物件`format`。"
    - id: arg2
      type: System.Object
      description: "使用寫入第三個物件`format`。"
    - id: arg3
      type: System.Object
      description: "要寫入使用的第四個物件`format`。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "發生 I/O 錯誤。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "中的格式規格<code> format </code>無效。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.Security.HostProtectionException
  parent: System.Security
  isExternal: false
  name: HostProtectionException
  nameWithType: HostProtectionException
  fullName: System.Security.HostProtectionException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.FormatException
  isExternal: true
  name: System.FormatException
- uid: System.Console.BackgroundColor
  parent: System.Console
  isExternal: false
  name: BackgroundColor
  nameWithType: Console.BackgroundColor
  fullName: System.Console.BackgroundColor
- uid: System.ConsoleColor
  parent: System
  isExternal: false
  name: ConsoleColor
  nameWithType: ConsoleColor
  fullName: System.ConsoleColor
- uid: System.Console.Beep
  parent: System.Console
  isExternal: false
  name: Beep()
  nameWithType: Console.Beep()
  fullName: System.Console.Beep()
- uid: System.Console.Beep(System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: Beep(Int32,Int32)
  nameWithType: Console.Beep(Int32,Int32)
  fullName: System.Console.Beep(Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Console.BufferHeight
  parent: System.Console
  isExternal: false
  name: BufferHeight
  nameWithType: Console.BufferHeight
  fullName: System.Console.BufferHeight
- uid: System.Console.BufferWidth
  parent: System.Console
  isExternal: false
  name: BufferWidth
  nameWithType: Console.BufferWidth
  fullName: System.Console.BufferWidth
- uid: System.Console.CancelKeyPress
  parent: System.Console
  isExternal: false
  name: CancelKeyPress
  nameWithType: Console.CancelKeyPress
  fullName: System.Console.CancelKeyPress
- uid: System.ConsoleCancelEventHandler
  parent: System
  isExternal: false
  name: ConsoleCancelEventHandler
  nameWithType: ConsoleCancelEventHandler
  fullName: System.ConsoleCancelEventHandler
- uid: System.Console.CapsLock
  parent: System.Console
  isExternal: false
  name: CapsLock
  nameWithType: Console.CapsLock
  fullName: System.Console.CapsLock
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Console.Clear
  parent: System.Console
  isExternal: false
  name: Clear()
  nameWithType: Console.Clear()
  fullName: System.Console.Clear()
- uid: System.Console.CursorLeft
  parent: System.Console
  isExternal: false
  name: CursorLeft
  nameWithType: Console.CursorLeft
  fullName: System.Console.CursorLeft
- uid: System.Console.CursorSize
  parent: System.Console
  isExternal: false
  name: CursorSize
  nameWithType: Console.CursorSize
  fullName: System.Console.CursorSize
- uid: System.Console.CursorTop
  parent: System.Console
  isExternal: false
  name: CursorTop
  nameWithType: Console.CursorTop
  fullName: System.Console.CursorTop
- uid: System.Console.CursorVisible
  parent: System.Console
  isExternal: false
  name: CursorVisible
  nameWithType: Console.CursorVisible
  fullName: System.Console.CursorVisible
- uid: System.Console.Error
  parent: System.Console
  isExternal: false
  name: Error
  nameWithType: Console.Error
  fullName: System.Console.Error
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Console.ForegroundColor
  parent: System.Console
  isExternal: false
  name: ForegroundColor
  nameWithType: Console.ForegroundColor
  fullName: System.Console.ForegroundColor
- uid: System.Console.In
  parent: System.Console
  isExternal: false
  name: In
  nameWithType: Console.In
  fullName: System.Console.In
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Console.InputEncoding
  parent: System.Console
  isExternal: false
  name: InputEncoding
  nameWithType: Console.InputEncoding
  fullName: System.Console.InputEncoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Console.IsErrorRedirected
  parent: System.Console
  isExternal: false
  name: IsErrorRedirected
  nameWithType: Console.IsErrorRedirected
  fullName: System.Console.IsErrorRedirected
- uid: System.Console.IsInputRedirected
  parent: System.Console
  isExternal: false
  name: IsInputRedirected
  nameWithType: Console.IsInputRedirected
  fullName: System.Console.IsInputRedirected
- uid: System.Console.IsOutputRedirected
  parent: System.Console
  isExternal: false
  name: IsOutputRedirected
  nameWithType: Console.IsOutputRedirected
  fullName: System.Console.IsOutputRedirected
- uid: System.Console.KeyAvailable
  parent: System.Console
  isExternal: false
  name: KeyAvailable
  nameWithType: Console.KeyAvailable
  fullName: System.Console.KeyAvailable
- uid: System.Console.LargestWindowHeight
  parent: System.Console
  isExternal: false
  name: LargestWindowHeight
  nameWithType: Console.LargestWindowHeight
  fullName: System.Console.LargestWindowHeight
- uid: System.Console.LargestWindowWidth
  parent: System.Console
  isExternal: false
  name: LargestWindowWidth
  nameWithType: Console.LargestWindowWidth
  fullName: System.Console.LargestWindowWidth
- uid: System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
- uid: System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)
  parent: System.Console
  isExternal: false
  name: MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
  nameWithType: Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
  fullName: System.Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Console.NumberLock
  parent: System.Console
  isExternal: false
  name: NumberLock
  nameWithType: Console.NumberLock
  fullName: System.Console.NumberLock
- uid: System.Console.OpenStandardError
  parent: System.Console
  isExternal: false
  name: OpenStandardError()
  nameWithType: Console.OpenStandardError()
  fullName: System.Console.OpenStandardError()
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Console.OpenStandardError(System.Int32)
  parent: System.Console
  isExternal: false
  name: OpenStandardError(Int32)
  nameWithType: Console.OpenStandardError(Int32)
  fullName: System.Console.OpenStandardError(Int32)
- uid: System.Console.OpenStandardInput
  parent: System.Console
  isExternal: false
  name: OpenStandardInput()
  nameWithType: Console.OpenStandardInput()
  fullName: System.Console.OpenStandardInput()
- uid: System.Console.OpenStandardInput(System.Int32)
  parent: System.Console
  isExternal: false
  name: OpenStandardInput(Int32)
  nameWithType: Console.OpenStandardInput(Int32)
  fullName: System.Console.OpenStandardInput(Int32)
- uid: System.Console.OpenStandardOutput
  parent: System.Console
  isExternal: false
  name: OpenStandardOutput()
  nameWithType: Console.OpenStandardOutput()
  fullName: System.Console.OpenStandardOutput()
- uid: System.Console.OpenStandardOutput(System.Int32)
  parent: System.Console
  isExternal: false
  name: OpenStandardOutput(Int32)
  nameWithType: Console.OpenStandardOutput(Int32)
  fullName: System.Console.OpenStandardOutput(Int32)
- uid: System.Console.Out
  parent: System.Console
  isExternal: false
  name: Out
  nameWithType: Console.Out
  fullName: System.Console.Out
- uid: System.Console.OutputEncoding
  parent: System.Console
  isExternal: false
  name: OutputEncoding
  nameWithType: Console.OutputEncoding
  fullName: System.Console.OutputEncoding
- uid: System.Console.Read
  parent: System.Console
  isExternal: false
  name: Read()
  nameWithType: Console.Read()
  fullName: System.Console.Read()
- uid: System.Console.ReadKey
  parent: System.Console
  isExternal: false
  name: ReadKey()
  nameWithType: Console.ReadKey()
  fullName: System.Console.ReadKey()
- uid: System.ConsoleKeyInfo
  parent: System
  isExternal: false
  name: ConsoleKeyInfo
  nameWithType: ConsoleKeyInfo
  fullName: System.ConsoleKeyInfo
- uid: System.Console.ReadKey(System.Boolean)
  parent: System.Console
  isExternal: false
  name: ReadKey(Boolean)
  nameWithType: Console.ReadKey(Boolean)
  fullName: System.Console.ReadKey(Boolean)
- uid: System.Console.ReadLine
  parent: System.Console
  isExternal: false
  name: ReadLine()
  nameWithType: Console.ReadLine()
  fullName: System.Console.ReadLine()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Console.ResetColor
  parent: System.Console
  isExternal: false
  name: ResetColor()
  nameWithType: Console.ResetColor()
  fullName: System.Console.ResetColor()
- uid: System.Console.SetBufferSize(System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: SetBufferSize(Int32,Int32)
  nameWithType: Console.SetBufferSize(Int32,Int32)
  fullName: System.Console.SetBufferSize(Int32,Int32)
- uid: System.Console.SetCursorPosition(System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: SetCursorPosition(Int32,Int32)
  nameWithType: Console.SetCursorPosition(Int32,Int32)
  fullName: System.Console.SetCursorPosition(Int32,Int32)
- uid: System.Console.SetError(System.IO.TextWriter)
  parent: System.Console
  isExternal: false
  name: SetError(TextWriter)
  nameWithType: Console.SetError(TextWriter)
  fullName: System.Console.SetError(TextWriter)
- uid: System.Console.SetIn(System.IO.TextReader)
  parent: System.Console
  isExternal: false
  name: SetIn(TextReader)
  nameWithType: Console.SetIn(TextReader)
  fullName: System.Console.SetIn(TextReader)
- uid: System.Console.SetOut(System.IO.TextWriter)
  parent: System.Console
  isExternal: false
  name: SetOut(TextWriter)
  nameWithType: Console.SetOut(TextWriter)
  fullName: System.Console.SetOut(TextWriter)
- uid: System.Console.SetWindowPosition(System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: SetWindowPosition(Int32,Int32)
  nameWithType: Console.SetWindowPosition(Int32,Int32)
  fullName: System.Console.SetWindowPosition(Int32,Int32)
- uid: System.Console.SetWindowSize(System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: SetWindowSize(Int32,Int32)
  nameWithType: Console.SetWindowSize(Int32,Int32)
  fullName: System.Console.SetWindowSize(Int32,Int32)
- uid: System.Console.Title
  parent: System.Console
  isExternal: false
  name: Title
  nameWithType: Console.Title
  fullName: System.Console.Title
- uid: System.Console.TreatControlCAsInput
  parent: System.Console
  isExternal: false
  name: TreatControlCAsInput
  nameWithType: Console.TreatControlCAsInput
  fullName: System.Console.TreatControlCAsInput
- uid: System.Console.WindowHeight
  parent: System.Console
  isExternal: false
  name: WindowHeight
  nameWithType: Console.WindowHeight
  fullName: System.Console.WindowHeight
- uid: System.Console.WindowLeft
  parent: System.Console
  isExternal: false
  name: WindowLeft
  nameWithType: Console.WindowLeft
  fullName: System.Console.WindowLeft
- uid: System.Console.WindowTop
  parent: System.Console
  isExternal: false
  name: WindowTop
  nameWithType: Console.WindowTop
  fullName: System.Console.WindowTop
- uid: System.Console.WindowWidth
  parent: System.Console
  isExternal: false
  name: WindowWidth
  nameWithType: Console.WindowWidth
  fullName: System.Console.WindowWidth
- uid: System.Console.Write(System.Boolean)
  parent: System.Console
  isExternal: false
  name: Write(Boolean)
  nameWithType: Console.Write(Boolean)
  fullName: System.Console.Write(Boolean)
- uid: System.Console.Write(System.Char)
  parent: System.Console
  isExternal: false
  name: Write(Char)
  nameWithType: Console.Write(Char)
  fullName: System.Console.Write(Char)
- uid: System.Console.Write(System.Char[])
  parent: System.Console
  isExternal: false
  name: Write(Char[])
  nameWithType: Console.Write(Char[])
  fullName: System.Console.Write(Char[])
- uid: System.Char[]
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Console.Write(System.Decimal)
  parent: System.Console
  isExternal: false
  name: Write(Decimal)
  nameWithType: Console.Write(Decimal)
  fullName: System.Console.Write(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Console.Write(System.Double)
  parent: System.Console
  isExternal: false
  name: Write(Double)
  nameWithType: Console.Write(Double)
  fullName: System.Console.Write(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Console.Write(System.Int32)
  parent: System.Console
  isExternal: false
  name: Write(Int32)
  nameWithType: Console.Write(Int32)
  fullName: System.Console.Write(Int32)
- uid: System.Console.Write(System.Int64)
  parent: System.Console
  isExternal: false
  name: Write(Int64)
  nameWithType: Console.Write(Int64)
  fullName: System.Console.Write(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Console.Write(System.Object)
  parent: System.Console
  isExternal: false
  name: Write(Object)
  nameWithType: Console.Write(Object)
  fullName: System.Console.Write(Object)
- uid: System.Console.Write(System.Single)
  parent: System.Console
  isExternal: false
  name: Write(Single)
  nameWithType: Console.Write(Single)
  fullName: System.Console.Write(Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Console.Write(System.String)
  parent: System.Console
  isExternal: false
  name: Write(String)
  nameWithType: Console.Write(String)
  fullName: System.Console.Write(String)
- uid: System.Console.Write(System.UInt32)
  parent: System.Console
  isExternal: false
  name: Write(UInt32)
  nameWithType: Console.Write(UInt32)
  fullName: System.Console.Write(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Console.Write(System.UInt64)
  parent: System.Console
  isExternal: false
  name: Write(UInt64)
  nameWithType: Console.Write(UInt64)
  fullName: System.Console.Write(UInt64)
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Console.Write(System.String,System.Object)
  parent: System.Console
  isExternal: false
  name: Write(String,Object)
  nameWithType: Console.Write(String,Object)
  fullName: System.Console.Write(String,Object)
- uid: System.Console.Write(System.String,System.Object[])
  parent: System.Console
  isExternal: false
  name: Write(String,Object[])
  nameWithType: Console.Write(String,Object[])
  fullName: System.Console.Write(String,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Console.Write(System.Char[],System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: Write(Char[],Int32,Int32)
  nameWithType: Console.Write(Char[],Int32,Int32)
  fullName: System.Console.Write(Char[],Int32,Int32)
- uid: System.Console.Write(System.String,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: Write(String,Object,Object)
  nameWithType: Console.Write(String,Object,Object)
  fullName: System.Console.Write(String,Object,Object)
- uid: System.Console.Write(System.String,System.Object,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: Write(String,Object,Object,Object)
  nameWithType: Console.Write(String,Object,Object,Object)
  fullName: System.Console.Write(String,Object,Object,Object)
- uid: System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: Write(String,Object,Object,Object,Object)
  nameWithType: Console.Write(String,Object,Object,Object,Object)
  fullName: System.Console.Write(String,Object,Object,Object,Object)
- uid: System.Console.WriteLine
  parent: System.Console
  isExternal: false
  name: WriteLine()
  nameWithType: Console.WriteLine()
  fullName: System.Console.WriteLine()
- uid: System.Console.WriteLine(System.Boolean)
  parent: System.Console
  isExternal: false
  name: WriteLine(Boolean)
  nameWithType: Console.WriteLine(Boolean)
  fullName: System.Console.WriteLine(Boolean)
- uid: System.Console.WriteLine(System.Char)
  parent: System.Console
  isExternal: false
  name: WriteLine(Char)
  nameWithType: Console.WriteLine(Char)
  fullName: System.Console.WriteLine(Char)
- uid: System.Console.WriteLine(System.Char[])
  parent: System.Console
  isExternal: false
  name: WriteLine(Char[])
  nameWithType: Console.WriteLine(Char[])
  fullName: System.Console.WriteLine(Char[])
- uid: System.Console.WriteLine(System.Decimal)
  parent: System.Console
  isExternal: false
  name: WriteLine(Decimal)
  nameWithType: Console.WriteLine(Decimal)
  fullName: System.Console.WriteLine(Decimal)
- uid: System.Console.WriteLine(System.Double)
  parent: System.Console
  isExternal: false
  name: WriteLine(Double)
  nameWithType: Console.WriteLine(Double)
  fullName: System.Console.WriteLine(Double)
- uid: System.Console.WriteLine(System.Int32)
  parent: System.Console
  isExternal: false
  name: WriteLine(Int32)
  nameWithType: Console.WriteLine(Int32)
  fullName: System.Console.WriteLine(Int32)
- uid: System.Console.WriteLine(System.Int64)
  parent: System.Console
  isExternal: false
  name: WriteLine(Int64)
  nameWithType: Console.WriteLine(Int64)
  fullName: System.Console.WriteLine(Int64)
- uid: System.Console.WriteLine(System.Object)
  parent: System.Console
  isExternal: false
  name: WriteLine(Object)
  nameWithType: Console.WriteLine(Object)
  fullName: System.Console.WriteLine(Object)
- uid: System.Console.WriteLine(System.Single)
  parent: System.Console
  isExternal: false
  name: WriteLine(Single)
  nameWithType: Console.WriteLine(Single)
  fullName: System.Console.WriteLine(Single)
- uid: System.Console.WriteLine(System.String)
  parent: System.Console
  isExternal: false
  name: WriteLine(String)
  nameWithType: Console.WriteLine(String)
  fullName: System.Console.WriteLine(String)
- uid: System.Console.WriteLine(System.UInt32)
  parent: System.Console
  isExternal: false
  name: WriteLine(UInt32)
  nameWithType: Console.WriteLine(UInt32)
  fullName: System.Console.WriteLine(UInt32)
- uid: System.Console.WriteLine(System.UInt64)
  parent: System.Console
  isExternal: false
  name: WriteLine(UInt64)
  nameWithType: Console.WriteLine(UInt64)
  fullName: System.Console.WriteLine(UInt64)
- uid: System.Console.WriteLine(System.String,System.Object)
  parent: System.Console
  isExternal: false
  name: WriteLine(String,Object)
  nameWithType: Console.WriteLine(String,Object)
  fullName: System.Console.WriteLine(String,Object)
- uid: System.Console.WriteLine(System.String,System.Object[])
  parent: System.Console
  isExternal: false
  name: WriteLine(String,Object[])
  nameWithType: Console.WriteLine(String,Object[])
  fullName: System.Console.WriteLine(String,Object[])
- uid: System.Console.WriteLine(System.Char[],System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: WriteLine(Char[],Int32,Int32)
  nameWithType: Console.WriteLine(Char[],Int32,Int32)
  fullName: System.Console.WriteLine(Char[],Int32,Int32)
- uid: System.Console.WriteLine(System.String,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: WriteLine(String,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object)
- uid: System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: WriteLine(String,Object,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object,Object)
- uid: System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: WriteLine(String,Object,Object,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object,Object,Object)
- uid: System.Console.BackgroundColor*
  parent: System.Console
  isExternal: false
  name: BackgroundColor
  nameWithType: Console.BackgroundColor
- uid: System.Console.Beep*
  parent: System.Console
  isExternal: false
  name: Beep
  nameWithType: Console.Beep
- uid: System.Console.BufferHeight*
  parent: System.Console
  isExternal: false
  name: BufferHeight
  nameWithType: Console.BufferHeight
- uid: System.Console.BufferWidth*
  parent: System.Console
  isExternal: false
  name: BufferWidth
  nameWithType: Console.BufferWidth
- uid: System.Console.CapsLock*
  parent: System.Console
  isExternal: false
  name: CapsLock
  nameWithType: Console.CapsLock
- uid: System.Console.Clear*
  parent: System.Console
  isExternal: false
  name: Clear
  nameWithType: Console.Clear
- uid: System.Console.CursorLeft*
  parent: System.Console
  isExternal: false
  name: CursorLeft
  nameWithType: Console.CursorLeft
- uid: System.Console.CursorSize*
  parent: System.Console
  isExternal: false
  name: CursorSize
  nameWithType: Console.CursorSize
- uid: System.Console.CursorTop*
  parent: System.Console
  isExternal: false
  name: CursorTop
  nameWithType: Console.CursorTop
- uid: System.Console.CursorVisible*
  parent: System.Console
  isExternal: false
  name: CursorVisible
  nameWithType: Console.CursorVisible
- uid: System.Console.Error*
  parent: System.Console
  isExternal: false
  name: Error
  nameWithType: Console.Error
- uid: System.Console.ForegroundColor*
  parent: System.Console
  isExternal: false
  name: ForegroundColor
  nameWithType: Console.ForegroundColor
- uid: System.Console.In*
  parent: System.Console
  isExternal: false
  name: In
  nameWithType: Console.In
- uid: System.Console.InputEncoding*
  parent: System.Console
  isExternal: false
  name: InputEncoding
  nameWithType: Console.InputEncoding
- uid: System.Console.IsErrorRedirected*
  parent: System.Console
  isExternal: false
  name: IsErrorRedirected
  nameWithType: Console.IsErrorRedirected
- uid: System.Console.IsInputRedirected*
  parent: System.Console
  isExternal: false
  name: IsInputRedirected
  nameWithType: Console.IsInputRedirected
- uid: System.Console.IsOutputRedirected*
  parent: System.Console
  isExternal: false
  name: IsOutputRedirected
  nameWithType: Console.IsOutputRedirected
- uid: System.Console.KeyAvailable*
  parent: System.Console
  isExternal: false
  name: KeyAvailable
  nameWithType: Console.KeyAvailable
- uid: System.Console.LargestWindowHeight*
  parent: System.Console
  isExternal: false
  name: LargestWindowHeight
  nameWithType: Console.LargestWindowHeight
- uid: System.Console.LargestWindowWidth*
  parent: System.Console
  isExternal: false
  name: LargestWindowWidth
  nameWithType: Console.LargestWindowWidth
- uid: System.Console.MoveBufferArea*
  parent: System.Console
  isExternal: false
  name: MoveBufferArea
  nameWithType: Console.MoveBufferArea
- uid: System.Console.NumberLock*
  parent: System.Console
  isExternal: false
  name: NumberLock
  nameWithType: Console.NumberLock
- uid: System.Console.OpenStandardError*
  parent: System.Console
  isExternal: false
  name: OpenStandardError
  nameWithType: Console.OpenStandardError
- uid: System.Console.OpenStandardInput*
  parent: System.Console
  isExternal: false
  name: OpenStandardInput
  nameWithType: Console.OpenStandardInput
- uid: System.Console.OpenStandardOutput*
  parent: System.Console
  isExternal: false
  name: OpenStandardOutput
  nameWithType: Console.OpenStandardOutput
- uid: System.Console.Out*
  parent: System.Console
  isExternal: false
  name: Out
  nameWithType: Console.Out
- uid: System.Console.OutputEncoding*
  parent: System.Console
  isExternal: false
  name: OutputEncoding
  nameWithType: Console.OutputEncoding
- uid: System.Console.Read*
  parent: System.Console
  isExternal: false
  name: Read
  nameWithType: Console.Read
- uid: System.Console.ReadKey*
  parent: System.Console
  isExternal: false
  name: ReadKey
  nameWithType: Console.ReadKey
- uid: System.Console.ReadLine*
  parent: System.Console
  isExternal: false
  name: ReadLine
  nameWithType: Console.ReadLine
- uid: System.Console.ResetColor*
  parent: System.Console
  isExternal: false
  name: ResetColor
  nameWithType: Console.ResetColor
- uid: System.Console.SetBufferSize*
  parent: System.Console
  isExternal: false
  name: SetBufferSize
  nameWithType: Console.SetBufferSize
- uid: System.Console.SetCursorPosition*
  parent: System.Console
  isExternal: false
  name: SetCursorPosition
  nameWithType: Console.SetCursorPosition
- uid: System.Console.SetError*
  parent: System.Console
  isExternal: false
  name: SetError
  nameWithType: Console.SetError
- uid: System.Console.SetIn*
  parent: System.Console
  isExternal: false
  name: SetIn
  nameWithType: Console.SetIn
- uid: System.Console.SetOut*
  parent: System.Console
  isExternal: false
  name: SetOut
  nameWithType: Console.SetOut
- uid: System.Console.SetWindowPosition*
  parent: System.Console
  isExternal: false
  name: SetWindowPosition
  nameWithType: Console.SetWindowPosition
- uid: System.Console.SetWindowSize*
  parent: System.Console
  isExternal: false
  name: SetWindowSize
  nameWithType: Console.SetWindowSize
- uid: System.Console.Title*
  parent: System.Console
  isExternal: false
  name: Title
  nameWithType: Console.Title
- uid: System.Console.TreatControlCAsInput*
  parent: System.Console
  isExternal: false
  name: TreatControlCAsInput
  nameWithType: Console.TreatControlCAsInput
- uid: System.Console.WindowHeight*
  parent: System.Console
  isExternal: false
  name: WindowHeight
  nameWithType: Console.WindowHeight
- uid: System.Console.WindowLeft*
  parent: System.Console
  isExternal: false
  name: WindowLeft
  nameWithType: Console.WindowLeft
- uid: System.Console.WindowTop*
  parent: System.Console
  isExternal: false
  name: WindowTop
  nameWithType: Console.WindowTop
- uid: System.Console.WindowWidth*
  parent: System.Console
  isExternal: false
  name: WindowWidth
  nameWithType: Console.WindowWidth
- uid: System.Console.Write*
  parent: System.Console
  isExternal: false
  name: Write
  nameWithType: Console.Write
- uid: System.Console.WriteLine*
  parent: System.Console
  isExternal: false
  name: WriteLine
  nameWithType: Console.WriteLine
