### YamlMime:ManagedReference
items:
- uid: System.Net.Http.HttpMessageHandler
  id: HttpMessageHandler
  children:
  - System.Net.Http.HttpMessageHandler.#ctor
  - System.Net.Http.HttpMessageHandler.Dispose
  - System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  - System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  langs:
  - csharp
  name: HttpMessageHandler
  nameWithType: HttpMessageHandler
  fullName: System.Net.Http.HttpMessageHandler
  type: Class
  summary: "HTTP 訊息處理常式的基底類型。"
  remarks: "有各種 HTTP 訊息處理常式可用。 其中包括下列項目。      1.  <xref:System.Net.Http.DelegatingHandler>的用來插入處理常式鏈結中的處理常式類別。</xref:System.Net.Http.DelegatingHandler>      2.  HttpMessageHandler-簡單的類別衍生自可支援大部分的應用程式最常見的需求。      3.  <xref:System.Net.Http.HttpClientHandler>的底部實際上會處理 HTTP 傳輸作業的處理常式鏈結的運作方式類別。</xref:System.Net.Http.HttpClientHandler>      4.  <xref:System.Net.Http.WebRequestHandler>-操作底部的 處理選項所特有的 HTTP 傳輸作業的處理常式鏈結類別特殊類別<xref:System.Net.HttpWebRequest?displayProperty=fullName>物件。</xref:System.Net.HttpWebRequest?displayProperty=fullName></xref:System.Net.Http.WebRequestHandler>       如果開發人員從 HttpMessageHandler，然後覆寫衍生類別<xref:System.Net.Http.HttpMessageHandler.SendAsync%2A>方法，它們必須確定<xref:System.Net.Http.HttpMessageHandler.SendAsync%2A>由不同的執行緒可以同時呼叫。</xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> </xref:System.Net.Http.HttpMessageHandler.SendAsync%2A>       這是必要的方法上自<xref:System.Net.Http.HttpClient>可以同時呼叫，而且需要的執行緒安全性保證。</xref:System.Net.Http.HttpClient> 因此，如果處理常式指派給<xref:System.Net.Http.HttpClient>執行個體，<xref:System.Net.Http.HttpMessageHandler.SendAsync%2A>處理常式的方法可以同時藉由呼叫<xref:System.Net.Http.HttpClient>執行個體，必須是安全執行緒。</xref:System.Net.Http.HttpClient> </xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> </xref:System.Net.Http.HttpClient>"
  syntax:
    content: 'public abstract class HttpMessageHandler : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageHandler.#ctor
  id: '#ctor'
  parent: System.Net.Http.HttpMessageHandler
  langs:
  - csharp
  name: HttpMessageHandler()
  nameWithType: HttpMessageHandler.HttpMessageHandler()
  fullName: System.Net.Http.HttpMessageHandler.HttpMessageHandler()
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "初始化的新執行個體<xref href=&quot;System.Net.Http.HttpMessageHandler&quot;></xref>類別。"
  syntax:
    content: protected HttpMessageHandler ();
    parameters: []
  overload: System.Net.Http.HttpMessageHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageHandler.Dispose
  id: Dispose
  parent: System.Net.Http.HttpMessageHandler
  langs:
  - csharp
  name: Dispose()
  nameWithType: HttpMessageHandler.Dispose()
  fullName: System.Net.Http.HttpMessageHandler.Dispose()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "版本所使用的 unmanaged 的資源並處置 managed 資源<xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref>。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Http.HttpMessageHandler.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.HttpMessageHandler
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HttpMessageHandler.Dispose(Boolean)
  fullName: System.Net.Http.HttpMessageHandler.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "所使用的 unmanaged 的資源釋出<xref href=&quot;System.Net.Http.HttpMessageHandler&quot;></xref>並選擇性處置 managed 資源。"
  remarks: "這個方法會呼叫公用`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> `Dispose()`叫用受保護`Dispose(Boolean)`方法`disposing`參數設定為`true`。 <xref:System.Object.Finalize%2A>叫用`Dispose`與`disposing`設`false`。當`disposing`參數是`true`，這個方法的任何 managed 物件所持有的資源全部釋出這個<xref:System.Net.Http.HttpMessageHandler>參考。</xref:System.Net.Http.HttpMessageHandler></xref:System.Object.Finalize%2A> 這個方法會叫用`Dispose()`每個參考物件的方法。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>表示釋放 managed 和 unmanaged 資源，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>表示只釋放 unmanaged 資源。"
  overload: System.Net.Http.HttpMessageHandler.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpMessageHandler
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "以非同步作業傳送 HTTP 要求。"
  remarks: "這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>物件會在讀取包括內容的整個回應之後完成。</xref:System.Threading.Tasks.Task%601>       SendAsync 方法主要供系統使用。 呼叫這個方法的其中一個系統<xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=fullName>方法呼叫。</xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=fullName> 大部分的應用程式永遠不會呼叫此方法。"
  syntax:
    content: protected abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "要傳送的 HTTP 要求訊息。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消語彙基元來取消作業。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "工作物件，表示非同步作業。"
  overload: System.Net.Http.HttpMessageHandler.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.Http.HttpMessageHandler.#ctor
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: HttpMessageHandler()
  nameWithType: HttpMessageHandler.HttpMessageHandler()
  fullName: System.Net.Http.HttpMessageHandler.HttpMessageHandler()
- uid: System.Net.Http.HttpMessageHandler.Dispose
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: Dispose()
  nameWithType: HttpMessageHandler.Dispose()
  fullName: System.Net.Http.HttpMessageHandler.Dispose()
- uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HttpMessageHandler.Dispose(Boolean)
  fullName: System.Net.Http.HttpMessageHandler.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Http.HttpResponseMessage>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.Http.HttpMessageHandler.#ctor*
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: HttpMessageHandler
  nameWithType: HttpMessageHandler.HttpMessageHandler
- uid: System.Net.Http.HttpMessageHandler.Dispose*
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: Dispose
  nameWithType: HttpMessageHandler.Dispose
- uid: System.Net.Http.HttpMessageHandler.SendAsync*
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: SendAsync
  nameWithType: HttpMessageHandler.SendAsync
