### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.LicFileLicenseProvider
  id: LicFileLicenseProvider
  children:
  - System.ComponentModel.LicFileLicenseProvider.#ctor
  - System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)
  - System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)
  - System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)
  langs:
  - csharp
  name: LicFileLicenseProvider
  nameWithType: LicFileLicenseProvider
  fullName: System.ComponentModel.LicFileLicenseProvider
  type: Class
  summary: "提供的實作<xref href=&quot;System.ComponentModel.LicenseProvider&quot;> </xref>。 以 Microsoft.NET Framework 的標準授權模型類似的方式，可提供者。"
  remarks: "提供 LicFileLicenseProvider<xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A>和<xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A>方法。</xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> </xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A>方法會判斷是否<xref:System.ComponentModel.License.LicenseKey%2A>擷取<xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A>方法都是有效。</xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> </xref:System.ComponentModel.License.LicenseKey%2A> </xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> 當您繼承自這個類別時，您可以覆寫<xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A>方法以提供您自己的驗證邏輯。</xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A>       這個類別會提供類似 COM 授權的授權功能存在，而且使用文字授權檔案。       如需有關授權的詳細資訊，請參閱[How to︰ 授權元件和控制項](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method. It uses LicFileLicenseProvider for the license manager.  \n  \n [!code-cs[Classic LicenseManager Example#1](~/add/codesnippet/csharp/t-system.componentmodel._155_1.cs)]\n [!code-vb[Classic LicenseManager Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._155_1.vb)]\n [!code-cpp[Classic LicenseManager Example#1](~/add/codesnippet/cpp/t-system.componentmodel._155_1.cpp)]"
  syntax:
    content: 'public class LicFileLicenseProvider : System.ComponentModel.LicenseProvider'
  inheritance:
  - System.Object
  - System.ComponentModel.LicenseProvider
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.LicFileLicenseProvider.#ctor
  id: '#ctor'
  parent: System.ComponentModel.LicFileLicenseProvider
  langs:
  - csharp
  name: LicFileLicenseProvider()
  nameWithType: LicFileLicenseProvider.LicFileLicenseProvider()
  fullName: System.ComponentModel.LicFileLicenseProvider.LicFileLicenseProvider()
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "初始化的新執行個體<xref href=&quot;System.ComponentModel.LicFileLicenseProvider&quot;></xref>類別。"
  syntax:
    content: public LicFileLicenseProvider ();
    parameters: []
  overload: System.ComponentModel.LicFileLicenseProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)
  id: GetKey(System.Type)
  parent: System.ComponentModel.LicFileLicenseProvider
  langs:
  - csharp
  name: GetKey(Type)
  nameWithType: LicFileLicenseProvider.GetKey(Type)
  fullName: System.ComponentModel.LicFileLicenseProvider.GetKey(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "傳回指定之類型的索引鍵。"
  syntax:
    content: protected virtual string GetKey (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "要傳回其索引鍵的物件類型。"
    return:
      type: System.String
      description: "確認訊息， <code> type </code>授權參數。"
  overload: System.ComponentModel.LicFileLicenseProvider.GetKey*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)
  id: GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)
  parent: System.ComponentModel.LicFileLicenseProvider
  langs:
  - csharp
  name: GetLicense(LicenseContext,Type,Object,Boolean)
  nameWithType: LicFileLicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)
  fullName: System.ComponentModel.LicFileLicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "如果有的話，則傳回的授權元件的執行個體。"
  remarks: "在設計階段 GetLicense 方法會尋找名為的授權檔案`myClassName.LIC`，其中`myClassName`是<xref:System.Type.FullName%2A>要建立的元件。</xref:System.Type.FullName%2A> 這個檔案必須是包含元件的.dll 檔案的相同目錄中。       接下來，這個方法會檢查授權檔案，針對在指定的機碼的第一行<xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A>方法。</xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> 如果金鑰是有效的這行做為<xref:System.ComponentModel.License.LicenseKey%2A>.</xref:System.ComponentModel.License.LicenseKey%2A>"
  syntax:
    content: public override System.ComponentModel.License GetLicense (System.ComponentModel.LicenseContext context, Type type, object instance, bool allowExceptions);
    parameters:
    - id: context
      type: System.ComponentModel.LicenseContext
      description: "A <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> ，指定您可以在其中使用授權的物件。"
    - id: type
      type: System.Type
      description: "A<xref:System.Type>表示元件要求<xref href=&quot;System.ComponentModel.License&quot;> </xref>。</xref:System.Type>"
    - id: instance
      type: System.Object
      description: "要求的物件<xref href=&quot;System.ComponentModel.License&quot;> </xref>。"
    - id: allowExceptions
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.ComponentModel.LicenseException&quot;></xref>應該擲回時不能對元件授與的授權; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.ComponentModel.License
      description: "A valid <xref href=&quot;System.ComponentModel.License&quot;></xref>. 如果此方法找不到有效<xref href=&quot;System.ComponentModel.License&quot;></xref>或有效<code> context </code>參數，它會傳回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.LicFileLicenseProvider.GetLicense*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)
  id: IsKeyValid(System.String,System.Type)
  parent: System.ComponentModel.LicFileLicenseProvider
  langs:
  - csharp
  name: IsKeyValid(String,Type)
  nameWithType: LicFileLicenseProvider.IsKeyValid(String,Type)
  fullName: System.ComponentModel.LicFileLicenseProvider.IsKeyValid(String,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "決定是否索引鍵，<xref:System.ComponentModel.LicFileLicenseProvider.GetLicense*>方法擷取是對指定的類型無效。</xref:System.ComponentModel.LicFileLicenseProvider.GetLicense*>"
  remarks: '這個方法會檢查片語的索引鍵:&quot; `myClassName is a licensed component.` &quot;，其中`myClassName`是<xref:System.Type.FullName%2A>您想要建立的元件。</xref:System.Type.FullName%2A>'
  syntax:
    content: protected virtual bool IsKeyValid (string key, Type type);
    parameters:
    - id: key
      type: System.String
      description: "<xref:System.ComponentModel.License.LicenseKey*>檢查。</xref:System.ComponentModel.License.LicenseKey*>"
    - id: type
      type: System.Type
      description: "A<xref:System.Type>表示元件要求<xref href=&quot;System.ComponentModel.License&quot;> </xref>。</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果金鑰是有效<xref:System.ComponentModel.License.LicenseKey*>指定的類型; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.ComponentModel.License.LicenseKey*>"
  overload: System.ComponentModel.LicFileLicenseProvider.IsKeyValid*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.LicenseProvider
  isExternal: false
  name: System.ComponentModel.LicenseProvider
- uid: System.ComponentModel.LicFileLicenseProvider.#ctor
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: LicFileLicenseProvider()
  nameWithType: LicFileLicenseProvider.LicFileLicenseProvider()
  fullName: System.ComponentModel.LicFileLicenseProvider.LicFileLicenseProvider()
- uid: System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: GetKey(Type)
  nameWithType: LicFileLicenseProvider.GetKey(Type)
  fullName: System.ComponentModel.LicFileLicenseProvider.GetKey(Type)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: GetLicense(LicenseContext,Type,Object,Boolean)
  nameWithType: LicFileLicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)
  fullName: System.ComponentModel.LicFileLicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)
- uid: System.ComponentModel.License
  parent: System.ComponentModel
  isExternal: false
  name: License
  nameWithType: License
  fullName: System.ComponentModel.License
- uid: System.ComponentModel.LicenseContext
  parent: System.ComponentModel
  isExternal: false
  name: LicenseContext
  nameWithType: LicenseContext
  fullName: System.ComponentModel.LicenseContext
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: IsKeyValid(String,Type)
  nameWithType: LicFileLicenseProvider.IsKeyValid(String,Type)
  fullName: System.ComponentModel.LicFileLicenseProvider.IsKeyValid(String,Type)
- uid: System.ComponentModel.LicFileLicenseProvider.#ctor*
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: LicFileLicenseProvider
  nameWithType: LicFileLicenseProvider.LicFileLicenseProvider
- uid: System.ComponentModel.LicFileLicenseProvider.GetKey*
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: GetKey
  nameWithType: LicFileLicenseProvider.GetKey
- uid: System.ComponentModel.LicFileLicenseProvider.GetLicense*
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: GetLicense
  nameWithType: LicFileLicenseProvider.GetLicense
- uid: System.ComponentModel.LicFileLicenseProvider.IsKeyValid*
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: IsKeyValid
  nameWithType: LicFileLicenseProvider.IsKeyValid
