### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Activation.WebServiceHostFactory
  id: WebServiceHostFactory
  children:
  - System.ServiceModel.Activation.WebServiceHostFactory.#ctor
  - System.ServiceModel.Activation.WebServiceHostFactory.CreateServiceHost(System.Type,System.Uri[])
  langs:
  - csharp
  name: WebServiceHostFactory
  nameWithType: WebServiceHostFactory
  fullName: System.ServiceModel.Activation.WebServiceHostFactory
  type: Class
  summary: "提供的執行個體的 factory <xref href=&quot;System.ServiceModel.Web.WebServiceHost&quot;> </xref>在 managed 裝載的環境主控件執行個體以回應傳入訊息中會動態建立位置。"
  remarks: "支援動態啟動的 managed 裝載環境為網際網路資訊服務 (IIS) 和 Windows Process Activation Service (WAS)。       如果您已實作的自訂衍生<xref:System.ServiceModel.Web.WebServiceHost>，請考慮一併實作衍生自 WebServiceHostFactory 類別。</xref:System.ServiceModel.Web.WebServiceHost>"
  example:
  - "The following example shows how to derive a class from WebServiceHostFactory.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n To have your derived Web service host factory used, specify it in a .SVC file. The following example shows the syntax used in a .svc file.  \n  \n```  \n<%@ServiceHost language=c# Service=\"Microsoft.Samples.MyWCFService\" Factory=\"Microsoft.Samples.MyWebServiceHostFactory\" %>  \n```"
  syntax:
    content: 'public class WebServiceHostFactory : System.ServiceModel.Activation.ServiceHostFactory'
  inheritance:
  - System.ServiceModel.Activation.ServiceHostFactory
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Activation.WebServiceHostFactory.#ctor
  id: '#ctor'
  parent: System.ServiceModel.Activation.WebServiceHostFactory
  langs:
  - csharp
  name: WebServiceHostFactory()
  nameWithType: WebServiceHostFactory.WebServiceHostFactory()
  fullName: System.ServiceModel.Activation.WebServiceHostFactory.WebServiceHostFactory()
  type: Constructor
  assemblies:
  - System.ServiceModel.Web
  namespace: System.ServiceModel.Activation
  summary: "初始化的新執行個體<xref href=&quot;System.ServiceModel.Activation.WebServiceHostFactory&quot;></xref>類別。"
  remarks: "不會直接呼叫這個方法。 當動態啟動服務時，被呼叫它。"
  syntax:
    content: public WebServiceHostFactory ();
    parameters: []
  overload: System.ServiceModel.Activation.WebServiceHostFactory.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Activation.WebServiceHostFactory.CreateServiceHost(System.Type,System.Uri[])
  id: CreateServiceHost(System.Type,System.Uri[])
  parent: System.ServiceModel.Activation.WebServiceHostFactory
  langs:
  - csharp
  name: CreateServiceHost(Type,Uri[])
  nameWithType: WebServiceHostFactory.CreateServiceHost(Type,Uri[])
  fullName: System.ServiceModel.Activation.WebServiceHostFactory.CreateServiceHost(Type,Uri[])
  type: Method
  assemblies:
  - System.ServiceModel.Web
  namespace: System.ServiceModel.Activation
  summary: "建立指定的執行個體<xref href=&quot;System.ServiceModel.Web.WebServiceHost&quot;></xref>衍生的類別，以指定的基底位址。"
  remarks: "覆寫此方法以建立所需的服務主機類型，並執行任何所需的處理。"
  example:
  - "The following example shows a basic implementation of this method.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected override System.ServiceModel.ServiceHost CreateServiceHost (Type serviceType, Uri[] baseAddresses);
    parameters:
    - id: serviceType
      type: System.Type
      description: "若要建立服務主機類型。"
    - id: baseAddresses
      type: System.Uri[]
      description: "服務的基底位址陣列。"
    return:
      type: System.ServiceModel.ServiceHost
      description: "執行個體<xref href=&quot;System.ServiceModel.ServiceHost&quot;></xref>衍生的類別。"
  overload: System.ServiceModel.Activation.WebServiceHostFactory.CreateServiceHost*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Activation.ServiceHostFactory
  isExternal: false
  name: System.ServiceModel.Activation.ServiceHostFactory
- uid: System.ServiceModel.Activation.WebServiceHostFactory.#ctor
  parent: System.ServiceModel.Activation.WebServiceHostFactory
  isExternal: false
  name: WebServiceHostFactory()
  nameWithType: WebServiceHostFactory.WebServiceHostFactory()
  fullName: System.ServiceModel.Activation.WebServiceHostFactory.WebServiceHostFactory()
- uid: System.ServiceModel.Activation.WebServiceHostFactory.CreateServiceHost(System.Type,System.Uri[])
  parent: System.ServiceModel.Activation.WebServiceHostFactory
  isExternal: false
  name: CreateServiceHost(Type,Uri[])
  nameWithType: WebServiceHostFactory.CreateServiceHost(Type,Uri[])
  fullName: System.ServiceModel.Activation.WebServiceHostFactory.CreateServiceHost(Type,Uri[])
- uid: System.ServiceModel.ServiceHost
  parent: System.ServiceModel
  isExternal: false
  name: ServiceHost
  nameWithType: ServiceHost
  fullName: System.ServiceModel.ServiceHost
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Uri[]
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri[]
  spec.csharp:
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceModel.Activation.WebServiceHostFactory.#ctor*
  parent: System.ServiceModel.Activation.WebServiceHostFactory
  isExternal: false
  name: WebServiceHostFactory
  nameWithType: WebServiceHostFactory.WebServiceHostFactory
- uid: System.ServiceModel.Activation.WebServiceHostFactory.CreateServiceHost*
  parent: System.ServiceModel.Activation.WebServiceHostFactory
  isExternal: false
  name: CreateServiceHost
  nameWithType: WebServiceHostFactory.CreateServiceHost
