### YamlMime:ManagedReference
items:
- uid: System.Net.WebSockets.WebSocket
  id: WebSocket
  children:
  - System.Net.WebSockets.WebSocket.#ctor
  - System.Net.WebSockets.WebSocket.Abort
  - System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.CloseStatus
  - System.Net.WebSockets.WebSocket.CloseStatusDescription
  - System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)
  - System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})
  - System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)
  - System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
  - System.Net.WebSockets.WebSocket.Dispose
  - System.Net.WebSockets.WebSocket.IsApplicationTargeting45
  - System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)
  - System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.RegisterPrefixes
  - System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.State
  - System.Net.WebSockets.WebSocket.SubProtocol
  - System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])
  langs:
  - csharp
  name: WebSocket
  nameWithType: WebSocket
  fullName: System.Net.WebSockets.WebSocket
  type: Class
  summary: "WebSocket 類別允許應用程式傳送和接收資料，WebSocket 升級完成之後。"
  remarks: "部分類別中<xref:System.Net.WebSockets>命名空間所支援 Windows 7、 Windows Vista SP2 和 Windows Server 2008。</xref:System.Net.WebSockets> 不過，在 Windows 8 和 Windows Server 2012 上支援的用戶端和伺服器 WebSockets 的只有公用實作。 類別和類別中的項目<xref:System.Net.WebSockets>Windows 7、 Windows Vista SP2 和 Windows Server 2008 支援的命名空間是抽象類別。</xref:System.Net.WebSockets> 這可讓應用程式開發人員，以繼承並擴充用戶端 WebSockets 的實際實作這些抽象類別。"
  syntax:
    content: 'public abstract class WebSocket : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.#ctor
  id: '#ctor'
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: WebSocket()
  nameWithType: WebSocket.WebSocket()
  fullName: System.Net.WebSockets.WebSocket.WebSocket()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "建立的執行個體<xref href=&quot;System.Net.WebSockets.WebSocket&quot;></xref>類別。"
  syntax:
    content: protected WebSocket ();
    parameters: []
  overload: System.Net.WebSockets.WebSocket.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.Abort
  id: Abort
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: Abort()
  nameWithType: WebSocket.Abort()
  fullName: System.Net.WebSockets.WebSocket.Abort()
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "中止 WebSocket 連接並取消任何暫止的 IO 作業。"
  syntax:
    content: public abstract void Abort ();
    parameters: []
  overload: System.Net.WebSockets.WebSocket.Abort*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: WebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "關閉 WebSocket 連接，以非同步作業使用中定義的關閉交握[WebSocket 通訊協定規格](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06)第 7 節。"
  remarks: "這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task>WebSocket 關閉之後，物件會完成。</xref:System.Threading.Tasks.Task>       這個方法會關閉 WebSocket 連接使用中定義的關閉交握[WebSocket 通訊協定規格](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06)第 7 節。"
  syntax:
    content: public abstract System.Threading.Tasks.Task CloseAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: "表示關閉 WebSocket 連線的原因。"
    - id: statusDescription
      type: System.String
      description: "指定有關為何關閉連線的人類可讀取的說明。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "語彙基元可以用來傳播應該取消作業的通知。"
    return:
      type: System.Threading.Tasks.Task
      description: "傳回<xref:System.Threading.Tasks.Task>.</xref:System.Threading.Tasks.Task>       工作物件，表示非同步作業。"
  overload: System.Net.WebSockets.WebSocket.CloseAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: WebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "啟動或完成中定義的關閉交握[WebSocket 通訊協定規格第 7 節](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06)。"
  remarks: "這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task>關閉 WebSocket 上的輸出之後，物件會完成。</xref:System.Threading.Tasks.Task>"
  syntax:
    content: public abstract System.Threading.Tasks.Task CloseOutputAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: "表示關閉 WebSocket 連線的原因。"
    - id: statusDescription
      type: System.String
      description: "可讓應用程式指定人類的說明，解釋為何關閉連線並。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "語彙基元可以用來傳播應該取消作業的通知。"
    return:
      type: System.Threading.Tasks.Task
      description: "傳回<xref:System.Threading.Tasks.Task>.</xref:System.Threading.Tasks.Task>       工作物件，表示非同步作業。"
  overload: System.Net.WebSockets.WebSocket.CloseOutputAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CloseStatus
  id: CloseStatus
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CloseStatus
  nameWithType: WebSocket.CloseStatus
  fullName: System.Net.WebSockets.WebSocket.CloseStatus
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "表示遠端端點起始關閉訊號交換的原因。"
  remarks: "如果未起始關閉訊號交換，則會傳回 WebSocketCloseStatus.None。"
  syntax:
    content: public abstract Nullable<System.Net.WebSockets.WebSocketCloseStatus> CloseStatus { get; }
    return:
      type: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
      description: "Returns <xref href=&quot;System.Net.WebSockets.WebSocketCloseStatus&quot;></xref>."
  overload: System.Net.WebSockets.WebSocket.CloseStatus*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CloseStatusDescription
  id: CloseStatusDescription
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CloseStatusDescription
  nameWithType: WebSocket.CloseStatusDescription
  fullName: System.Net.WebSockets.WebSocket.CloseStatusDescription
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "可讓遠端端點將描述為何此連接已經關閉的原因。"
  syntax:
    content: public abstract string CloseStatusDescription { get; }
    return:
      type: System.String
      description: "傳回<xref:System.String>.</xref:System.String>"
  overload: System.Net.WebSockets.WebSocket.CloseStatusDescription*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)
  id: CreateClientBuffer(System.Int32,System.Int32)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CreateClientBuffer(Int32,Int32)
  nameWithType: WebSocket.CreateClientBuffer(Int32,Int32)
  fullName: System.Net.WebSockets.WebSocket.CreateClientBuffer(Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "建立用戶端緩衝區，以使用與此<xref href=&quot;System.Net.WebSockets.WebSocket&quot;></xref>執行個體。"
  syntax:
    content: public static ArraySegment<byte> CreateClientBuffer (int receiveBufferSize, int sendBufferSize);
    parameters:
    - id: receiveBufferSize
      type: System.Int32
      description: "大小，以位元組為單位的用戶端接收緩衝區。"
    - id: sendBufferSize
      type: System.Int32
      description: "以位元組為單位傳送緩衝區大小。"
    return:
      type: System.ArraySegment{System.Byte}
      description: "傳回&lt;xref:System.ArraySegment%601&gt;。       包含用戶端緩衝區的陣列。"
  overload: System.Net.WebSockets.WebSocket.CreateClientBuffer*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})
  id: CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
  nameWithType: WebSocket.CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
  fullName: System.Net.WebSockets.WebSocket.CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "這個 API 支援.NET Framework 基礎結構，並不是直接從您的程式碼使用。       可讓呼叫端若要建立用戶端端 WebSocket 類別以使用 WSPC 框架的用途。"
  syntax:
    content: public static System.Net.WebSockets.WebSocket CreateClientWebSocket (System.IO.Stream innerStream, string subProtocol, int receiveBufferSize, int sendBufferSize, TimeSpan keepAliveInterval, bool useZeroMaskingKey, ArraySegment<byte> internalBuffer);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "要用於 IO 作業的連接。"
    - id: subProtocol
      type: System.String
      description: "用戶端接受子通訊協定。"
    - id: receiveBufferSize
      type: System.Int32
      description: "大小 （位元組） 的用戶端 WebSocket 的接收緩衝區。"
    - id: sendBufferSize
      type: System.Int32
      description: "大小 （位元組） 的用戶端 WebSocket 傳送緩衝區。"
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "決定如何定期傳送框架透過與保持連線。 適用於只連接處於閒置狀態時。"
    - id: useZeroMaskingKey
      type: System.Boolean
      description: "指出是否隨機金鑰或靜態的索引鍵 （就是零） 應該用於 WebSocket 遮罩。"
    - id: internalBuffer
      type: System.ArraySegment{System.Byte}
      description: "將用作 WPC 的內部緩衝區。 大小必須至少為`2 * ReceiveBufferSize + SendBufferSize + 256 + 20 (16 on 32-bit)`。"
    return:
      type: System.Net.WebSockets.WebSocket
      description: "Returns <xref href=&quot;System.Net.WebSockets.WebSocket&quot;></xref>."
  overload: System.Net.WebSockets.WebSocket.CreateClientWebSocket*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)
  id: CreateServerBuffer(System.Int32)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: CreateServerBuffer(Int32)
  nameWithType: WebSocket.CreateServerBuffer(Int32)
  fullName: System.Net.WebSockets.WebSocket.CreateServerBuffer(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "建立 WebSocket 伺服器緩衝區。"
  syntax:
    content: public static ArraySegment<byte> CreateServerBuffer (int receiveBufferSize);
    parameters:
    - id: receiveBufferSize
      type: System.Int32
      description: "以位元組為單位所需的緩衝區大小。"
    return:
      type: System.ArraySegment{System.Byte}
      description: "傳回&lt;xref:System.ArraySegment%601&gt;。"
  overload: System.Net.WebSockets.WebSocket.CreateServerBuffer*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
  id: DefaultKeepAliveInterval
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: DefaultKeepAliveInterval
  nameWithType: WebSocket.DefaultKeepAliveInterval
  fullName: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "取得預設 WebSocket 通訊協定保持連接間隔 （毫秒）。"
  syntax:
    content: public static TimeSpan DefaultKeepAliveInterval { get; }
    return:
      type: System.TimeSpan
      description: "傳回<xref:System.TimeSpan>.</xref:System.TimeSpan>       預設 WebSocket 通訊協定保持連接間隔 （毫秒）。 在此時間間隔的一般值為 30 秒。"
  overload: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.Dispose
  id: Dispose
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: Dispose()
  nameWithType: WebSocket.Dispose()
  fullName: System.Net.WebSockets.WebSocket.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "用來清除 unmanaged 資源，適用於 ASP.NET 和自我裝載的實作。"
  syntax:
    content: public abstract void Dispose ();
    parameters: []
  overload: System.Net.WebSockets.WebSocket.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.IsApplicationTargeting45
  id: IsApplicationTargeting45
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: IsApplicationTargeting45()
  nameWithType: WebSocket.IsApplicationTargeting45()
  fullName: System.Net.WebSockets.WebSocket.IsApplicationTargeting45()
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "傳回值，指出是否 WebSocket 執行個體的目標[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]。"
  syntax:
    content: public static bool IsApplicationTargeting45 ();
    parameters: []
    return:
      type: System.Boolean
      description: "傳回<xref:System.Boolean>.</xref:System.Boolean>       <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Net.WebSockets.WebSocket&quot;></xref>的目標[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]，否則為<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.WebSockets.WebSocket.IsApplicationTargeting45*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)
  id: IsStateTerminal(System.Net.WebSockets.WebSocketState)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: IsStateTerminal(WebSocketState)
  nameWithType: WebSocket.IsStateTerminal(WebSocketState)
  fullName: System.Net.WebSockets.WebSocket.IsStateTerminal(WebSocketState)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "傳回值，指出 WebSocket 執行個體的狀態已關閉或中止。"
  syntax:
    content: protected static bool IsStateTerminal (System.Net.WebSockets.WebSocketState state);
    parameters:
    - id: state
      type: System.Net.WebSockets.WebSocketState
      description: "目前的 WebSocket 狀態。"
    return:
      type: System.Boolean
      description: "傳回<xref:System.Boolean>.</xref:System.Boolean>       <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Net.WebSockets.WebSocket&quot;></xref>已關閉或已中止，否則為<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.WebSockets.WebSocket.IsStateTerminal*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  id: ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  nameWithType: WebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "接收資料，從<xref href=&quot;System.Net.WebSockets.WebSocket&quot;></xref>連線以非同步的方式。"
  remarks: "這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>物件會完成之後於<xref:System.Net.WebSockets.WebSocket>。</xref:System.Net.WebSockets.WebSocket>已接收資料</xref:System.Threading.Tasks.Task%601>的       只有一個傳送，另一個接收的每個支援<xref:System.Net.WebSockets.WebSocket>物件以平行方式。</xref:System.Net.WebSockets.WebSocket>"
  syntax:
    content: public abstract System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult> ReceiveAsync (ArraySegment<byte> buffer, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "參考是已接收資料的儲存體位置的應用程式緩衝區。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "傳播應該取消作業的通知。"
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
      description: "傳回&lt;xref:System.Threading.Tasks.Task%601&gt;。       工作物件，表示非同步作業。 &lt;Xref:System.Threading.Tasks.Task%601.Result%2A&gt;工作物件上的屬性會傳回<xref:System.Byte>陣列，其中包含已接收的資料。</xref:System.Byte>"
  overload: System.Net.WebSockets.WebSocket.ReceiveAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.RegisterPrefixes
  id: RegisterPrefixes
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: RegisterPrefixes()
  nameWithType: WebSocket.RegisterPrefixes()
  fullName: System.Net.WebSockets.WebSocket.RegisterPrefixes()
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "這個 API 支援.NET Framework 基礎結構，並不是直接從您的程式碼使用。 可讓呼叫端若要註冊 WebSocket 要求 （ws 和 wss） 的前置詞。"
  syntax:
    content: public static void RegisterPrefixes ();
    parameters: []
  overload: System.Net.WebSockets.WebSocket.RegisterPrefixes*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  id: SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  nameWithType: WebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "透過傳送資料<xref href=&quot;System.Net.WebSockets.WebSocket&quot;></xref>連線以非同步的方式。"
  remarks: "這項作業不會封鎖。 <xref:System.Threading.Tasks.Task>物件會完成<xref:System.Net.WebSockets.WebSocket>。</xref:System.Net.WebSockets.WebSocket>傳送資料之後</xref:System.Threading.Tasks.Task>傳回       只有一個傳送，另一個接收的每個支援<xref:System.Net.WebSockets.WebSocket>物件以平行方式。</xref:System.Net.WebSockets.WebSocket>"
  syntax:
    content: public abstract System.Threading.Tasks.Task SendAsync (ArraySegment<byte> buffer, System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "要透過連線傳送的緩衝區。"
    - id: messageType
      type: System.Net.WebSockets.WebSocketMessageType
      description: "表示應用程式是否正在傳送二進位或文字訊息。"
    - id: endOfMessage
      type: System.Boolean
      description: "指出 「 緩衝區 」 中的資料是否訊息的最後一部分。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "傳播應該取消作業的通知的語彙基元。"
    return:
      type: System.Threading.Tasks.Task
      description: "工作物件，表示非同步作業。"
  overload: System.Net.WebSockets.WebSocket.SendAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.State
  id: State
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: State
  nameWithType: WebSocket.State
  fullName: System.Net.WebSockets.WebSocket.State
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "傳回 WebSocket 連線的目前狀態。"
  syntax:
    content: public abstract System.Net.WebSockets.WebSocketState State { get; }
    return:
      type: System.Net.WebSockets.WebSocketState
      description: "Returns <xref href=&quot;System.Net.WebSockets.WebSocketState&quot;></xref>."
  overload: System.Net.WebSockets.WebSocket.State*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.SubProtocol
  id: SubProtocol
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: SubProtocol
  nameWithType: WebSocket.SubProtocol
  fullName: System.Net.WebSockets.WebSocket.SubProtocol
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "在開始信號交換期間交涉的子通訊協定。"
  syntax:
    content: public abstract string SubProtocol { get; }
    return:
      type: System.String
      description: "傳回<xref:System.String>.</xref:System.String>"
  overload: System.Net.WebSockets.WebSocket.SubProtocol*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])
  id: ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  name: ThrowOnInvalidState(WebSocketState,WebSocketState[])
  nameWithType: WebSocket.ThrowOnInvalidState(WebSocketState,WebSocketState[])
  fullName: System.Net.WebSockets.WebSocket.ThrowOnInvalidState(WebSocketState,WebSocketState[])
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "確認連接處於未預期的狀態。"
  syntax:
    content: protected static void ThrowOnInvalidState (System.Net.WebSockets.WebSocketState state, System.Net.WebSockets.WebSocketState[] validStates);
    parameters:
    - id: state
      type: System.Net.WebSockets.WebSocketState
      description: "目前的有效狀態清單進行比對要測試的 WebSocket 狀態。"
    - id: validStates
      type: System.Net.WebSockets.WebSocketState[]
      description: "有效的連接狀態的清單。"
  overload: System.Net.WebSockets.WebSocket.ThrowOnInvalidState*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Net.WebSockets.WebSocket.#ctor
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: WebSocket()
  nameWithType: WebSocket.WebSocket()
  fullName: System.Net.WebSockets.WebSocket.WebSocket()
- uid: System.Net.WebSockets.WebSocket.Abort
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: Abort()
  nameWithType: WebSocket.Abort()
  fullName: System.Net.WebSockets.WebSocket.Abort()
- uid: System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: WebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.WebSockets.WebSocketCloseStatus
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketCloseStatus
  nameWithType: WebSocketCloseStatus
  fullName: System.Net.WebSockets.WebSocketCloseStatus
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: WebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
- uid: System.Net.WebSockets.WebSocket.CloseStatus
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseStatus
  nameWithType: WebSocket.CloseStatus
  fullName: System.Net.WebSockets.WebSocket.CloseStatus
- uid: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
  parent: System
  isExternal: true
  name: Nullable<WebSocketCloseStatus>
  nameWithType: Nullable<WebSocketCloseStatus>
  fullName: System.Nullable<System.Net.WebSockets.WebSocketCloseStatus>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Net.WebSockets.WebSocketCloseStatus>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketCloseStatus
    name: WebSocketCloseStatus
    nameWithType: WebSocketCloseStatus
    fullName: WebSocketCloseStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.WebSockets.WebSocket.CloseStatusDescription
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseStatusDescription
  nameWithType: WebSocket.CloseStatusDescription
  fullName: System.Net.WebSockets.WebSocket.CloseStatusDescription
- uid: System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateClientBuffer(Int32,Int32)
  nameWithType: WebSocket.CreateClientBuffer(Int32,Int32)
  fullName: System.Net.WebSockets.WebSocket.CreateClientBuffer(Int32,Int32)
- uid: System.ArraySegment{System.Byte}
  parent: System
  isExternal: true
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
  nameWithType: WebSocket.CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
  fullName: System.Net.WebSockets.WebSocket.CreateClientWebSocket(Stream,String,Int32,Int32,TimeSpan,Boolean,ArraySegment<Byte>)
- uid: System.Net.WebSockets.WebSocket
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocket
  nameWithType: WebSocket
  fullName: System.Net.WebSockets.WebSocket
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateServerBuffer(Int32)
  nameWithType: WebSocket.CreateServerBuffer(Int32)
  fullName: System.Net.WebSockets.WebSocket.CreateServerBuffer(Int32)
- uid: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: DefaultKeepAliveInterval
  nameWithType: WebSocket.DefaultKeepAliveInterval
  fullName: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
- uid: System.Net.WebSockets.WebSocket.Dispose
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: Dispose()
  nameWithType: WebSocket.Dispose()
  fullName: System.Net.WebSockets.WebSocket.Dispose()
- uid: System.Net.WebSockets.WebSocket.IsApplicationTargeting45
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: IsApplicationTargeting45()
  nameWithType: WebSocket.IsApplicationTargeting45()
  fullName: System.Net.WebSockets.WebSocket.IsApplicationTargeting45()
- uid: System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: IsStateTerminal(WebSocketState)
  nameWithType: WebSocket.IsStateTerminal(WebSocketState)
  fullName: System.Net.WebSockets.WebSocket.IsStateTerminal(WebSocketState)
- uid: System.Net.WebSockets.WebSocketState
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketState
  nameWithType: WebSocketState
  fullName: System.Net.WebSockets.WebSocketState
- uid: System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  nameWithType: WebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<WebSocketReceiveResult>
  nameWithType: Task<WebSocketReceiveResult>
  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.WebSockets.WebSocketReceiveResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketReceiveResult
    name: WebSocketReceiveResult
    nameWithType: WebSocketReceiveResult
    fullName: WebSocketReceiveResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.WebSockets.WebSocket.RegisterPrefixes
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: RegisterPrefixes()
  nameWithType: WebSocket.RegisterPrefixes()
  fullName: System.Net.WebSockets.WebSocket.RegisterPrefixes()
- uid: System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  nameWithType: WebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
- uid: System.Net.WebSockets.WebSocketMessageType
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketMessageType
  nameWithType: WebSocketMessageType
  fullName: System.Net.WebSockets.WebSocketMessageType
- uid: System.Net.WebSockets.WebSocket.State
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: State
  nameWithType: WebSocket.State
  fullName: System.Net.WebSockets.WebSocket.State
- uid: System.Net.WebSockets.WebSocket.SubProtocol
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: SubProtocol
  nameWithType: WebSocket.SubProtocol
  fullName: System.Net.WebSockets.WebSocket.SubProtocol
- uid: System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: ThrowOnInvalidState(WebSocketState,WebSocketState[])
  nameWithType: WebSocket.ThrowOnInvalidState(WebSocketState,WebSocketState[])
  fullName: System.Net.WebSockets.WebSocket.ThrowOnInvalidState(WebSocketState,WebSocketState[])
- uid: System.Net.WebSockets.WebSocketState[]
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketState
  nameWithType: WebSocketState
  fullName: System.Net.WebSockets.WebSocketState[]
  spec.csharp:
  - uid: System.Net.WebSockets.WebSocketState
    name: WebSocketState
    nameWithType: WebSocketState
    fullName: WebSocketState[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.WebSockets.WebSocket.#ctor*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: WebSocket
  nameWithType: WebSocket.WebSocket
- uid: System.Net.WebSockets.WebSocket.Abort*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: Abort
  nameWithType: WebSocket.Abort
- uid: System.Net.WebSockets.WebSocket.CloseAsync*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseAsync
  nameWithType: WebSocket.CloseAsync
- uid: System.Net.WebSockets.WebSocket.CloseOutputAsync*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseOutputAsync
  nameWithType: WebSocket.CloseOutputAsync
- uid: System.Net.WebSockets.WebSocket.CloseStatus*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseStatus
  nameWithType: WebSocket.CloseStatus
- uid: System.Net.WebSockets.WebSocket.CloseStatusDescription*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CloseStatusDescription
  nameWithType: WebSocket.CloseStatusDescription
- uid: System.Net.WebSockets.WebSocket.CreateClientBuffer*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateClientBuffer
  nameWithType: WebSocket.CreateClientBuffer
- uid: System.Net.WebSockets.WebSocket.CreateClientWebSocket*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateClientWebSocket
  nameWithType: WebSocket.CreateClientWebSocket
- uid: System.Net.WebSockets.WebSocket.CreateServerBuffer*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: CreateServerBuffer
  nameWithType: WebSocket.CreateServerBuffer
- uid: System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: DefaultKeepAliveInterval
  nameWithType: WebSocket.DefaultKeepAliveInterval
- uid: System.Net.WebSockets.WebSocket.Dispose*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: Dispose
  nameWithType: WebSocket.Dispose
- uid: System.Net.WebSockets.WebSocket.IsApplicationTargeting45*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: IsApplicationTargeting45
  nameWithType: WebSocket.IsApplicationTargeting45
- uid: System.Net.WebSockets.WebSocket.IsStateTerminal*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: IsStateTerminal
  nameWithType: WebSocket.IsStateTerminal
- uid: System.Net.WebSockets.WebSocket.ReceiveAsync*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: ReceiveAsync
  nameWithType: WebSocket.ReceiveAsync
- uid: System.Net.WebSockets.WebSocket.RegisterPrefixes*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: RegisterPrefixes
  nameWithType: WebSocket.RegisterPrefixes
- uid: System.Net.WebSockets.WebSocket.SendAsync*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: SendAsync
  nameWithType: WebSocket.SendAsync
- uid: System.Net.WebSockets.WebSocket.State*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: State
  nameWithType: WebSocket.State
- uid: System.Net.WebSockets.WebSocket.SubProtocol*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: SubProtocol
  nameWithType: WebSocket.SubProtocol
- uid: System.Net.WebSockets.WebSocket.ThrowOnInvalidState*
  parent: System.Net.WebSockets.WebSocket
  isExternal: false
  name: ThrowOnInvalidState
  nameWithType: WebSocket.ThrowOnInvalidState
