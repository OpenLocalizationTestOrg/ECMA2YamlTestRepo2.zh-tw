### YamlMime:ManagedReference
items:
- uid: System.Data.OleDb.OleDbDataAdapter
  id: OleDbDataAdapter
  children:
  - System.Data.OleDb.OleDbDataAdapter.#ctor
  - System.Data.OleDb.OleDbDataAdapter.#ctor(System.Data.OleDb.OleDbCommand)
  - System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.Data.OleDb.OleDbConnection)
  - System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.String)
  - System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.OleDb.OleDbDataAdapter.DeleteCommand
  - System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)
  - System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataSet,System.Object,System.String)
  - System.Data.OleDb.OleDbDataAdapter.InsertCommand
  - System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  - System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  - System.Data.OleDb.OleDbDataAdapter.RowUpdated
  - System.Data.OleDb.OleDbDataAdapter.RowUpdating
  - System.Data.OleDb.OleDbDataAdapter.SelectCommand
  - System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  - System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  - System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  - System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  - System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone
  - System.Data.OleDb.OleDbDataAdapter.UpdateCommand
  langs:
  - csharp
  name: OleDbDataAdapter
  nameWithType: OleDbDataAdapter
  fullName: System.Data.OleDb.OleDbDataAdapter
  type: Class
  summary: "代表一組資料命令和資料庫連接，用來填滿<xref href=&quot;System.Data.DataSet&quot;></xref>並更新資料來源。"
  remarks: "OleDbDataAdapter 當做之間的橋樑<xref:System.Data.DataSet>以及擷取和儲存資料的資料來源。</xref:System.Data.DataSet> OleDbDataAdapter 提供使用這個橋接器<xref:System.Data.Common.DbDataAdapter.Fill%2A>將資料載入到資料來源<xref:System.Data.DataSet>，並使用<xref:System.Data.Common.DbDataAdapter.Update%2A>傳送中所做的變更<xref:System.Data.DataSet>回資料來源。</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       當填滿 OleDbDataAdapter <xref:System.Data.DataSet>，它尚未存在，如果會建立適當的資料表和資料行所傳回資料。</xref:System.Data.DataSet> 不過，主索引鍵資訊不包含隱含建立的結構描述中除非<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>屬性設定為<xref:System.Data.MissingSchemaAction>.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> 您也可以建立結構描述<xref:System.Data.DataSet>，包括主索引鍵資訊，填滿其使用<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>資料與之前</xref:System.Data.DataSet>的 OleDbDataAdapter 如需詳細資訊，請參閱[將現有條件約束加入至資料集](~/add/includes/ajax-current-ext-md.md)。       請注意，有些 OLE DB 提供者，包括 MSDataShape 提供者不會傳回基底資料表或主索引鍵資訊。 因此，OleDbDataAdapter 無法正確地設定<xref:System.Data.DataTable.PrimaryKey%2A>於任何建立的<xref:System.Data.DataTable>。</xref:System.Data.DataTable>屬性</xref:System.Data.DataTable.PrimaryKey%2A> 在這些情況下您應該明確指定<xref:System.Data.DataSet>.</xref:System.Data.DataSet>中資料表的主索引鍵       OleDbDataAdapter 也包含<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>， <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A>， <xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A>， <xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A>，和<xref:System.Data.Common.DataAdapter.TableMappings%2A>屬性，以加速載入和更新的資料。</xref:System.Data.Common.DataAdapter.TableMappings%2A> </xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A> </xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A> </xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> </xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>       當您建立的 OleDbDataAdapter 執行個體時，屬性會設定為其初始值。 如需這些值的清單，請參閱 OleDbDataAdapter 建構函式。"
  example:
  - "The following example uses the <xref:System.Data.OleDb.OleDbCommand>, OleDbDataAdapter and <xref:System.Data.OleDb.OleDbConnection>, to select records from an Access data source, and populate a <xref:System.Data.DataSet> with the selected rows. The filled <xref:System.Data.DataSet> is then returned. To accomplish this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is an SQL SELECT statement.  \n  \n [!code-vb[Classic WebData OleDbDataAdapter Example#1](~/add/codesnippet/visualbasic/t-system.data.oledb.oled_7_1.vb)]\n [!code-cs[Classic WebData OleDbDataAdapter Example#1](~/add/codesnippet/csharp/t-system.data.oledb.oled_7_1.cs)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("RowUpdated")]

      [System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.OleDbDataAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.OleDbDataAdapterToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      public sealed class OleDbDataAdapter : System.Data.Common.DbDataAdapter, ICloneable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DataAdapter
  - System.Data.Common.DbDataAdapter
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DataAdapter.AcceptChangesDuringFill
  - System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  - System.Data.Common.DataAdapter.CloneInternals
  - System.Data.Common.DataAdapter.ContinueUpdateOnError
  - System.Data.Common.DataAdapter.CreateTableMappings
  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.FillError
  - System.Data.Common.DataAdapter.FillLoadOption
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.HasTableMappings
  - System.Data.Common.DataAdapter.MissingMappingAction
  - System.Data.Common.DataAdapter.MissingSchemaAction
  - System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)
  - System.Data.Common.DataAdapter.ResetFillLoadOption
  - System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  - System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
  - System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
  - System.Data.Common.DataAdapter.ShouldSerializeTableMappings
  - System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings
  - System.Data.Common.DataAdapter.TableMappings
  - System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  - System.Data.Common.DbDataAdapter.ClearBatch
  - System.Data.Common.DbDataAdapter.DefaultSourceTableName
  - System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  - System.Data.Common.DbDataAdapter.ExecuteBatch
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  - System.Data.Common.DbDataAdapter.FillCommandBehavior
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  - System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  - System.Data.Common.DbDataAdapter.GetFillParameters
  - System.Data.Common.DbDataAdapter.InitializeBatching
  - System.Data.Common.DbDataAdapter.TerminateBatching
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.UpdateBatchSize
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor
  id: '#ctor'
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OleDbDataAdapter()
  nameWithType: OleDbDataAdapter.OleDbDataAdapter()
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "初始化的新執行個體<xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;></xref>類別。"
  remarks: "當您建立的執行個體<xref:System.Data.OleDb.OleDbDataAdapter>，下列的讀取/寫入屬性設定為下列的初始值。</xref:System.Data.OleDb.OleDbDataAdapter>      |屬性 |初始值 |  |----------------|-------------------|  |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|      您可以變更任何這些屬性，透過呼叫另一個屬性的值。</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_28_1.vb)]\n [!code-cs[Classic WebData OleDbDataAdapter.OleDbDataAdapter Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_28_1.cs)]"
  syntax:
    content: public OleDbDataAdapter ();
    parameters: []
  overload: System.Data.OleDb.OleDbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.Data.OleDb.OleDbCommand)
  id: '#ctor(System.Data.OleDb.OleDbCommand)'
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OleDbDataAdapter(OleDbCommand)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(OleDbCommand)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(OleDbCommand)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "初始化的新執行個體<xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;></xref>類別具有指定<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;></xref>為<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>屬性。</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>"
  remarks: "這項實作<xref:System.Data.OleDb.OleDbDataAdapter>建構函式<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>屬性中指定的值為`selectCommand`參數。</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> </xref:System.Data.OleDb.OleDbDataAdapter>       當您建立的執行個體<xref:System.Data.OleDb.OleDbDataAdapter>，下列的讀取/寫入屬性設定為下列的初始值。</xref:System.Data.OleDb.OleDbDataAdapter>      |屬性 |初始值 |  |----------------|-------------------|  |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|      您可以變更任何這些屬性，透過呼叫另一個屬性的值。</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter1 Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_17_1.vb)]\n [!code-cs[Classic WebData OleDbDataAdapter.OleDbDataAdapter1 Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_17_1.cs)]"
  syntax:
    content: public OleDbDataAdapter (System.Data.OleDb.OleDbCommand selectCommand);
    parameters:
    - id: selectCommand
      type: System.Data.OleDb.OleDbCommand
      description: "<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref>的 SELECT 陳述式或預存程序，並已設定為<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>屬性<xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;> </xref>。</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>"
  overload: System.Data.OleDb.OleDbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.Data.OleDb.OleDbConnection)
  id: '#ctor(System.String,System.Data.OleDb.OleDbConnection)'
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OleDbDataAdapter(String,OleDbConnection)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(String,OleDbConnection)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(String,OleDbConnection)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "初始化的新執行個體<xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;> </xref> <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>.</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>類別"
  remarks: "這項實作<xref:System.Data.OleDb.OleDbDataAdapter>開啟和關閉<xref:System.Data.OleDb.OleDbConnection>如果它尚未開啟。</xref:System.Data.OleDb.OleDbConnection> </xref:System.Data.OleDb.OleDbDataAdapter> 這很有用的應用程式，必須呼叫<xref:System.Data.Common.DbDataAdapter.Fill%2A>方法的兩個或多個<xref:System.Data.OleDb.OleDbDataAdapter>物件。</xref:System.Data.OleDb.OleDbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Fill%2A> 如果<xref:System.Data.OleDb.OleDbConnection>是已經開啟，您必須明確呼叫<xref:System.Data.OleDb.OleDbConnection.Close%2A>或**處置**關閉它。</xref:System.Data.OleDb.OleDbConnection.Close%2A> </xref:System.Data.OleDb.OleDbConnection>       當您建立的執行個體<xref:System.Data.OleDb.OleDbDataAdapter>，下列的讀取/寫入屬性設定為下列的初始值。</xref:System.Data.OleDb.OleDbDataAdapter>      |屬性 |初始值 |  |----------------|-------------------|  |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|      您可以變更上述任一個屬性，透過呼叫另一個屬性的值。</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter3 Example#1](~/add/codesnippet/visualbasic/f3cd089b-2d52-49c5-b101-_1.vb)]\n [!code-cs[Classic WebData OleDbDataAdapter.OleDbDataAdapter3 Example#1](~/add/codesnippet/csharp/f3cd089b-2d52-49c5-b101-_1.cs)]"
  syntax:
    content: public OleDbDataAdapter (string selectCommandText, System.Data.OleDb.OleDbConnection selectConnection);
    parameters:
    - id: selectCommandText
      type: System.String
      description: "字串的 SQL SELECT 陳述式或預存程序，以供<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>屬性<xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;> </xref>。</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>"
    - id: selectConnection
      type: System.Data.OleDb.OleDbConnection
      description: "<xref href=&quot;System.Data.OleDb.OleDbConnection&quot;> </xref> ，代表的連接。"
  overload: System.Data.OleDb.OleDbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OleDbDataAdapter(String,String)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(String,String)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(String,String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "初始化的新執行個體<xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;> </xref> <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>.</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>類別"
  remarks: "這個多載<xref:System.Data.OleDb.OleDbDataAdapter>建構函式使用`selectConnectionString`參數來設定<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>屬性。</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> </xref:System.Data.OleDb.OleDbDataAdapter> 不過，它不會開啟連接。 您仍然必須明確開啟連接。       當您建立的執行個體<xref:System.Data.OleDb.OleDbDataAdapter>，下列的讀取/寫入屬性設定為下列的初始值。</xref:System.Data.OleDb.OleDbDataAdapter>      |屬性 |初始值 |  |----------------|-------------------|  |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|      您可以變更任何這些屬性，透過呼叫另一個屬性的值。</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter2 Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_4_1.vb)]\n [!code-cs[Classic WebData OleDbDataAdapter.OleDbDataAdapter2 Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_4_1.cs)]"
  syntax:
    content: public OleDbDataAdapter (string selectCommandText, string selectConnectionString);
    parameters:
    - id: selectCommandText
      type: System.String
      description: "字串的 SQL SELECT 陳述式或預存程序，以供<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>屬性<xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;> </xref>。</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>"
    - id: selectConnectionString
      type: System.String
      description: "連接字串。"
  overload: System.Data.OleDb.OleDbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: OleDbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "即將加入。"
    - id: command
      type: System.Data.IDbCommand
      description: "即將加入。"
    - id: statementType
      type: System.Data.StatementType
      description: "即將加入。"
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "即將加入。"
    return:
      type: System.Data.Common.RowUpdatedEventArgs
      description: "即將加入。"
  overload: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: OleDbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "即將加入。"
    - id: command
      type: System.Data.IDbCommand
      description: "即將加入。"
    - id: statementType
      type: System.Data.StatementType
      description: "即將加入。"
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "即將加入。"
    return:
      type: System.Data.Common.RowUpdatingEventArgs
      description: "即將加入。"
  overload: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.DeleteCommand
  id: DeleteCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: DeleteCommand
  nameWithType: OleDbDataAdapter.DeleteCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "取得或設定的 SQL 陳述式或預存程序從資料集中刪除記錄。"
  remarks: "期間<xref:System.Data.Common.DbDataAdapter.Update%2A>，如果沒有設定這個屬性，且主索引鍵資訊存在<xref:System.Data.DataSet>，可以產生 DeleteCommand，只有在您設定的<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>屬性並使用<xref:System.Data.OleDb.OleDbCommandBuilder>.</xref:System.Data.OleDb.OleDbCommandBuilder></xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>時，自動</xref:System.Data.DataSet></xref:System.Data.Common.DbDataAdapter.Update%2A> 然後，您未設定任何其他命令會產生<xref:System.Data.OleDb.OleDbCommandBuilder>。</xref:System.Data.OleDb.OleDbCommandBuilder> 此產生邏輯需要存在於<xref:System.Data.DataSet>.</xref:System.Data.DataSet>的索引鍵資料行資訊 如需詳細資訊，請參閱[Commandbuilder 產生命令](~/add/includes/ajax-current-ext-md.md)。       當指派 DeleteCommand 到先前建立<xref:System.Data.OleDb.OleDbCommand>、<xref:System.Data.OleDb.OleDbCommand>不會被複製。</xref:System.Data.OleDb.OleDbCommand> </xref:System.Data.OleDb.OleDbCommand> DeleteCommand 維護參考先前建立<xref:System.Data.OleDb.OleDbCommand>物件。</xref:System.Data.OleDb.OleDbCommand>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and DeleteCommand properties. It assumes that you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \n  \n [!code-cs[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_21_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_21_1.vb)]"
  syntax:
    content: public System.Data.OleDb.OleDbCommand DeleteCommand { get; set; }
    return:
      type: System.Data.OleDb.OleDbCommand
      description: "<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref>期間使用<xref:System.Data.Common.DbDataAdapter.Update*>刪除對應到資料來源中的記錄將刪除的資料列中的<xref href=&quot;System.Data.DataSet&quot;> </xref>。</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.OleDb.OleDbDataAdapter.DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)
  id: Fill(System.Data.DataTable,System.Object)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable,Object)
  nameWithType: OleDbDataAdapter.Fill(DataTable,Object)
  fullName: System.Data.OleDb.OleDbDataAdapter.Fill(DataTable,Object)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "加入或重新整理中的資料列<xref href=&quot;System.Data.DataTable&quot;></xref>以符合 ADO <xref uid=&quot;langword_csharp_Recordset&quot; name=&quot;Recordset&quot; href=&quot;&quot;> </xref>或<xref uid=&quot;langword_csharp_Record&quot; name=&quot;Record&quot; href=&quot;&quot;></xref>物件使用指定<xref href=&quot;System.Data.DataTable&quot;></xref>和 ADO 物件。"
  remarks: "ActiveX Data Objects (ADO) 與 ADO.NET 之間的連結，您可以從 ADO 來複製資料，是單向作業<xref:System.Data.DataSet>，但必須由 ADO.NET 處理資料的任何更新。</xref:System.Data.DataSet>       Fill 方法的這個多載不會關閉輸入`Recordset`填滿作業完成。       處理批次傳回多個結果，這項實作的填滿的 SQL 陳述式時，<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>的 OLE DB.NET Framework 資料提供者擷取的只有第一個結果的結構描述資訊。</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       填滿作業會將資料列加入到指定的目的地<xref:System.Data.DataTable>物件存放至<xref:System.Data.DataSet>、 建立<xref:System.Data.DataTable>如果它不存在的物件。</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> 當您建立<xref:System.Data.DataTable>物件填入作業通常會建立只有資料行名稱中繼資料。</xref:System.Data.DataTable> 不過，如果<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>屬性設定為`AddWithKey`，也會建立適當的主索引鍵和條件約束。</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>       您可以使用的填滿方法多次於相同<xref:System.Data.DataTable>。</xref:System.Data.DataTable> 如果主索引鍵存在，內送資料列會合併具有相符的資料列已經存在。 如果沒有主索引鍵存在，內送資料列會附加至<xref:System.Data.DataTable>。</xref:System.Data.DataTable> 如果存在主索引鍵資訊，任何重複的資料列和一致，而且只能出現一次在<xref:System.Data.DataTable>對應至<xref:System.Data.DataSet>。</xref:System.Data.DataSet> </xref:System.Data.DataTable> 主索引鍵資訊可能會設定透過<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>，藉由指定<xref:System.Data.DataTable.PrimaryKey%2A>屬性<xref:System.Data.DataTable>，或藉由設定<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>屬性`AddWithKey`。</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       如果<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>傳回結果的 OUTER JOIN，`DataAdapter`未設定<xref:System.Data.DataTable.PrimaryKey%2A>值，產生<xref:System.Data.DataTable>。</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> 您必須明確定義主索引鍵，以確定正確解析重複的資料列。 如需詳細資訊，請參閱[定義主索引鍵](~/add/includes/ajax-current-ext-md.md)。       若要正常搭配.NET Framework Data Provider for OLE DB`AddWithKey`需要原生 OLE DB 提供者藉由設定 DBPROP_UNIQUEROWS 屬性，取得必要的主索引鍵資訊，並接著會判斷哪些資料行是主索引鍵資料行，藉由檢查中的 DBCOLUMN_KEYCOLUMN `IColumnsRowset`。 或者使用者可能會明確設定於<xref:System.Data.DataTable>。</xref:System.Data.DataTable> primary key 條件約束 這可確保符合現有記錄的內送記錄會更新而不是附加。       如果<xref:System.Data.OleDb.OleDbDataAdapter>遇到重複的資料行在填入<xref:System.Data.DataTable>，它會產生後續的資料行，並使用模式的名稱&quot;*columnname*1&quot;，&quot;*columnname*2&quot;，&quot;*columnname*3 」，依此類推。</xref:System.Data.DataTable> </xref:System.Data.OleDb.OleDbDataAdapter> 空的資料行名稱會加入至<xref:System.Data.DataTable>，使用空字串的第一個資料行，後面接著&quot;1&quot;、&quot;2&quot;、&quot;3&quot;，等後續的空白資料行。</xref:System.Data.DataTable>       在 ADO 中的值`Recordset`或`Record`物件會轉換成<xref:System.Data.DataSet>.</xref:System.Data.DataSet>中的儲存體的 common language runtime 類型      > [!CAUTION] > Fill 方法的這個多載不會隱含地呼叫`Close`ADO 時在物件上填滿作業已完成。 因此，務必呼叫`Close`當您完成使用 ADO`Recordset`或`Record`物件。 這可確保基礎連接到資料來源即時的方式，以發行和也會防止可能的存取違規，因為 unmanaged ADO 物件被記憶體回收所回收仍存在現有的參考時。       當您呼叫`TableMappings.Add`方法`DataAdapter`和明確對應的來源資料表參數為空字串、 資料集成功填滿使用來源資料表中，但資料集將會填入執行任何動作。 例如，在下列範例中，`rDataSet`會填入執行任何動作。      ```   rAdapter.TableMappings.Add(&quot;source table&quot;, &quot;&quot;);   rAdapter.Fill(rDataSet, &quot;source table&quot;);      ```這個範例會示範如何可以略過的結果處理多個結果時。       下列範例會使用<xref:System.Data.OleDb.OleDbDataAdapter>填滿<xref:System.Data.DataTable>使用 ADO `Recordset`。</xref:System.Data.DataTable> </xref:System.Data.OleDb.OleDbDataAdapter> 這個範例假設您已建立 ADO `Recordset`。      ```vb#   Dim custDA As OleDbDataAdapter = New OleDbDataAdapter()        Dim custDS As DataSet = New DataSet        Dim custTable As DataTable = New DataTable(&quot;Customers&quot;)        custTable.Columns.Add(&quot;CustomerID&quot;, Type.GetType(&quot;System.String&quot;))        custTable.Columns.Add(&quot;CompanyName&quot;, Type.GetType(&quot;System.String&quot;))        custDS.Tables.Add(custTable)        &quot;Use ADO objects from ADO library (msado15.dll) imported        &quot; as.NET library ADODB.dll using TlbImp.exe        Dim adoConn As ADODB.Connection = New ADODB.Connection()        Dim adoRS As ADODB.Recordset = New ADODB.Recordset()        adoConn.Open(&quot;Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;&quot;, &quot;&quot;, &quot;&quot;, -1)        adoRS.Open(&quot;SELECT CustomerID, CompanyName FROM Customers&quot;, adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)        custDA.Fill(custTable, adoRS)        adoRS.Close()        adoConn.Close()   ```      ```c#   OleDbDataAdapter custDA = new OleDbDataAdapter();        DataSet custDS = new DataSet();        DataTable custTable = new DataTable(&quot;Customers&quot;);        custTable.Columns.Add(&quot;CustomerID&quot;, typeof(String));        custTable.Columns.Add(&quot;CompanyName&quot;, typeof(String));        custDS.Tables.Add(custTable);        //Use ADO objects from ADO library (msado15.dll) imported        //  as.NET library ADODB.dll using TlbImp.exe        ADODB.Connection adoConn = new ADODB.Connection();        ADODB.Recordset adoRS = new ADODB.Recordset();        adoConn.Open(&quot;Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;&quot;, &quot;&quot;, &quot;&quot;, -1);        adoRS.Open(&quot;SELECT CustomerID, CompanyName FROM Customers&quot;, adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);        custDA.Fill(custTable, adoRS);        adoRS.Close();        adoConn.Close();   ```"
  syntax:
    content: public int Fill (System.Data.DataTable dataTable, object ADODBRecordSet);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>填滿記錄，而且如果它是必要項，結構描述。"
    - id: ADODBRecordSet
      type: System.Object
      description: "An ADO <xref uid=&quot;langword_csharp_Recordset&quot; name=&quot;Recordset&quot; href=&quot;&quot;></xref> or <xref uid=&quot;langword_csharp_Record&quot; name=&quot;Record&quot; href=&quot;&quot;></xref> object."
    return:
      type: System.Int32
      description: "若要重新整理的資料列數目<xref href=&quot;System.Data.DataTable&quot;> </xref>。 這不包括不傳回資料列的陳述式所影響的資料列。"
  overload: System.Data.OleDb.OleDbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataSet,System.Object,System.String)
  id: Fill(System.Data.DataSet,System.Object,System.String)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,Object,String)
  nameWithType: OleDbDataAdapter.Fill(DataSet,Object,String)
  fullName: System.Data.OleDb.OleDbDataAdapter.Fill(DataSet,Object,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "加入或重新整理中的資料列<xref href=&quot;System.Data.DataSet&quot;></xref>以符合 ADO <xref uid=&quot;langword_csharp_Recordset&quot; name=&quot;Recordset&quot; href=&quot;&quot;> </xref>或<xref uid=&quot;langword_csharp_Record&quot; name=&quot;Record&quot; href=&quot;&quot;></xref>物件使用指定<xref href=&quot;System.Data.DataSet&quot;> </xref>，ADO 物件和來源資料表名稱。"
  remarks: "ActiveX Data Objects (ADO) 與 ADO.NET 之間的連結，您可以從 ADO 來複製資料，是單向作業<xref:System.Data.DataSet>，但必須由 ADO.NET 處理資料的任何更新。</xref:System.Data.DataSet>       <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>方法逐一查看多個結果藉由呼叫`NextRecordset`方法`Recordset`，關閉輸入`Recordset`完成<xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>作業。</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> </xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>       <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>作業會將資料列加入到指定的目的地<xref:System.Data.DataTable>物件存放至<xref:System.Data.DataSet>、 建立<xref:System.Data.DataTable>如果它不存在的物件。</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> 當您建立<xref:System.Data.DataTable>物件<xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>作業通常會建立只有資料行名稱中繼資料。</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> </xref:System.Data.DataTable> 不過，如果<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>屬性設定為`AddWithKey`，也會建立適當的主索引鍵和條件約束。</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>       如果存在主索引鍵資訊，任何重複的資料列和一致，而且只能出現一次在<xref:System.Data.DataTable>對應至<xref:System.Data.DataSet>。</xref:System.Data.DataSet> </xref:System.Data.DataTable> 主索引鍵資訊可能會設定透過<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>，藉由指定<xref:System.Data.DataTable.PrimaryKey%2A>屬性<xref:System.Data.DataTable>，或藉由設定<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>屬性`AddWithKey`。</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       若要正常搭配.NET Framework Data Provider for OLE DB`AddWithKey`需要原生 OLE DB 提供者，藉由設定 DBPROP_UNIQUEROWS 屬性，取得必要的主索引鍵資訊，然後決定 哪些資料行是主索引鍵資料行，藉由檢查中的 DBCOLUMN_KEYCOLUMN **IColumnsRowset**。 或者使用者可能會明確設定於<xref:System.Data.DataTable>。</xref:System.Data.DataTable> primary key 條件約束 這可確保符合現有記錄的內送記錄會更新而不是附加。       如果<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>傳回結果的 OUTER JOIN，`DataAdapter`未設定<xref:System.Data.DataTable.PrimaryKey%2A>值，產生<xref:System.Data.DataTable>。</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> 您必須明確定義主索引鍵，以確定正確解析重複的資料列。 如需詳細資訊，請參閱[定義主索引鍵](~/add/includes/ajax-current-ext-md.md)。       如果`Recordset`的啟動前已關閉<xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>作業，而且不會產生錯誤。</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> 這是必要以處理多個結果，因為查詢不會傳回資料列會指出由關閉`Recordset`。 <xref:System.Data.OleDb.OleDbDataAdapter>只會呼叫`NextRecordset`上的封閉型`Recordset`然後繼續處理。</xref:System.Data.OleDb.OleDbDataAdapter>       在填入資料集發生錯誤，如果發生錯誤之前所加入的資料列會保留在<xref:System.Data.DataSet>.</xref:System.Data.DataSet> 其餘的作業已中止。       如果<xref:System.Data.Common.DbDataAdapter>物件遇到重複的資料行在填入<xref:System.Data.DataTable>，它會產生後續的資料行，並使用模式的名稱&quot;*columnname*1&quot;，&quot;*columnname*2&quot;，&quot;*columnname*3 」，依此類推。</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> 如果內送資料中包含未命名資料行，它們會放置於<xref:System.Data.DataSet>根據模式&quot;Column1&quot;、&quot;Column2&quot;，等等。</xref:System.Data.DataSet> 當多個結果集加入至<xref:System.Data.DataSet>放置於個別的資料表中每個結果集。</xref:System.Data.DataSet> 其他結果集的命名方式是附加至指定的資料表名稱 （例如，&quot;Table&quot;、&quot;Table1&quot;、&quot;Table2&quot;等。） 的整數值。 使用資料行和資料表名稱的應用程式應該要確定這些命名模式衝突不會發生。       在 ADO 中的值`Recordset`或`Record`物件會轉換成<xref:System.Data.DataSet>.</xref:System.Data.DataSet>中的儲存體的 common language runtime 類型      > [!NOTE] > 的這個多載<xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>方法會隱含呼叫`Close`ADO 時在物件上填滿作業已完成。</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>       下列範例會使用<xref:System.Data.OleDb.OleDbDataAdapter>填滿<xref:System.Data.DataSet>使用 ADO`Recordset`也就是 ADO`Record`物件。</xref:System.Data.DataSet> </xref:System.Data.OleDb.OleDbDataAdapter> 這個範例假設您已建立 ADO`RecordSet`和`Record`物件。      ```vb#   Dim custDA As OleDbDataAdapter = New OleDbDataAdapter()        Dim custDS As DataSet = New DataSet        &quot;Use ADO objects from ADO library (msado15.dll) imported        &quot; as.NET library ADODB.dll using TlbImp.exe        Dim adoConn As ADODB.Connection = New ADODB.Connection()        Dim adoRS As ADODB.Recordset = New ADODB.Recordset()        adoConn.Open(&quot;Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;&quot;, &quot;&quot;, &quot;&quot;, -1)        adoRS.Open(&quot;SELECT * FROM Customers&quot;, adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)        custDA.Fill(custDS, adoRS, &quot;Customers&quot;)        adoConn.Close()   ```      ```c#   OleDbDataAdapter custDA = new OleDbDataAdapter();        DataSet custDS = new DataSet();        //Use ADO objects from ADO library (msado15.dll) imported        // as.NET library ADODB.dll using TlbImp.exe        ADODB.Connection adoConn = new ADODB.Connection();        ADODB.Recordset adoRS = new ADODB.Recordset();        adoConn.Open(&quot;Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;&quot;, &quot;&quot;, &quot;&quot;, -1);        adoRS.Open(&quot;SELECT * FROM Customers&quot;, adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);        custDA.Fill(custDS, adoRS, &quot;Customers&quot;);        adoConn.Close();   ```"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet, object ADODBRecordSet, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref>填滿記錄，而且如果它是必要項，結構描述。"
    - id: ADODBRecordSet
      type: System.Object
      description: "An ADO <xref uid=&quot;langword_csharp_Recordset&quot; name=&quot;Recordset&quot; href=&quot;&quot;></xref> or <xref uid=&quot;langword_csharp_Record&quot; name=&quot;Record&quot; href=&quot;&quot;></xref> object."
    - id: srcTable
      type: System.String
      description: "來源資料表，用於資料表對應。"
    return:
      type: System.Int32
      description: "資料列數目已成功加入，或在中重新整理<xref href=&quot;System.Data.DataSet&quot;> </xref>。 這不包括不傳回資料列的陳述式所影響的資料列。"
  overload: System.Data.OleDb.OleDbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "無效的來源資料表。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.InsertCommand
  id: InsertCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: InsertCommand
  nameWithType: OleDbDataAdapter.InsertCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "取得或設定的 SQL 陳述式或預存程序，用來將新記錄插入至資料來源。"
  remarks: "期間<xref:System.Data.Common.DbDataAdapter.Update%2A>，如果沒有設定這個屬性，且主索引鍵資訊存在<xref:System.Data.DataSet>，可以產生 InsertCommand，只有在您設定的<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>屬性並使用<xref:System.Data.OleDb.OleDbCommandBuilder>.</xref:System.Data.OleDb.OleDbCommandBuilder></xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>時，自動</xref:System.Data.DataSet></xref:System.Data.Common.DbDataAdapter.Update%2A> 然後，您未設定任何其他命令會產生<xref:System.Data.OleDb.OleDbCommandBuilder>。</xref:System.Data.OleDb.OleDbCommandBuilder> 此產生邏輯需要存在於<xref:System.Data.DataSet>.</xref:System.Data.DataSet>的索引鍵資料行資訊 如需詳細資訊，請參閱[Commandbuilder 產生命令](~/add/includes/ajax-current-ext-md.md)。       當指派 InsertCommand 到先前建立<xref:System.Data.OleDb.OleDbCommand>、<xref:System.Data.OleDb.OleDbCommand>不會被複製。</xref:System.Data.OleDb.OleDbCommand> </xref:System.Data.OleDb.OleDbCommand> InsertCommand 維護參考先前建立<xref:System.Data.OleDb.OleDbCommand>物件。</xref:System.Data.OleDb.OleDbCommand>      > [!NOTE] > 如果執行此命令會傳回資料列，這些資料列可能會加入至<xref:System.Data.DataSet>根據如何設定<xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A>屬性<xref:System.Data.OleDb.OleDbCommand>物件。</xref:System.Data.OleDb.OleDbCommand> </xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A> </xref:System.Data.DataSet>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and InsertCommand properties. It assumes that you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \n  \n [!code-cs[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_9_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_9_1.vb)]"
  syntax:
    content: public System.Data.OleDb.OleDbCommand InsertCommand { get; set; }
    return:
      type: System.Data.OleDb.OleDbCommand
      description: "<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref>期間使用<xref:System.Data.Common.DbDataAdapter.Update*>對應至新的資料列中的資料來源中插入記錄<xref href=&quot;System.Data.DataSet&quot;> </xref>。</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.OleDb.OleDbDataAdapter.InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  id: OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: OleDbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatedEventArgs
      description: "即將加入。"
  overload: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  id: OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: OleDbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatingEventArgs
      description: "即將加入。"
  overload: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.RowUpdated
  id: RowUpdated
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: RowUpdated
  nameWithType: OleDbDataAdapter.RowUpdated
  fullName: System.Data.OleDb.OleDbDataAdapter.RowUpdated
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "發生在<xref:System.Data.Common.DbDataAdapter.Update*>針對資料來源執行命令之後。</xref:System.Data.Common.DbDataAdapter.Update*> 會嘗試更新。 因此，就會發生此事件。"
  remarks: "當您使用<xref:System.Data.Common.DbDataAdapter.Update%2A>，有兩個每個更新的資料列就會發生的事件。</xref:System.Data.Common.DbDataAdapter.Update%2A> 執行的順序如下︰ 1。  中的值<xref:System.Data.DataRow>移到參數值。</xref:System.Data.DataRow>      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>就會引發事件。</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  執行命令。      4.  如果命令設定為`FirstReturnedRecord`，第一個傳回的結果會放在<xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  如果沒有輸出參數，它們會放置於<xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>就會引發事件。</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>會呼叫。</xref:System.Data.DataRow.AcceptChanges%2A>"
  example:
  - "The following example shows the <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating> and RowUpdated events being used.  \n  \n [!code-cs[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/add/codesnippet/csharp/e-system.data.oledb.oled_1_1.cs)]\n [!code-vb[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/add/codesnippet/visualbasic/e-system.data.oledb.oled_1_1.vb)]"
  syntax:
    content: public event System.Data.OleDb.OleDbRowUpdatedEventHandler RowUpdated;
    return:
      type: System.Data.OleDb.OleDbRowUpdatedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.RowUpdating
  id: RowUpdating
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: RowUpdating
  nameWithType: OleDbDataAdapter.RowUpdating
  fullName: System.Data.OleDb.OleDbDataAdapter.RowUpdating
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "發生在<xref:System.Data.Common.DbDataAdapter.Update*>針對資料來源執行命令之前。</xref:System.Data.Common.DbDataAdapter.Update*> 會嘗試更新。 因此，就會發生此事件。"
  remarks: "當您使用<xref:System.Data.Common.DbDataAdapter.Update%2A>，有兩個每個更新的資料列就會發生的事件。</xref:System.Data.Common.DbDataAdapter.Update%2A> 執行的順序如下︰ 1。  中的值<xref:System.Data.DataRow>移到參數值。</xref:System.Data.DataRow>      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>就會引發事件。</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  執行命令。      4.  如果命令設定為`FirstReturnedRecord`，第一個傳回的結果會放在<xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  如果沒有輸出參數，它們會放置於<xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>就會引發事件。</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>會呼叫。</xref:System.Data.DataRow.AcceptChanges%2A>"
  example:
  - "The following example shows the RowUpdating and <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdated> events being used.  \n  \n [!code-cs[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/add/codesnippet/csharp/e-system.data.oledb.oled_0_1.cs)]\n [!code-vb[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/add/codesnippet/visualbasic/e-system.data.oledb.oled_0_1.vb)]"
  syntax:
    content: public event System.Data.OleDb.OleDbRowUpdatingEventHandler RowUpdating;
    return:
      type: System.Data.OleDb.OleDbRowUpdatingEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.SelectCommand
  id: SelectCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: SelectCommand
  nameWithType: OleDbDataAdapter.SelectCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "取得或設定的 SQL 陳述式或預存程序，用來選取資料來源中的記錄。"
  remarks: "當 SelectCommand 指派到先前建立<xref:System.Data.OleDb.OleDbCommand>、<xref:System.Data.OleDb.OleDbCommand>不會被複製。</xref:System.Data.OleDb.OleDbCommand> </xref:System.Data.OleDb.OleDbCommand> SelectCommand 維護參考先前建立<xref:System.Data.OleDb.OleDbCommand>物件。</xref:System.Data.OleDb.OleDbCommand>       SelectCommand 不傳回任何資料列，如果沒有資料表會加入至<xref:System.Data.DataSet>，並會引發任何例外狀況。</xref:System.Data.DataSet>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets the SelectCommand and <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> properties. It assumes that you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \n  \n [!code-cs[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_3_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_3_1.vb)]"
  syntax:
    content: public System.Data.OleDb.OleDbCommand SelectCommand { get; set; }
    return:
      type: System.Data.OleDb.OleDbCommand
      description: "<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref>期間所使用<xref:System.Data.Common.DbDataAdapter.Fill*>放置在資料來源選取記錄<xref href=&quot;System.Data.DataSet&quot;> </xref>。</xref:System.Data.Common.DbDataAdapter.Fill*>"
  overload: System.Data.OleDb.OleDbDataAdapter.SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  id: System#Data#IDbDataAdapter#DeleteCommand
  isEii: true
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "如需這個成員的說明，請參閱<xref:System.Data.IDbDataAdapter.DeleteCommand*>.</xref:System.Data.IDbDataAdapter.DeleteCommand*>"
  remarks: "這個成員是明確介面成員實作。 它可用時，才<xref:System.Data.OleDb.OleDbDataAdapter>執行個體轉換成<xref:System.Data.IDbDataAdapter>介面。</xref:System.Data.IDbDataAdapter> </xref:System.Data.OleDb.OleDbDataAdapter>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref>更新期間用來刪除資料集中刪除資料列的資料來源中的記錄。"
  overload: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  id: System#Data#IDbDataAdapter#InsertCommand
  isEii: true
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "如需這個成員的說明，請參閱<xref:System.Data.IDbDataAdapter.InsertCommand*>.</xref:System.Data.IDbDataAdapter.InsertCommand*>"
  remarks: "這個成員是明確介面成員實作。 它可用時，才<xref:System.Data.OleDb.OleDbDataAdapter>執行個體轉換成<xref:System.Data.IDbDataAdapter>介面。</xref:System.Data.IDbDataAdapter> </xref:System.Data.OleDb.OleDbDataAdapter>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref>更新期間用來將記錄插入資料來源的資料集內的位置。"
  overload: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  id: System#Data#IDbDataAdapter#SelectCommand
  isEii: true
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "如需這個成員的說明，請參閱<xref:System.Data.IDbDataAdapter.SelectCommand*>.</xref:System.Data.IDbDataAdapter.SelectCommand*>"
  remarks: "這個成員是明確介面成員實作。 它可用時，才<xref:System.Data.OleDb.OleDbDataAdapter>執行個體轉換成<xref:System.Data.IDbDataAdapter>介面。</xref:System.Data.IDbDataAdapter> </xref:System.Data.OleDb.OleDbDataAdapter>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref>更新期間用來從放置在資料集中的資料來源選取記錄。"
  overload: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  id: System#Data#IDbDataAdapter#UpdateCommand
  isEii: true
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "如需這個成員的說明，請參閱<xref:System.Data.IDbDataAdapter.UpdateCommand*>.</xref:System.Data.IDbDataAdapter.UpdateCommand*>"
  remarks: "這個成員是明確介面成員實作。 它可用時，才<xref:System.Data.OleDb.OleDbDataAdapter>執行個體轉換成<xref:System.Data.IDbDataAdapter>介面。</xref:System.Data.IDbDataAdapter> </xref:System.Data.OleDb.OleDbDataAdapter>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref>對修改資料集中的資料列進行資料來源中更新來更新記錄時使用。"
  overload: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: OleDbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.OleDb.OleDbDataAdapter.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "如需這個成員的說明，請參閱&lt;xref:System.ICloneable.Clone%2A?displayProperty=fullName&gt;。"
  remarks: "這個成員是明確介面成員實作。 它可用時，才<xref:System.Data.OleDb.OleDbDataAdapter>執行個體轉換成<xref:System.ICloneable>介面。</xref:System.ICloneable> </xref:System.Data.OleDb.OleDbDataAdapter>"
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "新<xref:System.Object>也就是這個執行個體的複本。</xref:System.Object>"
  overload: System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.UpdateCommand
  id: UpdateCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: UpdateCommand
  nameWithType: OleDbDataAdapter.UpdateCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "取得或設定的 SQL 陳述式或預存程序，用來更新資料來源中的記錄。"
  remarks: "期間<xref:System.Data.Common.DbDataAdapter.Update%2A>，如果沒有設定這個屬性，且主索引鍵資訊存在<xref:System.Data.DataSet>，可以產生 UpdateCommand，只有在您設定的<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>屬性並使用<xref:System.Data.OleDb.OleDbCommandBuilder>.</xref:System.Data.OleDb.OleDbCommandBuilder></xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>時，自動</xref:System.Data.DataSet></xref:System.Data.Common.DbDataAdapter.Update%2A> 然後，您未設定任何其他命令會產生<xref:System.Data.OleDb.OleDbCommandBuilder>。</xref:System.Data.OleDb.OleDbCommandBuilder> 此產生邏輯需要存在於<xref:System.Data.DataSet>.</xref:System.Data.DataSet>的索引鍵資料行資訊 如需詳細資訊，請參閱[Commandbuilder 產生命令](~/add/includes/ajax-current-ext-md.md)。       當指派 UpdateCommand 到先前建立<xref:System.Data.OleDb.OleDbCommand>、<xref:System.Data.OleDb.OleDbCommand>不會被複製。</xref:System.Data.OleDb.OleDbCommand> </xref:System.Data.OleDb.OleDbCommand> UpdateCommand 會維護先前建立的參考<xref:System.Data.OleDb.OleDbCommand>物件。</xref:System.Data.OleDb.OleDbCommand>      > [!NOTE] > 如果執行此命令會傳回資料列，這些資料列可能會合併與<xref:System.Data.DataSet>根據如何設定<xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A>屬性<xref:System.Data.OleDb.OleDbCommand>物件。</xref:System.Data.OleDb.OleDbCommand> </xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A> </xref:System.Data.DataSet>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and UpdateCommand properties. It assumes that you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \n  \n [!code-cs[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_7_1.cs)]\n [!code-vb[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_7_1.vb)]"
  syntax:
    content: public System.Data.OleDb.OleDbCommand UpdateCommand { get; set; }
    return:
      type: System.Data.OleDb.OleDbCommand
      description: "<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref>期間使用<xref:System.Data.Common.DbDataAdapter.Update*>對應至資料來源中更新記錄修改中的資料列<xref href=&quot;System.Data.DataSet&quot;> </xref>。</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.OleDb.OleDbDataAdapter.UpdateCommand*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.Common.DbDataAdapter
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OleDbDataAdapter()
  nameWithType: OleDbDataAdapter.OleDbDataAdapter()
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter()
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.Data.OleDb.OleDbCommand)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OleDbDataAdapter(OleDbCommand)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(OleDbCommand)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(OleDbCommand)
- uid: System.Data.OleDb.OleDbCommand
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbCommand
  nameWithType: OleDbCommand
  fullName: System.Data.OleDb.OleDbCommand
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.Data.OleDb.OleDbConnection)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OleDbDataAdapter(String,OleDbConnection)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(String,OleDbConnection)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(String,OleDbConnection)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.OleDb.OleDbConnection
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbConnection
  nameWithType: OleDbConnection
  fullName: System.Data.OleDb.OleDbConnection
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.String)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OleDbDataAdapter(String,String)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(String,String)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(String,String)
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: OleDbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatedEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatedEventArgs
  nameWithType: RowUpdatedEventArgs
  fullName: System.Data.Common.RowUpdatedEventArgs
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.IDbCommand
  parent: System.Data
  isExternal: false
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.Data.StatementType
  parent: System.Data
  isExternal: false
  name: StatementType
  nameWithType: StatementType
  fullName: System.Data.StatementType
- uid: System.Data.Common.DataTableMapping
  parent: System.Data.Common
  isExternal: false
  name: DataTableMapping
  nameWithType: DataTableMapping
  fullName: System.Data.Common.DataTableMapping
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: OleDbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatingEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatingEventArgs
  nameWithType: RowUpdatingEventArgs
  fullName: System.Data.Common.RowUpdatingEventArgs
- uid: System.Data.OleDb.OleDbDataAdapter.DeleteCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: OleDbDataAdapter.DeleteCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.DeleteCommand
- uid: System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: Fill(DataTable,Object)
  nameWithType: OleDbDataAdapter.Fill(DataTable,Object)
  fullName: System.Data.OleDb.OleDbDataAdapter.Fill(DataTable,Object)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataSet,System.Object,System.String)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: Fill(DataSet,Object,String)
  nameWithType: OleDbDataAdapter.Fill(DataSet,Object,String)
  fullName: System.Data.OleDb.OleDbDataAdapter.Fill(DataSet,Object,String)
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.OleDb.OleDbDataAdapter.InsertCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: OleDbDataAdapter.InsertCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.InsertCommand
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: OleDbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: OleDbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
- uid: System.Data.OleDb.OleDbDataAdapter.RowUpdated
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: RowUpdated
  nameWithType: OleDbDataAdapter.RowUpdated
  fullName: System.Data.OleDb.OleDbDataAdapter.RowUpdated
- uid: System.Data.OleDb.OleDbRowUpdatedEventHandler
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbRowUpdatedEventHandler
  nameWithType: OleDbRowUpdatedEventHandler
  fullName: System.Data.OleDb.OleDbRowUpdatedEventHandler
- uid: System.Data.OleDb.OleDbDataAdapter.RowUpdating
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: RowUpdating
  nameWithType: OleDbDataAdapter.RowUpdating
  fullName: System.Data.OleDb.OleDbDataAdapter.RowUpdating
- uid: System.Data.OleDb.OleDbRowUpdatingEventHandler
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbRowUpdatingEventHandler
  nameWithType: OleDbRowUpdatingEventHandler
  fullName: System.Data.OleDb.OleDbRowUpdatingEventHandler
- uid: System.Data.OleDb.OleDbDataAdapter.SelectCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: OleDbDataAdapter.SelectCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.SelectCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: OleDbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.OleDb.OleDbDataAdapter.System.ICloneable.Clone()
- uid: System.Data.OleDb.OleDbDataAdapter.UpdateCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: OleDbDataAdapter.UpdateCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.UpdateCommand
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OleDbDataAdapter
  nameWithType: OleDbDataAdapter.OleDbDataAdapter
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent
  nameWithType: OleDbDataAdapter.CreateRowUpdatedEvent
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent
  nameWithType: OleDbDataAdapter.CreateRowUpdatingEvent
- uid: System.Data.OleDb.OleDbDataAdapter.DeleteCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: OleDbDataAdapter.DeleteCommand
- uid: System.Data.OleDb.OleDbDataAdapter.Fill*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: Fill
  nameWithType: OleDbDataAdapter.Fill
- uid: System.Data.OleDb.OleDbDataAdapter.InsertCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: OleDbDataAdapter.InsertCommand
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OnRowUpdated
  nameWithType: OleDbDataAdapter.OnRowUpdated
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OnRowUpdating
  nameWithType: OleDbDataAdapter.OnRowUpdating
- uid: System.Data.OleDb.OleDbDataAdapter.SelectCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: OleDbDataAdapter.SelectCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: OleDbDataAdapter.System.ICloneable.Clone
- uid: System.Data.OleDb.OleDbDataAdapter.UpdateCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: OleDbDataAdapter.UpdateCommand
