### YamlMime:ManagedReference
items:
- uid: System.Globalization.SortVersion
  id: SortVersion
  children:
  - System.Globalization.SortVersion.#ctor(System.Int32,System.Guid)
  - System.Globalization.SortVersion.Equals(System.Globalization.SortVersion)
  - System.Globalization.SortVersion.Equals(System.Object)
  - System.Globalization.SortVersion.FullVersion
  - System.Globalization.SortVersion.GetHashCode
  - System.Globalization.SortVersion.op_Equality(System.Globalization.SortVersion,System.Globalization.SortVersion)
  - System.Globalization.SortVersion.op_Inequality(System.Globalization.SortVersion,System.Globalization.SortVersion)
  - System.Globalization.SortVersion.SortId
  langs:
  - csharp
  name: SortVersion
  nameWithType: SortVersion
  fullName: System.Globalization.SortVersion
  type: Class
  summary: "提供用來比較和排序字串的 Unicode 版本的相關資訊。"
  remarks: "從[!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]透過[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]、.net Framework 的每個版本包含了資料表，其中包含排序權重和字串正規化，而且該資料會以特定的 Unicode 版本為基礎。 在[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]，這些資料表的存在相依於作業系統:: 在[!INCLUDE[win7](~/add/includes/win7-md.md)]和舊版的 Windows 作業系統，繼續要用於比較和排序字串的資料表。      -在[!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)]，.NET Framework 委派字串比較和排序作業的作業系統。       因此，字串比較的結果可能會相依的.NET Framework 版本，不僅也上的作業系統版本，如下表所示。 請注意，這份支援的 Unicode 版本適用於字元比較和排序它不適用於分類的 Unicode 字元分類。      |..NET Framework 版本 |作業系統 |Unicode 版本 |  |----------------------------|----------------------|---------------------|  |[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]|所有作業系統 |Unicode 5.0 |  |[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]和更新版本的.NET Framework |[!INCLUDE[win7](~/add/includes/win7-md.md)]|Unicode 5.0 |  |[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]和更新版本的.NET Framework |[!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)]和更新版本的 Windows 作業系統版本 |Unicode 6.0 |      在[!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)]，因為的 Unicode 版本的中使用的字串比較和排序的作業系統版本而定，字串比較的結果可能不同甚至的特定版本的.NET Framework 執行的應用程式。       SortVersion 類別提供的 Unicode 版本.NET Framework 用來進行字串比較和排序資訊。 它可讓開發人員撰寫的應用程式，可以偵測並成功處理用來比較和排序應用程式的字串的 Unicode 版中的變更。       您可以具現化 SortVersion 物件有兩種:-藉由呼叫的<xref:System.Globalization.SortVersion.%23ctor%2A>建構函式，它會具現化新 SortVersion 版本號碼為基礎的物件和排序識別碼。</xref:System.Globalization.SortVersion.%23ctor%2A> 當重新建立儲存的資料從一個 SortVersion 物件，這個建構函式便最有用。      X 擷取的值<xref:System.Globalization.CompareInfo.Version%2A?displayProperty=fullName>屬性。</xref:System.Globalization.CompareInfo.Version%2A?displayProperty=fullName> 這個屬性會提供應用程式執行所在的.NET Framework 所使用的 Unicode 版本的相關資訊。       SortVersion 類別有兩個屬性，<xref:System.Globalization.SortVersion.FullVersion%2A>和<xref:System.Globalization.SortVersion.SortId%2A>，來指出 Unicode 版本和特定文化特性用於字串比較。</xref:System.Globalization.SortVersion.SortId%2A> </xref:System.Globalization.SortVersion.FullVersion%2A> <xref:System.Globalization.SortVersion.FullVersion%2A>屬性是任意數字值，以反映用於字串比較的 Unicode 版本和<xref:System.Globalization.SortVersion.SortId%2A>屬性是任意<xref:System.Guid>，以反映其慣例用於字串比較的文化特性。</xref:System.Guid> </xref:System.Globalization.SortVersion.SortId%2A> </xref:System.Globalization.SortVersion.FullVersion%2A> 這兩個屬性的值很重要，您藉由比較兩個 SortVersion 物件時，才<xref:System.Globalization.SortVersion.Equals%2A>方法，<xref:System.Globalization.SortVersion.op_Equality%2A>運算子，或<xref:System.Globalization.SortVersion.op_Inequality%2A>運算子。</xref:System.Globalization.SortVersion.op_Inequality%2A> </xref:System.Globalization.SortVersion.op_Equality%2A> </xref:System.Globalization.SortVersion.Equals%2A>       您通常使用 SortVersion 物件儲存或擷取某種形式的文化特性、 已排序的字串資料時，例如索引或常值字串本身。 這需要執行下列步驟︰ 1。  儲存的已排序的字串資料時，<xref:System.Globalization.SortVersion.FullVersion%2A>和<xref:System.Globalization.SortVersion.SortId%2A>也會儲存屬性值。</xref:System.Globalization.SortVersion.SortId%2A> </xref:System.Globalization.SortVersion.FullVersion%2A>      2.  擷取的已排序的字串資料時，您可以重新建立用來排序字串藉由呼叫 SortVersion 物件<xref:System.Globalization.SortVersion.%23ctor%2A>建構函式。</xref:System.Globalization.SortVersion.%23ctor%2A>      3.  這個新具現化的 SortVersion 物件進行比較的 SortVersion 物件，會反映其慣例用於排序的字串資料的文化特性。      4.  如果兩個 SortVersion 物件不相等，就必須重新排列字串資料。       此範例提供一個實例。"
  example:
  - "The following example contains a portion of the source code from an application that uses the SortVersion class to ensure that the native names of <xref:System.Globalization.RegionInfo> objects are ordered appropriately for the current system and current culture. It uses the <xref:System.IO.BinaryReader> and <xref:System.IO.BinaryWriter> objects to store and retrieve ordered data from a data file named `Regions.dat` rather than retrieving and ordering data each time the application is run. The example first checks to determine whether the data file exists. If it does not, it creates the data and sets the `reindex` flag, which indicates that the data must be resorted and saved again. Otherwise, it retrieves the data and compares the saved SortVersion object with the SortVersion object for the current culture on the current system. If they are not equal, or if the `reindex` flag had been set previously, it resorts the <xref:System.Globalization.RegionInfo> data.  \n  \n [!code-cs[System.Globalization.SortVersion#1](~/add/codesnippet/csharp/t-system.globalization.s_0_1.cs)]\n [!code-vb[System.Globalization.SortVersion#1](~/add/codesnippet/visualbasic/t-system.globalization.s_0_1.vb)]"
  syntax:
    content: 'public sealed class SortVersion : IEquatable<System.Globalization.SortVersion>'
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Globalization.SortVersion>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Globalization.SortVersion.#ctor(System.Int32,System.Guid)
  id: '#ctor(System.Int32,System.Guid)'
  parent: System.Globalization.SortVersion
  langs:
  - csharp
  name: SortVersion(Int32,Guid)
  nameWithType: SortVersion.SortVersion(Int32,Guid)
  fullName: System.Globalization.SortVersion.SortVersion(Int32,Guid)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "建立的新執行個體<xref href=&quot;System.Globalization.SortVersion&quot;></xref>類別。"
  remarks: "這個建構函式具現化<xref:System.Globalization.SortVersion>物件與指定的版本和排序識別碼。</xref:System.Globalization.SortVersion> `fullVersion`引數指派給<xref:System.Globalization.SortVersion.FullVersion%2A>屬性。</xref:System.Globalization.SortVersion.FullVersion%2A> `sortId`引數指派給<xref:System.Globalization.SortVersion.SortId%2A>屬性。</xref:System.Globalization.SortVersion.SortId%2A>       這個建構函式可用於重新建立<xref:System.Globalization.SortVersion>物件從已序列化或儲存的資料。</xref:System.Globalization.SortVersion> 這個版本可以與目前的應用程式版本，以判斷是否可以使用用來顯示和訂購應用程式的字串的 Unicode 版本的比較。"
  syntax:
    content: public SortVersion (int fullVersion, Guid sortId);
    parameters:
    - id: fullVersion
      type: System.Int32
      description: "版本號碼。"
    - id: sortId
      type: System.Guid
      description: "排序識別碼。"
  overload: System.Globalization.SortVersion.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortVersion.Equals(System.Globalization.SortVersion)
  id: Equals(System.Globalization.SortVersion)
  parent: System.Globalization.SortVersion
  langs:
  - csharp
  name: Equals(SortVersion)
  nameWithType: SortVersion.Equals(SortVersion)
  fullName: System.Globalization.SortVersion.Equals(SortVersion)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回值，指出是否此<xref href=&quot;System.Globalization.SortVersion&quot;></xref>執行個體是否等於指定<xref href=&quot;System.Globalization.SortVersion&quot;></xref>物件。"
  remarks: "兩個<xref:System.Globalization.SortVersion>物件是否相等如果其<xref:System.Globalization.SortVersion.FullVersion%2A>和<xref:System.Globalization.SortVersion.SortId%2A>屬性是否相等。</xref:System.Globalization.SortVersion.SortId%2A> </xref:System.Globalization.SortVersion.FullVersion%2A> </xref:System.Globalization.SortVersion>"
  syntax:
    content: public bool Equals (System.Globalization.SortVersion other);
    parameters:
    - id: other
      type: System.Globalization.SortVersion
      description: "要與這個執行個體比較的物件。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> other </code>代表相同的版本與這個執行個體; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.SortVersion.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortVersion.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Globalization.SortVersion
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: SortVersion.Equals(Object)
  fullName: System.Globalization.SortVersion.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回值，指出是否此<xref href=&quot;System.Globalization.SortVersion&quot;></xref>執行個體是否等於指定的物件。"
  remarks: "兩個<xref:System.Globalization.SortVersion>物件是否相等如果其<xref:System.Globalization.SortVersion.FullVersion%2A>和<xref:System.Globalization.SortVersion.SortId%2A>屬性是否相等。</xref:System.Globalization.SortVersion.SortId%2A> </xref:System.Globalization.SortVersion.FullVersion%2A> </xref:System.Globalization.SortVersion>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "與這個執行個體相比較的物件。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> obj </code>是<xref href=&quot;System.Globalization.SortVersion&quot;></xref>物件，代表相同的版本與這個執行個體; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.SortVersion.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortVersion.FullVersion
  id: FullVersion
  parent: System.Globalization.SortVersion
  langs:
  - csharp
  name: FullVersion
  nameWithType: SortVersion.FullVersion
  fullName: System.Globalization.SortVersion.FullVersion
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "取得的完整版本號碼<xref href=&quot;System.Globalization.SortVersion&quot;></xref>物件。"
  remarks: "FullVersion 屬性的值會反映用來標準化和比較字串的 Unicode 版本。"
  syntax:
    content: public int FullVersion { get; }
    return:
      type: System.Int32
      description: "這個版本號碼<xref href=&quot;System.Globalization.SortVersion&quot;></xref>物件。"
  overload: System.Globalization.SortVersion.FullVersion*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortVersion.GetHashCode
  id: GetHashCode
  parent: System.Globalization.SortVersion
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: SortVersion.GetHashCode()
  fullName: System.Globalization.SortVersion.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回這個執行個體的雜湊碼。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "32 位元帶正負號的整數雜湊碼。"
  overload: System.Globalization.SortVersion.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortVersion.op_Equality(System.Globalization.SortVersion,System.Globalization.SortVersion)
  id: op_Equality(System.Globalization.SortVersion,System.Globalization.SortVersion)
  parent: System.Globalization.SortVersion
  langs:
  - csharp
  name: op_Equality(SortVersion,SortVersion)
  nameWithType: SortVersion.op_Equality(SortVersion,SortVersion)
  fullName: System.Globalization.SortVersion.op_Equality(SortVersion,SortVersion)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "指出兩個<xref href=&quot;System.Globalization.SortVersion&quot;></xref>執行個體會相等。"
  remarks: "兩個<xref:System.Globalization.SortVersion>物件是否相等，如果兩者都`null`，或者如果其<xref:System.Globalization.SortVersion.FullVersion%2A>和<xref:System.Globalization.SortVersion.SortId%2A>屬性是否相等。</xref:System.Globalization.SortVersion.SortId%2A> </xref:System.Globalization.SortVersion.FullVersion%2A> </xref:System.Globalization.SortVersion>"
  syntax:
    content: public static bool op_Equality (System.Globalization.SortVersion left, System.Globalization.SortVersion right);
    parameters:
    - id: left
      type: System.Globalization.SortVersion
      description: "要比較的第一個執行個體。"
    - id: right
      type: System.Globalization.SortVersion
      description: "要比較的第二個執行個體。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the values of <code>left</code> and <code>right</code> are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Globalization.SortVersion.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortVersion.op_Inequality(System.Globalization.SortVersion,System.Globalization.SortVersion)
  id: op_Inequality(System.Globalization.SortVersion,System.Globalization.SortVersion)
  parent: System.Globalization.SortVersion
  langs:
  - csharp
  name: op_Inequality(SortVersion,SortVersion)
  nameWithType: SortVersion.op_Inequality(SortVersion,SortVersion)
  fullName: System.Globalization.SortVersion.op_Inequality(SortVersion,SortVersion)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "指出兩個<xref href=&quot;System.Globalization.SortVersion&quot;></xref>執行個體是否不相等。"
  remarks: "兩個<xref:System.Globalization.SortVersion>物件不相等，如果有`null`和另一個無效，或是具有不同<xref:System.Globalization.SortVersion.FullVersion%2A>或<xref:System.Globalization.SortVersion.SortId%2A>屬性值。</xref:System.Globalization.SortVersion.SortId%2A> </xref:System.Globalization.SortVersion.FullVersion%2A> </xref:System.Globalization.SortVersion>"
  syntax:
    content: public static bool op_Inequality (System.Globalization.SortVersion left, System.Globalization.SortVersion right);
    parameters:
    - id: left
      type: System.Globalization.SortVersion
      description: "要比較的第一個執行個體。"
    - id: right
      type: System.Globalization.SortVersion
      description: "要比較的第二個執行個體。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果值<code> left </code>和<code> right </code>不相等，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.SortVersion.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortVersion.SortId
  id: SortId
  parent: System.Globalization.SortVersion
  langs:
  - csharp
  name: SortId
  nameWithType: SortVersion.SortId
  fullName: System.Globalization.SortVersion.SortId
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "取得這個全域唯一識別碼<xref href=&quot;System.Globalization.SortVersion&quot;></xref>物件。"
  remarks: "Sortid 值屬性的值會反映字串比較和排序會影響其慣例的文化特性。"
  syntax:
    content: public Guid SortId { get; }
    return:
      type: System.Guid
      description: "此全域唯一識別碼<xref href=&quot;System.Globalization.SortVersion&quot;></xref>物件。"
  overload: System.Globalization.SortVersion.SortId*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Globalization.SortVersion.#ctor(System.Int32,System.Guid)
  parent: System.Globalization.SortVersion
  isExternal: false
  name: SortVersion(Int32,Guid)
  nameWithType: SortVersion.SortVersion(Int32,Guid)
  fullName: System.Globalization.SortVersion.SortVersion(Int32,Guid)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Globalization.SortVersion.Equals(System.Globalization.SortVersion)
  parent: System.Globalization.SortVersion
  isExternal: false
  name: Equals(SortVersion)
  nameWithType: SortVersion.Equals(SortVersion)
  fullName: System.Globalization.SortVersion.Equals(SortVersion)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.SortVersion
  parent: System.Globalization
  isExternal: false
  name: SortVersion
  nameWithType: SortVersion
  fullName: System.Globalization.SortVersion
- uid: System.Globalization.SortVersion.Equals(System.Object)
  parent: System.Globalization.SortVersion
  isExternal: false
  name: Equals(Object)
  nameWithType: SortVersion.Equals(Object)
  fullName: System.Globalization.SortVersion.Equals(Object)
- uid: System.Globalization.SortVersion.FullVersion
  parent: System.Globalization.SortVersion
  isExternal: false
  name: FullVersion
  nameWithType: SortVersion.FullVersion
  fullName: System.Globalization.SortVersion.FullVersion
- uid: System.Globalization.SortVersion.GetHashCode
  parent: System.Globalization.SortVersion
  isExternal: false
  name: GetHashCode()
  nameWithType: SortVersion.GetHashCode()
  fullName: System.Globalization.SortVersion.GetHashCode()
- uid: System.Globalization.SortVersion.op_Equality(System.Globalization.SortVersion,System.Globalization.SortVersion)
  parent: System.Globalization.SortVersion
  isExternal: false
  name: op_Equality(SortVersion,SortVersion)
  nameWithType: SortVersion.op_Equality(SortVersion,SortVersion)
  fullName: System.Globalization.SortVersion.op_Equality(SortVersion,SortVersion)
- uid: System.Globalization.SortVersion.op_Inequality(System.Globalization.SortVersion,System.Globalization.SortVersion)
  parent: System.Globalization.SortVersion
  isExternal: false
  name: op_Inequality(SortVersion,SortVersion)
  nameWithType: SortVersion.op_Inequality(SortVersion,SortVersion)
  fullName: System.Globalization.SortVersion.op_Inequality(SortVersion,SortVersion)
- uid: System.Globalization.SortVersion.SortId
  parent: System.Globalization.SortVersion
  isExternal: false
  name: SortId
  nameWithType: SortVersion.SortId
  fullName: System.Globalization.SortVersion.SortId
- uid: System.Globalization.SortVersion.#ctor*
  parent: System.Globalization.SortVersion
  isExternal: false
  name: SortVersion
  nameWithType: SortVersion.SortVersion
- uid: System.Globalization.SortVersion.Equals*
  parent: System.Globalization.SortVersion
  isExternal: false
  name: Equals
  nameWithType: SortVersion.Equals
- uid: System.Globalization.SortVersion.FullVersion*
  parent: System.Globalization.SortVersion
  isExternal: false
  name: FullVersion
  nameWithType: SortVersion.FullVersion
- uid: System.Globalization.SortVersion.GetHashCode*
  parent: System.Globalization.SortVersion
  isExternal: false
  name: GetHashCode
  nameWithType: SortVersion.GetHashCode
- uid: System.Globalization.SortVersion.op_Equality*
  parent: System.Globalization.SortVersion
  isExternal: false
  name: op_Equality
  nameWithType: SortVersion.op_Equality
- uid: System.Globalization.SortVersion.op_Inequality*
  parent: System.Globalization.SortVersion
  isExternal: false
  name: op_Inequality
  nameWithType: SortVersion.op_Inequality
- uid: System.Globalization.SortVersion.SortId*
  parent: System.Globalization.SortVersion
  isExternal: false
  name: SortId
  nameWithType: SortVersion.SortId
