### YamlMime:ManagedReference
items:
- uid: System.Net.ServicePointManager
  id: ServicePointManager
  children:
  - System.Net.ServicePointManager.CertificatePolicy
  - System.Net.ServicePointManager.CheckCertificateRevocationList
  - System.Net.ServicePointManager.DefaultConnectionLimit
  - System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  - System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  - System.Net.ServicePointManager.DnsRefreshTimeout
  - System.Net.ServicePointManager.EnableDnsRoundRobin
  - System.Net.ServicePointManager.EncryptionPolicy
  - System.Net.ServicePointManager.Expect100Continue
  - System.Net.ServicePointManager.FindServicePoint(System.Uri)
  - System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  - System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  - System.Net.ServicePointManager.MaxServicePointIdleTime
  - System.Net.ServicePointManager.MaxServicePoints
  - System.Net.ServicePointManager.ReusePort
  - System.Net.ServicePointManager.SecurityProtocol
  - System.Net.ServicePointManager.ServerCertificateValidationCallback
  - System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  - System.Net.ServicePointManager.UseNagleAlgorithm
  langs:
  - csharp
  name: ServicePointManager
  nameWithType: ServicePointManager
  fullName: System.Net.ServicePointManager
  type: Class
  summary: "管理的集合<xref href=&quot;System.Net.ServicePoint&quot;></xref>物件。"
  remarks: "ServicePointManager 是用來建立、 維護及刪除<xref:System.Net.ServicePoint>類別</xref:System.Net.ServicePoint>的執行個體的靜態類別       當應用程式要求透過 ServicePointManager 物件對網際網路資源統一資源識別元 (URI) 的連接時，會傳回 ServicePointManager<xref:System.Net.ServicePoint>物件，其中包含連接資訊的主機和 URI 所識別的配置。</xref:System.Net.ServicePoint> 如果沒有現有<xref:System.Net.ServicePoint>物件，主應用程式和配置，ServicePointManager 物件會傳回現有<xref:System.Net.ServicePoint>物件; 否則 ServicePointManager 物件建立新<xref:System.Net.ServicePoint>物件。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint>       .NET Framework 4.6 包含新的安全性功能會封鎖不安全的加密與雜湊演算法的連線。 使用 TLS/SSL 透過例如 HttpClient、 HttpWebRequest、 FTPClient、 SmtpClient、 SslStream 」 等的 Api，並以.NET Framework 4.6 為目標的應用程式預設會取得更安全的行為。       開發人員可能想要取消這個行為，以維護與 RC4 服務以其現有 SSL3 服務或 TLS 的互通性。 [這篇文章](https://support.microsoft.com/kb/3069494)說明如何修改您的程式碼，讓新的行為會停用。"
  example:
  - "The following code example creates a <xref:System.Net.ServicePoint> object for connections to the URI www.contoso.com.  \n  \n [!code-cs[Classic ServicePoint Example#1](~/add/codesnippet/csharp/t-system.net.servicepoin_1.cs)]\n [!code-cpp[Classic ServicePoint Example#1](~/add/codesnippet/cpp/t-system.net.servicepoin_1.cpp)]\n [!code-vb[Classic ServicePoint Example#1](~/add/codesnippet/visualbasic/t-system.net.servicepoin_1.vb)]"
  syntax:
    content: public class ServicePointManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.CertificatePolicy
  id: CertificatePolicy
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
  fullName: System.Net.ServicePointManager.CertificatePolicy
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得或設定伺服器憑證原則。"
  remarks: "當 CertificatePolicy 屬性設定為<xref:System.Net.ICertificatePolicy>介面物件<xref:System.Net.ServicePointManager>物件會使用該執行個體，而不是預設的憑證原則中定義的憑證原則。</xref:System.Net.ServicePointManager> </xref:System.Net.ICertificatePolicy>       預設的憑證原則允許有效的憑證和有效的憑證已過期。"
  example:
  - "The following code example shows how to catch a certificate policy exception for a custom certificate policy. It assumes that the certificate policy object has been defined, that the Uniform Resource Identifier (URI) for the Web resource is contained in the variable `myUri`, and that there is a method named `ProcessResponse` that performs the work of the application.  \n  \n [!code-cpp[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/cpp/p-system.net.servicepoin_14_1.cpp)]\n [!code-cs[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/csharp/p-system.net.servicepoin_14_1.cs)]\n [!code-vb[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_14_1.vb)]"
  syntax:
    content: public static System.Net.ICertificatePolicy CertificatePolicy { get; set; }
    return:
      type: System.Net.ICertificatePolicy
      description: "物件，用於實作<xref href=&quot;System.Net.ICertificatePolicy&quot;></xref>介面。"
  overload: System.Net.ServicePointManager.CertificatePolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList
  id: CheckCertificateRevocationList
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
  fullName: System.Net.ServicePointManager.CheckCertificateRevocationList
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得或設定<xref:System.Boolean>值，指出是否根據憑證授權單位撤銷清單檢查憑證。</xref:System.Boolean>"
  remarks: "CheckCertificateRevocationList 時`true`，根據憑證授權撤銷清單中，檢查憑證的憑證驗證程序的一部分。 預設值是`false`。"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_13_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_13_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_13_1.cs)]"
  syntax:
    content: public static bool CheckCertificateRevocationList { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果檢查憑證撤銷清單。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.ServicePointManager.CheckCertificateRevocationList*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultConnectionLimit
  id: DefaultConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultConnectionLimit
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得或設定所允許的同時連線數目上限<xref href=&quot;System.Net.ServicePoint&quot;></xref>物件。"
  remarks: "DefaultConnectionLimit 屬性會設定預設的並行連線數目上限，<xref:System.Net.ServicePointManager>物件指派給<xref:System.Net.ServicePoint.ConnectionLimit%2A>屬性建立時<xref:System.Net.ServicePoint>物件。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint.ConnectionLimit%2A> </xref:System.Net.ServicePointManager>       變更 DefaultConnectionLimit 屬性有任何影響，對現有<xref:System.Net.ServicePoint>物件; 它只會影響<xref:System.Net.ServicePoint>初始化之後變更的物件。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint> 若直接或透過組態尚未設定此屬性的值，預設值為常數<xref:System.Net.ServicePointManager.DefaultPersistentConnectionLimit>.</xref:System.Net.ServicePointManager.DefaultPersistentConnectionLimit>      > [!NOTE] > DefaultConnectionLimit 屬性的任何變更會影響 HTTP 1.0 和 HTTP 1.1 的連線。 不是個別修改連接限制 HTTP 1.0 和 HTTP 1.1 通訊協定。 使用時，在伺服器環境 (ASP.NET) DefaultConnectionLimit 預設值為更高版本的連接數目，這是 10。"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_8_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_8_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_8_1.cs)]"
  syntax:
    content: public static int DefaultConnectionLimit { get; set; }
    return:
      type: System.Int32
      description: "所允許的同時連線數目上限<xref href=&quot;System.Net.ServicePoint&quot;></xref>物件。 預設值為 2。 當應用程式以 ASP.NET 主機執行時，不能夠透過組態檔修改此屬性的值，如果 autoConfig property 設定為<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。 不過，您可以變更值以程式設計方式當 autoConfig 屬性是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。 當 AppDomain 載入時，請設定慣用的值一次。"
  overload: System.Net.ServicePointManager.DefaultConnectionLimit*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "DefaultConnectionLimit 小於或等於 0。"
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  id: DefaultNonPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultNonPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultNonPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: "允許在非持續連線 (4) 的預設數目<xref href=&quot;System.Net.ServicePoint&quot;></xref>物件連接到 HTTP/1.0 或更新版本的伺服器。 這個欄位是常數，但已不再使用.NET Framework 2.0 中。"
  syntax:
    content: public const int DefaultNonPersistentConnectionLimit = 4;
    return:
      type: System.Int32
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  id: DefaultPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: "持續連線 (2) 上允許的預設數目<xref href=&quot;System.Net.ServicePoint&quot;></xref>物件連接到 HTTP/1.1 或更新版本的伺服器。 這個欄位是常數，用來初始化<> *> 屬性如果的值<> *> 屬性尚未設定直接或透過組態。"
  remarks: ''
  example:
  - "The following code example sets the <xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A> property using this field.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/f-system.net.servicepoin_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/f-system.net.servicepoin_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/f-system.net.servicepoin_1.cs)]"
  syntax:
    content: public const int DefaultPersistentConnectionLimit = 2;
    return:
      type: System.Int32
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DnsRefreshTimeout
  id: DnsRefreshTimeout
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
  fullName: System.Net.ServicePointManager.DnsRefreshTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得或設定值，指出多久網域名稱服務 (DNS) 解析被視為有效。"
  remarks: ''
  example:
  - "The following code example sets this property.  \n  \n [!code-vb[System.Net.ServicePointWhidbey#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_21_1.vb)]\n [!code-cpp[System.Net.ServicePointWhidbey#1](~/add/codesnippet/cpp/p-system.net.servicepoin_21_1.cpp)]\n [!code-cs[System.Net.ServicePointWhidbey#1](~/add/codesnippet/csharp/p-system.net.servicepoin_21_1.cs)]"
  syntax:
    content: public static int DnsRefreshTimeout { get; set; }
    return:
      type: System.Int32
      description: "逾時值，以毫秒為單位。 值為-1 表示無限逾時期間。 預設值為 120,000 毫秒 （兩分鐘）。"
  overload: System.Net.ServicePointManager.DnsRefreshTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin
  id: EnableDnsRoundRobin
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
  fullName: System.Net.ServicePointManager.EnableDnsRoundRobin
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得或設定值，這個值，指出是否在適用的網際網路通訊協定 (IP) 位址間循環的網域名稱服務 (DNS) 解析。"
  remarks: "多個 IP 位址與主機名稱相關聯時，DNS 解析通常會傳回第一個 IP 位址。 如果您將此屬性設定為`true`，則後續的 DNS 解決方案會循環顯示所有可用的 IP 位址之特定主控件。 此選項時，服務會使用 DNS 與負載平衡伺服器或伺服器叢集之間的機制。"
  example:
  - "The following code example sets this property.  \n  \n [!code-vb[System.Net.ServicePointWhidbey#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_17_1.vb)]\n [!code-cpp[System.Net.ServicePointWhidbey#1](~/add/codesnippet/cpp/p-system.net.servicepoin_17_1.cpp)]\n [!code-cs[System.Net.ServicePointWhidbey#1](~/add/codesnippet/csharp/p-system.net.servicepoin_17_1.cs)]"
  syntax:
    content: public static bool EnableDnsRoundRobin { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果 DNS 解析永遠傳回特定的主控件; 第一個 IP 位址否則<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.ServicePointManager.EnableDnsRoundRobin*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.EncryptionPolicy
  id: EncryptionPolicy
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
  fullName: System.Net.ServicePointManager.EncryptionPolicy
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得<xref href=&quot;System.Net.Security.EncryptionPolicy&quot;></xref>這個<xref href=&quot;System.Net.ServicePointManager&quot;></xref>執行個體。"
  remarks: "如果在組態檔中未指定值，EncryptionPolicy 屬性預設為<xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>。</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> 這套用至 SSL/TLS 工作階段上<xref:System.Net.ServicePointManager>執行個體。</xref:System.Net.ServicePointManager>       使用 Null 編碼器時，需要為<xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>。</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>設定加密原則"
  syntax:
    content: public static System.Net.Security.EncryptionPolicy EncryptionPolicy { get; }
    return:
      type: System.Net.Security.EncryptionPolicy
      description: "若要為此使用的加密原則<xref href=&quot;System.Net.ServicePointManager&quot;></xref>執行個體。"
  overload: System.Net.ServicePointManager.EncryptionPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.Expect100Continue
  id: Expect100Continue
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
  fullName: System.Net.ServicePointManager.Expect100Continue
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得或設定<xref:System.Boolean>值，可判斷是否有 100-繼續使用行為。</xref:System.Boolean>"
  remarks: "當這個屬性設定為`true`、 100-繼續使用行為。 用戶端會要求使用`PUT`和`POST`方法會將 Expect 標頭加入要求如果 Expect100Continue 屬性為`true`和<xref:System.Net.HttpWebRequest.ContentLength%2A>屬性大於零或<xref:System.Net.HttpWebRequest.SendChunked%2A>屬性為 true。</xref:System.Net.HttpWebRequest.SendChunked%2A> </xref:System.Net.HttpWebRequest.ContentLength%2A> 用戶端會預期收到 100-繼續回應的伺服器，表示用戶端應該傳送的回傳資料。 此機制可讓用戶端，以避免透過網路傳送大量資料時的伺服器會根據要求的標頭，想要拒絕的要求。       例如，假設 Expect100Continue 屬性是`false`。 當要求傳送到伺服器時，它包含的資料。 如果在讀取之後的要求標頭，伺服器需要驗證，且必須傳送 401 回應，用戶端必須重新傳送適當驗證標頭的資料。       如果這個屬性是`true`，要求標頭傳送到伺服器。 如果伺服器已拒絕該要求，它會傳送 100-繼續回應信號資料可以傳輸。 如果，就如同上述範例中，伺服器需要驗證，它會傳送 401 回應和用戶端已經傳送的資料。       變更這個屬性的值不會影響現有<xref:System.Net.ServicePoint>物件。</xref:System.Net.ServicePoint> 只新增<xref:System.Net.ServicePoint>受影響的變更之後所建立的物件。</xref:System.Net.ServicePoint>       100-繼續行為不會用於 HTTP 1.0 要求即使這個屬性設定為`true`。       預期 100-繼續行為完全 IETF RFC 2616 一節所述 10.1.1。"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_12_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_12_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_12_1.cs)]"
  syntax:
    content: public static bool Expect100Continue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要啟用 100-繼續行為。 預設值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.ServicePointManager.Expect100Continue*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri)
  id: FindServicePoint(System.Uri)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(Uri)
  nameWithType: ServicePointManager.FindServicePoint(Uri)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "尋找現有<xref href=&quot;System.Net.ServicePoint&quot;></xref>物件或建立新<xref href=&quot;System.Net.ServicePoint&quot;></xref>物件來管理與指定的通訊<xref:System.Uri>物件。</xref:System.Uri>"
  remarks: "FindServicePoint 方法會傳回<xref:System.Net.ServicePoint>與指定的網際網路主機名稱相關聯的物件。</xref:System.Net.ServicePoint> 如果沒有<xref:System.Net.ServicePoint>物件存在該主機，<xref:System.Net.ServicePointManager>物件會建立一個。</xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (Uri address);
    parameters:
    - id: address
      type: System.Uri
      description: "<xref:System.Uri>要聯繫的網際網路資源的物件。</xref:System.Uri>"
    return:
      type: System.Net.ServicePoint
      description: "<xref href=&quot;System.Net.ServicePoint&quot;> </xref>管理要求的通訊物件。"
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>address</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "最大數目<xref href=&quot;System.Net.ServicePoint&quot;></xref>中定義物件<xref:System.Net.ServicePointManager.MaxServicePoints*>已達到。</xref:System.Net.ServicePointManager.MaxServicePoints*>"
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  id: FindServicePoint(System.String,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(String,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(String,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(String,IWebProxy)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "尋找現有<xref href=&quot;System.Net.ServicePoint&quot;></xref>物件或建立新<xref href=&quot;System.Net.ServicePoint&quot;></xref>物件來管理通訊與指定的統一資源識別元 (URI)。"
  remarks: "<xref:System.Net.ServicePointManager.FindServicePoint%2A>方法會傳回<xref:System.Net.ServicePoint>與指定的網際網路主機名稱相關聯的物件。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.FindServicePoint%2A> 如果沒有<xref:System.Net.ServicePoint>物件存在該主機，<xref:System.Net.ServicePointManager>物件會建立一個。</xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  example:
  - "The following code example demonstrates calling this method to access a <xref:System.Net.ServicePoint> object.  \n  \n [!code-cpp[System.Net.ServicePoint#7](~/add/codesnippet/cpp/2fec5056-1106-4a0b-b9b3-_1.cpp)]\n [!code-vb[System.Net.ServicePoint#7](~/add/codesnippet/visualbasic/2fec5056-1106-4a0b-b9b3-_1.vb)]\n [!code-cs[System.Net.ServicePoint#7](~/add/codesnippet/csharp/2fec5056-1106-4a0b-b9b3-_1.cs)]"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (string uriString, System.Net.IWebProxy proxy);
    parameters:
    - id: uriString
      type: System.String
      description: "要聯繫的網際網路資源 URI。"
    - id: proxy
      type: System.Net.IWebProxy
      description: "此要求的 proxy 資料。"
    return:
      type: System.Net.ServicePoint
      description: "<xref href=&quot;System.Net.ServicePoint&quot;> </xref>管理要求的通訊物件。"
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "URI 中指定<code> uriString </code>無效。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "最大數目<xref href=&quot;System.Net.ServicePoint&quot;></xref>中定義物件<xref:System.Net.ServicePointManager.MaxServicePoints*>已達到。</xref:System.Net.ServicePointManager.MaxServicePoints*>"
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  id: FindServicePoint(System.Uri,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(Uri,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(Uri,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri,IWebProxy)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "尋找現有<xref href=&quot;System.Net.ServicePoint&quot;></xref>物件或建立新<xref href=&quot;System.Net.ServicePoint&quot;></xref>物件來管理與指定的通訊<xref:System.Uri>物件。</xref:System.Uri>"
  remarks: "<xref:System.Net.ServicePointManager.FindServicePoint%2A>方法會傳回<xref:System.Net.ServicePoint>與指定的網際網路主機名稱相關聯的物件。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.FindServicePoint%2A> 如果沒有<xref:System.Net.ServicePoint>物件存在該主機，<xref:System.Net.ServicePointManager>物件會建立一個。</xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (Uri address, System.Net.IWebProxy proxy);
    parameters:
    - id: address
      type: System.Uri
      description: "A<xref:System.Uri>物件，其中包含要聯繫的網際網路資源位址。</xref:System.Uri>"
    - id: proxy
      type: System.Net.IWebProxy
      description: "此要求的 proxy 資料。"
    return:
      type: System.Net.ServicePoint
      description: "<xref href=&quot;System.Net.ServicePoint&quot;> </xref>管理要求的通訊物件。"
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>address</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "最大數目<xref href=&quot;System.Net.ServicePoint&quot;></xref>中定義物件<xref:System.Net.ServicePointManager.MaxServicePoints*>已達到。</xref:System.Net.ServicePointManager.MaxServicePoints*>"
  platform:
  - net462
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime
  id: MaxServicePointIdleTime
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
  fullName: System.Net.ServicePointManager.MaxServicePointIdleTime
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得或設定的最大閒置時間<xref href=&quot;System.Net.ServicePoint&quot;></xref>物件。"
  remarks: "MaxServicePointIdleTime 屬性會設定的最大閒置時間的<xref:System.Net.ServicePointManager>物件指派給<xref:System.Net.ServicePoint.MaxIdleTime%2A>屬性建立時<xref:System.Net.ServicePoint>物件。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint.MaxIdleTime%2A> </xref:System.Net.ServicePointManager> 變更此值只會影響<xref:System.Net.ServicePoint>物件初始化的值變更之後。</xref:System.Net.ServicePoint>       之後<xref:System.Net.ServicePoint>物件已閒置中指定的時間<xref:System.Net.ServicePoint.MaxIdleTime%2A>，則適合進行記憶體回收。</xref:System.Net.ServicePoint.MaxIdleTime%2A> </xref:System.Net.ServicePoint> A<xref:System.Net.ServicePoint>物件處於閒置狀態時與相關聯的連接清單<xref:System.Net.ServicePoint>物件是空的。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint>"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#8](~/add/codesnippet/cpp/p-system.net.servicepoin_5_1.cpp)]\n [!code-vb[System.Net.ServicePoint#8](~/add/codesnippet/visualbasic/p-system.net.servicepoin_5_1.vb)]\n [!code-cs[System.Net.ServicePoint#8](~/add/codesnippet/csharp/p-system.net.servicepoin_5_1.cs)]"
  syntax:
    content: public static int MaxServicePointIdleTime { get; set; }
    return:
      type: System.Int32
      description: "最大閒置時間，以毫秒為單位的<xref href=&quot;System.Net.ServicePoint&quot;></xref>物件。 預設值為 100,000 毫秒 （100 秒）。"
  overload: System.Net.ServicePointManager.MaxServicePointIdleTime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "MaxServicePointIdleTime 是小於&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;或大於&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;。"
  platform:
  - net462
- uid: System.Net.ServicePointManager.MaxServicePoints
  id: MaxServicePoints
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
  fullName: System.Net.ServicePointManager.MaxServicePoints
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得或設定最大數目<xref href=&quot;System.Net.ServicePoint&quot;></xref>要在任何時間維護的物件。"
  remarks: "當您減少 MaxServicePoints 屬性下方的數字<xref:System.Net.ServicePoint>中是否存在，目前的物件<xref:System.Net.ServicePointManager>刪除<xref:System.Net.ServicePoint>物件的最長閒置的時間。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint> 如果數目<xref:System.Net.ServicePoint>具有使用中連接的物件是否大於 MaxServicePoints，值<xref:System.Net.ServicePointManager>物件刪除<xref:System.Net.ServicePoint>它們變成閒置狀態的物件。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#8](~/add/codesnippet/cpp/p-system.net.servicepoin_10_1.cpp)]\n [!code-vb[System.Net.ServicePoint#8](~/add/codesnippet/visualbasic/p-system.net.servicepoin_10_1.vb)]\n [!code-cs[System.Net.ServicePoint#8](~/add/codesnippet/csharp/p-system.net.servicepoin_10_1.cs)]"
  syntax:
    content: public static int MaxServicePoints { get; set; }
    return:
      type: System.Int32
      description: "最大數目<xref href=&quot;System.Net.ServicePoint&quot;></xref>維護的物件。 預設值是 0，表示沒有限制的數目<xref href=&quot;System.Net.ServicePoint&quot;></xref>物件。"
  overload: System.Net.ServicePointManager.MaxServicePoints*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "MaxServicePoints 為小於 0 或大於&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;。"
  platform:
  - net462
- uid: System.Net.ServicePointManager.ReusePort
  id: ReusePort
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
  fullName: System.Net.ServicePointManager.ReusePort
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "此屬性值設定為<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>導致從已使用原生通訊端選項 SO_REUSE_UNICASTPORT 通訊端上 HttpWebRequest 的所有傳出的 TCP 連接。 這會導致共用底層連出連接埠。 這是適用於在一段時間，以及連接埠耗盡的應用程式風險中進行到大量的連出連線的案例。"
  remarks: "預設值為 `false`。"
  syntax:
    content: public static bool ReusePort { get; set; }
    return:
      type: System.Boolean
      description: "傳回<xref:System.Boolean>.</xref:System.Boolean>"
  overload: System.Net.ServicePointManager.ReusePort*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.SecurityProtocol
  id: SecurityProtocol
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
  fullName: System.Net.ServicePointManager.SecurityProtocol
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得或設定所使用的安全性通訊協定<xref href=&quot;System.Net.ServicePoint&quot;></xref>物件管理<xref href=&quot;System.Net.ServicePointManager&quot;></xref>物件。"
  remarks: "此屬性選取要針對新的連接，使用安全超文字傳輸通訊協定 」 (HTTPS) 配置; 僅限使用的安全通訊端層 (SSL) 或傳輸層安全性 (TLS) 通訊協定版本不會變更現有的連接。       請注意，沒有預設值列出為此屬性，目的。 安全性橫向一直在改變，變更預設通訊協定和保護層級會隨時間改變以避免已知弱點的攻擊。 預設值會根據個別機器組態而有所不同，並在已安裝的軟體，並已套用修補程式。       使用特定的保護層級，或假設預設會使用指定的安全性層級上，您的程式碼應該永遠不會以隱含方式而定。 如果您的應用程式相依於特定的安全性層級使用，您必須明確指定的層級，然後檢查以確定它實際上是在已建立的連接上使用。 此外，您的程式碼應該設計成可承受支援通訊協定的變更，因此通常變更小事先通知與以降低新興的威脅。       .NET Framework 4.6 包含新的安全性功能會封鎖不安全的加密與雜湊演算法的連線。 使用 TLS/SSL 透過例如 HttpClient、 HttpWebRequest、 FTPClient、 SmtpClient、 SslStream 」 等的 Api，並以.NET Framework 4.6 為目標的應用程式預設會取得更安全的行為。       開發人員可能想要取消這個行為，以維護與 RC4 服務以其現有 SSL3 服務或 TLS 的互通性。 [這篇文章](https://support.microsoft.com/kb/3069494)說明如何修改您的程式碼，讓新的行為會停用。"
  syntax:
    content: public static System.Net.SecurityProtocolType SecurityProtocol { get; set; }
    return:
      type: System.Net.SecurityProtocolType
      description: "其中一個值中定義<xref href=&quot;System.Net.SecurityProtocolType&quot;></xref>列舉型別。"
  overload: System.Net.ServicePointManager.SecurityProtocol*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "指定要設定屬性的值不是有效<xref href=&quot;System.Net.SecurityProtocolType&quot;></xref>列舉值。"
  platform:
  - net462
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback
  id: ServerCertificateValidationCallback
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
  fullName: System.Net.ServicePointManager.ServerCertificateValidationCallback
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得或設定用來驗證伺服器憑證的回呼。"
  remarks: "應用程式可以將 ServerCertificateValidationCallback 屬性設定用於用戶端的伺服器憑證的自訂驗證方法。 執行自訂驗證時`sender`參數傳遞至<xref:System.Net.Security.RemoteCertificateValidationCallback>可以是主機名稱的字串或物件衍生自<xref:System.Net.WebRequest>(<xref:System.Net.HttpWebRequest>，例如) 取決於<xref:System.Net.ServicePointManager.CertificatePolicy%2A>屬性。</xref:System.Net.ServicePointManager.CertificatePolicy%2A> </xref:System.Net.HttpWebRequest> </xref:System.Net.WebRequest> </xref:System.Net.Security.RemoteCertificateValidationCallback>       不使用自訂驗證時，憑證名稱是用來建立要求的主機名稱比較。 例如，如果<xref:System.Net.WebRequest.Create%28System.String%29>傳遞為參數&quot;https://www.contoso.com/default.hmtl&quot;的預設行為是讓用戶端檢查的憑證對 www.contoso.com。</xref:System.Net.WebRequest.Create%28System.String%29>"
  syntax:
    content: public static System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }
    return:
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "A <xref href=&quot;System.Net.Security.RemoteCertificateValidationCallback&quot;></xref>. 預設值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.ServicePointManager.ServerCertificateValidationCallback*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  id: SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: SetTcpKeepAlive(Boolean,Int32,Int32)
  nameWithType: ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  fullName: System.Net.ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "啟用或停用 TCP 連線的 keep-alive 選項。"
  remarks: "應用程式可以要求 TCP/IP 提供者使用的 TCP 連線的 keep-alive 封包。 預設為使用 TCP 連線的 keep-alive 封包會停用。       TCP 通訊端時的預設設定初始化 2 小時的設定保持逾時和保持連接間隔為 1 秒。 `keepAliveTime`參數指定以毫秒為單位，與第一個保持運作封包傳送之前的無活動逾時。 `keepAliveInterval`參數指定的間隔，以毫秒為單位，介於時如果未收到收條，後續 keep-alive 封包會傳送。 保持運作的探查數目不能變更，並設為 10。       如果 TCP 連線中斷時持續作用，因為<xref:System.Net.Sockets.SocketError>的<xref:System.Net.Sockets.SocketError>會傳回到任何呼叫正在進行中通訊端，而且任何後續呼叫都會失敗並<xref:System.Net.Sockets.SocketError>的<xref:System.Net.Sockets.SocketError>。</xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public static void SetTcpKeepAlive (bool enabled, int keepAliveTime, int keepAliveInterval);
    parameters:
    - id: enabled
      type: System.Boolean
      description: "如果設為 true，然後 TCP 保持連線選項在 TCP 連接將會使用指定啟用`keepAliveTime`和`keepAliveInterval`值。       如果設定為 false，則 TCP 保持連線選項會停用，並忽略其餘的參數。       預設值為 false。"
    - id: keepAliveTime
      type: System.Int32
      description: "指定在逾時，以毫秒為單位，無任何活動之前傳送第一個 keep-alive 封包。       值必須大於 0。  如果傳遞的值小於或等於零<xref:System.ArgumentOutOfRangeException>就會擲回。</xref:System.ArgumentOutOfRangeException>"
    - id: keepAliveInterval
      type: System.Int32
      description: "如果未收到收條，傳送後續 keep-alive 封包時，指定的間隔，以毫秒為單位，之間。       值必須大於 0。  如果傳遞的值小於或等於零<xref:System.ArgumentOutOfRangeException>就會擲回。</xref:System.ArgumentOutOfRangeException>"
  overload: System.Net.ServicePointManager.SetTcpKeepAlive*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "指定的值<code> keepAliveTime </code>或<code> keepAliveInterval </code>參數小於或等於 0。"
  platform:
  - net462
- uid: System.Net.ServicePointManager.UseNagleAlgorithm
  id: UseNagleAlgorithm
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
  fullName: System.Net.ServicePointManager.UseNagleAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "決定此管理的服務點是否使用 Nagle 演算法<xref href=&quot;System.Net.ServicePointManager&quot;></xref>物件。"
  remarks: "Nagle 演算法用來減少網路流量，緩衝處理小型資料封包，並將它們以單一封包傳輸。 此程序也稱為 「 nagling&quot;;它廣泛使用，因為它可以減少傳送的封包數目，並降低每個封包的額外負荷。       變更這個屬性的值不會影響現有<xref:System.Net.ServicePoint>物件。</xref:System.Net.ServicePoint> 只有新服務點建立之後變更會受到影響。       IETF RFC 896 的完整說明 Nagle 演算法。"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_20_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_20_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_20_1.cs)]"
  syntax:
    content: public static bool UseNagleAlgorithm { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要使用 Nagle 演算法;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.ServicePointManager.UseNagleAlgorithm*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.UriFormatException
  isExternal: true
  name: System.UriFormatException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Net.ServicePointManager.CertificatePolicy
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
  fullName: System.Net.ServicePointManager.CertificatePolicy
- uid: System.Net.ICertificatePolicy
  parent: System.Net
  isExternal: false
  name: ICertificatePolicy
  nameWithType: ICertificatePolicy
  fullName: System.Net.ICertificatePolicy
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
  fullName: System.Net.ServicePointManager.CheckCertificateRevocationList
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.ServicePointManager.DefaultConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultConnectionLimit
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultNonPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultNonPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
- uid: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
- uid: System.Net.ServicePointManager.DnsRefreshTimeout
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
  fullName: System.Net.ServicePointManager.DnsRefreshTimeout
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
  fullName: System.Net.ServicePointManager.EnableDnsRoundRobin
- uid: System.Net.ServicePointManager.EncryptionPolicy
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
  fullName: System.Net.ServicePointManager.EncryptionPolicy
- uid: System.Net.Security.EncryptionPolicy
  parent: System.Net.Security
  isExternal: false
  name: EncryptionPolicy
  nameWithType: EncryptionPolicy
  fullName: System.Net.Security.EncryptionPolicy
- uid: System.Net.ServicePointManager.Expect100Continue
  parent: System.Net.ServicePointManager
  isExternal: false
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
  fullName: System.Net.ServicePointManager.Expect100Continue
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(Uri)
  nameWithType: ServicePointManager.FindServicePoint(Uri)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri)
- uid: System.Net.ServicePoint
  parent: System.Net
  isExternal: false
  name: ServicePoint
  nameWithType: ServicePoint
  fullName: System.Net.ServicePoint
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(String,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(String,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(String,IWebProxy)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.IWebProxy
  parent: System.Net
  isExternal: true
  name: IWebProxy
  nameWithType: IWebProxy
  fullName: System.Net.IWebProxy
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(Uri,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(Uri,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri,IWebProxy)
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
  fullName: System.Net.ServicePointManager.MaxServicePointIdleTime
- uid: System.Net.ServicePointManager.MaxServicePoints
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
  fullName: System.Net.ServicePointManager.MaxServicePoints
- uid: System.Net.ServicePointManager.ReusePort
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
  fullName: System.Net.ServicePointManager.ReusePort
- uid: System.Net.ServicePointManager.SecurityProtocol
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
  fullName: System.Net.ServicePointManager.SecurityProtocol
- uid: System.Net.SecurityProtocolType
  parent: System.Net
  isExternal: false
  name: SecurityProtocolType
  nameWithType: SecurityProtocolType
  fullName: System.Net.SecurityProtocolType
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
  fullName: System.Net.ServicePointManager.ServerCertificateValidationCallback
- uid: System.Net.Security.RemoteCertificateValidationCallback
  parent: System.Net.Security
  isExternal: false
  name: RemoteCertificateValidationCallback
  nameWithType: RemoteCertificateValidationCallback
  fullName: System.Net.Security.RemoteCertificateValidationCallback
- uid: System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SetTcpKeepAlive(Boolean,Int32,Int32)
  nameWithType: ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  fullName: System.Net.ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
- uid: System.Net.ServicePointManager.UseNagleAlgorithm
  parent: System.Net.ServicePointManager
  isExternal: false
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
  fullName: System.Net.ServicePointManager.UseNagleAlgorithm
- uid: System.Net.ServicePointManager.CertificatePolicy*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
- uid: System.Net.ServicePointManager.DefaultConnectionLimit*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
- uid: System.Net.ServicePointManager.DnsRefreshTimeout*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
- uid: System.Net.ServicePointManager.EncryptionPolicy*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
- uid: System.Net.ServicePointManager.Expect100Continue*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
- uid: System.Net.ServicePointManager.FindServicePoint*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint
  nameWithType: ServicePointManager.FindServicePoint
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
- uid: System.Net.ServicePointManager.MaxServicePoints*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
- uid: System.Net.ServicePointManager.ReusePort*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
- uid: System.Net.ServicePointManager.SecurityProtocol*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
- uid: System.Net.ServicePointManager.SetTcpKeepAlive*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SetTcpKeepAlive
  nameWithType: ServicePointManager.SetTcpKeepAlive
- uid: System.Net.ServicePointManager.UseNagleAlgorithm*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
