### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.ReliableSession
  id: ReliableSession
  children:
  - System.ServiceModel.ReliableSession.#ctor
  - System.ServiceModel.ReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)
  - System.ServiceModel.ReliableSession.InactivityTimeout
  - System.ServiceModel.ReliableSession.Ordered
  langs:
  - csharp
  name: ReliableSession
  nameWithType: ReliableSession
  fullName: System.ServiceModel.ReliableSession
  type: Class
  summary: "提供方便存取可靠工作階段繫結項目，就可以使用其中一個系統提供的繫結的屬性。"
  remarks: "ReliableSession 類別中包含的屬性是包含的那些子集<xref:System.ServiceModel.Channels.ReliableSessionBindingElement>可從預先定義的繫結。</xref:System.ServiceModel.Channels.ReliableSessionBindingElement> 這個子集組成<xref:System.ServiceModel.ReliableSession.InactivityTimeout%2A>和<xref:System.ServiceModel.ReliableSession.Ordered%2A>屬性。</xref:System.ServiceModel.ReliableSession.Ordered%2A> </xref:System.ServiceModel.ReliableSession.InactivityTimeout%2A> ReliableSession 類別參考相同物件<xref:System.ServiceModel.Channels.ReliableSessionBindingElement>，因此，變更其中一個值會變更其他的值太。</xref:System.ServiceModel.Channels.ReliableSessionBindingElement> 此類別蒐集這兩個可靠工作階段繫結項目，同時進一步探索能力。"
  example:
  - "The following example shows how to create a new reliable session, and access and change the property values of that session. The ReliableSession class allows you to write:  \n  \n [!code-cs[UEReliableSession#1](~/add/codesnippet/csharp/t-system.servicemodel.re_0_1.cs)]\n [!code-vb[UEReliableSession#1](~/add/codesnippet/visualbasic/t-system.servicemodel.re_0_1.vb)]"
  syntax:
    content: public class ReliableSession
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.ReliableSession.#ctor
  id: '#ctor'
  parent: System.ServiceModel.ReliableSession
  langs:
  - csharp
  name: ReliableSession()
  nameWithType: ReliableSession.ReliableSession()
  fullName: System.ServiceModel.ReliableSession.ReliableSession()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "初始化的新執行個體<xref href=&quot;System.ServiceModel.ReliableSession&quot;></xref>類別。"
  syntax:
    content: public ReliableSession ();
    parameters: []
  overload: System.ServiceModel.ReliableSession.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)
  id: '#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)'
  parent: System.ServiceModel.ReliableSession
  langs:
  - csharp
  name: ReliableSession(ReliableSessionBindingElement)
  nameWithType: ReliableSession.ReliableSession(ReliableSessionBindingElement)
  fullName: System.ServiceModel.ReliableSession.ReliableSession(ReliableSessionBindingElement)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "初始化的新執行個體<xref href=&quot;System.ServiceModel.ReliableSession&quot;></xref>可靠工作階段繫結項目的類別。"
  remarks: ''
  example:
  - >-
    [!code-cs[UEReliableSession#1](~/add/codesnippet/csharp/80f1598c-ddfc-4656-a81f-_1.cs)]
     [!code-vb[UEReliableSession#1](~/add/codesnippet/visualbasic/80f1598c-ddfc-4656-a81f-_1.vb)]
  syntax:
    content: public ReliableSession (System.ServiceModel.Channels.ReliableSessionBindingElement reliableSessionBindingElement);
    parameters:
    - id: reliableSessionBindingElement
      type: System.ServiceModel.Channels.ReliableSessionBindingElement
      description: "<xref href=&quot;System.ServiceModel.Channels.ReliableSessionBindingElement&quot;> </xref>其屬性值用來初始化可靠工作階段。"
  overload: System.ServiceModel.ReliableSession.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>reliableSessionBindingElement</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ServiceModel.ReliableSession.InactivityTimeout
  id: InactivityTimeout
  parent: System.ServiceModel.ReliableSession
  langs:
  - csharp
  name: InactivityTimeout
  nameWithType: ReliableSession.InactivityTimeout
  fullName: System.ServiceModel.ReliableSession.InactivityTimeout
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "取得或設定服務可以維持非使用中，在關閉前的時間間隔。"
  remarks: "此屬性取得並設定的值<xref:System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout%2A>屬性。</xref:System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout%2A>       通道上的活動定義為收到應用程式或基礎結構訊息。 無活動逾時會控制讓非作用中的工作階段保持運作的時間的最大數量。 如果多個 InactivityTimeout 指定的時間間隔仍無任何活動，工作階段是由基礎結構和通道錯誤中止。 可靠工作階段會單方面。       如果傳送應用程式沒有訊息来傳送然後可靠工作階段是通常不會因無活動; 而發生錯誤改為 keep-alive 機制保留工作階段使用中無限期。 請注意，發送器可以獨立中止可靠工作階段，是否沒有應用程式所傳送或接收訊息。 因此，無活動逾時通常就會過期網路條件時，不接收任何類型的任何訊息，或如果在傳送端失敗。       設定此逾時，可防止伺服器抓安全性工作階段，如果用戶端不會關閉。 如果安全性工作階段已閒置的時間間隔的收到的訊息，它會關閉伺服器。 這可降低潛在的阻絕服務攻擊。       當使用可靠工作階段時，有兩個不同的無活動計時器，必須滿足才能保持連線運作。 如果其中一個無活動計時器引發會，然後連線中斷。      -第一個無活動計時器在可靠工作階段，並稱為 InactivityTimeout。 如果逾時期限內未不收到任何訊息，應用程式或基礎結構，就會引發這個無活動計時器。 基礎結構訊息是為了通道堆疊，例如保持運作中的通訊協定的其中一個或通知，而非包含應用程式資料所產生的訊息。      -第二個無活動計時器位於服務上，並使用<xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A>繫結的設定。</xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A> 如果逾時期限內未不收到任何應用程式訊息，就會引發這個無活動計時器。       如果其中一個無活動計時器引發，就會中斷連線，因為增加 InactivityTimeout 一旦大於<xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A>沒有任何作用。</xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A> 這兩種逾時的預設是 10 分鐘，因此您一定要同時增加兩者有所差異，使用可靠工作階段時。"
  example:
  - >-
    [!code-cs[UEReliableSession#2](~/add/codesnippet/csharp/p-system.servicemodel.re_0_1.cs)]
     [!code-vb[UEReliableSession#2](~/add/codesnippet/visualbasic/p-system.servicemodel.re_0_1.vb)]
  syntax:
    content: public TimeSpan InactivityTimeout { get; set; }
    return:
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>指定的服務處於非使用中，在關閉前的時間間隔。</xref:System.TimeSpan> 預設值是 10 分鐘。"
  overload: System.ServiceModel.ReliableSession.InactivityTimeout*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "設定的值是小於或等於零。"
  platform:
  - net462
- uid: System.ServiceModel.ReliableSession.Ordered
  id: Ordered
  parent: System.ServiceModel.ReliableSession
  langs:
  - csharp
  name: Ordered
  nameWithType: ReliableSession.Ordered
  fullName: System.ServiceModel.ReliableSession.Ordered
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "取得或設定值，指出訊息傳遞是否必須保留訊息傳送的順序。"
  remarks: "此屬性取得並設定的值<xref:System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered%2A>屬性。</xref:System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered%2A>"
  example:
  - >-
    [!code-cs[UEReliableSession#2](~/add/codesnippet/csharp/p-system.servicemodel.re_1_1.cs)]
     [!code-vb[UEReliableSession#2](~/add/codesnippet/visualbasic/p-system.servicemodel.re_1_1.vb)]
  syntax:
    content: public bool Ordered { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果訊息必須傳遞的順序在其中進行傳送。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceModel.ReliableSession.Ordered*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ServiceModel.ReliableSession.#ctor
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: ReliableSession()
  nameWithType: ReliableSession.ReliableSession()
  fullName: System.ServiceModel.ReliableSession.ReliableSession()
- uid: System.ServiceModel.ReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: ReliableSession(ReliableSessionBindingElement)
  nameWithType: ReliableSession.ReliableSession(ReliableSessionBindingElement)
  fullName: System.ServiceModel.ReliableSession.ReliableSession(ReliableSessionBindingElement)
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement
  parent: System.ServiceModel.Channels
  isExternal: false
  name: ReliableSessionBindingElement
  nameWithType: ReliableSessionBindingElement
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement
- uid: System.ServiceModel.ReliableSession.InactivityTimeout
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: InactivityTimeout
  nameWithType: ReliableSession.InactivityTimeout
  fullName: System.ServiceModel.ReliableSession.InactivityTimeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.ServiceModel.ReliableSession.Ordered
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: Ordered
  nameWithType: ReliableSession.Ordered
  fullName: System.ServiceModel.ReliableSession.Ordered
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.ReliableSession.#ctor*
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: ReliableSession
  nameWithType: ReliableSession.ReliableSession
- uid: System.ServiceModel.ReliableSession.InactivityTimeout*
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: InactivityTimeout
  nameWithType: ReliableSession.InactivityTimeout
- uid: System.ServiceModel.ReliableSession.Ordered*
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: Ordered
  nameWithType: ReliableSession.Ordered
