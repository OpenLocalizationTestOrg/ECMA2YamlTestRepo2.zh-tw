### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.Menu
  id: Menu
  children:
  - System.Windows.Forms.Menu.#ctor(System.Windows.Forms.MenuItem[])
  - System.Windows.Forms.Menu.CloneMenu(System.Windows.Forms.Menu)
  - System.Windows.Forms.Menu.CreateMenuHandle
  - System.Windows.Forms.Menu.Dispose(System.Boolean)
  - System.Windows.Forms.Menu.FindHandle
  - System.Windows.Forms.Menu.FindMenuItem(System.Int32,System.IntPtr)
  - System.Windows.Forms.Menu.FindMergePosition(System.Int32)
  - System.Windows.Forms.Menu.FindShortcut
  - System.Windows.Forms.Menu.GetContextMenu
  - System.Windows.Forms.Menu.GetMainMenu
  - System.Windows.Forms.Menu.Handle
  - System.Windows.Forms.Menu.IsParent
  - System.Windows.Forms.Menu.MdiListItem
  - System.Windows.Forms.Menu.MenuItems
  - System.Windows.Forms.Menu.MergeMenu(System.Windows.Forms.Menu)
  - System.Windows.Forms.Menu.Name
  - System.Windows.Forms.Menu.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)
  - System.Windows.Forms.Menu.Tag
  - System.Windows.Forms.Menu.ToString
  langs:
  - csharp
  name: Menu
  nameWithType: Menu
  fullName: System.Windows.Forms.Menu
  type: Class
  summary: "代表所有功能表的基本功能。 雖然<xref href=&quot;System.Windows.Forms.ToolStripDropDown&quot;></xref>和<xref href=&quot;System.Windows.Forms.ToolStripDropDownMenu&quot;></xref>取代，並將功能加入至前一版的功能表控制項，功能表會保留回溯相容性及供未來使用如果您選擇。"
  remarks: "這個類別是基底類別<xref:System.Windows.Forms.MainMenu>， <xref:System.Windows.Forms.MenuItem>，和<xref:System.Windows.Forms.ContextMenu>類別。</xref:System.Windows.Forms.ContextMenu> </xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.MainMenu> 您無法建立此類別的執行個體。 功能表的應用程式 consist<xref:System.Windows.Forms.MenuItem>物件。</xref:System.Windows.Forms.MenuItem> 這些可以包含其他<xref:System.Windows.Forms.MenuItem>物件，代表子功能表項目。</xref:System.Windows.Forms.MenuItem> <xref:System.Windows.Forms.MenuItem>物件可以儲存在<xref:System.Windows.Forms.MainMenu>顯示做為表單的整個功能表結構或<xref:System.Windows.Forms.ContextMenu>用來顯示捷徑功能表。</xref:System.Windows.Forms.ContextMenu> </xref:System.Windows.Forms.MainMenu> </xref:System.Windows.Forms.MenuItem> 這個類別會提供很常見的功能表上的所有類別的功能。       不同於多個基底類別，功能表類別會使用其衍生的類別，來定義許多屬性。 如果您使用您的功能表中的多重文件介面 (MDI) 應用程式，您可以使用<xref:System.Windows.Forms.Menu.MdiListItem%2A>屬性來指定<xref:System.Windows.Forms.MenuItem>會在您的應用程式中顯示開啟的 MDI 子表單的清單。</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.Menu.MdiListItem%2A> <xref:System.Windows.Forms.Menu.MenuItems%2A>屬性包含一份<xref:System.Windows.Forms.MenuItem>物件儲存在功能表上的類別。</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.Menu.MenuItems%2A> 如<xref:System.Windows.Forms.MainMenu>或<xref:System.Windows.Forms.ContextMenu>，這個屬性會包含所有<xref:System.Windows.Forms.MenuItem>顯示物件。</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.ContextMenu> </xref:System.Windows.Forms.MainMenu> <xref:System.Windows.Forms.MenuItem><xref:System.Windows.Forms.Menu.MenuItems%2A>屬性代表與其關聯的子功能表項目</xref:System.Windows.Forms.Menu.MenuItems%2A>，</xref:System.Windows.Forms.MenuItem>       除了內容所提供的所有功能表在衍生的類別中，功能表類別也提供方法，例如<xref:System.Windows.Forms.Menu.CloneMenu%2A>和<xref:System.Windows.Forms.Menu.MergeMenu%2A>、 可讓您從現有的功能表，建立新的功能表和也合併兩個功能表結構在一起。</xref:System.Windows.Forms.Menu.MergeMenu%2A> </xref:System.Windows.Forms.Menu.CloneMenu%2A>       功能表類別也會定義巢狀的類別<xref:System.Windows.Forms.Menu.MenuItemCollection>.</xref:System.Windows.Forms.Menu.MenuItemCollection> 這個類別定義的集合，<xref:System.Windows.Forms.MenuItem>所使用的物件<xref:System.Windows.Forms.Menu.MenuItems%2A>屬性。</xref:System.Windows.Forms.Menu.MenuItems%2A> </xref:System.Windows.Forms.MenuItem> 您可以使用的方法<xref:System.Windows.Forms.Menu.MenuItemCollection>類別來新增和移除功能表項目從<xref:System.Windows.Forms.MainMenu>， <xref:System.Windows.Forms.ContextMenu>，或<xref:System.Windows.Forms.MenuItem>.</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.ContextMenu> </xref:System.Windows.Forms.MainMenu> </xref:System.Windows.Forms.Menu.MenuItemCollection>"
  example:
  - "The following code example uses the derived class, <xref:System.Windows.Forms.MenuItem>, to create a menu structure for a form. The example code adds a <xref:System.Windows.Forms.MenuItem> to represent the top-level menu item, adds a submenu item to it for selecting a font size, and then adds two submenu items to that menu item that represent large and small font choices in an application. The example requires that there is a <xref:System.Windows.Forms.MainMenu> object named `mainMenu1` and four <xref:System.Windows.Forms.MenuItem> objects named `menuItem1`, `menuItem2`, `menuItem3`, and `menuItem4`.  \n  \n [!code-cpp[Classic Menu Example#1](~/add/codesnippet/cpp/t-system.windows.forms.m_4_1.cpp)]\n [!code-cs[Classic Menu Example#1](~/add/codesnippet/csharp/t-system.windows.forms.m_4_1.cs)]\n [!code-vb[Classic Menu Example#1](~/add/codesnippet/visualbasic/t-system.windows.forms.m_4_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.ListBindable(false)]

      [System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")]

      public abstract class Menu : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Windows.Forms.Menu.#ctor(System.Windows.Forms.MenuItem[])
  id: '#ctor(System.Windows.Forms.MenuItem[])'
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: Menu(MenuItem[])
  nameWithType: Menu.Menu(MenuItem[])
  fullName: System.Windows.Forms.Menu.Menu(MenuItem[])
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.Forms.Menu&quot;></xref>類別。"
  remarks: "因為<xref:System.Windows.Forms.Menu>繼承的類別可以呼叫功能表的建構函式僅是抽象類別。</xref:System.Windows.Forms.Menu>"
  syntax:
    content: protected Menu (System.Windows.Forms.MenuItem[] items);
    parameters:
    - id: items
      type: System.Windows.Forms.MenuItem[]
      description: "類型的陣列<xref href=&quot;System.Windows.Forms.MenuItem&quot;></xref>包含要加入至功能表的物件。"
  overload: System.Windows.Forms.Menu.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.CloneMenu(System.Windows.Forms.Menu)
  id: CloneMenu(System.Windows.Forms.Menu)
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: CloneMenu(Menu)
  nameWithType: Menu.CloneMenu(Menu)
  fullName: System.Windows.Forms.Menu.CloneMenu(Menu)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "複製<xref href=&quot;System.Windows.Forms.Menu&quot;></xref>做為參數傳遞至目前<xref href=&quot;System.Windows.Forms.Menu&quot;> </xref>。"
  remarks: "這個方法會複製整個清單<xref:System.Windows.Forms.MenuItem>物件 (儲存在<xref:System.Windows.Forms.Menu>中傳遞給`menuSrc`) 至目前功能表。</xref:System.Windows.Forms.Menu> </xref:System.Windows.Forms.MenuItem> 您也可以在衍生類別中使用這個方法，複製<xref:System.Windows.Forms.MenuItem>物件。</xref:System.Windows.Forms.MenuItem> 他們再能夠重複使用衍生自其他類別<xref:System.Windows.Forms.Menu>，例如<xref:System.Windows.Forms.MainMenu>， <xref:System.Windows.Forms.ContextMenu>，和<xref:System.Windows.Forms.MenuItem>。</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.ContextMenu> </xref:System.Windows.Forms.MainMenu> </xref:System.Windows.Forms.Menu>"
  example:
  - "This example creates a main menu, `mainMenu1`, with three menu items: `File`, `Edit`, and `View`. It then uses the CloneMenu method to copy `mainMenu1` into `mainMenu2`. The cloned menu is then assigned to the form and displayed. This program requires that you have already created a <xref:System.Windows.Forms.Form> named `Form1`.  \n  \n [!code-cs[CloneMenu#1](~/add/codesnippet/csharp/m-system.windows.forms.m_6_1.cs)]\n [!code-vb[CloneMenu#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_6_1.vb)]\n [!code-cpp[CloneMenu#1](~/add/codesnippet/cpp/m-system.windows.forms.m_6_1.cpp)]"
  syntax:
    content: protected void CloneMenu (System.Windows.Forms.Menu menuSrc);
    parameters:
    - id: menuSrc
      type: System.Windows.Forms.Menu
      description: "<xref href=&quot;System.Windows.Forms.Menu&quot;> </xref>複製。"
  overload: System.Windows.Forms.Menu.CloneMenu*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.CreateMenuHandle
  id: CreateMenuHandle
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: CreateMenuHandle()
  nameWithType: Menu.CreateMenuHandle()
  fullName: System.Windows.Forms.Menu.CreateMenuHandle()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "建立新的控制代碼<xref href=&quot;System.Windows.Forms.Menu&quot;> </xref>。"
  syntax:
    content: protected virtual IntPtr CreateMenuHandle ();
    parameters: []
    return:
      type: System.IntPtr
      description: "如果方法成功; 功能表的控制代碼否則， <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.Menu.CreateMenuHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Menu.Dispose(Boolean)
  fullName: System.Windows.Forms.Menu.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "處置的資源，所使用的記憶體以外<xref href=&quot;System.Windows.Forms.Menu&quot;> </xref>。"
  remarks: "當您完成使用<xref:System.Windows.Forms.Menu>.</xref:System.Windows.Forms.Menu>呼叫 Dispose Dispose 方法會使<xref:System.Windows.Forms.Menu>中無法使用的狀態。</xref:System.Windows.Forms.Menu> 在呼叫 Dispose 之後，您必須釋放所有參考<xref:System.Windows.Forms.Menu>讓它所佔用的記憶體可由記憶體回收收回。</xref:System.Windows.Forms.Menu>      > [!NOTE] > 永遠呼叫 Dispose 之後，再放開您的最後一個參考至<xref:System.Windows.Forms.Menu>。</xref:System.Windows.Forms.Menu> 否則，資源<xref:System.Windows.Forms.Menu>是使用之前，將不會釋放記憶體回收集合呼叫<xref:System.Windows.Forms.Menu>物件的解構函式。</xref:System.Windows.Forms.Menu> </xref:System.Windows.Forms.Menu>"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>表示釋放 managed 和 unmanaged 資源，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>表示只釋放 unmanaged 的資源。"
  overload: System.Windows.Forms.Menu.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.FindHandle
  id: FindHandle
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: FindHandle
  nameWithType: Menu.FindHandle
  fullName: System.Windows.Forms.Menu.FindHandle
  type: Field
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "指定<xref:System.Windows.Forms.Menu.FindMenuItem*>方法應該搜尋控制代碼。</xref:System.Windows.Forms.Menu.FindMenuItem*>"
  syntax:
    content: public const int FindHandle = 0;
    return:
      type: System.Int32
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.FindMenuItem(System.Int32,System.IntPtr)
  id: FindMenuItem(System.Int32,System.IntPtr)
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: FindMenuItem(Int32,IntPtr)
  nameWithType: Menu.FindMenuItem(Int32,IntPtr)
  fullName: System.Windows.Forms.Menu.FindMenuItem(Int32,IntPtr)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得<xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref> ，其中包含指定的值。"
  remarks: "若要搜尋<xref:System.Windows.Forms.MenuItem>使用控制代碼，傳入<xref:System.Windows.Forms.Menu.FindHandle>欄位做為型別，以及的控制代碼<xref:System.Windows.Forms.MenuItem>您想要尋找做為值。</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.Menu.FindHandle> </xref:System.Windows.Forms.MenuItem>       若要搜尋<xref:System.Windows.Forms.MenuItem>使用捷徑，傳入<xref:System.Windows.Forms.Menu.FindShortcut>欄位做為型別，並快顯值<xref:System.Windows.Forms.MenuItem>您想要尋找做為值。</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.Menu.FindShortcut> </xref:System.Windows.Forms.MenuItem>"
  syntax:
    content: public System.Windows.Forms.MenuItem FindMenuItem (int type, IntPtr value);
    parameters:
    - id: type
      type: System.Int32
      description: "要用來尋找項目類型<xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref>。"
    - id: value
      type: System.IntPtr
      description: "要用來尋找項目<xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref>。"
    return:
      type: System.Windows.Forms.MenuItem
      description: "<xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref>符合值，否則<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.Menu.FindMenuItem*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.FindMergePosition(System.Int32)
  id: FindMergePosition(System.Int32)
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: FindMergePosition(Int32)
  nameWithType: Menu.FindMergePosition(Int32)
  fullName: System.Windows.Forms.Menu.FindMergePosition(Int32)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "傳回功能表項目應插入功能表的位置。"
  remarks: "功能表項目的合併順序指定的相對位置，此功能表項目會假設如果功能表結構<xref:System.Windows.Forms.MenuItem>包含在與另一個合併。</xref:System.Windows.Forms.MenuItem>"
  syntax:
    content: protected int FindMergePosition (int mergeOrder);
    parameters:
    - id: mergeOrder
      type: System.Int32
      description: "要合併的功能表項目的合併順序位置。"
    return:
      type: System.Int32
      description: "功能表項目應插入功能表的位置。"
  overload: System.Windows.Forms.Menu.FindMergePosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.FindShortcut
  id: FindShortcut
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: FindShortcut
  nameWithType: Menu.FindShortcut
  fullName: System.Windows.Forms.Menu.FindShortcut
  type: Field
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "指定<xref:System.Windows.Forms.Menu.FindMenuItem*>方法應該搜尋的捷徑。</xref:System.Windows.Forms.Menu.FindMenuItem*>"
  syntax:
    content: public const int FindShortcut = 1;
    return:
      type: System.Int32
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.GetContextMenu
  id: GetContextMenu
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: GetContextMenu()
  nameWithType: Menu.GetContextMenu()
  fullName: System.Windows.Forms.Menu.GetContextMenu()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得<xref href=&quot;System.Windows.Forms.ContextMenu&quot;> </xref> ，其中包含這個功能表。"
  remarks: "這個方法可讓您取得參考的<xref:System.Windows.Forms.ContextMenu>這個功能表是自主的。</xref:System.Windows.Forms.ContextMenu> 這個屬性會傳回`null`如果功能表未包含在<xref:System.Windows.Forms.ContextMenu>.</xref:System.Windows.Forms.ContextMenu> [] 功能表中可能發生這<xref:System.Windows.Forms.MenuItem>或<xref:System.Windows.Forms.MainMenu>，或如果功能表未包含任何功能表中。</xref:System.Windows.Forms.MainMenu> </xref:System.Windows.Forms.MenuItem> 判斷是否目前正在使用功能表，並決定在何處，您可以使用這個屬性。"
  example:
  - "In this example, you use the GetContextMenu method to obtain a reference to the shortcut menu that contains `menuItem1` or `menuItem2`, and display the shortcut menu information in a message box. You programmatically create a shortcut menu with two items, `New` and `Open`. You then add functionality to these items by creating the appropriate event handlers. When you run the example, you get a message box that tells you to right-click the form in order to display the shortcut menu. Then, when you click a menu item, you get another message that tells which item has been clicked and displays the information on the containing shortcut menu. This example requires that you have already created a <xref:System.Windows.Forms.Form> named `Form1`.  \n  \n [!code-cs[GetContextMenu2#1](~/add/codesnippet/csharp/m-system.windows.forms.m_15_1.cs)]\n [!code-cpp[GetContextMenu2#1](~/add/codesnippet/cpp/m-system.windows.forms.m_15_1.cpp)]\n [!code-vb[GetContextMenu2#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_15_1.vb)]"
  syntax:
    content: public System.Windows.Forms.ContextMenu GetContextMenu ();
    parameters: []
    return:
      type: System.Windows.Forms.ContextMenu
      description: "<xref href=&quot;System.Windows.Forms.ContextMenu&quot;> </xref> ，其中包含這個功能表。 預設值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.Menu.GetContextMenu*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.GetMainMenu
  id: GetMainMenu
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: GetMainMenu()
  nameWithType: Menu.GetMainMenu()
  fullName: System.Windows.Forms.Menu.GetMainMenu()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得<xref href=&quot;System.Windows.Forms.MainMenu&quot;> </xref> ，其中包含這個功能表。"
  remarks: "這個方法可讓您取得參考的<xref:System.Windows.Forms.MainMenu>這個功能表是目前所在的。</xref:System.Windows.Forms.MainMenu> 這個屬性會傳回`null`如果功能表未包含在<xref:System.Windows.Forms.MainMenu>.</xref:System.Windows.Forms.MainMenu> [] 功能表中可能發生這<xref:System.Windows.Forms.MenuItem>或<xref:System.Windows.Forms.ContextMenu>，或如果功能表未包含任何功能表中。</xref:System.Windows.Forms.ContextMenu> </xref:System.Windows.Forms.MenuItem> 判斷是否目前正在使用功能表，並決定在何處，您可以使用這個屬性。"
  example:
  - "This example declares a <xref:System.Windows.Forms.MainMenu>, `mainMenu1`, and four menu items, `menuItem1`, `menuItem2`, `menuItem3`, and `menuItem4`. Only the first three menu items are added to `mainMenu1` for display. The program then checks to see if `menuItem3` is being used, which is `true`, and determines the form in which it is used. A label text is used to display the name of the form that hosts the <xref:System.Windows.Forms.MainMenu>. If you change the menu item being tested to `menuItem4`, the condition evaluates to `false` because `menuItem4` has never been used. This example requires that you have created a <xref:System.Windows.Forms.Form> named `MyForm` that includes a <xref:System.Windows.Forms.Label> named `label1`.  \n  \n [!code-cpp[GetMainMenu#1](~/add/codesnippet/cpp/m-system.windows.forms.m_8_1.cpp)]\n [!code-cs[GetMainMenu#1](~/add/codesnippet/csharp/m-system.windows.forms.m_8_1.cs)]\n [!code-vb[GetMainMenu#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_8_1.vb)]"
  syntax:
    content: public System.Windows.Forms.MainMenu GetMainMenu ();
    parameters: []
    return:
      type: System.Windows.Forms.MainMenu
      description: "<xref href=&quot;System.Windows.Forms.MainMenu&quot;> </xref> ，其中包含這個功能表。"
  overload: System.Windows.Forms.Menu.GetMainMenu*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.Handle
  id: Handle
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: Handle
  nameWithType: Menu.Handle
  fullName: System.Windows.Forms.Menu.Handle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得值，表示功能表的視窗控制代碼。"
  remarks: "您可以使用這個屬性來取得執行特殊的作業，此類別或其衍生的類別所提供的功能之外的功能表來功能表的控制代碼。"
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: "功能表 HMENU 值。"
  overload: System.Windows.Forms.Menu.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.IsParent
  id: IsParent
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: IsParent
  nameWithType: Menu.IsParent
  fullName: System.Windows.Forms.Menu.IsParent
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得值，指出這個功能表是否包含任何功能表項目。 這個屬性是唯讀的。"
  remarks: "您可以使用這個方法來判斷是否有任何<xref:System.Windows.Forms.MenuItem>物件會指派給這個功能表。</xref:System.Windows.Forms.MenuItem> 這相當於檢查`null`中<xref:System.Windows.Forms.Menu.MenuItems%2A>屬性。</xref:System.Windows.Forms.Menu.MenuItems%2A>"
  example:
  - "The following code example creates a <xref:System.Windows.Forms.MainMenu> with two <xref:System.Windows.Forms.MenuItem> objects. It then uses the IsParent property to determine whether `mainMenu1` contains menu items. If the condition evaluates `true`, it sets the <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> property to `true` and binds the main menu to the <xref:System.Windows.Forms.Form>. This example requires that you have a <xref:System.Windows.Forms.Form> created that is named `Form1`.  \n  \n [!code-cpp[IsParent#1](~/add/codesnippet/cpp/p-system.windows.forms.m_9_1.cpp)]\n [!code-cs[IsParent#1](~/add/codesnippet/csharp/p-system.windows.forms.m_9_1.cs)]\n [!code-vb[IsParent#1](~/add/codesnippet/visualbasic/p-system.windows.forms.m_9_1.vb)]"
  syntax:
    content: public virtual bool IsParent { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個功能表包含<xref href=&quot;System.Windows.Forms.MenuItem&quot;></xref>物件; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.Menu.IsParent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.MdiListItem
  id: MdiListItem
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: MdiListItem
  nameWithType: Menu.MdiListItem
  fullName: System.Windows.Forms.Menu.MdiListItem
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得值，指出<xref href=&quot;System.Windows.Forms.MenuItem&quot;></xref>用來顯示多個文件介面 (MDI) 子表單的清單。"
  remarks: "您可以使用這個屬性來判斷是否<xref:System.Windows.Forms.MenuItem>已被指定為在 MDI 應用程式中顯示開啟的子視窗清單。</xref:System.Windows.Forms.MenuItem> 若要使用特定<xref:System.Windows.Forms.MenuItem>MDI 清單，來設定<xref:System.Windows.Forms.MenuItem.MdiList%2A>屬性<xref:System.Windows.Forms.MenuItem>用於。</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.MenuItem.MdiList%2A> </xref:System.Windows.Forms.MenuItem>"
  syntax:
    content: public System.Windows.Forms.MenuItem MdiListItem { get; }
    return:
      type: System.Windows.Forms.MenuItem
      description: "A <xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref>表示顯示一份應用程式中開啟的 MDI 子表單的功能表項目。"
  overload: System.Windows.Forms.Menu.MdiListItem*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.MenuItems
  id: MenuItems
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: MenuItems
  nameWithType: Menu.MenuItems
  fullName: System.Windows.Forms.Menu.MenuItems
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得值，指出集合<xref href=&quot;System.Windows.Forms.MenuItem&quot;></xref>功能表與相關聯的物件。"
  remarks: "您可以使用這個屬性來取得目前儲存在 [] 功能表的功能表項目清單的參考。 如<xref:System.Windows.Forms.MainMenu>和<xref:System.Windows.Forms.ContextMenu>物件 MenuItems 屬性包含控制項中的整個功能表結構。</xref:System.Windows.Forms.ContextMenu> </xref:System.Windows.Forms.MainMenu> <xref:System.Windows.Forms.MenuItem>類別，MenuItems 屬性包含<xref:System.Windows.Forms.MenuItem>.</xref:System.Windows.Forms.MenuItem>相關聯的子功能表項目清單</xref:System.Windows.Forms.MenuItem> （這個屬性所提供） 的功能表的功能表項目集合的參考，您可以新增和移除功能表項目，判斷的功能表項目總數與清除集合中的功能表項目清單。 如需維護功能表的功能表項目集合的詳細資訊，請參閱<xref:System.Windows.Forms.Menu.MenuItemCollection?displayProperty=fullName>文件。</xref:System.Windows.Forms.Menu.MenuItemCollection?displayProperty=fullName>"
  example:
  - "The following code example creates an instance of the derived class, <xref:System.Windows.Forms.MainMenu>, and adds a <xref:System.Windows.Forms.MenuItem> object to its collection of <xref:System.Windows.Forms.MenuItem> objects. This example requires that the method defined in this example is located within the class for a form and called by a method in that form class.  \n  \n [!code-vb[Classic Menu.MenuItems Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.m_28_1.vb)]\n [!code-cpp[Classic Menu.MenuItems Example#1](~/add/codesnippet/cpp/p-system.windows.forms.m_28_1.cpp)]\n [!code-cs[Classic Menu.MenuItems Example#1](~/add/codesnippet/csharp/p-system.windows.forms.m_28_1.cs)]"
  syntax:
    content: public System.Windows.Forms.Menu.MenuItemCollection MenuItems { get; }
    return:
      type: System.Windows.Forms.Menu.MenuItemCollection
      description: "A &lt;xref:System.Windows.Forms.Menu.MenuItemCollection?displayProperty=fullName&gt;代表清單<xref href=&quot;System.Windows.Forms.MenuItem&quot;></xref>儲存功能表中的物件。"
  overload: System.Windows.Forms.Menu.MenuItems*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.MergeMenu(System.Windows.Forms.Menu)
  id: MergeMenu(System.Windows.Forms.Menu)
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: MergeMenu(Menu)
  nameWithType: Menu.MergeMenu(Menu)
  fullName: System.Windows.Forms.Menu.MergeMenu(Menu)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "合併<xref href=&quot;System.Windows.Forms.MenuItem&quot;></xref>目前功能表與一個功能表的物件。"
  remarks: "這個方法就會合併<xref:System.Windows.Forms.MenuItem>物件從目前的功能表與一個功能表。</xref:System.Windows.Forms.MenuItem> <xref:System.Windows.Forms.MenuItem>物件會根據合併<xref:System.Windows.Forms.MenuItem.MergeType%2A?displayProperty=fullName>和<xref:System.Windows.Forms.MenuItem.MergeOrder%2A?displayProperty=fullName>屬性。</xref:System.Windows.Forms.MenuItem.MergeOrder%2A?displayProperty=fullName> </xref:System.Windows.Forms.MenuItem.MergeType%2A?displayProperty=fullName></xref:System.Windows.Forms.MenuItem>       功能表合併處理通常是為了合併與作用中的 MDI 子表單的多個文件介面 (MDI) 父表單的功能表。 這是由.NET Framework common language runtime 會自動執行。 例如，如果 MDI 父表單包含一組功能表來處理檔案，而且您的 MDI 子表單也有檔案相關的功能表項目，功能表設定會自動合併到單一檔案 功能表的子表單都會在 MDI 父表單時，設定。       如果您要合併兩個不屬於 MDI 應用程式的功能表結構，您可以使用 MergeMenu 方法。 這項實作可以呼叫由<xref:System.Windows.Forms.MainMenu>或<xref:System.Windows.Forms.ContextMenu>合併兩個或多個物件衍生自<xref:System.Windows.Forms.Menu>.</xref:System.Windows.Forms.Menu>類別</xref:System.Windows.Forms.ContextMenu></xref:System.Windows.Forms.MainMenu>       要合併兩個<xref:System.Windows.Forms.MenuItem>物件使用<xref:System.Windows.Forms.MenuItem.MergeMenu%2A?displayProperty=fullName>方法。</xref:System.Windows.Forms.MenuItem.MergeMenu%2A?displayProperty=fullName> </xref:System.Windows.Forms.MenuItem>"
  example:
  - "This example creates two menus, `mainMenu1` and `mainMenu2`. The first menu contains one <xref:System.Windows.Forms.MenuItem>, `File`, and the second contains one <xref:System.Windows.Forms.MenuItem>, `Edit`. Using the MergeMenu method, `mainMenu2` is merged with `mainMenu1`. When displayed, `mainMenu1` will contain the two menu items, `File` and `Edit`. This example requires that you have created a <xref:System.Windows.Forms.Form> named `Form1`.  \n  \n [!code-cs[MergeMenu#1](~/add/codesnippet/csharp/m-system.windows.forms.m_23_1.cs)]\n [!code-cpp[MergeMenu#1](~/add/codesnippet/cpp/m-system.windows.forms.m_23_1.cpp)]\n [!code-vb[MergeMenu#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_23_1.vb)]"
  syntax:
    content: public virtual void MergeMenu (System.Windows.Forms.Menu menuSrc);
    parameters:
    - id: menuSrc
      type: System.Windows.Forms.Menu
      description: "<xref href=&quot;System.Windows.Forms.Menu&quot;> </xref>與目前功能表的功能表項目合併的功能表項目。"
  overload: System.Windows.Forms.Menu.MergeMenu*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "它嘗試合併功能表與其本身。"
  platform:
  - net462
- uid: System.Windows.Forms.Menu.Name
  id: Name
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: Name
  nameWithType: Menu.Name
  fullName: System.Windows.Forms.Menu.Name
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得或設定名稱<xref href=&quot;System.Windows.Forms.Menu&quot;> </xref>。"
  remarks: "在設計階段，這個屬性是設定為控制項的程式設計識別項。 不過，此屬性會在執行階段在控制項上的 並無任何影響。"
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "表示名稱的字串。"
  overload: System.Windows.Forms.Menu.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)
  id: ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: ProcessCmdKey(Message,Keys)
  nameWithType: Menu.ProcessCmdKey(Message,Keys)
  fullName: System.Windows.Forms.Menu.ProcessCmdKey(Message,Keys)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "處理命令按鍵。"
  syntax:
    content: protected virtual bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);
    parameters:
    - id: msg
      type: System.Windows.Forms.Message
      description: "A <xref href=&quot;System.Windows.Forms.Message&quot;> </xref>，代表要處理的視窗訊息的參考所傳遞。"
    - id: keyData
      type: System.Windows.Forms.Keys
      description: "其中一個<xref href=&quot;System.Windows.Forms.Keys&quot;></xref>值，表示要處理的按鍵。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果字元已由控制項處理否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.Menu.ProcessCmdKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.Tag
  id: Tag
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: Tag
  nameWithType: Menu.Tag
  fullName: System.Windows.Forms.Menu.Tag
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得或設定與控制項相關聯的使用者定義資料。"
  syntax:
    content: public object Tag { get; set; }
    return:
      type: System.Object
      description: "物件，表示資料。"
  overload: System.Windows.Forms.Menu.Tag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.ToString
  id: ToString
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: ToString()
  nameWithType: Menu.ToString()
  fullName: System.Windows.Forms.Menu.ToString()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "傳回<xref:System.String>表示<xref href=&quot;System.Windows.Forms.Menu&quot;></xref>控制項。</xref:System.String>"
  remarks: "ToString 方法會傳回<xref:System.String>包含型別和中的項目數<xref:System.Windows.Forms.Menu.MenuItems%2A>控制項的屬性。</xref:System.Windows.Forms.Menu.MenuItems%2A> </xref:System.String>"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A<xref:System.String>代表目前<xref href=&quot;System.Windows.Forms.Menu&quot;> </xref>。</xref:System.String>"
  overload: System.Windows.Forms.Menu.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Forms.Menu.#ctor(System.Windows.Forms.MenuItem[])
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: Menu(MenuItem[])
  nameWithType: Menu.Menu(MenuItem[])
  fullName: System.Windows.Forms.Menu.Menu(MenuItem[])
- uid: System.Windows.Forms.MenuItem[]
  parent: System.Windows.Forms
  isExternal: false
  name: MenuItem
  nameWithType: MenuItem
  fullName: System.Windows.Forms.MenuItem[]
  spec.csharp:
  - uid: System.Windows.Forms.MenuItem
    name: MenuItem
    nameWithType: MenuItem
    fullName: MenuItem[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Forms.Menu.CloneMenu(System.Windows.Forms.Menu)
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: CloneMenu(Menu)
  nameWithType: Menu.CloneMenu(Menu)
  fullName: System.Windows.Forms.Menu.CloneMenu(Menu)
- uid: System.Windows.Forms.Menu
  parent: System.Windows.Forms
  isExternal: false
  name: Menu
  nameWithType: Menu
  fullName: System.Windows.Forms.Menu
- uid: System.Windows.Forms.Menu.CreateMenuHandle
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: CreateMenuHandle()
  nameWithType: Menu.CreateMenuHandle()
  fullName: System.Windows.Forms.Menu.CreateMenuHandle()
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Windows.Forms.Menu.Dispose(System.Boolean)
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Menu.Dispose(Boolean)
  fullName: System.Windows.Forms.Menu.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.Menu.FindHandle
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: FindHandle
  nameWithType: Menu.FindHandle
  fullName: System.Windows.Forms.Menu.FindHandle
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.Menu.FindMenuItem(System.Int32,System.IntPtr)
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: FindMenuItem(Int32,IntPtr)
  nameWithType: Menu.FindMenuItem(Int32,IntPtr)
  fullName: System.Windows.Forms.Menu.FindMenuItem(Int32,IntPtr)
- uid: System.Windows.Forms.MenuItem
  parent: System.Windows.Forms
  isExternal: false
  name: MenuItem
  nameWithType: MenuItem
  fullName: System.Windows.Forms.MenuItem
- uid: System.Windows.Forms.Menu.FindMergePosition(System.Int32)
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: FindMergePosition(Int32)
  nameWithType: Menu.FindMergePosition(Int32)
  fullName: System.Windows.Forms.Menu.FindMergePosition(Int32)
- uid: System.Windows.Forms.Menu.FindShortcut
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: FindShortcut
  nameWithType: Menu.FindShortcut
  fullName: System.Windows.Forms.Menu.FindShortcut
- uid: System.Windows.Forms.Menu.GetContextMenu
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: GetContextMenu()
  nameWithType: Menu.GetContextMenu()
  fullName: System.Windows.Forms.Menu.GetContextMenu()
- uid: System.Windows.Forms.ContextMenu
  parent: System.Windows.Forms
  isExternal: false
  name: ContextMenu
  nameWithType: ContextMenu
  fullName: System.Windows.Forms.ContextMenu
- uid: System.Windows.Forms.Menu.GetMainMenu
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: GetMainMenu()
  nameWithType: Menu.GetMainMenu()
  fullName: System.Windows.Forms.Menu.GetMainMenu()
- uid: System.Windows.Forms.MainMenu
  parent: System.Windows.Forms
  isExternal: false
  name: MainMenu
  nameWithType: MainMenu
  fullName: System.Windows.Forms.MainMenu
- uid: System.Windows.Forms.Menu.Handle
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: Handle
  nameWithType: Menu.Handle
  fullName: System.Windows.Forms.Menu.Handle
- uid: System.Windows.Forms.Menu.IsParent
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: IsParent
  nameWithType: Menu.IsParent
  fullName: System.Windows.Forms.Menu.IsParent
- uid: System.Windows.Forms.Menu.MdiListItem
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: MdiListItem
  nameWithType: Menu.MdiListItem
  fullName: System.Windows.Forms.Menu.MdiListItem
- uid: System.Windows.Forms.Menu.MenuItems
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: MenuItems
  nameWithType: Menu.MenuItems
  fullName: System.Windows.Forms.Menu.MenuItems
- uid: System.Windows.Forms.Menu.MenuItemCollection
  parent: System.Windows.Forms
  isExternal: false
  name: Menu+MenuItemCollection
  nameWithType: Menu+MenuItemCollection
  fullName: System.Windows.Forms.Menu+MenuItemCollection
- uid: System.Windows.Forms.Menu.MergeMenu(System.Windows.Forms.Menu)
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: MergeMenu(Menu)
  nameWithType: Menu.MergeMenu(Menu)
  fullName: System.Windows.Forms.Menu.MergeMenu(Menu)
- uid: System.Windows.Forms.Menu.Name
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: Name
  nameWithType: Menu.Name
  fullName: System.Windows.Forms.Menu.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Forms.Menu.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: ProcessCmdKey(Message,Keys)
  nameWithType: Menu.ProcessCmdKey(Message,Keys)
  fullName: System.Windows.Forms.Menu.ProcessCmdKey(Message,Keys)
- uid: System.Windows.Forms.Message
  parent: System.Windows.Forms
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Windows.Forms.Message
- uid: System.Windows.Forms.Keys
  parent: System.Windows.Forms
  isExternal: false
  name: Keys
  nameWithType: Keys
  fullName: System.Windows.Forms.Keys
- uid: System.Windows.Forms.Menu.Tag
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: Tag
  nameWithType: Menu.Tag
  fullName: System.Windows.Forms.Menu.Tag
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Forms.Menu.ToString
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: ToString()
  nameWithType: Menu.ToString()
  fullName: System.Windows.Forms.Menu.ToString()
- uid: System.Windows.Forms.Menu.#ctor*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: Menu
  nameWithType: Menu.Menu
- uid: System.Windows.Forms.Menu.CloneMenu*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: CloneMenu
  nameWithType: Menu.CloneMenu
- uid: System.Windows.Forms.Menu.CreateMenuHandle*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: CreateMenuHandle
  nameWithType: Menu.CreateMenuHandle
- uid: System.Windows.Forms.Menu.Dispose*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: Dispose
  nameWithType: Menu.Dispose
- uid: System.Windows.Forms.Menu.FindMenuItem*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: FindMenuItem
  nameWithType: Menu.FindMenuItem
- uid: System.Windows.Forms.Menu.FindMergePosition*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: FindMergePosition
  nameWithType: Menu.FindMergePosition
- uid: System.Windows.Forms.Menu.GetContextMenu*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: GetContextMenu
  nameWithType: Menu.GetContextMenu
- uid: System.Windows.Forms.Menu.GetMainMenu*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: GetMainMenu
  nameWithType: Menu.GetMainMenu
- uid: System.Windows.Forms.Menu.Handle*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: Handle
  nameWithType: Menu.Handle
- uid: System.Windows.Forms.Menu.IsParent*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: IsParent
  nameWithType: Menu.IsParent
- uid: System.Windows.Forms.Menu.MdiListItem*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: MdiListItem
  nameWithType: Menu.MdiListItem
- uid: System.Windows.Forms.Menu.MenuItems*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: MenuItems
  nameWithType: Menu.MenuItems
- uid: System.Windows.Forms.Menu.MergeMenu*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: MergeMenu
  nameWithType: Menu.MergeMenu
- uid: System.Windows.Forms.Menu.Name*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: Name
  nameWithType: Menu.Name
- uid: System.Windows.Forms.Menu.ProcessCmdKey*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: ProcessCmdKey
  nameWithType: Menu.ProcessCmdKey
- uid: System.Windows.Forms.Menu.Tag*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: Tag
  nameWithType: Menu.Tag
- uid: System.Windows.Forms.Menu.ToString*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: ToString
  nameWithType: Menu.ToString
