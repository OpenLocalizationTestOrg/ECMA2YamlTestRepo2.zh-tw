### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HMACRIPEMD160
  id: HMACRIPEMD160
  children:
  - System.Security.Cryptography.HMACRIPEMD160.#ctor
  - System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])
  langs:
  - csharp
  name: HMACRIPEMD160
  nameWithType: HMACRIPEMD160
  fullName: System.Security.Cryptography.HMACRIPEMD160
  type: Class
  summary: "使用計算雜湊式訊息驗證碼 (HMAC) <xref href=&quot;System.Security.Cryptography.RIPEMD160&quot;> </xref>雜湊函式。"
  remarks: "HMACRIPEMD160 是一種金鑰雜湊演算法，從 ripemd-160 雜湊函式建構用做為雜湊式訊息驗證碼 (HMAC)。 HMAC 程序會與訊息資料混合秘密金鑰、 雜湊的雜湊函式的結果、 再次混合該雜湊值與秘密金鑰，，然後套用第二次雜湊函式的資料。 輸出雜湊是 160 位元長度。       HMAC 可用來判斷透過不安全的通道傳送的訊息是否遭竄改的寄件者和收件者共用秘密金鑰。 寄件者會計算原始資料的雜湊值，並將原始資料和雜湊值傳送為單一訊息。 收件者所接收訊息的雜湊值將會重新計算，並檢查計算的 HMAC 符合傳輸的 HMAC。       資料或雜湊值的任何變更會導致不相符，因為知識祕密金鑰，才能變更訊息及重新產生正確的雜湊值。 因此，如果原始和計算的雜湊值相符，驗證訊息。       HMACRIPEMD160 接受任何大小的索引鍵，並產生 160 位元的雜湊順序。       RIPEMD 雜湊演算法和其後續任務由歐洲敞開專案所開發的。 原始 RIPEMD 演算法設計用來取代 MD4 和 MD5 稍後我們增強和重新命名 ripemd-160。 Ripemd-160 雜湊演算法可產生 160 位元雜湊值。 此演算法的設計工具將它置於公用網域。"
  example:
  - "The following example shows how to sign a file by using the HMACRIPEMD160 object and then how to verify the file.  \n  \n [!code-vb[HMACRIPEMD160#1](~/add/codesnippet/visualbasic/t-system.security.crypto_102_1.vb)]\n [!code-cpp[HMACRIPEMD160#1](~/add/codesnippet/cpp/t-system.security.crypto_102_1.cpp)]\n [!code-cs[HMACRIPEMD160#1](~/add/codesnippet/csharp/t-system.security.crypto_102_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class HMACRIPEMD160 : System.Security.Cryptography.HMAC
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  - System.Security.Cryptography.HMAC
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.HashFinal
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.HMAC.Initialize
  - System.Security.Cryptography.HMAC.Key
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  platform:
  - net462
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMACRIPEMD160
  langs:
  - csharp
  name: HMACRIPEMD160()
  nameWithType: HMACRIPEMD160.HMACRIPEMD160()
  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;></xref>具有隨機產生的 64 位元組索引鍵的類別。"
  remarks: "<xref:System.Security.Cryptography.HMACRIPEMD160>是一種金鑰雜湊演算法，從 ripemd-160 雜湊函式建構用做為雜湊式訊息驗證碼 (HMAC)。</xref:System.Security.Cryptography.HMACRIPEMD160> HMAC 程序會與訊息資料混合秘密金鑰、 雜湊的雜湊函式的結果、 再次混合該雜湊值與秘密金鑰，，然後套用第二次雜湊函式的資料。 輸出雜湊是 160 個位元組的長度。       這個建構函式會使用 64 位元隨機產生的金鑰。"
  syntax:
    content: public HMACRIPEMD160 ();
    parameters: []
  overload: System.Security.Cryptography.HMACRIPEMD160.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.HMACRIPEMD160
  langs:
  - csharp
  name: HMACRIPEMD160(Byte[])
  nameWithType: HMACRIPEMD160.HMACRIPEMD160(Byte[])
  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160(Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;></xref>類別具有指定索引鍵的資料。"
  remarks: "<xref:System.Security.Cryptography.HMACRIPEMD160>是一種金鑰雜湊演算法，從 ripemd-160 雜湊函式建構用做為雜湊式訊息驗證碼 (HMAC)。</xref:System.Security.Cryptography.HMACRIPEMD160> HMAC 程序會與訊息資料混合秘密金鑰、 雜湊的雜湊函式的結果、 再次混合該雜湊值與秘密金鑰，，然後套用第二次雜湊函式的資料。 輸出雜湊是 160 個位元組的長度。"
  example:
  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACRIPEMD160> class.
  syntax:
    content: public HMACRIPEMD160 (byte[] key);
    parameters:
    - id: key
      type: System.Byte[]
      description: "祕密金鑰<xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;></xref>加密。 索引鍵可以是任何長度，但如果是 64 位元組長度才雜湊 （使用 sha-1） 衍生 64 位元金鑰。 因此，建議的祕密金鑰的大小是 64 個位元組。"
  overload: System.Security.Cryptography.HMACRIPEMD160.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>key</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.Cryptography.HMAC
  isExternal: false
  name: System.Security.Cryptography.HMAC
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor
  parent: System.Security.Cryptography.HMACRIPEMD160
  isExternal: false
  name: HMACRIPEMD160()
  nameWithType: HMACRIPEMD160.HMACRIPEMD160()
  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160()
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])
  parent: System.Security.Cryptography.HMACRIPEMD160
  isExternal: false
  name: HMACRIPEMD160(Byte[])
  nameWithType: HMACRIPEMD160.HMACRIPEMD160(Byte[])
  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor*
  parent: System.Security.Cryptography.HMACRIPEMD160
  isExternal: false
  name: HMACRIPEMD160
  nameWithType: HMACRIPEMD160.HMACRIPEMD160
