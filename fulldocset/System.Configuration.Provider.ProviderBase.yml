### YamlMime:ManagedReference
items:
- uid: System.Configuration.Provider.ProviderBase
  id: ProviderBase
  children:
  - System.Configuration.Provider.ProviderBase.#ctor
  - System.Configuration.Provider.ProviderBase.Description
  - System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  - System.Configuration.Provider.ProviderBase.Name
  langs:
  - csharp
  name: ProviderBase
  nameWithType: ProviderBase
  fullName: System.Configuration.Provider.ProviderBase
  type: Class
  summary: "提供可延伸提供者模型的基底實作。"
  remarks: "提供者模型會封裝所有或部分的多項 ASP.NET 功能，例如成員資格、 設定檔，以及受保護的組態功能。 它可讓開發人員建立支援類別，來提供多個封裝之功能的實作。 此外，開發人員可以撰寫使用提供者模型的新功能。 這可以支援多個實作的功能而不需要複製功能的程式碼，或如果必須變更實作方法記錄應用程式層的有效方式。       ProviderBase 類別很簡單，只包含一些基本的方法和屬性通用於所有提供者。 特定功能的提供者 (例如<xref:System.Web.Security.MembershipProvider>) 繼承自 ProviderBase 並建立必要的方法和屬性必須支援該功能的實作特定提供者。</xref:System.Web.Security.MembershipProvider> 實作特定提供者 (例如<xref:System.Web.Security.SqlMembershipProvider>) 依序繼承的特定功能的提供者 (在此情況下， <xref:System.Web.Security.MembershipProvider>)。</xref:System.Web.Security.MembershipProvider> </xref:System.Web.Security.SqlMembershipProvider>       最重要的提供者模型是從應用程式程式碼，抽象 （例如，是否資料會保存為文字檔案或資料庫中） 的實作。 在組態檔中指定的特定功能的實作特定提供者類型。 功能層級提供者接著會讀取該類型，從組態檔，並做為功能程式碼中的處理站。 應用程式開發人員然後可以在應用程式程式碼中使用的功能類別。 實作類型可以交換出組態檔中，因而不須重寫程式碼，以配合不同的實作方法。       ASP.NET 所隨附的提供者是大部分的功能，例如設定檔或成員資格的資料持續性實作的抽象概念。 不過，此模型可以套用至任何其他類型的功能，可以區隔，實作多個方式。"
  example:
  - For an example of how to use the ProviderBase class, see [Profile Provider Implementation Example](~/add/includes/ajax-current-ext-md.md).
  syntax:
    content: public abstract class ProviderBase
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Configuration.Provider.ProviderBase.#ctor
  id: '#ctor'
  parent: System.Configuration.Provider.ProviderBase
  langs:
  - csharp
  name: ProviderBase()
  nameWithType: ProviderBase.ProviderBase()
  fullName: System.Configuration.Provider.ProviderBase.ProviderBase()
  type: Constructor
  assemblies:
  - System.Configuration
  namespace: System.Configuration.Provider
  summary: "初始化的新執行個體<xref href=&quot;System.Configuration.Provider.ProviderBase&quot;></xref>類別。"
  syntax:
    content: protected ProviderBase ();
    parameters: []
  overload: System.Configuration.Provider.ProviderBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.Provider.ProviderBase.Description
  id: Description
  parent: System.Configuration.Provider.ProviderBase
  langs:
  - csharp
  name: Description
  nameWithType: ProviderBase.Description
  fullName: System.Configuration.Provider.ProviderBase.Description
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration.Provider
  summary: "取得適用於顯示在系統管理工具或其他使用者介面 (Ui) 的好記的簡短描述。"
  remarks: "如果設定提供者並不提供的值，描述<xref:System.Configuration.Provider.ProviderBase.Name%2A>屬性會傳回做為預設值。</xref:System.Configuration.Provider.ProviderBase.Name%2A>"
  syntax:
    content: public virtual string Description { get; }
    return:
      type: System.String
      description: "簡短、 好記的描述適用於系統管理工具或其他 Ui 中顯示。"
  overload: System.Configuration.Provider.ProviderBase.Description*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  id: Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Configuration.Provider.ProviderBase
  langs:
  - csharp
  name: Initialize(String,NameValueCollection)
  nameWithType: ProviderBase.Initialize(String,NameValueCollection)
  fullName: System.Configuration.Provider.ProviderBase.Initialize(String,NameValueCollection)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration.Provider
  summary: "初始化提供者。"
  remarks: "基底類別實作內部追蹤的次數的提供者`Initialize`呼叫方法。 如果提供者初始化一次以上，`InvalidOperationException`指出已經初始化 提供者就會擲回。       因為大部分的功能提供者呼叫初始化執行提供者專屬的初始化之前，這個方法是避免雙初始化中央位置。"
  example:
  - For an example of how to use Initialize, see [Profile Provider Implementation Example](~/add/includes/ajax-current-ext-md.md).
  syntax:
    content: public virtual void Initialize (string name, System.Collections.Specialized.NameValueCollection config);
    parameters:
    - id: name
      type: System.String
      description: "提供者的易記名稱。"
    - id: config
      type: System.Collections.Specialized.NameValueCollection
      description: "代表在此提供者組態中指定的提供者特定屬性的名稱/值組的集合。"
  overload: System.Configuration.Provider.ProviderBase.Initialize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "提供者的名稱是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "提供者的名稱具有長度為零。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "嘗試初始化提供者之後，呼叫初始化提供者上。"
  platform:
  - net462
- uid: System.Configuration.Provider.ProviderBase.Name
  id: Name
  parent: System.Configuration.Provider.ProviderBase
  langs:
  - csharp
  name: Name
  nameWithType: ProviderBase.Name
  fullName: System.Configuration.Provider.ProviderBase.Name
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration.Provider
  summary: "取得用來在設定期間參考提供者的易記名稱。"
  remarks: '建議的模式，這個字串是: [*提供者建立者*] [*實作類型*] [*功能*] 提供者。 雖然<xref:System.Configuration.Provider.ProviderBase.Description%2A>屬性也會提供好記的描述、 在利用提供者名稱屬性來做為識別項。</xref:System.Configuration.Provider.ProviderBase.Description%2A>'
  syntax:
    content: public virtual string Name { get; }
    return:
      type: System.String
      description: "用來在設定期間參考提供者易記名稱。"
  overload: System.Configuration.Provider.ProviderBase.Name*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Configuration.Provider.ProviderBase.#ctor
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: ProviderBase()
  nameWithType: ProviderBase.ProviderBase()
  fullName: System.Configuration.Provider.ProviderBase.ProviderBase()
- uid: System.Configuration.Provider.ProviderBase.Description
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Description
  nameWithType: ProviderBase.Description
  fullName: System.Configuration.Provider.ProviderBase.Description
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Initialize(String,NameValueCollection)
  nameWithType: ProviderBase.Initialize(String,NameValueCollection)
  fullName: System.Configuration.Provider.ProviderBase.Initialize(String,NameValueCollection)
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Configuration.Provider.ProviderBase.Name
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Name
  nameWithType: ProviderBase.Name
  fullName: System.Configuration.Provider.ProviderBase.Name
- uid: System.Configuration.Provider.ProviderBase.#ctor*
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: ProviderBase
  nameWithType: ProviderBase.ProviderBase
- uid: System.Configuration.Provider.ProviderBase.Description*
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Description
  nameWithType: ProviderBase.Description
- uid: System.Configuration.Provider.ProviderBase.Initialize*
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Initialize
  nameWithType: ProviderBase.Initialize
- uid: System.Configuration.Provider.ProviderBase.Name*
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Name
  nameWithType: ProviderBase.Name
