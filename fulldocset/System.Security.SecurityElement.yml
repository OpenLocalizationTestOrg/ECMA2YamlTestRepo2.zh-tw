### YamlMime:ManagedReference
items:
- uid: System.Security.SecurityElement
  id: SecurityElement
  children:
  - System.Security.SecurityElement.#ctor(System.String)
  - System.Security.SecurityElement.#ctor(System.String,System.String)
  - System.Security.SecurityElement.AddAttribute(System.String,System.String)
  - System.Security.SecurityElement.AddChild(System.Security.SecurityElement)
  - System.Security.SecurityElement.Attribute(System.String)
  - System.Security.SecurityElement.Attributes
  - System.Security.SecurityElement.Children
  - System.Security.SecurityElement.Copy
  - System.Security.SecurityElement.Equal(System.Security.SecurityElement)
  - System.Security.SecurityElement.Escape(System.String)
  - System.Security.SecurityElement.FromString(System.String)
  - System.Security.SecurityElement.IsValidAttributeName(System.String)
  - System.Security.SecurityElement.IsValidAttributeValue(System.String)
  - System.Security.SecurityElement.IsValidTag(System.String)
  - System.Security.SecurityElement.IsValidText(System.String)
  - System.Security.SecurityElement.SearchForChildByTag(System.String)
  - System.Security.SecurityElement.SearchForTextOfTag(System.String)
  - System.Security.SecurityElement.Tag
  - System.Security.SecurityElement.Text
  - System.Security.SecurityElement.ToString
  langs:
  - csharp
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
  type: Class
  summary: "代表用於編碼安全性物件的 XML 物件模型。 這個類別無法被繼承。"
  remarks: "這個類別被要簡單的 XML 物件模型用於安全性系統，而不做為一般的 XML 物件模型的輕量型實作。 這份文件會假設 XML 的基本知識。       簡單的 XML 物件模型的項目包含下列部分:-標記是項目名稱。      -屬性都是零或多個名稱/值項目上的屬性組。      -子系是零或多個項目巢狀`<tag>`和`</tag>`。       強烈建議屬性型 XML 表示法用來表示安全性項目和其值。 這表示項目的屬性會表示為屬性和屬性值會表示為屬性值。 避免使用巢狀標記內的文字。 針對任何`<tag>text</tag>`表示的類型表示法`<tag value=&quot;text&quot;/>`通常使用。 使用此屬性為基礎的 XML 表示法會增加可讀性，並可讓您輕鬆的 WMI 可攜性產生的 XML 序列化。       屬性名稱必須是其中一個字元或更長，且不能`null`。 如果項目為基礎的值表示，項目文字字串`null`表示`<tag/>`形成; 否則會以分隔文字`<tag>`和`</tag>`語彙基元。 這兩種形式可以結合屬性，會顯示這些如果有的話。       標記、 屬性和文字的項目，如果有的話，會一律區分大小寫。 XML 格式包含引號，並在需要時來逸出。 在 XML 中包含使用無效的字元的字串值會導致<xref:System.ArgumentException>.</xref:System.ArgumentException> 這些規則適用於所有屬性和方法。      > [!NOTE] > 基於效能考量，字元的有效性時，才檢查項目會編碼為 XML 文字格式，而不是在每個屬性或方法的集合。 可讓明確檢查所需的靜態方法。"
  example:
  - "The following example shows the use of members of the SecurityElement class.  \n  \n [!code-vb[SecurityElementMembers#1](~/add/codesnippet/visualbasic/t-system.security.securi_1.vb)]\n [!code-cpp[SecurityElementMembers#1](~/add/codesnippet/cpp/t-system.security.securi_1.cpp)]\n [!code-cs[SecurityElementMembers#1](~/add/codesnippet/csharp/t-system.security.securi_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class SecurityElement
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.SecurityElement.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: SecurityElement(String)
  nameWithType: SecurityElement.SecurityElement(String)
  fullName: System.Security.SecurityElement.SecurityElement(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "初始化的新執行個體<xref href=&quot;System.Security.SecurityElement&quot;></xref>具有指定標記的類別。"
  remarks: "`tag`參數必須包含有效的 XML 標記名稱。 使用<xref:System.Security.SecurityElement.Escape%2A>從字串中移除無效的字元。</xref:System.Security.SecurityElement.Escape%2A>"
  example:
  - "The following code shows the use of  the SecurityElement constructor to create a new <xref:System.Security.SecurityElement> object.  This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#2](~/add/codesnippet/visualbasic/m-system.security.securi_8_1.vb)]\n [!code-cpp[SecurityElementMembers#2](~/add/codesnippet/cpp/m-system.security.securi_8_1.cpp)]\n [!code-cs[SecurityElementMembers#2](~/add/codesnippet/csharp/m-system.security.securi_8_1.cs)]"
  syntax:
    content: public SecurityElement (string tag);
    parameters:
    - id: tag
      type: System.String
      description: "XML 項目的標記名稱。"
  overload: System.Security.SecurityElement.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tag</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> tag </code> XML 中的參數無效。"
  platform:
  - net462
- uid: System.Security.SecurityElement.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: SecurityElement(String,String)
  nameWithType: SecurityElement.SecurityElement(String,String)
  fullName: System.Security.SecurityElement.SecurityElement(String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "初始化的新執行個體<xref href=&quot;System.Security.SecurityElement&quot;></xref>類別，以指定的標記和文字。"
  remarks: "如果`text`參數是`null`這個建構函式會產生預設建構函式相同的項目。"
  syntax:
    content: public SecurityElement (string tag, string text);
    parameters:
    - id: tag
      type: System.String
      description: "XML 項目的標記名稱。"
    - id: text
      type: System.String
      description: "在項目文字內容。"
  overload: System.Security.SecurityElement.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tag</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> tag </code>參數或<code> text </code> XML 中的參數無效。"
  platform:
  - net462
- uid: System.Security.SecurityElement.AddAttribute(System.String,System.String)
  id: AddAttribute(System.String,System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: AddAttribute(String,String)
  nameWithType: SecurityElement.AddAttribute(String,String)
  fullName: System.Security.SecurityElement.AddAttribute(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "將名稱/值的屬性的 XML 項目。"
  remarks: "名稱和屬性中的值應該只包含有效的 XML 屬性字元。 XML 屬性名稱必須是唯一的。 使用<xref:System.Security.SecurityElement.Escape%2A>從字串中移除無效的字元。</xref:System.Security.SecurityElement.Escape%2A>       沒有引號的字串，支援讓名稱/值組的字串應包含引號或其他需要用引號括住的字元。"
  example:
  - "The following code shows the use of the AddAttribute method to add a name/value attribute to an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#4](~/add/codesnippet/visualbasic/m-system.security.securi_5_1.vb)]\n [!code-cpp[SecurityElementMembers#4](~/add/codesnippet/cpp/m-system.security.securi_5_1.cpp)]\n [!code-cs[SecurityElementMembers#4](~/add/codesnippet/csharp/m-system.security.securi_5_1.cs)]"
  syntax:
    content: public void AddAttribute (string name, string value);
    parameters:
    - id: name
      type: System.String
      description: "屬性的名稱。"
    - id: value
      type: System.String
      description: "屬性的值。"
  overload: System.Security.SecurityElement.AddAttribute*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter or <code>value</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> name </code>參數或<code> value </code> XML 中的參數無效。       -具有所指定之名稱的屬性<code> name </code>參數已經存在。"
  platform:
  - net462
- uid: System.Security.SecurityElement.AddChild(System.Security.SecurityElement)
  id: AddChild(System.Security.SecurityElement)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: AddChild(SecurityElement)
  nameWithType: SecurityElement.AddChild(SecurityElement)
  fullName: System.Security.SecurityElement.AddChild(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "將子元素加入至 XML 項目。"
  remarks: "子元素會加入下列任何先前已存在的子元素。"
  example:
  - "The following code shows the use of the AddChild method to add a child element to the XML element.  This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#5](~/add/codesnippet/visualbasic/m-system.security.securi_11_1.vb)]\n [!code-cpp[SecurityElementMembers#5](~/add/codesnippet/cpp/m-system.security.securi_11_1.cpp)]\n [!code-cs[SecurityElementMembers#5](~/add/codesnippet/csharp/m-system.security.securi_11_1.cs)]"
  syntax:
    content: public void AddChild (System.Security.SecurityElement child);
    parameters:
    - id: child
      type: System.Security.SecurityElement
      description: "要加入的子元素。"
  overload: System.Security.SecurityElement.AddChild*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>child</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.SecurityElement.Attribute(System.String)
  id: Attribute(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Attribute(String)
  nameWithType: SecurityElement.Attribute(String)
  fullName: System.Security.SecurityElement.Attribute(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "在 XML 項目中，依名稱尋找屬性。"
  remarks: "使用 XML，如下所示，`Attribute(&quot;B&quot;)`會傳回&quot;456&quot;。      ```   <thetag A=&quot;123&quot; B=&quot;456&quot; C=&quot;789&quot;>text</thetag>   ```"
  example:
  - "The following code shows the use of the Attribute method to find an attribute by name. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#13](~/add/codesnippet/visualbasic/m-system.security.securi_9_1.vb)]\n [!code-cpp[SecurityElementMembers#13](~/add/codesnippet/cpp/m-system.security.securi_9_1.cpp)]\n [!code-cs[SecurityElementMembers#13](~/add/codesnippet/csharp/m-system.security.securi_9_1.cs)]"
  syntax:
    content: public string Attribute (string name);
    parameters:
    - id: name
      type: System.String
      description: "要搜尋的屬性名稱。"
    return:
      type: System.String
      description: "具名的屬性，與關聯的值或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果屬性不使用<code> name </code>存在。"
  overload: System.Security.SecurityElement.Attribute*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.SecurityElement.Attributes
  id: Attributes
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Attributes
  nameWithType: SecurityElement.Attributes
  fullName: System.Security.SecurityElement.Attributes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "取得或設定 XML 項目的屬性為名稱/值組。"
  remarks: "每個屬性儲存在<xref:System.Collections.Hashtable>做為名稱/值配對。</xref:System.Collections.Hashtable>       名稱與屬性中的值應該包含有效 XML 屬性的字元。 使用<xref:System.Security.SecurityElement.Escape%2A>從字串中移除無效的字元。</xref:System.Security.SecurityElement.Escape%2A>       沒有引號的字串，支援讓名稱/值組的字串應包含引號或其他需要用引號括住的字元。"
  example:
  - "The following code shows the use of the Attributes property to get an attribute of an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#15](~/add/codesnippet/visualbasic/p-system.security.securi_3_1.vb)]\n [!code-cpp[SecurityElementMembers#15](~/add/codesnippet/cpp/p-system.security.securi_3_1.cpp)]\n [!code-cs[SecurityElementMembers#15](~/add/codesnippet/csharp/p-system.security.securi_3_1.cs)]"
  syntax:
    content: public System.Collections.Hashtable Attributes { get; set; }
    return:
      type: System.Collections.Hashtable
      description: "<xref href=&quot;System.Collections.Hashtable&quot;> </xref> XML 元素的屬性值的物件。"
  overload: System.Security.SecurityElement.Attributes*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "名稱或值<xref href=&quot;System.Collections.Hashtable&quot;></xref>物件無效。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "名稱不是有效的 XML 屬性名稱。"
  platform:
  - net462
- uid: System.Security.SecurityElement.Children
  id: Children
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Children
  nameWithType: SecurityElement.Children
  fullName: System.Security.SecurityElement.Children
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "取得或設定子項目的 XML 項目陣列。"
  remarks: "如果<xref:System.Security.SecurityElement>同時包含<xref:System.Security.SecurityElement.Text%2A>和子系，<xref:System.Security.SecurityElement.Text%2A>會先出現。</xref:System.Security.SecurityElement.Text%2A> </xref:System.Security.SecurityElement.Text%2A> </xref:System.Security.SecurityElement>"
  example:
  - "The following code shows the use of the Children property to get the array of child elements of the XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#14](~/add/codesnippet/visualbasic/p-system.security.securi_0_1.vb)]\n [!code-cpp[SecurityElementMembers#14](~/add/codesnippet/cpp/p-system.security.securi_0_1.cpp)]\n [!code-cs[SecurityElementMembers#14](~/add/codesnippet/csharp/p-system.security.securi_0_1.cs)]"
  syntax:
    content: public System.Collections.ArrayList Children { get; set; }
    return:
      type: System.Collections.ArrayList
      description: "做為安全性項目 XML 項目的已排序的子項目。"
  overload: System.Security.SecurityElement.Children*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "XML 父節點的子系是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.SecurityElement.Copy
  id: Copy
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Copy()
  nameWithType: SecurityElement.Copy()
  fullName: System.Security.SecurityElement.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "建立並傳回目前的相同複本<xref href=&quot;System.Security.SecurityElement&quot;></xref>物件。"
  remarks: "同時複製包含<xref:System.Security.SecurityElement.Children%2A>和<xref:System.Security.SecurityElement.Attributes%2A>屬性。</xref:System.Security.SecurityElement.Attributes%2A> </xref:System.Security.SecurityElement.Children%2A>"
  syntax:
    content: public System.Security.SecurityElement Copy ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "目前的複本<xref href=&quot;System.Security.SecurityElement&quot;></xref>物件。"
  overload: System.Security.SecurityElement.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityElement.Equal(System.Security.SecurityElement)
  id: Equal(System.Security.SecurityElement)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Equal(SecurityElement)
  nameWithType: SecurityElement.Equal(SecurityElement)
  fullName: System.Security.SecurityElement.Equal(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "比較兩個 XML 項目物件相等。"
  remarks: "如果有子項目，比較將遞迴地展開。       沒有支援比較不同的 XML 表示的相同字元。"
  example:
  - "The following code shows the use of the Equal method to compare two XML elements. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#22](~/add/codesnippet/visualbasic/m-system.security.securi_6_1.vb)]\n [!code-cpp[SecurityElementMembers#22](~/add/codesnippet/cpp/m-system.security.securi_6_1.cpp)]\n [!code-cs[SecurityElementMembers#22](~/add/codesnippet/csharp/m-system.security.securi_6_1.cs)]"
  syntax:
    content: public bool Equal (System.Security.SecurityElement other);
    parameters:
    - id: other
      type: System.Security.SecurityElement
      description: "要用來比較目前的 XML 項目物件的 XML 項目物件。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果標記，屬性名稱和值、 子項目和目前的 XML 項目中的文字欄位是一樣的其對應項目<code> other </code>參數，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.SecurityElement.Equal*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityElement.Escape(System.String)
  id: Escape(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Escape(String)
  nameWithType: SecurityElement.Escape(String)
  fullName: System.Security.SecurityElement.Escape(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "取代無效的 XML 字元在字串中使用其有效的 XML 對等。"
  remarks: "Use this method to replace invalid characters in a string before using the string in a <xref:System.Security.SecurityElement>. If invalid characters are used in a <xref:System.Security.SecurityElement> without being escaped, an <xref:System.ArgumentException> is thrown.  \n  \n The following table shows the invalid XML characters and their escaped equivalents.  \n  \n|invalid XML Character|Replaced With|  \n|---------------------------|-------------------|  \n|\"\\<\"|\"&lt;\"|  \n|\">\"|\"&gt;\"|  \n|\"\\\\\"\"|\"&quot;\"|  \n|\"\\\\'\"|\"&apos;\"|  \n|\"&\"|\"&amp;\"|"
  example:
  - "The following code shows the use of the Escape method to replace invalid XML characters in a string with their valid XML equivalent. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#19](~/add/codesnippet/visualbasic/m-system.security.securi_7_1.vb)]\n [!code-cpp[SecurityElementMembers#19](~/add/codesnippet/cpp/m-system.security.securi_7_1.cpp)]\n [!code-cs[SecurityElementMembers#19](~/add/codesnippet/csharp/m-system.security.securi_7_1.cs)]"
  syntax:
    content: public static string Escape (string str);
    parameters:
    - id: str
      type: System.String
      description: "要逸出無效的字元字串。"
    return:
      type: System.String
      description: "輸入的字串與取代無效的字元。"
  overload: System.Security.SecurityElement.Escape*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityElement.FromString(System.String)
  id: FromString(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: FromString(String)
  nameWithType: SecurityElement.FromString(String)
  fullName: System.Security.SecurityElement.FromString(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "建立的 XML 編碼字串的安全性項目。"
  remarks: "Do not use single quotation marks in the XML string; instead, use escaped double quotation marks. For example, instead of \"`<value name='Company'>Microsoft</value>\"` use \"`<value name=\\\"Company\\\">Microsoft</value>\"`.  \n  \n Using single quotation marks can result in either an exception being thrown or, in some cases, the single quotation marks being treated as text in the string."
  syntax:
    content: public static System.Security.SecurityElement FromString (string xml);
    parameters:
    - id: xml
      type: System.String
      description: "用來建立安全性項目 XML 編碼字串。"
    return:
      type: System.Security.SecurityElement
      description: "A <xref href=&quot;System.Security.SecurityElement&quot;> </xref>從 XML 建立。"
  overload: System.Security.SecurityElement.FromString*
  exceptions:
  - type: System.Security.XmlSyntaxException
    commentId: T:System.Security.XmlSyntaxException
    description: "<code>xml</code>包含一或多個單一引號字元。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>xml</code>is<xref uid=&quot;langword_csharp_ null&quot; name=&quot; null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.SecurityElement.IsValidAttributeName(System.String)
  id: IsValidAttributeName(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: IsValidAttributeName(String)
  nameWithType: SecurityElement.IsValidAttributeName(String)
  fullName: System.Security.SecurityElement.IsValidAttributeName(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "判斷字串是否為有效的屬性名稱。"
  remarks: "這個方法可用來測試屬性，才能將它新增到安全性項目。"
  example:
  - "The following code shows the use of the IsValidAttributeName method to determine whether a string is a valid attribute name. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#6](~/add/codesnippet/visualbasic/m-system.security.securi_10_1.vb)]\n [!code-cpp[SecurityElementMembers#6](~/add/codesnippet/cpp/m-system.security.securi_10_1.cpp)]\n [!code-cs[SecurityElementMembers#6](~/add/codesnippet/csharp/m-system.security.securi_10_1.cs)]"
  syntax:
    content: public static bool IsValidAttributeName (string name);
    parameters:
    - id: name
      type: System.String
      description: "要測試有效性的屬性名稱。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> name </code>參數是有效的 XML 屬性名稱; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.SecurityElement.IsValidAttributeName*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityElement.IsValidAttributeValue(System.String)
  id: IsValidAttributeValue(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: IsValidAttributeValue(String)
  nameWithType: SecurityElement.IsValidAttributeValue(String)
  fullName: System.Security.SecurityElement.IsValidAttributeValue(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "判斷字串是否為有效的屬性值。"
  remarks: "這個方法可用來測試屬性，才能將它新增到安全性項目。"
  example:
  - "The following code shows the use of the IsValidAttributeValue method to determine whether a string is a valid attribute value. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#7](~/add/codesnippet/visualbasic/m-system.security.securi_4_1.vb)]\n [!code-cpp[SecurityElementMembers#7](~/add/codesnippet/cpp/m-system.security.securi_4_1.cpp)]\n [!code-cs[SecurityElementMembers#7](~/add/codesnippet/csharp/m-system.security.securi_4_1.cs)]"
  syntax:
    content: public static bool IsValidAttributeValue (string value);
    parameters:
    - id: value
      type: System.String
      description: "要測試有效性的屬性值。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> value </code>參數是有效的 XML 屬性值，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.SecurityElement.IsValidAttributeValue*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityElement.IsValidTag(System.String)
  id: IsValidTag(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: IsValidTag(String)
  nameWithType: SecurityElement.IsValidTag(String)
  fullName: System.Security.SecurityElement.IsValidTag(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "判斷字串是否為有效的標籤。"
  remarks: "這可以用於測試，<xref:System.Security.SecurityElement.Tag%2A>再設定它。</xref:System.Security.SecurityElement.Tag%2A>"
  example:
  - "The following code shows the use of the IsValidTag method to determine whether a string is a valid attribute tag. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#10](~/add/codesnippet/visualbasic/m-system.security.securi_3_1.vb)]\n [!code-cpp[SecurityElementMembers#10](~/add/codesnippet/cpp/m-system.security.securi_3_1.cpp)]\n [!code-cs[SecurityElementMembers#10](~/add/codesnippet/csharp/m-system.security.securi_3_1.cs)]"
  syntax:
    content: public static bool IsValidTag (string tag);
    parameters:
    - id: tag
      type: System.String
      description: "要測試有效性的標記。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> tag </code>參數是有效的 XML 標記，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.SecurityElement.IsValidTag*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityElement.IsValidText(System.String)
  id: IsValidText(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: IsValidText(String)
  nameWithType: SecurityElement.IsValidText(String)
  fullName: System.Security.SecurityElement.IsValidText(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "判斷字串是否為 XML 項目內的文字。"
  remarks: "這個方法可用來測試，<xref:System.Security.SecurityElement.Text%2A>再設定它。</xref:System.Security.SecurityElement.Text%2A>"
  example:
  - "The following code shows the use of the IsValidText method to determine whether a string is valid as XML element text. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#9](~/add/codesnippet/visualbasic/m-system.security.securi_2_1.vb)]\n [!code-cpp[SecurityElementMembers#9](~/add/codesnippet/cpp/m-system.security.securi_2_1.cpp)]\n [!code-cs[SecurityElementMembers#9](~/add/codesnippet/csharp/m-system.security.securi_2_1.cs)]"
  syntax:
    content: public static bool IsValidText (string text);
    parameters:
    - id: text
      type: System.String
      description: "要測試有效性的文字。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> text </code>參數是有效的 XML 文字項目，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.SecurityElement.IsValidText*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityElement.SearchForChildByTag(System.String)
  id: SearchForChildByTag(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: SearchForChildByTag(String)
  nameWithType: SecurityElement.SearchForChildByTag(String)
  fullName: System.Security.SecurityElement.SearchForChildByTag(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "它的標記名稱，尋找子系。"
  remarks: "使用 XML，如下所示，`SearchForChildByTag(&quot;second&quot;)`子元素將會傳回`<second>`。      ```   <thetag A=&quot;123&quot; B=&quot;456&quot; C=&quot;789&quot;> <first>text1</first>          <second>text2</second></thetag>   ```"
  example:
  - "The following code shows the use of the SearchForChildByTag method to find a child by its tag name. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#17](~/add/codesnippet/visualbasic/m-system.security.securi_1_1.vb)]\n [!code-cpp[SecurityElementMembers#17](~/add/codesnippet/cpp/m-system.security.securi_1_1.cpp)]\n [!code-cs[SecurityElementMembers#17](~/add/codesnippet/csharp/m-system.security.securi_1_1.cs)]"
  syntax:
    content: public System.Security.SecurityElement SearchForChildByTag (string tag);
    parameters:
    - id: tag
      type: System.String
      description: "要搜尋子項目中標記。"
    return:
      type: System.Security.SecurityElement
      description: "第一個子系 XML 項目，以指定的標記值，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>若含有任何子元素<code> tag </code>存在。"
  overload: System.Security.SecurityElement.SearchForChildByTag*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tag</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.SecurityElement.SearchForTextOfTag(System.String)
  id: SearchForTextOfTag(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: SearchForTextOfTag(String)
  nameWithType: SecurityElement.SearchForTextOfTag(String)
  fullName: System.Security.SecurityElement.SearchForTextOfTag(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "標籤名稱尋找子項目，並傳回所包含的文字。"
  remarks: "這個方法相當於下列︰ [!code-vb [System.Security.SecurityElement#1](~/add/codesnippet/visualbasic/m-system.security.securi_0_1.vb)][!code-cpp[System.Security.SecurityElement#1](~/add/codesnippet/cpp/m-system.security.securi_0_1.cpp)][!code-cs[System.Security.SecurityElement#1](~/add/codesnippet/csharp/m-system.security.securi_0_1.cs) ]與 XML，如下所示，`SearchForTextOfTag(&quot;second&quot;)`會傳回&quot;文字&2;&quot;。          ```   <thetag A=&quot;123&quot; B=&quot;456&quot; C=&quot;789&quot;> <first>text1</first>       <second>text2</second></thetag>   ```"
  example:
  - "The following code shows the use of the SearchForTextOfTag method to find a child by its tag name and return the contained text. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#18](~/add/codesnippet/visualbasic/m-system.security.securi_0_2.vb)]\n [!code-cpp[SecurityElementMembers#18](~/add/codesnippet/cpp/m-system.security.securi_0_2.cpp)]\n [!code-cs[SecurityElementMembers#18](~/add/codesnippet/csharp/m-system.security.securi_0_2.cs)]"
  syntax:
    content: public string SearchForTextOfTag (string tag);
    parameters:
    - id: tag
      type: System.String
      description: "要搜尋子項目中標記。"
    return:
      type: System.String
      description: "具有指定的標記值，第一個子項目的文字內容。"
  overload: System.Security.SecurityElement.SearchForTextOfTag*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>tag</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.SecurityElement.Tag
  id: Tag
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Tag
  nameWithType: SecurityElement.Tag
  fullName: System.Security.SecurityElement.Tag
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "取得或設定 XML 項目的標記名稱。"
  remarks: "在 XML 中，標記會出現在下面顯示的指令碼︰```   <tag attributes>text</tag>   ```如果這個項目具有子項目，將會取代子系`text`。       指定這個屬性才有效的 XML 標記字串。 使用<xref:System.Security.SecurityElement.Escape%2A>從字串中移除無效的字元。</xref:System.Security.SecurityElement.Escape%2A>"
  example:
  - "The following code shows the use of the Tag property to get the tag name of an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#11](~/add/codesnippet/visualbasic/p-system.security.securi_1_1.vb)]\n [!code-cpp[SecurityElementMembers#11](~/add/codesnippet/cpp/p-system.security.securi_1_1.cpp)]\n [!code-cs[SecurityElementMembers#11](~/add/codesnippet/csharp/p-system.security.securi_1_1.cs)]"
  syntax:
    content: public string Tag { get; set; }
    return:
      type: System.String
      description: "XML 項目的標記名稱。"
  overload: System.Security.SecurityElement.Tag*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The tag is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "無法在 XML 中無效的標記。"
  platform:
  - net462
- uid: System.Security.SecurityElement.Text
  id: Text
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Text
  nameWithType: SecurityElement.Text
  fullName: System.Security.SecurityElement.Text
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "取得或設定 XML 項目內的文字。"
  remarks: "文字不應該包含 XML 特殊字元。 使用<xref:System.Security.SecurityElement.Escape%2A>從字串中移除無效的字元。</xref:System.Security.SecurityElement.Escape%2A>       如果<xref:System.Security.SecurityElement>包含這兩個文字和<xref:System.Security.SecurityElement.Children%2A>，會先出現的文字。</xref:System.Security.SecurityElement.Children%2A> </xref:System.Security.SecurityElement>"
  example:
  - "The following code shows the use of the Text property to get the text of an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#12](~/add/codesnippet/visualbasic/p-system.security.securi_2_1.vb)]\n [!code-cpp[SecurityElementMembers#12](~/add/codesnippet/cpp/p-system.security.securi_2_1.cpp)]\n [!code-cs[SecurityElementMembers#12](~/add/codesnippet/csharp/p-system.security.securi_2_1.cs)]"
  syntax:
    content: public string Text { get; set; }
    return:
      type: System.String
      description: "XML 項目內文字的值。"
  overload: System.Security.SecurityElement.Text*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "無法在 XML 中無效的文字。"
  platform:
  - net462
- uid: System.Security.SecurityElement.ToString
  id: ToString
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: ToString()
  nameWithType: SecurityElement.ToString()
  fullName: System.Security.SecurityElement.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "產生的 XML 項目和其組成屬性、 子項目和文字的字串表示法。"
  remarks: "這個方法適用於偵錯以查看元素的 XML 表示法。"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "XML 項目和其內容。"
  overload: System.Security.SecurityElement.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Security.XmlSyntaxException
  parent: System.Security
  isExternal: false
  name: XmlSyntaxException
  nameWithType: XmlSyntaxException
  fullName: System.Security.XmlSyntaxException
- uid: System.Security.SecurityElement.#ctor(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: SecurityElement(String)
  nameWithType: SecurityElement.SecurityElement(String)
  fullName: System.Security.SecurityElement.SecurityElement(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.SecurityElement.#ctor(System.String,System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: SecurityElement(String,String)
  nameWithType: SecurityElement.SecurityElement(String,String)
  fullName: System.Security.SecurityElement.SecurityElement(String,String)
- uid: System.Security.SecurityElement.AddAttribute(System.String,System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: AddAttribute(String,String)
  nameWithType: SecurityElement.AddAttribute(String,String)
  fullName: System.Security.SecurityElement.AddAttribute(String,String)
- uid: System.Security.SecurityElement.AddChild(System.Security.SecurityElement)
  parent: System.Security.SecurityElement
  isExternal: false
  name: AddChild(SecurityElement)
  nameWithType: SecurityElement.AddChild(SecurityElement)
  fullName: System.Security.SecurityElement.AddChild(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.SecurityElement.Attribute(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: Attribute(String)
  nameWithType: SecurityElement.Attribute(String)
  fullName: System.Security.SecurityElement.Attribute(String)
- uid: System.Security.SecurityElement.Attributes
  parent: System.Security.SecurityElement
  isExternal: false
  name: Attributes
  nameWithType: SecurityElement.Attributes
  fullName: System.Security.SecurityElement.Attributes
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.Security.SecurityElement.Children
  parent: System.Security.SecurityElement
  isExternal: false
  name: Children
  nameWithType: SecurityElement.Children
  fullName: System.Security.SecurityElement.Children
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Security.SecurityElement.Copy
  parent: System.Security.SecurityElement
  isExternal: false
  name: Copy()
  nameWithType: SecurityElement.Copy()
  fullName: System.Security.SecurityElement.Copy()
- uid: System.Security.SecurityElement.Equal(System.Security.SecurityElement)
  parent: System.Security.SecurityElement
  isExternal: false
  name: Equal(SecurityElement)
  nameWithType: SecurityElement.Equal(SecurityElement)
  fullName: System.Security.SecurityElement.Equal(SecurityElement)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.SecurityElement.Escape(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: Escape(String)
  nameWithType: SecurityElement.Escape(String)
  fullName: System.Security.SecurityElement.Escape(String)
- uid: System.Security.SecurityElement.FromString(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: FromString(String)
  nameWithType: SecurityElement.FromString(String)
  fullName: System.Security.SecurityElement.FromString(String)
- uid: System.Security.SecurityElement.IsValidAttributeName(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidAttributeName(String)
  nameWithType: SecurityElement.IsValidAttributeName(String)
  fullName: System.Security.SecurityElement.IsValidAttributeName(String)
- uid: System.Security.SecurityElement.IsValidAttributeValue(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidAttributeValue(String)
  nameWithType: SecurityElement.IsValidAttributeValue(String)
  fullName: System.Security.SecurityElement.IsValidAttributeValue(String)
- uid: System.Security.SecurityElement.IsValidTag(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidTag(String)
  nameWithType: SecurityElement.IsValidTag(String)
  fullName: System.Security.SecurityElement.IsValidTag(String)
- uid: System.Security.SecurityElement.IsValidText(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidText(String)
  nameWithType: SecurityElement.IsValidText(String)
  fullName: System.Security.SecurityElement.IsValidText(String)
- uid: System.Security.SecurityElement.SearchForChildByTag(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: SearchForChildByTag(String)
  nameWithType: SecurityElement.SearchForChildByTag(String)
  fullName: System.Security.SecurityElement.SearchForChildByTag(String)
- uid: System.Security.SecurityElement.SearchForTextOfTag(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: SearchForTextOfTag(String)
  nameWithType: SecurityElement.SearchForTextOfTag(String)
  fullName: System.Security.SecurityElement.SearchForTextOfTag(String)
- uid: System.Security.SecurityElement.Tag
  parent: System.Security.SecurityElement
  isExternal: false
  name: Tag
  nameWithType: SecurityElement.Tag
  fullName: System.Security.SecurityElement.Tag
- uid: System.Security.SecurityElement.Text
  parent: System.Security.SecurityElement
  isExternal: false
  name: Text
  nameWithType: SecurityElement.Text
  fullName: System.Security.SecurityElement.Text
- uid: System.Security.SecurityElement.ToString
  parent: System.Security.SecurityElement
  isExternal: false
  name: ToString()
  nameWithType: SecurityElement.ToString()
  fullName: System.Security.SecurityElement.ToString()
- uid: System.Security.SecurityElement.#ctor*
  parent: System.Security.SecurityElement
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement.SecurityElement
- uid: System.Security.SecurityElement.AddAttribute*
  parent: System.Security.SecurityElement
  isExternal: false
  name: AddAttribute
  nameWithType: SecurityElement.AddAttribute
- uid: System.Security.SecurityElement.AddChild*
  parent: System.Security.SecurityElement
  isExternal: false
  name: AddChild
  nameWithType: SecurityElement.AddChild
- uid: System.Security.SecurityElement.Attribute*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Attribute
  nameWithType: SecurityElement.Attribute
- uid: System.Security.SecurityElement.Attributes*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Attributes
  nameWithType: SecurityElement.Attributes
- uid: System.Security.SecurityElement.Children*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Children
  nameWithType: SecurityElement.Children
- uid: System.Security.SecurityElement.Copy*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Copy
  nameWithType: SecurityElement.Copy
- uid: System.Security.SecurityElement.Equal*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Equal
  nameWithType: SecurityElement.Equal
- uid: System.Security.SecurityElement.Escape*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Escape
  nameWithType: SecurityElement.Escape
- uid: System.Security.SecurityElement.FromString*
  parent: System.Security.SecurityElement
  isExternal: false
  name: FromString
  nameWithType: SecurityElement.FromString
- uid: System.Security.SecurityElement.IsValidAttributeName*
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidAttributeName
  nameWithType: SecurityElement.IsValidAttributeName
- uid: System.Security.SecurityElement.IsValidAttributeValue*
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidAttributeValue
  nameWithType: SecurityElement.IsValidAttributeValue
- uid: System.Security.SecurityElement.IsValidTag*
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidTag
  nameWithType: SecurityElement.IsValidTag
- uid: System.Security.SecurityElement.IsValidText*
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidText
  nameWithType: SecurityElement.IsValidText
- uid: System.Security.SecurityElement.SearchForChildByTag*
  parent: System.Security.SecurityElement
  isExternal: false
  name: SearchForChildByTag
  nameWithType: SecurityElement.SearchForChildByTag
- uid: System.Security.SecurityElement.SearchForTextOfTag*
  parent: System.Security.SecurityElement
  isExternal: false
  name: SearchForTextOfTag
  nameWithType: SecurityElement.SearchForTextOfTag
- uid: System.Security.SecurityElement.Tag*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Tag
  nameWithType: SecurityElement.Tag
- uid: System.Security.SecurityElement.Text*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Text
  nameWithType: SecurityElement.Text
- uid: System.Security.SecurityElement.ToString*
  parent: System.Security.SecurityElement
  isExternal: false
  name: ToString
  nameWithType: SecurityElement.ToString
