### YamlMime:ManagedReference
items:
- uid: System.Runtime.CompilerServices.IsLong
  id: IsLong
  children: []
  langs:
  - csharp
  name: IsLong
  nameWithType: IsLong
  fullName: System.Runtime.CompilerServices.IsLong
  type: Class
  summary: "表示已修改的整數是 standard c + + <xref uid=&quot;langword_csharp_long&quot; name=&quot;long&quot; href=&quot;&quot;> </xref>值。 這個類別無法被繼承。"
  remarks: "C + + 標準指出`long`值和整數值是不同的類型。  不過，它們都表示使用`ELEMENT_TYPE_I4`組件中。  若要在區別`long`從 c + + 中的整數，Microsoft c + + 編譯器將 IsLong 修飾詞加入至任何執行個體`long`執行個體時 emited。  此程序是非常重要的維護語言層級型別安全。       編譯器會發出中繼資料，以變更預設行為不適用時，在 just-in-time (JIT) 編譯器，處理值的方式中的自訂修飾詞。  當 JIT 編譯器遇到的自訂修飾詞時，它會處理修飾詞指定的方式中的值。  編譯器可以套用的自訂修飾詞來方法、 參數和傳回值。  JIT 編譯器的必要修飾詞必須回應，但可以忽略的選擇性修飾詞。       您可以將自訂修飾詞發出至中繼資料使用的下列技術的其中一個:-使用中的方法<xref:System.Reflection.Emit.TypeBuilder>類別如<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>，和<xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>。</xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A> </xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A> </xref:System.Reflection.Emit.TypeBuilder.DefineField%2A> </xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A> </xref:System.Reflection.Emit.TypeBuilder>      產生 Microsoft intermediate language (MSIL) 指示檔案，其中包含呼叫`modopt`和`modreq`，然後將組合至檔案最[Ilasm.exe （IL 組譯工具）](~/add/includes/ajax-current-ext-md.md)。      -使用 unmanaged 的反映 API。"
  example:
  - "The following example demonstrates how to emit an IsLong object into an assembly using reflection.  \n  \n [!code-cpp[Runtime.CompilerServices.IsLong#1](~/add/codesnippet/cpp/t-system.runtime.compile_11_1.cpp)]"
  syntax:
    content: public static class IsLong
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
