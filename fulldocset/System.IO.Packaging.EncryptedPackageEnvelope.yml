### YamlMime:ManagedReference
items:
- uid: System.IO.Packaging.EncryptedPackageEnvelope
  id: EncryptedPackageEnvelope
  children:
  - System.IO.Packaging.EncryptedPackageEnvelope.Close
  - System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  - System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  - System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  - System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  - System.IO.Packaging.EncryptedPackageEnvelope.Dispose
  - System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)
  - System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess
  - System.IO.Packaging.EncryptedPackageEnvelope.Flush
  - System.IO.Packaging.EncryptedPackageEnvelope.GetPackage
  - System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)
  - System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)
  - System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)
  - System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)
  - System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)
  - System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)
  - System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties
  - System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation
  - System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo
  langs:
  - csharp
  name: EncryptedPackageEnvelope
  nameWithType: EncryptedPackageEnvelope
  fullName: System.IO.Packaging.EncryptedPackageEnvelope
  type: Class
  summary: "代表 OLE 複合檔案包含加密的封裝。"
  remarks: "EncryptedPackageEnvelope 有沒有公用建構函式。  EncryptedPackageEnvelope 由使用靜態<xref:System.IO.Packaging.EncryptedPackageEnvelope.Create%2A>， <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A>，或<xref:System.IO.Packaging.EncryptedPackageEnvelope.Open%2A>方法。</xref:System.IO.Packaging.EncryptedPackageEnvelope.Open%2A> </xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A> </xref:System.IO.Packaging.EncryptedPackageEnvelope.Create%2A>"
  syntax:
    content: 'public class EncryptedPackageEnvelope : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Close
  id: Close
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Close()
  nameWithType: EncryptedPackageEnvelope.Close()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Close()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "關閉加密的封裝，並保留它的 OLE 複合檔案。"
  remarks: ''
  example:
  - "The following example shows how to use this method to close an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Close*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  id: Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Create(Stream,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.Create(Stream,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Create(Stream,PublishLicense,CryptoProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "建立並傳回<xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;></xref>上指定的資料流。"
  remarks: "目前使用者具有讀取/寫入存取新的檔案。"
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope Create (System.IO.Stream envelopeStream, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);
    parameters:
    - id: envelopeStream
      type: System.IO.Stream
      description: "要在其中建立檔案資料流。"
    - id: publishLicense
      type: System.Security.RightsManagement.PublishLicense
      description: "內嵌在複合檔案中的發行授權。"
    - id: cryptoProvider
      type: System.Security.RightsManagement.CryptoProvider
      description: "物件，判斷哪些作業目前的使用者可以在加密內容上執行。"
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "新建立<xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>。"
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>envelopeStream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>envelopeStream</code>不提供讀取/寫入存取。"
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  id: Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Create(String,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.Create(String,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Create(String,PublishLicense,CryptoProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "建立並傳回<xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;></xref>並為其提供指定的檔案名稱。"
  remarks: "如果有指定名稱的檔案已經存在，則會覆寫。       目前使用者具有讀取/寫入存取檔案。"
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope Create (string envelopeFileName, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);
    parameters:
    - id: envelopeFileName
      type: System.String
      description: "OLE 複合檔案的名稱。"
    - id: publishLicense
      type: System.Security.RightsManagement.PublishLicense
      description: "內嵌在複合檔案中的發行授權。"
    - id: cryptoProvider
      type: System.Security.RightsManagement.CryptoProvider
      description: "物件，判斷哪些作業目前的使用者可以在加密內容上執行。"
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "新建立<xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>。"
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>envelopeFileName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  id: CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "建立並傳回<xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref> （在指定的資料流） 使用指定的加密的套件做為其內容。"
  remarks: "目前使用者具有讀取/寫入存取新的檔案。"
  example:
  - "The following example shows how to use the <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A> method to instantiate an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope CreateFromPackage (System.IO.Stream envelopeStream, System.IO.Stream packageStream, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);
    parameters:
    - id: envelopeStream
      type: System.IO.Stream
      description: "要在其中建立檔案資料流。"
    - id: packageStream
      type: System.IO.Stream
      description: "表示現有未加密的封裝資料流。"
    - id: publishLicense
      type: System.Security.RightsManagement.PublishLicense
      description: "內嵌在複合檔案中的發行授權。"
    - id: cryptoProvider
      type: System.Security.RightsManagement.CryptoProvider
      description: "物件，判斷哪些作業目前的使用者可以在加密內容上執行。"
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "新建立<xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>。"
  overload: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>envelopeStream</code>or <code>packageStream</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>envelopeStream</code>不提供讀取/寫入存取。"
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  id: CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "建立並傳回<xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref> ，做為其內容中，使用指定的加密的套件，並讓它指定的檔案名稱。"
  remarks: "如果有指定名稱的檔案已經存在，則會覆寫。       目前使用者具有讀取/寫入存取檔案。"
  example:
  - "The following example shows how to use the CreateFromPackage method to instantiate an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope CreateFromPackage (string envelopeFileName, System.IO.Stream packageStream, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);
    parameters:
    - id: envelopeFileName
      type: System.String
      description: "OLE 複合檔案的名稱。"
    - id: packageStream
      type: System.IO.Stream
      description: "表示現有未加密的封裝資料流。"
    - id: publishLicense
      type: System.Security.RightsManagement.PublishLicense
      description: "內嵌在複合檔案中的發行授權。"
    - id: cryptoProvider
      type: System.Security.RightsManagement.CryptoProvider
      description: "物件，判斷哪些作業目前的使用者可以在加密內容上執行。"
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "新建立<xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>。"
  overload: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>envelopeFileName</code>or <code>packageStream</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Dispose
  id: Dispose
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Dispose()
  nameWithType: EncryptedPackageEnvelope.Dispose()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Dispose()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "所使用的資源全部釋出<xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>。"
  remarks: "當您完成<xref:System.IO.Packaging.EncryptedPackageEnvelope>.</xref:System.IO.Packaging.EncryptedPackageEnvelope>時呼叫 Dispose Dispose 方法會使<xref:System.IO.Packaging.EncryptedPackageEnvelope>中無法使用的狀態。</xref:System.IO.Packaging.EncryptedPackageEnvelope> 在呼叫 Dispose 之後，您必須釋放所有參考<xref:System.IO.Packaging.EncryptedPackageEnvelope>讓記憶體回收行程可以回收記憶體的<xref:System.IO.Packaging.EncryptedPackageEnvelope>所佔用。</xref:System.IO.Packaging.EncryptedPackageEnvelope> </xref:System.IO.Packaging.EncryptedPackageEnvelope> 如需詳細資訊，請參閱[清除 Unmanaged 資源上](~/add/includes/ajax-current-ext-md.md)和[實作 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      > [!NOTE] > 永遠呼叫 Dispose 之後，再放開您的最後一個參考至<xref:System.IO.Packaging.EncryptedPackageEnvelope>。</xref:System.IO.Packaging.EncryptedPackageEnvelope> 否則，它所使用的資源將不會釋放直到記憶體回收行程呼叫<xref:System.IO.Packaging.EncryptedPackageEnvelope>物件的<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> </xref:System.IO.Packaging.EncryptedPackageEnvelope>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EncryptedPackageEnvelope.Dispose(Boolean)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Dispose(Boolean)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "所使用的 unmanaged 的資源釋出<xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;></xref>並選擇性釋放 managed 的資源。"
  remarks: "這個方法會呼叫公用`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> `Dispose()`叫用受保護`Dispose(Boolean)`方法`disposing`參數設定為`true`。 <xref:System.Object.Finalize%2A>叫用`Dispose`與`disposing`設`false`。</xref:System.Object.Finalize%2A>       當`disposing`參數為 true，這個方法的任何 managed 物件所持有的資源全部釋出這個<xref:System.IO.Packaging.EncryptedPackageEnvelope>參考。</xref:System.IO.Packaging.EncryptedPackageEnvelope> 這個方法會叫用`Dispose()`每個參考物件的方法。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>表示釋放 managed 和 unmanaged 資源，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>表示只釋放 unmanaged 的資源。"
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess
  id: FileOpenAccess
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: FileOpenAccess
  nameWithType: EncryptedPackageEnvelope.FileOpenAccess
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得值，指定是否具有讀取、 寫入、 存取或兩者都已開啟檔案。"
  syntax:
    content: public System.IO.FileAccess FileOpenAccess { get; }
    return:
      type: System.IO.FileAccess
      description: "<xref href=&quot;System.IO.FileAccess&quot;> </xref>用來開啟檔案的值。"
  overload: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Flush
  id: Flush
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Flush()
  nameWithType: EncryptedPackageEnvelope.Flush()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Flush()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "排清資料流同時<xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;></xref>及其套件內容。"
  syntax:
    content: public void Flush ();
    parameters: []
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage
  id: GetPackage
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: GetPackage()
  nameWithType: EncryptedPackageEnvelope.GetPackage()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得加密的封裝內<xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>。"
  syntax:
    content: public System.IO.Packaging.Package GetPackage ();
    parameters: []
    return:
      type: System.IO.Packaging.Package
      description: "<xref href=&quot;System.IO.Packaging.Package&quot;> </xref>信封中。"
  overload: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)
  id: IsEncryptedPackageEnvelope(System.IO.Stream)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: IsEncryptedPackageEnvelope(Stream)
  nameWithType: EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(Stream)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(Stream)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得值，指定與加密的封裝資料流的 OLE 複合檔案是否包含指定的資料流。"
  syntax:
    content: public static bool IsEncryptedPackageEnvelope (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "要測試的資料流。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的資料流是具有加密的封裝資料流; OLE 複合檔案否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)
  id: IsEncryptedPackageEnvelope(System.String)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: IsEncryptedPackageEnvelope(String)
  nameWithType: EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(String)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得值，指定與加密的封裝資料流的 OLE 複合檔案是否包含指定的檔案。"
  remarks: ''
  example:
  - "The following example shows how to use this method to test for encryption.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: public static bool IsEncryptedPackageEnvelope (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "測試檔案。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的檔案是具有加密的封裝資料流; OLE 複合檔案否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>fileName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)
  id: Open(System.IO.Stream)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Open(Stream)
  nameWithType: EncryptedPackageEnvelope.Open(Stream)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(Stream)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "開啟的加密的封裝中指定的資料流。"
  remarks: "資料流必須加密的封裝。"
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope Open (System.IO.Stream envelopeStream);
    parameters:
    - id: envelopeStream
      type: System.IO.Stream
      description: "包含加密的封裝資料流。"
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "<xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>開啟。"
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Open*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)
  id: Open(System.String)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Open(String)
  nameWithType: EncryptedPackageEnvelope.Open(String)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "開啟的加密的封裝指定檔案中，以唯讀及取消共用。"
  remarks: "檔案必須有加密的封裝。       開啟的檔案是唯讀及取消共用。"
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope Open (string envelopeFileName);
    parameters:
    - id: envelopeFileName
      type: System.String
      description: "檔案包含加密的封裝。"
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "<xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>開啟。"
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Open*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)
  id: Open(System.String,System.IO.FileAccess)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Open(String,FileAccess)
  nameWithType: EncryptedPackageEnvelope.Open(String,FileAccess)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String,FileAccess)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "在指定的檔案以非共用模式和指定的存取權開啟加密的封裝。"
  remarks: "檔案必須有加密的封裝。       開啟的檔案會取消。"
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope Open (string envelopeFileName, System.IO.FileAccess access);
    parameters:
    - id: envelopeFileName
      type: System.String
      description: "檔案包含加密的封裝。"
    - id: access
      type: System.IO.FileAccess
      description: "存取類型。"
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "<xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>開啟。"
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Open*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)
  id: Open(System.String,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Open(String,FileAccess,FileShare)
  nameWithType: EncryptedPackageEnvelope.Open(String,FileAccess,FileShare)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String,FileAccess,FileShare)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "開啟的加密的封裝指定檔案中，讓它可以指定的存取和共用。"
  remarks: "檔案必須有加密的封裝。"
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope Open (string envelopeFileName, System.IO.FileAccess access, System.IO.FileShare sharing);
    parameters:
    - id: envelopeFileName
      type: System.String
      description: "檔案包含加密的封裝。"
    - id: access
      type: System.IO.FileAccess
      description: "存取類型。"
    - id: sharing
      type: System.IO.FileShare
      description: "型別共用。"
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "<xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>開啟。"
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Open*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties
  id: PackageProperties
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: PackageProperties
  nameWithType: EncryptedPackageEnvelope.PackageProperties
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得核心版權管理文件 （例如標題和主旨） 封裝屬性。"
  remarks: "這些核心屬性會儲存在標準 OLE 屬性資料流 （\\005SummaryInformation 和 \\005DocumentSummaryInformation）。 核心屬性也會儲存在封裝本身。 負責應用程式保持這兩組同步處理的屬性。"
  syntax:
    content: public System.IO.Packaging.PackageProperties PackageProperties { get; }
    return:
      type: System.IO.Packaging.PackageProperties
      description: "<xref href=&quot;System.IO.Packaging.PackageProperties&quot;> </xref>封裝。"
  overload: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation
  id: RightsManagementInformation
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: RightsManagementInformation
  nameWithType: EncryptedPackageEnvelope.RightsManagementInformation
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得權限管理資訊儲存在<xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>，明確地說<xref href=&quot;System.Security.RightsManagement.PublishLicense&quot;></xref>和<xref href=&quot;System.Security.RightsManagement.UseLicense&quot;> </xref>s 意 rights management OLE 複合檔案中儲存受保護的封裝"
  remarks: ''
  example:
  - "The following example shows how to obtain <xref:System.IO.Packaging.RightsManagementInformation> for an encrypted package by use the RightsManagementInformation property.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: public System.IO.Packaging.RightsManagementInformation RightsManagementInformation { get; }
    return:
      type: System.IO.Packaging.RightsManagementInformation
      description: "<xref href=&quot;System.IO.Packaging.RightsManagementInformation&quot;> </xref>封裝。"
  overload: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo
  id: StorageInfo
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: StorageInfo
  nameWithType: EncryptedPackageEnvelope.StorageInfo
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得可存取加密的封裝外部的複合檔案資料流的物件。"
  syntax:
    content: public System.IO.Packaging.StorageInfo StorageInfo { get; }
    return:
      type: System.IO.Packaging.StorageInfo
      description: "A <xref href=&quot;System.IO.Packaging.StorageInfo&quot;> </xref>代表 OLE 複合檔案中的加密封裝以外的資料流。"
  overload: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Close
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Close()
  nameWithType: EncryptedPackageEnvelope.Close()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Close()
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Create(Stream,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.Create(Stream,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Create(Stream,PublishLicense,CryptoProvider)
- uid: System.IO.Packaging.EncryptedPackageEnvelope
  parent: System.IO.Packaging
  isExternal: false
  name: EncryptedPackageEnvelope
  nameWithType: EncryptedPackageEnvelope
  fullName: System.IO.Packaging.EncryptedPackageEnvelope
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Security.RightsManagement.PublishLicense
  parent: System.Security.RightsManagement
  isExternal: false
  name: PublishLicense
  nameWithType: PublishLicense
  fullName: System.Security.RightsManagement.PublishLicense
- uid: System.Security.RightsManagement.CryptoProvider
  parent: System.Security.RightsManagement
  isExternal: false
  name: CryptoProvider
  nameWithType: CryptoProvider
  fullName: System.Security.RightsManagement.CryptoProvider
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Create(String,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.Create(String,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Create(String,PublishLicense,CryptoProvider)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)
- uid: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Dispose
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Dispose()
  nameWithType: EncryptedPackageEnvelope.Dispose()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Dispose()
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EncryptedPackageEnvelope.Dispose(Boolean)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: FileOpenAccess
  nameWithType: EncryptedPackageEnvelope.FileOpenAccess
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  nameWithType: FileAccess
  fullName: System.IO.FileAccess
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Flush
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Flush()
  nameWithType: EncryptedPackageEnvelope.Flush()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Flush()
- uid: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: GetPackage()
  nameWithType: EncryptedPackageEnvelope.GetPackage()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage()
- uid: System.IO.Packaging.Package
  parent: System.IO.Packaging
  isExternal: false
  name: Package
  nameWithType: Package
  fullName: System.IO.Packaging.Package
- uid: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: IsEncryptedPackageEnvelope(Stream)
  nameWithType: EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(Stream)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(Stream)
- uid: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: IsEncryptedPackageEnvelope(String)
  nameWithType: EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(String)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(String)
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Open(Stream)
  nameWithType: EncryptedPackageEnvelope.Open(Stream)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(Stream)
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Open(String)
  nameWithType: EncryptedPackageEnvelope.Open(String)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String)
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Open(String,FileAccess)
  nameWithType: EncryptedPackageEnvelope.Open(String,FileAccess)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String,FileAccess)
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Open(String,FileAccess,FileShare)
  nameWithType: EncryptedPackageEnvelope.Open(String,FileAccess,FileShare)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String,FileAccess,FileShare)
- uid: System.IO.FileShare
  parent: System.IO
  isExternal: false
  name: FileShare
  nameWithType: FileShare
  fullName: System.IO.FileShare
- uid: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: PackageProperties
  nameWithType: EncryptedPackageEnvelope.PackageProperties
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties
- uid: System.IO.Packaging.PackageProperties
  parent: System.IO.Packaging
  isExternal: false
  name: PackageProperties
  nameWithType: PackageProperties
  fullName: System.IO.Packaging.PackageProperties
- uid: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: RightsManagementInformation
  nameWithType: EncryptedPackageEnvelope.RightsManagementInformation
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation
- uid: System.IO.Packaging.RightsManagementInformation
  parent: System.IO.Packaging
  isExternal: false
  name: RightsManagementInformation
  nameWithType: RightsManagementInformation
  fullName: System.IO.Packaging.RightsManagementInformation
- uid: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: StorageInfo
  nameWithType: EncryptedPackageEnvelope.StorageInfo
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo
- uid: System.IO.Packaging.StorageInfo
  parent: System.IO.Packaging
  isExternal: false
  name: StorageInfo
  nameWithType: StorageInfo
  fullName: System.IO.Packaging.StorageInfo
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Close*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Close
  nameWithType: EncryptedPackageEnvelope.Close
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Create*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Create
  nameWithType: EncryptedPackageEnvelope.Create
- uid: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: CreateFromPackage
  nameWithType: EncryptedPackageEnvelope.CreateFromPackage
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Dispose*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Dispose
  nameWithType: EncryptedPackageEnvelope.Dispose
- uid: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: FileOpenAccess
  nameWithType: EncryptedPackageEnvelope.FileOpenAccess
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Flush*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Flush
  nameWithType: EncryptedPackageEnvelope.Flush
- uid: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: GetPackage
  nameWithType: EncryptedPackageEnvelope.GetPackage
- uid: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: IsEncryptedPackageEnvelope
  nameWithType: EncryptedPackageEnvelope.IsEncryptedPackageEnvelope
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Open
  nameWithType: EncryptedPackageEnvelope.Open
- uid: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: PackageProperties
  nameWithType: EncryptedPackageEnvelope.PackageProperties
- uid: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: RightsManagementInformation
  nameWithType: EncryptedPackageEnvelope.RightsManagementInformation
- uid: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: StorageInfo
  nameWithType: EncryptedPackageEnvelope.StorageInfo
