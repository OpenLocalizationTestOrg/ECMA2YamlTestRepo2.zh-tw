### YamlMime:ManagedReference
items:
- uid: System.Windows.Automation.Provider.IWindowProvider
  id: IWindowProvider
  children:
  - System.Windows.Automation.Provider.IWindowProvider.Close
  - System.Windows.Automation.Provider.IWindowProvider.InteractionState
  - System.Windows.Automation.Provider.IWindowProvider.IsModal
  - System.Windows.Automation.Provider.IWindowProvider.IsTopmost
  - System.Windows.Automation.Provider.IWindowProvider.Maximizable
  - System.Windows.Automation.Provider.IWindowProvider.Minimizable
  - System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)
  - System.Windows.Automation.Provider.IWindowProvider.VisualState
  - System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)
  langs:
  - csharp
  name: IWindowProvider
  nameWithType: IWindowProvider
  fullName: System.Windows.Automation.Provider.IWindowProvider
  type: Interface
  summary: "公開方法與屬性，以支援使用者介面自動化用戶端存取控制項提供基本視窗為基礎的功能，在傳統[!INCLUDE[TLA#tla_gui](~/add/includes/ajax-current-ext-md.md)]。"
  remarks: "在必須支援的 UI 自動化提供者上實作<xref:System.Windows.Automation.WindowPattern>控制項模式。</xref:System.Windows.Automation.WindowPattern>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      [System.Runtime.InteropServices.Guid("987df77b-db06-4d77-8f8a-86a9c3bb90b9")]

      [System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]

      public interface IWindowProvider
  implements: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.IWindowProvider.Close
  id: Close
  parent: System.Windows.Automation.Provider.IWindowProvider
  langs:
  - csharp
  name: Close()
  nameWithType: IWindowProvider.Close()
  fullName: System.Windows.Automation.Provider.IWindowProvider.Close()
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "嘗試關閉視窗。"
  remarks: "關閉必須立即傳回，而不會封鎖。       關閉引發<xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent>事件。</xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent> 可能的話，控制其相關聯的動作完成之後，應該引發事件。       分割窗格控制項上呼叫時，這個方法會關閉窗格，並移除相關聯的分割。 這個方法也可能會關閉所有其他窗格，視實作而定。"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Windows.Automation.Provider.IWindowProvider.Close*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "當此控制項已無法執行要求的動作。"
  - type: System.Windows.Automation.ElementNotAvailableException
    commentId: T:System.Windows.Automation.ElementNotAvailableException
    description: "當目標項目已無法再使用 （例如，在視窗已關閉）。"
  platform:
  - net462
- uid: System.Windows.Automation.Provider.IWindowProvider.InteractionState
  id: InteractionState
  parent: System.Windows.Automation.Provider.IWindowProvider
  langs:
  - csharp
  name: InteractionState
  nameWithType: IWindowProvider.InteractionState
  fullName: System.Windows.Automation.Provider.IWindowProvider.InteractionState
  type: Property
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "取得視窗的互動狀態。"
  syntax:
    content: public System.Windows.Automation.WindowInteractionState InteractionState { get; }
    return:
      type: System.Windows.Automation.WindowInteractionState
      description: "<xref href=&quot;System.Windows.Automation.WindowInteractionState&quot;> </xref>的控制項。"
  overload: System.Windows.Automation.Provider.IWindowProvider.InteractionState*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.IWindowProvider.IsModal
  id: IsModal
  parent: System.Windows.Automation.Provider.IWindowProvider
  langs:
  - csharp
  name: IsModal
  nameWithType: IWindowProvider.IsModal
  fullName: System.Windows.Automation.Provider.IWindowProvider.IsModal
  type: Property
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "取得值，指定是否為強制回應視窗。"
  syntax:
    content: public bool IsModal { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果視窗是強制回應。否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Automation.Provider.IWindowProvider.IsModal*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.IWindowProvider.IsTopmost
  id: IsTopmost
  parent: System.Windows.Automation.Provider.IWindowProvider
  langs:
  - csharp
  name: IsTopmost
  nameWithType: IWindowProvider.IsTopmost
  fullName: System.Windows.Automation.Provider.IWindowProvider.IsTopmost
  type: Property
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "取得值，指定視窗是否是圖層順序中的最上層項目。"
  syntax:
    content: public bool IsTopmost { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果視窗是最上層。否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Automation.Provider.IWindowProvider.IsTopmost*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.IWindowProvider.Maximizable
  id: Maximizable
  parent: System.Windows.Automation.Provider.IWindowProvider
  langs:
  - csharp
  name: Maximizable
  nameWithType: IWindowProvider.Maximizable
  fullName: System.Windows.Automation.Provider.IWindowProvider.Maximizable
  type: Property
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "取得值，指定是否可以最大化視窗。"
  syntax:
    content: public bool Maximizable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果可以最大化視窗。否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Automation.Provider.IWindowProvider.Maximizable*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.IWindowProvider.Minimizable
  id: Minimizable
  parent: System.Windows.Automation.Provider.IWindowProvider
  langs:
  - csharp
  name: Minimizable
  nameWithType: IWindowProvider.Minimizable
  fullName: System.Windows.Automation.Provider.IWindowProvider.Minimizable
  type: Property
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "取得值，指定視窗是否可以最小化。"
  syntax:
    content: public bool Minimizable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果可以最小化視窗。，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Automation.Provider.IWindowProvider.Minimizable*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)
  id: SetVisualState(System.Windows.Automation.WindowVisualState)
  parent: System.Windows.Automation.Provider.IWindowProvider
  langs:
  - csharp
  name: SetVisualState(WindowVisualState)
  nameWithType: IWindowProvider.SetVisualState(WindowVisualState)
  fullName: System.Windows.Automation.Provider.IWindowProvider.SetVisualState(WindowVisualState)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "變更視窗的可見狀態。 例如，降到最低或最大化。"
  syntax:
    content: public void SetVisualState (System.Windows.Automation.WindowVisualState state);
    parameters:
    - id: state
      type: System.Windows.Automation.WindowVisualState
      description: "視窗的要求的視覺狀態。"
  overload: System.Windows.Automation.Provider.IWindowProvider.SetVisualState*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "當控制項不支援要求的行為。"
  platform:
  - net462
- uid: System.Windows.Automation.Provider.IWindowProvider.VisualState
  id: VisualState
  parent: System.Windows.Automation.Provider.IWindowProvider
  langs:
  - csharp
  name: VisualState
  nameWithType: IWindowProvider.VisualState
  fullName: System.Windows.Automation.Provider.IWindowProvider.VisualState
  type: Property
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "取得視窗的可見狀態。"
  syntax:
    content: public System.Windows.Automation.WindowVisualState VisualState { get; }
    return:
      type: System.Windows.Automation.WindowVisualState
      description: "視窗的視覺狀態。"
  overload: System.Windows.Automation.Provider.IWindowProvider.VisualState*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)
  id: WaitForInputIdle(System.Int32)
  parent: System.Windows.Automation.Provider.IWindowProvider
  langs:
  - csharp
  name: WaitForInputIdle(Int32)
  nameWithType: IWindowProvider.WaitForInputIdle(Int32)
  fullName: System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(Int32)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "會導致呼叫的程式碼封鎖指定的時間或直到相關聯的處理序進入閒置狀態，何者先完成。"
  remarks: "這個方法通常用於搭配<xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>.</xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>處理       實作會依賴基礎的應用程式架構。因此這個方法可能會傳回段時間之後視窗可供使用者輸入。 呼叫程式碼不應依賴此方法來確定視窗變成閒置狀態的確切時間。"
  syntax:
    content: public bool WaitForInputIdle (int milliseconds);
    parameters:
    - id: milliseconds
      type: System.Int32
      description: "以毫秒為單位，等候相關聯的處理序變成閒置的時間量。 最大值是<xref:System.Int32>.</xref:System.Int32>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果視窗已進入閒置狀態。<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果發生逾時。"
  overload: System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "當傳遞的參數不是有效的數字。"
  platform:
  - net462
references:
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Automation.ElementNotAvailableException
  parent: System.Windows.Automation
  isExternal: false
  name: ElementNotAvailableException
  nameWithType: ElementNotAvailableException
  fullName: System.Windows.Automation.ElementNotAvailableException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Windows.Automation.Provider.IWindowProvider.Close
  parent: System.Windows.Automation.Provider.IWindowProvider
  isExternal: false
  name: Close()
  nameWithType: IWindowProvider.Close()
  fullName: System.Windows.Automation.Provider.IWindowProvider.Close()
- uid: System.Windows.Automation.Provider.IWindowProvider.InteractionState
  parent: System.Windows.Automation.Provider.IWindowProvider
  isExternal: false
  name: InteractionState
  nameWithType: IWindowProvider.InteractionState
  fullName: System.Windows.Automation.Provider.IWindowProvider.InteractionState
- uid: System.Windows.Automation.WindowInteractionState
  parent: System.Windows.Automation
  isExternal: false
  name: WindowInteractionState
  nameWithType: WindowInteractionState
  fullName: System.Windows.Automation.WindowInteractionState
- uid: System.Windows.Automation.Provider.IWindowProvider.IsModal
  parent: System.Windows.Automation.Provider.IWindowProvider
  isExternal: false
  name: IsModal
  nameWithType: IWindowProvider.IsModal
  fullName: System.Windows.Automation.Provider.IWindowProvider.IsModal
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Automation.Provider.IWindowProvider.IsTopmost
  parent: System.Windows.Automation.Provider.IWindowProvider
  isExternal: false
  name: IsTopmost
  nameWithType: IWindowProvider.IsTopmost
  fullName: System.Windows.Automation.Provider.IWindowProvider.IsTopmost
- uid: System.Windows.Automation.Provider.IWindowProvider.Maximizable
  parent: System.Windows.Automation.Provider.IWindowProvider
  isExternal: false
  name: Maximizable
  nameWithType: IWindowProvider.Maximizable
  fullName: System.Windows.Automation.Provider.IWindowProvider.Maximizable
- uid: System.Windows.Automation.Provider.IWindowProvider.Minimizable
  parent: System.Windows.Automation.Provider.IWindowProvider
  isExternal: false
  name: Minimizable
  nameWithType: IWindowProvider.Minimizable
  fullName: System.Windows.Automation.Provider.IWindowProvider.Minimizable
- uid: System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)
  parent: System.Windows.Automation.Provider.IWindowProvider
  isExternal: false
  name: SetVisualState(WindowVisualState)
  nameWithType: IWindowProvider.SetVisualState(WindowVisualState)
  fullName: System.Windows.Automation.Provider.IWindowProvider.SetVisualState(WindowVisualState)
- uid: System.Windows.Automation.WindowVisualState
  parent: System.Windows.Automation
  isExternal: false
  name: WindowVisualState
  nameWithType: WindowVisualState
  fullName: System.Windows.Automation.WindowVisualState
- uid: System.Windows.Automation.Provider.IWindowProvider.VisualState
  parent: System.Windows.Automation.Provider.IWindowProvider
  isExternal: false
  name: VisualState
  nameWithType: IWindowProvider.VisualState
  fullName: System.Windows.Automation.Provider.IWindowProvider.VisualState
- uid: System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)
  parent: System.Windows.Automation.Provider.IWindowProvider
  isExternal: false
  name: WaitForInputIdle(Int32)
  nameWithType: IWindowProvider.WaitForInputIdle(Int32)
  fullName: System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Automation.Provider.IWindowProvider.Close*
  parent: System.Windows.Automation.Provider.IWindowProvider
  isExternal: false
  name: Close
  nameWithType: IWindowProvider.Close
- uid: System.Windows.Automation.Provider.IWindowProvider.InteractionState*
  parent: System.Windows.Automation.Provider.IWindowProvider
  isExternal: false
  name: InteractionState
  nameWithType: IWindowProvider.InteractionState
- uid: System.Windows.Automation.Provider.IWindowProvider.IsModal*
  parent: System.Windows.Automation.Provider.IWindowProvider
  isExternal: false
  name: IsModal
  nameWithType: IWindowProvider.IsModal
- uid: System.Windows.Automation.Provider.IWindowProvider.IsTopmost*
  parent: System.Windows.Automation.Provider.IWindowProvider
  isExternal: false
  name: IsTopmost
  nameWithType: IWindowProvider.IsTopmost
- uid: System.Windows.Automation.Provider.IWindowProvider.Maximizable*
  parent: System.Windows.Automation.Provider.IWindowProvider
  isExternal: false
  name: Maximizable
  nameWithType: IWindowProvider.Maximizable
- uid: System.Windows.Automation.Provider.IWindowProvider.Minimizable*
  parent: System.Windows.Automation.Provider.IWindowProvider
  isExternal: false
  name: Minimizable
  nameWithType: IWindowProvider.Minimizable
- uid: System.Windows.Automation.Provider.IWindowProvider.SetVisualState*
  parent: System.Windows.Automation.Provider.IWindowProvider
  isExternal: false
  name: SetVisualState
  nameWithType: IWindowProvider.SetVisualState
- uid: System.Windows.Automation.Provider.IWindowProvider.VisualState*
  parent: System.Windows.Automation.Provider.IWindowProvider
  isExternal: false
  name: VisualState
  nameWithType: IWindowProvider.VisualState
- uid: System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle*
  parent: System.Windows.Automation.Provider.IWindowProvider
  isExternal: false
  name: WaitForInputIdle
  nameWithType: IWindowProvider.WaitForInputIdle
