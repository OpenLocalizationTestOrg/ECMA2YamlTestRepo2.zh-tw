### YamlMime:ManagedReference
items:
- uid: System.Xml.Serialization.SoapTypeAttribute
  id: SoapTypeAttribute
  children:
  - System.Xml.Serialization.SoapTypeAttribute.#ctor
  - System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String)
  - System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String,System.String)
  - System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema
  - System.Xml.Serialization.SoapTypeAttribute.Namespace
  - System.Xml.Serialization.SoapTypeAttribute.TypeName
  langs:
  - csharp
  name: SoapTypeAttribute
  nameWithType: SoapTypeAttribute
  fullName: System.Xml.Serialization.SoapTypeAttribute
  type: Class
  summary: "控制所產生的結構描述<xref:System.Xml.Serialization.XmlSerializer>當類別執行個體序列化為 SOAP 編碼的 XML。</xref:System.Xml.Serialization.XmlSerializer>"
  remarks: "SoapTypeAttribute 類別屬於一系列屬性可控制如何<xref:System.Xml.Serialization.XmlSerializer>序列化或還原序列化的物件做為編碼的 SOAP XML。</xref:System.Xml.Serialization.XmlSerializer> 所產生的 XML 符合全球資訊網協會 (www.w3.org) 文件，而 「 簡單物件存取通訊協定 (SOAP) 1.1 」 的第 5 節。 如需類似屬性的完整清單，請參閱[屬性，控制編碼 SOAP 序列化](~/add/includes/ajax-current-ext-md.md)。       若要序列化的物件做為編碼的 SOAP 訊息，建構的<xref:System.Xml.Serialization.XmlSerializer>使用<xref:System.Xml.Serialization.XmlTypeMapping><xref:System.Xml.Serialization.SoapReflectionImporter.ImportTypeMapping%2A>方法的<xref:System.Xml.Serialization.SoapReflectionImporter>類別</xref:System.Xml.Serialization.SoapReflectionImporter></xref:System.Xml.Serialization.SoapReflectionImporter.ImportTypeMapping%2A>建立的</xref:System.Xml.Serialization.XmlTypeMapping></xref:System.Xml.Serialization.XmlSerializer>       SoapTypeAttribute 只能套用至類別宣告。       <xref:System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema%2A>屬性會決定是否要產生的 XML 項目類型包含在產生的 XML 資料流的 XML 結構描述文件 (.xsd)。</xref:System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema%2A> 若要查看結構描述，請將類別編譯為 DLL 檔案。 將所產生的檔案傳遞的引數為[XML 結構描述定義工具 (Xsd.exe)](~/add/includes/ajax-current-ext-md.md)。 此工具會產生<xref:System.Xml.Serialization.XmlSerializer>類別</xref:System.Xml.Serialization.XmlSerializer>的執行個體所序列化的類別時產生的 XML 資料流之 XML 結構描述       設定不同的命名空間會導致 Xsd.exe 寫入序列化類別時產生的 XML 資料流不同的結構描述 (.xsd) 檔案。"
  example:
  - "The following example serializes a class named `Group`. The SoapTypeAttribute is applied to the class, with the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> set to \"SoapGroupType\". The SoapTypeAttribute is also overridden, changing the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> to \"Team\". Both versions are serialized, resulting in two files: SoapType.xml and SoapType2.xml.  \n  \n [!code-cs[SoapTypeAttribute Example#1](~/add/codesnippet/csharp/t-system.xml.serializati_5_1.cs)]\n [!code-vb[SoapTypeAttribute Example#1](~/add/codesnippet/visualbasic/t-system.xml.serializati_5_1.vb)]\n [!code-cpp[SoapTypeAttribute Example#1](~/add/codesnippet/cpp/t-system.xml.serializati_5_1.cpp)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Interface)]

      public class SoapTypeAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xml.Serialization.SoapTypeAttribute.#ctor
  id: '#ctor'
  parent: System.Xml.Serialization.SoapTypeAttribute
  langs:
  - csharp
  name: SoapTypeAttribute()
  nameWithType: SoapTypeAttribute.SoapTypeAttribute()
  fullName: System.Xml.Serialization.SoapTypeAttribute.SoapTypeAttribute()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml.Serialization
  summary: "初始化的新執行個體<xref href=&quot;System.Xml.Serialization.SoapTypeAttribute&quot;></xref>類別。"
  remarks: "建立<xref:System.Xml.Serialization.SoapTypeAttribute>時覆寫之型別的序列化。</xref:System.Xml.Serialization.SoapTypeAttribute> 將物件指派給<xref:System.Xml.Serialization.SoapAttributes.SoapType%2A>屬性，<xref:System.Xml.Serialization.SoapAttributes>並將新增<xref:System.Xml.Serialization.SoapAttributes>至<xref:System.Xml.Serialization.SoapAttributeOverrides>。</xref:System.Xml.Serialization.SoapAttributeOverrides> </xref:System.Xml.Serialization.SoapAttributes> </xref:System.Xml.Serialization.SoapAttributes> </xref:System.Xml.Serialization.SoapAttributes.SoapType%2A> 請參閱<xref:System.Xml.Serialization.SoapAttributeOverrides>如需詳細資訊覆寫 SOAP 序列化類別概觀。</xref:System.Xml.Serialization.SoapAttributeOverrides>"
  example:
  - "The following example serializes a class named `Group`. The <xref:System.Xml.Serialization.SoapTypeAttribute> is applied to the class with the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> set to \"SoapGroupType\". The <xref:System.Xml.Serialization.SoapTypeAttribute> is also overridden, changing the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> to \"Team\". Both versions are serialized, resulting in two files: SoapType.xml and SoapType2.xml.  \n  \n [!code-cs[SoapTypeAttribute Example#1](~/add/codesnippet/csharp/m-system.xml.serializati_8_1.cs)]\n [!code-vb[SoapTypeAttribute Example#1](~/add/codesnippet/visualbasic/m-system.xml.serializati_8_1.vb)]\n [!code-cpp[SoapTypeAttribute Example#1](~/add/codesnippet/cpp/m-system.xml.serializati_8_1.cpp)]"
  syntax:
    content: public SoapTypeAttribute ();
    parameters: []
  overload: System.Xml.Serialization.SoapTypeAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Xml.Serialization.SoapTypeAttribute
  langs:
  - csharp
  name: SoapTypeAttribute(String)
  nameWithType: SoapTypeAttribute.SoapTypeAttribute(String)
  fullName: System.Xml.Serialization.SoapTypeAttribute.SoapTypeAttribute(String)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml.Serialization
  summary: "初始化的新執行個體<xref href=&quot;System.Xml.Serialization.SoapTypeAttribute&quot;></xref>類別，並指定 XML 類型的名稱。"
  remarks: "建立<xref:System.Xml.Serialization.SoapTypeAttribute>時覆寫之型別的序列化。</xref:System.Xml.Serialization.SoapTypeAttribute> 將物件指派給<xref:System.Xml.Serialization.SoapAttributes.SoapType%2A>屬性，<xref:System.Xml.Serialization.SoapAttributes>並將新增<xref:System.Xml.Serialization.SoapAttributes>至<xref:System.Xml.Serialization.SoapAttributeOverrides>。</xref:System.Xml.Serialization.SoapAttributeOverrides> </xref:System.Xml.Serialization.SoapAttributes> </xref:System.Xml.Serialization.SoapAttributes> </xref:System.Xml.Serialization.SoapAttributes.SoapType%2A> 請參閱<xref:System.Xml.Serialization.SoapAttributeOverrides>如需詳細資訊覆寫 SOAP 序列化類別概觀。</xref:System.Xml.Serialization.SoapAttributeOverrides>"
  example:
  - "The following example serializes a class named `Group`. The <xref:System.Xml.Serialization.SoapTypeAttribute> is applied to the class with the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> set to \"SoapGroupType\". The <xref:System.Xml.Serialization.SoapTypeAttribute> is also overridden, changing the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> to \"Team\". Both versions are serialized, resulting in two files: SoapType.xml and SoapType2.xml.  \n  \n [!code-cs[SoapTypeAttribute Example#1](~/add/codesnippet/csharp/m-system.xml.serializati_11_1.cs)]\n [!code-vb[SoapTypeAttribute Example#1](~/add/codesnippet/visualbasic/m-system.xml.serializati_11_1.vb)]\n [!code-cpp[SoapTypeAttribute Example#1](~/add/codesnippet/cpp/m-system.xml.serializati_11_1.cpp)]"
  syntax:
    content: public SoapTypeAttribute (string typeName);
    parameters:
    - id: typeName
      type: System.String
      description: "類型的 XML 名稱<xref:System.Xml.Serialization.XmlSerializer>它將類別執行個體序列化 （但會辨識還原序列化的類別執行個體時） 時產生。</xref:System.Xml.Serialization.XmlSerializer>"
  overload: System.Xml.Serialization.SoapTypeAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Xml.Serialization.SoapTypeAttribute
  langs:
  - csharp
  name: SoapTypeAttribute(String,String)
  nameWithType: SoapTypeAttribute.SoapTypeAttribute(String,String)
  fullName: System.Xml.Serialization.SoapTypeAttribute.SoapTypeAttribute(String,String)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml.Serialization
  summary: "初始化的新執行個體<xref href=&quot;System.Xml.Serialization.SoapTypeAttribute&quot;></xref>類別，並指定名稱和類型的 XML 命名空間。"
  remarks: "建立<xref:System.Xml.Serialization.SoapTypeAttribute>時覆寫之型別的序列化。</xref:System.Xml.Serialization.SoapTypeAttribute> 將物件指派給<xref:System.Xml.Serialization.SoapAttributes.SoapType%2A>屬性，<xref:System.Xml.Serialization.SoapAttributes>並將新增<xref:System.Xml.Serialization.SoapAttributes>至<xref:System.Xml.Serialization.SoapAttributeOverrides>。</xref:System.Xml.Serialization.SoapAttributeOverrides> </xref:System.Xml.Serialization.SoapAttributes> </xref:System.Xml.Serialization.SoapAttributes> </xref:System.Xml.Serialization.SoapAttributes.SoapType%2A> 請參閱<xref:System.Xml.Serialization.SoapAttributeOverrides>如需有關覆寫 SOAP 序列化類別概觀。</xref:System.Xml.Serialization.SoapAttributeOverrides>       如果您設定<xref:System.Xml.Serialization.SoapTypeAttribute.Namespace%2A>多個類型的值 (亦即，如果您將屬性套用至使用不同的多個類別<xref:System.Xml.Serialization.SoapTypeAttribute.Namespace%2A>每個值)，則[XML 結構描述定義工具 (Xsd.exe)](~/add/includes/ajax-current-ext-md.md)會產生每個類型的另一個結構描述檔案 (.xsd)。</xref:System.Xml.Serialization.SoapTypeAttribute.Namespace%2A> </xref:System.Xml.Serialization.SoapTypeAttribute.Namespace%2A> 這是因為每種類型的設定不同的命名空間呈現每個型別不同於其他項目，讓所需的每個型別寫出做為獨立的實體。"
  example:
  - "The following example serializes a class named `Group`. The <xref:System.Xml.Serialization.SoapTypeAttribute> is applied to the class with the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> set to \"SoapGroupType\". The <xref:System.Xml.Serialization.SoapTypeAttribute> is also overridden, changing the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> to \"Team\". Both versions are serialized, resulting in two files: SoapType.xml and SoapType2.xml.  \n  \n [!code-cs[SoapTypeAttribute Example#1](~/add/codesnippet/csharp/b7d7a27e-07c4-4ae2-8b05-_1.cs)]\n [!code-vb[SoapTypeAttribute Example#1](~/add/codesnippet/visualbasic/b7d7a27e-07c4-4ae2-8b05-_1.vb)]\n [!code-cpp[SoapTypeAttribute Example#1](~/add/codesnippet/cpp/b7d7a27e-07c4-4ae2-8b05-_1.cpp)]"
  syntax:
    content: public SoapTypeAttribute (string typeName, string ns);
    parameters:
    - id: typeName
      type: System.String
      description: "類型的 XML 名稱<xref:System.Xml.Serialization.XmlSerializer>它將類別執行個體序列化 （但會辨識還原序列化的類別執行個體時） 時產生。</xref:System.Xml.Serialization.XmlSerializer>"
    - id: ns
      type: System.String
      description: "類型的 XML 命名空間。"
  overload: System.Xml.Serialization.SoapTypeAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema
  id: IncludeInSchema
  parent: System.Xml.Serialization.SoapTypeAttribute
  langs:
  - csharp
  name: IncludeInSchema
  nameWithType: SoapTypeAttribute.IncludeInSchema
  fullName: System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Serialization
  summary: "取得或設定值，指出是否要包含在 SOAP 編碼的 XML 結構描述文件中的型別。"
  remarks: "套用<xref:System.Xml.Serialization.SoapTypeAttribute>至類別宣告中，指定是否要包含在 XML 結構描述文件中的型別。</xref:System.Xml.Serialization.SoapTypeAttribute> 若要查看設定之屬性的結果<xref:System.Xml.Serialization.SoapTypeAttribute>類別，並編譯為可執行檔或 DLL，應用程式同時傳遞至所產生的檔案[XML 結構描述定義工具 (Xsd.exe)](~/add/includes/ajax-current-ext-md.md)。</xref:System.Xml.Serialization.SoapTypeAttribute> 工具會將結構描述，包括 XML 資料流序列化類別時產生的型別定義。"
  example:
  - "The following example serializes a class named `Group`. The <xref:System.Xml.Serialization.SoapTypeAttribute> is applied to the class with the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> set to \"SoapGroupType\". The <xref:System.Xml.Serialization.SoapTypeAttribute> is also overridden, changing the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> to \"Team\". Both versions are serialized, resulting in two files: SoapType.xml and SoapType2.xml.  \n  \n [!code-cs[SoapTypeAttribute Example#1](~/add/codesnippet/csharp/p-system.xml.serializati_18_1.cs)]\n [!code-vb[SoapTypeAttribute Example#1](~/add/codesnippet/visualbasic/p-system.xml.serializati_18_1.vb)]\n [!code-cpp[SoapTypeAttribute Example#1](~/add/codesnippet/cpp/p-system.xml.serializati_18_1.cpp)]"
  syntax:
    content: public bool IncludeInSchema { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>型別包含在 SOAP 編碼的 XML 結構描述文件。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Serialization.SoapTypeAttribute.Namespace
  id: Namespace
  parent: System.Xml.Serialization.SoapTypeAttribute
  langs:
  - csharp
  name: Namespace
  nameWithType: SoapTypeAttribute.Namespace
  fullName: System.Xml.Serialization.SoapTypeAttribute.Namespace
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Serialization
  summary: "取得或設定 XML 類型的命名空間。"
  remarks: "如果您將多個類型的命名空間值 （亦即，如果您將屬性套用至多個不同的命名空間值，針對每個類別），則[XML 結構描述定義工具 (Xsd.exe)](~/add/includes/ajax-current-ext-md.md)會產生每個類型的另一個結構描述檔案 (.xsd)。 這是因為每種類型的設定不同的命名空間呈現每個型別不同於其他項目，讓所需的每個型別寫出做為獨立的實體。"
  example:
  - "The following example serializes a class named `Group`. The <xref:System.Xml.Serialization.SoapTypeAttribute> is applied to the class with the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> set to \"SoapGroupType\". The <xref:System.Xml.Serialization.SoapTypeAttribute> is also overridden, changing the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> to \"Team\". Both versions are serialized, resulting in two files: SoapType.xml and SoapType2.xml.  \n  \n [!code-cs[SoapTypeAttribute Example#1](~/add/codesnippet/csharp/p-system.xml.serializati_2_1.cs)]\n [!code-vb[SoapTypeAttribute Example#1](~/add/codesnippet/visualbasic/p-system.xml.serializati_2_1.vb)]\n [!code-cpp[SoapTypeAttribute Example#1](~/add/codesnippet/cpp/p-system.xml.serializati_2_1.cpp)]"
  syntax:
    content: public string Namespace { get; set; }
    return:
      type: System.String
      description: "XML 類型的命名空間。 預設為空字串 (&quot;&quot;)。"
  overload: System.Xml.Serialization.SoapTypeAttribute.Namespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Serialization.SoapTypeAttribute.TypeName
  id: TypeName
  parent: System.Xml.Serialization.SoapTypeAttribute
  langs:
  - csharp
  name: TypeName
  nameWithType: SoapTypeAttribute.TypeName
  fullName: System.Xml.Serialization.SoapTypeAttribute.TypeName
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Serialization
  summary: "取得或設定 XML 類型的名稱。"
  remarks: "套用<xref:System.Xml.Serialization.SoapTypeAttribute>類別來指定 XML 類型的命名空間、 XML 的型別名稱，以及是否要包含在 XML 結構描述文件中的型別。</xref:System.Xml.Serialization.SoapTypeAttribute> 若要查看設定結果<xref:System.Xml.Serialization.SoapTypeAttribute>物件的屬性，您應用程式編譯為可執行檔或 DLL，並傳遞至所產生的檔案[XML 結構描述定義工具 (Xsd.exe)](~/add/includes/ajax-current-ext-md.md)。</xref:System.Xml.Serialization.SoapTypeAttribute> 工具會將結構描述，包括類型定義。"
  example:
  - "The following example serializes a class named `Group`. The <xref:System.Xml.Serialization.SoapTypeAttribute> is applied to the class with the TypeName set to \"SoapGroupType\". The <xref:System.Xml.Serialization.SoapTypeAttribute> is also overridden, changing the TypeName to \"Team\". Both versions are serialized, resulting in two files: SoapType.xml and SoapType2.xml.  \n  \n [!code-cs[SoapTypeAttribute Example#1](~/add/codesnippet/csharp/p-system.xml.serializati_14_1.cs)]\n [!code-vb[SoapTypeAttribute Example#1](~/add/codesnippet/visualbasic/p-system.xml.serializati_14_1.vb)]\n [!code-cpp[SoapTypeAttribute Example#1](~/add/codesnippet/cpp/p-system.xml.serializati_14_1.cpp)]"
  syntax:
    content: public string TypeName { get; set; }
    return:
      type: System.String
      description: "XML 類型的名稱。 預設為類別名稱。"
  overload: System.Xml.Serialization.SoapTypeAttribute.TypeName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Xml.Serialization.SoapTypeAttribute.#ctor
  parent: System.Xml.Serialization.SoapTypeAttribute
  isExternal: false
  name: SoapTypeAttribute()
  nameWithType: SoapTypeAttribute.SoapTypeAttribute()
  fullName: System.Xml.Serialization.SoapTypeAttribute.SoapTypeAttribute()
- uid: System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String)
  parent: System.Xml.Serialization.SoapTypeAttribute
  isExternal: false
  name: SoapTypeAttribute(String)
  nameWithType: SoapTypeAttribute.SoapTypeAttribute(String)
  fullName: System.Xml.Serialization.SoapTypeAttribute.SoapTypeAttribute(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String,System.String)
  parent: System.Xml.Serialization.SoapTypeAttribute
  isExternal: false
  name: SoapTypeAttribute(String,String)
  nameWithType: SoapTypeAttribute.SoapTypeAttribute(String,String)
  fullName: System.Xml.Serialization.SoapTypeAttribute.SoapTypeAttribute(String,String)
- uid: System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema
  parent: System.Xml.Serialization.SoapTypeAttribute
  isExternal: false
  name: IncludeInSchema
  nameWithType: SoapTypeAttribute.IncludeInSchema
  fullName: System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.Serialization.SoapTypeAttribute.Namespace
  parent: System.Xml.Serialization.SoapTypeAttribute
  isExternal: false
  name: Namespace
  nameWithType: SoapTypeAttribute.Namespace
  fullName: System.Xml.Serialization.SoapTypeAttribute.Namespace
- uid: System.Xml.Serialization.SoapTypeAttribute.TypeName
  parent: System.Xml.Serialization.SoapTypeAttribute
  isExternal: false
  name: TypeName
  nameWithType: SoapTypeAttribute.TypeName
  fullName: System.Xml.Serialization.SoapTypeAttribute.TypeName
- uid: System.Xml.Serialization.SoapTypeAttribute.#ctor*
  parent: System.Xml.Serialization.SoapTypeAttribute
  isExternal: false
  name: SoapTypeAttribute
  nameWithType: SoapTypeAttribute.SoapTypeAttribute
- uid: System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema*
  parent: System.Xml.Serialization.SoapTypeAttribute
  isExternal: false
  name: IncludeInSchema
  nameWithType: SoapTypeAttribute.IncludeInSchema
- uid: System.Xml.Serialization.SoapTypeAttribute.Namespace*
  parent: System.Xml.Serialization.SoapTypeAttribute
  isExternal: false
  name: Namespace
  nameWithType: SoapTypeAttribute.Namespace
- uid: System.Xml.Serialization.SoapTypeAttribute.TypeName*
  parent: System.Xml.Serialization.SoapTypeAttribute
  isExternal: false
  name: TypeName
  nameWithType: SoapTypeAttribute.TypeName
