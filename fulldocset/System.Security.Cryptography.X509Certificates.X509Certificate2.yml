### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  id: X509Certificate2
  children:
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
  - System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
  - System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])
  - System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[])
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
  - System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
  - System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
  - System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey
  - System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
  - System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Reset
  - System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
  - System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
  - System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
  - System.Security.Cryptography.X509Certificates.X509Certificate2.ToString
  - System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Verify
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Version
  langs:
  - csharp
  name: X509Certificate2
  nameWithType: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
  type: Class
  summary: "代表 X.509 憑證。"
  remarks: "在國際標準組織 (ISO) 工作群組中產生 X.509 結構。 這個結構可以用來代表不同類型的資訊包括識別、 權限，以及持有者的屬性 （權限、 年齡、 性別、 位置、 關係，等等）。 雖然 ISO 規格結構本身的資訊最多，但 X509Certificate2 類別被設計來建立模型的使用案例，網際網路工程任務推動小組 (IETF) 公開金鑰基礎結構，X.509 (PKIX) 工作小組所發出的規格中定義。 資訊的這些規格是 RFC 3280&quot;[憑證和憑證撤銷清單 (CRL) 設定檔](http://go.microsoft.com/fwlink/?LinkId=45286)。 」      > [!IMPORTANT] > 開頭[!INCLUDE[net_v46](~/add/includes/net-v46-md.md)]，這個型別會實作<xref:System.IDisposable>介面。</xref:System.IDisposable> 當您完成使用類型時，您應該會處置它直接或間接。 若要直接處置的類型，呼叫其<xref:System.IDisposable.Dispose%2A>方法中的`try` / `catch`區塊。</xref:System.IDisposable.Dispose%2A> 若要為其配置間接，使用語言建構例如`using`（C# 中） 或`Using`（在 Visual Basic)。 如需詳細資訊，請參閱中的 「 使用物件的實作 IDisposable 」 一節<xref:System.IDisposable>介面 > 主題。</xref:System.IDisposable>   >> 為目標的應用程式[!INCLUDE[net_v452](~/add/includes/net-v452-md.md)]和舊版中，X509Certificate2 類別未實作<xref:System.IDisposable>介面，並因此不需要`Dispose`方法。</xref:System.IDisposable>"
  example:
  - "The following example demonstrates how to use an X509Certificate2 object to encrypt and decrypt a file.  \n  \n [!code-vb[X509Certificate2#1](~/add/codesnippet/visualbasic/t-system.security.crypto_122_1.vb)]\n [!code-cs[X509Certificate2#1](~/add/codesnippet/csharp/t-system.security.crypto_122_1.cs)]  \n  \n The following example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/t-system.security.crypto_122_2.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/t-system.security.crypto_122_2.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/t-system.security.crypto_122_2.vb)]"
  syntax:
    content: 'public class X509Certificate2 : System.Security.Cryptography.X509Certificates.X509Certificate'
  inheritance:
  - System.Object
  - System.Security.Cryptography.X509Certificates.X509Certificate
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromCertFile(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromSignedFile(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Dispose
  - System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.Security.SecureString)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate.FormatDate(System.DateTime)
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHashString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetEffectiveDateString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetExpirationDateString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetIssuerName
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetName
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKeyString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertData
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertDataString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumberString
  - System.Security.Cryptography.X509Certificates.X509Certificate.Handle
  - System.Security.Cryptography.X509Certificates.X509Certificate.Issuer
  - System.Security.Cryptography.X509Certificates.X509Certificate.Subject
  - System.Security.Cryptography.X509Certificates.X509Certificate.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - System.Security.Cryptography.X509Certificates.X509Certificate.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2()
  nameWithType: X509Certificate2.X509Certificate2()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2()
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>類別。"
  remarks: "這個建構函式會建立空<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>物件，與不同的其他建構函式這個類別使用的位元組陣列、 指標或憑證檔案的憑證資訊。</xref:System.Security.Cryptography.X509Certificates.X509Certificate2>"
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/m-system.security.crypto_122_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/m-system.security.crypto_122_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/m-system.security.crypto_122_1.cpp)]"
  syntax:
    content: public X509Certificate2 ();
    parameters: []
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(Byte[])
  nameWithType: X509Certificate2.X509Certificate2(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[])
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>類別使用位元組陣列中的資訊。"
  remarks: "這個建構函式會建立新<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>使用位元組陣列中的憑證資訊的物件。</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> 編碼的二進位 (DER) 或 Base64 編碼 X.509 資料，可以是位元組陣列。 位元組陣列也可以是 PKCS7 (Authenticode) 已簽署檔案。簽章者憑證用來建立物件。       如果您建立<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>藉由指定的 PKCS7 已簽署的檔案存放區的憑證`rawData`、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>簽署存放區的憑證，而不是任何憑證存放區中建立。</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> </xref:System.Security.Cryptography.X509Certificates.X509Certificate2>"
  syntax:
    content: public X509Certificate2 (byte[] rawData);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "位元組陣列，包含來自 X.509 憑證的資料。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "發生錯誤的憑證。 例如:-憑證檔案不存在。      -憑證無效。      -憑證的密碼不正確。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)
  id: '#ctor(System.IntPtr)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(IntPtr)
  nameWithType: X509Certificate2.X509Certificate2(IntPtr)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(IntPtr)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>類別使用 unmanaged 控制代碼。"
  remarks: "這個建構函式會建立新<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>物件控制代碼使用適用於 Microsoft 密碼編譯 API 的憑證內容， `PCCERT_CONTEXT`。</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> 請注意，這個建構函式的立即呼叫端需要 unmanaged 程式碼權限。      > [!IMPORTANT] > 建構函式會建立憑證內容的複本。 不會假設您傳遞至建構函式的內容結構是有效的。都已釋放。 您可以取得一份目前`PCCERT_CONTEXT`結構從<xref:System.Security.Cryptography.X509Certificates.X509Certificate.Handle%2A>屬性，但是它是有效的存留期間只<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>物件。</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> </xref:System.Security.Cryptography.X509Certificates.X509Certificate.Handle%2A>"
  syntax:
    content: public X509Certificate2 (IntPtr handle);
    parameters:
    - id: handle
      type: System.IntPtr
      description: "Unmanaged 程式碼中的憑證內容的指標。 C 結構稱為<xref uid=&quot;langword_csharp_PCCERT_CONTEXT&quot; name=&quot;PCCERT_CONTEXT&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "發生錯誤的憑證。 例如:-憑證檔案不存在。      -憑證無效。      -憑證的密碼不正確。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)
  id: '#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(X509Certificate)
  nameWithType: X509Certificate2.X509Certificate2(X509Certificate)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(X509Certificate)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>類別使用<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate&quot;></xref>物件。"
  remarks: "這個方法建立的新執行個體<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>類別使用<xref:System.Security.Cryptography.X509Certificates.X509Certificate>物件。</xref:System.Security.Cryptography.X509Certificates.X509Certificate> </xref:System.Security.Cryptography.X509Certificates.X509Certificate2>"
  syntax:
    content: public X509Certificate2 (System.Security.Cryptography.X509Certificates.X509Certificate certificate);
    parameters:
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate&quot;> </xref>物件。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "發生錯誤的憑證。 例如:-憑證檔案不存在。      -憑證無效。      -憑證的密碼不正確。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(String)
  nameWithType: X509Certificate2.X509Certificate2(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>類別使用憑證的檔案名稱。"
  remarks: "這個建構函式會建立新<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>物件使用憑證的檔案名稱。</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> 可支援二進位編碼 (DER) 或 Base64 編碼方式。       如果您建立<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>藉由指定的 PKCS7 已簽署的檔案存放區的憑證`fileName`、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>簽署存放區的憑證，而不是任何憑證存放區中建立。</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> </xref:System.Security.Cryptography.X509Certificates.X509Certificate2>"
  syntax:
    content: public X509Certificate2 (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "憑證檔案的名稱。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "發生錯誤的憑證。 例如:-憑證檔案不存在。      -憑證無效。      -憑證的密碼不正確。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString)
  id: '#ctor(System.Byte[],System.Security.SecureString)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(Byte[],SecureString)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],SecureString)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],SecureString)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>類別使用的位元組陣列和密碼。"
  remarks: "這個建構函式會搭配 PKCS12 (PFX) 檔案包含憑證的私密金鑰。 呼叫這個建構函式，以正確的密碼將私密金鑰解密，並將它儲存到金鑰容器。      > [!IMPORTANT] > 永遠不會將密碼寫在原始程式碼中。  可以使用的組件擷取硬式編碼的密碼[Ildasm.exe （IL 解譯器）](~/add/includes/ajax-current-ext-md.md)，十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。       如果您建立<xref:System.Security.Cryptography.X509Certificates.X509Certificate>藉由指定的 PKCS7 已簽署的檔案存放區的憑證`rawData`、<xref:System.Security.Cryptography.X509Certificates.X509Certificate>簽署存放區的憑證，而不是任何憑證存放區中建立。</xref:System.Security.Cryptography.X509Certificates.X509Certificate> </xref:System.Security.Cryptography.X509Certificates.X509Certificate>"
  syntax:
    content: public X509Certificate2 (byte[] rawData, System.Security.SecureString password);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "位元組陣列，其中包含來自 X.509 憑證的資料。"
    - id: password
      type: System.Security.SecureString
      description: "存取 X.509 憑證資料所需的密碼。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "發生錯誤的憑證。 例如:-憑證檔案不存在。      -憑證無效。      -憑證的密碼不正確。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)
  id: '#ctor(System.Byte[],System.String)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(Byte[],String)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>類別使用的位元組陣列和密碼。"
  remarks: "這個建構函式會建立新<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>物件使用的位元組陣列和密碼所需存取憑證資料。</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> 它搭配 PKCS12 (PFX) 檔案包含憑證的私密金鑰。 呼叫這個建構函式，以正確的密碼將私密金鑰解密，並將它儲存到金鑰容器。      > [!IMPORTANT] > 永遠不會將密碼寫在原始程式碼中。  可以使用的組件擷取硬式編碼的密碼[Ildasm.exe （IL 解譯器）](~/add/includes/ajax-current-ext-md.md)，十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。       如果您建立<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>藉由指定的 PKCS7 已簽署的檔案存放區的憑證`rawData`、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>簽署存放區的憑證，而不是任何憑證存放區中建立。</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> </xref:System.Security.Cryptography.X509Certificates.X509Certificate2>"
  syntax:
    content: public X509Certificate2 (byte[] rawData, string password);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "位元組陣列，包含來自 X.509 憑證的資料。"
    - id: password
      type: System.String
      description: "存取 X.509 憑證資料所需的密碼。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "發生錯誤的憑證。 例如:-憑證檔案不存在。      -憑證無效。      -憑證的密碼不正確。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(SerializationInfo,StreamingContext)
  nameWithType: X509Certificate2.X509Certificate2(SerializationInfo,StreamingContext)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>類別使用指定的序列化和資料流內容資訊。"
  syntax:
    content: protected X509Certificate2 (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "新的還原序列化所需的序列化資訊<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "要還原序列化資料流來源的內容資訊。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString)
  id: '#ctor(System.String,System.Security.SecureString)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(String,SecureString)
  nameWithType: X509Certificate2.X509Certificate2(String,SecureString)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,SecureString)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>類別使用憑證的檔案名稱和密碼。"
  remarks: "這個建構函式會搭配 PKCS12 (PFX) 檔案包含憑證的私密金鑰。 呼叫這個建構函式，以正確的密碼將私密金鑰解密，並將它儲存到金鑰容器。      > [!IMPORTANT] > 永遠不會將密碼寫在原始程式碼中。  可以使用的組件擷取硬式編碼的密碼[Ildasm.exe （IL 解譯器）](~/add/includes/ajax-current-ext-md.md)，十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。       如果您建立<xref:System.Security.Cryptography.X509Certificates.X509Certificate>藉由指定的 PKCS7 已簽署的檔案存放區的憑證`fileName`、<xref:System.Security.Cryptography.X509Certificates.X509Certificate>簽署存放區的憑證，而不是任何憑證存放區中建立。</xref:System.Security.Cryptography.X509Certificates.X509Certificate> </xref:System.Security.Cryptography.X509Certificates.X509Certificate>"
  syntax:
    content: public X509Certificate2 (string fileName, System.Security.SecureString password);
    parameters:
    - id: fileName
      type: System.String
      description: "憑證檔案的名稱。"
    - id: password
      type: System.Security.SecureString
      description: "存取 X.509 憑證資料所需的密碼。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "發生錯誤的憑證。 例如:-憑證檔案不存在。      -憑證無效。      -憑證的密碼不正確。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(String,String)
  nameWithType: X509Certificate2.X509Certificate2(String,String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>類別使用憑證的檔案名稱和密碼，用來存取此憑證。"
  remarks: "這個建構函式會建立新<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>物件使用憑證的檔案名稱和密碼，才能存取憑證。</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> 它搭配 PKCS12 (PFX) 檔案包含憑證的私密金鑰。 呼叫這個建構函式，以正確的密碼將私密金鑰解密，並將它儲存到金鑰容器。      > [!IMPORTANT] > 永遠不會將密碼寫在原始程式碼中。  可以使用的組件擷取硬式編碼的密碼[Ildasm.exe （IL 解譯器）](~/add/includes/ajax-current-ext-md.md)，十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。       如果您建立<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>藉由指定的 PKCS7 已簽署的檔案存放區的憑證`fileName`、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>簽署存放區的憑證，而不是任何憑證存放區中建立。</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> </xref:System.Security.Cryptography.X509Certificates.X509Certificate2>"
  syntax:
    content: public X509Certificate2 (string fileName, string password);
    parameters:
    - id: fileName
      type: System.String
      description: "憑證檔案的名稱。"
    - id: password
      type: System.String
      description: "存取 X.509 憑證資料所需的密碼。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "發生錯誤的憑證。 例如:-憑證檔案不存在。      -憑證無效。      -憑證的密碼不正確。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: '#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>類別使用的位元組陣列、 密碼及金鑰儲存旗標。"
  remarks: "這個建構函式會搭配 PKCS12 (PFX) 檔案包含憑證的私密金鑰。 呼叫這個建構函式，以正確的密碼將私密金鑰解密，並將它儲存至 Microsoft 密碼編譯 API 密碼編譯服務提供者 (CSP)。      > [!IMPORTANT] > 永遠不會將密碼寫在原始程式碼中。  可以使用的組件擷取硬式編碼的密碼[Ildasm.exe （IL 解譯器）](~/add/includes/ajax-current-ext-md.md)，十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。       如果您建立<xref:System.Security.Cryptography.X509Certificates.X509Certificate>藉由指定的 PKCS7 已簽署的檔案存放區的憑證`rawData`、<xref:System.Security.Cryptography.X509Certificates.X509Certificate>簽署存放區的憑證，而不是任何憑證存放區中建立。</xref:System.Security.Cryptography.X509Certificates.X509Certificate> </xref:System.Security.Cryptography.X509Certificates.X509Certificate>"
  syntax:
    content: public X509Certificate2 (byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "位元組陣列，其中包含來自 X.509 憑證的資料。"
    - id: password
      type: System.Security.SecureString
      description: "存取 X.509 憑證資料所需的密碼。"
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "列舉的位元組合值可控制的位置和方式匯入憑證。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "發生錯誤的憑證。 例如:-憑證檔案不存在。      -憑證無效。      -憑證的密碼不正確。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: '#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(Byte[],String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],String,X509KeyStorageFlags)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>類別使用的位元組陣列、 密碼及金鑰儲存旗標。"
  remarks: "這個建構函式會建立新<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>物件使用的位元組陣列，才能存取憑證資料和金鑰儲存旗標的密碼。</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> 它搭配 PKCS12 (PFX) 檔案包含憑證的私密金鑰。 呼叫這個建構函式，以正確的密碼將私密金鑰解密，並將它儲存至 Microsoft 密碼編譯 API 密碼編譯服務提供者 (CSP)。      > [!IMPORTANT] > 永遠不會將密碼寫在原始程式碼中。  可以使用的組件擷取硬式編碼的密碼[Ildasm.exe （IL 解譯器）](~/add/includes/ajax-current-ext-md.md)，十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。       如果您建立<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>藉由指定的 PKCS7 已簽署的檔案存放區的憑證`rawData`、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>簽署存放區的憑證，而不是任何憑證存放區中建立。</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> </xref:System.Security.Cryptography.X509Certificates.X509Certificate2>"
  syntax:
    content: public X509Certificate2 (byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "位元組陣列，包含來自 X.509 憑證的資料。"
    - id: password
      type: System.String
      description: "存取 X.509 憑證資料所需的密碼。"
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "列舉的位元組合值可控制的位置和方式匯入憑證。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "發生錯誤的憑證。 例如:-憑證檔案不存在。      -憑證無效。      -憑證的密碼不正確。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: '#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(String,SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(String,SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,SecureString,X509KeyStorageFlags)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>類別使用憑證的檔案名稱、 密碼及金鑰儲存旗標。"
  remarks: "如果您建立<xref:System.Security.Cryptography.X509Certificates.X509Certificate>藉由指定的 PKCS7 已簽署的檔案存放區的憑證`fileName`、<xref:System.Security.Cryptography.X509Certificates.X509Certificate>簽署存放區的憑證，而不是任何憑證存放區中建立。</xref:System.Security.Cryptography.X509Certificates.X509Certificate> </xref:System.Security.Cryptography.X509Certificates.X509Certificate>"
  syntax:
    content: public X509Certificate2 (string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: fileName
      type: System.String
      description: "憑證檔案的名稱。"
    - id: password
      type: System.Security.SecureString
      description: "存取 X.509 憑證資料所需的密碼。"
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "列舉的位元組合值可控制的位置和方式匯入憑證。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "發生錯誤的憑證。 例如:-憑證檔案不存在。      -憑證無效。      -憑證的密碼不正確。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: '#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(String,String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(String,String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,String,X509KeyStorageFlags)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>類別使用的憑證檔案名稱、 密碼，用來存取憑證和金鑰儲存旗標。"
  remarks: "這個建構函式會建立新<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>物件使用的憑證檔案名稱、 存取憑證和金鑰儲存旗標所需的密碼。</xref:System.Security.Cryptography.X509Certificates.X509Certificate2>      > [!IMPORTANT] > 永遠不會將密碼寫在原始程式碼中。  可以使用的組件擷取硬式編碼的密碼[Ildasm.exe （IL 解譯器）](~/add/includes/ajax-current-ext-md.md)，十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。       如果您建立<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>藉由指定的 PKCS7 已簽署的檔案存放區的憑證`fileName`、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>簽署存放區的憑證，而不是任何憑證存放區中建立。</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> </xref:System.Security.Cryptography.X509Certificates.X509Certificate2>"
  syntax:
    content: public X509Certificate2 (string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: fileName
      type: System.String
      description: "憑證檔案的名稱。"
    - id: password
      type: System.String
      description: "存取 X.509 憑證資料所需的密碼。"
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "列舉的位元組合值可控制的位置和方式匯入憑證。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "發生錯誤的憑證。 例如:-憑證檔案不存在。      -憑證無效。      -憑證的密碼不正確。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
  id: Archived
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Archived
  nameWithType: X509Certificate2.Archived
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "取得或設定值，指出 已封存的 X.509 憑證。"
  remarks: "這個屬性設定只在存放區相關聯的憑證。 如果此屬性設定，而且憑證會新增至憑證存放區，值會保存。 如果屬性設定在從存放區擷取憑證，就會立即保存值。       X.509 存放區中封存的憑證不會包含在傳回<xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection>物件已封存屬性設定為除非`true`。</xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection> 設定或取消已封存值時，就會不發生任何實體的封存活動。"
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_26_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_26_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_26_1.cpp)]"
  syntax:
    content: public bool Archived { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果憑證是否封存， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果憑證不會封存。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "無法讀取憑證。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
  id: Extensions
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Extensions
  nameWithType: X509Certificate2.Extensions
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "取得集合的<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Extension&quot;></xref>物件。"
  remarks: "X.509 v3 憑證格式中定義的延伸可讓要包含在憑證的其他資料。 許多擴充功能會由 ISO X.509 v3 定義中以及在 RFC 3280 PKIX&quot;[憑證和憑證撤銷清單 (CRL) 設定檔](http://go.microsoft.com/fwlink/?LinkId=45286)。 」 常見的延伸模組包含金鑰使用方式的相關資訊 (<xref:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension>)，索引鍵識別項 (<xref:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension>)，憑證原則、 撤銷資訊 （CRL 發佈點延伸模組） 和其他用途。</xref:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension> </xref:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension>"
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_97_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_97_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_97_1.cpp)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509ExtensionCollection Extensions { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509ExtensionCollection
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509ExtensionCollection&quot;> </xref>物件。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "無法讀取憑證。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
  id: FriendlyName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: FriendlyName
  nameWithType: X509Certificate2.FriendlyName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "取得或設定憑證相關聯的別名。"
  remarks: "好記的名稱是您可以將 X.509 憑證存放區中的屬性。 它們可用來讓使用者別名與憑證產生關聯，這樣可以輕易地辨識它們。       如果沒有好記的名稱存在憑證，也就是空字串 (&quot;&quot;) 會傳回。"
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_16_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_16_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_16_1.vb)]"
  syntax:
    content: public string FriendlyName { get; set; }
    return:
      type: System.String
      description: "憑證的易記名稱。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "無法讀取憑證。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])
  id: GetCertContentType(System.Byte[])
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: GetCertContentType(Byte[])
  nameWithType: X509Certificate2.GetCertContentType(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "表示位元組陣列中包含的憑證類型。"
  remarks: "這個方法可讓您探索之檔案中憑證的類型。"
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/a34c0539-d23c-4bd1-9b29-_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/a34c0539-d23c-4bd1-9b29-_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/a34c0539-d23c-4bd1-9b29-_1.cpp)]"
  syntax:
    content: public static System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType (byte[] rawData);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "位元組陣列，包含來自 X.509 憑證的資料。"
    return:
      type: System.Security.Cryptography.X509Certificates.X509ContentType
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509ContentType&quot;> </xref>物件。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>rawData</code>長度為零或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)
  id: GetCertContentType(System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: GetCertContentType(String)
  nameWithType: X509Certificate2.GetCertContentType(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(String)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "表示包含在檔案中的憑證類型。"
  remarks: "這個方法可讓您探索之檔案中憑證的類型。"
  syntax:
    content: public static System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "憑證檔案的名稱。"
    return:
      type: System.Security.Cryptography.X509Certificates.X509ContentType
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509ContentType&quot;> </xref>物件。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>fileName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)
  id: GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: GetNameInfo(X509NameType,Boolean)
  nameWithType: X509Certificate2.GetNameInfo(X509NameType,Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(X509NameType,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "取得 主旨 與 簽發者名稱的憑證。"
  remarks: "這個方法應該永遠可用而非剖析憑證，因為許多名稱值可以位於多個位置。 使用此方法可確保會傳回適當的名稱。"
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/3126ffa7-3ffc-4612-bfb2-_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/3126ffa7-3ffc-4612-bfb2-_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/3126ffa7-3ffc-4612-bfb2-_1.cpp)]"
  syntax:
    content: public string GetNameInfo (System.Security.Cryptography.X509Certificates.X509NameType nameType, bool forIssuer);
    parameters:
    - id: nameType
      type: System.Security.Cryptography.X509Certificates.X509NameType
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509NameType&quot;> </xref>主體的值。"
    - id: forIssuer
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>包含簽發者名稱。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.String
      description: "憑證的名稱。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
  id: HasPrivateKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: HasPrivateKey
  nameWithType: X509Certificate2.HasPrivateKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "取得值，指出是否<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>物件包含私密金鑰。"
  syntax:
    content: public bool HasPrivateKey { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>物件包含私用金鑰; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "憑證內容無效。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[])
  id: Import(System.Byte[])
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(Byte[])
  nameWithType: X509Certificate2.Import(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "於其中填入<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>物件從位元組陣列的資料。"
  remarks: "這個方法可用來取得 X.509 憑證的未經處理位元組陣列，並填入<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>及其相關值的物件。</xref:System.Security.Cryptography.X509Certificates.X509Certificate2>       這個方法會接受位元組陣列，因為它可以只能用於不需要密碼，包括 Base64 編碼或 DER 編碼的 X.509 憑證或 PFX/PKCS12 憑證的憑證類型。 請注意/PKCS12 的 PFX 憑證可以包含多個憑證。 在此情況下，會使用私用的索引鍵相關聯的第一個憑證，或如果找到沒有私密金鑰，會使用第一個憑證。"
  syntax:
    content: public override void Import (byte[] rawData);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "位元組陣列，包含來自 X.509 憑證的資料。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String)
  id: Import(System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(String)
  nameWithType: X509Certificate2.Import(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "於其中填入<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>憑證檔案資訊的物件。"
  remarks: "這個方法會使用憑證檔案，例如檔案副檔名為.cer，代表 X.509 憑證，並於其中填入<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>檔案包含的憑證物件。</xref:System.Security.Cryptography.X509Certificates.X509Certificate2>       這個方法可以搭配數個憑證類型，包括 Base64 編碼或 DER 編碼的 X.509 憑證 PFX/PKCS12 憑證，例如 Authenticode 簽章者憑證。 請注意/PKCS12 的 PFX 憑證可以包含多個憑證。 在此情況下，會使用私用的索引鍵相關聯的第一個憑證，或如果找到沒有私密金鑰，會使用第一個憑證。"
  syntax:
    content: public override void Import (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "憑證的名稱。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(Byte[],SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(Byte[],SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[],SecureString,X509KeyStorageFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "於其中填入<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>物件使用中的位元組陣列、 密碼及金鑰儲存旗標的資料。"
  remarks: "您可以使用這個方法，例如 Base64 編碼或 DER 編碼的 X.509 憑證或 PFX/PKCS12 憑證的憑證類型。 請注意/PKCS12 的 PFX 憑證可以包含多個憑證。 在此情況下，會使用私用的索引鍵相關聯的第一個憑證，或如果找到沒有私密金鑰，會使用第一個憑證。      > [!IMPORTANT] > 永遠不會將密碼寫在原始程式碼中。  可以使用的組件擷取硬式編碼的密碼[Ildasm.exe （IL 解譯器）](~/add/includes/ajax-current-ext-md.md)，十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。"
  syntax:
    content: public override void Import (byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "位元組陣列，其中包含來自 X.509 憑證的資料。"
    - id: password
      type: System.Security.SecureString
      description: "存取 X.509 憑證資料所需的密碼。"
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "列舉的位元組合值可控制的位置和方式匯入憑證。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(Byte[],String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(Byte[],String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[],String,X509KeyStorageFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "於其中填入<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>物件使用資料的位元組陣列、 密碼和旗標來判斷如何匯入的私密金鑰。"
  remarks: "這個方法可以用來填入<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>物件使用的位元組陣列所表示的憑證的密碼。</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> <xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags>值可以用來控制何處以及如何匯入的私密金鑰。</xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags>       這個方法會接受位元組陣列，並可用於例如 Base64 編碼或 DER 編碼的 X.509 憑證或 PFX/PKCS12 憑證的憑證類型。 請注意/PKCS12 的 PFX 憑證可以包含多個憑證。 在此情況下，會使用私用的索引鍵相關聯的第一個憑證，或如果找到沒有私密金鑰，會使用第一個憑證。      > [!IMPORTANT] > 永遠不會將密碼寫在原始程式碼中。  可以使用的組件擷取硬式編碼的密碼[Ildasm.exe （IL 解譯器）](~/add/includes/ajax-current-ext-md.md)，十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。"
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/af855297-61a6-47ed-8dcb-_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/af855297-61a6-47ed-8dcb-_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/af855297-61a6-47ed-8dcb-_1.vb)]"
  syntax:
    content: public override void Import (byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "位元組陣列，包含來自 X.509 憑證的資料。"
    - id: password
      type: System.String
      description: "存取 X.509 憑證資料所需的密碼。"
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "列舉的位元組合值可控制的位置和方式匯入憑證。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(String,SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(String,SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String,SecureString,X509KeyStorageFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "於其中填入<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>物件使用的憑證檔案、 密碼及金鑰儲存旗標資訊。"
  remarks: '**安全性注意事項**永遠不會將密碼寫在原始程式碼中。  可以使用的組件擷取硬式編碼的密碼[Ildasm.exe （IL 解譯器）](~/add/includes/ajax-current-ext-md.md)，十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。'
  syntax:
    content: public override void Import (string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: fileName
      type: System.String
      description: "憑證檔案的名稱。"
    - id: password
      type: System.Security.SecureString
      description: "存取 X.509 憑證資料所需的密碼。"
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "列舉的位元組合值可控制的位置和方式匯入憑證。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(String,String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(String,String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String,String,X509KeyStorageFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "於其中填入<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>憑證檔案，密碼資訊的物件和<xref href=&quot;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags&quot;></xref>值。"
  remarks: "這個方法可以用填入<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>憑證檔案，密碼資訊的物件和<xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags>值。</xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags> </xref:System.Security.Cryptography.X509Certificates.X509Certificate2>      > [!IMPORTANT] > 永遠不會將密碼寫在原始程式碼中。  可以使用的組件擷取硬式編碼的密碼[Ildasm.exe （IL 解譯器）](~/add/includes/ajax-current-ext-md.md)，十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。"
  syntax:
    content: public override void Import (string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: fileName
      type: System.String
      description: "憑證檔案的名稱。"
    - id: password
      type: System.String
      description: "存取 X.509 憑證資料所需的密碼。"
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "列舉的位元組合值可控制的位置和方式匯入憑證。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
  id: IssuerName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: IssuerName
  nameWithType: X509Certificate2.IssuerName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "取得憑證簽發者的辨別的名稱。"
  remarks: "此屬性包含核發憑證之憑證授權單位 (CA) 的名稱。 若要取得憑證的名稱，請使用<xref:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo%2A>方法。</xref:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo%2A>       憑證的辨別的名稱是憑證主體或簽發者的文字表示。 這表示會包含名稱的屬性 (例如，&quot;CN = MyName，OU = MyOrgUnit，C = US&quot;)。"
  example:
  - "The following code example creates a command-line executable file that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_20_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_20_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_20_1.vb)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X500DistinguishedName IssuerName { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X500DistinguishedName
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X500DistinguishedName&quot;> </xref>物件，包含憑證簽發者名稱。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "憑證內容無效。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
  id: NotAfter
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: NotAfter
  nameWithType: X509Certificate2.NotAfter
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "取得以本地時間之後，憑證便不再有效的日期。"
  remarks: "這個屬性會指出憑證變成無效的到期日。"
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_116_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_116_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_116_1.vb)]"
  syntax:
    content: public DateTime NotAfter { get; }
    return:
      type: System.DateTime
      description: "A<xref:System.DateTime>物件，表示憑證的到期日。</xref:System.DateTime>"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "無法讀取憑證。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
  id: NotBefore
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: NotBefore
  nameWithType: X509Certificate2.NotBefore
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "取得憑證生效的當地時間的日期。"
  remarks: "這個屬性會指出憑證生效的日期。"
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_85_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_85_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_85_1.vb)]"
  syntax:
    content: public DateTime NotBefore { get; }
    return:
      type: System.DateTime
      description: "A<xref:System.DateTime>物件，表示憑證的有效日期。</xref:System.DateTime>"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "無法讀取憑證。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey
  id: PrivateKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: PrivateKey
  nameWithType: X509Certificate2.PrivateKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "取得或設定<xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref>物件，表示與憑證相關聯的私密金鑰。"
  remarks: "目前此屬性支援只有 RSA 或 DSA 金鑰，因此它會傳回<xref:System.Security.Cryptography.RSACryptoServiceProvider>或<xref:System.Security.Cryptography.DSACryptoServiceProvider>物件。</xref:System.Security.Cryptography.DSACryptoServiceProvider> </xref:System.Security.Cryptography.RSACryptoServiceProvider> 如果沒有私密金鑰關聯的憑證，則它會傳回`null`。      > [!WARNING] > 如果您將此屬性設定為`null`或另一個不先刪除它的金鑰，磁碟上遺留私密金鑰檔案。       若要正確地刪除此屬性相關聯的私密金鑰，請設定`PersistKeyInCsp`至`false`，然後呼叫<xref:System.Security.Cryptography.AsymmetricAlgorithm.Clear%2A>方法。</xref:System.Security.Cryptography.AsymmetricAlgorithm.Clear%2A>"
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_115_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_115_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_115_1.cpp)]"
  syntax:
    content: public System.Security.Cryptography.AsymmetricAlgorithm PrivateKey { get; set; }
    return:
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "<xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref>物件，即 RSA 或 DSA 密碼編譯服務提供者。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "索引鍵的值不是 RSA 或 DSA 金鑰，或無法讀取機碼。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "這個屬性是所設定的值<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "不支援此私用金鑰的金鑰演算法。"
  - type: System.Security.Cryptography.CryptographicUnexpectedOperationException
    commentId: T:System.Security.Cryptography.CryptographicUnexpectedOperationException
    description: "X.509 金鑰不相符。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "密碼編譯服務提供者金鑰是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
  id: PublicKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: PublicKey
  nameWithType: X509Certificate2.PublicKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "取得與憑證相關聯的 PublicKey 物件。"
  remarks: "這個屬性會傳回 PublicKey 物件，其中包含的物件識別碼 (<xref:System.Security.Cryptography.Oid>) 代表公開金鑰演算法、 ASN.1 編碼參數和 ASN.1 編碼金鑰值。</xref:System.Security.Cryptography.Oid>       您也可以取得與金鑰<xref:System.Security.Cryptography.AsymmetricAlgorithm>藉由參考 PublicKey 屬性的物件。</xref:System.Security.Cryptography.AsymmetricAlgorithm> 此屬性支援只有 RSA 或 DSA 金鑰，因此它會傳回<xref:System.Security.Cryptography.RSACryptoServiceProvider>或<xref:System.Security.Cryptography.DSACryptoServiceProvider>物件，代表的公開金鑰。</xref:System.Security.Cryptography.DSACryptoServiceProvider> </xref:System.Security.Cryptography.RSACryptoServiceProvider>"
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_120_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_120_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_120_1.cpp)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.PublicKey PublicKey { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.PublicKey
      description: "PublicKey 物件。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "索引鍵的值不是 RSA 或 DSA 金鑰，或無法讀取機碼。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
  id: RawData
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: RawData
  nameWithType: X509Certificate2.RawData
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "取得憑證的未經處理資料。"
  remarks: ''
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_59_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_59_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_59_1.cpp)]"
  syntax:
    content: public byte[] RawData { get; }
    return:
      type: System.Byte[]
      description: "做為位元組陣列憑證的未經處理資料。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset
  id: Reset
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Reset()
  nameWithType: X509Certificate2.Reset()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset()
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "重設狀態<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>物件。"
  remarks: "這個方法可以用來重設之憑證的狀態。 它也會與憑證相關聯的任何資源釋出。"
  syntax:
    content: public override void Reset ();
    parameters: []
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
  id: SerialNumber
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: SerialNumber
  nameWithType: X509Certificate2.SerialNumber
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "取得憑證的序號。"
  remarks: "憑證的序號是原始 X.509 通訊協定的一部分。 序號是由憑證簽發者，這也稱為憑證授權單位 (CA) 發行的唯一數字。"
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_114_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_114_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_114_1.vb)]"
  syntax:
    content: public string SerialNumber { get; }
    return:
      type: System.String
      description: "憑證的序號。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: X509Certificate2.SignatureAlgorithm
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "取得用來建立憑證簽章演算法。"
  remarks: "物件識別元 (<xref:System.Security.Cryptography.Oid>) 識別之憑證所使用的簽章演算法的類型。</xref:System.Security.Cryptography.Oid>"
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/6cab3ad3-94fb-4ecd-9a6c-_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/6cab3ad3-94fb-4ecd-9a6c-_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/6cab3ad3-94fb-4ecd-9a6c-_1.cpp)]"
  syntax:
    content: public System.Security.Cryptography.Oid SignatureAlgorithm { get; }
    return:
      type: System.Security.Cryptography.Oid
      description: "傳回物件識別碼 (<xref href=&quot;System.Security.Cryptography.Oid&quot;></xref>) 的簽章演算法。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "無法讀取憑證。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
  id: SubjectName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: SubjectName
  nameWithType: X509Certificate2.SubjectName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "取得憑證的主旨辨別名稱。"
  remarks: "主體辨別的名稱是使用者的憑證名稱。 主體的文字表示法或憑證簽發者憑證的辨別的名稱。 這表示會包含名稱的屬性，例如&quot;CN = MyName，OU = MyOrgUnit，C = US&quot;。"
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_80_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_80_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_80_1.vb)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X500DistinguishedName SubjectName { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X500DistinguishedName
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X500DistinguishedName&quot;> </xref>物件，表示憑證主體的名稱。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "憑證內容無效。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
  id: Thumbprint
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Thumbprint
  nameWithType: X509Certificate2.Thumbprint
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "取得憑證的指紋。"
  remarks: "指紋使用 SHA1 演算法以動態方式產生，並不是實際存在於憑證。 由於指紋是憑證的唯一值，它通常用於在憑證存放區中尋找特定的憑證。"
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_51_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_51_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_51_1.vb)]"
  syntax:
    content: public string Thumbprint { get; }
    return:
      type: System.String
      description: "憑證的指紋。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString
  id: ToString
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: ToString()
  nameWithType: X509Certificate2.ToString()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString()
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "以文字格式顯示 X.509 憑證。"
  remarks: "如同所有`ToString`方法，輸出可能不是一致版本的.NET Framework 中，因此不應針對內容剖析方法的結果。 使用屬性<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>物件取得精確的內容相關資訊，或使用<xref:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString%2A>方法，以取得憑證的相關資訊。</xref:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString%2A> </xref:System.Security.Cryptography.X509Certificates.X509Certificate2>       這個方法會以文字格式顯示的憑證。"
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/m-system.security.crypto_81_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/m-system.security.crypto_81_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/m-system.security.crypto_81_1.vb)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "憑證資訊。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)
  id: ToString(System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: ToString(Boolean)
  nameWithType: X509Certificate2.ToString(Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "以文字格式顯示 X.509 憑證。"
  remarks: "如同所有`ToString`方法，輸出可能不是一致版本的.NET Framework 中，因此不應針對內容剖析方法的結果。 使用屬性<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>物件取得精確的資訊。</xref:System.Security.Cryptography.X509Certificates.X509Certificate2>       這個方法會以文字格式顯示的憑證。 如果`verbose`參數設定為`true`，顯示的文字包含公開金鑰、 私用金鑰和擴充功能。 如果`verbose`設`false`，顯示的文字包含這些欄位可從 X.509 憑證指紋、 序號、 主旨和簽發者名稱和有效日期資訊。"
  example:
  - "The following code example creates a command line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/38d69126-bcaf-4cee-a89b-_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/38d69126-bcaf-4cee-a89b-_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/38d69126-bcaf-4cee-a89b-_1.vb)]"
  syntax:
    content: public override string ToString (bool verbose);
    parameters:
    - id: verbose
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要顯示公開金鑰、 私密金鑰、 擴充功能和其他等等。<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>顯示類似的資訊<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>類別，包括憑證指紋、 序號、 主旨和簽發者名稱等等。"
    return:
      type: System.String
      description: "憑證資訊。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify
  id: Verify
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Verify()
  nameWithType: X509Certificate2.Verify()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify()
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "執行 X.509 鏈結驗證使用基本驗證原則。"
  remarks: "此方法會建立簡單的憑證鏈結，而且基底的原則套用至該鏈結。 如果您需要有關失敗的詳細資訊，請驗證直接使用的憑證<xref:System.Security.Cryptography.X509Certificates.X509Chain>物件。</xref:System.Security.Cryptography.X509Certificates.X509Chain>       請注意，鏈結引擎的預設值會覆寫使用<xref:System.Security.Cryptography.CryptoConfig>類別。</xref:System.Security.Cryptography.CryptoConfig> Microsoft Windows Server 2003，預設的引擎是否符合規格述 RFC3280，&quot;[憑證和憑證撤銷清單 (CRL) 設定檔](http://go.microsoft.com/fwlink/?LinkId=45286)。 」"
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/m-system.security.crypto_98_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/m-system.security.crypto_98_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/m-system.security.crypto_98_1.cpp)]"
  syntax:
    content: public bool Verify ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果驗證成功。<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果驗證失敗。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "無法讀取憑證。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Version
  id: Version
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Version
  nameWithType: X509Certificate2.Version
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Version
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "取得憑證的 X.509 格式版本。"
  remarks: "有數個版本的 X.509 憑證。 這個屬性會識別哪種格式的憑證使用。 例如，&quot;3&quot;會傳回第 3 版憑證。"
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_37_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_37_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_37_1.vb)]"
  syntax:
    content: public int Version { get; }
    return:
      type: System.Int32
      description: "憑證格式。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Version*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "無法讀取憑證。"
  platform:
  - net462
references:
- uid: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: false
  name: System.Security.Cryptography.X509Certificates.X509Certificate
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.Cryptography.CryptographicUnexpectedOperationException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicUnexpectedOperationException
  nameWithType: CryptographicUnexpectedOperationException
  fullName: System.Security.Cryptography.CryptographicUnexpectedOperationException
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2()
  nameWithType: X509Certificate2.X509Certificate2()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2()
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(Byte[])
  nameWithType: X509Certificate2.X509Certificate2(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(IntPtr)
  nameWithType: X509Certificate2.X509Certificate2(IntPtr)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(X509Certificate)
  nameWithType: X509Certificate2.X509Certificate2(X509Certificate)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(X509Certificate)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(String)
  nameWithType: X509Certificate2.X509Certificate2(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(Byte[],SecureString)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],SecureString)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],SecureString)
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(Byte[],String)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],String)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(SerializationInfo,StreamingContext)
  nameWithType: X509Certificate2.X509Certificate2(SerializationInfo,StreamingContext)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(String,SecureString)
  nameWithType: X509Certificate2.X509Certificate2(String,SecureString)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,SecureString)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(String,String)
  nameWithType: X509Certificate2.X509Certificate2(String,String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,String)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509KeyStorageFlags
  nameWithType: X509KeyStorageFlags
  fullName: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(Byte[],String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],String,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(String,SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(String,SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,SecureString,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(String,String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(String,String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,String,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Archived
  nameWithType: X509Certificate2.Archived
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Extensions
  nameWithType: X509Certificate2.Extensions
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
- uid: System.Security.Cryptography.X509Certificates.X509ExtensionCollection
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509ExtensionCollection
  nameWithType: X509ExtensionCollection
  fullName: System.Security.Cryptography.X509Certificates.X509ExtensionCollection
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: FriendlyName
  nameWithType: X509Certificate2.FriendlyName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: GetCertContentType(Byte[])
  nameWithType: X509Certificate2.GetCertContentType(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(Byte[])
- uid: System.Security.Cryptography.X509Certificates.X509ContentType
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509ContentType
  nameWithType: X509ContentType
  fullName: System.Security.Cryptography.X509Certificates.X509ContentType
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: GetCertContentType(String)
  nameWithType: X509Certificate2.GetCertContentType(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(String)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: GetNameInfo(X509NameType,Boolean)
  nameWithType: X509Certificate2.GetNameInfo(X509NameType,Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(X509NameType,Boolean)
- uid: System.Security.Cryptography.X509Certificates.X509NameType
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509NameType
  nameWithType: X509NameType
  fullName: System.Security.Cryptography.X509Certificates.X509NameType
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: HasPrivateKey
  nameWithType: X509Certificate2.HasPrivateKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[])
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(Byte[])
  nameWithType: X509Certificate2.Import(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[])
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(String)
  nameWithType: X509Certificate2.Import(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(Byte[],SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(Byte[],SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[],SecureString,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(Byte[],String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(Byte[],String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[],String,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(String,SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(String,SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String,SecureString,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(String,String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(String,String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String,String,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: IssuerName
  nameWithType: X509Certificate2.IssuerName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
- uid: System.Security.Cryptography.X509Certificates.X500DistinguishedName
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X500DistinguishedName
  nameWithType: X500DistinguishedName
  fullName: System.Security.Cryptography.X509Certificates.X500DistinguishedName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: NotAfter
  nameWithType: X509Certificate2.NotAfter
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: NotBefore
  nameWithType: X509Certificate2.NotBefore
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: PrivateKey
  nameWithType: X509Certificate2.PrivateKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: PublicKey
  nameWithType: X509Certificate2.PublicKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
- uid: System.Security.Cryptography.X509Certificates.PublicKey
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: PublicKey
  nameWithType: PublicKey
  fullName: System.Security.Cryptography.X509Certificates.PublicKey
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: RawData
  nameWithType: X509Certificate2.RawData
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Reset()
  nameWithType: X509Certificate2.Reset()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset()
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SerialNumber
  nameWithType: X509Certificate2.SerialNumber
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: X509Certificate2.SignatureAlgorithm
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
- uid: System.Security.Cryptography.Oid
  parent: System.Security.Cryptography
  isExternal: false
  name: Oid
  nameWithType: Oid
  fullName: System.Security.Cryptography.Oid
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SubjectName
  nameWithType: X509Certificate2.SubjectName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Thumbprint
  nameWithType: X509Certificate2.Thumbprint
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: ToString()
  nameWithType: X509Certificate2.ToString()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString()
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: ToString(Boolean)
  nameWithType: X509Certificate2.ToString(Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(Boolean)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Verify()
  nameWithType: X509Certificate2.Verify()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify()
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Version
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Version
  nameWithType: X509Certificate2.Version
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Version
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2
  nameWithType: X509Certificate2.X509Certificate2
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Archived
  nameWithType: X509Certificate2.Archived
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Extensions
  nameWithType: X509Certificate2.Extensions
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: FriendlyName
  nameWithType: X509Certificate2.FriendlyName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: GetCertContentType
  nameWithType: X509Certificate2.GetCertContentType
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: GetNameInfo
  nameWithType: X509Certificate2.GetNameInfo
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: HasPrivateKey
  nameWithType: X509Certificate2.HasPrivateKey
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import
  nameWithType: X509Certificate2.Import
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: IssuerName
  nameWithType: X509Certificate2.IssuerName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: NotAfter
  nameWithType: X509Certificate2.NotAfter
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: NotBefore
  nameWithType: X509Certificate2.NotBefore
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: PrivateKey
  nameWithType: X509Certificate2.PrivateKey
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: PublicKey
  nameWithType: X509Certificate2.PublicKey
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: RawData
  nameWithType: X509Certificate2.RawData
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Reset
  nameWithType: X509Certificate2.Reset
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SerialNumber
  nameWithType: X509Certificate2.SerialNumber
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: X509Certificate2.SignatureAlgorithm
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SubjectName
  nameWithType: X509Certificate2.SubjectName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Thumbprint
  nameWithType: X509Certificate2.Thumbprint
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: ToString
  nameWithType: X509Certificate2.ToString
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Verify
  nameWithType: X509Certificate2.Verify
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Version*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Version
  nameWithType: X509Certificate2.Version
