### YamlMime:ManagedReference
items:
- uid: System.Runtime.Remoting.Messaging.LogicalCallContext
  id: LogicalCallContext
  children:
  - System.Runtime.Remoting.Messaging.LogicalCallContext.Clone
  - System.Runtime.Remoting.Messaging.LogicalCallContext.FreeNamedDataSlot(System.String)
  - System.Runtime.Remoting.Messaging.LogicalCallContext.GetData(System.String)
  - System.Runtime.Remoting.Messaging.LogicalCallContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Runtime.Remoting.Messaging.LogicalCallContext.HasInfo
  - System.Runtime.Remoting.Messaging.LogicalCallContext.SetData(System.String,System.Object)
  langs:
  - csharp
  name: LogicalCallContext
  nameWithType: LogicalCallContext
  fullName: System.Runtime.Remoting.Messaging.LogicalCallContext
  type: Class
  summary: "提供一組帶有遠端方法呼叫期間執行程式碼路徑的屬性。"
  remarks: "LogicalCallContext 類別是版本的<xref:System.Runtime.Remoting.Messaging.CallContext>方法期間使用的類別會呼叫遠端應用程式定義域。</xref:System.Runtime.Remoting.Messaging.CallContext> <xref:System.Runtime.Remoting.Messaging.CallContext>是特製化的集合物件類似於方法呼叫的執行緒區域儲存區，並提供對每個邏輯執行緒都是唯一的資料位置。</xref:System.Runtime.Remoting.Messaging.CallContext> 位置不會在其他邏輯執行緒上呼叫內容間共用。 可以將物件加入到<xref:System.Runtime.Remoting.Messaging.CallContext>傳輸下和向上執行的程式碼路徑，並檢驗各種物件沿著路徑。</xref:System.Runtime.Remoting.Messaging.CallContext>       當進行遠端方法呼叫，以在另一個物件<xref:System.AppDomain>、<xref:System.Runtime.Remoting.Messaging.CallContext>類別會產生 LogicalCallContext 傳輸以及遠端呼叫。</xref:System.Runtime.Remoting.Messaging.CallContext> </xref:System.AppDomain> 只有物件該公開<xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative>介面，並儲存在<xref:System.Runtime.Remoting.Messaging.CallContext>外傳播<xref:System.AppDomain>中 LogicalCallContext。</xref:System.AppDomain> </xref:System.Runtime.Remoting.Messaging.CallContext> </xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> 不支援這個介面的物件不會傳輸 LogicalCallContext 執行個體中具有遠端方法呼叫。      > [!NOTE] > 這個類別可讓連結要求。 如果立即呼叫者沒有基礎結構的權限，則會擲回安全性例外狀況。 請參閱[連結要求](~/add/includes/ajax-current-ext-md.md)如需詳細資訊。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      [System.Security.SecurityCritical]

      public sealed class LogicalCallContext : ICloneable, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.LogicalCallContext.Clone
  id: Clone
  parent: System.Runtime.Remoting.Messaging.LogicalCallContext
  langs:
  - csharp
  name: Clone()
  nameWithType: LogicalCallContext.Clone()
  fullName: System.Runtime.Remoting.Messaging.LogicalCallContext.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "建立新的物件目前的執行個體的複本。"
  remarks: "Clone 方法會產生目前<xref:System.Runtime.Remoting.Messaging.LogicalCallContext>.</xref:System.Runtime.Remoting.Messaging.LogicalCallContext>的深層複本"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "新的物件，為這個執行個體的複本。"
  overload: System.Runtime.Remoting.Messaging.LogicalCallContext.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.LogicalCallContext.FreeNamedDataSlot(System.String)
  id: FreeNamedDataSlot(System.String)
  parent: System.Runtime.Remoting.Messaging.LogicalCallContext
  langs:
  - csharp
  name: FreeNamedDataSlot(String)
  nameWithType: LogicalCallContext.FreeNamedDataSlot(String)
  fullName: System.Runtime.Remoting.Messaging.LogicalCallContext.FreeNamedDataSlot(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "清空具有指定名稱的資料位置。"
  syntax:
    content: public void FreeNamedDataSlot (string name);
    parameters:
    - id: name
      type: System.String
      description: "為 empty 之資料插槽的名稱。"
  overload: System.Runtime.Remoting.Messaging.LogicalCallContext.FreeNamedDataSlot*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.LogicalCallContext.GetData(System.String)
  id: GetData(System.String)
  parent: System.Runtime.Remoting.Messaging.LogicalCallContext
  langs:
  - csharp
  name: GetData(String)
  nameWithType: LogicalCallContext.GetData(String)
  fullName: System.Runtime.Remoting.Messaging.LogicalCallContext.GetData(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "擷取目前的執行個體的指定名稱相關聯的物件。"
  syntax:
    content: public object GetData (string name);
    parameters:
    - id: name
      type: System.String
      description: "呼叫內容中的項目名稱。"
    return:
      type: System.Object
      description: "具有指定名稱相關聯的邏輯呼叫內容中的物件。"
  overload: System.Runtime.Remoting.Messaging.LogicalCallContext.GetData*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.LogicalCallContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Remoting.Messaging.LogicalCallContext
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: LogicalCallContext.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.Remoting.Messaging.LogicalCallContext.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "填入指定<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref>序列化目前所需的資料<xref href=&quot;System.Runtime.Remoting.Messaging.LogicalCallContext&quot;> </xref>。"
  remarks: "目前的方法填滿提供<xref:System.Runtime.Serialization.SerializationInfo>重新建立<xref:System.Runtime.Remoting.Messaging.LogicalCallContext>.</xref:System.Runtime.Remoting.Messaging.LogicalCallContext>所需的所有資料</xref:System.Runtime.Serialization.SerializationInfo>       目前的方法是實作的<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>。</xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>"
  syntax:
    content: public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>来填入資料。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "關於來源或目的地的序列化內容資訊。"
  overload: System.Runtime.Remoting.Messaging.LogicalCallContext.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "直接呼叫端沒有 SerializationFormatter 權限。"
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.LogicalCallContext.HasInfo
  id: HasInfo
  parent: System.Runtime.Remoting.Messaging.LogicalCallContext
  langs:
  - csharp
  name: HasInfo
  nameWithType: LogicalCallContext.HasInfo
  fullName: System.Runtime.Remoting.Messaging.LogicalCallContext.HasInfo
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "取得值，指出是否目前<xref href=&quot;System.Runtime.Remoting.Messaging.LogicalCallContext&quot;></xref>包含的資訊。"
  syntax:
    content: public bool HasInfo { get; }
    return:
      type: System.Boolean
      description: "布林值，指出是否目前<xref href=&quot;System.Runtime.Remoting.Messaging.LogicalCallContext&quot;></xref>包含的資訊。"
  overload: System.Runtime.Remoting.Messaging.LogicalCallContext.HasInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.LogicalCallContext.SetData(System.String,System.Object)
  id: SetData(System.String,System.Object)
  parent: System.Runtime.Remoting.Messaging.LogicalCallContext
  langs:
  - csharp
  name: SetData(String,Object)
  nameWithType: LogicalCallContext.SetData(String,Object)
  fullName: System.Runtime.Remoting.Messaging.LogicalCallContext.SetData(String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "將指定的物件儲存在目前的執行個體，並將它與指定的名稱產生關聯。"
  syntax:
    content: public void SetData (string name, object data);
    parameters:
    - id: name
      type: System.String
      description: "與相關聯的呼叫內容中的新項目名稱。"
    - id: data
      type: System.Object
      description: "要儲存的呼叫內容中的物件。"
  overload: System.Runtime.Remoting.Messaging.LogicalCallContext.SetData*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Runtime.Remoting.Messaging.LogicalCallContext.Clone
  parent: System.Runtime.Remoting.Messaging.LogicalCallContext
  isExternal: false
  name: Clone()
  nameWithType: LogicalCallContext.Clone()
  fullName: System.Runtime.Remoting.Messaging.LogicalCallContext.Clone()
- uid: System.Runtime.Remoting.Messaging.LogicalCallContext.FreeNamedDataSlot(System.String)
  parent: System.Runtime.Remoting.Messaging.LogicalCallContext
  isExternal: false
  name: FreeNamedDataSlot(String)
  nameWithType: LogicalCallContext.FreeNamedDataSlot(String)
  fullName: System.Runtime.Remoting.Messaging.LogicalCallContext.FreeNamedDataSlot(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Runtime.Remoting.Messaging.LogicalCallContext.GetData(System.String)
  parent: System.Runtime.Remoting.Messaging.LogicalCallContext
  isExternal: false
  name: GetData(String)
  nameWithType: LogicalCallContext.GetData(String)
  fullName: System.Runtime.Remoting.Messaging.LogicalCallContext.GetData(String)
- uid: System.Runtime.Remoting.Messaging.LogicalCallContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Remoting.Messaging.LogicalCallContext
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: LogicalCallContext.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.Remoting.Messaging.LogicalCallContext.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Runtime.Remoting.Messaging.LogicalCallContext.HasInfo
  parent: System.Runtime.Remoting.Messaging.LogicalCallContext
  isExternal: false
  name: HasInfo
  nameWithType: LogicalCallContext.HasInfo
  fullName: System.Runtime.Remoting.Messaging.LogicalCallContext.HasInfo
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.Remoting.Messaging.LogicalCallContext.SetData(System.String,System.Object)
  parent: System.Runtime.Remoting.Messaging.LogicalCallContext
  isExternal: false
  name: SetData(String,Object)
  nameWithType: LogicalCallContext.SetData(String,Object)
  fullName: System.Runtime.Remoting.Messaging.LogicalCallContext.SetData(String,Object)
- uid: System.Runtime.Remoting.Messaging.LogicalCallContext.Clone*
  parent: System.Runtime.Remoting.Messaging.LogicalCallContext
  isExternal: false
  name: Clone
  nameWithType: LogicalCallContext.Clone
- uid: System.Runtime.Remoting.Messaging.LogicalCallContext.FreeNamedDataSlot*
  parent: System.Runtime.Remoting.Messaging.LogicalCallContext
  isExternal: false
  name: FreeNamedDataSlot
  nameWithType: LogicalCallContext.FreeNamedDataSlot
- uid: System.Runtime.Remoting.Messaging.LogicalCallContext.GetData*
  parent: System.Runtime.Remoting.Messaging.LogicalCallContext
  isExternal: false
  name: GetData
  nameWithType: LogicalCallContext.GetData
- uid: System.Runtime.Remoting.Messaging.LogicalCallContext.GetObjectData*
  parent: System.Runtime.Remoting.Messaging.LogicalCallContext
  isExternal: false
  name: GetObjectData
  nameWithType: LogicalCallContext.GetObjectData
- uid: System.Runtime.Remoting.Messaging.LogicalCallContext.HasInfo*
  parent: System.Runtime.Remoting.Messaging.LogicalCallContext
  isExternal: false
  name: HasInfo
  nameWithType: LogicalCallContext.HasInfo
- uid: System.Runtime.Remoting.Messaging.LogicalCallContext.SetData*
  parent: System.Runtime.Remoting.Messaging.LogicalCallContext
  isExternal: false
  name: SetData
  nameWithType: LogicalCallContext.SetData
