### YamlMime:ManagedReference
items:
- uid: System.Xaml.XamlReader
  id: XamlReader
  children:
  - System.Xaml.XamlReader.#ctor
  - System.Xaml.XamlReader.Close
  - System.Xaml.XamlReader.Dispose(System.Boolean)
  - System.Xaml.XamlReader.IsDisposed
  - System.Xaml.XamlReader.IsEof
  - System.Xaml.XamlReader.Member
  - System.Xaml.XamlReader.Namespace
  - System.Xaml.XamlReader.NodeType
  - System.Xaml.XamlReader.Read
  - System.Xaml.XamlReader.ReadSubtree
  - System.Xaml.XamlReader.SchemaContext
  - System.Xaml.XamlReader.Skip
  - System.Xaml.XamlReader.System#IDisposable#Dispose
  - System.Xaml.XamlReader.Type
  - System.Xaml.XamlReader.Value
  langs:
  - csharp
  name: XamlReader
  nameWithType: XamlReader
  fullName: System.Xaml.XamlReader
  type: Class
  summary: "提供基底類別，可使用 XAML 輸入及產生 XAML 節點資料流定義。"
  remarks: "XamlReader 是抽象類別，並不提供實作或工作結果的所有成員的定義。 XamlReader 中沒有實作的成員會記載該成員的 「 備註 」。 具體來說，XamlReader 有數個必須實作的抽象成員和數個虛擬成員。       虛擬成員、<xref:System.Xaml.XamlReader.ReadSubtree%2A>和<xref:System.Xaml.XamlReader.Skip%2A>每個提供適用於大部分情況下的預設實作。</xref:System.Xaml.XamlReader.Skip%2A> </xref:System.Xaml.XamlReader.ReadSubtree%2A> 不過，<xref:System.Xaml.XamlReader.ReadSubtree%2A>和<xref:System.Xaml.XamlReader.Skip%2A>預設實作會依賴其他實作的 XAML 讀取器的預期的行為，特別是，它們是依賴<xref:System.Xaml.XamlReader.Read%2A>覆寫。</xref:System.Xaml.XamlReader.Read%2A> </xref:System.Xaml.XamlReader.Skip%2A> </xref:System.Xaml.XamlReader.ReadSubtree%2A> <xref:System.Xaml.XamlReader.Dispose%2A>也是虛擬的成員具有工作的預設實作。</xref:System.Xaml.XamlReader.Dispose%2A>       下列兩個類別是非常重要，以及實際衍生類別在.NET Framework XAML 服務和 System.Xaml 組件:- <xref:System.Xaml.XamlObjectReader>，讀取物件圖形，例如在執行階段應用程式的使用中的物件圖形。</xref:System.Xaml.XamlObjectReader>      - <xref:System.Xaml.XamlXmlReader>，它會讀取使用一般<xref:System.Xml.XmlReader>的載入做為媒介的 helper 類別檔案</xref:System.Xml.XmlReader>的 XML 文字檔形式的 XAML</xref:System.Xaml.XamlXmlReader>       從其他架構的其他 XAML 讀取器包含<xref:System.Windows.Baml2006.Baml2006Reader>和<xref:System.Activities.Debugger.XamlDebuggerXmlReader>。</xref:System.Activities.Debugger.XamlDebuggerXmlReader> </xref:System.Windows.Baml2006.Baml2006Reader>       XamlReader 不同於[!INCLUDE[TLA#tla_xmldom](~/add/includes/tlasharptla-xmldom-md.md)]和<xref:System.Xml.XmlReader>設計原則，因為沒有 XamlReader`Create`傳回基礎的預設 XAML 讀取器實作的方法。</xref:System.Xml.XmlReader> 您必須改為執行個體化特定衍生的 XAML 讀取器類別，藉由呼叫其建構函式或其他類別的特定協助程式 Api。      ## 樹狀子目錄的讀取器在大部分情況，您在特定的 XAML 讀取器類別衍生自 XamlReader 的內容中呼叫 XamlReader API。 不過，在一個特定的情況下，您存取 XamlReader API 上實際的 XAML 讀取器執行個體不是公用的和未衍生自<xref:System.Xaml.XamlObjectReader>或<xref:System.Xaml.XamlXmlReader>.</xref:System.Xaml.XamlXmlReader> </xref:System.Xaml.XamlObjectReader> 這個案例是當您呼叫<xref:System.Xaml.XamlReader.ReadSubtree%2A>，它會傳回 XamlReader 執行個體。</xref:System.Xaml.XamlReader.ReadSubtree%2A> 在預設實作中，此應用程式開發介面由 XamlReader 是內部的類別。       XamlReader 取得樹狀子目錄讀取有有效的應用程式開發介面的動作例如<xref:System.Xaml.XamlReader.Read%2A>和<xref:System.Xaml.XamlReader.NodeType%2A>，而這些動作根據父讀取器類別</xref:System.Xaml.XamlReader.NodeType%2A></xref:System.Xaml.XamlReader.Read%2A> 此設計可讓內部的類別，來追蹤先前樹狀子目錄的畫面格層級。 動作的樹狀子目錄 XamlReader 可確保，如果目前的節點位置移動子樹狀結構的界限之外，特定的樹狀子目錄的讀取器會回報檔案結尾或`null`在目前的節點。       樹狀子目錄的讀取器使用方式的相關注意事項會包含某些 XamlReader 應用程式開發介面。"
  syntax:
    content: 'public abstract class XamlReader : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.#ctor
  id: '#ctor'
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: XamlReader()
  nameWithType: XamlReader.XamlReader()
  fullName: System.Xaml.XamlReader.XamlReader()
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化<xref href=&quot;System.Xaml.XamlReader&quot;></xref>類別。"
  syntax:
    content: protected XamlReader ();
    parameters: []
  overload: System.Xaml.XamlReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Close
  id: Close
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Close()
  nameWithType: XamlReader.Close()
  fullName: System.Xaml.XamlReader.Close()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "關閉 XAML 節點資料流。"
  remarks: "在基底實作中，呼叫關閉呼叫<xref:System.Xaml.XamlReader.Dispose%2A>與`isDisposing`參數做為`true`。</xref:System.Xaml.XamlReader.Dispose%2A>"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Xaml.XamlReader.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: XamlReader.Dispose(Boolean)
  fullName: System.Xaml.XamlReader.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "所使用的 unmanaged 的資源釋出<xref href=&quot;System.Xaml.XamlReader&quot;> </xref>，並選擇性地釋放 managed 的資源。"
  remarks: "您必須先呼叫基底類別取得<xref:System.Xaml.XamlReader.IsDisposed%2A>= `true`。</xref:System.Xaml.XamlReader.IsDisposed%2A>"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>表示釋放 managed 的資源，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlReader.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.IsDisposed
  id: IsDisposed
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: IsDisposed
  nameWithType: XamlReader.IsDisposed
  fullName: System.Xaml.XamlReader.IsDisposed
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得是否<xref:System.Xaml.XamlReader.Dispose*>已呼叫。</xref:System.Xaml.XamlReader.Dispose*>"
  syntax:
    content: protected bool IsDisposed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Xaml.XamlReader.Dispose*>已被呼叫，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Xaml.XamlReader.Dispose*>"
  overload: System.Xaml.XamlReader.IsDisposed*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.IsEof
  id: IsEof
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: IsEof
  nameWithType: XamlReader.IsEof
  fullName: System.Xaml.XamlReader.IsEof
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "在衍生類別中實作時，取得值，報告讀取器位置是否位於檔案結尾。"
  remarks: "樹狀子目錄的讀取器可以呼叫 IsEof，輸入子樹狀結構的範圍會正確反映的行為。 如需詳細資訊，請參閱 「 樹狀子目錄的讀取器 」 一節<xref:System.Xaml.XamlReader>，或參閱<xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract bool IsEof { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果位置在概念端的檔案的 XAML 節點資料流。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlReader.IsEof*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Member
  id: Member
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Member
  nameWithType: XamlReader.Member
  fullName: System.Xaml.XamlReader.Member
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "在衍生類別中實作時，取得目前的成員位置讀取器，如果讀取器位置位於<xref href=&quot;System.Xaml.XamlNodeType&quot;> </xref>。"
  remarks: "樹狀子目錄的讀取器可以呼叫成員行為的限制。 如需詳細資訊，請參閱 「 樹狀子目錄的讀取器 」 一節<xref:System.Xaml.XamlReader>，或參閱<xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract System.Xaml.XamlMember Member { get; }
    return:
      type: System.Xaml.XamlMember
      description: "目前的成員;或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，如果讀取器位置不在成員上。"
  overload: System.Xaml.XamlReader.Member*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Namespace
  id: Namespace
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Namespace
  nameWithType: XamlReader.Namespace
  fullName: System.Xaml.XamlReader.Namespace
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "在衍生類別中實作時，取得 XAML 命名空間資訊從目前的節點。"
  remarks: "此 API 的預定的設計是要傳回非 null 的結果才<xref:System.Xaml.XamlReader.NodeType%2A>目前節點為<xref:System.Xaml.XamlNodeType>。</xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlReader.NodeType%2A> 屬性不會報告 XAML 命名空間的物件或成員的一般範圍意義上，適用於 XAML 結構描述內容下的解譯。 您的應用程式必須提供方法來快取資訊的作用的 XAML 命名空間，因為它會周遊 XAML 節點，如果您需要該如何 XAML 結構描述內容至寫入器報告它以外的方式的資訊。 請參閱<xref:System.Xaml.XamlXmlReader.Namespace%2A>的附註的參考實作。</xref:System.Xaml.XamlXmlReader.Namespace%2A>"
  syntax:
    content: public abstract System.Xaml.NamespaceDeclaration Namespace { get; }
    return:
      type: System.Xaml.NamespaceDeclaration
      description: "XAML 命名空間資訊，如果有的話。否則， <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlReader.Namespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.NodeType
  id: NodeType
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: NodeType
  nameWithType: XamlReader.NodeType
  fullName: System.Xaml.XamlReader.NodeType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "在衍生類別中實作時，取得目前節點的類型。"
  remarks: "樹狀子目錄的讀取器可以呼叫 NodeType，行為限制。 如需詳細資訊，請參閱 「 樹狀子目錄的讀取器 」 一節<xref:System.Xaml.XamlReader>，或參閱<xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract System.Xaml.XamlNodeType NodeType { get; }
    return:
      type: System.Xaml.XamlNodeType
      description: "值為<xref href=&quot;System.Xaml.XamlNodeType&quot;></xref>列舉型別。"
  overload: System.Xaml.XamlReader.NodeType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Read
  id: Read
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Read()
  nameWithType: XamlReader.Read()
  fullName: System.Xaml.XamlReader.Read()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "在衍生類別中實作時，提供下一個 XAML 節點從來源節點是否可用。"
  remarks: "樹狀子目錄的讀取器可以呼叫讀取、 行為限制。 如需詳細資訊，請參閱 「 樹狀子目錄的讀取器 」 一節<xref:System.Xaml.XamlReader>，或參閱<xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract bool Read ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果節點使用。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlReader.Read*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.ReadSubtree
  id: ReadSubtree
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: ReadSubtree()
  nameWithType: XamlReader.ReadSubtree()
  fullName: System.Xaml.XamlReader.ReadSubtree()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "傳回<xref href=&quot;System.Xaml.XamlReader&quot;></xref>根據目前<xref href=&quot;System.Xaml.XamlReader&quot;> </xref>，其中傳回<xref href=&quot;System.Xaml.XamlReader&quot;></xref>用來逐一查看子樹狀結構的 XAML 節點結構。"
  remarks: "此方法的預設實作，並且會傳回有效的<xref:System.Xaml.XamlReader>.</xref:System.Xaml.XamlReader> 傳回<xref:System.Xaml.XamlReader>是內部的類別，以限制特定<xref:System.Xaml.XamlReader>動作。</xref:System.Xaml.XamlReader> </xref:System.Xaml.XamlReader> 限制將乃讀取只維度的子樹狀結構的 XAML 節點集，較大的來源，並傳回檔案結尾的一致或`null`目前節點子樹狀結構結束時。       一般而言，您應該檢查目前節點的初始<xref:System.Xaml.XamlReader.Read%2A>來判斷是否需要樹狀子目錄的讀取器。</xref:System.Xaml.XamlReader.Read%2A> 如何檢查這可能是實作而定;不過，避免建立多個樹狀子目錄讀取器的每個樹狀子目錄。 此外，避免叫用特定節點的情況下的樹狀子目錄讀取器 (例如，對於<xref:System.Xaml.XamlNodeType>)，不能包含子樹狀結構的節點。</xref:System.Xaml.XamlNodeType>       取得樹狀子目錄的讀取器之後，您必須呼叫<xref:System.Xaml.XamlReader.Read%2A>上，以取得目前節點 (或呼叫<xref:System.Xaml.XamlReader.Skip%2A>取得下一個節點)。</xref:System.Xaml.XamlReader.Skip%2A> </xref:System.Xaml.XamlReader.Read%2A> 您自動取得初始節點位置的樹狀子目錄的讀取器從您在建立時。       您藉由從這個預設實作中呼叫 ReadSubtree 取得讀取器的內部類別。 內部類別，根據其行為<xref:System.Xaml.XamlReader>呼叫 ReadSubtree 時所使用的實作。</xref:System.Xaml.XamlReader> 內部類別的目的是要包裝<xref:System.Xaml.XamlReader.Read%2A>和一般周遊行為。</xref:System.Xaml.XamlReader.Read%2A> 周遊保持在預期的樹狀子目錄內追蹤<xref:System.Xaml.XamlNodeType>/<xref:System.Xaml.XamlNodeType>組或<xref:System.Xaml.XamlNodeType>/<xref:System.Xaml.XamlNodeType>組。</xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlNodeType> 它也會正確傳回`false`如<xref:System.Xaml.XamlReader.Read%2A>和`true`如<xref:System.Xaml.XamlReader.IsEof%2A>當讀取器結尾的樹狀子目錄、 其進入點所定義。</xref:System.Xaml.XamlReader.IsEof%2A> </xref:System.Xaml.XamlReader.Read%2A> 一般情況下，您會假設任何<xref:System.Xaml.XamlReader>您樹狀子目錄的讀取器從呼叫的應用程式開發介面有相同的實作，以了解整體<xref:System.Xaml.XamlReader>週框行為周遊除外。</xref:System.Xaml.XamlReader> </xref:System.Xaml.XamlReader>       不過，ReadSubtree 是虛擬的。 因此，特定<xref:System.Xaml.XamlReader>實作可提供不同的行為<xref:System.Xaml.XamlReader>內部包裝函式的行為; 和<xref:System.Xaml.XamlReader>實作可以即使停用子樹狀目錄讀取器功能藉由傳回<xref:System.NotImplementedException>或其他例外狀況。</xref:System.NotImplementedException> </xref:System.Xaml.XamlReader> </xref:System.Xaml.XamlReader> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public virtual System.Xaml.XamlReader ReadSubtree ();
    parameters: []
    return:
      type: System.Xaml.XamlReader
      description: "新 XAML 讀取器執行個體的樹狀子目錄。"
  overload: System.Xaml.XamlReader.ReadSubtree*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.SchemaContext
  id: SchemaContext
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: SchemaContext
  nameWithType: XamlReader.SchemaContext
  fullName: System.Xaml.XamlReader.SchemaContext
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "在衍生類別中實作時，取得提供 XAML 結構描述內容資訊的資訊集的物件。"
  syntax:
    content: public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }
    return:
      type: System.Xaml.XamlSchemaContext
      description: "物件，提供資訊的 XAML 結構描述內容資訊設定。"
  overload: System.Xaml.XamlReader.SchemaContext*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Skip
  id: Skip
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Skip()
  nameWithType: XamlReader.Skip()
  fullName: System.Xaml.XamlReader.Skip()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "略過目前的節點，並讀取器的位置往前移至下一個節點。"
  remarks: "一次略過<xref:System.Xaml.XamlReader.Read%2A>預設呼叫略過實作。</xref:System.Xaml.XamlReader.Read%2A> 您通常不會呼叫 Skip 和<xref:System.Xaml.XamlReader.Read%2A>順序。</xref:System.Xaml.XamlReader.Read%2A>       在預設的略過實作中，依據採取不同的動作<xref:System.Xaml.XamlReader.NodeType%2A>讀取器位置是目前。</xref:System.Xaml.XamlReader.NodeType%2A> 如果讀取器位置是目前<xref:System.Xaml.XamlNodeType>或<xref:System.Xaml.XamlNodeType>，成員或物件已略過。</xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlNodeType> 適用於其他<xref:System.Xaml.XamlReader.NodeType%2A>值、 呼叫以外，沒有採取任何動作<xref:System.Xaml.XamlReader.Read%2A>從目前的位置。</xref:System.Xaml.XamlReader.Read%2A> </xref:System.Xaml.XamlReader.NodeType%2A>       樹狀子目錄的讀取器可以具有行為限制呼叫跳過。 如需詳細資訊，請參閱 「 樹狀子目錄的讀取器 」 一節<xref:System.Xaml.XamlReader>，或參閱<xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>       略過的節點樹狀目錄行為根據對等 XML <xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>.</xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName> 根據<xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>節點和它的子樹狀目錄中，而不只是單一項目節點，會略過行為等價，略過。</xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>"
  syntax:
    content: public virtual void Skip ();
    parameters: []
  overload: System.Xaml.XamlReader.Skip*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: System.IDisposable.Dispose()
  nameWithType: XamlReader.System.IDisposable.Dispose()
  fullName: System.Xaml.XamlReader.System.IDisposable.Dispose()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "目前的執行個體所使用的資源全部釋出<xref href=&quot;System.Xaml.XamlReader&quot;></xref>類別。"
  syntax:
    content: void IDisposable.Dispose ();
    parameters: []
  overload: System.Xaml.XamlReader.System#IDisposable#Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Type
  id: Type
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Type
  nameWithType: XamlReader.Type
  fullName: System.Xaml.XamlReader.Type
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "在衍生類別中實作時，取得<xref href=&quot;System.Xaml.XamlType&quot;></xref>目前節點。"
  remarks: "樹狀子目錄的讀取器可以呼叫型別，與行為的限制。 如需詳細資訊，請參閱 「 樹狀子目錄的讀取器 」 一節<xref:System.Xaml.XamlReader>，或參閱<xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract System.Xaml.XamlType Type { get; }
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref>目前的節點; 或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，如果目前的讀取器位置不在物件上。"
  overload: System.Xaml.XamlReader.Type*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Value
  id: Value
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Value
  nameWithType: XamlReader.Value
  fullName: System.Xaml.XamlReader.Value
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "在衍生類別中實作時，取得目前節點的值。"
  syntax:
    content: public abstract object Value { get; }
    return:
      type: System.Object
      description: "目前的節點; 的值或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，如果目前的讀取器位置不在<xref href=&quot;System.Xaml.XamlNodeType&quot;></xref>節點型別。"
  overload: System.Xaml.XamlReader.Value*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Xaml.XamlReader.#ctor
  parent: System.Xaml.XamlReader
  isExternal: false
  name: XamlReader()
  nameWithType: XamlReader.XamlReader()
  fullName: System.Xaml.XamlReader.XamlReader()
- uid: System.Xaml.XamlReader.Close
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Close()
  nameWithType: XamlReader.Close()
  fullName: System.Xaml.XamlReader.Close()
- uid: System.Xaml.XamlReader.Dispose(System.Boolean)
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: XamlReader.Dispose(Boolean)
  fullName: System.Xaml.XamlReader.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xaml.XamlReader.IsDisposed
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsDisposed
  nameWithType: XamlReader.IsDisposed
  fullName: System.Xaml.XamlReader.IsDisposed
- uid: System.Xaml.XamlReader.IsEof
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsEof
  nameWithType: XamlReader.IsEof
  fullName: System.Xaml.XamlReader.IsEof
- uid: System.Xaml.XamlReader.Member
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Member
  nameWithType: XamlReader.Member
  fullName: System.Xaml.XamlReader.Member
- uid: System.Xaml.XamlMember
  parent: System.Xaml
  isExternal: false
  name: XamlMember
  nameWithType: XamlMember
  fullName: System.Xaml.XamlMember
- uid: System.Xaml.XamlReader.Namespace
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Namespace
  nameWithType: XamlReader.Namespace
  fullName: System.Xaml.XamlReader.Namespace
- uid: System.Xaml.NamespaceDeclaration
  parent: System.Xaml
  isExternal: false
  name: NamespaceDeclaration
  nameWithType: NamespaceDeclaration
  fullName: System.Xaml.NamespaceDeclaration
- uid: System.Xaml.XamlReader.NodeType
  parent: System.Xaml.XamlReader
  isExternal: false
  name: NodeType
  nameWithType: XamlReader.NodeType
  fullName: System.Xaml.XamlReader.NodeType
- uid: System.Xaml.XamlNodeType
  parent: System.Xaml
  isExternal: false
  name: XamlNodeType
  nameWithType: XamlNodeType
  fullName: System.Xaml.XamlNodeType
- uid: System.Xaml.XamlReader.Read
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Read()
  nameWithType: XamlReader.Read()
  fullName: System.Xaml.XamlReader.Read()
- uid: System.Xaml.XamlReader.ReadSubtree
  parent: System.Xaml.XamlReader
  isExternal: false
  name: ReadSubtree()
  nameWithType: XamlReader.ReadSubtree()
  fullName: System.Xaml.XamlReader.ReadSubtree()
- uid: System.Xaml.XamlReader
  parent: System.Xaml
  isExternal: false
  name: XamlReader
  nameWithType: XamlReader
  fullName: System.Xaml.XamlReader
- uid: System.Xaml.XamlReader.SchemaContext
  parent: System.Xaml.XamlReader
  isExternal: false
  name: SchemaContext
  nameWithType: XamlReader.SchemaContext
  fullName: System.Xaml.XamlReader.SchemaContext
- uid: System.Xaml.XamlSchemaContext
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
- uid: System.Xaml.XamlReader.Skip
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Skip()
  nameWithType: XamlReader.Skip()
  fullName: System.Xaml.XamlReader.Skip()
- uid: System.Xaml.XamlReader.System#IDisposable#Dispose
  parent: System.Xaml.XamlReader
  isExternal: false
  name: System.IDisposable.Dispose()
  nameWithType: XamlReader.System.IDisposable.Dispose()
  fullName: System.Xaml.XamlReader.System.IDisposable.Dispose()
- uid: System.Xaml.XamlReader.Type
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Type
  nameWithType: XamlReader.Type
  fullName: System.Xaml.XamlReader.Type
- uid: System.Xaml.XamlType
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
- uid: System.Xaml.XamlReader.Value
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Value
  nameWithType: XamlReader.Value
  fullName: System.Xaml.XamlReader.Value
- uid: System.Xaml.XamlReader.#ctor*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: XamlReader
  nameWithType: XamlReader.XamlReader
- uid: System.Xaml.XamlReader.Close*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Close
  nameWithType: XamlReader.Close
- uid: System.Xaml.XamlReader.Dispose*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Dispose
  nameWithType: XamlReader.Dispose
- uid: System.Xaml.XamlReader.IsDisposed*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsDisposed
  nameWithType: XamlReader.IsDisposed
- uid: System.Xaml.XamlReader.IsEof*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsEof
  nameWithType: XamlReader.IsEof
- uid: System.Xaml.XamlReader.Member*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Member
  nameWithType: XamlReader.Member
- uid: System.Xaml.XamlReader.Namespace*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Namespace
  nameWithType: XamlReader.Namespace
- uid: System.Xaml.XamlReader.NodeType*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: NodeType
  nameWithType: XamlReader.NodeType
- uid: System.Xaml.XamlReader.Read*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Read
  nameWithType: XamlReader.Read
- uid: System.Xaml.XamlReader.ReadSubtree*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: ReadSubtree
  nameWithType: XamlReader.ReadSubtree
- uid: System.Xaml.XamlReader.SchemaContext*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: SchemaContext
  nameWithType: XamlReader.SchemaContext
- uid: System.Xaml.XamlReader.Skip*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Skip
  nameWithType: XamlReader.Skip
- uid: System.Xaml.XamlReader.System#IDisposable#Dispose*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: System.IDisposable.Dispose
  nameWithType: XamlReader.System.IDisposable.Dispose
- uid: System.Xaml.XamlReader.Type*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Type
  nameWithType: XamlReader.Type
- uid: System.Xaml.XamlReader.Value*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Value
  nameWithType: XamlReader.Value
