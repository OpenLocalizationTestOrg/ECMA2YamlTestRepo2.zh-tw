### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.MessageHeaderAttribute
  id: MessageHeaderAttribute
  children:
  - System.ServiceModel.MessageHeaderAttribute.#ctor
  - System.ServiceModel.MessageHeaderAttribute.Actor
  - System.ServiceModel.MessageHeaderAttribute.MustUnderstand
  - System.ServiceModel.MessageHeaderAttribute.Relay
  langs:
  - csharp
  name: MessageHeaderAttribute
  nameWithType: MessageHeaderAttribute
  fullName: System.ServiceModel.MessageHeaderAttribute
  type: Class
  summary: "指定資料成員是 SOAP 訊息標頭。"
  remarks: "MessageHeaderAttribute 屬性可讓您將對應的類型，以標示欄位和屬性<xref:System.ServiceModel.MessageContractAttribute>屬性設定為 SOAP 訊息標頭。</xref:System.ServiceModel.MessageContractAttribute> 簡單型別或可序列化的複合型別可以是欄位或屬性。       如需如何控制 SOAP 本文內容的序列化，而不需修改預設 SOAP 封套本身的資訊，請參閱<xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=fullName>，[在服務合約中指定資料傳輸](~/add/includes/ajax-current-ext-md.md)，和[使用資料合約](~/add/includes/ajax-current-ext-md.md)。</xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=fullName>       如需有關如何建立訊息合約的詳細資訊，請參閱[使用訊息合約](~/add/includes/ajax-current-ext-md.md)。       SOAP 標準會定義下列屬性，可以存在於標頭上:-`Actor`或`Role`(`Actor` SOAP 1.1`Role`在 SOAP 1.2)- `MustUnderstand`       -    `Relay` `Actor`或`Role`屬性指定的 URI 指定的標頭適用的節點。 `MustUnderstand`屬性會指定標頭是否了解節點處理。 `Relay`屬性會指定標頭是否要轉送至下游節點。 [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]不會執行任何處理內送訊息，這些屬性的除了`MustUnderstand`屬性。       不過，您可以讀取和寫入這些屬性，即使它們不會傳送預設值。 您可以在兩種方式設定屬性值。 首先，您可以變更<xref:System.ServiceModel.MessageHeaderAttribute.Actor%2A>，<xref:System.ServiceModel.MessageHeaderAttribute.MustUnderstand%2A>和<xref:System.ServiceModel.MessageHeaderAttribute.Relay%2A>MessageHeaderAttribute 上的屬性。</xref:System.ServiceModel.MessageHeaderAttribute.Relay%2A> </xref:System.ServiceModel.MessageHeaderAttribute.MustUnderstand%2A> </xref:System.ServiceModel.MessageHeaderAttribute.Actor%2A> (沒有任何`Role`屬性 – 設定<xref:System.ServiceModel.MessageHeaderAttribute.Actor%2A>屬性和`Role`如果使用 SOAP 1.2 傳遞)。</xref:System.ServiceModel.MessageHeaderAttribute.Actor%2A> 例如︰ [!code-cs [XpsCreate #XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent) ]控制這些屬性的第二個方式是藉由輸入的型別參數所需的標頭<xref:System.ServiceModel.MessageHeader%601>類別，並使用產生的型別，以及 MessageHeaderAttribute。</xref:System.ServiceModel.MessageHeader%601> 然後使用<xref:System.ServiceModel.MessageHeader%601>以程式設計方式設定 SOAP 屬性的屬性。</xref:System.ServiceModel.MessageHeader%601> 例如︰ [!code-cs [XpsCreate #XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)][!code-cs[XpsCreate #XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent) ]如果使用動態與靜態控制機制，則靜態設定都是預設值，但可以使用動態機制來覆寫。        例如︰ [!code-cs [XpsCreate #XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)][!code-cs[XpsCreate #XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent) ] ，則允許使用動態屬性控制建立重複的標頭。        例如︰```   [MessageHeaderArray] public MessageHeader<Person> documentApprovers[];   ```在接收端，讀取這些 SOAP 屬性只能進行如果泛型<xref:System.ServiceModel.MessageHeader%601>類別使用。</xref:System.ServiceModel.MessageHeader%601> 檢查<xref:System.ServiceModel.MessageHeader%601.Actor%2A>，<xref:System.ServiceModel.MessageHeader%601.Relay%2A>或<xref:System.ServiceModel.MessageHeader%601.MustUnderstand%2A>屬性標頭的<xref:System.ServiceModel.MessageHeader%601>探索所接收訊息的屬性設定的類型。</xref:System.ServiceModel.MessageHeader%601> </xref:System.ServiceModel.MessageHeader%601.MustUnderstand%2A> </xref:System.ServiceModel.MessageHeader%601.Relay%2A> </xref:System.ServiceModel.MessageHeader%601.Actor%2A>       當已接收訊息，並再傳送回，標頭的 SOAP 屬性設定唯一往返<xref:System.ServiceModel.MessageHeader%601>型別。</xref:System.ServiceModel.MessageHeader%601>"
  example:
  - "The following code example shows the use of the MessageHeaderAttribute to create a SOAP header for the response message with the <xref:System.ServiceModel.MessageContractMemberAttribute.Name%2A>, <xref:System.ServiceModel.MessageContractMemberAttribute.Namespace%2A> and <xref:System.ServiceModel.MessageHeaderAttribute.MustUnderstand%2A> properties set to values appropriate for this header. The code example is followed by an example of the message when sent.  \n  \n [!code-vb[MessageHeaderAttribute#4](~/add/codesnippet/visualbasic/messageheaderattribute.client/services.vb#4)]\n [!code-cs[MessageHeaderAttribute#4](~/add/codesnippet/csharp/messageheaderattribute.client/services.cs#4)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field, AllowMultiple=false, Inherited=false)]

      public class MessageHeaderAttribute : System.ServiceModel.MessageContractMemberAttribute
  inheritance:
  - System.ServiceModel.MessageContractMemberAttribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.MessageHeaderAttribute.#ctor
  id: '#ctor'
  parent: System.ServiceModel.MessageHeaderAttribute
  langs:
  - csharp
  name: MessageHeaderAttribute()
  nameWithType: MessageHeaderAttribute.MessageHeaderAttribute()
  fullName: System.ServiceModel.MessageHeaderAttribute.MessageHeaderAttribute()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "初始化的新執行個體<xref href=&quot;System.ServiceModel.MessageHeaderAttribute&quot;></xref>類別。"
  syntax:
    content: public MessageHeaderAttribute ();
    parameters: []
  overload: System.ServiceModel.MessageHeaderAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.MessageHeaderAttribute.Actor
  id: Actor
  parent: System.ServiceModel.MessageHeaderAttribute
  langs:
  - csharp
  name: Actor
  nameWithType: MessageHeaderAttribute.Actor
  fullName: System.ServiceModel.MessageHeaderAttribute.Actor
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "取得或設定 URI，表示此標頭目標節點。 對應到 role 標頭屬性，當使用 SOAP 1.2 和 SOAP 1.1 用 actor 標頭屬性。"
  remarks: "如需詳細資訊，請參閱 < 備註 > 一節<xref:System.ServiceModel.MessageHeaderAttribute>如需詳細資訊。</xref:System.ServiceModel.MessageHeaderAttribute>"
  syntax:
    content: public string Actor { get; set; }
    return:
      type: System.String
      description: "指出此標頭目標節點的 URI。 使用 SOAP 1.1 時，這個 URI 會對應到 role 標頭屬性，當使用 SOAP 1.2 和 actor 標頭屬性。"
  overload: System.ServiceModel.MessageHeaderAttribute.Actor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.MessageHeaderAttribute.MustUnderstand
  id: MustUnderstand
  parent: System.ServiceModel.MessageHeaderAttribute
  langs:
  - csharp
  name: MustUnderstand
  nameWithType: MessageHeaderAttribute.MustUnderstand
  fullName: System.ServiceModel.MessageHeaderAttribute.MustUnderstand
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "指定是否作用中節點<xref:System.ServiceModel.MessageHeaderAttribute.Actor*>角色必須解讀這個標頭。</xref:System.ServiceModel.MessageHeaderAttribute.Actor*> 這會對應到<xref uid=&quot;langword_csharp_mustUnderstand&quot; name=&quot;mustUnderstand&quot; href=&quot;&quot;> </xref> SOAP 標頭屬性。"
  remarks: "如需詳細資訊，請參閱 < 備註 > 一節<xref:System.ServiceModel.MessageHeaderAttribute>如需詳細資訊。</xref:System.ServiceModel.MessageHeaderAttribute>      > [!IMPORTANT] > 務必請記住，如果 MustUnderstand 屬性是`true`正在傳送及接收端上的應用程式不了解就會產生錯誤的標頭訊息中。 相反地，如果具有標頭`mustUnderstand`SOAP 標頭屬性設定為`true`收到[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]，它必須是訊息合約的一部分 (或必須由其中一個處理[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]通道); 否則它會假設無法解讀標頭，並擲回例外狀況。"
  example:
  - "The following code example shows the use of the <xref:System.ServiceModel.MessageHeaderAttribute> to create a SOAP header for the response message with the <xref:System.ServiceModel.MessageContractMemberAttribute.Name%2A>, <xref:System.ServiceModel.MessageContractMemberAttribute.Namespace%2A> and MustUnderstand properties set to values appropriate for this header. The code example is followed by an example of the message when sent.  \n  \n [!code-vb[MessageHeaderAttribute#4](~/add/codesnippet/visualbasic/messageheaderattribute.client/services.vb#4)]\n [!code-cs[MessageHeaderAttribute#4](~/add/codesnippet/csharp/messageheaderattribute.client/services.cs#4)]"
  syntax:
    content: public bool MustUnderstand { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果扮演節點<xref:System.ServiceModel.MessageHeaderAttribute.Actor*>角色必須解讀這個標頭，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.ServiceModel.MessageHeaderAttribute.Actor*>"
  overload: System.ServiceModel.MessageHeaderAttribute.MustUnderstand*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.MessageHeaderAttribute.Relay
  id: Relay
  parent: System.ServiceModel.MessageHeaderAttribute
  langs:
  - csharp
  name: Relay
  nameWithType: MessageHeaderAttribute.Relay
  fullName: System.ServiceModel.MessageHeaderAttribute.Relay
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "指定此標頭是否要轉送至下游節點。 這會對應到<xref uid=&quot;langword_csharp_relay&quot; name=&quot;relay&quot; href=&quot;&quot;> </xref> SOAP 標頭屬性。"
  remarks: "當使用 SOAP 1.1 則會忽略這個屬性。 如需詳細資訊，請參閱 < 備註 > 一節<xref:System.ServiceModel.MessageHeaderAttribute>如需詳細資訊。</xref:System.ServiceModel.MessageHeaderAttribute>"
  syntax:
    content: public bool Relay { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此標頭来轉送至下游節點。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceModel.MessageHeaderAttribute.Relay*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.MessageContractMemberAttribute
  isExternal: false
  name: System.ServiceModel.MessageContractMemberAttribute
- uid: System.ServiceModel.MessageHeaderAttribute.#ctor
  parent: System.ServiceModel.MessageHeaderAttribute
  isExternal: false
  name: MessageHeaderAttribute()
  nameWithType: MessageHeaderAttribute.MessageHeaderAttribute()
  fullName: System.ServiceModel.MessageHeaderAttribute.MessageHeaderAttribute()
- uid: System.ServiceModel.MessageHeaderAttribute.Actor
  parent: System.ServiceModel.MessageHeaderAttribute
  isExternal: false
  name: Actor
  nameWithType: MessageHeaderAttribute.Actor
  fullName: System.ServiceModel.MessageHeaderAttribute.Actor
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceModel.MessageHeaderAttribute.MustUnderstand
  parent: System.ServiceModel.MessageHeaderAttribute
  isExternal: false
  name: MustUnderstand
  nameWithType: MessageHeaderAttribute.MustUnderstand
  fullName: System.ServiceModel.MessageHeaderAttribute.MustUnderstand
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.MessageHeaderAttribute.Relay
  parent: System.ServiceModel.MessageHeaderAttribute
  isExternal: false
  name: Relay
  nameWithType: MessageHeaderAttribute.Relay
  fullName: System.ServiceModel.MessageHeaderAttribute.Relay
- uid: System.ServiceModel.MessageHeaderAttribute.#ctor*
  parent: System.ServiceModel.MessageHeaderAttribute
  isExternal: false
  name: MessageHeaderAttribute
  nameWithType: MessageHeaderAttribute.MessageHeaderAttribute
- uid: System.ServiceModel.MessageHeaderAttribute.Actor*
  parent: System.ServiceModel.MessageHeaderAttribute
  isExternal: false
  name: Actor
  nameWithType: MessageHeaderAttribute.Actor
- uid: System.ServiceModel.MessageHeaderAttribute.MustUnderstand*
  parent: System.ServiceModel.MessageHeaderAttribute
  isExternal: false
  name: MustUnderstand
  nameWithType: MessageHeaderAttribute.MustUnderstand
- uid: System.ServiceModel.MessageHeaderAttribute.Relay*
  parent: System.ServiceModel.MessageHeaderAttribute
  isExternal: false
  name: Relay
  nameWithType: MessageHeaderAttribute.Relay
