### YamlMime:ManagedReference
items:
- uid: System.Security.Principal.WindowsImpersonationContext
  id: WindowsImpersonationContext
  children:
  - System.Security.Principal.WindowsImpersonationContext.Dispose
  - System.Security.Principal.WindowsImpersonationContext.Dispose(System.Boolean)
  - System.Security.Principal.WindowsImpersonationContext.Undo
  langs:
  - csharp
  name: WindowsImpersonationContext
  nameWithType: WindowsImpersonationContext
  fullName: System.Security.Principal.WindowsImpersonationContext
  type: Class
  summary: "表示模擬作業前的 Windows 使用者。"
  remarks: "使用者模擬另一位使用者之後，這個類別就會還原使用者的身分識別。      > [!IMPORTANT] > 這個型別實作<xref:System.IDisposable>介面。</xref:System.IDisposable> 當您完成使用類型時，您應該會處置它直接或間接。 若要直接處置的類型，呼叫其<xref:System.IDisposable.Dispose%2A>方法中的`try` / `catch`區塊。</xref:System.IDisposable.Dispose%2A> 若要為其配置間接，使用語言建構例如`using`（C# 中） 或`Using`（在 Visual Basic)。 如需詳細資訊，請參閱中的 「 使用物件的實作 IDisposable 」 一節<xref:System.IDisposable>介面 > 主題。</xref:System.IDisposable>"
  example:
  - "The following example demonstrates how to impersonate a user and then revert to the original identity.  \n  \n [!code-cpp[WindowsIdentity Impersonation#1](~/add/codesnippet/cpp/t-system.security.princi_4_1.cpp)]\n [!code-cs[WindowsIdentity Impersonation#1](~/add/codesnippet/csharp/t-system.security.princi_4_1.cs)]\n [!code-vb[WindowsIdentity Impersonation#1](~/add/codesnippet/visualbasic/t-system.security.princi_4_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class WindowsImpersonationContext : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsImpersonationContext.Dispose
  id: Dispose
  parent: System.Security.Principal.WindowsImpersonationContext
  langs:
  - csharp
  name: Dispose()
  nameWithType: WindowsImpersonationContext.Dispose()
  fullName: System.Security.Principal.WindowsImpersonationContext.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "所使用的資源全部釋出<xref href=&quot;System.Security.Principal.WindowsImpersonationContext&quot;> </xref>。"
  remarks: "當您完成使用<xref:System.Security.Principal.WindowsImpersonationContext>.</xref:System.Security.Principal.WindowsImpersonationContext>呼叫 Dispose Dispose 方法會使<xref:System.Security.Principal.WindowsImpersonationContext>中無法使用的狀態。</xref:System.Security.Principal.WindowsImpersonationContext> 在呼叫 Dispose 之後，您必須釋放所有參考<xref:System.Security.Principal.WindowsImpersonationContext>讓記憶體回收行程可以回收記憶體的<xref:System.Security.Principal.WindowsImpersonationContext>所佔用。</xref:System.Security.Principal.WindowsImpersonationContext> </xref:System.Security.Principal.WindowsImpersonationContext> 如需詳細資訊，請參閱[清除 Unmanaged 資源上](~/add/includes/ajax-current-ext-md.md)和[實作 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。       **注意︰**永遠呼叫 Dispose 之後，再放開您的最後一個參考至<xref:System.Security.Principal.WindowsImpersonationContext>。</xref:System.Security.Principal.WindowsImpersonationContext> 否則，它所使用的資源將不會釋放直到記憶體回收行程呼叫<xref:System.Security.Principal.WindowsImpersonationContext>物件的**Finalize**方法。</xref:System.Security.Principal.WindowsImpersonationContext>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Principal.WindowsImpersonationContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsImpersonationContext.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Principal.WindowsImpersonationContext
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: WindowsImpersonationContext.Dispose(Boolean)
  fullName: System.Security.Principal.WindowsImpersonationContext.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "所使用的 unmanaged 的資源釋出<xref href=&quot;System.Security.Principal.WindowsImpersonationContext&quot;></xref>並選擇性釋放 managed 的資源。"
  remarks: "這個方法會呼叫公用`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> `Dispose()`叫用受保護`Dispose(Boolean)`方法`disposing`參數設定為`true`。 <xref:System.Object.Finalize%2A>叫用`Dispose`與`disposing`設`false`。</xref:System.Object.Finalize%2A>       當`disposing`參數為 true，這個方法的任何 managed 物件所持有的資源全部釋出這個<xref:System.Security.Principal.WindowsImpersonationContext>參考。</xref:System.Security.Principal.WindowsImpersonationContext> 這個方法會叫用`Dispose()`每個參考物件的方法。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>表示釋放 managed 和 unmanaged 資源，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>表示只釋放 unmanaged 的資源。"
  overload: System.Security.Principal.WindowsImpersonationContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsImpersonationContext.Undo
  id: Undo
  parent: System.Security.Principal.WindowsImpersonationContext
  langs:
  - csharp
  name: Undo()
  nameWithType: WindowsImpersonationContext.Undo()
  fullName: System.Security.Principal.WindowsImpersonationContext.Undo()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "還原到此物件所代表之 Windows 使用者的使用者內容。"
  remarks: ''
  example:
  - "The following example shows how to impersonate a Windows identity using a specified user token.  \n  \n [!code-cpp[Classic WindowsImpersonationContext.Undo Example#1](~/add/codesnippet/cpp/m-system.security.princi_8_1.cpp)]\n [!code-cs[Classic WindowsImpersonationContext.Undo Example#1](~/add/codesnippet/csharp/m-system.security.princi_8_1.cs)]\n [!code-vb[Classic WindowsImpersonationContext.Undo Example#1](~/add/codesnippet/visualbasic/m-system.security.princi_8_1.vb)]"
  syntax:
    content: public void Undo ();
    parameters: []
  overload: System.Security.Principal.WindowsImpersonationContext.Undo*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "嘗試還原識別設為本身以外使用此方法用於任何用途。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Security.Principal.WindowsImpersonationContext.Dispose
  parent: System.Security.Principal.WindowsImpersonationContext
  isExternal: false
  name: Dispose()
  nameWithType: WindowsImpersonationContext.Dispose()
  fullName: System.Security.Principal.WindowsImpersonationContext.Dispose()
- uid: System.Security.Principal.WindowsImpersonationContext.Dispose(System.Boolean)
  parent: System.Security.Principal.WindowsImpersonationContext
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: WindowsImpersonationContext.Dispose(Boolean)
  fullName: System.Security.Principal.WindowsImpersonationContext.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Principal.WindowsImpersonationContext.Undo
  parent: System.Security.Principal.WindowsImpersonationContext
  isExternal: false
  name: Undo()
  nameWithType: WindowsImpersonationContext.Undo()
  fullName: System.Security.Principal.WindowsImpersonationContext.Undo()
- uid: System.Security.Principal.WindowsImpersonationContext.Dispose*
  parent: System.Security.Principal.WindowsImpersonationContext
  isExternal: false
  name: Dispose
  nameWithType: WindowsImpersonationContext.Dispose
- uid: System.Security.Principal.WindowsImpersonationContext.Undo*
  parent: System.Security.Principal.WindowsImpersonationContext
  isExternal: false
  name: Undo
  nameWithType: WindowsImpersonationContext.Undo
