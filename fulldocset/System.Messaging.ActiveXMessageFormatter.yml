### YamlMime:ManagedReference
items:
- uid: System.Messaging.ActiveXMessageFormatter
  id: ActiveXMessageFormatter
  children:
  - System.Messaging.ActiveXMessageFormatter.#ctor
  - System.Messaging.ActiveXMessageFormatter.CanRead(System.Messaging.Message)
  - System.Messaging.ActiveXMessageFormatter.Clone
  - System.Messaging.ActiveXMessageFormatter.InitStreamedObject(System.Object)
  - System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)
  - System.Messaging.ActiveXMessageFormatter.Write(System.Messaging.Message,System.Object)
  langs:
  - csharp
  name: ActiveXMessageFormatter
  nameWithType: ActiveXMessageFormatter
  fullName: System.Messaging.ActiveXMessageFormatter
  type: Class
  summary: "序列化或還原序列化基本資料類型和其他物件或主體中的訊息佇列的訊息，使用與 MSMQ ActiveX 元件相容的格式。"
  remarks: "ActiveXMessageFormatter 適用於使用訊息佇列的 COM 元件，傳送訊息允許交互操作性應用程式使用 MSMQ COM 控制項。       大部分基本類型，以及實作的物件，可以將序列化 ActiveXMessageFormatter `IPersistStream` OLE 介面。 它可以還原序列化基本項目，一組相同，但需要進一步投入時間實作 COM 物件 （例如，使用 Visual Basic 6.0 中建立的物件） 還原序列化時`IPersistStream`。 要還原序列化的物件必須是在記憶體中，第一次匯入物件的.NET Framework 應用程式。       當應用程式傳送訊息至佇列使用的執行個體<xref:System.Messaging.MessageQueue>類別，格式器會將物件序列化成資料流，並將它插入訊息本文。</xref:System.Messaging.MessageQueue> 從使用<xref:System.Messaging.MessageQueue>中，格式子還原序列化成<xref:System.Messaging.Message.Body%2A><xref:System.Messaging.Message>.</xref:System.Messaging.Message>屬性</xref:System.Messaging.Message.Body%2A>的訊息資料</xref:System.Messaging.MessageQueue>的佇列讀取時       ActiveX 序列化非常簡潔，因此使用 ActiveXMessageFormatter，而 MSMQ COM 控制非常快速的序列化方法。"
  syntax:
    content: 'public class ActiveXMessageFormatter : ICloneable, System.Messaging.IMessageFormatter'
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  - System.Messaging.IMessageFormatter
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.ActiveXMessageFormatter.#ctor
  id: '#ctor'
  parent: System.Messaging.ActiveXMessageFormatter
  langs:
  - csharp
  name: ActiveXMessageFormatter()
  nameWithType: ActiveXMessageFormatter.ActiveXMessageFormatter()
  fullName: System.Messaging.ActiveXMessageFormatter.ActiveXMessageFormatter()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "初始化的新執行個體<xref href=&quot;System.Messaging.ActiveXMessageFormatter&quot;></xref>類別。"
  syntax:
    content: public ActiveXMessageFormatter ();
    parameters: []
  overload: System.Messaging.ActiveXMessageFormatter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.ActiveXMessageFormatter.CanRead(System.Messaging.Message)
  id: CanRead(System.Messaging.Message)
  parent: System.Messaging.ActiveXMessageFormatter
  langs:
  - csharp
  name: CanRead(Message)
  nameWithType: ActiveXMessageFormatter.CanRead(Message)
  fullName: System.Messaging.ActiveXMessageFormatter.CanRead(Message)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "判斷格式器是否可以還原序列化訊息的內容。"
  remarks: "CanRead 傳回`false`如果訊息本文不是訊息佇列的 ActiveX 控制項可以還原序列化的基本類型，或未實作`IPersistStream`介面。"
  syntax:
    content: public bool CanRead (System.Messaging.Message message);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref>檢查。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Messaging.ActiveXMessageFormatter&quot;></xref>可以將訊息還原序列化，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Messaging.ActiveXMessageFormatter.CanRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.ActiveXMessageFormatter.Clone
  id: Clone
  parent: System.Messaging.ActiveXMessageFormatter
  langs:
  - csharp
  name: Clone()
  nameWithType: ActiveXMessageFormatter.Clone()
  fullName: System.Messaging.ActiveXMessageFormatter.Clone()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "建立的執行個體<xref href=&quot;System.Messaging.ActiveXMessageFormatter&quot;></xref>等同於目前的類別<xref href=&quot;System.Messaging.ActiveXMessageFormatter&quot;> </xref>。"
  remarks: "這個方法由<xref:System.Messaging.MessageQueue>以同時接收多個訊息，（比方說，如果應用程式以非同步方式接收） 的類別。</xref:System.Messaging.MessageQueue> 您通常不需要在應用程式程式碼中呼叫這個方法。"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "其屬性都與這個物件<xref href=&quot;System.Messaging.ActiveXMessageFormatter&quot;> </xref>。"
  overload: System.Messaging.ActiveXMessageFormatter.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.ActiveXMessageFormatter.InitStreamedObject(System.Object)
  id: InitStreamedObject(System.Object)
  parent: System.Messaging.ActiveXMessageFormatter
  langs:
  - csharp
  name: InitStreamedObject(Object)
  nameWithType: ActiveXMessageFormatter.InitStreamedObject(Object)
  fullName: System.Messaging.ActiveXMessageFormatter.InitStreamedObject(Object)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "提供公用程式來協助序列化 COM 物件實作<xref uid=&quot;langword_csharp_IPersistStream&quot; name=&quot;IPersistStream&quot; href=&quot;&quot;> </xref> ，而且需要<xref uid=&quot;langword_csharp_IPersistStreamInit&quot; name=&quot;IPersistStreamInit&quot; href=&quot;&quot;></xref>呼叫。"
  syntax:
    content: public static void InitStreamedObject (object streamedObject);
    parameters:
    - id: streamedObject
      type: System.Object
      description: "實作的 OLE 物件<xref uid=&quot;langword_csharp_IPersistStreamInit&quot; name=&quot;IPersistStreamInit&quot; href=&quot;&quot;> </xref>。"
  overload: System.Messaging.ActiveXMessageFormatter.InitStreamedObject*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)
  id: Read(System.Messaging.Message)
  parent: System.Messaging.ActiveXMessageFormatter
  langs:
  - csharp
  name: Read(Message)
  nameWithType: ActiveXMessageFormatter.Read(Message)
  fullName: System.Messaging.ActiveXMessageFormatter.Read(Message)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "讀取給定訊息的內容，並建立包含已還原序列化的訊息的物件。"
  remarks: "如果訊息的本文代表基本類型，訊息的<xref:System.Messaging.Message.BodyType%2A>屬性必須是下表中的 managed 類型的其中一個。</xref:System.Messaging.Message.BodyType%2A>      |BodyType 值 |Managed 型別的 |  |--------------------|------------------|  |VT_LPSTR |<xref:System.Char>陣列 （使用 ASCII 編碼方式還原序列化） |  |VT_BSTR，VT_LPWSTR |<xref:System.String>（還原序列化使用 Unicode 編碼） |  |VT_VECTOR |VT_UI1 |<xref:System.Byte>陣列 |  |VT_BOOL |<xref:System.Boolean>|  |VT_CLSID |<xref:System.Guid>|  |VT_CY |<xref:System.Decimal>|  |VT_DATE |<xref:System.DateTime>|  |VT_I1、 VT_UI1 |<xref:System.Byte>|  |VT_I2 |<xref:System.Int16>|  |VT_UI2 |<xref:System.UInt16>|  |VT_I4 |<xref:System.Int32>|  |VT_UI4 |<xref:System.UInt32>|  |VT_I8 |<xref:System.Int64>|  |VT_UI8 |<xref:System.UInt64>|  |VT_R4 |<xref:System.Single>|  |VT_R8 |<xref:System.Double>|  |VT_NULL |`null`|  |VT_STREAMED_OBJECT |<xref:System.Object>|</xref:System.Object></xref:System.Double></xref:System.Single></xref:System.UInt64></xref:System.Int64></xref:System.UInt32></xref:System.Int32></xref:System.UInt16></xref:System.Int16></xref:System.Byte></xref:System.DateTime></xref:System.Decimal></xref:System.Guid></xref:System.Boolean></xref:System.Byte></xref:System.String></xref:System.Char>"
  syntax:
    content: public object Read (System.Messaging.Message message);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref>，MSMQ ActiveX 控制項的格式，還原序列化。"
    return:
      type: System.Object
      description: "已還原序列化的訊息。"
  overload: System.Messaging.ActiveXMessageFormatter.Read*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Messaging.Message.BodyType*>屬性<code> message </code>參數無法對應到基本型別，也不代表資料流處理的物件形式傳遞。</xref:System.Messaging.Message.BodyType*>"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "本文會表示預存的物件。 <xref href=&quot;System.Messaging.ActiveXMessageFormatter&quot;> </xref>不支援還原序列化的預存物件。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.ActiveXMessageFormatter.Write(System.Messaging.Message,System.Object)
  id: Write(System.Messaging.Message,System.Object)
  parent: System.Messaging.ActiveXMessageFormatter
  langs:
  - csharp
  name: Write(Message,Object)
  nameWithType: ActiveXMessageFormatter.Write(Message,Object)
  fullName: System.Messaging.ActiveXMessageFormatter.Write(Message,Object)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "將物件序列化至訊息的本文。"
  remarks: "下表顯示 managed 型別之間的關聯性和<xref:System.Messaging.Message.BodyType%2A>屬性。</xref:System.Messaging.Message.BodyType%2A> 您所序列化的物件必須是其中一個這些 managed 類型，或必須實作 OLE`IPersistStream`介面。      |BodyType 值 |Managed 型別的 |  |--------------------|------------------|  |VT_LPSTR |<xref:System.Char>|  |VT_BSTR，VT_LPWSTR |<xref:System.String>|  |VT_VECTOR |VT_UI1 |<xref:System.Byte>|  |VT_BOOL |<xref:System.Boolean>|  |VT_CLSID |<xref:System.Guid>|  |VT_CY |<xref:System.Decimal>|  |VT_DATE |<xref:System.DateTime>|  |VT_I1、 VT_UI1 |<xref:System.Byte>|  |VT_I2 |<xref:System.Int16>|  |VT_UI2 |<xref:System.UInt16>|  |VT_I4 |<xref:System.Int32>|  |VT_UI4 |<xref:System.UInt32>|  |VT_I8 |<xref:System.Int64>|  |VT_UI8 |<xref:System.UInt64>|  |VT_R4 |<xref:System.Single>|  |VT_R8 |<xref:System.Double>|  |VT_NULL |`null`|  |VT_STREAMED_OBJECT |`IPersistStream` (OLE) <xref:System.Object>|</xref:System.Object></xref:System.Double></xref:System.Single></xref:System.UInt64></xref:System.Int64></xref:System.UInt32></xref:System.Int32></xref:System.UInt16></xref:System.Int16></xref:System.Byte></xref:System.DateTime></xref:System.Decimal></xref:System.Guid></xref:System.Boolean></xref:System.Byte></xref:System.String></xref:System.Char>"
  syntax:
    content: public void Write (System.Messaging.Message message, object obj);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref>其<xref:System.Messaging.Message.Body*>屬性會包含已序列化的物件。</xref:System.Messaging.Message.Body*>"
    - id: obj
      type: System.Object
      description: "要序列化為訊息本文的物件。"
  overload: System.Messaging.ActiveXMessageFormatter.Write*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "要序列化的物件是既不是基本類型和資料流處理的物件會實作 OLE <xref uid=&quot;langword_csharp_IPersistStream&quot; name=&quot;IPersistStream&quot; href=&quot;&quot;> </xref>介面。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Messaging.ActiveXMessageFormatter.#ctor
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: ActiveXMessageFormatter()
  nameWithType: ActiveXMessageFormatter.ActiveXMessageFormatter()
  fullName: System.Messaging.ActiveXMessageFormatter.ActiveXMessageFormatter()
- uid: System.Messaging.ActiveXMessageFormatter.CanRead(System.Messaging.Message)
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: CanRead(Message)
  nameWithType: ActiveXMessageFormatter.CanRead(Message)
  fullName: System.Messaging.ActiveXMessageFormatter.CanRead(Message)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.Message
  parent: System.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
- uid: System.Messaging.ActiveXMessageFormatter.Clone
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: Clone()
  nameWithType: ActiveXMessageFormatter.Clone()
  fullName: System.Messaging.ActiveXMessageFormatter.Clone()
- uid: System.Messaging.ActiveXMessageFormatter.InitStreamedObject(System.Object)
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: InitStreamedObject(Object)
  nameWithType: ActiveXMessageFormatter.InitStreamedObject(Object)
  fullName: System.Messaging.ActiveXMessageFormatter.InitStreamedObject(Object)
- uid: System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: Read(Message)
  nameWithType: ActiveXMessageFormatter.Read(Message)
  fullName: System.Messaging.ActiveXMessageFormatter.Read(Message)
- uid: System.Messaging.ActiveXMessageFormatter.Write(System.Messaging.Message,System.Object)
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: Write(Message,Object)
  nameWithType: ActiveXMessageFormatter.Write(Message,Object)
  fullName: System.Messaging.ActiveXMessageFormatter.Write(Message,Object)
- uid: System.Messaging.ActiveXMessageFormatter.#ctor*
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: ActiveXMessageFormatter
  nameWithType: ActiveXMessageFormatter.ActiveXMessageFormatter
- uid: System.Messaging.ActiveXMessageFormatter.CanRead*
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: CanRead
  nameWithType: ActiveXMessageFormatter.CanRead
- uid: System.Messaging.ActiveXMessageFormatter.Clone*
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: Clone
  nameWithType: ActiveXMessageFormatter.Clone
- uid: System.Messaging.ActiveXMessageFormatter.InitStreamedObject*
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: InitStreamedObject
  nameWithType: ActiveXMessageFormatter.InitStreamedObject
- uid: System.Messaging.ActiveXMessageFormatter.Read*
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: Read
  nameWithType: ActiveXMessageFormatter.Read
- uid: System.Messaging.ActiveXMessageFormatter.Write*
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: Write
  nameWithType: ActiveXMessageFormatter.Write
