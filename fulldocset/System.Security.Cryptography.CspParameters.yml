### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.CspParameters
  id: CspParameters
  children:
  - System.Security.Cryptography.CspParameters.#ctor
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32)
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String)
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String)
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.IntPtr)
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.Security.SecureString)
  - System.Security.Cryptography.CspParameters.CryptoKeySecurity
  - System.Security.Cryptography.CspParameters.Flags
  - System.Security.Cryptography.CspParameters.KeyContainerName
  - System.Security.Cryptography.CspParameters.KeyNumber
  - System.Security.Cryptography.CspParameters.KeyPassword
  - System.Security.Cryptography.CspParameters.ParentWindowHandle
  - System.Security.Cryptography.CspParameters.ProviderName
  - System.Security.Cryptography.CspParameters.ProviderType
  langs:
  - csharp
  name: CspParameters
  nameWithType: CspParameters
  fullName: System.Security.Cryptography.CspParameters
  type: Class
  summary: "包含傳遞至執行密碼編譯計算的密碼編譯服務提供者 (CSP) 的參數。 這個類別無法被繼承。"
  remarks: "CspParameters 類別表示您可以傳遞給受管理的密碼編譯類別，在內部使用 Microsoft 密碼編譯服務提供者 (Csp) 從 unmanaged Microsoft 密碼編譯 API (CAPI) 的參數。 使用名稱結尾&quot;CryptoServiceProvider 」 的類別是 managed 程式碼包裝函式，以相對應的 CSP。       使用 CspParameters 類別來執行下列動作:-藉由傳遞提供者類型，若要指定特定 CSP<xref:System.Security.Cryptography.CspParameters.ProviderType>或<xref:System.Security.Cryptography.CspParameters.ProviderName>屬性。</xref:System.Security.Cryptography.CspParameters.ProviderName> </xref:System.Security.Cryptography.CspParameters.ProviderType>  您也可以指定使用的建構函式多載的 CSP。      -建立可以在其中儲存密碼編譯金鑰的金鑰容器。  金鑰容器會提供最安全的方式保存密碼編譯金鑰，並將其保密來自惡意的第三方。  如需建立金鑰容器的詳細資訊，請參閱[How to︰ 在金鑰容器儲存非對稱金鑰](~/add/includes/ajax-current-ext-md.md)。      -指定是否要建立非對稱簽章金鑰或非對稱交換金鑰使用<xref:System.Security.Cryptography.CspParameters.KeyNumber>屬性。</xref:System.Security.Cryptography.CspParameters.KeyNumber>"
  example:
  - "The following code example creates a key container using the CspParameters class and saves the key in the container.  \n  \n [!code-cpp[capikey#1](~/add/codesnippet/cpp/t-system.security.crypto_47_1.cpp)]\n [!code-vb[capikey#1](~/add/codesnippet/visualbasic/t-system.security.crypto_47_1.vb)]\n [!code-cs[capikey#1](~/add/codesnippet/csharp/t-system.security.crypto_47_1.cs)]  \n  \n The following code example uses the CspParameters class to select a Smart Card Cryptographic Service Provider.  It then signs and verifies data using the smart card.  \n  \n [!code-cs[Cryptography.SmartCardCSP#1](~/add/codesnippet/csharp/t-system.security.crypto_47_2.cs)]\n [!code-cpp[Cryptography.SmartCardCSP#1](~/add/codesnippet/cpp/t-system.security.crypto_47_2.cpp)]\n [!code-vb[Cryptography.SmartCardCSP#1](~/add/codesnippet/visualbasic/t-system.security.crypto_47_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class CspParameters
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters()
  nameWithType: CspParameters.CspParameters()
  fullName: System.Security.Cryptography.CspParameters.CspParameters()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref>類別。"
  remarks: "這種形式的 CspParameters 初始化<xref:System.Security.Cryptography.CspParameters.ProviderType>欄位的值`24`，以指定 PROV_RSA_AES 提供者。</xref:System.Security.Cryptography.CspParameters.ProviderType>  此預設提供者是與相容<xref:System.Security.Cryptography.Aes>演算法。</xref:System.Security.Cryptography.Aes>       如需其他提供者類型的資訊，請參閱<xref:System.Security.Cryptography.CspParameters.ProviderType>欄位。</xref:System.Security.Cryptography.CspParameters.ProviderType>"
  example:
  - "The following code example creates a key container using the <xref:System.Security.Cryptography.CspParameters> class and saves the key in the container.  \n  \n [!code-cpp[capikey#1](~/add/codesnippet/cpp/m-system.security.crypto_108_1.cpp)]\n [!code-vb[capikey#1](~/add/codesnippet/visualbasic/m-system.security.crypto_108_1.vb)]\n [!code-cs[capikey#1](~/add/codesnippet/csharp/m-system.security.crypto_108_1.cs)]"
  syntax:
    content: public CspParameters ();
    parameters: []
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters(Int32)
  nameWithType: CspParameters.CspParameters(Int32)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref>類別使用指定的提供者類型碼。"
  remarks: "您可以使用 CspParameters 建構函式，藉由傳遞數值，表示該提供者指定的提供者類型。  WinCrypt.h 標頭檔中定義之數字的值，表示預設提供者型別:-若要指定與相容的提供者<xref:System.Security.Cryptography.RSA>演算法，傳遞的值具有`1`至`dwTypeIn`參數。</xref:System.Security.Cryptography.RSA>      -若要指定與相容的提供者<xref:System.Security.Cryptography.DSA>演算法，傳遞的值具有`13`至`dwTypeIn`參數。</xref:System.Security.Cryptography.DSA>       其他提供者類型值的詳細資訊，請參閱<xref:System.Security.Cryptography.CspParameters.ProviderType>欄位。</xref:System.Security.Cryptography.CspParameters.ProviderType>  如需有關預設提供者類型和行為的詳細資訊，請參閱 MSDN library 中的 Microsoft 密碼編譯 API (CAPI) 文件。"
  example:
  - "The following code example creates a key container using the <xref:System.Security.Cryptography.CspParameters> class and saves the key in the container.  \n  \n [!code-cpp[capikey#1](~/add/codesnippet/cpp/m-system.security.crypto_129_1.cpp)]\n [!code-vb[capikey#1](~/add/codesnippet/visualbasic/m-system.security.crypto_129_1.vb)]\n [!code-cs[capikey#1](~/add/codesnippet/csharp/m-system.security.crypto_129_1.cs)]"
  syntax:
    content: public CspParameters (int dwTypeIn);
    parameters:
    - id: dwTypeIn
      type: System.Int32
      description: "指定的提供者建立類型之提供者類型碼。"
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String)
  id: '#ctor(System.Int32,System.String)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters(Int32,String)
  nameWithType: CspParameters.CspParameters(Int32,String)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref>類別具有指定的提供者類型程式碼和名稱。"
  remarks: "您可以使用 CspParameters 建構函式來指定提供者類型和名稱。       藉由傳遞數值，表示所需的提供者型別指定提供者類型。  WinCrypt.h 標頭檔中定義之數字的值，表示預設提供者型別:-若要指定與相容的提供者<xref:System.Security.Cryptography.RSA>演算法，傳遞的值具有`1`至`dwTypeIn`參數。</xref:System.Security.Cryptography.RSA>      -若要指定與相容的提供者<xref:System.Security.Cryptography.DSA>演算法，傳遞的值具有`13`至`dwTypeIn`參數。</xref:System.Security.Cryptography.DSA>       其他提供者類型值的詳細資訊，請參閱<xref:System.Security.Cryptography.CspParameters.ProviderType>欄位。</xref:System.Security.Cryptography.CspParameters.ProviderType>  如需有關預設提供者類型和行為的詳細資訊，請參閱 MSDN library 中的 Microsoft 密碼編譯 API (CAPI) 文件。"
  example:
  - "The following code example uses the <xref:System.Security.Cryptography.CspParameters> class to select a Smart Card Cryptographic Service Provider.  It then signs and verifies data using the smart card.  \n  \n [!code-cs[Cryptography.SmartCardCSP#1](~/add/codesnippet/csharp/3115faba-ad85-4109-97d8-_1.cs)]\n [!code-cpp[Cryptography.SmartCardCSP#1](~/add/codesnippet/cpp/3115faba-ad85-4109-97d8-_1.cpp)]\n [!code-vb[Cryptography.SmartCardCSP#1](~/add/codesnippet/visualbasic/3115faba-ad85-4109-97d8-_1.vb)]"
  syntax:
    content: public CspParameters (int dwTypeIn, string strProviderNameIn);
    parameters:
    - id: dwTypeIn
      type: System.Int32
      description: "指定的提供者建立類型之提供者類型碼。"
    - id: strProviderNameIn
      type: System.String
      description: "提供者名稱。"
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String)
  id: '#ctor(System.Int32,System.String,System.String)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters(Int32,String,String)
  nameWithType: CspParameters.CspParameters(Int32,String,String)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref>類別指定的提供者類型程式碼和名稱，以及指定的容器名稱。"
  remarks: "您可以使用 CspParameters 建構函式來指定提供者類型、 提供者名稱和一個容器名稱。       您可以擷取該容器內的索引鍵使用的容器名稱。       藉由傳遞數值，表示所需的提供者型別指定提供者類型。  WinCrypt.h 標頭檔中定義之數字的值，表示預設提供者型別:-若要指定與相容的提供者<xref:System.Security.Cryptography.RSA>演算法，傳遞的值具有`1`至`dwTypeIn`參數。</xref:System.Security.Cryptography.RSA>      -若要指定與相容的提供者<xref:System.Security.Cryptography.DSA>演算法，傳遞的值具有`13`至`dwTypeIn`參數。</xref:System.Security.Cryptography.DSA>       其他提供者類型值的詳細資訊，請參閱<xref:System.Security.Cryptography.CspParameters.ProviderType>欄位。</xref:System.Security.Cryptography.CspParameters.ProviderType>  如需有關預設提供者類型和行為的詳細資訊，請參閱 MSDN library 中的 Microsoft 密碼編譯 API (CAPI) 文件。"
  syntax:
    content: public CspParameters (int dwTypeIn, string strProviderNameIn, string strContainerNameIn);
    parameters:
    - id: dwTypeIn
      type: System.Int32
      description: "指定的提供者建立類型提供者類型碼。"
    - id: strProviderNameIn
      type: System.String
      description: "提供者名稱。"
    - id: strContainerNameIn
      type: System.String
      description: "容器名稱。"
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.IntPtr)
  id: '#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.IntPtr)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
  nameWithType: CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref>類別使用的提供者類型、 提供者名稱、 容器名稱、 存取資訊和 unmanaged 的智慧卡密碼 對話方塊的控制代碼。"
  remarks: "您可以擷取該容器內的索引鍵使用的容器名稱。       藉由傳遞數值，表示所需的提供者型別指定提供者類型。  WinCrypt.h 標頭檔中定義之數字的值，表示預設提供者型別:-若要指定與相容的提供者<xref:System.Security.Cryptography.RSA>演算法，傳遞的值具有`1`至`dwTypeIn`參數。</xref:System.Security.Cryptography.RSA>      -若要指定與相容的提供者<xref:System.Security.Cryptography.DSA>演算法，傳遞的值具有`13`至`dwTypeIn`參數。</xref:System.Security.Cryptography.DSA>       其他提供者類型值的詳細資訊，請參閱<xref:System.Security.Cryptography.CspParameters.ProviderType>欄位。</xref:System.Security.Cryptography.CspParameters.ProviderType>  如需有關預設提供者類型和行為的詳細資訊，請參閱 MSDN library 中的 Microsoft 密碼編譯 API (CAPI) 文件。"
  syntax:
    content: public CspParameters (int providerType, string providerName, string keyContainerName, System.Security.AccessControl.CryptoKeySecurity cryptoKeySecurity, IntPtr parentWindowHandle);
    parameters:
    - id: providerType
      type: System.Int32
      description: "指定的提供者建立類型提供者類型碼。"
    - id: providerName
      type: System.String
      description: "提供者名稱。"
    - id: keyContainerName
      type: System.String
      description: "容器名稱。"
    - id: cryptoKeySecurity
      type: System.Security.AccessControl.CryptoKeySecurity
      description: "物件，代表存取權限和稽核規則的容器。"
    - id: parentWindowHandle
      type: System.IntPtr
      description: "智慧卡密碼對話方塊的父視窗控制代碼。"
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.Security.SecureString)
  id: '#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.Security.SecureString)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
  nameWithType: CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref>類別使用的提供者類型、 提供者名稱、 容器名稱、 存取資訊和智慧卡的索引鍵相關聯的密碼。"
  remarks: "您可以擷取該容器內的索引鍵使用的容器名稱。       藉由傳遞數值，表示所需的提供者型別指定提供者類型。  WinCrypt.h 標頭檔中定義之數字的值，表示預設提供者型別:-若要指定與相容的提供者<xref:System.Security.Cryptography.RSA>演算法，傳遞的值具有`1`至`dwTypeIn`參數。</xref:System.Security.Cryptography.RSA>      -若要指定與相容的提供者<xref:System.Security.Cryptography.DSA>演算法，傳遞的值具有`13`至`dwTypeIn`參數。</xref:System.Security.Cryptography.DSA>       其他提供者類型值的詳細資訊，請參閱<xref:System.Security.Cryptography.CspParameters.ProviderType>欄位。</xref:System.Security.Cryptography.CspParameters.ProviderType>  如需有關預設提供者類型和行為的詳細資訊，請參閱 MSDN library 中的 Microsoft 密碼編譯 API (CAPI) 文件。"
  syntax:
    content: public CspParameters (int providerType, string providerName, string keyContainerName, System.Security.AccessControl.CryptoKeySecurity cryptoKeySecurity, System.Security.SecureString keyPassword);
    parameters:
    - id: providerType
      type: System.Int32
      description: "指定的提供者建立類型提供者類型碼。"
    - id: providerName
      type: System.String
      description: "提供者名稱。"
    - id: keyContainerName
      type: System.String
      description: "容器名稱。"
    - id: cryptoKeySecurity
      type: System.Security.AccessControl.CryptoKeySecurity
      description: "物件，代表存取權限和稽核規則的容器。"
    - id: keyPassword
      type: System.Security.SecureString
      description: "智慧卡的索引鍵相關聯的密碼。"
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.CryptoKeySecurity
  id: CryptoKeySecurity
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CryptoKeySecurity
  nameWithType: CspParameters.CryptoKeySecurity
  fullName: System.Security.Cryptography.CspParameters.CryptoKeySecurity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得或設定<xref href=&quot;System.Security.AccessControl.CryptoKeySecurity&quot;></xref>物件表示的存取權限和稽核規則的容器。"
  remarks: "使用 CryptoKeySecurity 屬性來指定<xref:System.Security.AccessControl.CryptoKeySecurity>物件管理建立的判別存取控制清單 (DACL) 和系統存取控制清單 (SACL) 容器。</xref:System.Security.AccessControl.CryptoKeySecurity>"
  syntax:
    content: public System.Security.AccessControl.CryptoKeySecurity CryptoKeySecurity { get; set; }
    return:
      type: System.Security.AccessControl.CryptoKeySecurity
      description: "A <xref href=&quot;System.Security.AccessControl.CryptoKeySecurity&quot;> </xref>物件表示的存取權限和稽核規則的容器。"
  overload: System.Security.Cryptography.CspParameters.CryptoKeySecurity*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.Flags
  id: Flags
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: Flags
  nameWithType: CspParameters.Flags
  fullName: System.Security.Cryptography.CspParameters.Flags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "代表的旗標<xref href=&quot;System.Security.Cryptography.CspParameters&quot;> </xref> ，修改密碼編譯服務提供者 (CSP) 的行為。"
  syntax:
    content: public System.Security.Cryptography.CspProviderFlags Flags { get; set; }
    return:
      type: System.Security.Cryptography.CspProviderFlags
      description: "列舉值或列舉值的位元組合。"
  overload: System.Security.Cryptography.CspParameters.Flags*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "值不是有效的列舉值。"
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.KeyContainerName
  id: KeyContainerName
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: KeyContainerName
  nameWithType: CspParameters.KeyContainerName
  fullName: System.Security.Cryptography.CspParameters.KeyContainerName
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "表示金鑰容器名稱<xref href=&quot;System.Security.Cryptography.CspParameters&quot;> </xref>。"
  remarks: "您可以使用 KeyContainerName 欄位來指定您的金鑰容器的名稱。  您可以擷取該容器內的持續性索引鍵使用的容器名稱。       如需建立金鑰容器的詳細資訊，請參閱[How to︰ 在金鑰容器儲存非對稱金鑰](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example creates a key container using the <xref:System.Security.Cryptography.CspParameters> class and saves the key in the container.  \n  \n [!code-cpp[capikey#1](~/add/codesnippet/cpp/f-system.security.crypto_6_1.cpp)]\n [!code-vb[capikey#1](~/add/codesnippet/visualbasic/f-system.security.crypto_6_1.vb)]\n [!code-cs[capikey#1](~/add/codesnippet/csharp/f-system.security.crypto_6_1.cs)]"
  syntax:
    content: public string KeyContainerName;
    return:
      type: System.String
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.KeyNumber
  id: KeyNumber
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: KeyNumber
  nameWithType: CspParameters.KeyNumber
  fullName: System.Security.Cryptography.CspParameters.KeyNumber
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定是否要將非對稱金鑰建立為簽章金鑰或交換金鑰。"
  remarks: "KeyNumber 欄位初始化<xref:System.Security.Cryptography.CspKeyContainerInfo.KeyNumber%2A>屬性，當您初始化<xref:System.Security.Cryptography.CspKeyContainerInfo>物件<xref:System.Security.Cryptography.CspParameters>物件。</xref:System.Security.Cryptography.CspParameters> </xref:System.Security.Cryptography.CspKeyContainerInfo> </xref:System.Security.Cryptography.CspKeyContainerInfo.KeyNumber%2A>       交換金鑰是用來加密工作階段金鑰，使它們可以安全地儲存和與其他使用者交換非對稱金鑰組。  您可以使用<xref:System.Security.Cryptography.KeyNumber>值 (`1`) 來指定交換金鑰。</xref:System.Security.Cryptography.KeyNumber>  這個值會對應到`AT_KEYEXCHANGE`用在 unmanaged Microsoft 密碼編譯 API (CAPI) 的值。       簽章金鑰是用來驗證數位簽章的訊息或檔案的非對稱金鑰組。  您可以使用<xref:System.Security.Cryptography.KeyNumber>值 (`2`) 來指定簽章金鑰。</xref:System.Security.Cryptography.KeyNumber>  這個值會對應到`AT_SIGNATURE`CAPI 中使用的值。       根據預設，KeyNumber 欄位會指定交換金鑰。"
  example:
  - "The following code example demonstrates how to use the <xref:System.Security.Cryptography.KeyNumber> enumeration to specify a key type for an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object.  \n  \n [!code-cs[Cryptography.KeyNumber#1](~/add/codesnippet/csharp/f-system.security.crypto_8_1.cs)]\n [!code-cpp[Cryptography.KeyNumber#1](~/add/codesnippet/cpp/f-system.security.crypto_8_1.cpp)]\n [!code-vb[Cryptography.KeyNumber#1](~/add/codesnippet/visualbasic/f-system.security.crypto_8_1.vb)]"
  syntax:
    content: public int KeyNumber;
    return:
      type: System.Int32
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.KeyPassword
  id: KeyPassword
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: KeyPassword
  nameWithType: CspParameters.KeyPassword
  fullName: System.Security.Cryptography.CspParameters.KeyPassword
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得或設定與智慧卡金鑰相關聯的密碼。"
  remarks: "您可以使用 KeyPassword 屬性以提供智慧卡金鑰的密碼。  當您指定密碼，使用這個屬性時，不會向使用者提供密碼 對話方塊。"
  syntax:
    content: public System.Security.SecureString KeyPassword { get; set; }
    return:
      type: System.Security.SecureString
      description: "智慧卡的索引鍵相關聯的密碼。"
  overload: System.Security.Cryptography.CspParameters.KeyPassword*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.ParentWindowHandle
  id: ParentWindowHandle
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: ParentWindowHandle
  nameWithType: CspParameters.ParentWindowHandle
  fullName: System.Security.Cryptography.CspParameters.ParentWindowHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得或設定智慧卡密碼對話方塊中的未受管理的父視窗控制代碼。"
  remarks: "您可以使用 ParentWindowHandle 屬性來指定智慧卡密碼對話方塊中的未受管理的父視窗的控制代碼。  當您指定使用這個屬性的控制代碼時，智慧卡密碼 對話方塊會呈現給使用者。       藉由明確地使用指定密碼中呈現智慧卡密碼對話方塊中，您可以避免<xref:System.Security.Cryptography.CspParameters.KeyPassword%2A>屬性。</xref:System.Security.Cryptography.CspParameters.KeyPassword%2A>"
  syntax:
    content: public IntPtr ParentWindowHandle { get; set; }
    return:
      type: System.IntPtr
      description: "智慧卡密碼 對話方塊的父視窗控制代碼。"
  overload: System.Security.Cryptography.CspParameters.ParentWindowHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.ProviderName
  id: ProviderName
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: ProviderName
  nameWithType: CspParameters.ProviderName
  fullName: System.Security.Cryptography.CspParameters.ProviderName
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "表示提供者名稱<xref href=&quot;System.Security.Cryptography.CspParameters&quot;> </xref>。"
  remarks: "請參閱 MSDN library，以取得詳細資料中的 Microsoft 密碼編譯 API (CAPI) 文件的提供者名稱。"
  syntax:
    content: public string ProviderName;
    return:
      type: System.String
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.ProviderType
  id: ProviderType
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: ProviderType
  nameWithType: CspParameters.ProviderType
  fullName: System.Security.Cryptography.CspParameters.ProviderType
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "代表提供者類型碼<xref href=&quot;System.Security.Cryptography.CspParameters&quot;> </xref>。"
  remarks: "使用 [提供者類型] 欄位來指定提供者類型藉由傳遞數值，表示該提供者。  WinCrypt.h 標頭檔中定義之數字的值，表示預設提供者型別:-若要指定與相容的提供者<xref:System.Security.Cryptography.RSA>類別中，將值傳遞`1`。</xref:System.Security.Cryptography.RSA>      -若要指定與相容的提供者<xref:System.Security.Cryptography.DSA>類別中，將值傳遞`13`。</xref:System.Security.Cryptography.DSA>       下表列出提供者類型和其對應的數字值 WinCrypt.h 標頭檔中定義。      |提供者類型 |數值 |  |-------------------|-------------------|  |`PROV_RSA_FULL`|1|  |`PROV_RSA_SIG`|2|  |`PROV_DSS`|3|  |`PROV_FORTEZZA`|4|  |`PROV_MS_EXCHANGE`|5|  |`PROV_SSL`|6|  |`PROV_RSA_SCHANNEL`|12|  |`PROV_DSS_DH`|13|  |`PROV_EC_ECDSA_SIG`|14|  |`PROV_EC_ECNRA_SIG`|15|  |`PROV_EC_ECDSA_FULL`|16|  |`PROV_EC_ECNRA_FULL`|17|  |`PROV_DH_SCHANNEL`|18|  |`PROV_SPYRUS_LYNKS`|20|  |`PROV_RNG`|21|  |`PROV_INTEL_SEC`|22|  |`PROV_REPLACE_OWF`|23|  |`PROV_RSA_AES`|24|      如需有關預設提供者類型和行為的詳細資訊，請參閱 MSDN library 中的 Microsoft 密碼編譯 API (CAPI) 文件。"
  syntax:
    content: public int ProviderType;
    return:
      type: System.Int32
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Cryptography.CspParameters.#ctor
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters()
  nameWithType: CspParameters.CspParameters()
  fullName: System.Security.Cryptography.CspParameters.CspParameters()
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32)
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters(Int32)
  nameWithType: CspParameters.CspParameters(Int32)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String)
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters(Int32,String)
  nameWithType: CspParameters.CspParameters(Int32,String)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String)
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters(Int32,String,String)
  nameWithType: CspParameters.CspParameters(Int32,String,String)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String)
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.IntPtr)
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
  nameWithType: CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
- uid: System.Security.AccessControl.CryptoKeySecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: CryptoKeySecurity
  nameWithType: CryptoKeySecurity
  fullName: System.Security.AccessControl.CryptoKeySecurity
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.Security.SecureString)
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
  nameWithType: CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Security.Cryptography.CspParameters.CryptoKeySecurity
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CryptoKeySecurity
  nameWithType: CspParameters.CryptoKeySecurity
  fullName: System.Security.Cryptography.CspParameters.CryptoKeySecurity
- uid: System.Security.Cryptography.CspParameters.Flags
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: Flags
  nameWithType: CspParameters.Flags
  fullName: System.Security.Cryptography.CspParameters.Flags
- uid: System.Security.Cryptography.CspProviderFlags
  parent: System.Security.Cryptography
  isExternal: false
  name: CspProviderFlags
  nameWithType: CspProviderFlags
  fullName: System.Security.Cryptography.CspProviderFlags
- uid: System.Security.Cryptography.CspParameters.KeyContainerName
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: KeyContainerName
  nameWithType: CspParameters.KeyContainerName
  fullName: System.Security.Cryptography.CspParameters.KeyContainerName
- uid: System.Security.Cryptography.CspParameters.KeyNumber
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: KeyNumber
  nameWithType: CspParameters.KeyNumber
  fullName: System.Security.Cryptography.CspParameters.KeyNumber
- uid: System.Security.Cryptography.CspParameters.KeyPassword
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: KeyPassword
  nameWithType: CspParameters.KeyPassword
  fullName: System.Security.Cryptography.CspParameters.KeyPassword
- uid: System.Security.Cryptography.CspParameters.ParentWindowHandle
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: ParentWindowHandle
  nameWithType: CspParameters.ParentWindowHandle
  fullName: System.Security.Cryptography.CspParameters.ParentWindowHandle
- uid: System.Security.Cryptography.CspParameters.ProviderName
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: ProviderName
  nameWithType: CspParameters.ProviderName
  fullName: System.Security.Cryptography.CspParameters.ProviderName
- uid: System.Security.Cryptography.CspParameters.ProviderType
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: ProviderType
  nameWithType: CspParameters.ProviderType
  fullName: System.Security.Cryptography.CspParameters.ProviderType
- uid: System.Security.Cryptography.CspParameters.#ctor*
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters
  nameWithType: CspParameters.CspParameters
- uid: System.Security.Cryptography.CspParameters.CryptoKeySecurity*
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CryptoKeySecurity
  nameWithType: CspParameters.CryptoKeySecurity
- uid: System.Security.Cryptography.CspParameters.Flags*
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: Flags
  nameWithType: CspParameters.Flags
- uid: System.Security.Cryptography.CspParameters.KeyPassword*
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: KeyPassword
  nameWithType: CspParameters.KeyPassword
- uid: System.Security.Cryptography.CspParameters.ParentWindowHandle*
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: ParentWindowHandle
  nameWithType: CspParameters.ParentWindowHandle
