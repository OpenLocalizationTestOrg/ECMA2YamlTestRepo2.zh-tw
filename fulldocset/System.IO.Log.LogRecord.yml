### YamlMime:ManagedReference
items:
- uid: System.IO.Log.LogRecord
  id: LogRecord
  children:
  - System.IO.Log.LogRecord.#ctor
  - System.IO.Log.LogRecord.Data
  - System.IO.Log.LogRecord.Dispose
  - System.IO.Log.LogRecord.Previous
  - System.IO.Log.LogRecord.SequenceNumber
  - System.IO.Log.LogRecord.User
  langs:
  - csharp
  name: LogRecord
  nameWithType: LogRecord
  fullName: System.IO.Log.LogRecord
  type: Class
  summary: "表示已附加至順序的記錄檔記錄。"
  syntax:
    content: 'public abstract class LogRecord : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Log.LogRecord.#ctor
  id: '#ctor'
  parent: System.IO.Log.LogRecord
  langs:
  - csharp
  name: LogRecord()
  nameWithType: LogRecord.LogRecord()
  fullName: System.IO.Log.LogRecord.LogRecord()
  type: Constructor
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "初始化的新執行個體<xref href=&quot;System.IO.Log.LogRecord&quot;></xref>類別。"
  syntax:
    content: protected LogRecord ();
    parameters: []
  overload: System.IO.Log.LogRecord.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.LogRecord.Data
  id: Data
  parent: System.IO.Log.LogRecord
  langs:
  - csharp
  name: Data
  nameWithType: LogRecord.Data
  fullName: System.IO.Log.LogRecord.Data
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "當在衍生類別中覆寫時，取得包含記錄資料的資料流。"
  syntax:
    content: public abstract System.IO.Stream Data { get; }
    return:
      type: System.IO.Stream
      description: "包含記錄資料的資料流。"
  overload: System.IO.Log.LogRecord.Data*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.IO.Log.LogRecord&quot;> </xref>已經過處置。"
  platform:
  - net462
- uid: System.IO.Log.LogRecord.Dispose
  id: Dispose
  parent: System.IO.Log.LogRecord
  langs:
  - csharp
  name: Dispose()
  nameWithType: LogRecord.Dispose()
  fullName: System.IO.Log.LogRecord.Dispose()
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "所使用的資源全部釋出<xref href=&quot;System.IO.Log.LogRecord&quot;> </xref>。"
  remarks: "您應該呼叫這個方法，當您完成使用<xref:System.IO.Log.LogRecord>執行個體。</xref:System.IO.Log.LogRecord> Dispose 方法會使<xref:System.IO.Log.LogRecord>執行個體中無法使用的狀態。</xref:System.IO.Log.LogRecord> 在之後呼叫這個方法，您必須釋放所有參考<xref:System.IO.Log.LogRecord>執行個體，以便記憶體回收行程可以回收的記憶體，<xref:System.IO.Log.LogRecord>執行個體所佔用。</xref:System.IO.Log.LogRecord> </xref:System.IO.Log.LogRecord>      > [!NOTE] > 永遠呼叫 Dispose 之前您釋放最後一個參考<xref:System.IO.Log.LogRecord>執行個體。</xref:System.IO.Log.LogRecord> 否則，無法在記憶體回收行程呼叫之前釋放它正在使用的資源<xref:System.IO.Log.LogRecord>執行個體的`Finalize`方法。</xref:System.IO.Log.LogRecord>"
  syntax:
    content: public abstract void Dispose ();
    parameters: []
  overload: System.IO.Log.LogRecord.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.LogRecord.Previous
  id: Previous
  parent: System.IO.Log.LogRecord
  langs:
  - csharp
  name: Previous
  nameWithType: LogRecord.Previous
  fullName: System.IO.Log.LogRecord.Previous
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "當在衍生類別中覆寫時，取得上一筆記錄的序號。"
  remarks: "這個屬性的值是時序編號是提供做為`previousUndoRecord`中的參數<xref:System.IO.Log.IRecordSequence.Append%2A>方法。</xref:System.IO.Log.IRecordSequence.Append%2A> 在列舉中的使用，這個序號，記錄順序被視為不透明的。"
  syntax:
    content: public abstract System.IO.Log.SequenceNumber Previous { get; }
    return:
      type: System.IO.Log.SequenceNumber
      description: "上一筆記錄的序號。"
  overload: System.IO.Log.LogRecord.Previous*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.LogRecord.SequenceNumber
  id: SequenceNumber
  parent: System.IO.Log.LogRecord
  langs:
  - csharp
  name: SequenceNumber
  nameWithType: LogRecord.SequenceNumber
  fullName: System.IO.Log.LogRecord.SequenceNumber
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "當在衍生類別中覆寫時，取得這個記錄的序號。"
  syntax:
    content: public abstract System.IO.Log.SequenceNumber SequenceNumber { get; }
    return:
      type: System.IO.Log.SequenceNumber
      description: "這筆記錄的序號。"
  overload: System.IO.Log.LogRecord.SequenceNumber*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.LogRecord.User
  id: User
  parent: System.IO.Log.LogRecord
  langs:
  - csharp
  name: User
  nameWithType: LogRecord.User
  fullName: System.IO.Log.LogRecord.User
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "當在衍生類別中覆寫時，取得下一筆記錄的序號。"
  remarks: "這個屬性的值是時序編號是提供做為`nextUndoRecord`中的參數<xref:System.IO.Log.IRecordSequence.Append%2A>方法。</xref:System.IO.Log.IRecordSequence.Append%2A> 在列舉中的使用，這個序號，記錄順序被視為不透明的。"
  syntax:
    content: public abstract System.IO.Log.SequenceNumber User { get; }
    return:
      type: System.IO.Log.SequenceNumber
      description: "使用者指定的鏈結中下一個記錄序號。"
  overload: System.IO.Log.LogRecord.User*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.IO.Log.LogRecord.#ctor
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: LogRecord()
  nameWithType: LogRecord.LogRecord()
  fullName: System.IO.Log.LogRecord.LogRecord()
- uid: System.IO.Log.LogRecord.Data
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: Data
  nameWithType: LogRecord.Data
  fullName: System.IO.Log.LogRecord.Data
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO.Log.LogRecord.Dispose
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: Dispose()
  nameWithType: LogRecord.Dispose()
  fullName: System.IO.Log.LogRecord.Dispose()
- uid: System.IO.Log.LogRecord.Previous
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: Previous
  nameWithType: LogRecord.Previous
  fullName: System.IO.Log.LogRecord.Previous
- uid: System.IO.Log.SequenceNumber
  parent: System.IO.Log
  isExternal: false
  name: SequenceNumber
  nameWithType: SequenceNumber
  fullName: System.IO.Log.SequenceNumber
- uid: System.IO.Log.LogRecord.SequenceNumber
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: SequenceNumber
  nameWithType: LogRecord.SequenceNumber
  fullName: System.IO.Log.LogRecord.SequenceNumber
- uid: System.IO.Log.LogRecord.User
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: User
  nameWithType: LogRecord.User
  fullName: System.IO.Log.LogRecord.User
- uid: System.IO.Log.LogRecord.#ctor*
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: LogRecord
  nameWithType: LogRecord.LogRecord
- uid: System.IO.Log.LogRecord.Data*
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: Data
  nameWithType: LogRecord.Data
- uid: System.IO.Log.LogRecord.Dispose*
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: Dispose
  nameWithType: LogRecord.Dispose
- uid: System.IO.Log.LogRecord.Previous*
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: Previous
  nameWithType: LogRecord.Previous
- uid: System.IO.Log.LogRecord.SequenceNumber*
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: SequenceNumber
  nameWithType: LogRecord.SequenceNumber
- uid: System.IO.Log.LogRecord.User*
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: User
  nameWithType: LogRecord.User
