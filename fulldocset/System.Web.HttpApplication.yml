### YamlMime:ManagedReference
items:
- uid: System.Web.HttpApplication
  id: HttpApplication
  children:
  - System.Web.HttpApplication.#ctor
  - System.Web.HttpApplication.AcquireRequestState
  - System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.Application
  - System.Web.HttpApplication.AuthenticateRequest
  - System.Web.HttpApplication.AuthorizeRequest
  - System.Web.HttpApplication.BeginRequest
  - System.Web.HttpApplication.CompleteRequest
  - System.Web.HttpApplication.Context
  - System.Web.HttpApplication.Dispose
  - System.Web.HttpApplication.Disposed
  - System.Web.HttpApplication.EndRequest
  - System.Web.HttpApplication.Error
  - System.Web.HttpApplication.Events
  - System.Web.HttpApplication.GetOutputCacheProviderName(System.Web.HttpContext)
  - System.Web.HttpApplication.GetVaryByCustomString(System.Web.HttpContext,System.String)
  - System.Web.HttpApplication.Init
  - System.Web.HttpApplication.LogRequest
  - System.Web.HttpApplication.MapRequestHandler
  - System.Web.HttpApplication.Modules
  - System.Web.HttpApplication.PostAcquireRequestState
  - System.Web.HttpApplication.PostAuthenticateRequest
  - System.Web.HttpApplication.PostAuthorizeRequest
  - System.Web.HttpApplication.PostLogRequest
  - System.Web.HttpApplication.PostMapRequestHandler
  - System.Web.HttpApplication.PostReleaseRequestState
  - System.Web.HttpApplication.PostRequestHandlerExecute
  - System.Web.HttpApplication.PostResolveRequestCache
  - System.Web.HttpApplication.PostUpdateRequestCache
  - System.Web.HttpApplication.PreRequestHandlerExecute
  - System.Web.HttpApplication.PreSendRequestContent
  - System.Web.HttpApplication.PreSendRequestHeaders
  - System.Web.HttpApplication.RegisterModule(System.Type)
  - System.Web.HttpApplication.ReleaseRequestState
  - System.Web.HttpApplication.Request
  - System.Web.HttpApplication.RequestCompleted
  - System.Web.HttpApplication.ResolveRequestCache
  - System.Web.HttpApplication.Response
  - System.Web.HttpApplication.Server
  - System.Web.HttpApplication.Session
  - System.Web.HttpApplication.Site
  - System.Web.HttpApplication.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  - System.Web.HttpApplication.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)
  - System.Web.HttpApplication.System#Web#IHttpHandler#IsReusable
  - System.Web.HttpApplication.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)
  - System.Web.HttpApplication.UpdateRequestCache
  - System.Web.HttpApplication.User
  langs:
  - csharp
  name: HttpApplication
  nameWithType: HttpApplication
  fullName: System.Web.HttpApplication
  type: Class
  summary: "定義方法、 屬性和 ASP.NET 應用程式中的所有應用程式物件通用的事件。 這個類別是使用者在 Global.asax 檔案中所定義的應用程式的基底類別。"
  remarks: "HttpApplication 類別的執行個體中的 ASP.NET 基礎結構，不是由使用者直接建立。 HttpApplication 類別的一個執行個體用來處理在其存留期間的許多要求。 不過，只有一個要求可以處理一次。 因此，成員變數可以用來儲存每個要求的資料。       應用程式會引發事件，可以實作的自訂模組來處理<xref:System.Web.IHttpModule>介面，或是由 Global.asax 中所定義的事件處理常式程式碼檔案。</xref:System.Web.IHttpModule> 實作的自訂模組<xref:System.Web.IHttpModule>的 Bin 資料夾中的 DLL 或 App_Code 資料夾中，可以將介面。</xref:System.Web.IHttpModule>       HttpApplication.NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      > [!NOTE] > 時以整合模式執行 IIS 7.0，Bin 資料夾或 App_Code 資料夾中的自訂模組就會套用到要求管線中的所有要求。 Global.asax 檔案中的事件處理常式程式碼僅適用於會對應至 ASP.NET 處理常式的要求。       應用程式事件會依照下列順序引發︰ 1。  <xref:System.Web.HttpApplication.BeginRequest>2。</xref:System.Web.HttpApplication.BeginRequest>  <xref:System.Web.HttpApplication.AuthenticateRequest>3。</xref:System.Web.HttpApplication.AuthenticateRequest>  <xref:System.Web.HttpApplication.PostAuthenticateRequest>4。</xref:System.Web.HttpApplication.PostAuthenticateRequest>  <xref:System.Web.HttpApplication.AuthorizeRequest>5。</xref:System.Web.HttpApplication.AuthorizeRequest>  <xref:System.Web.HttpApplication.PostAuthorizeRequest>6。</xref:System.Web.HttpApplication.PostAuthorizeRequest>  <xref:System.Web.HttpApplication.ResolveRequestCache>7。</xref:System.Web.HttpApplication.ResolveRequestCache>  <xref:System.Web.HttpApplication.PostResolveRequestCache>之後<xref:System.Web.HttpApplication.PostResolveRequestCache>事件之前<xref:System.Web.HttpApplication.PostMapRequestHandler>建立事件，事件處理常式 （這是對應於要求 URL 的頁面）。</xref:System.Web.HttpApplication.PostMapRequestHandler> </xref:System.Web.HttpApplication.PostResolveRequestCache></xref:System.Web.HttpApplication.PostResolveRequestCache> 當伺服器執行 IIS 7.0 在整合式模式和最低.NET Framework 3.0 版，<xref:System.Web.HttpApplication.MapRequestHandler>就會引發事件。</xref:System.Web.HttpApplication.MapRequestHandler> 當伺服器以傳統模式或較早版本的 IIS 執行 IIS 7.0 時，無法處理此事件。      8.  <xref:System.Web.HttpApplication.PostMapRequestHandler>第 9。</xref:System.Web.HttpApplication.PostMapRequestHandler> <xref:System.Web.HttpApplication.AcquireRequestState>10。</xref:System.Web.HttpApplication.AcquireRequestState> <xref:System.Web.HttpApplication.PostAcquireRequestState>11。</xref:System.Web.HttpApplication.PostAcquireRequestState> <xref:System.Web.HttpApplication.PreRequestHandlerExecute>此事件處理常式會執行。</xref:System.Web.HttpApplication.PreRequestHandlerExecute>      12. <xref:System.Web.HttpApplication.PostRequestHandlerExecute>13。</xref:System.Web.HttpApplication.PostRequestHandlerExecute> <xref:System.Web.HttpApplication.ReleaseRequestState>14。</xref:System.Web.HttpApplication.ReleaseRequestState> <xref:System.Web.HttpApplication.PostReleaseRequestState>之後<xref:System.Web.HttpApplication.PostReleaseRequestState>就會引發事件，任何現有的回應篩選器會篩選輸出。</xref:System.Web.HttpApplication.PostReleaseRequestState></xref:System.Web.HttpApplication.PostReleaseRequestState>      15. <xref:System.Web.HttpApplication.UpdateRequestCache>16。</xref:System.Web.HttpApplication.UpdateRequestCache> <xref:System.Web.HttpApplication.PostUpdateRequestCache>17。</xref:System.Web.HttpApplication.PostUpdateRequestCache> <xref:System.Web.HttpApplication.LogRequest>.</xref:System.Web.HttpApplication.LogRequest>           此事件支援在 IIS 7.0 整合式模式和最低.NET Framework 3.0 18。 <xref:System.Web.HttpApplication.PostLogRequest>此事件是支援的 IIS 7.0 整合式模式和至少.NET Framework 3.0 19。</xref:System.Web.HttpApplication.PostLogRequest> <xref:System.Web.HttpApplication.EndRequest></xref:System.Web.HttpApplication.EndRequest>"
  example:
  - "The following two examples demonstrate how to use the HttpApplication class and its events. The first example demonstrates how to create a custom HTTP module and connect an event to it. The second example demonstrates how to modify the Web.config file.  \n  \n The following example demonstrates how to create a custom HTTP module and connect the <xref:System.Web.HttpApplication.AcquireRequestState> event to the HTTP module. HTTP modules intercept each request to Web application resources, thereby allowing you to filter client requests. Any HTTP module that subscribes to an HttpApplication event must implement the <xref:System.Web.IHttpModule> interface.  \n  \n [!code-cs[System.Web.HttpApplication1#1](~/add/codesnippet/csharp/t-system.web.httpapplica_1.cs)]\n [!code-vb[System.Web.HttpApplication1#1](~/add/codesnippet/visualbasic/t-system.web.httpapplica_1.vb)]  \n  \n Before an event in a custom HTTP module can occur, you must modify the configuration settings in the Web.config file to notify ASP.NET about the HTTP module. The following example shows the appropriate configuration setting in the `httpModules` section of the Web.config file. The following setting applies to IIS 7.0 Classic mode and to earlier versions of IIS.  \n  \n```c#  \n<configuration>  \n  <system.web>  \n    <httpModules>  \n      <add type=\"Samples.AspNet.CS.CustomHTTPModule\"  \n        name=\"CustomHttpModule\" />  \n      </httpModules>  \n  </system.web>  \n</configuration>  \n```  \n  \n```vb#  \n<configuration>  \n  <system.web>  \n    <httpModules>  \n      <add type=\"Samples.AspNet.VB.CustomHTTPModule\"  \n        name=\"CustomHttpModule\" />  \n      </httpModules>  \n  </system.web>  \n</configuration>  \n```  \n  \n The following setting applies to IIS 7.0 Integrated mode.  \n  \n```c#  \n<configuration>  \n  <system.webServer>  \n    <modules>  \n      <add type=\"Samples.AspNet.CS.CustomHTTPModule\"  \n        name=\"CustomHttpModule\" />  \n      </modules>  \n  </system.webServer>  \n</configuration>  \n```  \n  \n```vb#  \n<configuration>  \n  <system.webServer>  \n    <modules>  \n      <add type=\"Samples.AspNet.VB.CustomHTTPModule\"  \n        name=\"CustomHttpModule\" />  \n      <modules>  \n  </system.webServer>  \n</configuration>  \n```"
  syntax:
    content: >-
      [System.ComponentModel.ToolboxItem(false)]

      public class HttpApplication : IDisposable, System.ComponentModel.IComponent, System.Web.IHttpAsyncHandler
  inheritance:
  - System.Object
  implements:
  - System.ComponentModel.IComponent
  - System.IDisposable
  - System.Web.IHttpAsyncHandler
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.HttpApplication.#ctor
  id: '#ctor'
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: HttpApplication()
  nameWithType: HttpApplication.HttpApplication()
  fullName: System.Web.HttpApplication.HttpApplication()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "初始化的新執行個體<xref href=&quot;System.Web.HttpApplication&quot;></xref>類別。"
  syntax:
    content: public HttpApplication ();
    parameters: []
  overload: System.Web.HttpApplication.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AcquireRequestState
  id: AcquireRequestState
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AcquireRequestState
  nameWithType: HttpApplication.AcquireRequestState
  fullName: System.Web.HttpApplication.AcquireRequestState
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "發生於 ASP.NET 取得與目前的要求相關聯的目前狀態 （例如，工作階段狀態）。"
  remarks: "在建立事件處理常式之後，就會引發 AcquireRequestState 事件。       如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - For an example of handling the AcquireRequestState event, see the <xref:System.Web.HttpApplication> overview topic.
  syntax:
    content: public event EventHandler AcquireRequestState;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnAcquireRequestStateAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnAcquireRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnAcquireRequestStateAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "關聯的狀態設為將加入至非同步<xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnAcquireRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnAuthenticateRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnAuthenticateRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnAuthenticateRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "關聯的狀態設為將加入至非同步<xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnAuthenticateRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnAuthorizeRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnAuthorizeRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnAuthorizeRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "關聯的狀態設為將加入至非同步<xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnAuthorizeRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnBeginRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnBeginRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnBeginRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "關聯的狀態設為將加入至非同步<xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnBeginRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnEndRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.EndRequest&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.EndRequest&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnEndRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.EndRequest&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.EndRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnEndRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnEndRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.EndRequest&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.EndRequest&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnEndRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.EndRequest&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.EndRequest&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "關聯的狀態設為將加入至非同步<xref href=&quot;System.Web.HttpApplication.EndRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnEndRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnLogRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.LogRequest&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.LogRequest&quot;></xref>目前要求的事件處理常式。"
  remarks: ".NET Framework 3.5 版中引進 AddOnLogRequestAsync。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void AddOnLogRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.LogRequest&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.LogRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnLogRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.LogRequest&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.LogRequest&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnLogRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.LogRequest&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.LogRequest&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "關聯的狀態設為將加入至非同步<xref href=&quot;System.Web.HttpApplication.LogRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnLogRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;></xref>目前要求的事件處理常式。"
  remarks: ".NET Framework 3.5 版中引進 AddOnMapRequestHandlerAsync。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void AddOnMapRequestHandlerAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnMapRequestHandlerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnMapRequestHandlerAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "關聯的狀態設為將加入至非同步<xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnMapRequestHandlerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnPostAcquireRequestStateAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnPostAcquireRequestStateAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "關聯的狀態設為將加入至非同步<xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.PostAuthenticateRequest&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.PostAuthenticateRequest&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnPostAuthenticateRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.PostAuthenticateRequest&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.PostAuthenticateRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnPostAuthenticateRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "關聯的狀態設為將加入至非同步<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnPostAuthorizeRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;></xref>非同步集合<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnPostAuthorizeRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "關聯的狀態設為將加入至非同步<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;></xref>目前要求的事件處理常式。"
  remarks: ".NET Framework 3.5 版中引進 AddOnPostLogRequestAsync。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void AddOnPostLogRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostLogRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnPostLogRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "關聯的狀態設為將加入至非同步<xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostLogRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnPostMapRequestHandlerAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnPostMapRequestHandlerAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "關聯的狀態設為將加入至非同步<xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;></xref>集合。"
  overload: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnPostReleaseRequestStateAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnPostReleaseRequestStateAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "關聯的狀態設為將加入至非同步<xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnPostRequestHandlerExecuteAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnPostRequestHandlerExecuteAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "關聯的狀態設為將加入至非同步<xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnPostResolveRequestCacheAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnPostResolveRequestCacheAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "關聯的狀態設為將加入至非同步<xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnPostUpdateRequestCacheAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnPostUpdateRequestCacheAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> ，開始非同步處理的事件。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "關聯的狀態設為將加入至非同步<xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnPreRequestHandlerExecuteAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnPreRequestHandlerExecuteAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "關聯的狀態設為將加入至非同步<xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;></xref>集合。"
  overload: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnReleaseRequestStateAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnReleaseRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnReleaseRequestStateAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "關聯的狀態設為將加入至非同步<xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnReleaseRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;></xref>集合非同步事件處理常式<xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnResolveRequestCacheAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnResolveRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;></xref>集合非同步事件處理常式<xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnResolveRequestCacheAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "關聯的狀態設為將加入至非同步<xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnResolveRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnUpdateRequestCacheAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "將指定<xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;></xref>集合非同步事件<xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;></xref>目前要求的事件處理常式。"
  syntax:
    content: public void AddOnUpdateRequestCacheAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>開頭的非同步處理<xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref> ，結束非同步處理<xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "關聯的狀態設為將加入至非同步<xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Application
  id: Application
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Application
  nameWithType: HttpApplication.Application
  fullName: System.Web.HttpApplication.Application
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得目前應用程式的狀態。"
  remarks: "應用程式的目前狀態包含可用來儲存多個用戶端與多個 Web 要求的純量值和.NET Framework 物件的整個應用程式物件的索引鍵/值字典。"
  syntax:
    content: public System.Web.HttpApplicationState Application { get; }
    return:
      type: System.Web.HttpApplicationState
      description: "<xref href=&quot;System.Web.HttpApplicationState&quot;> </xref>目前的要求。"
  overload: System.Web.HttpApplication.Application*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AuthenticateRequest
  id: AuthenticateRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AuthenticateRequest
  nameWithType: HttpApplication.AuthenticateRequest
  fullName: System.Web.HttpApplication.AuthenticateRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "發生於安全性模組已建立之使用者的身分識別。"
  remarks: "AuthenticateRequest 事件通知設定的驗證機制已驗證目前的要求。 訂閱 AuthenticateRequest 事件，可確保要求會處理附加的模組或事件處理常式之前，先驗證過。       如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler AuthenticateRequest;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AuthorizeRequest
  id: AuthorizeRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AuthorizeRequest
  nameWithType: HttpApplication.AuthorizeRequest
  fullName: System.Web.HttpApplication.AuthorizeRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "當安全性模組已驗證使用者的授權時，就會發生。"
  remarks: "AuthorizeRequest 事件發出信號 ASP.NET 已授權目前的要求。 要求將會進行驗證和授權處理附加的模組或事件處理常式之前，可確保訂閱 AuthorizeRequest 事件。       如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler AuthorizeRequest;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.BeginRequest
  id: BeginRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: BeginRequest
  nameWithType: HttpApplication.BeginRequest
  fullName: System.Web.HttpApplication.BeginRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "當 ASP.NET 回應要求會產生執行的 HTTP 管線鏈結中的第一個事件。"
  remarks: "BeginRequest 事件發出信號建立任何指定的新要求。 這個事件永遠會引發，而且一定會在處理要求期間發生的第一個事件。       如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler BeginRequest;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.CompleteRequest
  id: CompleteRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: CompleteRequest()
  nameWithType: HttpApplication.CompleteRequest()
  fullName: System.Web.HttpApplication.CompleteRequest()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "會導致略過所有事件，並篩選 http 管線執行的鏈結，並且直接執行的 ASP.NET <xref href=&quot;System.Web.HttpApplication.EndRequest&quot;> </xref>事件。"
  syntax:
    content: public void CompleteRequest ();
    parameters: []
  overload: System.Web.HttpApplication.CompleteRequest*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Context
  id: Context
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Context
  nameWithType: HttpApplication.Context
  fullName: System.Web.HttpApplication.Context
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得目前要求的 HTTP 特定資訊。"
  syntax:
    content: public System.Web.HttpContext Context { get; }
    return:
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref>目前的要求。"
  overload: System.Web.HttpApplication.Context*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Dispose
  id: Dispose
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Dispose()
  nameWithType: HttpApplication.Dispose()
  fullName: System.Web.HttpApplication.Dispose()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "處置<xref href=&quot;System.Web.HttpApplication&quot;></xref>執行個體。"
  remarks: "<xref:System.Web.HttpApplication.Request%2A>， <xref:System.Web.HttpApplication.Response%2A>， <xref:System.Web.HttpApplication.Session%2A>，和<xref:System.Web.HttpApplication.Application%2A>屬性不是可供使用的 Dispose 方法執行時。</xref:System.Web.HttpApplication.Application%2A> </xref:System.Web.HttpApplication.Session%2A> </xref:System.Web.HttpApplication.Response%2A> </xref:System.Web.HttpApplication.Request%2A>       Dispose 方法呼叫<xref:System.Web.IHttpModule.Dispose%2A>上每個已註冊方法<xref:System.Web.Configuration.SystemWebSectionGroup.HttpModules%2A>中應用程式執行個體並引發<xref:System.Web.HttpApplication.Disposed>事件。</xref:System.Web.HttpApplication.Disposed> </xref:System.Web.Configuration.SystemWebSectionGroup.HttpModules%2A> </xref:System.Web.IHttpModule.Dispose%2A>"
  syntax:
    content: public virtual void Dispose ();
    parameters: []
  overload: System.Web.HttpApplication.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Disposed
  id: Disposed
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Disposed
  nameWithType: HttpApplication.Disposed
  fullName: System.Web.HttpApplication.Disposed
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "發生於應用程式已處置。"
  remarks: "當您建立已處置的委派時，必須識別處理事件的方法。 若要將事件與事件處理常式產生關聯，將加入處置的執行個體委派到事件。 除非您移除已處置的委派，否則每當事件發生時，會呼叫事件處理常式。       如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler Disposed;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.EndRequest
  id: EndRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: EndRequest
  nameWithType: HttpApplication.EndRequest
  fullName: System.Web.HttpApplication.EndRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "當 ASP.NET 回應要求會產生執行的 HTTP 管線鏈結中的最後一個事件。"
  remarks: "一律是 EndRequest 事件引發的時機<xref:System.Web.HttpApplication.CompleteRequest%2A>方法呼叫。</xref:System.Web.HttpApplication.CompleteRequest%2A>       如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler EndRequest;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Error
  id: Error
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Error
  nameWithType: HttpApplication.Error
  fullName: System.Web.HttpApplication.Error
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "發生於時擲回未處理的例外狀況。"
  remarks: "引發錯誤事件的例外狀況可由呼叫<xref:System.Web.HttpServerUtility.GetLastError%2A>方法。</xref:System.Web.HttpServerUtility.GetLastError%2A> 如果您的應用程式會產生自訂的錯誤輸出，隱藏呼叫 ASP.NET 所產生的預設錯誤訊息<xref:System.Web.HttpServerUtility.ClearError%2A>方法。</xref:System.Web.HttpServerUtility.ClearError%2A>      > [!NOTE] > 如果 Web 應用程式包含 XML Web 服務，則無法使用錯誤事件，這些服務的全域例外狀況處理。 XML Web 服務的 HTTP 處理常式會耗用任何會發生在 XML Web 服務，將它轉換成呼叫在發生錯誤之前的 SOAP 錯誤例外狀況。 若要處理 XML Web 服務例外狀況，建置要處理自訂全域例外狀況處理常式中的 Web 服務例外狀況的 SOAP 擴充功能。       如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler Error;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Events
  id: Events
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Events
  nameWithType: HttpApplication.Events
  fullName: System.Web.HttpApplication.Events
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得處理所有應用程式事件的處理常式委派的事件的清單。"
  syntax:
    content: protected System.ComponentModel.EventHandlerList Events { get; }
    return:
      type: System.ComponentModel.EventHandlerList
      description: "<xref href=&quot;System.ComponentModel.EventHandlerList&quot;> </xref> ，其中包含事件處理常式委派的名稱。"
  overload: System.Web.HttpApplication.Events*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.GetOutputCacheProviderName(System.Web.HttpContext)
  id: GetOutputCacheProviderName(System.Web.HttpContext)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: GetOutputCacheProviderName(HttpContext)
  nameWithType: HttpApplication.GetOutputCacheProviderName(HttpContext)
  fullName: System.Web.HttpApplication.GetOutputCacheProviderName(HttpContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得網站已設定的預設輸出快取提供者的名稱。"
  remarks: "您可以覆寫這個方法，並使用它來傳回已設定網站的任何輸出快取提供者的名稱。 ASP.NET 會擷取具名的提供者的參考，並使用它來儲存目前正在執行要求的輸出快取資料。       根據預設，在 ASP.NET 中，所有的 HTTP 回應呈現頁面和控制項，請使用記憶體中的輸出快取。 您可以變更預設輸出快取提供者指定不同的提供者名稱的 Web 應用程式用於`defaultProvider`。       此外，您可以選取個別控制項和個別要求不同的輸出快取提供者。 選擇不同的輸出快取提供者不同的 Web 使用者控制項的最簡單方式是利用新因此以宣告方式執行`providerName`屬性頁面或控制項指示詞，如下列範例所示︰```   <%@ OutputCache Duration=&quot;60&quot; VaryByParam=&quot;None&quot;        providerName=&quot;DiskCache&quot; %>   ```指定不同的輸出快取提供者 HTTP 要求，覆寫這個方法來以程式設計方式指定要用於特定的要求提供者的 Global.asax 檔中。 如需詳細資訊，請參閱[ASP.NET 快取概觀](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example shows how to programmatically specify the cache provider named `DiskCache` for any HTTP request that goes to the Advanced.aspx page.  \n  \n [Visual Basic]  \n  \n```  \nPublic Overloads Overrides Sub GetOutputCacheProviderName(ByVal context _  \n        As HttpContext) As String   \n    If context.Request.Path.EndsWith(\"Advanced.aspx\") Then   \n        Return \"DiskCache\"   \n    Else   \n        Return MyBase.GetOutputCacheProviderName(context)   \n    End If   \nEnd Sub  \n```  \n  \n```c#  \npublic override string GetOutputCacheProviderName(HttpContext context)  \n{  \n    if (context.Request.Path.EndsWith(\"Advanced.aspx\"))  \n        return \"DiskCache\";  \n    else  \n        return base.GetOutputCacheProviderName(context);  \n}  \n```"
  syntax:
    content: public virtual string GetOutputCacheProviderName (System.Web.HttpContext context);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref>提供用來服務 HTTP 要求的內建伺服器物件的參考。"
    return:
      type: System.String
      description: "預設提供者的名稱。"
  overload: System.Web.HttpApplication.GetOutputCacheProviderName*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>context</code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或為空字串。"
  platform:
  - net462
- uid: System.Web.HttpApplication.GetVaryByCustomString(System.Web.HttpContext,System.String)
  id: GetVaryByCustomString(System.Web.HttpContext,System.String)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: GetVaryByCustomString(HttpContext,String)
  nameWithType: HttpApplication.GetVaryByCustomString(HttpContext,String)
  fullName: System.Web.HttpApplication.GetVaryByCustomString(HttpContext,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "提供的應用程式層級實作<xref:System.Web.UI.PartialCachingAttribute.VaryByCustom*>屬性。</xref:System.Web.UI.PartialCachingAttribute.VaryByCustom*>"
  remarks: '您可以覆寫 GetVaryByCustomString 來新增計算自訂而有所不同-所依據的值是目前要求的方法。 實作必須呼叫基底類別的自訂無法辨識的值。 如需詳細資訊，請參閱[如何︰ 快取版本的頁面使用自訂字串](~/add/includes/ajax-current-ext-md.md)。'
  syntax:
    content: public virtual string GetVaryByCustomString (System.Web.HttpContext context, string custom);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref>物件，包含目前 Web 要求的相關資訊。"
    - id: custom
      type: System.String
      description: "指定的快取的回應用來回應目前要求的自訂字串。"
    return:
      type: System.String
      description: "如果值<code> custom </code>參數是<xref uid=&quot;langword_csharp_&quot;browser&quot;&quot; name=&quot;&quot;browser&quot;&quot; href=&quot;&quot;> </xref>，瀏覽器的<xref:System.Web.Configuration.HttpCapabilitiesBase.Type*>，否則<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Web.Configuration.HttpCapabilitiesBase.Type*>"
  overload: System.Web.HttpApplication.GetVaryByCustomString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Init
  id: Init
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Init()
  nameWithType: HttpApplication.Init()
  fullName: System.Web.HttpApplication.Init()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "已新增所有的事件處理常式模組之後，請執行自訂的初始化程式碼。"
  remarks: "在衍生類別中，您可以覆寫 Init 方法，加入自訂一次的初始化程式碼。"
  syntax:
    content: public virtual void Init ();
    parameters: []
  overload: System.Web.HttpApplication.Init*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.LogRequest
  id: LogRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: LogRequest
  nameWithType: HttpApplication.LogRequest
  fullName: System.Web.HttpApplication.LogRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "ASP.NET 執行目前要求的任何記錄之前發生。"
  remarks: "即使發生錯誤時，會引發 LogRequest 事件。 您可以提供 LogRequest 事件以提供要求的自訂記錄的事件處理常式。       如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。       .NET Framework 3.5 版中引進 LogRequest。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example demonstrates how to provide an event handler for the LogRequest event. The event handler also handles several other events. Therefore, the <xref:System.Web.HttpContext.CurrentNotification%2A> and <xref:System.Web.HttpContext.IsPostNotification%2A> properties are used to determine what code to run.  \n  \n [!code-cs[System.Web.HttpResponse.IsPostNotification#1](~/add/codesnippet/csharp/e-system.web.httpapplica_1.cs)]\n [!code-vb[System.Web.HttpResponse.IsPostNotification#1](~/add/codesnippet/visualbasic/e-system.web.httpapplica_1.vb)]"
  syntax:
    content: public event EventHandler LogRequest;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.MapRequestHandler
  id: MapRequestHandler
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: MapRequestHandler
  nameWithType: HttpApplication.MapRequestHandler
  fullName: System.Web.HttpApplication.MapRequestHandler
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "選取此處理常式以回應要求時，就會發生。"
  remarks: "MapRequestHandler 事件可由 ASP.NET 基礎結構來判斷目前要求的要求處理常式。 如需詳細資訊，請參閱[如何︰ 註冊 HTTP 處理常式](~/add/includes/ajax-current-ext-md.md)。       如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。       .NET Framework 3.5 版中引進 MapRequestHandler。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event EventHandler MapRequestHandler;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Modules
  id: Modules
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Modules
  nameWithType: HttpApplication.Modules
  fullName: System.Web.HttpApplication.Modules
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得目前的應用程式的模組集合。"
  syntax:
    content: public System.Web.HttpModuleCollection Modules { get; }
    return:
      type: System.Web.HttpModuleCollection
      description: "<xref href=&quot;System.Web.HttpModuleCollection&quot;> </xref> ，其中包含應用程式之模組的名稱。"
  overload: System.Web.HttpApplication.Modules*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostAcquireRequestState
  id: PostAcquireRequestState
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostAcquireRequestState
  nameWithType: HttpApplication.PostAcquireRequestState
  fullName: System.Web.HttpApplication.PostAcquireRequestState
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得與目前的要求相關聯的要求狀態 （例如，工作階段狀態） 時，就會發生。"
  remarks: "PostAcquireRequestState 引發之後<xref:System.Web.HttpApplication.AcquireRequestState>已發生事件。</xref:System.Web.HttpApplication.AcquireRequestState> 訂閱的功能<xref:System.Web.HttpApplication.AcquireRequestState>事件可以存取任何資料處理的 PostAcquireRequestState。</xref:System.Web.HttpApplication.AcquireRequestState>       如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler PostAcquireRequestState;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostAuthenticateRequest
  id: PostAuthenticateRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostAuthenticateRequest
  nameWithType: HttpApplication.PostAuthenticateRequest
  fullName: System.Web.HttpApplication.PostAuthenticateRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "發生於安全性模組已建立之使用者的身分識別。"
  remarks: "PostAuthenticateRequest 引發之後<xref:System.Web.HttpApplication.AuthenticateRequest>已發生事件。</xref:System.Web.HttpApplication.AuthenticateRequest> 訂閱 PostAuthenticateRequest 事件的功能可以存取由 PostAuthenticateRequest 處理任何資料。       如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler PostAuthenticateRequest;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostAuthorizeRequest
  id: PostAuthorizeRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostAuthorizeRequest
  nameWithType: HttpApplication.PostAuthorizeRequest
  fullName: System.Web.HttpApplication.PostAuthorizeRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "發生於目前要求的使用者已獲授權。"
  remarks: "PostAuthorizeRequest 事件發出信號 ASP.NET 已授權目前的要求。 驗證和授權要求的處理附加的模組或事件處理常式之前，可確保訂閱 PostAuthorizeRequest 事件。       如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler PostAuthorizeRequest;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostLogRequest
  id: PostLogRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostLogRequest
  nameWithType: HttpApplication.PostLogRequest
  fullName: System.Web.HttpApplication.PostLogRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "當 ASP.NET 已完成處理的所有事件處理常式時，就會發生<xref href=&quot;System.Web.HttpApplication.LogRequest&quot;></xref>事件。"
  remarks: "如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。       .NET Framework 3.5 版中引進 PostLogRequest。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event EventHandler PostLogRequest;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostMapRequestHandler
  id: PostMapRequestHandler
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostMapRequestHandler
  nameWithType: HttpApplication.PostMapRequestHandler
  fullName: System.Web.HttpApplication.PostMapRequestHandler
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "ASP.NET 已對應至適當的事件處理常式的目前的要求時發生。"
  remarks: '如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。'
  syntax:
    content: public event EventHandler PostMapRequestHandler;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostReleaseRequestState
  id: PostReleaseRequestState
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostReleaseRequestState
  nameWithType: HttpApplication.PostReleaseRequestState
  fullName: System.Web.HttpApplication.PostReleaseRequestState
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "當 ASP.NET 已完成執行事件處理常式和已儲存資料的要求狀態的所有要求。"
  remarks: '如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。'
  syntax:
    content: public event EventHandler PostReleaseRequestState;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostRequestHandlerExecute
  id: PostRequestHandlerExecute
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostRequestHandlerExecute
  nameWithType: HttpApplication.PostRequestHandlerExecute
  fullName: System.Web.HttpApplication.PostRequestHandlerExecute
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "執行 ASP.NET 事件處理常式 （例如，網頁或 XML Web service） 完成時發生。"
  remarks: '如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。'
  syntax:
    content: public event EventHandler PostRequestHandlerExecute;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostResolveRequestCache
  id: PostResolveRequestCache
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostResolveRequestCache
  nameWithType: HttpApplication.PostResolveRequestCache
  fullName: System.Web.HttpApplication.PostResolveRequestCache
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "ASP.NET 會略過目前的事件處理常式的執行，並允許服務要求從快取的快取模組時發生。"
  remarks: '如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。'
  syntax:
    content: public event EventHandler PostResolveRequestCache;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostUpdateRequestCache
  id: PostUpdateRequestCache
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostUpdateRequestCache
  nameWithType: HttpApplication.PostUpdateRequestCache
  fullName: System.Web.HttpApplication.PostUpdateRequestCache
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "發生於 ASP.NET 完成更新快取模組和儲存用來處理從快取的後續要求的回應。"
  remarks: "PostUpdateRequestCache 引發之後<xref:System.Web.HttpApplication.UpdateRequestCache>已發生事件。</xref:System.Web.HttpApplication.UpdateRequestCache> PostUpdateRequestCache 引發時，ASP.NET 已經完成處理的程式碼，並完成快取的內容。       如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler PostUpdateRequestCache;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PreRequestHandlerExecute
  id: PreRequestHandlerExecute
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PreRequestHandlerExecute
  nameWithType: HttpApplication.PreRequestHandlerExecute
  fullName: System.Web.HttpApplication.PreRequestHandlerExecute
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "ASP.NET 會開始執行 （例如，網頁或 XML Web 服務） 的事件處理常式之前發生。"
  remarks: '如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。'
  syntax:
    content: public event EventHandler PreRequestHandlerExecute;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PreSendRequestContent
  id: PreSendRequestContent
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PreSendRequestContent
  nameWithType: HttpApplication.PreSendRequestContent
  fullName: System.Web.HttpApplication.PreSendRequestContent
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "ASP.NET 會將內容傳送至用戶端之前發生。"
  remarks: "PreSendRequestContent 事件可能會發生多次。       如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler PreSendRequestContent;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PreSendRequestHeaders
  id: PreSendRequestHeaders
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PreSendRequestHeaders
  nameWithType: HttpApplication.PreSendRequestHeaders
  fullName: System.Web.HttpApplication.PreSendRequestHeaders
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "ASP.NET 會將 HTTP 標頭傳送給用戶端之前發生。"
  remarks: '如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。'
  syntax:
    content: public event EventHandler PreSendRequestHeaders;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.RegisterModule(System.Type)
  id: RegisterModule(System.Type)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: RegisterModule(Type)
  nameWithType: HttpApplication.RegisterModule(Type)
  fullName: System.Web.HttpApplication.RegisterModule(Type)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "註冊應用程式模組。"
  syntax:
    content: public static void RegisterModule (Type moduleType);
    parameters:
    - id: moduleType
      type: System.Type
      description: "此模組類型。"
  overload: System.Web.HttpApplication.RegisterModule*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.ReleaseRequestState
  id: ReleaseRequestState
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: ReleaseRequestState
  nameWithType: HttpApplication.ReleaseRequestState
  fullName: System.Web.HttpApplication.ReleaseRequestState
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "ASP.NET 結束執行時，所有要求的事件處理常式之後發生。 這個事件會導致儲存目前的狀態資料的模組狀態。"
  remarks: "ReleaseRequestState 事件引發時，在要求完成應用程式和 ASP.NET 接收信號，以要求狀態存放區。       如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler ReleaseRequestState;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Request
  id: Request
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Request
  nameWithType: HttpApplication.Request
  fullName: System.Web.HttpApplication.Request
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得目前要求的內建函式的要求物件。"
  syntax:
    content: public System.Web.HttpRequest Request { get; }
    return:
      type: System.Web.HttpRequest
      description: "<xref href=&quot;System.Web.HttpRequest&quot;> </xref>應用程式正在處理的物件。"
  overload: System.Web.HttpApplication.Request*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The <xref href=&quot;System.Web.HttpRequest&quot;></xref> object is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.HttpApplication.RequestCompleted
  id: RequestCompleted
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: RequestCompleted
  nameWithType: HttpApplication.RequestCompleted
  fullName: System.Web.HttpApplication.RequestCompleted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "與要求關聯之 managed 的物件都已釋放時，就會發生。"
  remarks: "事件會在所有呼叫 RequestCompleted 管理模組，而且已經呼叫 ASP.NET 管線中的處理常式。 它可讓模組以清除的資源在所有受管理的模組和處理常式尚未執行。 如果您需要特定的時間，明確處置要求期間建立的 managed 資源，請使用此事件。"
  syntax:
    content: public event EventHandler RequestCompleted;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.ResolveRequestCache
  id: ResolveRequestCache
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: ResolveRequestCache
  nameWithType: HttpApplication.ResolveRequestCache
  fullName: System.Web.HttpApplication.ResolveRequestCache
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "發生於 ASP.NET 完成授權事件，讓快取模組服務要求，然後從快取，略過此事件處理常式 （例如，網頁或 XML Web 服務） 的執行。"
  remarks: '如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。'
  syntax:
    content: public event EventHandler ResolveRequestCache;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Response
  id: Response
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Response
  nameWithType: HttpApplication.Response
  fullName: System.Web.HttpApplication.Response
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得目前要求的內建函式的回應物件。"
  syntax:
    content: public System.Web.HttpResponse Response { get; }
    return:
      type: System.Web.HttpResponse
      description: "<xref href=&quot;System.Web.HttpResponse&quot;> </xref>應用程式正在處理的物件。"
  overload: System.Web.HttpApplication.Response*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The <xref href=&quot;System.Web.HttpResponse&quot;></xref> object is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.HttpApplication.Server
  id: Server
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Server
  nameWithType: HttpApplication.Server
  fullName: System.Web.HttpApplication.Server
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得目前要求的內建伺服器物件。"
  syntax:
    content: public System.Web.HttpServerUtility Server { get; }
    return:
      type: System.Web.HttpServerUtility
      description: "<xref href=&quot;System.Web.HttpServerUtility&quot;> </xref>應用程式正在處理的物件。"
  overload: System.Web.HttpApplication.Server*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Session
  id: Session
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Session
  nameWithType: HttpApplication.Session
  fullName: System.Web.HttpApplication.Session
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得可存取工作階段資料的內建的工作階段物件。"
  syntax:
    content: public System.Web.SessionState.HttpSessionState Session { get; }
    return:
      type: System.Web.SessionState.HttpSessionState
      description: "<xref href=&quot;System.Web.SessionState.HttpSessionState&quot;> </xref>目前工作階段的物件。"
  overload: System.Web.HttpApplication.Session*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The <xref href=&quot;System.Web.SessionState.HttpSessionState&quot;></xref> object is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.HttpApplication.Site
  id: Site
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Site
  nameWithType: HttpApplication.Site
  fullName: System.Web.HttpApplication.Site
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得或設定的站台介面<xref href=&quot;System.ComponentModel.IComponent&quot;></xref>實作。"
  syntax:
    content: public System.ComponentModel.ISite Site { get; set; }
    return:
      type: System.ComponentModel.ISite
      description: "<xref href=&quot;System.ComponentModel.ISite&quot;> </xref>物件，可讓管理和子元件與通訊的容器。"
  overload: System.Web.HttpApplication.Site*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  id: System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  isEii: true
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  nameWithType: HttpApplication.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  fullName: System.Web.HttpApplication.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "起始非同步呼叫的 HTTP 事件處理常式。"
  syntax:
    content: IAsyncResult IHttpAsyncHandler.BeginProcessRequest (System.Web.HttpContext context, AsyncCallback cb, object extraData);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref>提供用來服務 HTTP 要求的內建伺服器物件的參考。"
    - id: cb
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>呼叫非同步方法呼叫完成時。</xref:System.AsyncCallback> 如果`cb`參數是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，不會呼叫的委派。"
    - id: extraData
      type: System.Object
      description: "處理要求所需的任何額外資料。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>，其中包含狀態資訊的程序。</xref:System.IAsyncResult>"
  overload: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#BeginProcessRequest*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)
  id: System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)
  isEii: true
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  nameWithType: HttpApplication.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  fullName: System.Web.HttpApplication.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "提供的非同步處理序<xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;></xref>程序完成時的方法。"
  remarks: "您可以使用 IHttpAsyncHandler.EndProcessRequest 方法來引發並在非同步處理期間遭到攔截任何例外狀況。"
  syntax:
    content: void IHttpAsyncHandler.EndProcessRequest (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>，其中包含狀態資訊的程序。</xref:System.IAsyncResult>"
  overload: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#EndProcessRequest*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.System#Web#IHttpHandler#IsReusable
  id: System#Web#IHttpHandler#IsReusable
  isEii: true
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: System.Web.IHttpHandler.IsReusable
  nameWithType: HttpApplication.System.Web.IHttpHandler.IsReusable
  fullName: System.Web.HttpApplication.System.Web.IHttpHandler.IsReusable
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，指出是否可以使用另一個要求<xref href=&quot;System.Web.IHttpHandler&quot;></xref>物件。"
  remarks: "若要明確地設定`IsReusable`屬性`true`或`false`，提供程式碼會覆寫`IsReusable`屬性存取子。"
  syntax:
    content: bool System.Web.IHttpHandler.IsReusable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Web.IHttpHandler&quot;></xref>物件是可重複使用，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpApplication.System#Web#IHttpHandler#IsReusable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)
  id: System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)
  isEii: true
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: System.Web.IHttpHandler.ProcessRequest(HttpContext)
  nameWithType: HttpApplication.System.Web.IHttpHandler.ProcessRequest(HttpContext)
  fullName: System.Web.HttpApplication.System.Web.IHttpHandler.ProcessRequest(HttpContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "處理 HTTP Web 要求啟用自訂 HTTP 處理常式實作<xref href=&quot;System.Web.IHttpHandler&quot;></xref>介面。"
  remarks: "繼承的類別<xref:System.Web.IHttpModule>和<xref:System.Web.IHttpHandler>介面會提供為參考<xref:System.Web.HttpContext>目前 HTTP 要求的物件。</xref:System.Web.HttpContext> </xref:System.Web.IHttpHandler> </xref:System.Web.IHttpModule> 此物件提供存取內建`Request`， `Response`，和`Server`要求的物件。"
  syntax:
    content: void IHttpHandler.ProcessRequest (System.Web.HttpContext context);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref>提供內建伺服器物件，可用來服務 HTTP 要求的參考。"
  overload: System.Web.HttpApplication.System#Web#IHttpHandler#ProcessRequest*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "在所有情況下。"
  platform:
  - net462
- uid: System.Web.HttpApplication.UpdateRequestCache
  id: UpdateRequestCache
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: UpdateRequestCache
  nameWithType: HttpApplication.UpdateRequestCache
  fullName: System.Web.HttpApplication.UpdateRequestCache
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "發生於 ASP.NET 可讓您完成執行的事件處理常式，讓快取模組儲存會用來處理從快取的後續要求的回應。"
  remarks: '如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。'
  syntax:
    content: public event EventHandler UpdateRequestCache;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.User
  id: User
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: User
  nameWithType: HttpApplication.User
  fullName: System.Web.HttpApplication.User
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得目前要求的內建使用者物件。"
  syntax:
    content: public System.Security.Principal.IPrincipal User { get; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "<xref:System.Security.Principal.IPrincipal>物件，表示目前已驗證或匿名使用者。</xref:System.Security.Principal.IPrincipal>"
  overload: System.Web.HttpApplication.User*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<xref:System.Security.Principal.IPrincipal>物件是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Security.Principal.IPrincipal>"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Configuration.Provider.ProviderException
  parent: System.Configuration.Provider
  isExternal: false
  name: ProviderException
  nameWithType: ProviderException
  fullName: System.Configuration.Provider.ProviderException
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.Web.HttpApplication.#ctor
  parent: System.Web.HttpApplication
  isExternal: false
  name: HttpApplication()
  nameWithType: HttpApplication.HttpApplication()
  fullName: System.Web.HttpApplication.HttpApplication()
- uid: System.Web.HttpApplication.AcquireRequestState
  parent: System.Web.HttpApplication
  isExternal: false
  name: AcquireRequestState
  nameWithType: HttpApplication.AcquireRequestState
  fullName: System.Web.HttpApplication.AcquireRequestState
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.BeginEventHandler
  parent: System.Web
  isExternal: false
  name: BeginEventHandler
  nameWithType: BeginEventHandler
  fullName: System.Web.BeginEventHandler
- uid: System.Web.EndEventHandler
  parent: System.Web
  isExternal: false
  name: EndEventHandler
  nameWithType: EndEventHandler
  fullName: System.Web.EndEventHandler
- uid: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnEndRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnEndRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnLogRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.Application
  parent: System.Web.HttpApplication
  isExternal: false
  name: Application
  nameWithType: HttpApplication.Application
  fullName: System.Web.HttpApplication.Application
- uid: System.Web.HttpApplicationState
  parent: System.Web
  isExternal: false
  name: HttpApplicationState
  nameWithType: HttpApplicationState
  fullName: System.Web.HttpApplicationState
- uid: System.Web.HttpApplication.AuthenticateRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: AuthenticateRequest
  nameWithType: HttpApplication.AuthenticateRequest
  fullName: System.Web.HttpApplication.AuthenticateRequest
- uid: System.Web.HttpApplication.AuthorizeRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: AuthorizeRequest
  nameWithType: HttpApplication.AuthorizeRequest
  fullName: System.Web.HttpApplication.AuthorizeRequest
- uid: System.Web.HttpApplication.BeginRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: BeginRequest
  nameWithType: HttpApplication.BeginRequest
  fullName: System.Web.HttpApplication.BeginRequest
- uid: System.Web.HttpApplication.CompleteRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: CompleteRequest()
  nameWithType: HttpApplication.CompleteRequest()
  fullName: System.Web.HttpApplication.CompleteRequest()
- uid: System.Web.HttpApplication.Context
  parent: System.Web.HttpApplication
  isExternal: false
  name: Context
  nameWithType: HttpApplication.Context
  fullName: System.Web.HttpApplication.Context
- uid: System.Web.HttpContext
  parent: System.Web
  isExternal: false
  name: HttpContext
  nameWithType: HttpContext
  fullName: System.Web.HttpContext
- uid: System.Web.HttpApplication.Dispose
  parent: System.Web.HttpApplication
  isExternal: false
  name: Dispose()
  nameWithType: HttpApplication.Dispose()
  fullName: System.Web.HttpApplication.Dispose()
- uid: System.Web.HttpApplication.Disposed
  parent: System.Web.HttpApplication
  isExternal: false
  name: Disposed
  nameWithType: HttpApplication.Disposed
  fullName: System.Web.HttpApplication.Disposed
- uid: System.Web.HttpApplication.EndRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: EndRequest
  nameWithType: HttpApplication.EndRequest
  fullName: System.Web.HttpApplication.EndRequest
- uid: System.Web.HttpApplication.Error
  parent: System.Web.HttpApplication
  isExternal: false
  name: Error
  nameWithType: HttpApplication.Error
  fullName: System.Web.HttpApplication.Error
- uid: System.Web.HttpApplication.Events
  parent: System.Web.HttpApplication
  isExternal: false
  name: Events
  nameWithType: HttpApplication.Events
  fullName: System.Web.HttpApplication.Events
- uid: System.ComponentModel.EventHandlerList
  parent: System.ComponentModel
  isExternal: false
  name: EventHandlerList
  nameWithType: EventHandlerList
  fullName: System.ComponentModel.EventHandlerList
- uid: System.Web.HttpApplication.GetOutputCacheProviderName(System.Web.HttpContext)
  parent: System.Web.HttpApplication
  isExternal: false
  name: GetOutputCacheProviderName(HttpContext)
  nameWithType: HttpApplication.GetOutputCacheProviderName(HttpContext)
  fullName: System.Web.HttpApplication.GetOutputCacheProviderName(HttpContext)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.HttpApplication.GetVaryByCustomString(System.Web.HttpContext,System.String)
  parent: System.Web.HttpApplication
  isExternal: false
  name: GetVaryByCustomString(HttpContext,String)
  nameWithType: HttpApplication.GetVaryByCustomString(HttpContext,String)
  fullName: System.Web.HttpApplication.GetVaryByCustomString(HttpContext,String)
- uid: System.Web.HttpApplication.Init
  parent: System.Web.HttpApplication
  isExternal: false
  name: Init()
  nameWithType: HttpApplication.Init()
  fullName: System.Web.HttpApplication.Init()
- uid: System.Web.HttpApplication.LogRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: LogRequest
  nameWithType: HttpApplication.LogRequest
  fullName: System.Web.HttpApplication.LogRequest
- uid: System.Web.HttpApplication.MapRequestHandler
  parent: System.Web.HttpApplication
  isExternal: false
  name: MapRequestHandler
  nameWithType: HttpApplication.MapRequestHandler
  fullName: System.Web.HttpApplication.MapRequestHandler
- uid: System.Web.HttpApplication.Modules
  parent: System.Web.HttpApplication
  isExternal: false
  name: Modules
  nameWithType: HttpApplication.Modules
  fullName: System.Web.HttpApplication.Modules
- uid: System.Web.HttpModuleCollection
  parent: System.Web
  isExternal: false
  name: HttpModuleCollection
  nameWithType: HttpModuleCollection
  fullName: System.Web.HttpModuleCollection
- uid: System.Web.HttpApplication.PostAcquireRequestState
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostAcquireRequestState
  nameWithType: HttpApplication.PostAcquireRequestState
  fullName: System.Web.HttpApplication.PostAcquireRequestState
- uid: System.Web.HttpApplication.PostAuthenticateRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostAuthenticateRequest
  nameWithType: HttpApplication.PostAuthenticateRequest
  fullName: System.Web.HttpApplication.PostAuthenticateRequest
- uid: System.Web.HttpApplication.PostAuthorizeRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostAuthorizeRequest
  nameWithType: HttpApplication.PostAuthorizeRequest
  fullName: System.Web.HttpApplication.PostAuthorizeRequest
- uid: System.Web.HttpApplication.PostLogRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostLogRequest
  nameWithType: HttpApplication.PostLogRequest
  fullName: System.Web.HttpApplication.PostLogRequest
- uid: System.Web.HttpApplication.PostMapRequestHandler
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostMapRequestHandler
  nameWithType: HttpApplication.PostMapRequestHandler
  fullName: System.Web.HttpApplication.PostMapRequestHandler
- uid: System.Web.HttpApplication.PostReleaseRequestState
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostReleaseRequestState
  nameWithType: HttpApplication.PostReleaseRequestState
  fullName: System.Web.HttpApplication.PostReleaseRequestState
- uid: System.Web.HttpApplication.PostRequestHandlerExecute
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostRequestHandlerExecute
  nameWithType: HttpApplication.PostRequestHandlerExecute
  fullName: System.Web.HttpApplication.PostRequestHandlerExecute
- uid: System.Web.HttpApplication.PostResolveRequestCache
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostResolveRequestCache
  nameWithType: HttpApplication.PostResolveRequestCache
  fullName: System.Web.HttpApplication.PostResolveRequestCache
- uid: System.Web.HttpApplication.PostUpdateRequestCache
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostUpdateRequestCache
  nameWithType: HttpApplication.PostUpdateRequestCache
  fullName: System.Web.HttpApplication.PostUpdateRequestCache
- uid: System.Web.HttpApplication.PreRequestHandlerExecute
  parent: System.Web.HttpApplication
  isExternal: false
  name: PreRequestHandlerExecute
  nameWithType: HttpApplication.PreRequestHandlerExecute
  fullName: System.Web.HttpApplication.PreRequestHandlerExecute
- uid: System.Web.HttpApplication.PreSendRequestContent
  parent: System.Web.HttpApplication
  isExternal: false
  name: PreSendRequestContent
  nameWithType: HttpApplication.PreSendRequestContent
  fullName: System.Web.HttpApplication.PreSendRequestContent
- uid: System.Web.HttpApplication.PreSendRequestHeaders
  parent: System.Web.HttpApplication
  isExternal: false
  name: PreSendRequestHeaders
  nameWithType: HttpApplication.PreSendRequestHeaders
  fullName: System.Web.HttpApplication.PreSendRequestHeaders
- uid: System.Web.HttpApplication.RegisterModule(System.Type)
  parent: System.Web.HttpApplication
  isExternal: false
  name: RegisterModule(Type)
  nameWithType: HttpApplication.RegisterModule(Type)
  fullName: System.Web.HttpApplication.RegisterModule(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.HttpApplication.ReleaseRequestState
  parent: System.Web.HttpApplication
  isExternal: false
  name: ReleaseRequestState
  nameWithType: HttpApplication.ReleaseRequestState
  fullName: System.Web.HttpApplication.ReleaseRequestState
- uid: System.Web.HttpApplication.Request
  parent: System.Web.HttpApplication
  isExternal: false
  name: Request
  nameWithType: HttpApplication.Request
  fullName: System.Web.HttpApplication.Request
- uid: System.Web.HttpRequest
  parent: System.Web
  isExternal: false
  name: HttpRequest
  nameWithType: HttpRequest
  fullName: System.Web.HttpRequest
- uid: System.Web.HttpApplication.RequestCompleted
  parent: System.Web.HttpApplication
  isExternal: false
  name: RequestCompleted
  nameWithType: HttpApplication.RequestCompleted
  fullName: System.Web.HttpApplication.RequestCompleted
- uid: System.Web.HttpApplication.ResolveRequestCache
  parent: System.Web.HttpApplication
  isExternal: false
  name: ResolveRequestCache
  nameWithType: HttpApplication.ResolveRequestCache
  fullName: System.Web.HttpApplication.ResolveRequestCache
- uid: System.Web.HttpApplication.Response
  parent: System.Web.HttpApplication
  isExternal: false
  name: Response
  nameWithType: HttpApplication.Response
  fullName: System.Web.HttpApplication.Response
- uid: System.Web.HttpResponse
  parent: System.Web
  isExternal: false
  name: HttpResponse
  nameWithType: HttpResponse
  fullName: System.Web.HttpResponse
- uid: System.Web.HttpApplication.Server
  parent: System.Web.HttpApplication
  isExternal: false
  name: Server
  nameWithType: HttpApplication.Server
  fullName: System.Web.HttpApplication.Server
- uid: System.Web.HttpServerUtility
  parent: System.Web
  isExternal: false
  name: HttpServerUtility
  nameWithType: HttpServerUtility
  fullName: System.Web.HttpServerUtility
- uid: System.Web.HttpApplication.Session
  parent: System.Web.HttpApplication
  isExternal: false
  name: Session
  nameWithType: HttpApplication.Session
  fullName: System.Web.HttpApplication.Session
- uid: System.Web.SessionState.HttpSessionState
  parent: System.Web.SessionState
  isExternal: false
  name: HttpSessionState
  nameWithType: HttpSessionState
  fullName: System.Web.SessionState.HttpSessionState
- uid: System.Web.HttpApplication.Site
  parent: System.Web.HttpApplication
  isExternal: false
  name: Site
  nameWithType: HttpApplication.Site
  fullName: System.Web.HttpApplication.Site
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  nameWithType: HttpApplication.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  fullName: System.Web.HttpApplication.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  nameWithType: HttpApplication.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  fullName: System.Web.HttpApplication.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
- uid: System.Web.HttpApplication.System#Web#IHttpHandler#IsReusable
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpHandler.IsReusable
  nameWithType: HttpApplication.System.Web.IHttpHandler.IsReusable
  fullName: System.Web.HttpApplication.System.Web.IHttpHandler.IsReusable
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.HttpApplication.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpHandler.ProcessRequest(HttpContext)
  nameWithType: HttpApplication.System.Web.IHttpHandler.ProcessRequest(HttpContext)
  fullName: System.Web.HttpApplication.System.Web.IHttpHandler.ProcessRequest(HttpContext)
- uid: System.Web.HttpApplication.UpdateRequestCache
  parent: System.Web.HttpApplication
  isExternal: false
  name: UpdateRequestCache
  nameWithType: HttpApplication.UpdateRequestCache
  fullName: System.Web.HttpApplication.UpdateRequestCache
- uid: System.Web.HttpApplication.User
  parent: System.Web.HttpApplication
  isExternal: false
  name: User
  nameWithType: HttpApplication.User
  fullName: System.Web.HttpApplication.User
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Web.HttpApplication.#ctor*
  parent: System.Web.HttpApplication
  isExternal: false
  name: HttpApplication
  nameWithType: HttpApplication.HttpApplication
- uid: System.Web.HttpApplication.AddOnAcquireRequestStateAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAcquireRequestStateAsync
  nameWithType: HttpApplication.AddOnAcquireRequestStateAsync
- uid: System.Web.HttpApplication.AddOnAuthenticateRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAuthenticateRequestAsync
  nameWithType: HttpApplication.AddOnAuthenticateRequestAsync
- uid: System.Web.HttpApplication.AddOnAuthorizeRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAuthorizeRequestAsync
  nameWithType: HttpApplication.AddOnAuthorizeRequestAsync
- uid: System.Web.HttpApplication.AddOnBeginRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnBeginRequestAsync
  nameWithType: HttpApplication.AddOnBeginRequestAsync
- uid: System.Web.HttpApplication.AddOnEndRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnEndRequestAsync
  nameWithType: HttpApplication.AddOnEndRequestAsync
- uid: System.Web.HttpApplication.AddOnLogRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnLogRequestAsync
  nameWithType: HttpApplication.AddOnLogRequestAsync
- uid: System.Web.HttpApplication.AddOnMapRequestHandlerAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnMapRequestHandlerAsync
  nameWithType: HttpApplication.AddOnMapRequestHandlerAsync
- uid: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAcquireRequestStateAsync
  nameWithType: HttpApplication.AddOnPostAcquireRequestStateAsync
- uid: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAuthenticateRequestAsync
  nameWithType: HttpApplication.AddOnPostAuthenticateRequestAsync
- uid: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAuthorizeRequestAsync
  nameWithType: HttpApplication.AddOnPostAuthorizeRequestAsync
- uid: System.Web.HttpApplication.AddOnPostLogRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostLogRequestAsync
  nameWithType: HttpApplication.AddOnPostLogRequestAsync
- uid: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostMapRequestHandlerAsync
  nameWithType: HttpApplication.AddOnPostMapRequestHandlerAsync
- uid: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostReleaseRequestStateAsync
  nameWithType: HttpApplication.AddOnPostReleaseRequestStateAsync
- uid: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostRequestHandlerExecuteAsync
  nameWithType: HttpApplication.AddOnPostRequestHandlerExecuteAsync
- uid: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostResolveRequestCacheAsync
  nameWithType: HttpApplication.AddOnPostResolveRequestCacheAsync
- uid: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostUpdateRequestCacheAsync
  nameWithType: HttpApplication.AddOnPostUpdateRequestCacheAsync
- uid: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPreRequestHandlerExecuteAsync
  nameWithType: HttpApplication.AddOnPreRequestHandlerExecuteAsync
- uid: System.Web.HttpApplication.AddOnReleaseRequestStateAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnReleaseRequestStateAsync
  nameWithType: HttpApplication.AddOnReleaseRequestStateAsync
- uid: System.Web.HttpApplication.AddOnResolveRequestCacheAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnResolveRequestCacheAsync
  nameWithType: HttpApplication.AddOnResolveRequestCacheAsync
- uid: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnUpdateRequestCacheAsync
  nameWithType: HttpApplication.AddOnUpdateRequestCacheAsync
- uid: System.Web.HttpApplication.Application*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Application
  nameWithType: HttpApplication.Application
- uid: System.Web.HttpApplication.CompleteRequest*
  parent: System.Web.HttpApplication
  isExternal: false
  name: CompleteRequest
  nameWithType: HttpApplication.CompleteRequest
- uid: System.Web.HttpApplication.Context*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Context
  nameWithType: HttpApplication.Context
- uid: System.Web.HttpApplication.Dispose*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Dispose
  nameWithType: HttpApplication.Dispose
- uid: System.Web.HttpApplication.Events*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Events
  nameWithType: HttpApplication.Events
- uid: System.Web.HttpApplication.GetOutputCacheProviderName*
  parent: System.Web.HttpApplication
  isExternal: false
  name: GetOutputCacheProviderName
  nameWithType: HttpApplication.GetOutputCacheProviderName
- uid: System.Web.HttpApplication.GetVaryByCustomString*
  parent: System.Web.HttpApplication
  isExternal: false
  name: GetVaryByCustomString
  nameWithType: HttpApplication.GetVaryByCustomString
- uid: System.Web.HttpApplication.Init*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Init
  nameWithType: HttpApplication.Init
- uid: System.Web.HttpApplication.Modules*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Modules
  nameWithType: HttpApplication.Modules
- uid: System.Web.HttpApplication.RegisterModule*
  parent: System.Web.HttpApplication
  isExternal: false
  name: RegisterModule
  nameWithType: HttpApplication.RegisterModule
- uid: System.Web.HttpApplication.Request*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Request
  nameWithType: HttpApplication.Request
- uid: System.Web.HttpApplication.Response*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Response
  nameWithType: HttpApplication.Response
- uid: System.Web.HttpApplication.Server*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Server
  nameWithType: HttpApplication.Server
- uid: System.Web.HttpApplication.Session*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Session
  nameWithType: HttpApplication.Session
- uid: System.Web.HttpApplication.Site*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Site
  nameWithType: HttpApplication.Site
- uid: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#BeginProcessRequest*
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpAsyncHandler.BeginProcessRequest
  nameWithType: HttpApplication.System.Web.IHttpAsyncHandler.BeginProcessRequest
- uid: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#EndProcessRequest*
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpAsyncHandler.EndProcessRequest
  nameWithType: HttpApplication.System.Web.IHttpAsyncHandler.EndProcessRequest
- uid: System.Web.HttpApplication.System#Web#IHttpHandler#IsReusable*
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpHandler.IsReusable
  nameWithType: HttpApplication.System.Web.IHttpHandler.IsReusable
- uid: System.Web.HttpApplication.System#Web#IHttpHandler#ProcessRequest*
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpHandler.ProcessRequest
  nameWithType: HttpApplication.System.Web.IHttpHandler.ProcessRequest
- uid: System.Web.HttpApplication.User*
  parent: System.Web.HttpApplication
  isExternal: false
  name: User
  nameWithType: HttpApplication.User
