### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  id: LinqDataSourceInsertEventArgs
  children:
  - System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Object)
  - System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)
  - System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception
  - System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled
  - System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject
  langs:
  - csharp
  name: LinqDataSourceInsertEventArgs
  nameWithType: LinqDataSourceInsertEventArgs
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  type: Class
  summary: "提供資料給<xref href=&quot;System.Web.UI.WebControls.LinqDataSource.Inserting&quot;></xref>事件。"
  remarks: "LinqDataSourceInsertEventArgs 物件傳遞至任何事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>事件。</xref:System.Web.UI.WebControls.LinqDataSource.Inserting> <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A>屬性包含要插入的資料。</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A>       您可以使用 LinqDataSourceInsertEventArgs 物件來檢查資料來源中執行插入作業之前的資料。 您可以再驗證資料、 檢查驗證錯誤，從 資料類別，或變更的值更新之前。 您也可以取消插入作業。       如果之前它會插入資料的<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A>屬性包含的<xref:System.Web.UI.WebControls.LinqDataSourceValidationException>類別</xref:System.Web.UI.WebControls.LinqDataSourceValidationException>執行個體</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A>物件，表示資料來源擲回驗證例外狀況 您可以擷取到的所有驗證例外狀況<xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> 如果沒有驗證擲回例外狀況，<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A>屬性包含`null`。</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A> 如果您處理驗證例外狀況，而且不想要重新擲回的例外狀況，設定<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled%2A>屬性`true`。</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled%2A>"
  example:
  - "The following example shows a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. The object from the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property is cast to a type named `Product`. The `DateModified` property of the `Product` object is set to the current date and time.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_258_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_258_1.vb)]  \n  \n The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \n  \n```vb#  \nProtected Sub LinqDataSource_Inserting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceInsertEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message + \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Inserting(object sender,   \n        LinqDataSourceInsertEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```"
  syntax:
    content: 'public class LinqDataSourceInsertEventArgs : System.ComponentModel.CancelEventArgs'
  inheritance:
  - System.ComponentModel.CancelEventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  langs:
  - csharp
  name: LinqDataSourceInsertEventArgs(Object)
  nameWithType: LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(Object)
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(Object)
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "初始化的新執行個體<xref href=&quot;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&quot;></xref>類別。"
  syntax:
    content: public LinqDataSourceInsertEventArgs (object newObject);
    parameters:
    - id: newObject
      type: System.Object
      description: "物件，包含要插入的資料。"
  overload: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)
  id: '#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)'
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  langs:
  - csharp
  name: LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)
  nameWithType: LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "初始化的新執行個體<xref href=&quot;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&quot;></xref>類別，並指定提供的例外狀況。"
  syntax:
    content: public LinqDataSourceInsertEventArgs (System.Web.UI.WebControls.LinqDataSourceValidationException exception);
    parameters:
    - id: exception
      type: System.Web.UI.WebControls.LinqDataSourceValidationException
      description: "正在驗證要插入的資料時所發生的例外狀況。"
  overload: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception
  id: Exception
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  langs:
  - csharp
  name: Exception
  nameWithType: LinqDataSourceInsertEventArgs.Exception
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得驗證資料之前插入作業期間擲回的例外狀況。"
  remarks: "若執行插入作業之前擲回驗證例外狀況，例外狀況會儲存在例外狀況屬性。 中的處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>事件，您可以擷取透過屬性將例外狀況的例外狀況。</xref:System.Web.UI.WebControls.LinqDataSource.Inserting>"
  example:
  - "The following example shows a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \n  \n```vb#  \nProtected Sub LinqDataSource_Inserting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceInsertEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message + \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Inserting(object sender,   \n        LinqDataSourceInsertEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```"
  syntax:
    content: public System.Web.UI.WebControls.LinqDataSourceValidationException Exception { get; }
    return:
      type: System.Web.UI.WebControls.LinqDataSourceValidationException
      description: "如果發生錯誤。 例外狀況否則， <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled
  id: ExceptionHandled
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  langs:
  - csharp
  name: ExceptionHandled
  nameWithType: LinqDataSourceInsertEventArgs.ExceptionHandled
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，這個值，指出是否已處理的例外狀況，而且，它應該不會擲回一次。"
  remarks: "您可以建立事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>事件，以檢查所插入作業之前發生驗證例外狀況。</xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 如果您處理的例外狀況，而不想要再次擲回，ExceptionHandled 屬性設定為`true`。 如果您未設定 ExceptionHandled 屬性`true`，例外狀況會傳播至呼叫堆疊中下一個事件處理常式。"
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \n  \n```vb#  \nProtected Sub LinqDataSource_Inserting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceInsertEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message + \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Inserting(object sender,   \n        LinqDataSourceInsertEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```"
  syntax:
    content: public bool ExceptionHandled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已處理的例外狀況。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject
  id: NewObject
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  langs:
  - csharp
  name: NewObject
  nameWithType: LinqDataSourceInsertEventArgs.NewObject
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得包含插入之資料的物件。"
  remarks: "NewObject 屬性包含的資料，就會插入到資料來源。 建立的處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>事件並擷取 NewObject 屬性，以驗證資料變更的資料，或執行資料作業之前，取消插入作業。</xref:System.Web.UI.WebControls.LinqDataSource.Inserting>       NewObject 屬性傳回型別<xref:System.Object>.</xref:System.Object>的物件 您可以將此物件代表的資料類別的型別轉型。"
  example:
  - "The following example shows a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. The object from the NewObject property is cast to a type named `Product`. The `DateModified` property of the `Product` object is set to the current date and time.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_170_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_170_1.vb)]"
  syntax:
    content: public object NewObject { get; }
    return:
      type: System.Object
      description: "物件，包含要插入的資料。"
  overload: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.CancelEventArgs
  isExternal: false
  name: System.ComponentModel.CancelEventArgs
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Object)
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: LinqDataSourceInsertEventArgs(Object)
  nameWithType: LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(Object)
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)
  nameWithType: LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException
  parent: System.Web.UI.WebControls
  isExternal: false
  name: LinqDataSourceValidationException
  nameWithType: LinqDataSourceValidationException
  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: Exception
  nameWithType: LinqDataSourceInsertEventArgs.Exception
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: ExceptionHandled
  nameWithType: LinqDataSourceInsertEventArgs.ExceptionHandled
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: NewObject
  nameWithType: LinqDataSourceInsertEventArgs.NewObject
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor*
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: LinqDataSourceInsertEventArgs
  nameWithType: LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception*
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: Exception
  nameWithType: LinqDataSourceInsertEventArgs.Exception
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled*
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: ExceptionHandled
  nameWithType: LinqDataSourceInsertEventArgs.ExceptionHandled
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject*
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: NewObject
  nameWithType: LinqDataSourceInsertEventArgs.NewObject
