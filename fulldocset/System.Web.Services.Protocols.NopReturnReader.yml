### YamlMime:ManagedReference
items:
- uid: System.Web.Services.Protocols.NopReturnReader
  id: NopReturnReader
  children:
  - System.Web.Services.Protocols.NopReturnReader.#ctor
  - System.Web.Services.Protocols.NopReturnReader.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)
  - System.Web.Services.Protocols.NopReturnReader.Initialize(System.Object)
  - System.Web.Services.Protocols.NopReturnReader.Read(System.Net.WebResponse,System.IO.Stream)
  langs:
  - csharp
  name: NopReturnReader
  nameWithType: NopReturnReader
  fullName: System.Web.Services.Protocols.NopReturnReader
  type: Class
  summary: "Web 服務用戶端使用 HTTP 實作，但不使用 SOAP，可做為非做讀取器的內送回應會傳回值。"
  remarks: "NopReturnReader 類別和其他類別<xref:System.Web.Services.Protocols>命名空間支援.NET Framework 實作 Web 服務透過 HTTP GET 和 HTTP POST 作業。</xref:System.Web.Services.Protocols> Web 服務寫入器和讀取序列化和還原序列化，分別參數或 Web 方法的傳回物件之間的 HTTP 要求或回應資料流。 Web 服務寫入器和讀取器使用 HTTP 傳輸，但不會交換使用 SOAP 標準的訊息。       NopReturnReader 類別提供的非讀取實作之介面的抽象類別<xref:System.Web.Services.Protocols.MimeReturnReader>.</xref:System.Web.Services.Protocols.MimeReturnReader>       您通常會不需要使用 NopReturnReader 類別。 相反地，當 Wsdl.exe 工具產生用戶端 proxy 程式碼，根據 HTTP GET 或 HTTP POST 的實作，它會套用<xref:System.Web.Services.Protocols.HttpMethodAttribute>至每個 Web 方法，而且依預設，設定該屬性的<xref:System.Web.Services.Protocols.HttpMethodAttribute.ReturnFormatter%2A>屬性，<xref:System.Web.Services.Protocols.XmlReturnReader>另一個類別衍生自<xref:System.Web.Services.Protocols.MimeReturnReader>.</xref:System.Web.Services.Protocols.MimeReturnReader> </xref:System.Web.Services.Protocols.XmlReturnReader> </xref:System.Web.Services.Protocols.HttpMethodAttribute.ReturnFormatter%2A> </xref:System.Web.Services.Protocols.HttpMethodAttribute> 如果因無法判斷值 Wsdl.exe NopReturnReader 来設定的屬性。"
  syntax:
    content: 'public class NopReturnReader : System.Web.Services.Protocols.MimeReturnReader'
  inheritance:
  - System.Object
  - System.Web.Services.Protocols.MimeFormatter
  - System.Web.Services.Protocols.MimeReturnReader
  implements: []
  inheritedMembers:
  - System.Web.Services.Protocols.MimeFormatter.CreateInstance(System.Type,System.Object)
  - System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Type,System.Web.Services.Protocols.LogicalMethodInfo)
  - System.Web.Services.Protocols.MimeFormatter.GetInitializers(System.Type,System.Web.Services.Protocols.LogicalMethodInfo[])
  - System.Web.Services.Protocols.MimeFormatter.GetInitializers(System.Web.Services.Protocols.LogicalMethodInfo[])
  platform:
  - net462
- uid: System.Web.Services.Protocols.NopReturnReader.#ctor
  id: '#ctor'
  parent: System.Web.Services.Protocols.NopReturnReader
  langs:
  - csharp
  name: NopReturnReader()
  nameWithType: NopReturnReader.NopReturnReader()
  fullName: System.Web.Services.Protocols.NopReturnReader.NopReturnReader()
  type: Constructor
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "初始化的新執行個體<xref href=&quot;System.Web.Services.Protocols.NopReturnReader&quot;></xref>類別。"
  syntax:
    content: public NopReturnReader ();
    parameters: []
  overload: System.Web.Services.Protocols.NopReturnReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.NopReturnReader.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)
  id: GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)
  parent: System.Web.Services.Protocols.NopReturnReader
  langs:
  - csharp
  name: GetInitializer(LogicalMethodInfo)
  nameWithType: NopReturnReader.GetInitializer(LogicalMethodInfo)
  fullName: System.Web.Services.Protocols.NopReturnReader.GetInitializer(LogicalMethodInfo)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "傳回指定之方法的初始設定式。"
  remarks: "初始設定式會當做參數傳遞的物件<xref:System.Web.Services.Protocols.NopReturnReader.Initialize%2A>方法。</xref:System.Web.Services.Protocols.NopReturnReader.Initialize%2A> 如<xref:System.Web.Services.Protocols.NopReturnReader>類別初始設定式是關鍵字所參考的執行個體`this`。</xref:System.Web.Services.Protocols.NopReturnReader>"
  syntax:
    content: public override object GetInitializer (System.Web.Services.Protocols.LogicalMethodInfo methodInfo);
    parameters:
    - id: methodInfo
      type: System.Web.Services.Protocols.LogicalMethodInfo
      description: "A <xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref>可指定取得初始設定式的 Web 方法。"
    return:
      type: System.Object
      description: "指定方法的初始設定式。"
  overload: System.Web.Services.Protocols.NopReturnReader.GetInitializer*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.NopReturnReader.Initialize(System.Object)
  id: Initialize(System.Object)
  parent: System.Web.Services.Protocols.NopReturnReader
  langs:
  - csharp
  name: Initialize(Object)
  nameWithType: NopReturnReader.Initialize(Object)
  fullName: System.Web.Services.Protocols.NopReturnReader.Initialize(Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "初始化執行個體。"
  remarks: "Initialize 方法沒有任何作用。 它會在處理回應時叫用。 輸入的參數、 `initializer`，另一個執行個體在用戶端初始化期間取得的類別。"
  syntax:
    content: public override void Initialize (object initializer);
    parameters:
    - id: initializer
      type: System.Object
      description: "另一個執行個體<xref href=&quot;System.Web.Services.Protocols.NopReturnReader&quot;></xref>類別，在其上的<xref:System.Web.Services.Protocols.NopReturnReader.GetInitializer*>之前已呼叫方法。</xref:System.Web.Services.Protocols.NopReturnReader.GetInitializer*>"
  overload: System.Web.Services.Protocols.NopReturnReader.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.NopReturnReader.Read(System.Net.WebResponse,System.IO.Stream)
  id: Read(System.Net.WebResponse,System.IO.Stream)
  parent: System.Web.Services.Protocols.NopReturnReader
  langs:
  - csharp
  name: Read(WebResponse,Stream)
  nameWithType: NopReturnReader.Read(WebResponse,Stream)
  fullName: System.Web.Services.Protocols.NopReturnReader.Read(WebResponse,Stream)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "傳回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>而非還原序列化成 Web 方法的 HTTP 回應資料流的傳回值。"
  remarks: "<xref:System.Web.Services.Protocols.NopReturnReader>類別的實作<xref:System.Web.Services.Protocols.MimeReturnReader.Read%2A>方法不會沒有讀取。</xref:System.Web.Services.Protocols.MimeReturnReader.Read%2A> </xref:System.Web.Services.Protocols.NopReturnReader> 而是傳回`null`。 它也會關閉回應資料流。"
  syntax:
    content: public override object Read (System.Net.WebResponse response, System.IO.Stream responseStream);
    parameters:
    - id: response
      type: System.Net.WebResponse
      description: "A<xref:System.Net.WebResponse>物件，其中包含作業的輸出訊息。</xref:System.Net.WebResponse>"
    - id: responseStream
      type: System.IO.Stream
      description: "A <xref:System.IO.Stream>HTTP 回應的主體表示其內容由`response`參數。</xref:System.IO.Stream>"
    return:
      type: System.Object
      description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Services.Protocols.NopReturnReader.Read*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.Services.Protocols.MimeReturnReader
  isExternal: false
  name: System.Web.Services.Protocols.MimeReturnReader
- uid: System.Web.Services.Protocols.NopReturnReader.#ctor
  parent: System.Web.Services.Protocols.NopReturnReader
  isExternal: false
  name: NopReturnReader()
  nameWithType: NopReturnReader.NopReturnReader()
  fullName: System.Web.Services.Protocols.NopReturnReader.NopReturnReader()
- uid: System.Web.Services.Protocols.NopReturnReader.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)
  parent: System.Web.Services.Protocols.NopReturnReader
  isExternal: false
  name: GetInitializer(LogicalMethodInfo)
  nameWithType: NopReturnReader.GetInitializer(LogicalMethodInfo)
  fullName: System.Web.Services.Protocols.NopReturnReader.GetInitializer(LogicalMethodInfo)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.Services.Protocols.LogicalMethodInfo
  parent: System.Web.Services.Protocols
  isExternal: false
  name: LogicalMethodInfo
  nameWithType: LogicalMethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo
- uid: System.Web.Services.Protocols.NopReturnReader.Initialize(System.Object)
  parent: System.Web.Services.Protocols.NopReturnReader
  isExternal: false
  name: Initialize(Object)
  nameWithType: NopReturnReader.Initialize(Object)
  fullName: System.Web.Services.Protocols.NopReturnReader.Initialize(Object)
- uid: System.Web.Services.Protocols.NopReturnReader.Read(System.Net.WebResponse,System.IO.Stream)
  parent: System.Web.Services.Protocols.NopReturnReader
  isExternal: false
  name: Read(WebResponse,Stream)
  nameWithType: NopReturnReader.Read(WebResponse,Stream)
  fullName: System.Web.Services.Protocols.NopReturnReader.Read(WebResponse,Stream)
- uid: System.Net.WebResponse
  parent: System.Net
  isExternal: true
  name: WebResponse
  nameWithType: WebResponse
  fullName: System.Net.WebResponse
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Web.Services.Protocols.NopReturnReader.#ctor*
  parent: System.Web.Services.Protocols.NopReturnReader
  isExternal: false
  name: NopReturnReader
  nameWithType: NopReturnReader.NopReturnReader
- uid: System.Web.Services.Protocols.NopReturnReader.GetInitializer*
  parent: System.Web.Services.Protocols.NopReturnReader
  isExternal: false
  name: GetInitializer
  nameWithType: NopReturnReader.GetInitializer
- uid: System.Web.Services.Protocols.NopReturnReader.Initialize*
  parent: System.Web.Services.Protocols.NopReturnReader
  isExternal: false
  name: Initialize
  nameWithType: NopReturnReader.Initialize
- uid: System.Web.Services.Protocols.NopReturnReader.Read*
  parent: System.Web.Services.Protocols.NopReturnReader
  isExternal: false
  name: Read
  nameWithType: NopReturnReader.Read
