### YamlMime:ManagedReference
items:
- uid: System.Globalization.GregorianCalendar
  id: GregorianCalendar
  children:
  - System.Globalization.GregorianCalendar.#ctor
  - System.Globalization.GregorianCalendar.#ctor(System.Globalization.GregorianCalendarTypes)
  - System.Globalization.GregorianCalendar.AddMonths(System.DateTime,System.Int32)
  - System.Globalization.GregorianCalendar.AddYears(System.DateTime,System.Int32)
  - System.Globalization.GregorianCalendar.ADEra
  - System.Globalization.GregorianCalendar.AlgorithmType
  - System.Globalization.GregorianCalendar.CalendarType
  - System.Globalization.GregorianCalendar.Eras
  - System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)
  - System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)
  - System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)
  - System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)
  - System.Globalization.GregorianCalendar.GetEra(System.DateTime)
  - System.Globalization.GregorianCalendar.GetLeapMonth(System.Int32,System.Int32)
  - System.Globalization.GregorianCalendar.GetMonth(System.DateTime)
  - System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)
  - System.Globalization.GregorianCalendar.GetYear(System.DateTime)
  - System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)
  - System.Globalization.GregorianCalendar.MaxSupportedDateTime
  - System.Globalization.GregorianCalendar.MinSupportedDateTime
  - System.Globalization.GregorianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)
  - System.Globalization.GregorianCalendar.TwoDigitYearMax
  langs:
  - csharp
  name: GregorianCalendar
  nameWithType: GregorianCalendar
  fullName: System.Globalization.GregorianCalendar
  type: Class
  summary: "代表西曆。"
  remarks: "西曆辨識兩個紀元︰ b.c. 西元前或 A.D.。 或西元 GregorianCalendar 類別的這個實作會辨識只有目前紀元 (A.D.。 或西元）。      > [!NOTE] > 使用 GregorianCalendar 類別和其他行事曆類別的.NET Framework 相關資訊，請參閱[使用行事曆](~/add/includes/ajax-current-ext-md.md)。       閏年西曆中定義為是除以 4，除非它是整除 100 年。 不過，400 所整除的年都是閏年。 例如，1900 年不為閏年，但 2000 年。 一般年份有 365 天，閏年有 366 天。       西曆已有 28 到 31 天每 12 個月︰ 年 1 月 （31 天）、 2 (28 或 29 天)、 年 3 月 （31 天）、 年 4 月 （30 天），可能 （31 天）、 年 6 月 （30 天）、 年 7 月 （31 天）、 年 8 月 （31 天）、 年 9 月 （30 天）、 年 10 月 （31 天）、 年 11 月 （30 天） 及年 12 月 （31 天）。 二月有 29 天，閏年和 28。      > [!IMPORTANT] > 根據預設，所有<xref:System.DateTime>和<xref:System.DateTimeOffset>值 express 中西曆日期和時間。</xref:System.DateTimeOffset> </xref:System.DateTime>       西曆凱撒曆法的取代項目以進行開發 (這由<xref:System.Globalization.JulianCalendar>類別)，引進少量的文化特性，1582 年 10 月 15 號上。</xref:System.Globalization.JulianCalendar> 當使用前面的文化特性採用西曆的歷程記錄日期，您應該使用原始的行事曆，如果它是.NET Framework 中可用。 例如，丹麥從變更凱撒曆法為西曆日曆年 2 月 19 （在凱撒曆） 或月 1 日 （西曆） 中的 1700年。 在此情況下，如之前採用西曆日期，您應該使用凱撒曆法。 不過，請注意沒有的文化特性提供內建支援<xref:System.Globalization.JulianCalendar>類別。</xref:System.Globalization.JulianCalendar> 您必須使用<xref:System.Globalization.JulianCalendar>類別做為獨立曆法。</xref:System.Globalization.JulianCalendar> 如需詳細資訊，請參閱。       下列範例說明 1700 年 2 月 18，即可使用凱撒曆法，也就是最後一天中丹麥正式使用凱撒曆法是早於 1700 年 3 月 1，西曆中的一天。       [!code-cs[System.Globalization.GregorianCalendar.Class#1](~/add/codesnippet/csharp/t-system.globalization.g_0_1.cs)][!code-vb[System.Globalization.GregorianCalendar.Class#1](~/add/codesnippet/visualbasic/t-system.globalization.g_0_1.vb) ]每個<xref:System.Globalization.CultureInfo>支援一組的行事曆。</xref:System.Globalization.CultureInfo>   <xref:System.Globalization.CultureInfo.Calendar%2A>屬性會傳回預設的行事曆文化特性，而<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>屬性會傳回陣列，其中包含所有支援的文化特性的行事曆。</xref:System.Globalization.CultureInfo.OptionalCalendars%2A> </xref:System.Globalization.CultureInfo.Calendar%2A> 若要變更<xref:System.Globalization.CultureInfo>，應用程式可以設定<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>至新的<xref:System.Globalization.Calendar>。</xref:System.Globalization.Calendar>屬性</xref:System.Globalization.DateTimeFormatInfo.Calendar%2A></xref:System.Globalization.CultureInfo>所使用的行事曆       <xref:System.Globalization.DateTimeFormatInfo.GetEra%2A>會忽略標點符號紀元縮寫的名稱中，唯有 GregorianCalendar<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=fullName>和文化特性會使用 「 A.D.」</xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=fullName>中選取</xref:System.Globalization.DateTimeFormatInfo.GetEra%2A> 為紀元名稱時，也就是 「 A.D.。 」 相當於&quot;AD&quot;。"
  example:
  - "The following code example shows that <xref:System.Globalization.DateTimeFormatInfo> ignores the punctuation in the era name, only if the calendar is Gregorian and the culture uses the era name \"A.D.\".  \n  \n [!code-cs[System.Globalization.GregorianCalendar.GetEra#1](~/add/codesnippet/csharp/t-system.globalization.g_0_2.cs)]\n [!code-cpp[System.Globalization.GregorianCalendar.GetEra#1](~/add/codesnippet/cpp/t-system.globalization.g_0_2.cpp)]\n [!code-vb[System.Globalization.GregorianCalendar.GetEra#1](~/add/codesnippet/visualbasic/t-system.globalization.g_0_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class GregorianCalendar : System.Globalization.Calendar
  inheritance:
  - System.Globalization.Calendar
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.#ctor
  id: '#ctor'
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GregorianCalendar()
  nameWithType: GregorianCalendar.GregorianCalendar()
  fullName: System.Globalization.GregorianCalendar.GregorianCalendar()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "初始化的新執行個體<xref href=&quot;System.Globalization.GregorianCalendar&quot;></xref>類別使用的預設<xref href=&quot;System.Globalization.GregorianCalendarTypes&quot;></xref>值。"
  remarks: "預設<xref:System.Globalization.GregorianCalendarTypes>值是<xref:System.Globalization.GregorianCalendarTypes>.</xref:System.Globalization.GregorianCalendarTypes> </xref:System.Globalization.GregorianCalendarTypes> 如果<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=fullName>屬性<xref:System.Globalization.CultureInfo>設定為<xref:System.Globalization.GregorianCalendar>使用這個建構函式所建立、 日期和時間會當地語系化<xref:System.Globalization.CultureInfo>.</xref:System.Globalization.CultureInfo>與相關聯的語言</xref:System.Globalization.GregorianCalendar></xref:System.Globalization.CultureInfo></xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=fullName>"
  example:
  - "The following code example prints a <xref:System.DateTime> using a <xref:System.Globalization.GregorianCalendar> that is localized.  \n  \n [!code-vb[System.Globalization.GregorianCalendarLocalized#1](~/add/codesnippet/visualbasic/m-system.globalization.g_2_1.vb)]\n [!code-cs[System.Globalization.GregorianCalendarLocalized#1](~/add/codesnippet/csharp/m-system.globalization.g_2_1.cs)]\n [!code-cpp[System.Globalization.GregorianCalendarLocalized#1](~/add/codesnippet/cpp/m-system.globalization.g_2_1.cpp)]"
  syntax:
    content: public GregorianCalendar ();
    parameters: []
  overload: System.Globalization.GregorianCalendar.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.#ctor(System.Globalization.GregorianCalendarTypes)
  id: '#ctor(System.Globalization.GregorianCalendarTypes)'
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GregorianCalendar(GregorianCalendarTypes)
  nameWithType: GregorianCalendar.GregorianCalendar(GregorianCalendarTypes)
  fullName: System.Globalization.GregorianCalendar.GregorianCalendar(GregorianCalendarTypes)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "初始化的新執行個體<xref href=&quot;System.Globalization.GregorianCalendar&quot;></xref>類別使用指定<xref href=&quot;System.Globalization.GregorianCalendarTypes&quot;></xref>值。"
  syntax:
    content: public GregorianCalendar (System.Globalization.GregorianCalendarTypes type);
    parameters:
    - id: type
      type: System.Globalization.GregorianCalendarTypes
      description: "<xref href=&quot;System.Globalization.GregorianCalendarTypes&quot;> </xref>值，表示要建立的行事曆哪一個語言版本。"
  overload: System.Globalization.GregorianCalendar.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>type</code>不是成員的<xref href=&quot;System.Globalization.GregorianCalendarTypes&quot;></xref>列舉型別。"
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.AddMonths(System.DateTime,System.Int32)
  id: AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: AddMonths(DateTime,Int32)
  nameWithType: GregorianCalendar.AddMonths(DateTime,Int32)
  fullName: System.Globalization.GregorianCalendar.AddMonths(DateTime,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回<xref:System.DateTime>也就是指定的月數指定<xref:System.DateTime>.</xref:System.DateTime>遠離</xref:System.DateTime>"
  remarks: "產生的日期部分<xref:System.DateTime>如果產生的日期不是有效的日期，產生結果年的月份中會受到影響。</xref:System.DateTime> 它會變更為有效的最後一天，在產生的產生的年份。 <xref:System.DateTime>如果產生的月份超出指定<xref:System.DateTime>.</xref:System.DateTime>的年份，會影響</xref:System.DateTime>結果的年份部分 這項實作支援目前的紀元。 因此，<xref:System.ArgumentException>如果產生的年份超出指定<xref:System.DateTime>.</xref:System.DateTime>紀元，會擲回</xref:System.ArgumentException> 結果<xref:System.DateTime>仍然與指定<xref:System.DateTime>.</xref:System.DateTime>相同</xref:System.DateTime>的日期時間組件       比方說，如果指定的月份是 10 月 31 天內，其指定的日期，而且該月第 31 天的值`months`參數為 6，產生的年份會比指定的年份，產生的月份多一年 4 月，而產生的日期年 4 月最後一天的第 30 天。       如果值`months`參數是負值，<xref:System.DateTime>早於指定<xref:System.DateTime>.</xref:System.DateTime></xref:System.DateTime>產生       <xref:System.DateTime.Kind%2A>屬性的<xref:System.DateTime>值一律等於<xref:System.DateTimeKind?displayProperty=fullName>.</xref:System.DateTimeKind?displayProperty=fullName></xref:System.DateTime>傳回</xref:System.DateTime.Kind%2A> 您可以保留<xref:System.DateTime.Kind%2A>屬性`time`藉由呼叫參數<xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName>方法，如下列範例所示。</xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> </xref:System.DateTime.Kind%2A>       [!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/m-system.globalization.g_8_1.vb)][!code-cs[System.Globalization.Calendar.AddMethods#5  ](~/add/codesnippet/csharp/m-system.globalization.g_8_1.cs)]"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \n  \n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_8_2.cs)]\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_8_2.vb)]\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_8_2.cpp)]"
  syntax:
    content: public override DateTime AddMonths (DateTime time, int months);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>其中加入幾個月。</xref:System.DateTime>"
    - id: months
      type: System.Int32
      description: "若要加入的月數。"
    return:
      type: System.DateTime
      description: "<xref:System.DateTime>從指定的月份來指定<xref:System.DateTime>.</xref:System.DateTime>數目相加的結果</xref:System.DateTime>"
  overload: System.Globalization.GregorianCalendar.AddMonths*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "產生<xref:System.DateTime>超出支援的範圍。</xref:System.DateTime>"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>months</code>是小於-120000。       -或-<code>months</code>大於 120000。"
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.AddYears(System.DateTime,System.Int32)
  id: AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: AddYears(DateTime,Int32)
  nameWithType: GregorianCalendar.AddYears(DateTime,Int32)
  fullName: System.Globalization.GregorianCalendar.AddYears(DateTime,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回<xref:System.DateTime>也就是指定的年數指定<xref:System.DateTime>.</xref:System.DateTime>遠離</xref:System.DateTime>"
  remarks: "產生的日期部分<xref:System.DateTime>如果產生的日期不是有效的日期，產生結果年的月份中會受到影響。</xref:System.DateTime> 它會變更為有效的最後一天，在產生的產生的年份。 產生<xref:System.DateTime>仍然與指定<xref:System.DateTime>.</xref:System.DateTime>相同</xref:System.DateTime>的月份部分 這項實作支援目前的紀元。 因此，<xref:System.ArgumentException>如果產生的年份超出指定<xref:System.DateTime>.</xref:System.DateTime>紀元，會擲回</xref:System.ArgumentException> 結果<xref:System.DateTime>仍然與指定<xref:System.DateTime>.</xref:System.DateTime>相同</xref:System.DateTime>的日期時間組件       例如，二月有 28 天，除了閏年時有 29 天期間。 如果指定的日期是潤年 2 月 29 日值`years`為 1，則產生的日期會一年中的 2 月 28 日。       如果`years`是負數，<xref:System.DateTime>早於指定<xref:System.DateTime>.</xref:System.DateTime></xref:System.DateTime>產生       <xref:System.DateTime.Kind%2A>屬性的<xref:System.DateTime>值一律等於<xref:System.DateTimeKind?displayProperty=fullName>.</xref:System.DateTimeKind?displayProperty=fullName></xref:System.DateTime>傳回</xref:System.DateTime.Kind%2A> 您可以保留<xref:System.DateTime.Kind%2A>屬性`time`藉由呼叫參數<xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName>方法，如下列範例所示。</xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> </xref:System.DateTime.Kind%2A>       [!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/m-system.globalization.g_4_1.vb)][!code-cs[System.Globalization.Calendar.AddMethods#8  ](~/add/codesnippet/csharp/m-system.globalization.g_4_1.cs)]"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \n  \n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_4_2.cs)]\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_4_2.vb)]\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_4_2.cpp)]"
  syntax:
    content: public override DateTime AddYears (DateTime time, int years);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>要加入年。</xref:System.DateTime>"
    - id: years
      type: System.Int32
      description: "若要加入的年數。"
    return:
      type: System.DateTime
      description: "<xref:System.DateTime>新增指定的至指定<xref:System.DateTime>。</xref:System.DateTime>的年數的結果</xref:System.DateTime>"
  overload: System.Globalization.GregorianCalendar.AddYears*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "產生<xref:System.DateTime>超出支援的範圍。</xref:System.DateTime>"
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.ADEra
  id: ADEra
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: ADEra
  nameWithType: GregorianCalendar.ADEra
  fullName: System.Globalization.GregorianCalendar.ADEra
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "代表目前的紀元。 這個欄位是常數。"
  remarks: '西曆辨識兩個紀元︰ b.c. 西元前或 A.D.。 或西元 這項實作<xref:System.Globalization.GregorianCalendar>類別會辨識目前的紀元 (A.D.</xref:System.Globalization.GregorianCalendar> 或西元）。 此欄位一律會傳回 1。'
  syntax:
    content: public const int ADEra = 1;
    return:
      type: System.Int32
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.AlgorithmType
  id: AlgorithmType
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: AlgorithmType
  nameWithType: GregorianCalendar.AlgorithmType
  fullName: System.Globalization.GregorianCalendar.AlgorithmType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "取得值，指出是否將現行曆法是以陽曆為主、 以陰曆為主，或兩者的組合。"
  remarks: ''
  example:
  - "The following example uses reflection to instantiate each <xref:System.Globalization.Calendar> type found in the .NET Framework and displays the value of its <xref:System.Globalization.Calendar.AlgorithmType%2A> property.  \n  \n [!code-cs[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/csharp/p-system.globalization.g_2_1.cs)]\n [!code-vb[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/visualbasic/p-system.globalization.g_2_1.vb)]"
  syntax:
    content: public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }
    return:
      type: System.Globalization.CalendarAlgorithmType
      description: "一律傳回<xref href=&quot;System.Globalization.CalendarAlgorithmType&quot;> </xref>。"
  overload: System.Globalization.GregorianCalendar.AlgorithmType*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.CalendarType
  id: CalendarType
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: CalendarType
  nameWithType: GregorianCalendar.CalendarType
  fullName: System.Globalization.GregorianCalendar.CalendarType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "取得或設定<xref href=&quot;System.Globalization.GregorianCalendarTypes&quot;></xref>值，代表目前的語言版本<xref href=&quot;System.Globalization.GregorianCalendar&quot;> </xref>。"
  remarks: ''
  example:
  - "The following code example demonstrates how to determine the GregorianCalendar language version supported by the culture.  \n  \n [!code-vb[System.Globalization.GregorianCalendarTypes#1](~/add/codesnippet/visualbasic/p-system.globalization.g_3_1.vb)]\n [!code-cpp[System.Globalization.GregorianCalendarTypes#1](~/add/codesnippet/cpp/p-system.globalization.g_3_1.cpp)]\n [!code-cs[System.Globalization.GregorianCalendarTypes#1](~/add/codesnippet/csharp/p-system.globalization.g_3_1.cs)]"
  syntax:
    content: public virtual System.Globalization.GregorianCalendarTypes CalendarType { get; set; }
    return:
      type: System.Globalization.GregorianCalendarTypes
      description: "A <xref href=&quot;System.Globalization.GregorianCalendarTypes&quot;> </xref>值，代表目前的語言版本<xref href=&quot;System.Globalization.GregorianCalendar&quot;> </xref>。"
  overload: System.Globalization.GregorianCalendar.CalendarType*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "設定作業中指定的值不是成員的<xref href=&quot;System.Globalization.GregorianCalendarTypes&quot;></xref>列舉型別。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在設定作業中，目前的執行個體是唯讀狀態。"
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.Eras
  id: Eras
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: Eras
  nameWithType: GregorianCalendar.Eras
  fullName: System.Globalization.GregorianCalendar.Eras
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "取得清單中的紀元<xref href=&quot;System.Globalization.GregorianCalendar&quot;> </xref>。"
  remarks: '西曆辨識兩個紀元︰ b.c. 西元前或 A.D.。 或西元 這項實作<xref:System.Globalization.GregorianCalendar>類別會辨識目前的紀元 (A.D.</xref:System.Globalization.GregorianCalendar> 或西元）。 這個屬性永遠會傳回只有一個元素的陣列。'
  syntax:
    content: public override int[] Eras { get; }
    return:
      type: System.Int32[]
      description: "表示中的紀元的整數的陣列<xref href=&quot;System.Globalization.GregorianCalendar&quot;> </xref>。"
  overload: System.Globalization.GregorianCalendar.Eras*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)
  id: GetDayOfMonth(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GetDayOfMonth(DateTime)
  nameWithType: GregorianCalendar.GetDayOfMonth(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetDayOfMonth(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回在指定<xref:System.DateTime>.</xref:System.DateTime>當月日期"
  remarks: ''
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \n  \n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_5_1.cs)]\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_5_1.vb)]\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_5_1.cpp)]"
  syntax:
    content: public override int GetDayOfMonth (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>讀取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "從 1 到 31，表示月份的日期的整數<code> time </code>。"
  overload: System.Globalization.GregorianCalendar.GetDayOfMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)
  id: GetDayOfWeek(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GetDayOfWeek(DateTime)
  nameWithType: GregorianCalendar.GetDayOfWeek(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetDayOfWeek(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回在指定<xref:System.DateTime>.</xref:System.DateTime>一週天數"
  remarks: "<xref:System.DayOfWeek>的值為星期日、 星期一、 星期二、 星期三、 星期四、 星期五、 和星期六。</xref:System.DayOfWeek>"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \n  \n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_0_1.cs)]\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_0_1.vb)]\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_0_1.cpp)]"
  syntax:
    content: public override DayOfWeek GetDayOfWeek (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>讀取。</xref:System.DateTime>"
    return:
      type: System.DayOfWeek
      description: "A<xref:System.DayOfWeek>值，表示在一週天數<code> time </code>。</xref:System.DayOfWeek>"
  overload: System.Globalization.GregorianCalendar.GetDayOfWeek*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)
  id: GetDayOfYear(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GetDayOfYear(DateTime)
  nameWithType: GregorianCalendar.GetDayOfYear(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetDayOfYear(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回在指定<xref:System.DateTime>.</xref:System.DateTime>年份的日期"
  remarks: "年份的日期被定義為一年的第一天中的天數。 比方說，GetDayOfYear 的第一個月的第一天，則傳回 1，並在過去一個月的最後一天的 GetDayOfYear 傳回總天數中該年份， <xref:System.Globalization.GregorianCalendar.GetDaysInYear%2A>.</xref:System.Globalization.GregorianCalendar.GetDaysInYear%2A>所傳回的值相同"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \n  \n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_3_1.cs)]\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_3_1.vb)]\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_3_1.cpp)]"
  syntax:
    content: public override int GetDayOfYear (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>讀取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "從 1 到 366 代表一年中日的整數<code> time </code>。"
  overload: System.Globalization.GregorianCalendar.GetDayOfYear*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  id: GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GetDaysInMonth(Int32,Int32,Int32)
  nameWithType: GregorianCalendar.GetDaysInMonth(Int32,Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.GetDaysInMonth(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "在指定紀元的指定年份中之指定月份中傳回的天數。"
  remarks: "例如，這個方法會傳回 28 或 29 表示二月 (`month` = 2)，取決於是否`year`是否為閏年。"
  example:
  - "The following code example calls GetDaysInMonth for the second month in each of five years in each era.  \n  \n [!code-cpp[System.Globalization.GregorianCalendar.GetDaysInMonth#1](~/add/codesnippet/cpp/5d22c0c3-8560-4ab0-878f-_1.cpp)]\n [!code-cs[System.Globalization.GregorianCalendar.GetDaysInMonth#1](~/add/codesnippet/csharp/5d22c0c3-8560-4ab0-878f-_1.cs)]\n [!code-vb[System.Globalization.GregorianCalendar.GetDaysInMonth#1](~/add/codesnippet/visualbasic/5d22c0c3-8560-4ab0-878f-_1.vb)]"
  syntax:
    content: public override int GetDaysInMonth (int year, int month, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "整數，表示年份。"
    - id: month
      type: System.Int32
      description: "從 1 到 12 的整數，表示月份。"
    - id: era
      type: System.Int32
      description: "整數，表示紀元。"
    return:
      type: System.Int32
      description: "在指定紀元的指定年份中指定的月份天數。"
  overload: System.Globalization.GregorianCalendar.GetDaysInMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>era</code>為曆法所支援的範圍之外。       -或-<code>year</code>曆法所支援的範圍。       -或-<code>month</code>曆法所支援的範圍。"
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)
  id: GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GetDaysInYear(Int32,Int32)
  nameWithType: GregorianCalendar.GetDaysInYear(Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.GetDaysInYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回在指定紀元的指定年份中的日數。"
  remarks: "例如，這個方法會傳回 365 或 366，取決於是否`year`是否為閏年。"
  example:
  - "The following code example calls GetDaysInYear for five years in each era.  \n  \n [!code-cpp[System.Globalization.GregorianCalendar.GetDaysInYear#1](~/add/codesnippet/cpp/a71f2fe7-84c1-4827-ac70-_1.cpp)]\n [!code-cs[System.Globalization.GregorianCalendar.GetDaysInYear#1](~/add/codesnippet/csharp/a71f2fe7-84c1-4827-ac70-_1.cs)]\n [!code-vb[System.Globalization.GregorianCalendar.GetDaysInYear#1](~/add/codesnippet/visualbasic/a71f2fe7-84c1-4827-ac70-_1.vb)]"
  syntax:
    content: public override int GetDaysInYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "整數，表示年份。"
    - id: era
      type: System.Int32
      description: "整數，表示紀元。"
    return:
      type: System.Int32
      description: "在指定紀元的指定年份中的日數。"
  overload: System.Globalization.GregorianCalendar.GetDaysInYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>era</code>為曆法所支援的範圍之外。       -或-<code>year</code>曆法所支援的範圍。"
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.GetEra(System.DateTime)
  id: GetEra(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GetEra(DateTime)
  nameWithType: GregorianCalendar.GetEra(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetEra(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回在指定<xref:System.DateTime>.</xref:System.DateTime>紀元"
  remarks: '西曆辨識兩個紀元︰ b.c. 西元前或 A.D.。 或西元 這項實作<xref:System.Globalization.GregorianCalendar>類別會辨識目前的紀元 (A.D.</xref:System.Globalization.GregorianCalendar> 或西元）。'
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \n  \n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_6_1.cs)]\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_6_1.vb)]\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_6_1.cpp)]"
  syntax:
    content: public override int GetEra (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>讀取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "整數，表示紀元<code> time </code>。"
  overload: System.Globalization.GregorianCalendar.GetEra*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.GetLeapMonth(System.Int32,System.Int32)
  id: GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GetLeapMonth(Int32,Int32)
  nameWithType: GregorianCalendar.GetLeapMonth(Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.GetLeapMonth(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "計算指定之年份和紀元的閏月。"
  syntax:
    content: public override int GetLeapMonth (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一年。"
    - id: era
      type: System.Int32
      description: "紀元。 Specify either <xref href=&quot;System.Globalization.GregorianCalendar.ADEra&quot;></xref> or <xref uid=&quot;langword_csharp_GregorianCalendar.Eras[Calendar.CurrentEra]&quot; name=&quot;GregorianCalendar.Eras[Calendar.CurrentEra]&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Int32
      description: "永遠為 0 因為西曆無法辨識閏月。"
  overload: System.Globalization.GregorianCalendar.GetLeapMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>小於西曆日曆 1 年度或大於西曆年份 9999。       -or-       <code>era</code> is not <xref href=&quot;System.Globalization.GregorianCalendar.ADEra&quot;></xref> or <xref uid=&quot;langword_csharp_GregorianCalendar.Eras[Calendar.CurrentEra]&quot; name=&quot;GregorianCalendar.Eras[Calendar.CurrentEra]&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.GetMonth(System.DateTime)
  id: GetMonth(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GetMonth(DateTime)
  nameWithType: GregorianCalendar.GetMonth(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetMonth(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回在指定<xref:System.DateTime>.</xref:System.DateTime>月份"
  remarks: ''
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \n  \n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_9_1.cs)]\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_9_1.vb)]\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_9_1.cpp)]"
  syntax:
    content: public override int GetMonth (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>讀取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "從 1 到 12，表示月份的整數<code> time </code>。"
  overload: System.Globalization.GregorianCalendar.GetMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)
  id: GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GetMonthsInYear(Int32,Int32)
  nameWithType: GregorianCalendar.GetMonthsInYear(Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.GetMonthsInYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回在指定紀元的指定年份中的月數。"
  remarks: ''
  example:
  - "The following code example calls GetMonthsInYear for five years in each era.  \n  \n [!code-cs[System.Globalization.GregorianCalendar.GetMonthsInYear#1](~/add/codesnippet/csharp/401ca427-6c60-47eb-91ba-_1.cs)]\n [!code-cpp[System.Globalization.GregorianCalendar.GetMonthsInYear#1](~/add/codesnippet/cpp/401ca427-6c60-47eb-91ba-_1.cpp)]\n [!code-vb[System.Globalization.GregorianCalendar.GetMonthsInYear#1](~/add/codesnippet/visualbasic/401ca427-6c60-47eb-91ba-_1.vb)]"
  syntax:
    content: public override int GetMonthsInYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "整數，表示年份。"
    - id: era
      type: System.Int32
      description: "整數，表示紀元。"
    return:
      type: System.Int32
      description: "在指定紀元的指定年份中的月數。"
  overload: System.Globalization.GregorianCalendar.GetMonthsInYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>era</code>為曆法所支援的範圍之外。       -或-<code>year</code>曆法所支援的範圍。"
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.GetYear(System.DateTime)
  id: GetYear(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: GetYear(DateTime)
  nameWithType: GregorianCalendar.GetYear(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetYear(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "在指定<xref:System.DateTime>.</xref:System.DateTime>傳回年份"
  remarks: ''
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Gregorian calendar.  \n  \n [!code-cs[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.g_7_1.cs)]\n [!code-vb[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.g_7_1.vb)]\n [!code-cpp[System.Globalization.GregorianCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.g_7_1.cpp)]"
  syntax:
    content: public override int GetYear (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>讀取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "整數，表示的年份<code> time </code>。"
  overload: System.Globalization.GregorianCalendar.GetYear*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  id: IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: IsLeapDay(Int32,Int32,Int32,Int32)
  nameWithType: GregorianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "判斷指定紀元中指定的日期是否為閏日。"
  remarks: "閏年西曆中由四個，除非它是整除 100 定義為整除一年。 不過，400 所整除的年都是閏年。 例如，1900 年不為閏年，但 2000 年。 一般年份有 365 天，閏年有 366 天。       為閏日是閏年只會發生一天。 在西曆中，年 2 月 29 日會是唯一的閏日。"
  example:
  - "The following code example calls IsLeapDay for the last day of the second month (February) for five years in each of the eras.  \n  \n [!code-cpp[System.Globalization.GregorianCalendar.IsLeapDay#1](~/add/codesnippet/cpp/f70e7f67-7d6a-4484-9fbf-_1.cpp)]\n [!code-vb[System.Globalization.GregorianCalendar.IsLeapDay#1](~/add/codesnippet/visualbasic/f70e7f67-7d6a-4484-9fbf-_1.vb)]\n [!code-cs[System.Globalization.GregorianCalendar.IsLeapDay#1](~/add/codesnippet/csharp/f70e7f67-7d6a-4484-9fbf-_1.cs)]"
  syntax:
    content: public override bool IsLeapDay (int year, int month, int day, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "整數，表示年份。"
    - id: month
      type: System.Int32
      description: "從 1 到 12 的整數，表示月份。"
    - id: day
      type: System.Int32
      description: "從 1 到 31 的整數，表示的日期。"
    - id: era
      type: System.Int32
      description: "整數，表示紀元。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的日期為閏日。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.GregorianCalendar.IsLeapDay*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>era</code>為曆法所支援的範圍之外。       -或-<code>year</code>曆法所支援的範圍。       -或-<code>month</code>曆法所支援的範圍。       -或-<code>day</code>曆法所支援的範圍。"
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  id: IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: IsLeapMonth(Int32,Int32,Int32)
  nameWithType: GregorianCalendar.IsLeapMonth(Int32,Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.IsLeapMonth(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "判斷指定紀元中指定的年中的指定的月份是否為閏月。"
  remarks: "閏年西曆中由四個，除非它是整除 100 定義為整除一年。 不過，400 所整除的年都是閏年。 例如，1900 年不為閏年，但 2000 年。 一般年份有 365 天，閏年有 366 天。       為閏月是只發生在閏年整個月。 西曆並沒有任何閏月。"
  example:
  - "The following code example calls IsLeapMonth for all the months in five years in the current era.  \n  \n [!code-cpp[System.Globalization.GregorianCalendar.IsLeapMonth#1](~/add/codesnippet/cpp/de7e90b6-6a1d-4ed0-8d65-_1.cpp)]\n [!code-cs[System.Globalization.GregorianCalendar.IsLeapMonth#1](~/add/codesnippet/csharp/de7e90b6-6a1d-4ed0-8d65-_1.cs)]\n [!code-vb[System.Globalization.GregorianCalendar.IsLeapMonth#1](~/add/codesnippet/visualbasic/de7e90b6-6a1d-4ed0-8d65-_1.vb)]"
  syntax:
    content: public override bool IsLeapMonth (int year, int month, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "整數，表示年份。"
    - id: month
      type: System.Int32
      description: "從 1 到 12 的整數，表示月份。"
    - id: era
      type: System.Int32
      description: "整數，表示紀元。"
    return:
      type: System.Boolean
      description: "這個方法一律會傳回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>，除非在衍生類別覆寫。"
  overload: System.Globalization.GregorianCalendar.IsLeapMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>era</code>為曆法所支援的範圍之外。       -或-<code>year</code>曆法所支援的範圍。       -或-<code>month</code>曆法所支援的範圍。"
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)
  id: IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: IsLeapYear(Int32,Int32)
  nameWithType: GregorianCalendar.IsLeapYear(Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.IsLeapYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "判斷指定紀元中指定的年份是否為閏年。"
  remarks: "閏年西曆中由四個，除非它是整除 100 定義為整除一年。 不過，400 所整除的年都是閏年。 例如，1900 年不為閏年，但 2000 年。 一般年份有 365 天，閏年有 366 天。"
  example:
  - "The following code example calls IsLeapYear for five years in each of the eras.  \n  \n [!code-cs[System.Globalization.GregorianCalendar.IsLeapYear#1](~/add/codesnippet/csharp/m-system.globalization.g_1_1.cs)]\n [!code-cpp[System.Globalization.GregorianCalendar.IsLeapYear#1](~/add/codesnippet/cpp/m-system.globalization.g_1_1.cpp)]\n [!code-vb[System.Globalization.GregorianCalendar.IsLeapYear#1](~/add/codesnippet/visualbasic/m-system.globalization.g_1_1.vb)]"
  syntax:
    content: public override bool IsLeapYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "整數，表示年份。"
    - id: era
      type: System.Int32
      description: "整數，表示紀元。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的年份為閏年;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.GregorianCalendar.IsLeapYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>era</code>為曆法所支援的範圍之外。       -或-<code>year</code>曆法所支援的範圍。"
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.MaxSupportedDateTime
  id: MaxSupportedDateTime
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: MaxSupportedDateTime
  nameWithType: GregorianCalendar.MaxSupportedDateTime
  fullName: System.Globalization.GregorianCalendar.MaxSupportedDateTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "取得最新的日期和時間所支援<xref href=&quot;System.Globalization.GregorianCalendar&quot;></xref>型別。"
  remarks: ''
  example:
  - "The following code example gets the minimum value and the maximum value of the calendar.  \n  \n [!code-cs[System.Globalization.GregorianCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.g_1_1.cs)]\n [!code-cpp[System.Globalization.GregorianCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.g_1_1.cpp)]\n [!code-vb[System.Globalization.GregorianCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.g_1_1.vb)]"
  syntax:
    content: public override DateTime MaxSupportedDateTime { get; }
    return:
      type: System.DateTime
      description: "最晚的日期和時間所支援<xref href=&quot;System.Globalization.GregorianCalendar&quot;></xref>類型，這是最後一刻的年 12 月 31 日到 9999 年 相當於<xref:System.DateTime.MaxValue>.</xref:System.DateTime.MaxValue>"
  overload: System.Globalization.GregorianCalendar.MaxSupportedDateTime*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.MinSupportedDateTime
  id: MinSupportedDateTime
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: MinSupportedDateTime
  nameWithType: GregorianCalendar.MinSupportedDateTime
  fullName: System.Globalization.GregorianCalendar.MinSupportedDateTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "取得最早日期和時間所支援<xref href=&quot;System.Globalization.GregorianCalendar&quot;></xref>型別。"
  remarks: "雖然 MinSupportedDateTime 屬性的值是第一年 1 月 1 日的公元 0001 西曆未引入直到 15，1582 號年 10 月，而且其整個歐洲 continent 和世界各地採用而變慢。 美國，和澳大利亞大陸它們採用西曆，大部分的文化特性在歐洲，直到使用凱撒曆法，表示的<xref:System.Globalization.JulianCalendar>類別。</xref:System.Globalization.JulianCalendar>"
  example:
  - "The following code example gets the minimum value and the maximum value of the calendar.  \n  \n [!code-cs[System.Globalization.GregorianCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.g_0_1.cs)]\n [!code-cpp[System.Globalization.GregorianCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.g_0_1.cpp)]\n [!code-vb[System.Globalization.GregorianCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.g_0_1.vb)]"
  syntax:
    content: public override DateTime MinSupportedDateTime { get; }
    return:
      type: System.DateTime
      description: "最早日期和時間所支援<xref href=&quot;System.Globalization.GregorianCalendar&quot;></xref>型別，則第一個快照年 1 月 1 日公元 0001 相當於<xref:System.DateTime.MinValue>.</xref:System.DateTime.MinValue>"
  overload: System.Globalization.GregorianCalendar.MinSupportedDateTime*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: GregorianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回<xref:System.DateTime>設定為指定的日期和時間在指定紀元。</xref:System.DateTime>"
  syntax:
    content: public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "整數，表示年份。"
    - id: month
      type: System.Int32
      description: "從 1 到 12 的整數，表示月份。"
    - id: day
      type: System.Int32
      description: "從 1 到 31 的整數，表示的日期。"
    - id: hour
      type: System.Int32
      description: "從 0 到 23 的整數，表示小時。"
    - id: minute
      type: System.Int32
      description: "從 0 到 59 的整數，表示分鐘。"
    - id: second
      type: System.Int32
      description: "從 0 到 59 的整數，表示第二個。"
    - id: millisecond
      type: System.Int32
      description: "從 0 到 999 之間的整數，表示毫秒。"
    - id: era
      type: System.Int32
      description: "整數，表示紀元。"
    return:
      type: System.DateTime
      description: "<xref:System.DateTime>設定為指定的日期和時間以目前紀元。</xref:System.DateTime>"
  overload: System.Globalization.GregorianCalendar.ToDateTime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>era</code>為曆法所支援的範圍之外。       -或-<code>year</code>曆法所支援的範圍。       -或-<code>month</code>曆法所支援的範圍。       -或-<code>day</code>曆法所支援的範圍。       -或-<code>hour</code>小於零或大於 23。       -或-<code>minute</code>小於零或大於 59。       -或-<code>second</code>小於零或大於 59。       -或-<code>millisecond</code>小於零或大於 999。"
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)
  id: ToFourDigitYear(System.Int32)
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: ToFourDigitYear(Int32)
  nameWithType: GregorianCalendar.ToFourDigitYear(Int32)
  fullName: System.Globalization.GregorianCalendar.ToFourDigitYear(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "使用轉換指定的年份為四位數年份<xref:System.Globalization.GregorianCalendar.TwoDigitYearMax*>屬性來判斷適當世紀。</xref:System.Globalization.GregorianCalendar.TwoDigitYearMax*>"
  remarks: "<xref:System.Globalization.GregorianCalendar.TwoDigitYearMax%2A>是以兩位數年份表示時，該 100 年範圍中的最後一年。</xref:System.Globalization.GregorianCalendar.TwoDigitYearMax%2A> 世紀所找到的兩位數的唯一項目決定`year`該 100 年範圍內。 例如，如果<xref:System.Globalization.GregorianCalendar.TwoDigitYearMax%2A>設為 2029，100 年範圍是從 1930年到 2029年。</xref:System.Globalization.GregorianCalendar.TwoDigitYearMax%2A> 因此，30 的 2 位數值會解譯為 1930，而 2 位數為 29 值解譯為 2029年。       ToFourDigitYear 支援兩位數年份或四位數年份。 傳遞的兩位數年份值 (小於 100) 將使這個方法將值轉換為四位數的值根據<xref:System.Globalization.GregorianCalendar.TwoDigitYearMax%2A>值，表示該適當世紀。</xref:System.Globalization.GregorianCalendar.TwoDigitYearMax%2A> 如果應用程式提供 ToFourDigitYear 支援行事曆範圍內的四位數年份值，則方法會傳回實際的輸入的值。 如果應用程式提供支援的行事曆範圍四位數值或它提供一個負數值，方法會擲回例外狀況。"
  syntax:
    content: public override int ToFourDigitYear (int year);
    parameters:
    - id: year
      type: System.Int32
      description: "兩位數或四位數的整數，表示要轉換的年份。"
    return:
      type: System.Int32
      description: "整數，其中包含的四位數表示<code> year </code>。"
  overload: System.Globalization.GregorianCalendar.ToFourDigitYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>為曆法所支援的範圍之外。"
  platform:
  - net462
- uid: System.Globalization.GregorianCalendar.TwoDigitYearMax
  id: TwoDigitYearMax
  parent: System.Globalization.GregorianCalendar
  langs:
  - csharp
  name: TwoDigitYearMax
  nameWithType: GregorianCalendar.TwoDigitYearMax
  fullName: System.Globalization.GregorianCalendar.TwoDigitYearMax
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "取得或設定以 2 位數年份表示時，該 100 年範圍的最後一年。"
  remarks: "這個屬性允許 2 位數的年份的 4 位數年份正確轉譯。 例如，如果這個屬性設定為 2029年，100 年範圍是從 1930年到 2029年。 因此，30 的 2 位數值會解譯為 1930，而 2 位數為 29 值解譯為 2029年。       這個屬性的起始值被衍生自 控制台 的地區及語言選項 部分中的設定。 不過，該資訊可以變更<xref:System.AppDomain>.</xref:System.AppDomain>的存留期間 <xref:System.Globalization.GregorianCalendar>類別不會偵測系統設定中變更自動。</xref:System.Globalization.GregorianCalendar>       應用程式應將此值為 99，表示就其字面 2 位數的年份。 例如，這個屬性設定為 99，100 年範圍是從 0 （不是有效值大部分的行事曆） 到 99。 因此，30 的 2 位數值會解譯為 30。"
  syntax:
    content: public override int TwoDigitYearMax { get; set; }
    return:
      type: System.Int32
      description: "以 2 位數年份表示時，該 100 年範圍的最後一年。"
  overload: System.Globalization.GregorianCalendar.TwoDigitYearMax*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "設定作業中指定的值是不超過 99。       -或-設定作業中指定的值大於<xref uid=&quot;langword_csharp_MaxSupportedDateTime.Year&quot; name=&quot;MaxSupportedDateTime.Year&quot; href=&quot;&quot;> </xref>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在設定作業中，目前的執行個體是唯讀狀態。"
  platform:
  - net462
references:
- uid: System.Globalization.Calendar
  isExternal: false
  name: System.Globalization.Calendar
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Globalization.GregorianCalendar.#ctor
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GregorianCalendar()
  nameWithType: GregorianCalendar.GregorianCalendar()
  fullName: System.Globalization.GregorianCalendar.GregorianCalendar()
- uid: System.Globalization.GregorianCalendar.#ctor(System.Globalization.GregorianCalendarTypes)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GregorianCalendar(GregorianCalendarTypes)
  nameWithType: GregorianCalendar.GregorianCalendar(GregorianCalendarTypes)
  fullName: System.Globalization.GregorianCalendar.GregorianCalendar(GregorianCalendarTypes)
- uid: System.Globalization.GregorianCalendarTypes
  parent: System.Globalization
  isExternal: false
  name: GregorianCalendarTypes
  nameWithType: GregorianCalendarTypes
  fullName: System.Globalization.GregorianCalendarTypes
- uid: System.Globalization.GregorianCalendar.AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: AddMonths(DateTime,Int32)
  nameWithType: GregorianCalendar.AddMonths(DateTime,Int32)
  fullName: System.Globalization.GregorianCalendar.AddMonths(DateTime,Int32)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.GregorianCalendar.AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: AddYears(DateTime,Int32)
  nameWithType: GregorianCalendar.AddYears(DateTime,Int32)
  fullName: System.Globalization.GregorianCalendar.AddYears(DateTime,Int32)
- uid: System.Globalization.GregorianCalendar.ADEra
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: ADEra
  nameWithType: GregorianCalendar.ADEra
  fullName: System.Globalization.GregorianCalendar.ADEra
- uid: System.Globalization.GregorianCalendar.AlgorithmType
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: AlgorithmType
  nameWithType: GregorianCalendar.AlgorithmType
  fullName: System.Globalization.GregorianCalendar.AlgorithmType
- uid: System.Globalization.CalendarAlgorithmType
  parent: System.Globalization
  isExternal: false
  name: CalendarAlgorithmType
  nameWithType: CalendarAlgorithmType
  fullName: System.Globalization.CalendarAlgorithmType
- uid: System.Globalization.GregorianCalendar.CalendarType
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: CalendarType
  nameWithType: GregorianCalendar.CalendarType
  fullName: System.Globalization.GregorianCalendar.CalendarType
- uid: System.Globalization.GregorianCalendar.Eras
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: Eras
  nameWithType: GregorianCalendar.Eras
  fullName: System.Globalization.GregorianCalendar.Eras
- uid: System.Int32[]
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetDayOfMonth(DateTime)
  nameWithType: GregorianCalendar.GetDayOfMonth(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetDayOfMonth(DateTime)
- uid: System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetDayOfWeek(DateTime)
  nameWithType: GregorianCalendar.GetDayOfWeek(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetDayOfWeek(DateTime)
- uid: System.DayOfWeek
  parent: System
  isExternal: true
  name: DayOfWeek
  nameWithType: DayOfWeek
  fullName: System.DayOfWeek
- uid: System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetDayOfYear(DateTime)
  nameWithType: GregorianCalendar.GetDayOfYear(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetDayOfYear(DateTime)
- uid: System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetDaysInMonth(Int32,Int32,Int32)
  nameWithType: GregorianCalendar.GetDaysInMonth(Int32,Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.GetDaysInMonth(Int32,Int32,Int32)
- uid: System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetDaysInYear(Int32,Int32)
  nameWithType: GregorianCalendar.GetDaysInYear(Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.GetDaysInYear(Int32,Int32)
- uid: System.Globalization.GregorianCalendar.GetEra(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetEra(DateTime)
  nameWithType: GregorianCalendar.GetEra(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetEra(DateTime)
- uid: System.Globalization.GregorianCalendar.GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetLeapMonth(Int32,Int32)
  nameWithType: GregorianCalendar.GetLeapMonth(Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.GetLeapMonth(Int32,Int32)
- uid: System.Globalization.GregorianCalendar.GetMonth(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetMonth(DateTime)
  nameWithType: GregorianCalendar.GetMonth(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetMonth(DateTime)
- uid: System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetMonthsInYear(Int32,Int32)
  nameWithType: GregorianCalendar.GetMonthsInYear(Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.GetMonthsInYear(Int32,Int32)
- uid: System.Globalization.GregorianCalendar.GetYear(System.DateTime)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetYear(DateTime)
  nameWithType: GregorianCalendar.GetYear(DateTime)
  fullName: System.Globalization.GregorianCalendar.GetYear(DateTime)
- uid: System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: IsLeapDay(Int32,Int32,Int32,Int32)
  nameWithType: GregorianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: IsLeapMonth(Int32,Int32,Int32)
  nameWithType: GregorianCalendar.IsLeapMonth(Int32,Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.IsLeapMonth(Int32,Int32,Int32)
- uid: System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: IsLeapYear(Int32,Int32)
  nameWithType: GregorianCalendar.IsLeapYear(Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.IsLeapYear(Int32,Int32)
- uid: System.Globalization.GregorianCalendar.MaxSupportedDateTime
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: MaxSupportedDateTime
  nameWithType: GregorianCalendar.MaxSupportedDateTime
  fullName: System.Globalization.GregorianCalendar.MaxSupportedDateTime
- uid: System.Globalization.GregorianCalendar.MinSupportedDateTime
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: MinSupportedDateTime
  nameWithType: GregorianCalendar.MinSupportedDateTime
  fullName: System.Globalization.GregorianCalendar.MinSupportedDateTime
- uid: System.Globalization.GregorianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: GregorianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Globalization.GregorianCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
- uid: System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: ToFourDigitYear(Int32)
  nameWithType: GregorianCalendar.ToFourDigitYear(Int32)
  fullName: System.Globalization.GregorianCalendar.ToFourDigitYear(Int32)
- uid: System.Globalization.GregorianCalendar.TwoDigitYearMax
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: TwoDigitYearMax
  nameWithType: GregorianCalendar.TwoDigitYearMax
  fullName: System.Globalization.GregorianCalendar.TwoDigitYearMax
- uid: System.Globalization.GregorianCalendar.#ctor*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GregorianCalendar
  nameWithType: GregorianCalendar.GregorianCalendar
- uid: System.Globalization.GregorianCalendar.AddMonths*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: AddMonths
  nameWithType: GregorianCalendar.AddMonths
- uid: System.Globalization.GregorianCalendar.AddYears*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: AddYears
  nameWithType: GregorianCalendar.AddYears
- uid: System.Globalization.GregorianCalendar.AlgorithmType*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: AlgorithmType
  nameWithType: GregorianCalendar.AlgorithmType
- uid: System.Globalization.GregorianCalendar.CalendarType*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: CalendarType
  nameWithType: GregorianCalendar.CalendarType
- uid: System.Globalization.GregorianCalendar.Eras*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: Eras
  nameWithType: GregorianCalendar.Eras
- uid: System.Globalization.GregorianCalendar.GetDayOfMonth*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetDayOfMonth
  nameWithType: GregorianCalendar.GetDayOfMonth
- uid: System.Globalization.GregorianCalendar.GetDayOfWeek*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetDayOfWeek
  nameWithType: GregorianCalendar.GetDayOfWeek
- uid: System.Globalization.GregorianCalendar.GetDayOfYear*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetDayOfYear
  nameWithType: GregorianCalendar.GetDayOfYear
- uid: System.Globalization.GregorianCalendar.GetDaysInMonth*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetDaysInMonth
  nameWithType: GregorianCalendar.GetDaysInMonth
- uid: System.Globalization.GregorianCalendar.GetDaysInYear*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetDaysInYear
  nameWithType: GregorianCalendar.GetDaysInYear
- uid: System.Globalization.GregorianCalendar.GetEra*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetEra
  nameWithType: GregorianCalendar.GetEra
- uid: System.Globalization.GregorianCalendar.GetLeapMonth*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetLeapMonth
  nameWithType: GregorianCalendar.GetLeapMonth
- uid: System.Globalization.GregorianCalendar.GetMonth*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetMonth
  nameWithType: GregorianCalendar.GetMonth
- uid: System.Globalization.GregorianCalendar.GetMonthsInYear*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetMonthsInYear
  nameWithType: GregorianCalendar.GetMonthsInYear
- uid: System.Globalization.GregorianCalendar.GetYear*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: GetYear
  nameWithType: GregorianCalendar.GetYear
- uid: System.Globalization.GregorianCalendar.IsLeapDay*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: IsLeapDay
  nameWithType: GregorianCalendar.IsLeapDay
- uid: System.Globalization.GregorianCalendar.IsLeapMonth*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: IsLeapMonth
  nameWithType: GregorianCalendar.IsLeapMonth
- uid: System.Globalization.GregorianCalendar.IsLeapYear*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: IsLeapYear
  nameWithType: GregorianCalendar.IsLeapYear
- uid: System.Globalization.GregorianCalendar.MaxSupportedDateTime*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: MaxSupportedDateTime
  nameWithType: GregorianCalendar.MaxSupportedDateTime
- uid: System.Globalization.GregorianCalendar.MinSupportedDateTime*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: MinSupportedDateTime
  nameWithType: GregorianCalendar.MinSupportedDateTime
- uid: System.Globalization.GregorianCalendar.ToDateTime*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: ToDateTime
  nameWithType: GregorianCalendar.ToDateTime
- uid: System.Globalization.GregorianCalendar.ToFourDigitYear*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: ToFourDigitYear
  nameWithType: GregorianCalendar.ToFourDigitYear
- uid: System.Globalization.GregorianCalendar.TwoDigitYearMax*
  parent: System.Globalization.GregorianCalendar
  isExternal: false
  name: TwoDigitYearMax
  nameWithType: GregorianCalendar.TwoDigitYearMax
