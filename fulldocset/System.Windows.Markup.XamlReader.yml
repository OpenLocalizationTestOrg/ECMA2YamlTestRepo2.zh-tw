### YamlMime:ManagedReference
items:
- uid: System.Windows.Markup.XamlReader
  id: XamlReader
  children:
  - System.Windows.Markup.XamlReader.#ctor
  - System.Windows.Markup.XamlReader.CancelAsync
  - System.Windows.Markup.XamlReader.GetWpfSchemaContext
  - System.Windows.Markup.XamlReader.Load(System.IO.Stream)
  - System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)
  - System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)
  - System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)
  - System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)
  - System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)
  - System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)
  - System.Windows.Markup.XamlReader.LoadCompleted
  - System.Windows.Markup.XamlReader.Parse(System.String)
  - System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)
  langs:
  - csharp
  name: XamlReader
  nameWithType: XamlReader
  fullName: System.Windows.Markup.XamlReader
  type: Class
  summary: "讀取 XAML 輸入並建立使用 WPF 預設 XAML 讀取器和相關聯的 XAML 物件寫入器的物件圖形。"
  remarks: "同步<xref:System.Windows.Markup.XamlReader.Load%2A>方法是靜態的但非同步<xref:System.Windows.Markup.XamlReader.LoadAsync%2A>方法不是靜態的而且需要使用 XamlReader 類別的執行個體。</xref:System.Windows.Markup.XamlReader.LoadAsync%2A> </xref:System.Windows.Markup.XamlReader.Load%2A>       輸出`Load`方法為單一物件，表示樹狀目錄中建立的物件或物件圖形的根物件。 物件圖形建立的 XamlReader 通常會加入到現有的物件樹狀結構的 WPF 應用程式在執行階段。 否則新的物件圖形視為中斷連線的 WPF 應用程式模型的用途。 這表示不會呈現，而且無法存取使用任何的物件樹狀結構方法，以套用至 WPF 應用程式的主要物件樹狀結構 (例如，應用程式開發介面<xref:System.Windows.FrameworkElement.FindName%2A>， <xref:System.Windows.LogicalTreeHelper>， <xref:System.Windows.Media.VisualTreeHelper>)。</xref:System.Windows.Media.VisualTreeHelper> </xref:System.Windows.LogicalTreeHelper> </xref:System.Windows.FrameworkElement.FindName%2A> 如需有關物件樹狀結構的概念的詳細資訊，請參閱[中 WPF 樹狀架構](~/add/includes/ajax-current-ext-md.md)。       XamlReader 支援下列主要案例:-**複製/物件 factory**︰ 沒有其他的機制，參考類型通常不能包含在 WPF 物件樹狀結構中的多個位置。 (其他的機制，提供共用的支援，或在 WPF 中重複使用的範例包括物件為基礎的<xref:System.Windows.Freezable>，或支援通常可共用的物件，例如<xref:System.Windows.Media.Brush>為從一個項目所參考之<xref:System.Windows.ResourceDictionary>。)</xref:System.Windows.ResourceDictionary> </xref:System.Windows.Media.Brush> </xref:System.Windows.Freezable>若要複製的物件已經在物件樹狀結構中的一種方式為序列化使用<xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=fullName>.</xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=fullName>物件 用於序列化的字串做為輸入呼叫<xref:System.Windows.Markup.XamlReader.Load%2A>，與資料流或<xref:System.Xml.XmlReader>做為媒介。</xref:System.Xml.XmlReader> </xref:System.Windows.Markup.XamlReader.Load%2A>      -**建構物件會根據在 just-in-time 資訊**︰ 通常是其他的方式有晚期繫結或使用者提供輸入變更現有物件的狀態。 例如您無法使用相同的值來設定多個屬性，或使用資料繫結。 如果您有的案例，其中甚至建立物件的類型是僅判斷在執行階段或使用者互動，然後建立這類物件建置的字串，但是<xref:System.Windows.Markup.XamlReader.Load%2A>輸入通常是一個實用的方法。</xref:System.Windows.Markup.XamlReader.Load%2A>      -**使用現有的資源技術**:<xref:System.IO.Stream>型別用於經常在於其他 framework 或技術傳送跨應用程式界限的資料或物件或類似的情況。</xref:System.IO.Stream> 然後您可以使用<xref:System.IO.Stream>技術來儲存，或取得 XAML 格式的資料，最後使用建立的物件做為您的應用程式的一部分。</xref:System.IO.Stream>      -**固定文件︰**您的應用程式可能會載入包含在 WPF 應用程式物件樹狀結構和 UI 中的本機或下載 XPS 文件。      > [!NOTE] > 這份文件有時會描述物件圖形，而不是物件樹狀結構。 嚴格的父子式關聯性不一律存在於執行的階段物件關聯性的執行的階段 WPF 應用程式，因此物件圖形是更廣泛套用的術語。 不過，因為 WPF 還包含兩個不同的樹狀目錄概念化應用程式開發介面 (<xref:System.Windows.LogicalTreeHelper>， <xref:System.Windows.Media.VisualTreeHelper>) 樹狀目錄象徵仍適用於適當地在 WPF 中大部分的真實情況。</xref:System.Windows.Media.VisualTreeHelper> </xref:System.Windows.LogicalTreeHelper> 從 XAML 語言的觀點來看，物件圖形其實通常思考如何從 XAML，會建立物件本身為 XAML 語言不一定會指定關聯性樹狀結構至多個再次顯示的 helper 類別方法的最佳方式。      ## 程式碼存取安全性、 鬆散的 XAML 和 XamlReader XAML 是直接代表物件具現化和執行的標記語言。 因此，在 XAML 中建立的項目就可以進行互動的系統資源 （例如，網路存取、 檔案系統的 IO，） 做為對等項目產生程式碼的功能。       [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]支援[!INCLUDE[TLA2#tla_net](~/add/includes/tla2sharptla-net-md.md)]安全性架構[!INCLUDE[TLA#tla_cas](~/add/includes/tlasharptla-cas-md.md)]。 這表示[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]網際網路區域中執行的內容已降低執行權限。 「 鬆散的 XAML 」 （file XAML 頁面解譯 XAML 檢視器在載入時間） 和[!INCLUDE[TLA#tla_xbap](~/add/includes/tlasharptla-xbap-md.md)]通常會執行這個網際網路區域中，並使用相同的權限集合。  不過，完全受信任的應用程式中載入的 XAML 一樣都裝載的應用程式具有相同存取權的系統資源。 如需詳細資訊，請參閱[WPF 部分信任安全性](~/add/includes/ajax-current-ext-md.md)。       這些陳述式造成的影響 XamlReader 是應用程式的設計必須讓您決定要載入的 XAML 相關的信任決策。 如果您載入未受信任的 XAML，請考慮實作您自己的沙箱技術的載入結果的物件圖形的方式。       XamlReader 也可以呼叫由部分信任程式碼。 在此情況下，網際網路安全性區域就會套用程式碼存取安全性。 如果在載入的 XAML 中的任何項目無效網際網路安全性區域底下，XAML 剖析例外狀況會擲回。 XBAP 和其他平台層級，其中 XamlReader 是在執行期間，在部分信任的案例下，您會取得例外狀況與相同的行為與明確的部分信任的呼叫。      ## WPF XAML、 XAML 讀取器/寫入器和 XAML 的語言版本控制[!INCLUDE[xaml2009](~/add/includes/xaml2009-md.md)]包含語言功能，例如與。 您可以使用的簽章`Load`或`Parse`載入會使用這些功能的 XAML。 不過，這些語言功能不支援，需要進行標記編譯 xaml (例如 XAML**頁面**建置 WPF 應用程式或建置動作以標記編譯工作牽涉到任何 XAML 中的動作)。       WPF 型別和 WPF 技術通常支援依賴存取可 WPF 內部的概念。 比方說，WPF 會相依性屬性的實作依賴內部技術有效率的型別成員查閱。 存取這些內部項目會啟用讀取和寫入應用程式開發介面中提供的 XAML<xref:System.Windows.Markup.XamlWriter>和從 XamlReader<xref:System.Windows.Markup>命名空間和 PresentationFramework 組件。</xref:System.Windows.Markup> </xref:System.Windows.Markup.XamlWriter> 不過，較低層級的 XAML 讀取器和 XAML 寫入器透過 System.Xaml 組件 (類別根據<xref:System.Xaml.XamlReader?displayProperty=fullName>， <xref:System.Xaml.XamlWriter?displayProperty=fullName>) 沒有 WPF 內部資訊的存取。</xref:System.Xaml.XamlWriter?displayProperty=fullName> </xref:System.Xaml.XamlReader?displayProperty=fullName> 沒有任何特定的 WPF 組件從 System.Xaml 相依性。 如果沒有 WPF 內部存取，System.Xaml 讀取器和寫入器無法正確載入或儲存所有 WPF 類型根據 WPF 類型。 特別是，System.Xaml 讀取器和寫入器不了解概念，例如支援屬性存放區或所有的細節 WPF 會使用樣式、 資源字典和範本的 WPF 相依性屬性。 因此，您必須選擇来讓:-如果您正在載入 WPF 類型，及/或您使用 XAML 中的任何方式 BAML 形式使用 PresentationFramework XAML 讀取器和 XAML 寫入器。      -如果您不依賴任何 WPF 類型或 BAML 形式的 XAML，並不使用另一種特定技術的 XAML 讀取器或 XAML 寫入器實作專屬於該架構的原因，請使用 System.Xaml XAML 讀取器和 XAML 寫入器。      ## 在.NET 4 XamlReader System.Xaml 備份實作是 WPF 架構層級 XAML 剖析器可呼叫的 API 介面。 相同的基礎 XAML 剖析器也會執行載入及剖析 WPF 應用程式為目標的執行階段 XAML[!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)]和[!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)]。       如果您的目標[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]，外部應用程式開發介面都相同，但實作的部分之上[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]System.Xaml 組件，可改善剖析 XAML 的技術和報告方面的許多一般 XAML 實作。 目標[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]一定需要包括 System.Xaml 的參考，以及實作的詳細資料，例如例外狀況的報告可能來自於 System.Xaml 中定義型別。      <a name=&quot;xamlTextUsage_XamlReader&quot;></a># # XAML 文字用法"
  example:
  - "The following example converts a <xref:System.Windows.Controls.Button> into a string using the <xref:System.Windows.Markup.XamlWriter> class.  The string is then loaded back into a <xref:System.Windows.Controls.Button> using the static <xref:System.Windows.Markup.XamlReader.Load%2A> method on the XamlReader class.  \n  \n [!code-cs[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/add/codesnippet/csharp/XamlReaderWriterSnippets/Window1.xaml.cs#xamlreaderloadxmlreader)]\n [!code-vb[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/add/codesnippet/visualbasic/xamlreaderwritersnippets/window1.xaml.vb#xamlreaderloadxmlreader)]"
  syntax:
    content: public class XamlReader
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.#ctor
  id: '#ctor'
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: XamlReader()
  nameWithType: XamlReader.XamlReader()
  fullName: System.Windows.Markup.XamlReader.XamlReader()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.Markup.XamlReader&quot;></xref>類別。"
  syntax:
    content: public XamlReader ();
    parameters: []
  overload: System.Windows.Markup.XamlReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.CancelAsync
  id: CancelAsync
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: CancelAsync()
  nameWithType: XamlReader.CancelAsync()
  fullName: System.Windows.Markup.XamlReader.CancelAsync()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "中止目前非同步載入作業，如果有暫止的非同步載入作業。"
  remarks: "CancelAsync 是非同步作業;因此，在作業中止之前，可能會發生部分載入。"
  syntax:
    content: public void CancelAsync ();
    parameters: []
  overload: System.Windows.Markup.XamlReader.CancelAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.GetWpfSchemaContext
  id: GetWpfSchemaContext
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: GetWpfSchemaContext()
  nameWithType: XamlReader.GetWpfSchemaContext()
  fullName: System.Windows.Markup.XamlReader.GetWpfSchemaContext()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "傳回<xref href=&quot;System.Xaml.XamlSchemaContext&quot;></xref>物件，代表 WPF 結構描述內容設定為<xref href=&quot;System.Windows.Markup.XamlReader&quot;> </xref>。"
  syntax:
    content: public static System.Xaml.XamlSchemaContext GetWpfSchemaContext ();
    parameters: []
    return:
      type: System.Xaml.XamlSchemaContext
      description: "A <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>物件，代表 WPF 結構描述內容設定為<xref href=&quot;System.Windows.Markup.XamlReader&quot;> </xref>。"
  overload: System.Windows.Markup.XamlReader.GetWpfSchemaContext*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Load(System.IO.Stream)
  id: Load(System.IO.Stream)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Load(Stream)
  nameWithType: XamlReader.Load(Stream)
  fullName: System.Windows.Markup.XamlReader.Load(Stream)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "讀取指定的 XAML 輸入<xref:System.IO.Stream>並傳回<xref:System.Object>也就是對應的物件樹狀結構的根目錄。</xref:System.Object> </xref:System.IO.Stream>"
  remarks: ''
  example:
  - "The following example saves a <xref:System.Windows.Controls.Button> into a <xref:System.IO.MemoryStream> using the <xref:System.Windows.Markup.XamlWriter> class. The stream is then loaded back into a <xref:System.Windows.Controls.Button> using the static <xref:System.Windows.Markup.XamlReader.Load%2A> method on the <xref:System.Windows.Markup.XamlReader> class.  \n  \n [!code-cs[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/add/codesnippet/csharp/XamlReaderWriterSnippets/Window1.xaml.cs#xamlreaderloadxmlreader)]\n [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/add/codesnippet/visualbasic/xamlreaderwritersnippets/window1.xaml.vb#xamlreaderloadxmlreader)]"
  syntax:
    content: public static object Load (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "若要載入，資料流的形式的 XAML。"
    return:
      type: System.Object
      description: "在建立的物件樹狀結構的根物件。"
  overload: System.Windows.Markup.XamlReader.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)
  id: Load(System.Xaml.XamlReader)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Load(XamlReader)
  nameWithType: XamlReader.Load(XamlReader)
  fullName: System.Windows.Markup.XamlReader.Load(XamlReader)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "讀取透過提供 XAML 輸入<xref href=&quot;System.Xaml.XamlReader&quot;></xref>並傳回對應的物件樹狀結構根目錄的物件。"
  remarks: "<xref:System.Xaml.XamlReader>可以是<xref:System.Windows.Baml2006.Baml2006Reader>.</xref:System.Windows.Baml2006.Baml2006Reader></xref:System.Xaml.XamlReader>輸入 這是在執行階段，或當地語系化工具的目的而言，如何載入 BAML。"
  syntax:
    content: public static object Load (System.Xaml.XamlReader reader);
    parameters:
    - id: reader
      type: System.Xaml.XamlReader
      description: "A <xref href=&quot;System.Xaml.XamlReader&quot;></xref> object. 初始化具有輸入 XAML，這是預期行為。"
    return:
      type: System.Object
      description: "所建立的物件樹狀目錄的根目錄的物件。"
  overload: System.Windows.Markup.XamlReader.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)
  id: Load(System.Xml.XmlReader)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Load(XmlReader)
  nameWithType: XamlReader.Load(XmlReader)
  fullName: System.Windows.Markup.XamlReader.Load(XmlReader)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "讀取指定的 XAML 輸入<xref:System.Xml.XmlReader>並傳回物件，對應的物件樹狀結構的根目錄。</xref:System.Xml.XmlReader>"
  remarks: ''
  example:
  - "The following example converts a <xref:System.Windows.Controls.Button> into a string using the <xref:System.Windows.Markup.XamlWriter> class.  The string is then loaded back into a <xref:System.Windows.Controls.Button> using the static <xref:System.Windows.Markup.XamlReader.Load%2A> method on the <xref:System.Windows.Markup.XamlReader> class.  \n  \n [!code-cs[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/add/codesnippet/csharp/XamlReaderWriterSnippets/Window1.xaml.cs#xamlreaderloadxmlreader)]\n [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/add/codesnippet/visualbasic/xamlreaderwritersnippets/window1.xaml.vb#xamlreaderloadxmlreader)]"
  syntax:
    content: public static object Load (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>，已經載入輸入 XML 表單中載入的 XAML。</xref:System.Xml.XmlReader>"
    return:
      type: System.Object
      description: "所建立的物件樹狀目錄的根目錄的物件。"
  overload: System.Windows.Markup.XamlReader.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)
  id: Load(System.IO.Stream,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Load(Stream,ParserContext)
  nameWithType: XamlReader.Load(Stream,ParserContext)
  fullName: System.Windows.Markup.XamlReader.Load(Stream,ParserContext)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "讀取指定的 XAML 輸入<xref:System.IO.Stream>並傳回物件，對應的物件樹狀結構的根目錄。</xref:System.IO.Stream>"
  syntax:
    content: public static object Load (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "包含 XAML 輸入載入的資料流。"
    - id: parserContext
      type: System.Windows.Markup.ParserContext
      description: "剖析器使用的內容資訊。"
    return:
      type: System.Object
      description: "所建立的物件樹狀目錄的根目錄的物件。"
  overload: System.Windows.Markup.XamlReader.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>parserContext</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)
  id: LoadAsync(System.IO.Stream)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: LoadAsync(Stream)
  nameWithType: XamlReader.LoadAsync(Stream)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(Stream)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "讀取指定的 XAML 輸入<xref:System.IO.Stream>並傳回對應的物件樹狀結構的根目錄。</xref:System.IO.Stream>"
  remarks: "非同步的 XAML 載入作業一開始會傳回單純的根物件的物件。 以非同步的方式，XAML 剖析然後仍繼續，和任何子物件會填入根目錄下。 這是相較於一般的 WPF XAML 處理行為以及其與互動的物件存留期的 WPF 概念。 一般 （非同步） 互動，包括所有子物件的所有屬性會傳回項目，並報告其在載入之前都填入。 該行為等同於建立樹狀結構的根物件所在的最後一個物件變成可用的由下而上的方法。       通常會將傳回的物件指派給 WPF 應用程式的物件樹狀結構中有些位置、 內容的知識可能仍然會填入，如果 UI 的一部分公開的整個內容可能會造成累加配置更新。 基於這個原因是隔離，或將虛擬化 xaml，任何以非同步方式載入的物件，並使用特定應用程式邏輯或應用程式狀態通知時，一般<xref:System.Windows.Markup.XamlReader.LoadCompleted>處理。</xref:System.Windows.Markup.XamlReader.LoadCompleted>       為了讓 LoadAsync 以非同步方式載入的 XAML 輸入 XAML 中的根項目輸入必須包含的屬性和值`x:SynchronousMode=&quot;Async&quot;`。 此值視為區分大小寫。 如果不包含 XAML 輸入的根`x:SynchronousMode=&quot;Async&quot;`、 擲回任何例外狀況，以及同步負載處理呼叫 (請參閱<xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>)。</xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>       每個執行個體只有一個非同步載入作業<xref:System.Windows.Markup.XamlReader>類別可以執行一次。</xref:System.Windows.Markup.XamlReader>  如果多個非同步作業會嘗試在相同的執行個體上<xref:System.Windows.Markup.XamlReader>類別<xref:System.InvalidOperationException>就會擲回。</xref:System.InvalidOperationException> </xref:System.Windows.Markup.XamlReader>"
  syntax:
    content: public object LoadAsync (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "包含 XAML 輸入載入的資料流。"
    return:
      type: System.Object
      description: "所建立的物件樹狀目錄的根目錄的物件。"
  overload: System.Windows.Markup.XamlReader.LoadAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "正在暫止多個負載作業與相同同時<xref href=&quot;System.Windows.Markup.XamlReader&quot;> </xref>。"
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)
  id: LoadAsync(System.Xml.XmlReader)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: LoadAsync(XmlReader)
  nameWithType: XamlReader.LoadAsync(XmlReader)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(XmlReader)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "讀取指定的 XAML 輸入<xref:System.Xml.XmlReader>並傳回對應的物件樹狀結構的根目錄。</xref:System.Xml.XmlReader>"
  remarks: "非同步的 XAML 載入作業一開始會傳回單純的根物件的物件。 以非同步的方式，XAML 剖析然後仍繼續，和任何子物件會填入根目錄下。 這是相較於一般的 WPF XAML 處理行為以及其與互動的物件存留期的 WPF 概念。 一般 （非同步） 互動，包括所有子物件的所有屬性會傳回項目，並報告其在載入之前都填入。 該行為等同於建立樹狀結構的根物件所在的最後一個物件變成可用的由下而上的方法。       通常會就會將從 LoadAsync 傳回的物件指派給您的應用程式物件樹狀結構中的某些位置、 內容的知識可能仍然會填入，如果 UI 的一部分公開的整個內容可能會造成累加配置更新。 基於這個原因是隔離，或將虛擬化 xaml，任何以非同步方式載入的物件，並使用特定應用程式邏輯或應用程式狀態通知時，一般<xref:System.Windows.Markup.XamlReader.LoadCompleted>處理。</xref:System.Windows.Markup.XamlReader.LoadCompleted>       為了讓 LoadAsync 載入 XAML 輸入以非同步的方式，在 XAML 標記中的根項目必須包含的屬性和值`x:SynchronousMode=&quot;Async&quot;`。 此值視為區分大小寫。 如果不包含 XAML 標記根`x:SynchronousMode=&quot;Async&quot;`、 擲回任何例外狀況，以及同步負載改為處理的呼叫 (請參閱<xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>)。</xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>       每個執行個體只有一個非同步載入作業<xref:System.Windows.Markup.XamlReader>類別可以執行一次。</xref:System.Windows.Markup.XamlReader>  如果多個非同步作業會嘗試在相同的執行個體上<xref:System.Windows.Markup.XamlReader>類別<xref:System.InvalidOperationException>就會擲回。</xref:System.InvalidOperationException> </xref:System.Windows.Markup.XamlReader>"
  syntax:
    content: public object LoadAsync (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "現有<xref:System.Xml.XmlReader>，具有已載入/讀取 XAML 輸入。</xref:System.Xml.XmlReader>"
    return:
      type: System.Object
      description: "建立的物件樹狀目錄的根目錄。"
  overload: System.Windows.Markup.XamlReader.LoadAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "多個載入作業將會與相同同時<xref href=&quot;System.Windows.Markup.XamlReader&quot;> </xref>。"
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)
  id: LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: LoadAsync(Stream,ParserContext)
  nameWithType: XamlReader.LoadAsync(Stream,ParserContext)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(Stream,ParserContext)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "讀取指定的 XAML 輸入<xref:System.IO.Stream>並傳回對應的物件樹狀結構的根目錄。</xref:System.IO.Stream>"
  remarks: "非同步的 XAML 載入作業一開始會傳回單純的根物件的物件。 以非同步的方式，XAML 剖析然後仍繼續，和任何子物件會填入根目錄下。 這是相較於一般的 WPF XAML 處理行為以及其與互動的物件存留期的 WPF 概念。 一般 （非同步） 互動，包括所有子物件的所有屬性會傳回項目，並報告其在載入之前都填入。 該行為等同於建立樹狀結構的根物件所在的最後一個物件變成可用的由下而上的方法。       通常會將傳回的物件指派給您的應用程式物件樹狀結構中有些位置、 內容的知識可能仍然會填入，如果 UI 的一部分公開的整個內容可能會造成累加配置更新。 基於這個原因是隔離，或將虛擬化 xaml，任何以非同步方式載入的物件，並使用特定應用程式邏輯或應用程式狀態通知時，一般<xref:System.Windows.Markup.XamlReader.LoadCompleted>處理。</xref:System.Windows.Markup.XamlReader.LoadCompleted>       為了讓 LoadAsync 以非同步方式載入標記，在 XAML 標記中的根項目必須包含的屬性和值`x:SynchronousMode=&quot;Async&quot;`。 此值視為區分大小寫。 如果不包含 XAML 標記根`x:SynchronousMode=&quot;Async&quot;`、 擲回任何例外狀況，以及同步負載處理呼叫 (請參閱<xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>)。</xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>       每個執行個體只有一個非同步載入作業<xref:System.Windows.Markup.XamlReader>類別可以執行一次。</xref:System.Windows.Markup.XamlReader>  如果多個非同步作業會嘗試在相同的執行個體上<xref:System.Windows.Markup.XamlReader>類別<xref:System.InvalidOperationException>就會擲回。</xref:System.InvalidOperationException> </xref:System.Windows.Markup.XamlReader>"
  syntax:
    content: public object LoadAsync (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "包含 XAML 輸入載入的資料流。"
    - id: parserContext
      type: System.Windows.Markup.ParserContext
      description: "剖析器使用的內容資訊。"
    return:
      type: System.Object
      description: "建立的物件樹狀目錄的根目錄。"
  overload: System.Windows.Markup.XamlReader.LoadAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "多個載入作業將會與相同同時<xref href=&quot;System.Windows.Markup.XamlReader&quot;> </xref>。"
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.LoadCompleted
  id: LoadCompleted
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: LoadCompleted
  nameWithType: XamlReader.LoadCompleted
  fullName: System.Windows.Markup.XamlReader.LoadCompleted
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "非同步載入作業完成時發生。"
  remarks: "非同步載入作業中止時，也會引發 LoadCompleted。"
  syntax:
    content: public event System.ComponentModel.AsyncCompletedEventHandler LoadCompleted;
    return:
      type: System.ComponentModel.AsyncCompletedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Parse(System.String)
  id: Parse(System.String)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Parse(String)
  nameWithType: XamlReader.Parse(String)
  fullName: System.Windows.Markup.XamlReader.Parse(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "讀取 XAML 輸入中指定的文字字串並傳回對應的物件，指定標記的根目錄。"
  remarks: "實作會呼叫<xref:System.Windows.Markup.XamlReader.Load%2A>從字串建立的資料流之後，在內部。</xref:System.Windows.Markup.XamlReader.Load%2A> 請參閱<xref:System.Windows.Markup.XamlReader.Load%2A>如需詳細資訊，例如可能的例外狀況。</xref:System.Windows.Markup.XamlReader.Load%2A>"
  syntax:
    content: public static object Parse (string xamlText);
    parameters:
    - id: xamlText
      type: System.String
      description: "輸入 XAML 中，為單一文字字串。"
    return:
      type: System.Object
      description: "建立的物件樹狀目錄的根目錄。"
  overload: System.Windows.Markup.XamlReader.Parse*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)
  id: Parse(System.String,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Parse(String,ParserContext)
  nameWithType: XamlReader.Parse(String,ParserContext)
  fullName: System.Windows.Markup.XamlReader.Parse(String,ParserContext)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "讀取 XAML 標記中指定的文字字串 (使用指定<xref href=&quot;System.Windows.Markup.ParserContext&quot;> </xref>)，並傳回對應的物件，指定標記的根目錄。"
  remarks: "實作會呼叫<xref:System.Windows.Markup.XamlReader.Load%2A>從字串建立的資料流之後，在內部。</xref:System.Windows.Markup.XamlReader.Load%2A> 請參閱<xref:System.Windows.Markup.XamlReader.Load%2A>如需詳細資訊，例如可能的例外狀況。</xref:System.Windows.Markup.XamlReader.Load%2A>"
  syntax:
    content: public static object Parse (string xamlText, System.Windows.Markup.ParserContext parserContext);
    parameters:
    - id: xamlText
      type: System.String
      description: "輸入 XAML 中，為單一文字字串。"
    - id: parserContext
      type: System.Windows.Markup.ParserContext
      description: "剖析器使用的內容資訊。"
    return:
      type: System.Object
      description: "建立的物件樹狀目錄的根目錄。"
  overload: System.Windows.Markup.XamlReader.Parse*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Markup.XamlReader.#ctor
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: XamlReader()
  nameWithType: XamlReader.XamlReader()
  fullName: System.Windows.Markup.XamlReader.XamlReader()
- uid: System.Windows.Markup.XamlReader.CancelAsync
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: CancelAsync()
  nameWithType: XamlReader.CancelAsync()
  fullName: System.Windows.Markup.XamlReader.CancelAsync()
- uid: System.Windows.Markup.XamlReader.GetWpfSchemaContext
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: GetWpfSchemaContext()
  nameWithType: XamlReader.GetWpfSchemaContext()
  fullName: System.Windows.Markup.XamlReader.GetWpfSchemaContext()
- uid: System.Xaml.XamlSchemaContext
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
- uid: System.Windows.Markup.XamlReader.Load(System.IO.Stream)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Load(Stream)
  nameWithType: XamlReader.Load(Stream)
  fullName: System.Windows.Markup.XamlReader.Load(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Load(XamlReader)
  nameWithType: XamlReader.Load(XamlReader)
  fullName: System.Windows.Markup.XamlReader.Load(XamlReader)
- uid: System.Xaml.XamlReader
  parent: System.Xaml
  isExternal: false
  name: XamlReader
  nameWithType: XamlReader
  fullName: System.Xaml.XamlReader
- uid: System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Load(XmlReader)
  nameWithType: XamlReader.Load(XmlReader)
  fullName: System.Windows.Markup.XamlReader.Load(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Load(Stream,ParserContext)
  nameWithType: XamlReader.Load(Stream,ParserContext)
  fullName: System.Windows.Markup.XamlReader.Load(Stream,ParserContext)
- uid: System.Windows.Markup.ParserContext
  parent: System.Windows.Markup
  isExternal: false
  name: ParserContext
  nameWithType: ParserContext
  fullName: System.Windows.Markup.ParserContext
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: LoadAsync(Stream)
  nameWithType: XamlReader.LoadAsync(Stream)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(Stream)
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: LoadAsync(XmlReader)
  nameWithType: XamlReader.LoadAsync(XmlReader)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(XmlReader)
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: LoadAsync(Stream,ParserContext)
  nameWithType: XamlReader.LoadAsync(Stream,ParserContext)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(Stream,ParserContext)
- uid: System.Windows.Markup.XamlReader.LoadCompleted
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: LoadCompleted
  nameWithType: XamlReader.LoadCompleted
  fullName: System.Windows.Markup.XamlReader.LoadCompleted
- uid: System.ComponentModel.AsyncCompletedEventHandler
  parent: System.ComponentModel
  isExternal: true
  name: AsyncCompletedEventHandler
  nameWithType: AsyncCompletedEventHandler
  fullName: System.ComponentModel.AsyncCompletedEventHandler
- uid: System.Windows.Markup.XamlReader.Parse(System.String)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Parse(String)
  nameWithType: XamlReader.Parse(String)
  fullName: System.Windows.Markup.XamlReader.Parse(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Parse(String,ParserContext)
  nameWithType: XamlReader.Parse(String,ParserContext)
  fullName: System.Windows.Markup.XamlReader.Parse(String,ParserContext)
- uid: System.Windows.Markup.XamlReader.#ctor*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: XamlReader
  nameWithType: XamlReader.XamlReader
- uid: System.Windows.Markup.XamlReader.CancelAsync*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: CancelAsync
  nameWithType: XamlReader.CancelAsync
- uid: System.Windows.Markup.XamlReader.GetWpfSchemaContext*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: GetWpfSchemaContext
  nameWithType: XamlReader.GetWpfSchemaContext
- uid: System.Windows.Markup.XamlReader.Load*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Load
  nameWithType: XamlReader.Load
- uid: System.Windows.Markup.XamlReader.LoadAsync*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: LoadAsync
  nameWithType: XamlReader.LoadAsync
- uid: System.Windows.Markup.XamlReader.Parse*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Parse
  nameWithType: XamlReader.Parse
