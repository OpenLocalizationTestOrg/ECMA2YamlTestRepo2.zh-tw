### YamlMime:ManagedReference
items:
- uid: System.Data.Linq.Mapping.TableAttribute
  id: TableAttribute
  children:
  - System.Data.Linq.Mapping.TableAttribute.#ctor
  - System.Data.Linq.Mapping.TableAttribute.Name
  langs:
  - csharp
  name: TableAttribute
  nameWithType: TableAttribute
  fullName: System.Data.Linq.Mapping.TableAttribute
  type: Class
  summary: "指定某個類別，為資料庫資料表相關聯的實體類別。"
  remarks: "使用這個屬性來指定某個類別，為資料庫資料表或檢視表相關聯的實體類別。 [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]會將具有 TableAttribute 屬性做為永續性類別的類別。       [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]支援只有單一資料表對應。 也就是說，實體類別必須對應至一個資料庫資料表，而且無法在同一時間將資料庫資料表對應至多個類別。       您可以使用<xref:System.Data.Linq.Mapping.TableAttribute.Name%2A>屬性 TableAttribute 屬性，以指定的名稱資料表，以及您可以選擇性地使用結構描述名稱限定資料表名稱。</xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> 如果您使用未指定名稱<xref:System.Data.Linq.Mapping.TableAttribute.Name%2A>屬性，假設資料表名稱為類別名稱相同。</xref:System.Data.Linq.Mapping.TableAttribute.Name%2A>      ## 結構描述限定名稱您可以選擇性地使用結構描述名稱限定資料表名稱。 根據預設，左邊的第一個週期中的語彙基元<xref:System.Data.Linq.Mapping.TableAttribute.Name%2A>字串會被視為結構描述名稱。</xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> 名稱的其餘部分會被視為資料表名稱。 提供者引號為適當的資料表名稱。 例如， [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] for SQL Server 提供者可確保方括號用至少需要的地方。      > [!NOTE] > 在某些情況下，您必須明確地加上引號的屬性因為 SQL Server 提供者無法自動加上引號。 下表顯示一些範例。      |案例 |範例︰ 識別項名稱 |範例︰ 中必須要有字串屬性 |否則...|  |----------|------------------------------|--------------------------------------------|----------------|  |結構描述名稱包含句點 |結構描述:&quot;A.B&quot;<br /><br /> 資料表:&quot;C&quot;|&quot;[A.B]。C&quot;|第一個週期會假設為分開的資料表名稱的結構描述名稱。 |  |結構描述/資料表名稱開頭為`@`|&quot;@SomeName&quot;|&quot;[@SomeName]&quot;|假設為參數名稱。 |  |結構描述開頭`[`，並結束`]`|&quot;[Schema.Table]&quot;|&quot;[[Schema]。[資料表]]]&quot;|不具引號識別項類似引號識別項。 |  |表格最開始先`[`，並結束`]`|&quot;[資料表]&quot;|&quot;[[Table]]]&quot;|不具引號識別項類似引號識別項。 |"
  example:
  - >-
    [!code-vb[DLinqCustomize#1](~/add/codesnippet/visualbasic/customize/Module1.vb#1)]
     [!code-cs[DLinqCustomize#1](~/add/codesnippet/csharp/customize/Program.cs#1)]
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=false)]

      public sealed class TableAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.TableAttribute.#ctor
  id: '#ctor'
  parent: System.Data.Linq.Mapping.TableAttribute
  langs:
  - csharp
  name: TableAttribute()
  nameWithType: TableAttribute.TableAttribute()
  fullName: System.Data.Linq.Mapping.TableAttribute.TableAttribute()
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "初始化的新執行個體<xref href=&quot;System.Data.Linq.Mapping.TableAttribute&quot;></xref>類別。"
  syntax:
    content: public TableAttribute ();
    parameters: []
  overload: System.Data.Linq.Mapping.TableAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.TableAttribute.Name
  id: Name
  parent: System.Data.Linq.Mapping.TableAttribute
  langs:
  - csharp
  name: Name
  nameWithType: TableAttribute.Name
  fullName: System.Data.Linq.Mapping.TableAttribute.Name
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得或設定資料表或檢視的名稱。"
  remarks: "如果您不使用名稱來指定名稱，則資料表名稱被假設為類別名稱相同。      > [!NOTE] > 您可以選擇性地使用結構描述名稱限定資料表名稱 (例如，Schema3.Table5)。 根據預設，左邊的名稱字串中的第一個週期的語彙基元被視為結構描述名稱，而其餘部分的資料表名稱。       在下列範例中，預設的資料表名稱， `Customer`，變更為`Customers`。"
  example:
  - >-
    [!code-vb[DLinqCustomize#1](~/add/codesnippet/visualbasic/customize/Module1.vb#1)]
     [!code-cs[DLinqCustomize#1](~/add/codesnippet/csharp/customize/Program.cs#1)]
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "根據預設，值會是類別的名稱相同。"
  overload: System.Data.Linq.Mapping.TableAttribute.Name*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Data.Linq.Mapping.TableAttribute.#ctor
  parent: System.Data.Linq.Mapping.TableAttribute
  isExternal: false
  name: TableAttribute()
  nameWithType: TableAttribute.TableAttribute()
  fullName: System.Data.Linq.Mapping.TableAttribute.TableAttribute()
- uid: System.Data.Linq.Mapping.TableAttribute.Name
  parent: System.Data.Linq.Mapping.TableAttribute
  isExternal: false
  name: Name
  nameWithType: TableAttribute.Name
  fullName: System.Data.Linq.Mapping.TableAttribute.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Linq.Mapping.TableAttribute.#ctor*
  parent: System.Data.Linq.Mapping.TableAttribute
  isExternal: false
  name: TableAttribute
  nameWithType: TableAttribute.TableAttribute
- uid: System.Data.Linq.Mapping.TableAttribute.Name*
  parent: System.Data.Linq.Mapping.TableAttribute
  isExternal: false
  name: Name
  nameWithType: TableAttribute.Name
