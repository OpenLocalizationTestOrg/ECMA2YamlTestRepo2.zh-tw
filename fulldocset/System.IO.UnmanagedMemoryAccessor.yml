### YamlMime:ManagedReference
items:
- uid: System.IO.UnmanagedMemoryAccessor
  id: UnmanagedMemoryAccessor
  children:
  - System.IO.UnmanagedMemoryAccessor.#ctor
  - System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)
  - System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  - System.IO.UnmanagedMemoryAccessor.CanRead
  - System.IO.UnmanagedMemoryAccessor.CanWrite
  - System.IO.UnmanagedMemoryAccessor.Capacity
  - System.IO.UnmanagedMemoryAccessor.Dispose
  - System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)
  - System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  - System.IO.UnmanagedMemoryAccessor.IsOpen
  - System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)
  - System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)
  - System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)
  - System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)
  - System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)
  langs:
  - csharp
  name: UnmanagedMemoryAccessor
  nameWithType: UnmanagedMemoryAccessor
  fullName: System.IO.UnmanagedMemoryAccessor
  type: Class
  summary: "對 unmanaged 記憶體區塊提供隨機存取，從 managed 程式碼。"
  remarks: "<xref:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor%2A>方法<xref:System.IO.MemoryMappedFiles.MemoryMappedFile>物件傳回 unmanaged 的記憶體對應檔的檢視所使用的記憶體區塊。</xref:System.IO.MemoryMappedFiles.MemoryMappedFile> </xref:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor%2A>      > [!IMPORTANT] > 這個型別實作<xref:System.IDisposable>介面。</xref:System.IDisposable> 當您完成使用類型時，您應該會處置它直接或間接。 若要直接處置的類型，呼叫其<xref:System.IDisposable.Dispose%2A>方法中的`try` / `catch`區塊。</xref:System.IDisposable.Dispose%2A> 若要為其配置間接，使用語言建構例如`using`（C# 中） 或`Using`（在 Visual Basic)。 如需詳細資訊，請參閱中的 「 使用物件的實作 IDisposable 」 一節<xref:System.IDisposable>介面 > 主題。</xref:System.IDisposable>"
  syntax:
    content: 'public class UnmanagedMemoryAccessor : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.#ctor
  id: '#ctor'
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: UnmanagedMemoryAccessor()
  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor()
  fullName: System.IO.UnmanagedMemoryAccessor.UnmanagedMemoryAccessor()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "初始化的新執行個體<xref href=&quot;System.IO.UnmanagedMemoryAccessor&quot;></xref>類別。"
  syntax:
    content: protected UnmanagedMemoryAccessor ();
    parameters: []
  overload: System.IO.UnmanagedMemoryAccessor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)
  id: '#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)'
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64)
  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "初始化的新執行個體<xref href=&quot;System.IO.UnmanagedMemoryAccessor&quot;></xref>類別指定的緩衝區、 位移和容量。"
  syntax:
    content: public UnmanagedMemoryAccessor (System.Runtime.InteropServices.SafeBuffer buffer, long offset, long capacity);
    parameters:
    - id: buffer
      type: System.Runtime.InteropServices.SafeBuffer
      description: "包含存取子的緩衝區。"
    - id: offset
      type: System.Int64
      description: "在此處開始存取子的位元組。"
    - id: capacity
      type: System.Int64
      description: "以位元組為單位，要配置的記憶體大小。"
  overload: System.IO.UnmanagedMemoryAccessor.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>加上<code>capacity</code>大於<code>buffer</code>。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>或<code>capacity</code>小於零。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>offset</code>加上<code>capacity</code>位址空間的高位端會換行。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  id: '#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)'
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64,FileAccess)
  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64,FileAccess)
  fullName: System.IO.UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64,FileAccess)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "初始化的新執行個體<xref href=&quot;System.IO.UnmanagedMemoryAccessor&quot;></xref>類別指定的緩衝區、 位移、 容量和存取權限。"
  syntax:
    content: public UnmanagedMemoryAccessor (System.Runtime.InteropServices.SafeBuffer buffer, long offset, long capacity, System.IO.FileAccess access);
    parameters:
    - id: buffer
      type: System.Runtime.InteropServices.SafeBuffer
      description: "包含存取子的緩衝區。"
    - id: offset
      type: System.Int64
      description: "在此處開始存取子的位元組。"
    - id: capacity
      type: System.Int64
      description: "以位元組為單位，要配置的記憶體大小。"
    - id: access
      type: System.IO.FileAccess
      description: "允許的記憶體存取類型。 預設值是<xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref>。"
  overload: System.IO.UnmanagedMemoryAccessor.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>加上<code>capacity</code>大於<code>buffer</code>。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>或<code>capacity</code>小於零。       -<code>access</code>不是有效<xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;></xref>列舉值。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>offset</code>加上<code>capacity</code>位址空間的高位端會換行。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.CanRead
  id: CanRead
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: CanRead
  nameWithType: UnmanagedMemoryAccessor.CanRead
  fullName: System.IO.UnmanagedMemoryAccessor.CanRead
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "判斷存取子是否可讀取。"
  syntax:
    content: public bool CanRead { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果存取子是可讀取;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.UnmanagedMemoryAccessor.CanRead*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.CanWrite
  id: CanWrite
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: CanWrite
  nameWithType: UnmanagedMemoryAccessor.CanWrite
  fullName: System.IO.UnmanagedMemoryAccessor.CanWrite
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "判斷存取子是否可寫入。"
  syntax:
    content: public bool CanWrite { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果存取子是可寫入。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.UnmanagedMemoryAccessor.CanWrite*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Capacity
  id: Capacity
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Capacity
  nameWithType: UnmanagedMemoryAccessor.Capacity
  fullName: System.IO.UnmanagedMemoryAccessor.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "取得存取子的容量。"
  syntax:
    content: public long Capacity { get; }
    return:
      type: System.Int64
      description: "存取子的容量。"
  overload: System.IO.UnmanagedMemoryAccessor.Capacity*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Dispose
  id: Dispose
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Dispose()
  nameWithType: UnmanagedMemoryAccessor.Dispose()
  fullName: System.IO.UnmanagedMemoryAccessor.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "所使用的資源全部釋出<xref href=&quot;System.IO.UnmanagedMemoryAccessor&quot;> </xref>。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.IO.UnmanagedMemoryAccessor.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: UnmanagedMemoryAccessor.Dispose(Boolean)
  fullName: System.IO.UnmanagedMemoryAccessor.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "所使用的 unmanaged 的資源釋出<xref href=&quot;System.IO.UnmanagedMemoryAccessor&quot;></xref>並選擇性釋放 managed 的資源。"
  remarks: "這個方法會呼叫公用`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> `Dispose()`叫用受保護`Dispose(Boolean)`方法`disposing`參數設定為`true`。 <xref:System.Object.Finalize%2A>叫用`Dispose`與`disposing`設`false`。</xref:System.Object.Finalize%2A>       當`disposing`參數為 true，這個方法的任何 managed 物件所持有的資源全部釋出這個<xref:System.IO.UnmanagedMemoryAccessor>參考。</xref:System.IO.UnmanagedMemoryAccessor> 這個方法會叫用`Dispose()`每個參考物件的方法。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>表示釋放 managed 和 unmanaged 資源，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>表示只釋放 unmanaged 的資源。"
  overload: System.IO.UnmanagedMemoryAccessor.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  id: Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Initialize(SafeBuffer,Int64,Int64,FileAccess)
  nameWithType: UnmanagedMemoryAccessor.Initialize(SafeBuffer,Int64,Int64,FileAccess)
  fullName: System.IO.UnmanagedMemoryAccessor.Initialize(SafeBuffer,Int64,Int64,FileAccess)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "設定存取子的初始值。"
  remarks: "這個類別的建構函式會呼叫這個方法。"
  syntax:
    content: protected void Initialize (System.Runtime.InteropServices.SafeBuffer buffer, long offset, long capacity, System.IO.FileAccess access);
    parameters:
    - id: buffer
      type: System.Runtime.InteropServices.SafeBuffer
      description: "包含存取子的緩衝區。"
    - id: offset
      type: System.Int64
      description: "在此處開始存取子的位元組。"
    - id: capacity
      type: System.Int64
      description: "以位元組為單位，要配置的記憶體大小。"
    - id: access
      type: System.IO.FileAccess
      description: "允許的記憶體存取類型。 預設值是<xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;> </xref>。"
  overload: System.IO.UnmanagedMemoryAccessor.Initialize*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>加上<code>capacity</code>大於<code>buffer</code>。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>或<code>capacity</code>小於零。       -<code>access</code>不是有效<xref href=&quot;System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot;></xref>列舉值。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>offset</code>加上<code>capacity</code>位址空間的高位端會換行。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.IsOpen
  id: IsOpen
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: IsOpen
  nameWithType: UnmanagedMemoryAccessor.IsOpen
  fullName: System.IO.UnmanagedMemoryAccessor.IsOpen
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "判斷存取子目前是否開啟處理程序。"
  syntax:
    content: protected bool IsOpen { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果存取子已，開啟。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.UnmanagedMemoryAccessor.IsOpen*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)
  id: Read``1(System.Int64,``0@)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Read(Int64,T)
  nameWithType: UnmanagedMemoryAccessor.Read(Int64,T)
  fullName: System.IO.UnmanagedMemoryAccessor.Read(Int64,T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  syntax:
    content: 'public void Read<T> (long position, out T structure) where T : struct;'
    parameters:
    - id: position
      type: System.Int64
      description: "即將加入。"
    - id: structure
      type: T
      description: "即將加入。"
  overload: System.IO.UnmanagedMemoryAccessor.Read<T>*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)
  id: ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadArray(Int64,T[],Int32,Int32)
  nameWithType: UnmanagedMemoryAccessor.ReadArray(Int64,T[],Int32,Int32)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadArray(Int64,T[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  syntax:
    content: 'public int ReadArray<T> (long position, T[] array, int offset, int count) where T : struct;'
    parameters:
    - id: position
      type: System.Int64
      description: "即將加入。"
    - id: array
      type: T[]
      description: "即將加入。"
    - id: offset
      type: System.Int32
      description: "即將加入。"
    - id: count
      type: System.Int32
      description: "即將加入。"
    return:
      type: System.Int32
      description: "即將加入。"
  overload: System.IO.UnmanagedMemoryAccessor.ReadArray<T>*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)
  id: ReadBoolean(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadBoolean(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadBoolean(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadBoolean(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "從存取子讀取布林值。"
  syntax:
    content: public bool ReadBoolean (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "在開始讀取存取子的位元組數目。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>or <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.IO.UnmanagedMemoryAccessor.ReadBoolean*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>讀取值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援讀取。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)
  id: ReadByte(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadByte(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadByte(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadByte(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "從存取子讀取位元組值。"
  syntax:
    content: public byte ReadByte (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "在開始讀取存取子的位元組數目。"
    return:
      type: System.Byte
      description: "已讀取的值。"
  overload: System.IO.UnmanagedMemoryAccessor.ReadByte*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>讀取值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援讀取。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)
  id: ReadChar(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadChar(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadChar(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadChar(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "從存取子讀取位元組值。"
  syntax:
    content: public char ReadChar (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "在開始讀取存取子的位元組數目。"
    return:
      type: System.Char
      description: "已讀取的值。"
  overload: System.IO.UnmanagedMemoryAccessor.ReadChar*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>讀取值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援讀取。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)
  id: ReadDecimal(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadDecimal(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadDecimal(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadDecimal(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "從存取子讀取位元組值。"
  syntax:
    content: public decimal ReadDecimal (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "在開始讀取存取子的位元組數目。"
    return:
      type: System.Decimal
      description: "已讀取的值。"
  overload: System.IO.UnmanagedMemoryAccessor.ReadDecimal*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>讀取值。       -或者-讀取十進位無效。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援讀取。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)
  id: ReadDouble(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadDouble(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadDouble(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadDouble(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "從存取子讀取雙精確度浮點數值。"
  syntax:
    content: public double ReadDouble (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "在開始讀取存取子的位元組數目。"
    return:
      type: System.Double
      description: "已讀取的值。"
  overload: System.IO.UnmanagedMemoryAccessor.ReadDouble*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>讀取值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援讀取。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)
  id: ReadInt16(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadInt16(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadInt16(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadInt16(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "從存取子讀取 16 位元的整數。"
  syntax:
    content: public short ReadInt16 (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "在開始讀取存取子的位元組數目。"
    return:
      type: System.Int16
      description: "已讀取的值。"
  overload: System.IO.UnmanagedMemoryAccessor.ReadInt16*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>讀取值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援讀取。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)
  id: ReadInt32(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadInt32(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadInt32(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadInt32(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "從存取子讀取 32 位元的整數。"
  syntax:
    content: public int ReadInt32 (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "在開始讀取存取子的位元組數目。"
    return:
      type: System.Int32
      description: "已讀取的值。"
  overload: System.IO.UnmanagedMemoryAccessor.ReadInt32*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>讀取值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援讀取。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)
  id: ReadInt64(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadInt64(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadInt64(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadInt64(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "從存取子讀取 64 位元的整數。"
  syntax:
    content: public long ReadInt64 (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "在開始讀取存取子的位元組數目。"
    return:
      type: System.Int64
      description: "已讀取的值。"
  overload: System.IO.UnmanagedMemoryAccessor.ReadInt64*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>讀取值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援讀取。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)
  id: ReadSByte(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadSByte(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadSByte(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadSByte(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "從存取子讀取 8 位元帶正負號的整數。"
  syntax:
    content: public sbyte ReadSByte (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "在開始讀取存取子的位元組數目。"
    return:
      type: System.SByte
      description: "已讀取的值。"
  overload: System.IO.UnmanagedMemoryAccessor.ReadSByte*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>讀取值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援讀取。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)
  id: ReadSingle(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadSingle(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadSingle(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadSingle(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "從存取子讀取單精確度浮點數值。"
  syntax:
    content: public float ReadSingle (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "在開始讀取存取子的位元組數目。"
    return:
      type: System.Single
      description: "已讀取的值。"
  overload: System.IO.UnmanagedMemoryAccessor.ReadSingle*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>讀取值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援讀取。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)
  id: ReadUInt16(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadUInt16(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadUInt16(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadUInt16(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "從存取子讀取不帶正負號的 16 位元整數。"
  syntax:
    content: public ushort ReadUInt16 (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "在開始讀取存取子的位元組數目。"
    return:
      type: System.UInt16
      description: "已讀取的值。"
  overload: System.IO.UnmanagedMemoryAccessor.ReadUInt16*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>讀取值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援讀取。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)
  id: ReadUInt32(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadUInt32(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadUInt32(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadUInt32(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "從存取子讀取不帶正負號的 32 位元整數。"
  syntax:
    content: public uint ReadUInt32 (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "在開始讀取存取子的位元組數目。"
    return:
      type: System.UInt32
      description: "已讀取的值。"
  overload: System.IO.UnmanagedMemoryAccessor.ReadUInt32*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>讀取值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援讀取。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)
  id: ReadUInt64(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadUInt64(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadUInt64(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadUInt64(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "從存取子讀取不帶正負號的 64 位元整數。"
  syntax:
    content: public ulong ReadUInt64 (long position);
    parameters:
    - id: position
      type: System.Int64
      description: "在開始讀取存取子的位元組數目。"
    return:
      type: System.UInt64
      description: "已讀取的值。"
  overload: System.IO.UnmanagedMemoryAccessor.ReadUInt64*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>讀取值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援讀取。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)
  id: Write(System.Int64,System.Boolean)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,Boolean)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Boolean)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "將布林值寫入至存取子。"
  syntax:
    content: public void Write (long position, bool value);
    parameters:
    - id: position
      type: System.Int64
      description: "在此處開始寫入存取子的位元組數目。"
    - id: value
      type: System.Boolean
      description: "要寫入的值。"
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>寫入值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援寫入。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)
  id: Write(System.Int64,System.Byte)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,Byte)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Byte)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Byte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "將位元組值寫入至存取子。"
  syntax:
    content: public void Write (long position, byte value);
    parameters:
    - id: position
      type: System.Int64
      description: "在此處開始寫入存取子的位元組數目。"
    - id: value
      type: System.Byte
      description: "要寫入的值。"
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>寫入值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援寫入。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)
  id: Write(System.Int64,System.Char)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,Char)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Char)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "將字元寫入至存取子。"
  syntax:
    content: public void Write (long position, char value);
    parameters:
    - id: position
      type: System.Int64
      description: "在此處開始寫入存取子的位元組數目。"
    - id: value
      type: System.Char
      description: "要寫入的值。"
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>寫入值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援寫入。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)
  id: Write(System.Int64,System.Decimal)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,Decimal)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Decimal)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Decimal)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "將十進位值寫入至存取子。"
  syntax:
    content: public void Write (long position, decimal value);
    parameters:
    - id: position
      type: System.Int64
      description: "在此處開始寫入存取子的位元組數目。"
    - id: value
      type: System.Decimal
      description: "要寫入的值。"
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>寫入值。       -或者-小數點無效。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援寫入。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)
  id: Write(System.Int64,System.Double)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,Double)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Double)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "寫入<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>至存取子的值。"
  syntax:
    content: public void Write (long position, double value);
    parameters:
    - id: position
      type: System.Int64
      description: "在此處開始寫入存取子的位元組數目。"
    - id: value
      type: System.Double
      description: "要寫入的值。"
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>寫入值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援寫入。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)
  id: Write(System.Int64,System.Int16)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,Int16)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Int16)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Int16)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "將 16 位元整數寫入至存取子。"
  syntax:
    content: public void Write (long position, short value);
    parameters:
    - id: position
      type: System.Int64
      description: "在此處開始寫入存取子的位元組數目。"
    - id: value
      type: System.Int16
      description: "要寫入的值。"
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>寫入值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援寫入。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)
  id: Write(System.Int64,System.Int32)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,Int32)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Int32)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "將 32 位元整數寫入至存取子。"
  syntax:
    content: public void Write (long position, int value);
    parameters:
    - id: position
      type: System.Int64
      description: "在此處開始寫入存取子的位元組數目。"
    - id: value
      type: System.Int32
      description: "要寫入的值。"
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>寫入值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援寫入。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)
  id: Write(System.Int64,System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,Int64)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "將 64 位元整數寫入至存取子。"
  syntax:
    content: public void Write (long position, long value);
    parameters:
    - id: position
      type: System.Int64
      description: "在此處開始寫入存取子的位元組數目。"
    - id: value
      type: System.Int64
      description: "要寫入的值。"
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "若要將值寫入的位置之後沒有足夠的位元組。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援寫入。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)
  id: Write(System.Int64,System.SByte)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,SByte)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,SByte)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,SByte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "將 8 位元整數寫入至存取子。"
  syntax:
    content: public void Write (long position, sbyte value);
    parameters:
    - id: position
      type: System.Int64
      description: "在此處開始寫入存取子的位元組數目。"
    - id: value
      type: System.SByte
      description: "要寫入的值。"
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>寫入值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援寫入。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)
  id: Write(System.Int64,System.Single)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,Single)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Single)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Single)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "寫入<xref uid=&quot;langword_csharp_Single&quot; name=&quot;Single&quot; href=&quot;&quot;></xref>至存取子。"
  syntax:
    content: public void Write (long position, float value);
    parameters:
    - id: position
      type: System.Int64
      description: "在此處開始寫入存取子的位元組數目。"
    - id: value
      type: System.Single
      description: "要寫入的值。"
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>寫入值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援寫入。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)
  id: Write(System.Int64,System.UInt16)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,UInt16)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,UInt16)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,UInt16)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "將不帶正負號的 16 位元整數寫入至存取子。"
  syntax:
    content: public void Write (long position, ushort value);
    parameters:
    - id: position
      type: System.Int64
      description: "在此處開始寫入存取子的位元組數目。"
    - id: value
      type: System.UInt16
      description: "要寫入的值。"
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>寫入值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援寫入。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)
  id: Write(System.Int64,System.UInt32)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,UInt32)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,UInt32)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "將不帶正負號的 32 位元整數寫入至存取子。"
  syntax:
    content: public void Write (long position, uint value);
    parameters:
    - id: position
      type: System.Int64
      description: "在此處開始寫入存取子的位元組數目。"
    - id: value
      type: System.UInt32
      description: "要寫入的值。"
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>寫入值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援寫入。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)
  id: Write(System.Int64,System.UInt64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,UInt64)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,UInt64)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,UInt64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "將不帶正負號的 64 位元整數寫入至存取子。"
  syntax:
    content: public void Write (long position, ulong value);
    parameters:
    - id: position
      type: System.Int64
      description: "在此處開始寫入存取子的位元組數目。"
    - id: value
      type: System.UInt64
      description: "要寫入的值。"
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "沒有足夠的位元組之後<code> position </code>寫入值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>小於零或大於存取子的容量。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "存取子不支援寫入。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "存取子已被處置。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)
  id: Write``1(System.Int64,``0@)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64,T)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,T)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  syntax:
    content: 'public void Write<T> (long position, ref T structure) where T : struct;'
    parameters:
    - id: position
      type: System.Int64
      description: "即將加入。"
    - id: structure
      type: T
      description: "即將加入。"
  overload: System.IO.UnmanagedMemoryAccessor.Write<T>*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)
  id: WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: WriteArray(Int64,T[],Int32,Int32)
  nameWithType: UnmanagedMemoryAccessor.WriteArray(Int64,T[],Int32,Int32)
  fullName: System.IO.UnmanagedMemoryAccessor.WriteArray(Int64,T[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  syntax:
    content: 'public void WriteArray<T> (long position, T[] array, int offset, int count) where T : struct;'
    parameters:
    - id: position
      type: System.Int64
      description: "即將加入。"
    - id: array
      type: T[]
      description: "即將加入。"
    - id: offset
      type: System.Int32
      description: "即將加入。"
    - id: count
      type: System.Int32
      description: "即將加入。"
  overload: System.IO.UnmanagedMemoryAccessor.WriteArray<T>*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.IO.UnmanagedMemoryAccessor.#ctor
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: UnmanagedMemoryAccessor()
  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor()
  fullName: System.IO.UnmanagedMemoryAccessor.UnmanagedMemoryAccessor()
- uid: System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64)
  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64)
- uid: System.Runtime.InteropServices.SafeBuffer
  parent: System.Runtime.InteropServices
  isExternal: true
  name: SafeBuffer
  nameWithType: SafeBuffer
  fullName: System.Runtime.InteropServices.SafeBuffer
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64,FileAccess)
  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64,FileAccess)
  fullName: System.IO.UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer,Int64,Int64,FileAccess)
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  nameWithType: FileAccess
  fullName: System.IO.FileAccess
- uid: System.IO.UnmanagedMemoryAccessor.CanRead
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: CanRead
  nameWithType: UnmanagedMemoryAccessor.CanRead
  fullName: System.IO.UnmanagedMemoryAccessor.CanRead
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.UnmanagedMemoryAccessor.CanWrite
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: CanWrite
  nameWithType: UnmanagedMemoryAccessor.CanWrite
  fullName: System.IO.UnmanagedMemoryAccessor.CanWrite
- uid: System.IO.UnmanagedMemoryAccessor.Capacity
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Capacity
  nameWithType: UnmanagedMemoryAccessor.Capacity
  fullName: System.IO.UnmanagedMemoryAccessor.Capacity
- uid: System.IO.UnmanagedMemoryAccessor.Dispose
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Dispose()
  nameWithType: UnmanagedMemoryAccessor.Dispose()
  fullName: System.IO.UnmanagedMemoryAccessor.Dispose()
- uid: System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: UnmanagedMemoryAccessor.Dispose(Boolean)
  fullName: System.IO.UnmanagedMemoryAccessor.Dispose(Boolean)
- uid: System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Initialize(SafeBuffer,Int64,Int64,FileAccess)
  nameWithType: UnmanagedMemoryAccessor.Initialize(SafeBuffer,Int64,Int64,FileAccess)
  fullName: System.IO.UnmanagedMemoryAccessor.Initialize(SafeBuffer,Int64,Int64,FileAccess)
- uid: System.IO.UnmanagedMemoryAccessor.IsOpen
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: IsOpen
  nameWithType: UnmanagedMemoryAccessor.IsOpen
  fullName: System.IO.UnmanagedMemoryAccessor.IsOpen
- uid: System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Read(Int64,T)
  nameWithType: UnmanagedMemoryAccessor.Read(Int64,T)
  fullName: System.IO.UnmanagedMemoryAccessor.Read(Int64,T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadArray(Int64,T[],Int32,Int32)
  nameWithType: UnmanagedMemoryAccessor.ReadArray(Int64,T[],Int32,Int32)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadArray(Int64,T[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T[]
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadBoolean(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadBoolean(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadBoolean(Int64)
- uid: System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadByte(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadByte(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadByte(Int64)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadChar(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadChar(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadChar(Int64)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadDecimal(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadDecimal(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadDecimal(Int64)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadDouble(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadDouble(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadDouble(Int64)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadInt16(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadInt16(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadInt16(Int64)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadInt32(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadInt32(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadInt32(Int64)
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadInt64(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadInt64(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadInt64(Int64)
- uid: System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadSByte(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadSByte(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadSByte(Int64)
- uid: System.SByte
  parent: System
  isExternal: true
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadSingle(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadSingle(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadSingle(Int64)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadUInt16(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadUInt16(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadUInt16(Int64)
- uid: System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadUInt32(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadUInt32(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadUInt32(Int64)
- uid: System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadUInt64(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadUInt64(Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.ReadUInt64(Int64)
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,Boolean)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Boolean)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Boolean)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,Byte)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Byte)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Byte)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,Char)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Char)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Char)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,Decimal)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Decimal)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Decimal)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,Double)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Double)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Double)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,Int16)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Int16)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Int16)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,Int32)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Int32)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Int32)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,Int64)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Int64)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Int64)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,SByte)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,SByte)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,SByte)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,Single)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,Single)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,Single)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,UInt16)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,UInt16)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,UInt16)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,UInt32)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,UInt32)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,UInt32)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,UInt64)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,UInt64)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,UInt64)
- uid: System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64,T)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64,T)
  fullName: System.IO.UnmanagedMemoryAccessor.Write(Int64,T)
- uid: System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: WriteArray(Int64,T[],Int32,Int32)
  nameWithType: UnmanagedMemoryAccessor.WriteArray(Int64,T[],Int32,Int32)
  fullName: System.IO.UnmanagedMemoryAccessor.WriteArray(Int64,T[],Int32,Int32)
- uid: System.IO.UnmanagedMemoryAccessor.#ctor*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: UnmanagedMemoryAccessor
  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor
- uid: System.IO.UnmanagedMemoryAccessor.CanRead*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: CanRead
  nameWithType: UnmanagedMemoryAccessor.CanRead
- uid: System.IO.UnmanagedMemoryAccessor.CanWrite*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: CanWrite
  nameWithType: UnmanagedMemoryAccessor.CanWrite
- uid: System.IO.UnmanagedMemoryAccessor.Capacity*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Capacity
  nameWithType: UnmanagedMemoryAccessor.Capacity
- uid: System.IO.UnmanagedMemoryAccessor.Dispose*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Dispose
  nameWithType: UnmanagedMemoryAccessor.Dispose
- uid: System.IO.UnmanagedMemoryAccessor.Initialize*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Initialize
  nameWithType: UnmanagedMemoryAccessor.Initialize
- uid: System.IO.UnmanagedMemoryAccessor.IsOpen*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: IsOpen
  nameWithType: UnmanagedMemoryAccessor.IsOpen
- uid: System.IO.UnmanagedMemoryAccessor.Read<T>*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Read<T>
  nameWithType: UnmanagedMemoryAccessor.Read<T>
- uid: System.IO.UnmanagedMemoryAccessor.ReadArray<T>*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadArray<T>
  nameWithType: UnmanagedMemoryAccessor.ReadArray<T>
- uid: System.IO.UnmanagedMemoryAccessor.ReadBoolean*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadBoolean
  nameWithType: UnmanagedMemoryAccessor.ReadBoolean
- uid: System.IO.UnmanagedMemoryAccessor.ReadByte*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadByte
  nameWithType: UnmanagedMemoryAccessor.ReadByte
- uid: System.IO.UnmanagedMemoryAccessor.ReadChar*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadChar
  nameWithType: UnmanagedMemoryAccessor.ReadChar
- uid: System.IO.UnmanagedMemoryAccessor.ReadDecimal*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadDecimal
  nameWithType: UnmanagedMemoryAccessor.ReadDecimal
- uid: System.IO.UnmanagedMemoryAccessor.ReadDouble*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadDouble
  nameWithType: UnmanagedMemoryAccessor.ReadDouble
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt16*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadInt16
  nameWithType: UnmanagedMemoryAccessor.ReadInt16
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt32*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadInt32
  nameWithType: UnmanagedMemoryAccessor.ReadInt32
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt64*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadInt64
  nameWithType: UnmanagedMemoryAccessor.ReadInt64
- uid: System.IO.UnmanagedMemoryAccessor.ReadSByte*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadSByte
  nameWithType: UnmanagedMemoryAccessor.ReadSByte
- uid: System.IO.UnmanagedMemoryAccessor.ReadSingle*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadSingle
  nameWithType: UnmanagedMemoryAccessor.ReadSingle
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt16*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadUInt16
  nameWithType: UnmanagedMemoryAccessor.ReadUInt16
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt32*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadUInt32
  nameWithType: UnmanagedMemoryAccessor.ReadUInt32
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt64*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadUInt64
  nameWithType: UnmanagedMemoryAccessor.ReadUInt64
- uid: System.IO.UnmanagedMemoryAccessor.Write*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write
  nameWithType: UnmanagedMemoryAccessor.Write
- uid: System.IO.UnmanagedMemoryAccessor.Write<T>*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write<T>
  nameWithType: UnmanagedMemoryAccessor.Write<T>
- uid: System.IO.UnmanagedMemoryAccessor.WriteArray<T>*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: WriteArray<T>
  nameWithType: UnmanagedMemoryAccessor.WriteArray<T>
