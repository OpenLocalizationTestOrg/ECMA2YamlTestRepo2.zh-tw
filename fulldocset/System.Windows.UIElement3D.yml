### YamlMime:ManagedReference
items:
- uid: System.Windows.UIElement3D
  id: UIElement3D
  children:
  - System.Windows.UIElement3D.#ctor
  - System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  - System.Windows.UIElement3D.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  - System.Windows.UIElement3D.AllowDrop
  - System.Windows.UIElement3D.AllowDropProperty
  - System.Windows.UIElement3D.AreAnyTouchesCaptured
  - System.Windows.UIElement3D.AreAnyTouchesCapturedProperty
  - System.Windows.UIElement3D.AreAnyTouchesCapturedWithin
  - System.Windows.UIElement3D.AreAnyTouchesCapturedWithinProperty
  - System.Windows.UIElement3D.AreAnyTouchesDirectlyOver
  - System.Windows.UIElement3D.AreAnyTouchesDirectlyOverProperty
  - System.Windows.UIElement3D.AreAnyTouchesOver
  - System.Windows.UIElement3D.AreAnyTouchesOverProperty
  - System.Windows.UIElement3D.CaptureMouse
  - System.Windows.UIElement3D.CaptureStylus
  - System.Windows.UIElement3D.CaptureTouch(System.Windows.Input.TouchDevice)
  - System.Windows.UIElement3D.CommandBindings
  - System.Windows.UIElement3D.DragEnter
  - System.Windows.UIElement3D.DragEnterEvent
  - System.Windows.UIElement3D.DragLeave
  - System.Windows.UIElement3D.DragLeaveEvent
  - System.Windows.UIElement3D.DragOver
  - System.Windows.UIElement3D.DragOverEvent
  - System.Windows.UIElement3D.Drop
  - System.Windows.UIElement3D.DropEvent
  - System.Windows.UIElement3D.Focus
  - System.Windows.UIElement3D.Focusable
  - System.Windows.UIElement3D.FocusableChanged
  - System.Windows.UIElement3D.FocusableProperty
  - System.Windows.UIElement3D.GetUIParentCore
  - System.Windows.UIElement3D.GiveFeedback
  - System.Windows.UIElement3D.GiveFeedbackEvent
  - System.Windows.UIElement3D.GotFocus
  - System.Windows.UIElement3D.GotFocusEvent
  - System.Windows.UIElement3D.GotKeyboardFocus
  - System.Windows.UIElement3D.GotKeyboardFocusEvent
  - System.Windows.UIElement3D.GotMouseCapture
  - System.Windows.UIElement3D.GotMouseCaptureEvent
  - System.Windows.UIElement3D.GotStylusCapture
  - System.Windows.UIElement3D.GotStylusCaptureEvent
  - System.Windows.UIElement3D.GotTouchCapture
  - System.Windows.UIElement3D.GotTouchCaptureEvent
  - System.Windows.UIElement3D.InputBindings
  - System.Windows.UIElement3D.InvalidateModel
  - System.Windows.UIElement3D.IsEnabled
  - System.Windows.UIElement3D.IsEnabledChanged
  - System.Windows.UIElement3D.IsEnabledCore
  - System.Windows.UIElement3D.IsEnabledProperty
  - System.Windows.UIElement3D.IsFocused
  - System.Windows.UIElement3D.IsFocusedProperty
  - System.Windows.UIElement3D.IsHitTestVisible
  - System.Windows.UIElement3D.IsHitTestVisibleChanged
  - System.Windows.UIElement3D.IsHitTestVisibleProperty
  - System.Windows.UIElement3D.IsInputMethodEnabled
  - System.Windows.UIElement3D.IsKeyboardFocused
  - System.Windows.UIElement3D.IsKeyboardFocusedChanged
  - System.Windows.UIElement3D.IsKeyboardFocusedProperty
  - System.Windows.UIElement3D.IsKeyboardFocusWithin
  - System.Windows.UIElement3D.IsKeyboardFocusWithinChanged
  - System.Windows.UIElement3D.IsKeyboardFocusWithinProperty
  - System.Windows.UIElement3D.IsMouseCaptured
  - System.Windows.UIElement3D.IsMouseCapturedChanged
  - System.Windows.UIElement3D.IsMouseCapturedProperty
  - System.Windows.UIElement3D.IsMouseCaptureWithin
  - System.Windows.UIElement3D.IsMouseCaptureWithinChanged
  - System.Windows.UIElement3D.IsMouseCaptureWithinProperty
  - System.Windows.UIElement3D.IsMouseDirectlyOver
  - System.Windows.UIElement3D.IsMouseDirectlyOverChanged
  - System.Windows.UIElement3D.IsMouseDirectlyOverProperty
  - System.Windows.UIElement3D.IsMouseOver
  - System.Windows.UIElement3D.IsMouseOverProperty
  - System.Windows.UIElement3D.IsStylusCaptured
  - System.Windows.UIElement3D.IsStylusCapturedChanged
  - System.Windows.UIElement3D.IsStylusCapturedProperty
  - System.Windows.UIElement3D.IsStylusCaptureWithin
  - System.Windows.UIElement3D.IsStylusCaptureWithinChanged
  - System.Windows.UIElement3D.IsStylusCaptureWithinProperty
  - System.Windows.UIElement3D.IsStylusDirectlyOver
  - System.Windows.UIElement3D.IsStylusDirectlyOverChanged
  - System.Windows.UIElement3D.IsStylusDirectlyOverProperty
  - System.Windows.UIElement3D.IsStylusOver
  - System.Windows.UIElement3D.IsStylusOverProperty
  - System.Windows.UIElement3D.IsVisible
  - System.Windows.UIElement3D.IsVisibleChanged
  - System.Windows.UIElement3D.IsVisibleProperty
  - System.Windows.UIElement3D.KeyDown
  - System.Windows.UIElement3D.KeyDownEvent
  - System.Windows.UIElement3D.KeyUp
  - System.Windows.UIElement3D.KeyUpEvent
  - System.Windows.UIElement3D.LostFocus
  - System.Windows.UIElement3D.LostFocusEvent
  - System.Windows.UIElement3D.LostKeyboardFocus
  - System.Windows.UIElement3D.LostKeyboardFocusEvent
  - System.Windows.UIElement3D.LostMouseCapture
  - System.Windows.UIElement3D.LostMouseCaptureEvent
  - System.Windows.UIElement3D.LostStylusCapture
  - System.Windows.UIElement3D.LostStylusCaptureEvent
  - System.Windows.UIElement3D.LostTouchCapture
  - System.Windows.UIElement3D.LostTouchCaptureEvent
  - System.Windows.UIElement3D.MouseDown
  - System.Windows.UIElement3D.MouseDownEvent
  - System.Windows.UIElement3D.MouseEnter
  - System.Windows.UIElement3D.MouseEnterEvent
  - System.Windows.UIElement3D.MouseLeave
  - System.Windows.UIElement3D.MouseLeaveEvent
  - System.Windows.UIElement3D.MouseLeftButtonDown
  - System.Windows.UIElement3D.MouseLeftButtonDownEvent
  - System.Windows.UIElement3D.MouseLeftButtonUp
  - System.Windows.UIElement3D.MouseLeftButtonUpEvent
  - System.Windows.UIElement3D.MouseMove
  - System.Windows.UIElement3D.MouseMoveEvent
  - System.Windows.UIElement3D.MouseRightButtonDown
  - System.Windows.UIElement3D.MouseRightButtonDownEvent
  - System.Windows.UIElement3D.MouseRightButtonUp
  - System.Windows.UIElement3D.MouseRightButtonUpEvent
  - System.Windows.UIElement3D.MouseUp
  - System.Windows.UIElement3D.MouseUpEvent
  - System.Windows.UIElement3D.MouseWheel
  - System.Windows.UIElement3D.MouseWheelEvent
  - System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest)
  - System.Windows.UIElement3D.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  - System.Windows.UIElement3D.OnCreateAutomationPeer
  - System.Windows.UIElement3D.OnDragEnter(System.Windows.DragEventArgs)
  - System.Windows.UIElement3D.OnDragLeave(System.Windows.DragEventArgs)
  - System.Windows.UIElement3D.OnDragOver(System.Windows.DragEventArgs)
  - System.Windows.UIElement3D.OnDrop(System.Windows.DragEventArgs)
  - System.Windows.UIElement3D.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.UIElement3D.OnGotFocus(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement3D.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement3D.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement3D.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement3D.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement3D.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement3D.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement3D.OnKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement3D.OnKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement3D.OnLostFocus(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement3D.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement3D.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement3D.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement3D.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement3D.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement3D.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement3D.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement3D.OnPreviewDragEnter(System.Windows.DragEventArgs)
  - System.Windows.UIElement3D.OnPreviewDragLeave(System.Windows.DragEventArgs)
  - System.Windows.UIElement3D.OnPreviewDragOver(System.Windows.DragEventArgs)
  - System.Windows.UIElement3D.OnPreviewDrop(System.Windows.DragEventArgs)
  - System.Windows.UIElement3D.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.UIElement3D.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement3D.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement3D.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement3D.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement3D.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement3D.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement3D.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.UIElement3D.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement3D.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement3D.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.UIElement3D.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.UIElement3D.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement3D.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement3D.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement3D.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement3D.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.UIElement3D.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  - System.Windows.UIElement3D.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement3D.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement3D.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.UIElement3D.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.UIElement3D.OnStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement3D.OnTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement3D.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement3D.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement3D.OnTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement3D.OnTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement3D.OnUpdateModel
  - System.Windows.UIElement3D.OnVisualParentChanged(System.Windows.DependencyObject)
  - System.Windows.UIElement3D.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  - System.Windows.UIElement3D.PreviewDragEnter
  - System.Windows.UIElement3D.PreviewDragEnterEvent
  - System.Windows.UIElement3D.PreviewDragLeave
  - System.Windows.UIElement3D.PreviewDragLeaveEvent
  - System.Windows.UIElement3D.PreviewDragOver
  - System.Windows.UIElement3D.PreviewDragOverEvent
  - System.Windows.UIElement3D.PreviewDrop
  - System.Windows.UIElement3D.PreviewDropEvent
  - System.Windows.UIElement3D.PreviewGiveFeedback
  - System.Windows.UIElement3D.PreviewGiveFeedbackEvent
  - System.Windows.UIElement3D.PreviewGotKeyboardFocus
  - System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent
  - System.Windows.UIElement3D.PreviewKeyDown
  - System.Windows.UIElement3D.PreviewKeyDownEvent
  - System.Windows.UIElement3D.PreviewKeyUp
  - System.Windows.UIElement3D.PreviewKeyUpEvent
  - System.Windows.UIElement3D.PreviewLostKeyboardFocus
  - System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent
  - System.Windows.UIElement3D.PreviewMouseDown
  - System.Windows.UIElement3D.PreviewMouseDownEvent
  - System.Windows.UIElement3D.PreviewMouseLeftButtonDown
  - System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent
  - System.Windows.UIElement3D.PreviewMouseLeftButtonUp
  - System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent
  - System.Windows.UIElement3D.PreviewMouseMove
  - System.Windows.UIElement3D.PreviewMouseMoveEvent
  - System.Windows.UIElement3D.PreviewMouseRightButtonDown
  - System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent
  - System.Windows.UIElement3D.PreviewMouseRightButtonUp
  - System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent
  - System.Windows.UIElement3D.PreviewMouseUp
  - System.Windows.UIElement3D.PreviewMouseUpEvent
  - System.Windows.UIElement3D.PreviewMouseWheel
  - System.Windows.UIElement3D.PreviewMouseWheelEvent
  - System.Windows.UIElement3D.PreviewQueryContinueDrag
  - System.Windows.UIElement3D.PreviewQueryContinueDragEvent
  - System.Windows.UIElement3D.PreviewStylusButtonDown
  - System.Windows.UIElement3D.PreviewStylusButtonDownEvent
  - System.Windows.UIElement3D.PreviewStylusButtonUp
  - System.Windows.UIElement3D.PreviewStylusButtonUpEvent
  - System.Windows.UIElement3D.PreviewStylusDown
  - System.Windows.UIElement3D.PreviewStylusDownEvent
  - System.Windows.UIElement3D.PreviewStylusInAirMove
  - System.Windows.UIElement3D.PreviewStylusInAirMoveEvent
  - System.Windows.UIElement3D.PreviewStylusInRange
  - System.Windows.UIElement3D.PreviewStylusInRangeEvent
  - System.Windows.UIElement3D.PreviewStylusMove
  - System.Windows.UIElement3D.PreviewStylusMoveEvent
  - System.Windows.UIElement3D.PreviewStylusOutOfRange
  - System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent
  - System.Windows.UIElement3D.PreviewStylusSystemGesture
  - System.Windows.UIElement3D.PreviewStylusSystemGestureEvent
  - System.Windows.UIElement3D.PreviewStylusUp
  - System.Windows.UIElement3D.PreviewStylusUpEvent
  - System.Windows.UIElement3D.PreviewTextInput
  - System.Windows.UIElement3D.PreviewTextInputEvent
  - System.Windows.UIElement3D.PreviewTouchDown
  - System.Windows.UIElement3D.PreviewTouchDownEvent
  - System.Windows.UIElement3D.PreviewTouchMove
  - System.Windows.UIElement3D.PreviewTouchMoveEvent
  - System.Windows.UIElement3D.PreviewTouchUp
  - System.Windows.UIElement3D.PreviewTouchUpEvent
  - System.Windows.UIElement3D.QueryContinueDrag
  - System.Windows.UIElement3D.QueryContinueDragEvent
  - System.Windows.UIElement3D.QueryCursor
  - System.Windows.UIElement3D.QueryCursorEvent
  - System.Windows.UIElement3D.RaiseEvent(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement3D.ReleaseAllTouchCaptures
  - System.Windows.UIElement3D.ReleaseMouseCapture
  - System.Windows.UIElement3D.ReleaseStylusCapture
  - System.Windows.UIElement3D.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  - System.Windows.UIElement3D.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement3D.ShouldSerializeCommandBindings
  - System.Windows.UIElement3D.ShouldSerializeInputBindings
  - System.Windows.UIElement3D.StylusButtonDown
  - System.Windows.UIElement3D.StylusButtonDownEvent
  - System.Windows.UIElement3D.StylusButtonUp
  - System.Windows.UIElement3D.StylusButtonUpEvent
  - System.Windows.UIElement3D.StylusDown
  - System.Windows.UIElement3D.StylusDownEvent
  - System.Windows.UIElement3D.StylusEnter
  - System.Windows.UIElement3D.StylusEnterEvent
  - System.Windows.UIElement3D.StylusInAirMove
  - System.Windows.UIElement3D.StylusInAirMoveEvent
  - System.Windows.UIElement3D.StylusInRange
  - System.Windows.UIElement3D.StylusInRangeEvent
  - System.Windows.UIElement3D.StylusLeave
  - System.Windows.UIElement3D.StylusLeaveEvent
  - System.Windows.UIElement3D.StylusMove
  - System.Windows.UIElement3D.StylusMoveEvent
  - System.Windows.UIElement3D.StylusOutOfRange
  - System.Windows.UIElement3D.StylusOutOfRangeEvent
  - System.Windows.UIElement3D.StylusSystemGesture
  - System.Windows.UIElement3D.StylusSystemGestureEvent
  - System.Windows.UIElement3D.StylusUp
  - System.Windows.UIElement3D.StylusUpEvent
  - System.Windows.UIElement3D.TextInput
  - System.Windows.UIElement3D.TextInputEvent
  - System.Windows.UIElement3D.TouchDown
  - System.Windows.UIElement3D.TouchDownEvent
  - System.Windows.UIElement3D.TouchEnter
  - System.Windows.UIElement3D.TouchEnterEvent
  - System.Windows.UIElement3D.TouchesCaptured
  - System.Windows.UIElement3D.TouchesCapturedWithin
  - System.Windows.UIElement3D.TouchesDirectlyOver
  - System.Windows.UIElement3D.TouchesOver
  - System.Windows.UIElement3D.TouchLeave
  - System.Windows.UIElement3D.TouchLeaveEvent
  - System.Windows.UIElement3D.TouchMove
  - System.Windows.UIElement3D.TouchMoveEvent
  - System.Windows.UIElement3D.TouchUp
  - System.Windows.UIElement3D.TouchUpEvent
  - System.Windows.UIElement3D.Visibility
  - System.Windows.UIElement3D.VisibilityProperty
  langs:
  - csharp
  name: UIElement3D
  nameWithType: UIElement3D
  fullName: System.Windows.UIElement3D
  type: Class
  summary: "UIElement3D 是建置 WPF 核心層級實作的基底類別[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]項目和基本呈現方式特性。"
  remarks: "UIElement3D 是抽象的基底類別，您可以從中衍生類別來代表特定的 3D 項目。       3D 項目的輸入、 焦點，以及事件處理行為的許多一般被定義在 UIElement3D 類別。 這包括鍵盤、 滑鼠及手寫筆輸入及相關的狀態屬性的事件。 其中許多事件會路由的事件，以及許多輸入相關的事件都有兩個反昇路由版本，以及通道事件的版本。 這些配對的事件通常是最大控制項作者感興趣的事件。       也包含 UIElement3D[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]相關的[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]事件模型，包括可以引發的方法所指定路由傳送來自於項目執行個體的事件。       UIElement3D 具有特別 UIElement3D 類別所定義的下列功能:-可以回應使用者輸入 (包括控制項的輸入透過事件處理的傳送位置路由或路由的命令)。      -可以引發邏輯項目樹狀透過路由的路由的事件。      > [!IMPORTANT] ><xref:System.Windows.UIElement3D.Visibility%2A>狀態會影響所有輸入的處理該元素。</xref:System.Windows.UIElement3D.Visibility%2A> 不會顯示的項目不會參與點擊測試，而不會收到輸入的事件，即使透過範圍將項目，則滑鼠如果可以看見。       不同於<xref:System.Windows.UIElement>類別，UIElement3D 類別不包含配置。</xref:System.Windows.UIElement> 因此，UIElement3D 類別不包含**量值**或**排列**方法。       類別，衍生自 UIElement3D 並維護它自己的集合，透過覆寫<xref:System.Windows.Media.Media3D.Visual3D.GetVisual3DChild%2A>，而且<xref:System.Windows.Media.Media3D.Visual3D.Visual3DChildrenCount%2A>仍然必須通過新<xref:System.Windows.Media.Media3D.Visual3D>至<xref:System.Windows.Media.Media3D.Visual3D.AddVisual3DChild%2A>。</xref:System.Windows.Media.Media3D.Visual3D.AddVisual3DChild%2A>物件</xref:System.Windows.Media.Media3D.Visual3D></xref:System.Windows.Media.Media3D.Visual3D.Visual3DChildrenCount%2A></xref:System.Windows.Media.Media3D.Visual3D.GetVisual3DChild%2A>的<xref:System.Windows.Media.Media3D.Visual3D>物件</xref:System.Windows.Media.Media3D.Visual3D>       .NET Framework 3.5 版中引進 UIElement3D。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example shows how to derive from the UIElement3D class to create a `Sphere` class:  \n  \n [!code-cs[Shapes#Sphere](~/add/codesnippet/csharp/Shapes/Sphere.cs#sphere)]\n [!code-vb[Shapes#Sphere](~/add/codesnippet/visualbasic/shapes/sphere.vb#sphere)]  \n  \n For the complete sample, see [UIElement3D Sphere Sample](http://go.microsoft.com/fwlink/?LinkID=160044)."
  syntax:
    content: 'public abstract class UIElement3D : System.Windows.Media.Media3D.Visual3D, System.Windows.IInputElement'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Media.Media3D.Visual3D
  implements:
  - System.Windows.IInputElement
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Media.Media3D.Visual3D.AddVisual3DChild(System.Windows.Media.Media3D.Visual3D)
  - System.Windows.Media.Media3D.Visual3D.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  - System.Windows.Media.Media3D.Visual3D.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.Media.Media3D.Visual3D.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  - System.Windows.Media.Media3D.Visual3D.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.Media.Media3D.Visual3D.FindCommonVisualAncestor(System.Windows.DependencyObject)
  - System.Windows.Media.Media3D.Visual3D.GetAnimationBaseValue(System.Windows.DependencyProperty)
  - System.Windows.Media.Media3D.Visual3D.GetVisual3DChild(System.Int32)
  - System.Windows.Media.Media3D.Visual3D.HasAnimatedProperties
  - System.Windows.Media.Media3D.Visual3D.IsAncestorOf(System.Windows.DependencyObject)
  - System.Windows.Media.Media3D.Visual3D.IsDescendantOf(System.Windows.DependencyObject)
  - System.Windows.Media.Media3D.Visual3D.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Media.Media3D.Visual3D.RemoveVisual3DChild(System.Windows.Media.Media3D.Visual3D)
  - System.Windows.Media.Media3D.Visual3D.Transform
  - System.Windows.Media.Media3D.Visual3D.TransformProperty
  - System.Windows.Media.Media3D.Visual3D.TransformToAncestor(System.Windows.Media.Media3D.Visual3D)
  - System.Windows.Media.Media3D.Visual3D.TransformToAncestor(System.Windows.Media.Visual)
  - System.Windows.Media.Media3D.Visual3D.TransformToDescendant(System.Windows.Media.Media3D.Visual3D)
  - System.Windows.Media.Media3D.Visual3D.Visual3DChildrenCount
  - System.Windows.Media.Media3D.Visual3D.Visual3DModel
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.UIElement3D.#ctor
  id: '#ctor'
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: UIElement3D()
  nameWithType: UIElement3D.UIElement3D()
  fullName: System.Windows.UIElement3D.UIElement3D()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.UIElement3D&quot;></xref>類別。"
  remarks: ".NET Framework 3.5 版中引進 UIElement3D。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected UIElement3D ();
    parameters: []
  overload: System.Windows.UIElement3D.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  id: AddHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AddHandler(RoutedEvent,Delegate)
  nameWithType: UIElement3D.AddHandler(RoutedEvent,Delegate)
  fullName: System.Windows.UIElement3D.AddHandler(RoutedEvent,Delegate)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "加入指定的路由事件，將處理常式加入目前項目的處理常式集合的路由的事件處理常式。"
  remarks: "您可以加入相同的處理常式事件多次，而不會引發例外狀況。 不過，此處理常式實際叫用時處理事件的多次。 因此，請考慮如何這種行為可能會有副作用，都應該在處理常式實作。       您通常使用這個方法來提供的 「 加入 」 存取子的實作[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]事件的自訂路由事件的存取模式。       AddHandler.NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "要處理之路由事件識別項。"
    - id: handler
      type: System.Delegate
      description: "處理常式實作的參考。"
  overload: System.Windows.UIElement3D.AddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  id: AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AddHandler(RoutedEvent,Delegate,Boolean)
  nameWithType: UIElement3D.AddHandler(RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.UIElement3D.AddHandler(RoutedEvent,Delegate,Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "加入指定的路由事件，將處理常式加入目前項目的處理常式集合的路由的事件處理常式。 指定<code> handledEventsToo </code>為<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>來處理此事件路由上另一個項目已標示的路由事件要叫用提供的處理常式。"
  remarks: "實用的方式處理低階輸入是一個複雜的工作。 許多控制項實作特定事件標示為已處理，而取代為另一個更具直覺性事件的行為。 一般而言，控制項只會將平台輸入的事件，為已處理，如果沒有這麼做一些設計用意。 在某些情況下，這些設計目的不可能的輸入事件的特定處理的需要。 這些案例是該註冊處理常式取代`handledEventsToo`為`true`適合。 但您不應該這麼例行性。 叫用處理常式以回應所有事件，即使處理將會使得您自己的應用程式事件處理邏輯。 如果處理常式邏輯的很大，可能會看到效能降低。 您應該保留附加尚未處理的情況下，您已經發現特定控制項所處理的事件，您仍然想要處理的應用程式邏輯在開發程序的事件處理常式的使用。       避免處理行為的某些事件控制組合類別的另一個技術是使用該事件預覽替代方案。 例如，如果<xref:System.Windows.UIElement3D.MouseLeftButtonDown>標示為已處理類別處理，您可以加入處理常式<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>改用。</xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> </xref:System.Windows.UIElement3D.MouseLeftButtonDown>       您可以加入相同的處理常式事件多次，而不會引發例外狀況。 不過，此處理常式實際叫用時處理事件的多次。 因此，請考慮如何這種行為可能會有副作用，都應該在處理常式實作。       您通常使用這個方法來提供的 「 加入 」 存取子的實作[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]事件的自訂路由事件的存取模式。       AddHandler.NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "要處理之路由事件識別項。"
    - id: handler
      type: System.Delegate
      description: "處理常式實作的參考。"
    - id: handledEventsToo
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>登錄處理常式，使得即使路由的事件被標記為被叫用處理其資料。<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> ，不會將預設條件登錄處理常式叫用 如果路由的事件標示為已處理。       預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。       請勿定期要求重新處理路由的事件。 如需詳細資訊，請參閱 < 備註 >。"
  overload: System.Windows.UIElement3D.AddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  id: AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AddToEventRoute(EventRoute,RoutedEventArgs)
  nameWithType: UIElement3D.AddToEventRoute(EventRoute,RoutedEventArgs)
  fullName: System.Windows.UIElement3D.AddToEventRoute(EventRoute,RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "將處理常式加入指定<xref href=&quot;System.Windows.EventRoute&quot;></xref>目前<xref href=&quot;System.Windows.UIElement3D&quot;></xref>事件處理常式集合。"
  remarks: "內容主機項目可以使用這個方法 (可能是指實作<xref:System.Windows.IContentHost>或未) 將項目子系的處理常式新增至<xref:System.Windows.EventRoute>.</xref:System.Windows.EventRoute> </xref:System.Windows.IContentHost>       .NET Framework 3.5 版中引進 AddToEventRoute。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);
    parameters:
    - id: route
      type: System.Windows.EventRoute
      description: "處理常式加入事件路由。"
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "用來加入的處理常式的事件資料。 這個方法會使用<xref:System.Windows.RoutedEventArgs.RoutedEvent*>建立處理常式的事件資料的屬性。</xref:System.Windows.RoutedEventArgs.RoutedEvent*>"
  overload: System.Windows.UIElement3D.AddToEventRoute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AllowDrop
  id: AllowDrop
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AllowDrop
  nameWithType: UIElement3D.AllowDrop
  fullName: System.Windows.UIElement3D.AllowDrop
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定值，這個項目是否可以當做拖放作業的目標。"
  remarks: "拖放作業依預設，不會啟用，且必須設為 allowdrop 不刻意啟用`true`。 超出此基本設定，拖放行為是完全實作特定，並且未定義<xref:System.Windows.UIElement3D>或任何其他基底項目類別。</xref:System.Windows.UIElement3D> 某些控制項，例如<xref:System.Windows.Controls.RichTextBox>，沒有預設行為。</xref:System.Windows.Controls.RichTextBox> 如需拖放的詳細資訊，請參閱[拖曳和卸除概觀](~/add/includes/ajax-current-ext-md.md)。       Allowdrop 不是.NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_AllowDrop&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.AllowDropProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement3D.AllowDropProperty>"
  syntax:
    content: public bool AllowDrop { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個項目可以當做拖放作業; 的目標否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.AllowDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AllowDropProperty
  id: AllowDropProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AllowDropProperty
  nameWithType: UIElement3D.AllowDropProperty
  fullName: System.Windows.UIElement3D.AllowDropProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement3D.AllowDrop*>相依性屬性。</xref:System.Windows.UIElement3D.AllowDrop*>"
  remarks: ".NET Framework 3.5 版中引進 AllowDropProperty。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AllowDropProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AreAnyTouchesCaptured
  id: AreAnyTouchesCaptured
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AreAnyTouchesCaptured
  nameWithType: UIElement3D.AreAnyTouchesCaptured
  fullName: System.Windows.UIElement3D.AreAnyTouchesCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出是否至少一個觸控擷取至這個項目。"
  syntax:
    content: public bool AreAnyTouchesCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果至少一個觸控，擷取至這個項目。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.AreAnyTouchesCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AreAnyTouchesCapturedProperty
  id: AreAnyTouchesCapturedProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AreAnyTouchesCapturedProperty
  nameWithType: UIElement3D.AreAnyTouchesCapturedProperty
  fullName: System.Windows.UIElement3D.AreAnyTouchesCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement3D.AreAnyTouchesCaptured*>相依性屬性。</xref:System.Windows.UIElement3D.AreAnyTouchesCaptured*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AreAnyTouchesCapturedWithin
  id: AreAnyTouchesCapturedWithin
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AreAnyTouchesCapturedWithin
  nameWithType: UIElement3D.AreAnyTouchesCapturedWithin
  fullName: System.Windows.UIElement3D.AreAnyTouchesCapturedWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出是否至少一個觸控擷取至這個項目或其視覺化樹狀中任何子項目。"
  syntax:
    content: public bool AreAnyTouchesCapturedWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果至少一個觸控，擷取至這個項目或其視覺化樹狀結構中; 在任何子項目否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.AreAnyTouchesCapturedWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AreAnyTouchesCapturedWithinProperty
  id: AreAnyTouchesCapturedWithinProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AreAnyTouchesCapturedWithinProperty
  nameWithType: UIElement3D.AreAnyTouchesCapturedWithinProperty
  fullName: System.Windows.UIElement3D.AreAnyTouchesCapturedWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement3D.AreAnyTouchesCapturedWithin*>相依性屬性。</xref:System.Windows.UIElement3D.AreAnyTouchesCapturedWithin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AreAnyTouchesDirectlyOver
  id: AreAnyTouchesDirectlyOver
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AreAnyTouchesDirectlyOver
  nameWithType: UIElement3D.AreAnyTouchesDirectlyOver
  fullName: System.Windows.UIElement3D.AreAnyTouchesDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出是否按下此項目上方的至少一個觸控。"
  syntax:
    content: public bool AreAnyTouchesDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果至少一個觸控上按下此項目。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.AreAnyTouchesDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AreAnyTouchesDirectlyOverProperty
  id: AreAnyTouchesDirectlyOverProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AreAnyTouchesDirectlyOverProperty
  nameWithType: UIElement3D.AreAnyTouchesDirectlyOverProperty
  fullName: System.Windows.UIElement3D.AreAnyTouchesDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement3D.AreAnyTouchesDirectlyOver*>相依性屬性。</xref:System.Windows.UIElement3D.AreAnyTouchesDirectlyOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AreAnyTouchesOver
  id: AreAnyTouchesOver
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AreAnyTouchesOver
  nameWithType: UIElement3D.AreAnyTouchesOver
  fullName: System.Windows.UIElement3D.AreAnyTouchesOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出至少一個觸控已按下此項目或其視覺化樹狀中的任何子項目。"
  syntax:
    content: public bool AreAnyTouchesOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個項目或其視覺化樹狀結構中; 在任何子項目上按下至少一個觸控否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.AreAnyTouchesOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AreAnyTouchesOverProperty
  id: AreAnyTouchesOverProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AreAnyTouchesOverProperty
  nameWithType: UIElement3D.AreAnyTouchesOverProperty
  fullName: System.Windows.UIElement3D.AreAnyTouchesOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement3D.AreAnyTouchesOver*>相依性屬性。</xref:System.Windows.UIElement3D.AreAnyTouchesOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.CaptureMouse
  id: CaptureMouse
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: CaptureMouse()
  nameWithType: UIElement3D.CaptureMouse()
  fullName: System.Windows.UIElement3D.CaptureMouse()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "嘗試強制滑鼠擷取至這個項目。"
  remarks: "若要擷取項目都必須啟用。 檢查是否<xref:System.Windows.UIElement3D.IsEnabled%2A>是`true`之前先呼叫 CaptureMouse。</xref:System.Windows.UIElement3D.IsEnabled%2A>       如果呼叫 CaptureMouse 傳回`true`，然後<xref:System.Windows.UIElement3D.IsMouseCaptured%2A>也`true`。</xref:System.Windows.UIElement3D.IsMouseCaptured%2A>       如果呼叫 CaptureMouse 傳回`true`，然後在<xref:System.Windows.UIElement3D.GotMouseCapture>和<xref:System.Windows.UIElement3D.IsMouseCapturedChanged>引發事件，與<xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName>事件中稱為 CaptureMouse 方法的項目為報告資料。</xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName> </xref:System.Windows.UIElement3D.IsMouseCapturedChanged> </xref:System.Windows.UIElement3D.GotMouseCapture> 如果您強制擷取時，您可能會干擾現有的擷取 — 尤其是使用與拖放滑鼠相關聯的擷取。       若要清除所有項目從滑鼠擷取，請呼叫<xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName>與`element`提供做為參數`null`。</xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName>       .NET Framework 3.5 版中引進 CaptureMouse。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public bool CaptureMouse ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已成功擷取滑鼠;，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.CaptureMouse*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.CaptureStylus
  id: CaptureStylus
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: CaptureStylus()
  nameWithType: UIElement3D.CaptureStylus()
  fullName: System.Windows.UIElement3D.CaptureStylus()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "嘗試強制手寫筆擷取至這個項目。"
  remarks: "永遠根據基礎的預設手寫筆裝置的預設實作會傳回`true`。 不過，如果可延伸提供輸入系統的裝置實作的輸入的裝置，則可以替代手寫筆裝置的實作可能會傳回不同的結果，以建立系統。       當項目擷取手寫筆時，即使手寫筆在其範圍外接收手寫筆輸入。 通常只會在拖放作業期間擷取手寫筆。       呼叫這個方法會呼叫基礎的靜態<xref:System.Windows.Input.Stylus>方法<xref:System.Windows.Input.Stylus.Capture%2A>.</xref:System.Windows.Input.Stylus.Capture%2A> </xref:System.Windows.Input.Stylus> 實際擷取行為的實作方法的使用中的手寫筆裝置的實作。       若要擷取項目都必須啟用。 檢查是否<xref:System.Windows.UIElement3D.IsEnabled%2A>是`true`傳回之前呼叫 CaptureStylus。</xref:System.Windows.UIElement3D.IsEnabled%2A>       如果呼叫 CaptureStylus 傳回`true`，<xref:System.Windows.UIElement3D.IsStylusCaptured%2A>也`true`。</xref:System.Windows.UIElement3D.IsStylusCaptured%2A>       .NET Framework 3.5 版中引進 CaptureStylus。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public bool CaptureStylus ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果成功擷取手寫筆。，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.CaptureStylus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.CaptureTouch(System.Windows.Input.TouchDevice)
  id: CaptureTouch(System.Windows.Input.TouchDevice)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: CaptureTouch(TouchDevice)
  nameWithType: UIElement3D.CaptureTouch(TouchDevice)
  fullName: System.Windows.UIElement3D.CaptureTouch(TouchDevice)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "嘗試強制觸控擷取至這個項目。"
  remarks: "會傳回 CaptureTouch`false`如果<xref:System.Windows.Input.TouchDevice>目前擷取另一個項目。</xref:System.Windows.Input.TouchDevice>       如果傳回 CaptureTouch `true`，然後在<xref:System.Windows.UIElement3D.GotTouchCapture>就會引發事件。</xref:System.Windows.UIElement3D.GotTouchCapture>       若要釋放擷取的單一觸控從這個項目，使用<xref:System.Windows.UIElement3D.ReleaseTouchCapture%2A>方法並指定要發行的觸控式裝置。</xref:System.Windows.UIElement3D.ReleaseTouchCapture%2A> 若要釋放所有的工作，從這個項目，使用<xref:System.Windows.UIElement3D.ReleaseAllTouchCaptures%2A>方法。</xref:System.Windows.UIElement3D.ReleaseAllTouchCaptures%2A>"
  syntax:
    content: public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);
    parameters:
    - id: touchDevice
      type: System.Windows.Input.TouchDevice
      description: "要擷取的裝置。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的觸控擷取至這個項目。，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.CaptureTouch*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>touchDevice</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.UIElement3D.CommandBindings
  id: CommandBindings
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: CommandBindings
  nameWithType: UIElement3D.CommandBindings
  fullName: System.Windows.UIElement3D.CommandBindings
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得集合的<xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref>與這個項目相關聯的物件。"
  remarks: "A<xref:System.Windows.Input.CommandBinding>啟用這個項目的特定命令的命令處理，並宣告命令、 其事件，以及由這個項目附加的處理常式之間的連結。</xref:System.Windows.Input.CommandBinding>       另一種 CommandBindings 集合中填入的典型方式是使用<xref:System.Windows.Input.CommandManager>方法以程式設計的方式。</xref:System.Windows.Input.CommandManager>       .NET Framework 3.5 版中引進 CommandBindings。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;xamlPropertyElementUsage_CommandBindings&quot;></a># # XAML 屬性項目用法```   <object>     <object.CommandBindings>       oneOrMoreCommandBindings  </object.CommandBindings>   </object>   ``` <a name=&quot;xamlValues_CommandBindings&quot;> </a> # # XAML 值*oneOrMoreCommandBindings*一或多個<xref:System.Windows.Input.CommandBinding>項目。</xref:System.Windows.Input.CommandBinding>       每一個都應該有<xref:System.Windows.Input.CommandBinding.Command%2A>屬性設定為已知的命令，而且屬性設定為<xref:System.Windows.Input.CommandBinding.CanExecute>和<xref:System.Windows.Input.CommandBinding.Executed>處理常式實作。</xref:System.Windows.Input.CommandBinding.Executed> </xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CommandBinding.Command%2A> 如需詳細資訊，請參閱<xref:System.Windows.Input.CommandBinding>.</xref:System.Windows.Input.CommandBinding>"
  syntax:
    content: public System.Windows.Input.CommandBindingCollection CommandBindings { get; }
    return:
      type: System.Windows.Input.CommandBindingCollection
      description: "所有的集合<xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref>物件。"
  overload: System.Windows.UIElement3D.CommandBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.DragEnter
  id: DragEnter
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: DragEnter
  nameWithType: UIElement3D.DragEnter
  fullName: System.Windows.UIElement3D.DragEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "輸入的系統回報以此項目作為拖曳目標的基礎拖曳事件時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName>附加這個類別中，事件，以便 DragEnter 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> 附加至 DragEnter 事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName>       DragEnter.NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_DragEnter&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.DragEnterEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.DragEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewDragEnter>。</xref:System.Windows.UIElement3D.PreviewDragEnter> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement3D.DragEnterEvent>      -覆寫<xref:System.Windows.UIElement3D.OnDragEnter%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnDragEnter%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler DragEnter;
    return:
      type: System.Windows.DragEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.DragEnterEvent
  id: DragEnterEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: DragEnterEvent
  nameWithType: UIElement3D.DragEnterEvent
  fullName: System.Windows.UIElement3D.DragEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.DragEnter&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 DragEnterEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.DragLeave
  id: DragLeave
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: DragLeave
  nameWithType: UIElement3D.DragLeave
  fullName: System.Windows.UIElement3D.DragLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "輸入的系統回報以此項目作為拖曳來源的基礎拖曳事件時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName>附加這個類別的事件，以便 DragLeave 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> 附加至 DragLeave 事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName>       .NET Framework 3.5 版中引進 DragLeave。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_DragLeave&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.DragLeaveEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.DragEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewDragLeave>。</xref:System.Windows.UIElement3D.PreviewDragLeave> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement3D.DragLeaveEvent>      -覆寫<xref:System.Windows.UIElement3D.OnDragLeave%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnDragLeave%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler DragLeave;
    return:
      type: System.Windows.DragEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.DragLeaveEvent
  id: DragLeaveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: DragLeaveEvent
  nameWithType: UIElement3D.DragLeaveEvent
  fullName: System.Windows.UIElement3D.DragLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.DragLeave&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 DragLeaveEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.DragOver
  id: DragOver
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: DragOver
  nameWithType: UIElement3D.DragOver
  fullName: System.Windows.UIElement3D.DragOver
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "輸入的系統回報以此項目作為可能置放目標的基礎拖曳事件時發生。"
  remarks: "即使拖曳來自項目範圍中，就會發生此事件。 如果拖曳啟動界限之外，然後移動到內部，也會引發這個事件，以及<xref:System.Windows.UIElement3D.DragEnter>和相關的預覽事件。</xref:System.Windows.UIElement3D.DragEnter>       此事件會建立一個別名<xref:System.Windows.DragDrop.DragOver?displayProperty=fullName>附加這個類別的事件，以便拖曳經過時顯示屬於類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> 附加至拖曳經過時顯示事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.DragOver?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.DragOver?displayProperty=fullName>       拖曳經過時顯示.NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_DragOver&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.DragOverEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.DragEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewDragOver>。</xref:System.Windows.UIElement3D.PreviewDragOver> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement3D.DragOverEvent>      -覆寫<xref:System.Windows.UIElement3D.OnDragOver%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnDragOver%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler DragOver;
    return:
      type: System.Windows.DragEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.DragOverEvent
  id: DragOverEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: DragOverEvent
  nameWithType: UIElement3D.DragOverEvent
  fullName: System.Windows.UIElement3D.DragOverEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.DragOver&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 DragOverEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragOverEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.Drop
  id: Drop
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: Drop
  nameWithType: UIElement3D.Drop
  fullName: System.Windows.UIElement3D.Drop
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於輸入的系統報告其下的置放事件與這個項目作為置放目標。"
  remarks: "此事件會建立一個別名<xref:System.Windows.DragDrop.Drop?displayProperty=fullName>附加的事件，這個類別，因此該 Drop 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.Drop?displayProperty=fullName> 附加至卸除事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.Drop?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.Drop?displayProperty=fullName>       卸除是在.NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_Drop&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.DropEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.DragEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewDrop>。</xref:System.Windows.UIElement3D.PreviewDrop> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement3D.DropEvent>      -覆寫<xref:System.Windows.UIElement3D.OnDrop%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnDrop%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler Drop;
    return:
      type: System.Windows.DragEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.DropEvent
  id: DropEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: DropEvent
  nameWithType: UIElement3D.DropEvent
  fullName: System.Windows.UIElement3D.DropEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.Drop&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 DropEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DropEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.Focus
  id: Focus
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: Focus()
  nameWithType: UIElement3D.Focus()
  fullName: System.Windows.UIElement3D.Focus()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "嘗試將此項目上設定邏輯焦點。"
  remarks: "若要可設定焦點，<xref:System.Windows.UIElement3D.Focusable%2A>和<xref:System.Windows.UIElement3D.IsEnabled%2A>兩者都必須是`true`。</xref:System.Windows.UIElement3D.IsEnabled%2A> </xref:System.Windows.UIElement3D.Focusable%2A>       即使項目是在特定的樹狀結構中的可設定焦點且已啟用，事件處理，（例如，針對複合控制項） 可能會回應預覽焦點事件藉由禁止焦點，因此這個方法會傳回`false`。       如果呼叫焦點傳回`true`，<xref:System.Windows.UIElement3D.IsKeyboardFocused%2A>和<xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A>也`true`。</xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> </xref:System.Windows.UIElement3D.IsKeyboardFocused%2A>       如果相關的屬性尚未`true`，當您呼叫焦點，一或多個下列事件會依照下列順序引發︰ <xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus>， <xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus>（來源為新的焦點目標） <xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged>， <xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged>， <xref:System.Windows.UIElement3D.LostKeyboardFocus>， <xref:System.Windows.UIElement3D.GotKeyboardFocus>（來源為新的焦點目標）。</xref:System.Windows.UIElement3D.GotKeyboardFocus> </xref:System.Windows.UIElement3D.LostKeyboardFocus> </xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> </xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> </xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> </xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus>       為了讓這個呼叫才會成功，應用程式中的某個其他項目需要先前有焦點。       焦點通常由兩個不同的概念︰ 鍵盤焦點和邏輯焦點，並不一定相同。 此方法會設定邏輯焦點，而且嘗試設定鍵盤焦點。 沒有任何程式設計的方法，來設定鍵盤焦點具體來說，這是由使用者輸入。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       焦點是在.NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public bool Focus ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果兩者邏輯和鍵盤焦點設定至這個項目。<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果只設定邏輯焦點。"
  overload: System.Windows.UIElement3D.Focus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.Focusable
  id: Focusable
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: Focusable
  nameWithType: UIElement3D.Focusable
  fullName: System.Windows.UIElement3D.Focusable
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定值，指出元素是否能夠接收焦點。"
  remarks: "只有已取得焦點的項目收到鍵盤輸入。       可設定焦點是[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]實際上會相依性屬性的屬性存取子。 這個特定的相依性屬性相當常有衍生的項目類別中以不同的方式設定其明顯&quot;default&quot;值。 這通常發生在兩種方式之一:-相依性屬性繼承自特定的衍生類別，但該衍生的類別會覆寫之相依性屬性的中繼資料，並變更屬性的預設值。       可設定焦點是在引進.NET Framework 3.5 版。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_Focusable&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.FocusableProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement3D.FocusableProperty>"
  syntax:
    content: public bool Focusable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果項目，則可設定焦點。否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>，但請參閱 < 備註 >。"
  overload: System.Windows.UIElement3D.Focusable*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.FocusableChanged
  id: FocusableChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: FocusableChanged
  nameWithType: UIElement3D.FocusableChanged
  fullName: System.Windows.UIElement3D.FocusableChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref:System.Windows.UIElement3D.Focusable*>屬性變更。</xref:System.Windows.UIElement3D.Focusable*>"
  remarks: "這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。       .NET Framework 3.5 版中引進 FocusableChanged。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.FocusableProperty
  id: FocusableProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: FocusableProperty
  nameWithType: UIElement3D.FocusableProperty
  fullName: System.Windows.UIElement3D.FocusableProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement3D.Focusable*>相依性屬性。</xref:System.Windows.UIElement3D.Focusable*>"
  remarks: ".NET Framework 3.5 版中引進 FocusableProperty。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty FocusableProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GetUIParentCore
  id: GetUIParentCore
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GetUIParentCore()
  nameWithType: UIElement3D.GetUIParentCore()
  fullName: System.Windows.UIElement3D.GetUIParentCore()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在衍生類別中覆寫，則會傳回替代[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]沒有視覺父代有此項目的父代。"
  remarks: "預設的虛擬實作這個方法會傳回`null`。 <xref:System.Windows.FrameworkElement>提供實際的實作。</xref:System.Windows.FrameworkElement>       替代的父代會用於事件的路由，在其中的項目會建立替代父結構使其事件路由偏離標準模式的視覺化樹狀目錄以標準的父代，路由的方式或在預覽路由策略中向下的情況下。       .NET Framework 3.5 版中引進 GetUIParentCore。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected System.Windows.DependencyObject GetUIParentCore ();
    parameters: []
    return:
      type: System.Windows.DependencyObject
      description: "物件，衍生類別的實作有替代的父代的連接至報表。"
  overload: System.Windows.UIElement3D.GetUIParentCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GiveFeedback
  id: GiveFeedback
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GiveFeedback
  nameWithType: UIElement3D.GiveFeedback
  fullName: System.Windows.UIElement3D.GiveFeedback
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於輸入的系統報告其下的拖放事件，包括這個項目。"
  remarks: "GiveFeedback 事件可讓您修改滑鼠指標外觀，以便將使用者視覺化回應提供拖放作業期間的拖曳事件來源。 視覺回應強調拖放作業正在進行。       此事件會建立一個別名<xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName>附加這個類別的事件，以便 GiveFeedback 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> 附加至 GiveFeedback 事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName>       GiveFeedback.NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_GiveFeedback&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.GiveFeedbackEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.GiveFeedbackEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewGiveFeedback>。</xref:System.Windows.UIElement3D.PreviewGiveFeedback> </xref:System.Windows.GiveFeedbackEventHandler> </xref:System.Windows.UIElement3D.GiveFeedbackEvent>      -覆寫<xref:System.Windows.UIElement3D.OnGiveFeedback%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnGiveFeedback%2A>"
  syntax:
    content: public event System.Windows.GiveFeedbackEventHandler GiveFeedback;
    return:
      type: System.Windows.GiveFeedbackEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GiveFeedbackEvent
  id: GiveFeedbackEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GiveFeedbackEvent
  nameWithType: UIElement3D.GiveFeedbackEvent
  fullName: System.Windows.UIElement3D.GiveFeedbackEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.GiveFeedback&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 GiveFeedbackEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GotFocus
  id: GotFocus
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GotFocus
  nameWithType: UIElement3D.GotFocus
  fullName: System.Windows.UIElement3D.GotFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素取得邏輯焦點時發生。"
  remarks: "如果使用方法呼叫刻意強制焦點，但上一個鍵盤焦點存在於不同的範圍與鍵盤焦點不同邏輯焦點。 在此案例中，鍵盤焦點會維持其所在和項目位置<xref:System.Windows.UIElement3D.Focus%2A>方法呼叫仍取得邏輯焦點。</xref:System.Windows.UIElement3D.Focus%2A>       這個事件的更精確的解釋是它時引發的值<xref:System.Windows.UIElement3D.IsFocused%2A>屬性路由的項目已從`false`至`true`。</xref:System.Windows.UIElement3D.IsFocused%2A>       由於這個事件會使用反昇路由，接收焦點的項目可能是子元素，而非項目實際附加事件處理常式。 請檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際取得焦點的項目中。</xref:System.Windows.RoutedEventArgs.Source%2A>       .NET Framework 3.5 版中引進 GotFocus。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_GotFocus&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.GotFocusEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.RoutedEventHandler>|     -沒有對應通道的事件。</xref:System.Windows.RoutedEventHandler> </xref:System.Windows.UIElement3D.GotFocusEvent>      -覆寫<xref:System.Windows.UIElement3D.OnGotFocus%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnGotFocus%2A>"
  syntax:
    content: public event System.Windows.RoutedEventHandler GotFocus;
    return:
      type: System.Windows.RoutedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GotFocusEvent
  id: GotFocusEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GotFocusEvent
  nameWithType: UIElement3D.GotFocusEvent
  fullName: System.Windows.UIElement3D.GotFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.GotFocus&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 GotFocusEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GotKeyboardFocus
  id: GotKeyboardFocus
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GotKeyboardFocus
  nameWithType: UIElement3D.GotKeyboardFocus
  fullName: System.Windows.UIElement3D.GotKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "鍵盤以此元素為焦點時發生。"
  remarks: "<xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged>是類似的事件可追蹤之屬性維護的項目; 焦點狀態中的狀態變更GotKeyboardFocus 引發的許多相同的情況。</xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged>       這個事件會使用反昇路由，因為具有焦點的項目可能是子元素，而非項目實際附加事件處理常式。 請檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際具有焦點的項目中。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件會建立一個別名<xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName>附加這個類別的事件，以便 GotKeyboardFocus 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> 附加至 GotKeyboardFocus 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName>       .NET Framework 3.5 版中引進 GotKeyboardFocus。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_GotKeyboardFocus&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.GotKeyboardFocusEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus>。</xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.UIElement3D.GotKeyboardFocusEvent>      -覆寫<xref:System.Windows.UIElement3D.OnGotKeyboardFocus%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnGotKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GotKeyboardFocusEvent
  id: GotKeyboardFocusEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GotKeyboardFocusEvent
  nameWithType: UIElement3D.GotKeyboardFocusEvent
  fullName: System.Windows.UIElement3D.GotKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.GotKeyboardFocus&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 GotKeyboardFocusEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GotMouseCapture
  id: GotMouseCapture
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GotMouseCapture
  nameWithType: UIElement3D.GotMouseCapture
  fullName: System.Windows.UIElement3D.GotMouseCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素擷取滑鼠時發生。"
  remarks: "當項目捕捉到滑鼠時，它收到滑鼠輸入，即使將滑鼠指標位於其範圍外。 滑鼠通常只會在拖放作業期間擷取並且擷取之前拖放作業的拖放動作發生。       這個事件會使用反昇路由，因為已擷取的項目可能是子元素，而非項目實際附加事件處理常式。 請檢查<xref:System.Windows.RoutedEventArgs.Source%2A>在事件資料，以判斷實際項目具有滑鼠擷取。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件會建立一個別名<xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName>附加這個類別的事件，以便 GotMouseCapture 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> 附加至 GotMouseCapture 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName>       .NET Framework 3.5 版中引進 GotMouseCapture。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_GotMouseCapture&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.GotMouseCaptureEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.MouseEventHandler>|     -沒有定義對應通道的事件。</xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement3D.GotMouseCaptureEvent>      -覆寫<xref:System.Windows.UIElement3D.OnGotMouseCapture%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnGotMouseCapture%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler GotMouseCapture;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GotMouseCaptureEvent
  id: GotMouseCaptureEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GotMouseCaptureEvent
  nameWithType: UIElement3D.GotMouseCaptureEvent
  fullName: System.Windows.UIElement3D.GotMouseCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.GotMouseCapture&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 GotMouseCaptureEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GotStylusCapture
  id: GotStylusCapture
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GotStylusCapture
  nameWithType: UIElement3D.GotStylusCapture
  fullName: System.Windows.UIElement3D.GotStylusCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素擷取手寫筆時發生。"
  remarks: "當項目擷取手寫筆時，即使指標位於其範圍外接收手寫筆輸入。 手寫筆通常只會在拖放作業期間擷取，並保留擷取，直到拖放作業的拖放動作發生。       這個事件會使用反昇路由，因為已擷取的項目可能是子元素，而非項目實際附加事件處理常式。 請檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷已擷取的實際項目中。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件會建立這個類別的附加事件的別名，以便 GotStylusCapture 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> 附加至 GotStylusCapture 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName>       .NET Framework 3.5 版中引進 GotStylusCapture。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_GotStylusCapture&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.GotStylusCaptureEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -沒有定義對應通道的事件。</xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.GotStylusCaptureEvent>      -覆寫<xref:System.Windows.UIElement3D.OnGotStylusCapture%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnGotStylusCapture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler GotStylusCapture;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GotStylusCaptureEvent
  id: GotStylusCaptureEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GotStylusCaptureEvent
  nameWithType: UIElement3D.GotStylusCaptureEvent
  fullName: System.Windows.UIElement3D.GotStylusCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.GotStylusCapture&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 GotStylusCaptureEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GotTouchCapture
  id: GotTouchCapture
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GotTouchCapture
  nameWithType: UIElement3D.GotTouchCapture
  fullName: System.Windows.UIElement3D.GotTouchCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於觸控擷取至這個項目。"
  remarks: "<a name=&quot;routedEventInfo_GotTouchCapture&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.GotTouchCaptureEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.EventHandler%601>的型別<xref:System.Windows.Input.TouchEventArgs>|     -覆寫<xref:System.Windows.UIElement3D.OnGotTouchCapture%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnGotTouchCapture%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement3D.GotTouchCaptureEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> GotTouchCapture;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GotTouchCaptureEvent
  id: GotTouchCaptureEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GotTouchCaptureEvent
  nameWithType: UIElement3D.GotTouchCaptureEvent
  fullName: System.Windows.UIElement3D.GotTouchCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.GotTouchCapture&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.InputBindings
  id: InputBindings
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: InputBindings
  nameWithType: UIElement3D.InputBindings
  fullName: System.Windows.UIElement3D.InputBindings
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得與這個項目相關聯的輸入繫結的集合。"
  remarks: "輸入繫結支援命令與輸入裝置繫的結。 例如，<xref:System.Windows.Input.MouseBinding>實作輸入包含的滑鼠裝置特定內容的繫結。</xref:System.Windows.Input.MouseBinding>       輸入繫結的集合會包含屬於此類型的輸入繫結以及宣告執行個體的輸入繫結。       相關的屬性， <xref:System.Windows.UIElement3D.CommandBindings%2A>，維持命令繫結的集合。</xref:System.Windows.UIElement3D.CommandBindings%2A> 這些不同從輸入繫結，因為它們代表的下一個層級的動作會繫結至已知命令的命令處理。       輸入.NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;xamlPropertyElementUsage_InputBindings&quot;></a># # XAML 屬性項目用法```   <object>     <object.InputBindings>       oneOrMoreInputBindings  </object.InputBindings>   </object>   ``` <a name=&quot;xamlValues_InputBindings&quot;> </a> # # XAML 值*oneOrMoreInputBindings*一或多個<xref:System.Windows.Input.InputBinding>項目 (通常<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>衍生類別)。</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.InputBinding>       每一個都應該要有<xref:System.Windows.Input.InputBinding.Command%2A>和<xref:System.Windows.Input.InputBinding.Gesture%2A>屬性設定。</xref:System.Windows.Input.InputBinding.Gesture%2A> </xref:System.Windows.Input.InputBinding.Command%2A>"
  syntax:
    content: public System.Windows.Input.InputBindingCollection InputBindings { get; }
    return:
      type: System.Windows.Input.InputBindingCollection
      description: "輸入繫結的集合。"
  overload: System.Windows.UIElement3D.InputBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.InvalidateModel
  id: InvalidateModel
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: InvalidateModel()
  nameWithType: UIElement3D.InvalidateModel()
  fullName: System.Windows.UIElement3D.InvalidateModel()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "表示項目的模型的失效。"
  remarks: "當您衍生自<xref:System.Windows.UIElement3D>類別，您可以使用這個方法並搭配<xref:System.Windows.UIElement3D.OnUpdateModel%2A>方法，以重新整理之項目的模型。</xref:System.Windows.UIElement3D.OnUpdateModel%2A> </xref:System.Windows.UIElement3D>       您只需要在進階案例中呼叫這個方法。 這類進階的案例之一就是在衍生的類別有多個屬性會影響外觀，並且您想要一次更新基礎的模型。       .NET Framework 3.5 版中引進 InvalidateModel。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example shows how to derive from the <xref:System.Windows.UIElement3D> class to create a `Sphere` class:  \n  \n [!code-cs[Shapes#Sphere](~/add/codesnippet/csharp/Shapes/Sphere.cs#sphere)]\n [!code-vb[Shapes#Sphere](~/add/codesnippet/visualbasic/shapes/sphere.vb#sphere)]  \n  \n For the complete sample, see [UIElement3D Sphere Sample](http://go.microsoft.com/fwlink/?LinkID=160044)."
  syntax:
    content: public void InvalidateModel ();
    parameters: []
  overload: System.Windows.UIElement3D.InvalidateModel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsEnabled
  id: IsEnabled
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsEnabled
  nameWithType: UIElement3D.IsEnabled
  fullName: System.Windows.UIElement3D.IsEnabled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定值，指出是否啟用這個項目中[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]。"
  remarks: "請注意這個屬性會受到特定類別的實作<xref:System.Windows.UIElement3D.IsEnabledCore%2A>特定項目，通常在執行階段。</xref:System.Windows.UIElement3D.IsEnabledCore%2A> 因此，此處所列的預設值有時不是有效。 嘗試設定此值將也可能會覆寫<xref:System.Windows.UIElement3D.IsEnabledCore%2A>.</xref:System.Windows.UIElement3D.IsEnabledCore%2A>所傳回的值       未啟用的項目不會參與點擊測試或焦點，而且不會因此輸入事件的來源。       .NET Framework 3.5 版中引進 IsEnabled。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsEnabled&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.IsEnabledProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement3D.IsEnabledProperty>"
  syntax:
    content: public bool IsEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果未啟用項目。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsEnabledChanged
  id: IsEnabledChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsEnabledChanged
  nameWithType: UIElement3D.IsEnabledChanged
  fullName: System.Windows.UIElement3D.IsEnabledChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref:System.Windows.UIElement3D.IsEnabled*>這個項目變更的屬性。</xref:System.Windows.UIElement3D.IsEnabled*>"
  remarks: "這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。       .NET Framework 3.5 版中引進 IsEnabledChanged。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsEnabledCore
  id: IsEnabledCore
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsEnabledCore
  nameWithType: UIElement3D.IsEnabledCore
  fullName: System.Windows.UIElement3D.IsEnabledCore
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，這個值就會變得的傳回值<xref:System.Windows.UIElement3D.IsEnabled*>衍生類別中。</xref:System.Windows.UIElement3D.IsEnabled*>"
  remarks: ".NET Framework 3.5 版中引進 IsEnabledCore。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual bool IsEnabledCore { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果未啟用項目。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsEnabledCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsEnabledProperty
  id: IsEnabledProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsEnabledProperty
  nameWithType: UIElement3D.IsEnabledProperty
  fullName: System.Windows.UIElement3D.IsEnabledProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement3D.IsEnabled*>相依性屬性。</xref:System.Windows.UIElement3D.IsEnabled*>"
  remarks: ".NET Framework 3.5 版中引進 IsEnabledProperty。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsEnabledProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsFocused
  id: IsFocused
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsFocused
  nameWithType: UIElement3D.IsFocused
  fullName: System.Windows.UIElement3D.IsFocused
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，決定這個項目是否具有邏輯焦點。"
  remarks: "如果某個應用程式多個焦點分區，例如功能表內容和應用程式的其餘部分之間，可能會與鍵盤焦點不同邏輯焦點。 在此案例中，應用程式 UI 的一個項目上只能是鍵盤焦點，不過，其他焦點分割中的特定項目可能仍會保留邏輯焦點。 如需有關邏輯焦點的詳細資訊，請參閱[焦點概觀](~/add/includes/ajax-current-ext-md.md)。       您未設定此屬性 （它是唯讀） 設定焦點。 這個屬性的一般用法是使用它做為相依性屬性<xref:System.Windows.Setter>或<xref:System.Windows.EventTrigger>.</xref:System.Windows.EventTrigger> </xref:System.Windows.Setter> 若要以程式設計方式設定焦點，呼叫<xref:System.Windows.UIElement3D.Focus%2A>.</xref:System.Windows.UIElement3D.Focus%2A> 藉由使用者動作或控制項實作，其中可能包括滑鼠捕捉行為，也可以設定焦點。       .NET Framework 3.5 版中引進 IsFocused。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsFocused&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.IsFocusedProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement3D.IsFocusedProperty>"
  syntax:
    content: public bool IsFocused { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個項目具有邏輯焦點。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsFocused*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsFocusedProperty
  id: IsFocusedProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsFocusedProperty
  nameWithType: UIElement3D.IsFocusedProperty
  fullName: System.Windows.UIElement3D.IsFocusedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement3D.IsFocused*>相依性屬性。</xref:System.Windows.UIElement3D.IsFocused*>"
  remarks: ".NET Framework 3.5 版中引進 IsFocusedProperty。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsFocusedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsHitTestVisible
  id: IsHitTestVisible
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsHitTestVisible
  nameWithType: UIElement3D.IsHitTestVisible
  fullName: System.Windows.UIElement3D.IsHitTestVisible
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定值，這個值宣告從其呈現內容的某些部分，這個項目是否可以可能傳回作為點擊的測試結果。"
  remarks: "這個屬性的有效值會受到點擊測試的項目邏輯樹狀中的相對位置。 比方說，如果某個元素的子元素的項目，不會叫用測試顯示，將會繼續的子系上屬性的有效值`false`，即使嘗試在本機設定該值。 基於這個理由，請務必您沒有設定 IsHitTestVisible`false`複合控制項上，除非您不想要的任何輸入或的點擊測試該控制項。 如需有關點擊測試的詳細資訊，請參閱[點擊測試視覺化的圖層中](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 IsHitTestVisible。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsHitTestVisible&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.IsHitTestVisibleProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement3D.IsHitTestVisibleProperty>"
  syntax:
    content: public bool IsHitTestVisible { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果無法從至少一個點，作為點擊的測試結果傳回這個項目否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsHitTestVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsHitTestVisibleChanged
  id: IsHitTestVisibleChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsHitTestVisibleChanged
  nameWithType: UIElement3D.IsHitTestVisibleChanged
  fullName: System.Windows.UIElement3D.IsHitTestVisibleChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref:System.Windows.UIElement3D.IsHitTestVisible*>這個項目上的相依性屬性變更。</xref:System.Windows.UIElement3D.IsHitTestVisible*>"
  remarks: "這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。       .NET Framework 3.5 版中引進 IsHitTestVisibleChanged。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsHitTestVisibleProperty
  id: IsHitTestVisibleProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsHitTestVisibleProperty
  nameWithType: UIElement3D.IsHitTestVisibleProperty
  fullName: System.Windows.UIElement3D.IsHitTestVisibleProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement3D.IsHitTestVisible*>相依性屬性。</xref:System.Windows.UIElement3D.IsHitTestVisible*>"
  remarks: ".NET Framework 3.5 版中引進 IsHitTestVisibleProperty。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsInputMethodEnabled
  id: IsInputMethodEnabled
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsInputMethodEnabled
  nameWithType: UIElement3D.IsInputMethodEnabled
  fullName: System.Windows.UIElement3D.IsInputMethodEnabled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出輸入的法系統，例如[!INCLUDE[TLA#tla_ime](~/add/includes/ajax-current-ext-md.md)]，處理輸入這個項目已啟用。"
  remarks: "這個屬性會傳回附加的屬性所傳回的值<xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName>針對目前啟用輸入法 （keyboard、 語音、 其他輸入的裝置）。</xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName>       IsInputMethodEnabled.NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public bool IsInputMethodEnabled { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果輸入的法為使用中;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 基礎附加屬性的預設值是<xref uid=&quot;langword_csharp_true;&quot; name=&quot;true;&quot; href=&quot;&quot;></xref>不過，這會受到輸入法在執行階段的實際狀態。"
  overload: System.Windows.UIElement3D.IsInputMethodEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsKeyboardFocused
  id: IsKeyboardFocused
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsKeyboardFocused
  nameWithType: UIElement3D.IsKeyboardFocused
  fullName: System.Windows.UIElement3D.IsKeyboardFocused
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出這個項目是否具有鍵盤焦點。"
  remarks: "決定的值，這個屬性的變更可能會伴隨焦點相關事件。       IsKeyboardFocused 和<xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A>常用類別事件處理常式中的其他輸入相關的事件，例如來決定項目已經有鍵盤焦點，或進行決定當滑鼠事件和鍵盤事件一起出現。</xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A>       .NET Framework 3.5 版中引進 IsKeyboardFocused。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsKeyboardFocused&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.IsKeyboardFocusedProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement3D.IsKeyboardFocusedProperty>"
  syntax:
    content: public bool IsKeyboardFocused { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個項目具有鍵盤焦點。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsKeyboardFocused*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsKeyboardFocusedChanged
  id: IsKeyboardFocusedChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsKeyboardFocusedChanged
  nameWithType: UIElement3D.IsKeyboardFocusedChanged
  fullName: System.Windows.UIElement3D.IsKeyboardFocusedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref:System.Windows.UIElement3D.IsKeyboardFocused*>這個項目上的屬性變更。</xref:System.Windows.UIElement3D.IsKeyboardFocused*>"
  remarks: "這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。       .NET Framework 3.5 版中引進 IsKeyboardFocusedChanged。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsKeyboardFocusedProperty
  id: IsKeyboardFocusedProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsKeyboardFocusedProperty
  nameWithType: UIElement3D.IsKeyboardFocusedProperty
  fullName: System.Windows.UIElement3D.IsKeyboardFocusedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement3D.IsKeyboardFocused*>相依性屬性。</xref:System.Windows.UIElement3D.IsKeyboardFocused*>"
  remarks: ".NET Framework 3.5 版中引進 IsKeyboardFocusedProperty。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsKeyboardFocusWithin
  id: IsKeyboardFocusWithin
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsKeyboardFocusWithin
  nameWithType: UIElement3D.IsKeyboardFocusWithin
  fullName: System.Windows.UIElement3D.IsKeyboardFocusWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出鍵盤焦點是否在項目或其視覺化樹狀結構子項目內的任何位置。"
  remarks: "對這個屬性的值的變更通常引發<xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged>事件，除非在衍生的類別已覆寫<xref:System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged%2A>要隱藏的事件。</xref:System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged%2A> </xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged>       您未設定這個屬性，但您也可以呼叫的項目設定焦點<xref:System.Windows.UIElement3D.Focus%2A>，或藉由<xref:System.Windows.UIElement3D.MoveFocus%2A>要求。</xref:System.Windows.UIElement3D.MoveFocus%2A> </xref:System.Windows.UIElement3D.Focus%2A> 這些方法會呼叫其中一項可能會變更這個屬性值。       <xref:System.Windows.UIElement3D.IsKeyboardFocused%2A>IsKeyboardFocusWithin 通常用於類別的事件處理常式中其他輸入相關的事件，例如，以判斷項目已經有鍵盤焦點，還是可決定當滑鼠事件和鍵盤事件一起出現。</xref:System.Windows.UIElement3D.IsKeyboardFocused%2A>       .NET Framework 3.5 版中引進 IsKeyboardFocusWithin。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsKeyboardFocusWithin&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.IsKeyboardFocusWithinProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement3D.IsKeyboardFocusWithinProperty>"
  syntax:
    content: public bool IsKeyboardFocusWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果鍵盤焦點在項目或其子項目。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsKeyboardFocusWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsKeyboardFocusWithinChanged
  id: IsKeyboardFocusWithinChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsKeyboardFocusWithinChanged
  nameWithType: UIElement3D.IsKeyboardFocusWithinChanged
  fullName: System.Windows.UIElement3D.IsKeyboardFocusWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref:System.Windows.UIElement3D.IsKeyboardFocusWithin*>這個項目上的屬性變更。</xref:System.Windows.UIElement3D.IsKeyboardFocusWithin*>"
  remarks: "這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。       .NET Framework 3.5 版中引進 IsKeyboardFocusWithinChanged。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsKeyboardFocusWithinProperty
  id: IsKeyboardFocusWithinProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsKeyboardFocusWithinProperty
  nameWithType: UIElement3D.IsKeyboardFocusWithinProperty
  fullName: System.Windows.UIElement3D.IsKeyboardFocusWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement3D.IsKeyboardFocusWithin*>相依性屬性。</xref:System.Windows.UIElement3D.IsKeyboardFocusWithin*>"
  remarks: ".NET Framework 3.5 版中引進 IsKeyboardFocusWithinProperty。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsMouseCaptured
  id: IsMouseCaptured
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsMouseCaptured
  nameWithType: UIElement3D.IsMouseCaptured
  fullName: System.Windows.UIElement3D.IsMouseCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出是否將滑鼠擷取至這個項目。"
  remarks: "與處理序中的拖放作業相關的滑鼠捕捉的狀態。       .NET Framework 3.5 版中引進 IsMouseCaptured。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsMouseCaptured&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.IsMouseCapturedProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement3D.IsMouseCapturedProperty>"
  syntax:
    content: public bool IsMouseCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果項目具有滑鼠擷取;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsMouseCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsMouseCapturedChanged
  id: IsMouseCapturedChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsMouseCapturedChanged
  nameWithType: UIElement3D.IsMouseCapturedChanged
  fullName: System.Windows.UIElement3D.IsMouseCapturedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref:System.Windows.UIElement3D.IsMouseCaptured*>這個項目上的屬性變更。</xref:System.Windows.UIElement3D.IsMouseCaptured*>"
  remarks: "這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。       .NET Framework 3.5 版中引進 IsMouseCapturedChanged。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsMouseCapturedProperty
  id: IsMouseCapturedProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsMouseCapturedProperty
  nameWithType: UIElement3D.IsMouseCapturedProperty
  fullName: System.Windows.UIElement3D.IsMouseCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement3D.IsMouseCaptured*>相依性屬性。</xref:System.Windows.UIElement3D.IsMouseCaptured*>"
  remarks: ".NET Framework 3.5 版中引進 IsMouseCapturedProperty。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsMouseCaptureWithin
  id: IsMouseCaptureWithin
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsMouseCaptureWithin
  nameWithType: UIElement3D.IsMouseCaptureWithin
  fullName: System.Windows.UIElement3D.IsMouseCaptureWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，決定滑鼠捕捉是否由這個項目，或其視覺化樹狀中的子項目所保留。"
  remarks: ".NET Framework 3.5 版中引進 IsMouseCaptureWithin。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsMouseCaptureWithin&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.IsMouseCaptureWithinProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement3D.IsMouseCaptureWithinProperty>"
  syntax:
    content: public bool IsMouseCaptureWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個項目或包含的項目具有滑鼠擷取;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsMouseCaptureWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsMouseCaptureWithinChanged
  id: IsMouseCaptureWithinChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsMouseCaptureWithinChanged
  nameWithType: UIElement3D.IsMouseCaptureWithinChanged
  fullName: System.Windows.UIElement3D.IsMouseCaptureWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref:System.Windows.UIElement3D.IsMouseCaptureWithin*>這個項目上的屬性變更。</xref:System.Windows.UIElement3D.IsMouseCaptureWithin*>"
  remarks: "這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。       .NET Framework 3.5 版中引進 IsMouseCaptureWithinChanged。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsMouseCaptureWithinProperty
  id: IsMouseCaptureWithinProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsMouseCaptureWithinProperty
  nameWithType: UIElement3D.IsMouseCaptureWithinProperty
  fullName: System.Windows.UIElement3D.IsMouseCaptureWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement3D.IsMouseCaptureWithin*>相依性屬性。</xref:System.Windows.UIElement3D.IsMouseCaptureWithin*>"
  remarks: ".NET Framework 3.5 版中引進 IsMouseCaptureWithinProperty。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsMouseDirectlyOver
  id: IsMouseDirectlyOver
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsMouseDirectlyOver
  nameWithType: UIElement3D.IsMouseDirectlyOver
  fullName: System.Windows.UIElement3D.IsMouseDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出滑鼠指標位置是否與點擊測試結果，項目納入考量。"
  remarks: "不同於<xref:System.Windows.UIElement3D.IsMouseOver%2A>，這個屬性才`true`如果滑鼠指標常值的項目，因為其適用於點擊測試</xref:System.Windows.UIElement3D.IsMouseOver%2A> 如果滑鼠指標改為子項目，這個屬性會是`false`。 大部分的情況下都不製作控制項，使用<xref:System.Windows.UIElement3D.IsMouseOver%2A>改用。</xref:System.Windows.UIElement3D.IsMouseOver%2A>       如果將滑鼠擷取由這個項目，而且這個屬性為`true`在擷取時，這個屬性會繼續傳回`true`直到失去滑鼠捕捉但其範圍不是指標。       .NET Framework 3.5 版中引進 IsMouseDirectlyOver。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsMouseDirectlyOver&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.IsMouseDirectlyOverProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement3D.IsMouseDirectlyOverProperty>"
  syntax:
    content: public bool IsMouseDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果滑鼠指標位於相同的項目結果與點擊測試。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsMouseDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsMouseDirectlyOverChanged
  id: IsMouseDirectlyOverChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsMouseDirectlyOverChanged
  nameWithType: UIElement3D.IsMouseDirectlyOverChanged
  fullName: System.Windows.UIElement3D.IsMouseDirectlyOverChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref:System.Windows.UIElement3D.IsMouseDirectlyOver*>這個項目上的屬性變更。</xref:System.Windows.UIElement3D.IsMouseDirectlyOver*>"
  remarks: "這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。       .NET Framework 3.5 版中引進 IsMouseDirectlyOverChanged。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsMouseDirectlyOverProperty
  id: IsMouseDirectlyOverProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsMouseDirectlyOverProperty
  nameWithType: UIElement3D.IsMouseDirectlyOverProperty
  fullName: System.Windows.UIElement3D.IsMouseDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement3D.IsMouseDirectlyOver*>相依性屬性。</xref:System.Windows.UIElement3D.IsMouseDirectlyOver*>"
  remarks: ".NET Framework 3.5 版中引進 IsMouseDirectlyOverProperty。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsMouseOver
  id: IsMouseOver
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsMouseOver
  nameWithType: UIElement3D.IsMouseOver
  fullName: System.Windows.UIElement3D.IsMouseOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出滑鼠指標是否位在這個項目 （包括視覺化樹狀結構中的子項目）。"
  remarks: "一般而言，控制項是複合的控制項 （視覺化樹狀結構） 內的各種項目都會報告包含控制項的滑鼠狀態。 例如，<xref:System.Windows.Controls.ListBox>樣式控制項將會報告為 IsMouseOver`true`如果滑鼠任意處是它的幾何，包括任何<xref:System.Windows.Controls.ListBoxItem>.</xref:System.Windows.Controls.ListBoxItem> </xref:System.Windows.Controls.ListBox>       雖然類似&quot;IsMouseOverChanged 」 事件不存在，便會執行數個類似的事件。 例如，您可以處理<xref:System.Windows.UIElement3D.MouseEnter>， <xref:System.Windows.UIElement3D.MouseMove>，和<xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged>。</xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged> </xref:System.Windows.UIElement3D.MouseMove> </xref:System.Windows.UIElement3D.MouseEnter>       如果此元素擷取滑鼠，這個屬性會保留`true`直到已失去滑鼠捕捉滑鼠指標離開項目範圍。       有些控制項刻意捕捉滑鼠上似乎沒有直接牽涉到滑鼠特定動作。 這可能會導致正在 IsMouseOver`true`即使看似沒有移動滑鼠。       .NET Framework 3.5 版中引進 IsMouseOver。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsMouseOver&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.IsMouseOverProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement3D.IsMouseOverProperty>"
  syntax:
    content: public bool IsMouseOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果滑鼠指標位在項目或其子項目。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsMouseOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsMouseOverProperty
  id: IsMouseOverProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsMouseOverProperty
  nameWithType: UIElement3D.IsMouseOverProperty
  fullName: System.Windows.UIElement3D.IsMouseOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement3D.IsMouseOver*>相依性屬性。</xref:System.Windows.UIElement3D.IsMouseOver*>"
  remarks: ".NET Framework 3.5 版中引進 IsMouseOverProperty。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsStylusCaptured
  id: IsStylusCaptured
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsStylusCaptured
  nameWithType: UIElement3D.IsStylusCaptured
  fullName: System.Windows.UIElement3D.IsStylusCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出是否將手寫筆擷取由這個項目。"
  remarks: "觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 IsStylusCaptured。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsStylusCaptured&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.IsStylusCapturedProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement3D.IsStylusCapturedProperty>"
  syntax:
    content: public bool IsStylusCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果項目具有手寫筆擷取;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsStylusCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsStylusCapturedChanged
  id: IsStylusCapturedChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsStylusCapturedChanged
  nameWithType: UIElement3D.IsStylusCapturedChanged
  fullName: System.Windows.UIElement3D.IsStylusCapturedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref:System.Windows.UIElement3D.IsStylusCaptured*>這個項目上的屬性變更。</xref:System.Windows.UIElement3D.IsStylusCaptured*>"
  remarks: "這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。       .NET Framework 3.5 版中引進 IsStylusCapturedChanged。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsStylusCapturedProperty
  id: IsStylusCapturedProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsStylusCapturedProperty
  nameWithType: UIElement3D.IsStylusCapturedProperty
  fullName: System.Windows.UIElement3D.IsStylusCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement3D.IsStylusCaptured*>相依性屬性。</xref:System.Windows.UIElement3D.IsStylusCaptured*>"
  remarks: ".NET Framework 3.5 版中引進 IsStylusCapturedProperty。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsStylusCaptureWithin
  id: IsStylusCaptureWithin
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsStylusCaptureWithin
  nameWithType: UIElement3D.IsStylusCaptureWithin
  fullName: System.Windows.UIElement3D.IsStylusCaptureWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，決定手寫筆擷取是由這個項目或項目範圍及其視覺化樹狀結構中的項目持有。"
  remarks: "觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 IsStylusCaptureWithin。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsStylusCaptureWithin&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.IsStylusCaptureWithinProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement3D.IsStylusCaptureWithinProperty>"
  syntax:
    content: public bool IsStylusCaptureWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個項目或包含的項目具有手寫筆擷取;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsStylusCaptureWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsStylusCaptureWithinChanged
  id: IsStylusCaptureWithinChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsStylusCaptureWithinChanged
  nameWithType: UIElement3D.IsStylusCaptureWithinChanged
  fullName: System.Windows.UIElement3D.IsStylusCaptureWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref:System.Windows.UIElement3D.IsStylusCaptureWithin*>這個項目上的屬性變更。</xref:System.Windows.UIElement3D.IsStylusCaptureWithin*>"
  remarks: "這是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。       .NET Framework 3.5 版中引進 IsStylusCaptureWithinChanged。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsStylusCaptureWithinProperty
  id: IsStylusCaptureWithinProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsStylusCaptureWithinProperty
  nameWithType: UIElement3D.IsStylusCaptureWithinProperty
  fullName: System.Windows.UIElement3D.IsStylusCaptureWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement3D.IsStylusCaptureWithin*>相依性屬性。</xref:System.Windows.UIElement3D.IsStylusCaptureWithin*>"
  remarks: ".NET Framework 3.5 版中引進 IsStylusCaptureWithinProperty。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsStylusDirectlyOver
  id: IsStylusDirectlyOver
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsStylusDirectlyOver
  nameWithType: UIElement3D.IsStylusDirectlyOver
  fullName: System.Windows.UIElement3D.IsStylusDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出手寫筆位置是否與點擊測試結果，項目納入考量對應。"
  remarks: "不同於<xref:System.Windows.UIElement3D.IsStylusOver%2A>，這個屬性才`true`如果手寫筆在元素上方。</xref:System.Windows.UIElement3D.IsStylusOver%2A> 如果手寫筆改為透過子元素或元素的更深入的複合 （視覺化樹狀結構） 的一部分的項目，這個屬性會是`false`。       除非您知道控制項的複合 （例如，您使用這個屬性的自訂控制項範本中的控制項，您定義），這個屬性可能會傳回非預期的結果。 大部分的情況下都不製作控制項，使用<xref:System.Windows.UIElement3D.IsStylusOver%2A>改用。</xref:System.Windows.UIElement3D.IsStylusOver%2A>       如果這個項目具有手寫筆擷取，而且這個屬性是`true`在擷取時，這個屬性會保持`true`直到手寫筆擷取遺失，且其範圍不是手寫筆。       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 IsStylusDirectlyOver。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsStylusDirectlyOver&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.IsStylusDirectlyOverProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement3D.IsStylusDirectlyOverProperty>"
  syntax:
    content: public bool IsStylusDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果手寫筆指標的相同項目結果與點擊測試。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsStylusDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsStylusDirectlyOverChanged
  id: IsStylusDirectlyOverChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsStylusDirectlyOverChanged
  nameWithType: UIElement3D.IsStylusDirectlyOverChanged
  fullName: System.Windows.UIElement3D.IsStylusDirectlyOverChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref:System.Windows.UIElement3D.IsStylusDirectlyOver*>這個項目上的屬性變更。</xref:System.Windows.UIElement3D.IsStylusDirectlyOver*>"
  remarks: "這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。       .NET Framework 3.5 版中引進 IsStylusDirectlyOverChanged。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsStylusDirectlyOverProperty
  id: IsStylusDirectlyOverProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsStylusDirectlyOverProperty
  nameWithType: UIElement3D.IsStylusDirectlyOverProperty
  fullName: System.Windows.UIElement3D.IsStylusDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement3D.IsStylusDirectlyOver*>相依性屬性。</xref:System.Windows.UIElement3D.IsStylusDirectlyOver*>"
  remarks: ".NET Framework 3.5 版中引進 IsStylusDirectlyOverProperty。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsStylusOver
  id: IsStylusOver
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsStylusOver
  nameWithType: UIElement3D.IsStylusOver
  fullName: System.Windows.UIElement3D.IsStylusOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出手寫筆游標是否位於此項目上方 （包括視覺子項目）。"
  remarks: "如果這個項目具有手寫筆擷取，這個屬性會繼續傳回`true`直到手寫筆擷取是遺失而且已超出其範圍的指標。       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 IsStylusOver。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsStylusOver&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.IsStylusOverProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement3D.IsStylusOverProperty>"
  syntax:
    content: public bool IsStylusOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果手寫筆游標位在項目或其子項目。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsStylusOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsStylusOverProperty
  id: IsStylusOverProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsStylusOverProperty
  nameWithType: UIElement3D.IsStylusOverProperty
  fullName: System.Windows.UIElement3D.IsStylusOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement3D.IsStylusOver*>相依性屬性。</xref:System.Windows.UIElement3D.IsStylusOver*>"
  remarks: ".NET Framework 3.5 版中引進 IsStylusOverProperty。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsVisible
  id: IsVisible
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsVisible
  nameWithType: UIElement3D.IsVisible
  fullName: System.Windows.UIElement3D.IsVisible
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出這個項目中是否可見[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]。"
  remarks: "IsVisible 值判斷會考量許多因素而定。 相反地， <xref:System.Windows.UIElement3D.Visibility%2A>，這是可設定的屬性，只表示要以程式設計的方式讓項目，可見或不可見。</xref:System.Windows.UIElement3D.Visibility%2A>       這個屬性的值的變更通常會引發<xref:System.Windows.UIElement3D.IsVisibleChanged>事件。</xref:System.Windows.UIElement3D.IsVisibleChanged> 沒有相符[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]」 上 * 」 類別處理覆寫方法，讓某些衍生類別覆寫該行為，以及處理事件，但仍無法直接與<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>附加類別處理常式       IsVisible 所在位置的項目`false`參與輸入的事件 （或命令），請執行不影響量值或排列傳遞的版面配置，不是可設定焦點、 索引標籤順序而且不會報告在點擊測試。 相較之下，項目位置<xref:System.Windows.UIElement3D.IsEnabled%2A>是`false`仍會參與事件和命令，以及點擊測試，但是也不是可設定焦點。</xref:System.Windows.UIElement3D.IsEnabled%2A>       IsVisible 不是要做為樣式的觸發程序。 使用 IsVisible 為樣式的觸發程序可能會有無法預期的結果。 IsVisible 適用於較低層級的輸入實作所檢查的狀態。       IsVisible.NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsVisible&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.IsVisibleProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement3D.IsVisibleProperty>"
  syntax:
    content: public bool IsVisible { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果元素是可見的。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsVisibleChanged
  id: IsVisibleChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsVisibleChanged
  nameWithType: UIElement3D.IsVisibleChanged
  fullName: System.Windows.UIElement3D.IsVisibleChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref:System.Windows.UIElement3D.IsVisible*>這個項目上的屬性變更。</xref:System.Windows.UIElement3D.IsVisible*>"
  remarks: "這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。       .NET Framework 3.5 版中引進 IsVisibleChanged。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsVisibleProperty
  id: IsVisibleProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsVisibleProperty
  nameWithType: UIElement3D.IsVisibleProperty
  fullName: System.Windows.UIElement3D.IsVisibleProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement3D.IsVisible*>相依性屬性。</xref:System.Windows.UIElement3D.IsVisible*>"
  remarks: ".NET Framework 3.5 版中引進 IsVisibleProperty。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsVisibleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.KeyDown
  id: KeyDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: KeyDown
  nameWithType: UIElement3D.KeyDown
  fullName: System.Windows.UIElement3D.KeyDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "鍵盤以此元素為焦點時按下按鍵時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>附加這個類別的事件，以便 KeyDown 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> 附加至 KeyDown 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>       .NET Framework 3.5 版中引進 KeyDown。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_KeyDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.KeyDownEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.KeyEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewKeyDown>。</xref:System.Windows.UIElement3D.PreviewKeyDown> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.UIElement3D.KeyDownEvent>      -覆寫<xref:System.Windows.UIElement3D.OnKeyDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnKeyDown%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler KeyDown;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.KeyDownEvent
  id: KeyDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: KeyDownEvent
  nameWithType: UIElement3D.KeyDownEvent
  fullName: System.Windows.UIElement3D.KeyDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.KeyDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 KeyDownEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent KeyDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.KeyUp
  id: KeyUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: KeyUp
  nameWithType: UIElement3D.KeyUp
  fullName: System.Windows.UIElement3D.KeyUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "鍵盤以此元素為焦點且放開按鍵時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>附加這個類別的事件，以便 KeyUp 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> 附加至 KeyUp 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>       .NET Framework 3.5 版中引進 KeyUp。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_KeyUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.KeyUpEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.KeyEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewKeyUp>。</xref:System.Windows.UIElement3D.PreviewKeyUp> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.UIElement3D.KeyUpEvent>      -覆寫<xref:System.Windows.UIElement3D.OnKeyUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnKeyUp%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler KeyUp;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.KeyUpEvent
  id: KeyUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: KeyUpEvent
  nameWithType: UIElement3D.KeyUpEvent
  fullName: System.Windows.UIElement3D.KeyUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.KeyUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 KeyUpEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent KeyUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.LostFocus
  id: LostFocus
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: LostFocus
  nameWithType: UIElement3D.LostFocus
  fullName: System.Windows.UIElement3D.LostFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素失去邏輯焦點時發生。"
  remarks: "如果使用方法呼叫刻意強制焦點離開但上一個鍵盤焦點存在於不同範圍中與鍵盤焦點不同邏輯焦點。 在此案例中、 鍵盤焦點會維持為，其所在和項目位置<xref:System.Windows.UIElement3D.Focus%2A>方法呼叫仍取得邏輯焦點。</xref:System.Windows.UIElement3D.Focus%2A>       這個事件的更精確的解釋是它時引發的值<xref:System.Windows.UIElement3D.IsFocused%2A>屬性路由的項目從變更`true`至`false`。</xref:System.Windows.UIElement3D.IsFocused%2A>       由於這個事件會使用反昇路由，失去焦點的項目可能是子元素，而非項目實際附加事件處理常式。 請檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際取得焦點的項目中。</xref:System.Windows.RoutedEventArgs.Source%2A>       .NET Framework 3.5 版中引進 LostFocus。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_LostFocus&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.LostFocusEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.RoutedEventHandler>|     -沒有對應通道的事件。</xref:System.Windows.RoutedEventHandler> </xref:System.Windows.UIElement3D.LostFocusEvent>      -覆寫<xref:System.Windows.UIElement3D.OnLostFocus%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnLostFocus%2A>"
  syntax:
    content: public event System.Windows.RoutedEventHandler LostFocus;
    return:
      type: System.Windows.RoutedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.LostFocusEvent
  id: LostFocusEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: LostFocusEvent
  nameWithType: UIElement3D.LostFocusEvent
  fullName: System.Windows.UIElement3D.LostFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.LostFocus&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 LostFocusEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.LostKeyboardFocus
  id: LostKeyboardFocus
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: LostKeyboardFocus
  nameWithType: UIElement3D.LostKeyboardFocus
  fullName: System.Windows.UIElement3D.LostKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "鍵盤不再這個項目上為焦點時發生。"
  remarks: "由於這個事件會使用反昇路由，失去焦點的項目可能是子元素，而非項目實際附加事件處理常式。 請檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際失去焦點的項目中。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件會建立一個別名<xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName>附加這個類別中，事件，以便 LostKeyboardFocus 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> 附加至 LostKeyboardFocus 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName>       .NET Framework 3.5 版中引進 LostKeyboardFocus。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_LostKeyboardFocus&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.LostKeyboardFocusEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus>。</xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.UIElement3D.LostKeyboardFocusEvent>      -覆寫<xref:System.Windows.UIElement3D.OnLostKeyboardFocus%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnLostKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.LostKeyboardFocusEvent
  id: LostKeyboardFocusEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: LostKeyboardFocusEvent
  nameWithType: UIElement3D.LostKeyboardFocusEvent
  fullName: System.Windows.UIElement3D.LostKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.LostKeyboardFocus&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 LostKeyboardFocusEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.LostMouseCapture
  id: LostMouseCapture
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: LostMouseCapture
  nameWithType: UIElement3D.LostMouseCapture
  fullName: System.Windows.UIElement3D.LostMouseCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素失去滑鼠擷取時發生。"
  remarks: "當項目捕捉到滑鼠時，它收到滑鼠輸入，即使指標位於其範圍外。 滑鼠通常只會在拖放作業期間擷取。       由於這個事件會使用反昇路由，失去擷取項目可能是子元素，而非項目實際附加事件處理常式。 請檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際遺失擷取的項目中。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件會建立一個別名<xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName>附加這個類別中，事件，以便 LostMouseCapture 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> 附加至 LostMouseCapture 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName>       .NET Framework 3.5 版中引進 LostMouseCapture。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_LostMouseCapture&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.LostMouseCaptureEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.MouseEventHandler>|     -沒有定義對應通道的事件。</xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement3D.LostMouseCaptureEvent>      -覆寫<xref:System.Windows.UIElement3D.OnLostMouseCapture%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnLostMouseCapture%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler LostMouseCapture;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.LostMouseCaptureEvent
  id: LostMouseCaptureEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: LostMouseCaptureEvent
  nameWithType: UIElement3D.LostMouseCaptureEvent
  fullName: System.Windows.UIElement3D.LostMouseCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.LostMouseCapture&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 LostMouseCaptureEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.LostStylusCapture
  id: LostStylusCapture
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: LostStylusCapture
  nameWithType: UIElement3D.LostStylusCapture
  fullName: System.Windows.UIElement3D.LostStylusCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素失去手寫筆擷取時發生。"
  remarks: "當項目擷取手寫筆時，即使指標位於其範圍外接收手寫筆輸入。 通常只會在拖放作業期間擷取手寫筆。       由於這個事件會使用反昇路由，失去焦點的項目可能是子元素，而非項目實際附加事件處理常式。 請檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際失去焦點的項目中。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件會建立一個別名<xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName>附加這個類別中，事件，以便 LostStylusCapture 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> 附加至 LostStylusCapture 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName>       .NET Framework 3.5 版中引進 LostStylusCapture。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_LostStylusCapture&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.LostStylusCaptureEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -沒有定義對應通道的事件。</xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.LostStylusCaptureEvent>      -覆寫<xref:System.Windows.UIElement3D.OnLostStylusCapture%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnLostStylusCapture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler LostStylusCapture;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.LostStylusCaptureEvent
  id: LostStylusCaptureEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: LostStylusCaptureEvent
  nameWithType: UIElement3D.LostStylusCaptureEvent
  fullName: System.Windows.UIElement3D.LostStylusCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.LostStylusCapture&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 LostStylusCaptureEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.LostTouchCapture
  id: LostTouchCapture
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: LostTouchCapture
  nameWithType: UIElement3D.LostTouchCapture
  fullName: System.Windows.UIElement3D.LostTouchCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素失去觸控擷取時發生。"
  remarks: "<a name=&quot;routedEventInfo_LostTouchCapture&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.LostTouchCaptureEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.EventHandler%601>的型別<xref:System.Windows.Input.TouchEventArgs>。 |     -覆寫<xref:System.Windows.UIElement3D.OnLostTouchCapture%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnLostTouchCapture%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement3D.LostTouchCaptureEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> LostTouchCapture;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.LostTouchCaptureEvent
  id: LostTouchCaptureEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: LostTouchCaptureEvent
  nameWithType: UIElement3D.LostTouchCaptureEvent
  fullName: System.Windows.UIElement3D.LostTouchCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.LostTouchCapture&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseDown
  id: MouseDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseDown
  nameWithType: UIElement3D.MouseDown
  fullName: System.Windows.UIElement3D.MouseDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於指標位於此項目上方時，按下任何滑鼠按鈕。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>附加這個類別中，事件，以便 MouseDown 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 附加至 MouseDown 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       MouseDown 事件通常就會引發以及 <xref:System.Windows.UIElement3D.MouseLeftButtonDown>或<xref:System.Windows.UIElement3D.MouseRightButtonDown>，這對應到其中的兩個標準滑鼠按鈕的按下。</xref:System.Windows.UIElement3D.MouseRightButtonDown> </xref:System.Windows.UIElement3D.MouseLeftButtonDown> <xref:System.Windows.UIElement3D.MouseLeftButtonDown>和<xref:System.Windows.UIElement3D.MouseRightButtonDown>也是路由的事件，但它們是直接路由的事件，就會引發適當的按鈕特定事件時<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>事件到達事件路由上的這個項目。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.UIElement3D.MouseRightButtonDown></xref:System.Windows.UIElement3D.MouseLeftButtonDown> 請參閱備註或<xref:System.Windows.UIElement3D.MouseLeftButtonDown><xref:System.Windows.UIElement3D.MouseRightButtonDown>.</xref:System.Windows.UIElement3D.MouseRightButtonDown> </xref:System.Windows.UIElement3D.MouseLeftButtonDown>      > [!IMPORTANT] > 某些控制項可能會繼承的類別處理滑鼠按鈕的事件。 滑鼠左鍵按下事件是最有可能有控制項中的類別處理事件。 處理通常類別標示基礎<xref:System.Windows.Input.Mouse>為已處理的類別事件。</xref:System.Windows.Input.Mouse> 一旦處理標記事件，通常無法引發另一個執行個體處理常式附加至該元素。 不通常也會引發任何其他類別或執行個體的處理常式附加到反昇方向朝向 UI 樹狀目錄中的根項目。       您可以解決的問題，上述的重要事項中所述，仍收到 MouseDown 事件，以滑鼠左鍵，往下處理使用其中一個這些方案的類別衍生類別上的事件︰ 為附加的處理常式<xref:System.Windows.UIElement3D.PreviewMouseDown>未標示為已由控制項所處理的事件。</xref:System.Windows.UIElement3D.PreviewMouseDown> 請注意，因為這是預覽事件時，路由從根目錄開始，並透過通道傳送到控制項。      -註冊控制項上的處理常式可循序呼叫<xref:System.Windows.UIElement3D.AddHandler%2A>，然後選擇讓接聽事件，即使它們已標示為已處理路由的事件資料中的處理常式的簽章選項。</xref:System.Windows.UIElement3D.AddHandler%2A>       MouseDown.NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_MouseDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.MouseDownEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewMouseDown>。</xref:System.Windows.UIElement3D.PreviewMouseDown> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.MouseDownEvent>      -覆寫<xref:System.Windows.UIElement3D.OnMouseDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnMouseDown%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseDownEvent
  id: MouseDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseDownEvent
  nameWithType: UIElement3D.MouseDownEvent
  fullName: System.Windows.UIElement3D.MouseDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.MouseDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 MouseDownEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseEnter
  id: MouseEnter
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseEnter
  nameWithType: UIElement3D.MouseEnter
  fullName: System.Windows.UIElement3D.MouseEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於滑鼠指標進入此元素的邊界。"
  remarks: "MouseEnter 是[路由傳送事件概觀](~/add/includes/ajax-current-ext-md.md)使用直接的事件處理路由策略。 直接路由的事件不會引發的路由。相反地，它們會在處理相同的項目所引發的位置。       雖然 MouseEnter 會追蹤滑鼠指標進入項目的範圍時，此事件更常值報告的<xref:System.Windows.UIElement3D.IsMouseOver%2A>屬性值已經從`false`至`true`這個項目上。</xref:System.Windows.UIElement3D.IsMouseOver%2A>       此事件會建立一個別名<xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName>附加這個類別中，事件，以便 MouseEnter 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> 附加至 MouseEnter 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName>       MouseEnter.NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_MouseEnter&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.MouseEnterEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.MouseEventHandler>|     -覆寫<xref:System.Windows.UIElement3D.OnMouseEnter%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnMouseEnter%2A> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement3D.MouseEnterEvent>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseEnter;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseEnterEvent
  id: MouseEnterEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseEnterEvent
  nameWithType: UIElement3D.MouseEnterEvent
  fullName: System.Windows.UIElement3D.MouseEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.MouseEnter&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 MouseEnterEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseLeave
  id: MouseLeave
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseLeave
  nameWithType: UIElement3D.MouseLeave
  fullName: System.Windows.UIElement3D.MouseLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於滑鼠指標離開此元素的邊界。"
  remarks: "MouseLeave 是[路由傳送事件概觀](~/add/includes/ajax-current-ext-md.md)使用直接的事件處理路由策略。 直接路由的事件不會引發的路由。相反地，它們會在處理相同的項目所引發的位置。       雖然 MouseLeave 會追蹤滑鼠離開項目時，此事件更常值報告的<xref:System.Windows.UIElement3D.IsMouseOver%2A>屬性值已經從`true`至`false`這個項目上。</xref:System.Windows.UIElement3D.IsMouseOver%2A>       此事件會建立一個別名<xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName>附加這個類別中，事件，以便 MouseLeave 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> 附加至 MouseLeave 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName>       MouseLeave.NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_MouseLeave&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.MouseLeaveEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.MouseEventHandler>|     -覆寫<xref:System.Windows.UIElement3D.OnMouseLeave%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnMouseLeave%2A> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement3D.MouseLeaveEvent>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseLeave;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseLeaveEvent
  id: MouseLeaveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseLeaveEvent
  nameWithType: UIElement3D.MouseLeaveEvent
  fullName: System.Windows.UIElement3D.MouseLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.MouseLeave&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 MouseLeaveEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseLeftButtonDown
  id: MouseLeftButtonDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseLeftButtonDown
  nameWithType: UIElement3D.MouseLeftButtonDown
  fullName: System.Windows.UIElement3D.MouseLeftButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於滑鼠指標位在這個項目時按下滑鼠左鍵。"
  remarks: "雖然這[路由傳送事件概觀](~/add/includes/ajax-current-ext-md.md)似乎遵循反昇路由項目樹狀目錄中，透過它實際上是直接的路由的事件的引發，而且每個<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D> reraised 沿著項目樹狀結構       此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>事件，這是附加的事件處理的事件路由上的每個項目。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       這個事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<xref:System.Windows.UIElement3D.AddHandler%2A>，使用選項來處理已標記為已處理的事件、 事件接聽程式，才能。</xref:System.Windows.UIElement3D.AddHandler%2A> 如果您要標示 MouseLeftButtonDown 處理，您基本上會標示<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>路由中的所有其他接聽程式處理，而且所有相關事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 這可能包括類別處理常式產生事件，例如<xref:System.Windows.Controls.Control.MouseDoubleClick>.</xref:System.Windows.Controls.Control.MouseDoubleClick>       在概念上，將這個事件 (和其他滑鼠按鈕的事件上<xref:System.Windows.UIElement3D>) 是滑鼠 「 服務 」 (所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement3D> 這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。 更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]<xref:System.Windows.Input.Mouse>類別而非於<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse>      > [!IMPORTANT] > 的類別處理，通常會將標示基礎<xref:System.Windows.Input.Mouse>為已處理的類別事件。</xref:System.Windows.Input.Mouse> 一旦處理標記事件，通常無法引發另一個執行個體處理常式附加至該元素。 不通常也會引發任何其他類別或執行個體的處理常式附加到反昇方向朝向 UI 樹狀目錄中的根項目。       您可以解決的問題，上述的重要事項中所述，仍收到 MouseLeftButtonDown 事件，以滑鼠左鍵，往下處理使用其中一個這些方案的類別衍生類別上的事件︰ 為附加的處理常式<xref:System.Windows.UIElement3D.PreviewMouseDown>未標示為已由控制項所處理的事件。</xref:System.Windows.UIElement3D.PreviewMouseDown> 請注意，因為這是預覽事件時，路由從根目錄開始，並透過通道傳送到控制項。      -註冊控制項上的處理常式可循序呼叫<xref:System.Windows.UIElement3D.AddHandler%2A>，然後選擇讓接聽事件，即使它們已標示為已處理路由的事件資料中的處理常式的簽章選項。</xref:System.Windows.UIElement3D.AddHandler%2A>       .NET Framework 3.5 版中引進 MouseLeftButtonDown。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_MouseLeftButtonDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.MouseLeftButtonDownEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -覆寫<xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.MouseLeftButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseLeftButtonDownEvent
  id: MouseLeftButtonDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseLeftButtonDownEvent
  nameWithType: UIElement3D.MouseLeftButtonDownEvent
  fullName: System.Windows.UIElement3D.MouseLeftButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.MouseLeftButtonDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 MouseLeftButtonDownEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseLeftButtonUp
  id: MouseLeftButtonUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseLeftButtonUp
  nameWithType: UIElement3D.MouseLeftButtonUp
  fullName: System.Windows.UIElement3D.MouseLeftButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當滑鼠指標位於此元素上方且放開滑鼠左的按鈕時發生。"
  remarks: "雖然這[路由傳送事件概觀](~/add/includes/ajax-current-ext-md.md)似乎遵循反昇路由項目樹狀目錄中，透過它實際上是直接的路由的事件的引發，而且每個<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D> reraised 沿著項目樹狀結構       此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>事件，這是附加的事件處理的事件路由上的每個項目。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       這個事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> 如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<xref:System.Windows.UIElement3D.AddHandler%2A>，使用選項來處理已標記為已處理的事件、 事件接聽程式，才能。</xref:System.Windows.UIElement3D.AddHandler%2A> 如果您要標示 MouseLeftButtonUp 處理，您基本上會標示<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>路由中的所有其他接聽程式處理，而且所有相關事件。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       在概念上，將這個事件 (和其他滑鼠按鈕的事件上<xref:System.Windows.UIElement3D>) 是滑鼠 「 服務 」 (所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement3D> 這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。 更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]<xref:System.Windows.Input.Mouse>類別而非於<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse>       .NET Framework 3.5 版中引進 MouseLeftButtonUp。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_MouseLeftButtonUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.MouseLeftButtonUpEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -覆寫<xref:System.Windows.UIElement3D.OnMouseLeftButtonUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnMouseLeftButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.MouseLeftButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseLeftButtonUpEvent
  id: MouseLeftButtonUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseLeftButtonUpEvent
  nameWithType: UIElement3D.MouseLeftButtonUpEvent
  fullName: System.Windows.UIElement3D.MouseLeftButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.MouseLeftButtonUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 MouseLeftButtonUpEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseMove
  id: MouseMove
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseMove
  nameWithType: UIElement3D.MouseMove
  fullName: System.Windows.UIElement3D.MouseMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於滑鼠指標移動此元素上方。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName>附加這個類別中，事件，以便 MouseMove 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> 附加至 MouseMove 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName>       MouseMove.NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_MouseMove&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.MouseMoveEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.MouseEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewMouseMove>。</xref:System.Windows.UIElement3D.PreviewMouseMove> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement3D.MouseMoveEvent>      -覆寫<xref:System.Windows.UIElement3D.OnMouseMove%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnMouseMove%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseMove;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseMoveEvent
  id: MouseMoveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseMoveEvent
  nameWithType: UIElement3D.MouseMoveEvent
  fullName: System.Windows.UIElement3D.MouseMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.MouseMove&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 MouseMoveEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseRightButtonDown
  id: MouseRightButtonDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseRightButtonDown
  nameWithType: UIElement3D.MouseRightButtonDown
  fullName: System.Windows.UIElement3D.MouseRightButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當滑鼠指標位於此元素上方時，按下滑鼠右按鈕時發生。"
  remarks: "雖然這[路由傳送事件概觀](~/add/includes/ajax-current-ext-md.md)似乎遵循反昇路由項目樹狀目錄中，透過它實際上是直接的路由的事件的引發，而且每個<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D> reraised 沿著項目樹狀結構       此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>事件，這是附加的事件處理的事件路由上的每個項目。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       這個事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<xref:System.Windows.UIElement3D.AddHandler%2A>，使用選項來處理已標記為已處理的事件、 事件接聽程式，才能。</xref:System.Windows.UIElement3D.AddHandler%2A> 如果您要標示 MouseRightButtonDown 處理，您基本上會標示<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>路由中的所有其他接聽程式處理，而且所有相關事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 這可能包括類別處理常式產生事件，例如<xref:System.Windows.Controls.Control.MouseDoubleClick>.</xref:System.Windows.Controls.Control.MouseDoubleClick>       在概念上，將這個事件 (和其他滑鼠按鈕的事件上<xref:System.Windows.UIElement3D>) 是滑鼠 「 服務 」 (所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement3D> 這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。 更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]<xref:System.Windows.Input.Mouse>類別而非於<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse>       滑鼠右鍵事件中通常會有原生處理應用程式案例。 比方說，向下的滑鼠右按鈕可能會顯示內容功能表。 請參閱[ContextMenu 概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 MouseRightButtonDown。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_MouseRightButtonDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.MouseRightButtonDownEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -覆寫<xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.MouseRightButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseRightButtonDownEvent
  id: MouseRightButtonDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseRightButtonDownEvent
  nameWithType: UIElement3D.MouseRightButtonDownEvent
  fullName: System.Windows.UIElement3D.MouseRightButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.MouseRightButtonDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 MouseRightButtonDownEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseRightButtonUp
  id: MouseRightButtonUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseRightButtonUp
  nameWithType: UIElement3D.MouseRightButtonUp
  fullName: System.Windows.UIElement3D.MouseRightButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當滑鼠指標位於此元素上方且放開滑鼠右按鈕時發生。"
  remarks: "雖然這[路由傳送事件概觀](~/add/includes/ajax-current-ext-md.md)似乎遵循反昇路由項目樹狀目錄中，透過它實際上是直接的路由的事件的引發，而且每個<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D> reraised 沿著項目樹狀結構       此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>事件，這是附加的事件處理的事件路由上的每個項目。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       這個事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> 如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<xref:System.Windows.UIElement3D.AddHandler%2A>，使用選項來處理已標記為已處理的事件、 事件接聽程式，才能。</xref:System.Windows.UIElement3D.AddHandler%2A> 如果您要標示 MouseRightButtonUp 處理，您基本上會標示<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>路由中的所有其他接聽程式處理，而且所有相關事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       在概念上，將這個事件 (和其他滑鼠按鈕的事件上<xref:System.Windows.UIElement3D>) 是滑鼠 「 服務 」 (所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement3D> 這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。 更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]<xref:System.Windows.Input.Mouse>類別而非於<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse>       .NET Framework 3.5 版中引進 MouseRightButtonUp。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_MouseRightButtonUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.MouseRightButtonUpEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -覆寫<xref:System.Windows.UIElement3D.OnMouseRightButtonUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnMouseRightButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.MouseRightButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseRightButtonUpEvent
  id: MouseRightButtonUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseRightButtonUpEvent
  nameWithType: UIElement3D.MouseRightButtonUpEvent
  fullName: System.Windows.UIElement3D.MouseRightButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.MouseRightButtonUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 MouseRightButtonUpEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseUp
  id: MouseUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseUp
  nameWithType: UIElement3D.MouseUp
  fullName: System.Windows.UIElement3D.MouseUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素上方放開任何滑鼠按鈕時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>附加這個類別中，事件，以便 MouseUp 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> 附加至 MouseUp 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       MouseUp 事件通常就會引發以及 <xref:System.Windows.UIElement3D.MouseLeftButtonUp>或<xref:System.Windows.UIElement3D.MouseRightButtonUp>，這對應至其中的兩個標準滑鼠按鈕的版本。</xref:System.Windows.UIElement3D.MouseRightButtonUp> </xref:System.Windows.UIElement3D.MouseLeftButtonUp> <xref:System.Windows.UIElement3D.MouseLeftButtonUp>和<xref:System.Windows.UIElement3D.MouseRightButtonUp>也是路由的事件，但它們是直接路由的事件，就會引發適當的按鈕特定事件時<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>事件到達事件路由上的這個項目。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.UIElement3D.MouseRightButtonUp></xref:System.Windows.UIElement3D.MouseLeftButtonUp> 請參閱備註或<xref:System.Windows.UIElement3D.MouseLeftButtonUp><xref:System.Windows.UIElement3D.MouseRightButtonUp>.</xref:System.Windows.UIElement3D.MouseRightButtonUp> </xref:System.Windows.UIElement3D.MouseLeftButtonUp>       MouseUp.NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_MouseUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.MouseUpEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewMouseUp>。</xref:System.Windows.UIElement3D.PreviewMouseUp> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.MouseUpEvent>      -覆寫<xref:System.Windows.UIElement3D.OnMouseUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnMouseUp%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseUpEvent
  id: MouseUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseUpEvent
  nameWithType: UIElement3D.MouseUpEvent
  fullName: System.Windows.UIElement3D.MouseUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.MouseUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 MouseUpEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseWheel
  id: MouseWheel
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseWheel
  nameWithType: UIElement3D.MouseWheel
  fullName: System.Windows.UIElement3D.MouseWheel
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當滑鼠指標位於此元素上方且使用者滾動滑鼠滾輪時發生。"
  remarks: "焦點或滑鼠捕捉優先於滑鼠指標所在位置。因此，如果您收到滑鼠滾輪事件從取得焦點或擷取的項目時，滑鼠指標實際上可能是透過另一個項目。       此事件會建立一個別名<xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName>附加這個類別中，事件，使滑鼠滾輪部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> 附加至滑鼠滾輪事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName>       .NET Framework 3.5 版中引進滑鼠滾輪。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_MouseWheel&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.MouseWheelEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.MouseWheelEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewMouseWheel>。</xref:System.Windows.UIElement3D.PreviewMouseWheel> </xref:System.Windows.Input.MouseWheelEventHandler> </xref:System.Windows.UIElement3D.MouseWheelEvent>      -覆寫<xref:System.Windows.UIElement3D.OnMouseWheel%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnMouseWheel%2A>"
  syntax:
    content: public event System.Windows.Input.MouseWheelEventHandler MouseWheel;
    return:
      type: System.Windows.Input.MouseWheelEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseWheelEvent
  id: MouseWheelEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseWheelEvent
  nameWithType: UIElement3D.MouseWheelEvent
  fullName: System.Windows.UIElement3D.MouseWheelEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.MouseWheel&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 MouseWheelEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseWheelEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest)
  id: MoveFocus(System.Windows.Input.TraversalRequest)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MoveFocus(TraversalRequest)
  nameWithType: UIElement3D.MoveFocus(TraversalRequest)
  fullName: System.Windows.UIElement3D.MoveFocus(TraversalRequest)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "嘗試將焦點從這個項目移至另一個項目。 要移動的方向是由指引方向的會解譯此項目的視覺化父項目組織內指定。"
  remarks: "請確定您檢查此方法的傳回值。 傳回值為`false`如果周遊時碰到的定位點由控制項的組合所定義，並周遊要求未包裝要求可能會傳回。       .NET Framework 3.5 版中引進 MoveFocus。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);
    parameters:
    - id: request
      type: System.Windows.Input.TraversalRequest
      description: "周遊要求，其中包含屬性指出周遊現有定位順序或方向，以視覺化方式移動中的模式。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已執行要求的周遊。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.MoveFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  id: OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnAccessKey(AccessKeyEventArgs)
  nameWithType: UIElement3D.OnAccessKey(AccessKeyEventArgs)
  fullName: System.Windows.UIElement3D.OnAccessKey(AccessKeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理此元素的有意義的存取金鑰時叫用。"
  remarks: "在任何實際 AccessKey 事件<xref:System.Windows.UIElement3D>類別，或其他位置，您可以引發或附加處理常式 for...in</xref:System.Windows.UIElement3D> 相反地，透過專用的管理員類別，產生事件<xref:System.Windows.Input.AccessKeyManager>，其中進行後置處理所有輸入来搜尋適用於整個輸入模型的存取金鑰。</xref:System.Windows.Input.AccessKeyManager>       .NET Framework 3.5 版中引進 OnAccessKey。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.AccessKeyEventArgs
      description: "要便捷鍵事件的事件資料。 事件資料報表，叫用的機碼，並指出是否<xref href=&quot;System.Windows.Input.AccessKeyManager&quot;></xref>控制這些事件的傳送物件也將此存取金鑰引動過程傳送到其他項目。"
  overload: System.Windows.UIElement3D.OnAccessKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnCreateAutomationPeer
  id: OnCreateAutomationPeer
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnCreateAutomationPeer()
  nameWithType: UIElement3D.OnCreateAutomationPeer()
  fullName: System.Windows.UIElement3D.OnCreateAutomationPeer()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "傳回類別的特定<xref href=&quot;System.Windows.Automation.Peers.AutomationPeer&quot;></xref>實作[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]基礎結構。"
  remarks: ".NET Framework 3.5 版中引進 OnCreateAutomationPeer。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();
    parameters: []
    return:
      type: System.Windows.Automation.Peers.AutomationPeer
      description: "特定型別的<xref href=&quot;System.Windows.Automation.Peers.AutomationPeer&quot;></xref>實作。"
  overload: System.Windows.UIElement3D.OnCreateAutomationPeer*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnDragEnter(System.Windows.DragEventArgs)
  id: OnDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnDragEnter(DragEventArgs)
  nameWithType: UIElement3D.OnDragEnter(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnDragEnter(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnDragEnter is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnDragEnter (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnDragEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnDragLeave(System.Windows.DragEventArgs)
  id: OnDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnDragLeave(DragEventArgs)
  nameWithType: UIElement3D.OnDragLeave(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnDragLeave(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnDragLeave is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnDragLeave (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnDragLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnDragOver(System.Windows.DragEventArgs)
  id: OnDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnDragOver(DragEventArgs)
  nameWithType: UIElement3D.OnDragOver(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnDragOver(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnDragOver is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnDragOver (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnDragOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnDrop(System.Windows.DragEventArgs)
  id: OnDrop(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnDrop(DragEventArgs)
  nameWithType: UIElement3D.OnDrop(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnDrop(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnDrop is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnDrop (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  id: OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: UIElement3D.OnGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.UIElement3D.OnGiveFeedback(GiveFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnGiveFeedback is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.GiveFeedbackEventArgs
      description: "<xref href=&quot;System.Windows.GiveFeedbackEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnGiveFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnGotFocus(System.Windows.RoutedEventArgs)
  id: OnGotFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnGotFocus(RoutedEventArgs)
  nameWithType: UIElement3D.OnGotFocus(RoutedEventArgs)
  fullName: System.Windows.UIElement3D.OnGotFocus(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "引發<xref href=&quot;System.Windows.UIElement3D.GotFocus&quot;></xref>使用所提供的事件資料的路由的事件。"
  remarks: "This method, although virtual, does have a default implementation that raises the event.  \n  \n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement3D.IsFocused%2A> property value changes. The OnGotFocus implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] On\\* implementations, which only provide a convenient way to add class handling for that event.  \n  \n OnGotFocus is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "A <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref>包含事件資料。 此事件資料必須包含的識別項<xref href=&quot;System.Windows.UIElement3D.GotFocus&quot;></xref>事件。"
  overload: System.Windows.UIElement3D.OnGotFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement3D.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnGotKeyboardFocus is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnGotKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  id: OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnGotMouseCapture(MouseEventArgs)
  nameWithType: UIElement3D.OnGotMouseCapture(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnGotMouseCapture(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnGotMouseCapture is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnGotMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  id: OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnGotStylusCapture(StylusEventArgs)
  nameWithType: UIElement3D.OnGotStylusCapture(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnGotStylusCapture(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnGotStylusCapture is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnGotStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  id: OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnGotTouchCapture(TouchEventArgs)
  nameWithType: UIElement3D.OnGotTouchCapture(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnGotTouchCapture(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理<xref href=&quot;System.Windows.UIElement3D.GotTouchCapture&quot;></xref>觸控擷取至這個項目時所發生的路由的事件。"
  remarks: "OnGotTouchCapture 方法具有預設的實作。 在處理衍生類別中覆寫 OnGotTouchCapture<xref:System.Windows.UIElement3D.GotTouchCapture>事件。</xref:System.Windows.UIElement3D.GotTouchCapture> 請務必呼叫基底類別的 OnGotTouchCapture 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnGotTouchCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement3D.IsKeyboardFocusedChanged&quot;></xref>這個項目上引發事件。 實作這個方法可為此事件加入類別處理。"
  remarks: "此虛擬方法時，會呼叫的值<xref:System.Windows.UIElement3D.IsKeyboardFocused%2A>相依性屬性變更。</xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> 會先呼叫虛擬方法，並可以操作需要的事件資料。 然後在<xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged>與該相同的事件資料執行個體就會引發事件。</xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> 請注意，<xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged>事件就不會路由的事件。</xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> 因此，您無法將它標示為已處理的類別處理常式中。       這個方法會具有預設的實作。 因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。 您可能會呼叫基底之前或之後特殊處理，根據您的需求。       .NET Framework 3.5 版中引進 OnIsKeyboardFocusedChanged。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnIsKeyboardFocusedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "前叫用<xref href=&quot;System.Windows.UIElement3D.IsKeyboardFocusWithinChanged&quot;></xref>由這個項目就會引發事件。 實作這個方法可為此事件加入類別處理。"
  remarks: "此虛擬方法時，會呼叫的值<xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A>相依性屬性變更其值。</xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> 會先呼叫虛擬方法，並可以操作需要的事件資料。 然後在<xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged>與該相同的事件資料執行個體就會引發事件。</xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> 請注意，<xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged>事件就不會路由的事件。</xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> 因此，您無法將它標示為已處理的類別處理常式中。       這個方法會具有預設的實作。 因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。 您可能會呼叫基底之前或之後特殊處理，根據您的需求。       .NET Framework 3.5 版中引進 OnIsKeyboardFocusWithinChanged。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "A <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement3D.IsMouseCapturedChanged&quot;></xref>這個項目上引發事件。 實作這個方法可為此事件加入類別處理。"
  remarks: "此虛擬方法時，會呼叫的值<xref:System.Windows.UIElement3D.IsMouseCaptured%2A>相依性屬性變更其值。</xref:System.Windows.UIElement3D.IsMouseCaptured%2A> 會先呼叫虛擬方法，並可以操作需要的事件資料。 然後在<xref:System.Windows.UIElement3D.IsMouseCapturedChanged>與該相同的事件資料執行個體就會引發事件。</xref:System.Windows.UIElement3D.IsMouseCapturedChanged> 請注意，<xref:System.Windows.UIElement3D.IsMouseCapturedChanged>事件就不會路由的事件。</xref:System.Windows.UIElement3D.IsMouseCapturedChanged> 因此，您無法將它標示為已處理的類別處理常式中。       這個方法會具有預設的實作。 因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。 您可能會呼叫基底之前或之後特殊處理，根據您的需求。       .NET Framework 3.5 版中引進 OnIsMouseCapturedChanged。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnIsMouseCapturedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement3D.IsMouseCaptureWithinChanged&quot;></xref>這個項目上引發事件。 實作這個方法可為此事件加入類別處理。"
  remarks: ".NET Framework 3.5 版中引進 OnIsMouseCaptureWithinChanged。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "A <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement3D.IsMouseDirectlyOverChanged&quot;></xref>這個項目上引發事件。 實作這個方法可為此事件加入類別處理。"
  remarks: "此虛擬方法時，會呼叫的值<xref:System.Windows.UIElement3D.IsMouseDirectlyOver%2A>相依性屬性變更其值。</xref:System.Windows.UIElement3D.IsMouseDirectlyOver%2A> 會先呼叫虛擬方法，並可以操作需要的事件資料。 然後在<xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged>與該相同的事件資料執行個體就會引發事件。</xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged> 請注意，<xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged>事件就不會路由的事件。</xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged> 因此，您無法將它標示為已處理的類別處理常式中。       這個方法會具有預設的實作。 因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。 您可能會呼叫基底之前或之後特殊處理，根據您的需求。       .NET Framework 3.5 版中引進 OnIsMouseDirectlyOverChanged。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement3D.IsStylusCapturedChanged&quot;></xref>這個項目上引發事件。 實作這個方法可為此事件加入類別處理。"
  remarks: "此虛擬方法時，會呼叫的值<xref:System.Windows.UIElement3D.IsStylusCaptured%2A>相依性屬性變更其值。</xref:System.Windows.UIElement3D.IsStylusCaptured%2A> 會先呼叫虛擬方法，並可以操作需要的事件資料。 然後在<xref:System.Windows.UIElement3D.IsStylusCapturedChanged>與該相同的事件資料執行個體就會引發事件。</xref:System.Windows.UIElement3D.IsStylusCapturedChanged> 請注意，事件就不會路由的事件。 因此，您無法將它標示為已處理的類別處理常式中。       這個方法會具有預設的實作。 因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。 您可能會呼叫基底之前或之後特殊處理，根據您的需求。       .NET Framework 3.5 版中引進 OnIsStylusCapturedChanged。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "A <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnIsStylusCapturedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement3D.IsStylusCaptureWithinChanged&quot;></xref>這個項目上引發事件。 實作這個方法可為此事件加入類別處理。"
  remarks: "此虛擬方法時，會呼叫的值<xref:System.Windows.UIElement3D.IsStylusCaptureWithin%2A>相依性屬性變更其值。</xref:System.Windows.UIElement3D.IsStylusCaptureWithin%2A> 會先呼叫虛擬方法，並可以操作需要的事件資料。 然後在<xref:System.Windows.UIElement3D.IsStylusCaptureWithinChanged>與該相同的事件資料執行個體就會引發事件。</xref:System.Windows.UIElement3D.IsStylusCaptureWithinChanged> 請注意，事件就不會路由的事件。 因此，您無法將它標示為已處理的類別處理常式中。       這個方法會具有預設的實作。 因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。 您可能會呼叫基底之前或之後特殊處理，根據您的需求。       .NET Framework 3.5 版中引進 OnIsStylusCaptureWithinChanged。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement3D.IsStylusDirectlyOverChanged&quot;></xref>這個項目上引發事件。 實作這個方法可為此事件加入類別處理。"
  remarks: "此虛擬方法時，會呼叫的值<xref:System.Windows.UIElement3D.IsStylusDirectlyOver%2A>相依性屬性變更其值。</xref:System.Windows.UIElement3D.IsStylusDirectlyOver%2A> 會先呼叫虛擬方法，並可以操作需要的事件資料。 然後在<xref:System.Windows.UIElement3D.IsStylusDirectlyOverChanged>與該相同的事件資料執行個體就會引發事件。</xref:System.Windows.UIElement3D.IsStylusDirectlyOverChanged> 請注意，事件就不會路由的事件。 因此您無法將它標示為已處理的類別處理常式中。       這個方法會具有預設的實作。 因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。 您可能會呼叫基底之前或之後特殊處理，根據您的需求。       .NET Framework 3.5 版中引進 OnIsStylusDirectlyOverChanged。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnKeyDown(System.Windows.Input.KeyEventArgs)
  id: OnKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnKeyDown(KeyEventArgs)
  nameWithType: UIElement3D.OnKeyDown(KeyEventArgs)
  fullName: System.Windows.UIElement3D.OnKeyDown(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then OnKeyDown is not invoked.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnKeyDown is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnKeyDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnKeyUp(System.Windows.Input.KeyEventArgs)
  id: OnKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnKeyUp(KeyEventArgs)
  nameWithType: UIElement3D.OnKeyUp(KeyEventArgs)
  fullName: System.Windows.UIElement3D.OnKeyUp(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then OnKeyUp is not invoked.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnKeyUp is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnKeyUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnLostFocus(System.Windows.RoutedEventArgs)
  id: OnLostFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnLostFocus(RoutedEventArgs)
  nameWithType: UIElement3D.OnLostFocus(RoutedEventArgs)
  fullName: System.Windows.UIElement3D.OnLostFocus(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "引發<xref href=&quot;System.Windows.UIElement3D.LostFocus&quot;></xref>使用所提供的事件資料的路由的事件。"
  remarks: "This method, although virtual, does have a default implementation that raises the event.  \n  \n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement3D.IsFocused%2A> property value changes. This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] On\\* implementations, which only provide a convenient way to add class handling for that event.  \n  \n OnLostFocus is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "A <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref>包含事件資料。 此事件資料必須包含的識別項<xref href=&quot;System.Windows.UIElement3D.LostFocus&quot;></xref>事件。"
  overload: System.Windows.UIElement3D.OnLostFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement3D.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnLostKeyboardFocus is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnLostKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  id: OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnLostMouseCapture(MouseEventArgs)
  nameWithType: UIElement3D.OnLostMouseCapture(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnLostMouseCapture(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnLostMouseCapture is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnLostMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  id: OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnLostStylusCapture(StylusEventArgs)
  nameWithType: UIElement3D.OnLostStylusCapture(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnLostStylusCapture(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnLostStylusCapture is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnLostStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  id: OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnLostTouchCapture(TouchEventArgs)
  nameWithType: UIElement3D.OnLostTouchCapture(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnLostTouchCapture(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理<xref href=&quot;System.Windows.UIElement3D.LostTouchCapture&quot;></xref>此元素失去觸控擷取時所發生的路由的事件。"
  remarks: "OnLostTouchCapture 方法具有預設的實作。 在處理衍生類別中覆寫 OnLostTouchCapture<xref:System.Windows.UIElement3D.LostTouchCapture>事件。</xref:System.Windows.UIElement3D.LostTouchCapture> 請務必呼叫基底類別的 OnLostTouchCapture 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnLostTouchCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnMouseDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event as handled, OnMouseDown is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement3D.MouseLeftButtonDown> and <xref:System.Windows.UIElement3D.MouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnMouseDown, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted. Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnMouseDown is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 此事件資料會報告滑鼠按鈕已按下處理的狀態有關的詳細資訊。"
  overload: System.Windows.UIElement3D.OnMouseDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  id: OnMouseEnter(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnMouseEnter(MouseEventArgs)
  nameWithType: UIElement3D.OnMouseEnter(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseEnter(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt;這個項目上引發附加的事件。 實作這個方法可為此事件加入類別處理。"
  remarks: "這個方法會具有預設的實作。 因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。 您可能會呼叫基底之前或之後特殊處理，根據您的需求。       這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]事件模式 * 方法︰ 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。 在此情況下，符合的事件是具有直接路由策略的路由的事件。 將事件標示為已處理仍很有用防止一般的執行個體的處理常式 (這些不指定`handledEventsToo`) 叫用。       .NET Framework 3.5 版中引進 OnMouseEnter。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnMouseEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  id: OnMouseLeave(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnMouseLeave(MouseEventArgs)
  nameWithType: UIElement3D.OnMouseLeave(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseLeave(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt;這個項目上引發附加的事件。 實作這個方法可為此事件加入類別處理。"
  remarks: "這個方法會具有預設的實作。 因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。 您可能會呼叫基底之前或之後特殊處理，根據您的需求。       這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]事件模式 * 方法︰ 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。 在此情況下，符合的事件是具有直接路由策略的路由的事件。 將事件標示為已處理仍很有用防止一般的執行個體的處理常式 (這些不指定`handledEventsToo`) 叫用。       .NET Framework 3.5 版中引進 OnMouseLeave。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnMouseLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseLeftButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement3D.MouseLeftButtonDown&quot;></xref>這個項目上引發路由的事件。 實作這個方法可為此事件加入類別處理。"
  remarks: "<xref:System.Windows.UIElement3D.MouseLeftButtonDown>事件反昇路由會出現但實際上以間接方式傳送。</xref:System.Windows.UIElement3D.MouseLeftButtonDown> <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>為路由傳送，泡泡圖的基礎事件，並<xref:System.Windows.UIElement3D>沿著事件路由會使用相同引發直接路由的事件<xref:System.Windows.UIElement3D.MouseLeftButtonDown>.</xref:System.Windows.UIElement3D.MouseLeftButtonDown>處理</xref:System.Windows.UIElement3D>每個</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 雖然您可以將標記<xref:System.Windows.UIElement3D.MouseLeftButtonDown>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</xref:System.Windows.UIElement3D.MouseLeftButtonDown> 不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定`handledEventsToo`) 叫用。       一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement3D>接聽<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>並將它轉換成適當的本機事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.UIElement3D> 如果您想要覆寫這個邏輯，您必須建立衍生的類別。 在衍生類別的靜態建構函式註冊<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>的替代類別處理常式 您無法變更處理行為的滑鼠<xref:System.Windows.UIElement3D>藉由覆寫 OnMouseLeftButtonDown。</xref:System.Windows.UIElement3D>       或者，您可以覆寫這個方法以變更處理特定的滑鼠狀態的事件。 您是否願意呼叫基底實作，取決於您的案例。 無法呼叫基底，就會停用該也預期會叫用 OnMouseLeftButtonDown 的上階類別上的滑鼠事件的預設輸入的處理。 例如，您可以從衍生<xref:System.Windows.Controls.Button>並在您的衍生類別中將 OnMouseLeftButtonDown 覆寫而不需要呼叫基底實作; 不過，停用覆寫。<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件。</xref:System.Windows.Controls.Primitives.ButtonBase.Click> </xref:System.Windows.Controls.Button>       .NET Framework 3.5 版中引進 OnMouseLeftButtonDown。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 事件資料會報告滑鼠左鍵已按下。"
  overload: System.Windows.UIElement3D.OnMouseLeftButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseLeftButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement3D.MouseLeftButtonUp&quot;></xref>路由的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "<xref:System.Windows.UIElement3D.MouseLeftButtonUp>事件反昇路由會出現但實際上以間接方式傳送。</xref:System.Windows.UIElement3D.MouseLeftButtonUp> <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>為路由傳送，泡泡圖的基礎事件，並<xref:System.Windows.UIElement3D>沿著事件路由會使用相同引發直接路由的事件<xref:System.Windows.UIElement3D.MouseLeftButtonUp>.</xref:System.Windows.UIElement3D.MouseLeftButtonUp>處理</xref:System.Windows.UIElement3D>每個</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> 雖然您可以將標記<xref:System.Windows.UIElement3D.MouseLeftButtonUp>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</xref:System.Windows.UIElement3D.MouseLeftButtonUp> 不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定`handledEventsToo`) 叫用。       一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement3D>接聽<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>並將它轉換成適當的本機事件。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> </xref:System.Windows.UIElement3D> 如果您想要覆寫這個邏輯，您必須建立衍生的類別。 在衍生類別的靜態建構函式註冊<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>的替代類別處理常式 您無法變更處理行為的滑鼠<xref:System.Windows.UIElement3D>藉由覆寫 OnMouseLeftButtonUp。</xref:System.Windows.UIElement3D>       .NET Framework 3.5 版中引進 OnMouseLeftButtonUp。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 事件資料會報告已放開滑鼠左的按鈕。"
  overload: System.Windows.UIElement3D.OnMouseLeftButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnMouseMove(System.Windows.Input.MouseEventArgs)
  id: OnMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnMouseMove(MouseEventArgs)
  nameWithType: UIElement3D.OnMouseMove(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseMove(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnMouseMove is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnMouseMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseRightButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement3D.MouseRightButtonDown&quot;></xref>路由的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "<xref:System.Windows.UIElement3D.MouseRightButtonDown>事件反昇路由會出現但實際上以間接方式傳送。</xref:System.Windows.UIElement3D.MouseRightButtonDown> <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>為路由傳送，泡泡圖的基礎事件，並<xref:System.Windows.UIElement3D>沿著事件路由會使用相同引發直接路由的事件<xref:System.Windows.UIElement3D.MouseRightButtonDown>.</xref:System.Windows.UIElement3D.MouseRightButtonDown>處理</xref:System.Windows.UIElement3D>每個</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 雖然您可以將標記<xref:System.Windows.UIElement3D.MouseRightButtonDown>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</xref:System.Windows.UIElement3D.MouseRightButtonDown> 不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定`handledEventsToo`) 叫用。       一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement3D>接聽<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>並將它轉換成適當的本機事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.UIElement3D> 如果您想要覆寫這個邏輯，您必須建立衍生的類別。 在衍生類別的靜態建構函式註冊<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>的替代類別處理常式 您無法變更處理行為的滑鼠<xref:System.Windows.UIElement3D>藉由覆寫 OnMouseRightButtonDown。</xref:System.Windows.UIElement3D>       或者，您可以覆寫這個方法以變更處理特定的滑鼠狀態的事件。 您是否願意呼叫基底實作，取決於您的案例。 無法呼叫基底，就會停用該也預期會叫用 OnMouseRightButtonDown 的上階類別上的滑鼠事件的預設輸入的處理。 例如，您可以從衍生<xref:System.Windows.Controls.Control>並在您未呼叫基底的衍生類別中覆寫 OnMouseRightButtonDown; 不過，此覆寫停用內容功能表上的服務您的控制項，也就是組件的<xref:System.Windows.Controls.Control>預設行為。</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Control>       .NET Framework 3.5 版中引進 OnMouseRightButtonDown。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 事件資料會報告滑鼠按鈕已按下。"
  overload: System.Windows.UIElement3D.OnMouseRightButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseRightButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement3D.MouseRightButtonUp&quot;></xref>路由的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "<xref:System.Windows.UIElement3D.MouseRightButtonUp>事件反昇路由會出現但實際上以間接方式傳送。</xref:System.Windows.UIElement3D.MouseRightButtonUp> <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>為路由傳送，泡泡圖的基礎事件，並<xref:System.Windows.UIElement3D>沿著事件路由會使用相同引發直接路由的事件<xref:System.Windows.UIElement3D.MouseRightButtonUp>.</xref:System.Windows.UIElement3D.MouseRightButtonUp>處理</xref:System.Windows.UIElement3D>每個</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> 雖然您可以將標記<xref:System.Windows.UIElement3D.MouseRightButtonUp>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</xref:System.Windows.UIElement3D.MouseRightButtonUp> 不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定`handledEventsToo`) 叫用。       一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement3D>接聽<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>並將它轉換成適當的本機事件。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> </xref:System.Windows.UIElement3D> 如果您想要覆寫這個邏輯，您必須建立衍生的類別。 在衍生類別的靜態建構函式註冊<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>的替代類別處理常式 您無法變更處理行為的滑鼠<xref:System.Windows.UIElement3D>藉由覆寫 OnMouseRightButtonUp。</xref:System.Windows.UIElement3D>       .NET Framework 3.5 版中引進 OnMouseRightButtonUp。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 事件資料會報告已放開滑鼠按鈕。"
  overload: System.Windows.UIElement3D.OnMouseRightButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnMouseUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;路由的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event as handled, OnMouseUp is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement3D.MouseLeftButtonUp> and <xref:System.Windows.UIElement3D.MouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnMouseUp, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted. Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnMouseUp is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 事件資料會報告已放開滑鼠按鈕。"
  overload: System.Windows.UIElement3D.OnMouseUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  id: OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnMouseWheel(MouseWheelEventArgs)
  nameWithType: UIElement3D.OnMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseWheel(MouseWheelEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnMouseWheel is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseWheelEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseWheelEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnMouseWheel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewDragEnter(System.Windows.DragEventArgs)
  id: OnPreviewDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewDragEnter(DragEventArgs)
  nameWithType: UIElement3D.OnPreviewDragEnter(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewDragEnter(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewDragEnter is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewDragEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewDragLeave(System.Windows.DragEventArgs)
  id: OnPreviewDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewDragLeave(DragEventArgs)
  nameWithType: UIElement3D.OnPreviewDragLeave(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewDragLeave(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewDragLeave is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewDragLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewDragOver(System.Windows.DragEventArgs)
  id: OnPreviewDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewDragOver(DragEventArgs)
  nameWithType: UIElement3D.OnPreviewDragOver(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewDragOver(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewDragOver is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewDragOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewDrop(System.Windows.DragEventArgs)
  id: OnPreviewDrop(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewDrop(DragEventArgs)
  nameWithType: UIElement3D.OnPreviewDrop(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewDrop(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewDrop is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  id: OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: UIElement3D.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewGiveFeedback is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.GiveFeedbackEventArgs
      description: "<xref href=&quot;System.Windows.GiveFeedbackEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewGiveFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement3D.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewGotKeyboardFocus is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewGotKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  id: OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewKeyDown(KeyEventArgs)
  nameWithType: UIElement3D.OnPreviewKeyDown(KeyEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewKeyDown(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewKeyDown is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewKeyDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  id: OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewKeyUp(KeyEventArgs)
  nameWithType: UIElement3D.OnPreviewKeyUp(KeyEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewKeyUp(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewKeyUp is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewKeyUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement3D.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewLostKeyboardFocus is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewLostKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewMouseDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;附加路由的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event as handled, OnPreviewMouseDown is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnPreviewMouseDown, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted. Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewMouseDown is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 事件資料會報告一個或多個滑鼠按鈕已按下。"
  overload: System.Windows.UIElement3D.OnPreviewMouseDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement3D.PreviewMouseLeftButtonDown&quot;></xref>路由的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>事件傳輸通道的路由會出現但實際上以間接方式傳送。</xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>為路由傳送，通道的基礎事件，並<xref:System.Windows.UIElement3D>沿著事件路由會使用相同引發直接路由的事件<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>.</xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>處理</xref:System.Windows.UIElement3D>每個</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 雖然您可以將標記<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> 不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定`handledEventsToo`) 叫用。       一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement3D>接聽<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>並將它轉換成適當的本機事件。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> </xref:System.Windows.UIElement3D> 如果您想要覆寫這個邏輯，您必須建立衍生的類別。 在衍生類別的靜態建構函式註冊<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>的替代類別處理常式 您無法變更處理行為的滑鼠<xref:System.Windows.UIElement3D>藉由覆寫 OnPreviewMouseLeftButtonDown。</xref:System.Windows.UIElement3D>       或者，您可以覆寫這個方法以變更處理特定的滑鼠狀態的事件。 您是否願意呼叫基底實作，取決於您的案例。 無法呼叫基底，就會停用該也預期會叫用 OnPreviewMouseLeftButtonDown 的上階類別上的滑鼠事件的預設輸入的處理。 例如，您可以從衍生<xref:System.Windows.Controls.Button>並在您的衍生類別中將 OnPreviewMouseLeftButtonDown 覆寫而不需要呼叫基底實作; 不過，停用覆寫。<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件。</xref:System.Windows.Controls.Primitives.ButtonBase.Click> </xref:System.Windows.Controls.Button>       .NET Framework 3.5 版中引進 OnPreviewMouseLeftButtonDown。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 事件資料會報告滑鼠左鍵已按下。"
  overload: System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement3D.PreviewMouseLeftButtonUp&quot;></xref>路由的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>事件傳輸通道的路由會出現但實際上以間接方式傳送。</xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>為路由傳送，通道的基礎事件，並<xref:System.Windows.UIElement3D>沿著事件路由會使用相同引發直接路由的事件<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>.</xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>處理</xref:System.Windows.UIElement3D>每個</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> 雖然您可以將標記<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> 不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定`handledEventsToo`) 叫用。       一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement3D>接聽<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>並將它轉換成適當的本機事件。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> </xref:System.Windows.UIElement3D> 如果您想要覆寫這個邏輯，您必須建立衍生的類別。 在衍生類別的靜態建構函式註冊<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>的替代類別處理常式 您無法變更處理行為的滑鼠<xref:System.Windows.UIElement3D>藉由覆寫 OnPreviewMouseLeftButtonUp。</xref:System.Windows.UIElement3D>       .NET Framework 3.5 版中引進 OnPreviewMouseLeftButtonUp。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 事件資料會報告已放開滑鼠左的按鈕。"
  overload: System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  id: OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewMouseMove(MouseEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseMove(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseMove(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewMouseMove is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewMouseMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement3D.PreviewMouseRightButtonDown&quot;></xref>路由的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>事件傳輸通道的路由會出現但實際上以間接方式傳送。</xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>為路由傳送，通道的基礎事件，並<xref:System.Windows.UIElement3D>沿著事件路由會使用相同引發直接路由的事件<xref:System.Windows.UIElement3D.MouseRightButtonDown>.</xref:System.Windows.UIElement3D.MouseRightButtonDown>處理</xref:System.Windows.UIElement3D>每個</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 雖然您可以將標記<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> 不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定`handledEventsToo`) 叫用。       一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement3D>接聽<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>並將它轉換成適當的本機事件。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> </xref:System.Windows.UIElement3D> 如果您想要覆寫這個邏輯，您必須建立衍生的類別。 在衍生類別的靜態建構函式註冊<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>的替代類別處理常式 您無法變更處理行為的滑鼠<xref:System.Windows.UIElement3D>藉由覆寫 OnPreviewMouseRightButtonDown。</xref:System.Windows.UIElement3D>       或者，您可以覆寫這個方法以變更處理特定的滑鼠狀態的事件。 您是否願意呼叫基底實作，取決於您的案例。 無法呼叫基底，就會停用該也預期會叫用 OnPreviewMouseRightButtonDown 的上階類別上的滑鼠事件的預設輸入的處理。 例如，您可以從衍生<xref:System.Windows.Controls.Control>並在您未呼叫基底的衍生類別中覆寫 OnPreviewMouseRightButtonDown; 不過，此覆寫停用內容功能表上的服務您的控制項，也就是組件的<xref:System.Windows.Controls.Control>預設行為。</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Control>       .NET Framework 3.5 版中引進 OnPreviewMouseRightButtonDown。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 事件資料會報告滑鼠按鈕已按下。"
  overload: System.Windows.UIElement3D.OnPreviewMouseRightButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement3D.PreviewMouseRightButtonUp&quot;></xref>路由的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>事件傳輸通道的路由會出現但實際上以間接方式傳送。</xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>為路由傳送，通道的基礎事件，並<xref:System.Windows.UIElement3D>沿著事件路由會使用相同引發直接路由的事件<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>.</xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>處理</xref:System.Windows.UIElement3D>每個</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> 雖然您可以將標記<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> 不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定`handledEventsToo`) 叫用。       一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement3D>接聽<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>並將它轉換成適當的本機事件。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> </xref:System.Windows.UIElement3D> 如果您想要覆寫這個邏輯，您必須建立衍生的類別。 在衍生類別的靜態建構函式註冊<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>的替代類別處理常式 您無法變更處理行為的滑鼠<xref:System.Windows.UIElement3D>藉由覆寫 OnPreviewMouseRightButtonUp。</xref:System.Windows.UIElement3D>       .NET Framework 3.5 版中引進 OnPreviewMouseRightButtonUp。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 事件資料會報告已放開滑鼠按鈕。"
  overload: System.Windows.UIElement3D.OnPreviewMouseRightButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewMouseUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event as handled, OnPreviewMouseUp is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnPreviewMouseUp, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted. Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnPreviewMouseUp is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 事件資料會報告一個或多個滑鼠按鈕已釋放。"
  overload: System.Windows.UIElement3D.OnPreviewMouseUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  id: OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewMouseWheel(MouseWheelEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseWheel(MouseWheelEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewMouseWheel is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseWheelEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseWheelEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewMouseWheel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  id: OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: UIElement3D.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewQueryContinueDrag is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.QueryContinueDragEventArgs
      description: "<xref href=&quot;System.Windows.QueryContinueDragEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewQueryContinueDrag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  id: OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewStylusButtonDown(StylusButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewStylusButtonDown is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewStylusButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  id: OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewStylusButtonUp(StylusButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewStylusButtonUp is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewStylusButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  id: OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewStylusDown(StylusDownEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusDown(StylusDownEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusDown(StylusDownEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewStylusDown is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusDownEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusDownEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewStylusDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewStylusInAirMove(StylusEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusInAirMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewStylusInAirMove is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewStylusInAirMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewStylusInRange(StylusEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusInRange(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusInRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewStylusInRange is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewStylusInRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewStylusMove(StylusEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusMove(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewStylusMove is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewStylusMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewStylusOutOfRange(StylusEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusOutOfRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewStylusOutOfRange is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewStylusOutOfRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  id: OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewStylusSystemGesture is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusSystemGestureEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusSystemGestureEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewStylusSystemGesture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewStylusUp(StylusEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusUp(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusUp(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewStylusUp is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewStylusUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  id: OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewTextInput(TextCompositionEventArgs)
  nameWithType: UIElement3D.OnPreviewTextInput(TextCompositionEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewTextInput(TextCompositionEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewTextInput is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TextCompositionEventArgs
      description: "<xref href=&quot;System.Windows.Input.TextCompositionEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewTextInput*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewTouchDown(TouchEventArgs)
  nameWithType: UIElement3D.OnPreviewTouchDown(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewTouchDown(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理<xref href=&quot;System.Windows.UIElement3D.PreviewTouchDown&quot;></xref>觸控按這個項目時，就會發生的路由的事件。"
  remarks: "OnPreviewTouchDown 方法具有預設的實作。 在處理衍生類別中覆寫 OnPreviewTouchDown<xref:System.Windows.UIElement3D.PreviewTouchDown>事件。</xref:System.Windows.UIElement3D.PreviewTouchDown> 請務必呼叫基底類別的 OnPreviewTouchDown 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewTouchDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewTouchMove(TouchEventArgs)
  nameWithType: UIElement3D.OnPreviewTouchMove(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewTouchMove(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理<xref href=&quot;System.Windows.UIElement3D.PreviewTouchMove&quot;></xref>發生於觸控式移動這個項目內的路由的事件。"
  remarks: "OnPreviewTouchMove 方法具有預設的實作。 在處理衍生類別中覆寫 OnPreviewTouchMove<xref:System.Windows.UIElement3D.PreviewTouchMove>事件。</xref:System.Windows.UIElement3D.PreviewTouchMove> 請務必呼叫基底類別的 OnPreviewTouchMove 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewTouchMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewTouchUp(TouchEventArgs)
  nameWithType: UIElement3D.OnPreviewTouchUp(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewTouchUp(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理<xref href=&quot;System.Windows.UIElement3D.PreviewTouchUp&quot;></xref>觸控發行這個項目內時，就會發生的路由的事件。"
  remarks: "OnPreviewTouchUp 方法具有預設的實作。 在處理衍生類別中覆寫 OnPreviewTouchUp<xref:System.Windows.UIElement3D.PreviewTouchUp>事件。</xref:System.Windows.UIElement3D.PreviewTouchUp> 請務必呼叫基底類別的 OnPreviewTouchUp 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnPreviewTouchUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  id: OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: UIElement3D.OnQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.UIElement3D.OnQueryContinueDrag(QueryContinueDragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnQueryContinueDrag is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.QueryContinueDragEventArgs
      description: "<xref href=&quot;System.Windows.QueryContinueDragEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnQueryContinueDrag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  id: OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnQueryCursor(QueryCursorEventArgs)
  nameWithType: UIElement3D.OnQueryCursor(QueryCursorEventArgs)
  fullName: System.Windows.UIElement3D.OnQueryCursor(QueryCursorEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnQueryCursor is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.QueryCursorEventArgs
      description: "<xref href=&quot;System.Windows.Input.QueryCursorEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnQueryCursor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  id: OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnStylusButtonDown(StylusButtonEventArgs)
  nameWithType: UIElement3D.OnStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusButtonDown(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnStylusButtonDown is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnStylusButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  id: OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnStylusButtonUp(StylusButtonEventArgs)
  nameWithType: UIElement3D.OnStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusButtonUp(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnStylusButtonUp is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnStylusButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  id: OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnStylusDown(StylusDownEventArgs)
  nameWithType: UIElement3D.OnStylusDown(StylusDownEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusDown(StylusDownEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnStylusDown is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusDownEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusDownEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnStylusDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  id: OnStylusEnter(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnStylusEnter(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusEnter(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusEnter(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt;附加引發由這個項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "這個方法會具有預設的實作。 因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。 您可能會呼叫基底之前或之後特殊處理，根據您的需求。       這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]事件模式 * 方法︰ 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。 在此情況下，符合的事件是路由的事件。 將事件標示為已處理仍很有用防止一般的執行個體處理常式 (這些不指定`handledEventsToo`) 叫用。       .NET Framework 3.5 版中引進 OnStylusEnter。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnStylusEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  id: OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnStylusInAirMove(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusInAirMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnStylusInAirMove is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnStylusInAirMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  id: OnStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnStylusInRange(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusInRange(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusInRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnStylusInRange is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnStylusInRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  id: OnStylusLeave(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnStylusLeave(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusLeave(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusLeave(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt;附加引發由這個項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "這個方法會具有預設的實作。 因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。 您可能會呼叫基底之前或之後特殊處理，根據您的需求。       這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]事件模式 * 方法︰ 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。 在此情況下，符合的事件是路由的事件。 將事件標示為已處理仍很有用防止一般的執行個體處理常式 (這些不指定`handledEventsToo`) 叫用。       .NET Framework 3.5 版中引進 OnStylusLeave。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnStylusLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnStylusMove(System.Windows.Input.StylusEventArgs)
  id: OnStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnStylusMove(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusMove(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnStylusMove is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnStylusMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  id: OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnStylusOutOfRange(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusOutOfRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnStylusOutOfRange is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnStylusOutOfRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  id: OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: UIElement3D.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnStylusSystemGesture is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusSystemGestureEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusSystemGestureEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnStylusSystemGesture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnStylusUp(System.Windows.Input.StylusEventArgs)
  id: OnStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnStylusUp(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusUp(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusUp(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnStylusUp is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnStylusUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  id: OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnTextInput(TextCompositionEventArgs)
  nameWithType: UIElement3D.OnTextInput(TextCompositionEventArgs)
  fullName: System.Windows.UIElement3D.OnTextInput(TextCompositionEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnTextInput is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TextCompositionEventArgs
      description: "<xref href=&quot;System.Windows.Input.TextCompositionEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnTextInput*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnTouchDown(System.Windows.Input.TouchEventArgs)
  id: OnTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnTouchDown(TouchEventArgs)
  nameWithType: UIElement3D.OnTouchDown(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnTouchDown(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理<xref href=&quot;System.Windows.UIElement3D.TouchDown&quot;></xref>觸控按這個項目內時，就會發生的路由的事件。"
  remarks: "OnTouchDown 方法具有預設的實作。 在處理衍生類別中覆寫 OnTouchDown<xref:System.Windows.UIElement3D.TouchDown>事件。</xref:System.Windows.UIElement3D.TouchDown> 請務必呼叫基底類別的 OnTouchDown 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnTouchDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  id: OnTouchEnter(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnTouchEnter(TouchEventArgs)
  nameWithType: UIElement3D.OnTouchEnter(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnTouchEnter(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理<xref href=&quot;System.Windows.UIElement3D.TouchEnter&quot;></xref>路由從觸控式移動時所發生的事件以這個項目之範圍內的外部。"
  remarks: "OnTouchEnter 方法具有預設的實作。 在處理衍生類別中覆寫 OnTouchEnter<xref:System.Windows.UIElement3D.TouchEnter>事件。</xref:System.Windows.UIElement3D.TouchEnter> 請務必呼叫基底類別的 OnTouchEnter 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnTouchEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  id: OnTouchLeave(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnTouchLeave(TouchEventArgs)
  nameWithType: UIElement3D.OnTouchLeave(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnTouchLeave(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理<xref href=&quot;System.Windows.UIElement3D.TouchLeave&quot;></xref>路由從觸控式移動時所發生的事件以這個項目之範圍外的內部。"
  remarks: "OnTouchLeave 方法具有預設的實作。 在處理衍生類別中覆寫 OnTouchLeave<xref:System.Windows.UIElement3D.TouchLeave>事件。</xref:System.Windows.UIElement3D.TouchLeave> 請務必呼叫基底類別的 OnTouchLeave 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnTouchLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnTouchMove(System.Windows.Input.TouchEventArgs)
  id: OnTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnTouchMove(TouchEventArgs)
  nameWithType: UIElement3D.OnTouchMove(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnTouchMove(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理<xref href=&quot;System.Windows.UIElement3D.TouchMove&quot;></xref>發生於觸控式移動這個項目內的路由的事件。"
  remarks: "OnTouchMove 方法具有預設的實作。 在處理衍生類別中覆寫 OnTouchMove<xref:System.Windows.UIElement3D.TouchMove>事件。</xref:System.Windows.UIElement3D.TouchMove> 請務必呼叫基底類別的 OnTouchMove 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnTouchMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnTouchUp(System.Windows.Input.TouchEventArgs)
  id: OnTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnTouchUp(TouchEventArgs)
  nameWithType: UIElement3D.OnTouchUp(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnTouchUp(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理<xref href=&quot;System.Windows.UIElement3D.TouchUp&quot;></xref>觸控發行這個項目內時，就會發生的路由的事件。"
  remarks: "OnTouchUp 方法具有預設的實作。 在處理衍生類別中覆寫 OnTouchUp<xref:System.Windows.UIElement3D.TouchUp>事件。</xref:System.Windows.UIElement3D.TouchUp> 請務必呼叫基底類別的 OnTouchUp 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement3D.OnTouchUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnUpdateModel
  id: OnUpdateModel
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnUpdateModel()
  nameWithType: UIElement3D.OnUpdateModel()
  fullName: System.Windows.UIElement3D.OnUpdateModel()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "參與呈現在衍生類別中覆寫的作業。"
  remarks: "當您衍生自<xref:System.Windows.UIElement3D>類別，您可以使用這個方法並搭配<xref:System.Windows.UIElement3D.InvalidateModel%2A>方法，以重新整理之項目的模型。</xref:System.Windows.UIElement3D.InvalidateModel%2A> </xref:System.Windows.UIElement3D>       您只需要在進階案例中呼叫這個方法。 這類進階的案例之一就是在衍生的類別有多個屬性會影響外觀，並且您想要一次更新基礎的模型。 OnUpdateModel 方法內，您無法更新<xref:System.Windows.Media.Media3D.Visual3D.Visual3DModel%2A>屬性的<xref:System.Windows.Media.Media3D.Visual3D>類別。</xref:System.Windows.Media.Media3D.Visual3D> </xref:System.Windows.Media.Media3D.Visual3D.Visual3DModel%2A>       這個方法會有預設的實作<xref:System.Windows.UIElement3D>類別。</xref:System.Windows.UIElement3D>       .NET Framework 3.5 版中引進 OnUpdateModel。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example shows how to derive from the <xref:System.Windows.UIElement3D> class to create a `Sphere` class:  \n  \n [!code-cs[Shapes#Sphere](~/add/codesnippet/csharp/Shapes/Sphere.cs#sphere)]\n [!code-vb[Shapes#Sphere](~/add/codesnippet/visualbasic/shapes/sphere.vb#sphere)]  \n  \n For the complete sample, see [UIElement3D Sphere Sample](http://go.microsoft.com/fwlink/?LinkID=160044)."
  syntax:
    content: protected virtual void OnUpdateModel ();
    parameters: []
  overload: System.Windows.UIElement3D.OnUpdateModel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnVisualParentChanged(System.Windows.DependencyObject)
  id: OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: UIElement3D.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.UIElement3D.OnVisualParentChanged(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "時叫用父項目，這個<xref href=&quot;System.Windows.UIElement3D&quot;></xref>項變更回報至其基礎視覺化父項目。"
  remarks: ".NET Framework 3.5 版中引進 OnVisualParentChanged。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);
    parameters:
    - id: oldParent
      type: System.Windows.DependencyObject
      description: "先前的父系。 這可能會提供作為<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Windows.DependencyObject&quot;></xref>先前沒有父項目。"
  overload: System.Windows.UIElement3D.OnVisualParentChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  id: PredictFocus(System.Windows.Input.FocusNavigationDirection)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PredictFocus(FocusNavigationDirection)
  nameWithType: UIElement3D.PredictFocus(FocusNavigationDirection)
  fullName: System.Windows.UIElement3D.PredictFocus(FocusNavigationDirection)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當在衍生類別中覆寫時，傳回的元素，會接收指定的焦點周遊的方向，焦點，而不實際將焦點移至該元素。"
  remarks: "這個類別中，這個方法的預設實作不完整，且一律會傳回`null`。       .NET Framework 3.5 版中引進 PredictFocus。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Input.FocusNavigationDirection
      description: "要求的焦點周遊的方向。"
    return:
      type: System.Windows.DependencyObject
      description: "已收到焦點如果項目<xref:System.Windows.UIElement3D.MoveFocus*>實際叫用。</xref:System.Windows.UIElement3D.MoveFocus*>"
  overload: System.Windows.UIElement3D.PredictFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewDragEnter
  id: PreviewDragEnter
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewDragEnter
  nameWithType: UIElement3D.PreviewDragEnter
  fullName: System.Windows.UIElement3D.PreviewDragEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "輸入的系統回報以此項目作為拖曳目標的基礎拖曳事件時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName>附加這個類別中，事件，以便 PreviewDragEnter 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> 附加至 PreviewDragEnter 事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName>       .NET Framework 3.5 版中引進 PreviewDragEnter。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewDragEnter&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewDragEnterEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.DragEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.DragEnter>。</xref:System.Windows.UIElement3D.DragEnter> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement3D.PreviewDragEnterEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewDragEnter%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewDragEnter%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragEnter;
    return:
      type: System.Windows.DragEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewDragEnterEvent
  id: PreviewDragEnterEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewDragEnterEvent
  nameWithType: UIElement3D.PreviewDragEnterEvent
  fullName: System.Windows.UIElement3D.PreviewDragEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewDragEnter&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewDragEnterEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewDragLeave
  id: PreviewDragLeave
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewDragLeave
  nameWithType: UIElement3D.PreviewDragLeave
  fullName: System.Windows.UIElement3D.PreviewDragLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "輸入的系統回報以此項目作為拖曳來源的基礎拖曳事件時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName>附加這個類別中，事件，以便 PreviewDragLeave 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> 附加至 PreviewDragLeave 事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName>       .NET Framework 3.5 版中引進 PreviewDragLeave。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewDragLeave&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewDragLeaveEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.DragEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.DragLeave>。</xref:System.Windows.UIElement3D.DragLeave> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement3D.PreviewDragLeaveEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewDragLeave%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewDragLeave%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragLeave;
    return:
      type: System.Windows.DragEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewDragLeaveEvent
  id: PreviewDragLeaveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewDragLeaveEvent
  nameWithType: UIElement3D.PreviewDragLeaveEvent
  fullName: System.Windows.UIElement3D.PreviewDragLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewDragLeave&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewDragLeaveEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewDragOver
  id: PreviewDragOver
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewDragOver
  nameWithType: UIElement3D.PreviewDragOver
  fullName: System.Windows.UIElement3D.PreviewDragOver
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "輸入的系統回報以此項目作為可能置放目標的基礎拖曳事件時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName>附加這個類別中，事件，以便 PreviewDragOver 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> 附加至 PreviewDragOver 事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName>       .NET Framework 3.5 版中引進 PreviewDragOver。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewDragOver&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewDragOverEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.DragEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.DragOver>。</xref:System.Windows.UIElement3D.DragOver> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement3D.PreviewDragOverEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewDragOver%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewDragOver%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragOver;
    return:
      type: System.Windows.DragEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewDragOverEvent
  id: PreviewDragOverEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewDragOverEvent
  nameWithType: UIElement3D.PreviewDragOverEvent
  fullName: System.Windows.UIElement3D.PreviewDragOverEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewDragOver&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewDragOverEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewDrop
  id: PreviewDrop
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewDrop
  nameWithType: UIElement3D.PreviewDrop
  fullName: System.Windows.UIElement3D.PreviewDrop
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於輸入的系統報告其下的置放事件與這個項目作為置放目標。"
  remarks: "此事件會建立一個別名<xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName>附加這個類別中，事件，以便 PreviewDrop 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> 附加至 PreviewDrop 事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName>       .NET Framework 3.5 版中引進 PreviewDrop。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewDrop&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewDropEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.DragEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.Drop>。</xref:System.Windows.UIElement3D.Drop> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement3D.PreviewDropEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewDrop%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewDrop%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDrop;
    return:
      type: System.Windows.DragEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewDropEvent
  id: PreviewDropEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewDropEvent
  nameWithType: UIElement3D.PreviewDropEvent
  fullName: System.Windows.UIElement3D.PreviewDropEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewDrop&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewDropEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDropEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewGiveFeedback
  id: PreviewGiveFeedback
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewGiveFeedback
  nameWithType: UIElement3D.PreviewGiveFeedback
  fullName: System.Windows.UIElement3D.PreviewGiveFeedback
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "拖放操作開始時發生。"
  remarks: "PreviewGiveFeedback 事件可讓您修改滑鼠指標的外觀，以便將使用者視覺化回應提供拖放作業期間的拖曳事件來源。       此事件會建立一個別名<xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName>附加這個類別中，事件，以便 PreviewGiveFeedback 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> 附加至 PreviewGiveFeedback 事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName>       .NET Framework 3.5 版中引進 PreviewGiveFeedback。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewGiveFeedback&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewGiveFeedbackEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.GiveFeedbackEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.GiveFeedback>。</xref:System.Windows.UIElement3D.GiveFeedback> </xref:System.Windows.GiveFeedbackEventHandler> </xref:System.Windows.UIElement3D.PreviewGiveFeedbackEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewGiveFeedback%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewGiveFeedback%2A>"
  syntax:
    content: public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;
    return:
      type: System.Windows.GiveFeedbackEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewGiveFeedbackEvent
  id: PreviewGiveFeedbackEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewGiveFeedbackEvent
  nameWithType: UIElement3D.PreviewGiveFeedbackEvent
  fullName: System.Windows.UIElement3D.PreviewGiveFeedbackEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewGiveFeedback&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewGiveFeedbackEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewGotKeyboardFocus
  id: PreviewGotKeyboardFocus
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewGotKeyboardFocus
  nameWithType: UIElement3D.PreviewGotKeyboardFocus
  fullName: System.Windows.UIElement3D.PreviewGotKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "鍵盤以此元素為焦點時發生。"
  remarks: "這個事件使用通道路由，因為具有焦點的項目可能是子元素，而非項目實際附加事件處理常式。 請檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際具有焦點的項目中。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件會建立一個別名<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName>附加這個類別中，事件，以便 PreviewGotKeyboardFocus 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> 附加至 PreviewGotKeyboardFocus 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName>       .NET Framework 3.5 版中引進 PreviewGotKeyboardFocus。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewGotKeyboardFocus&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.GotKeyboardFocus>。</xref:System.Windows.UIElement3D.GotKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewGotKeyboardFocus%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewGotKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent
  id: PreviewGotKeyboardFocusEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewGotKeyboardFocusEvent
  nameWithType: UIElement3D.PreviewGotKeyboardFocusEvent
  fullName: System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewGotKeyboardFocus&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewGotKeyboardFocusEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewKeyDown
  id: PreviewKeyDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewKeyDown
  nameWithType: UIElement3D.PreviewKeyDown
  fullName: System.Windows.UIElement3D.PreviewKeyDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "鍵盤以此元素為焦點時按下按鍵時發生。"
  remarks: "索引鍵處理互動與其他的平台功能，例如命令和撰寫文字。 此事件會建立一個別名<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>附加這個類別中，事件，以便 PreviewKeyDown 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> 附加至 PreviewKeyDown 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>       .NET Framework 3.5 版中引進 PreviewKeyDown。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewKeyDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewKeyDownEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.KeyEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.KeyDown>。</xref:System.Windows.UIElement3D.KeyDown> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.UIElement3D.PreviewKeyDownEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewKeyDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewKeyDown%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler PreviewKeyDown;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewKeyDownEvent
  id: PreviewKeyDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewKeyDownEvent
  nameWithType: UIElement3D.PreviewKeyDownEvent
  fullName: System.Windows.UIElement3D.PreviewKeyDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewKeyDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewKeyDownEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewKeyUp
  id: PreviewKeyUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewKeyUp
  nameWithType: UIElement3D.PreviewKeyUp
  fullName: System.Windows.UIElement3D.PreviewKeyUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "鍵盤以此元素為焦點且放開按鍵時發生。"
  remarks: "索引鍵處理互動與其他的平台功能，例如命令和撰寫文字。       此事件會建立一個別名<xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>附加這個類別中，事件，以便 PreviewKeyUp 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> 附加至 PreviewKeyUp 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>       .NET Framework 3.5 版中引進 PreviewKeyUp。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewKeyUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewKeyUpEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.KeyEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.KeyUp>。</xref:System.Windows.UIElement3D.KeyUp> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.UIElement3D.PreviewKeyUpEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewKeyUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewKeyUp%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler PreviewKeyUp;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewKeyUpEvent
  id: PreviewKeyUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewKeyUpEvent
  nameWithType: UIElement3D.PreviewKeyUpEvent
  fullName: System.Windows.UIElement3D.PreviewKeyUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewKeyUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewKeyUpEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewLostKeyboardFocus
  id: PreviewLostKeyboardFocus
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewLostKeyboardFocus
  nameWithType: UIElement3D.PreviewLostKeyboardFocus
  fullName: System.Windows.UIElement3D.PreviewLostKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "鍵盤不再這個項目上為焦點時發生。"
  remarks: "這個事件使用通道路由，因為失去焦點的項目可能是子元素，而非項目實際附加事件處理常式。 請檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際失去焦點的項目中。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件會建立一個別名<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName>附加這個類別中，事件，以便 PreviewLostKeyboardFocus 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> 附加至 PreviewLostKeyboardFocus 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName>       .NET Framework 3.5 版中引進 PreviewLostKeyboardFocus。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewLostKeyboardFocus&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.LostKeyboardFocus>。</xref:System.Windows.UIElement3D.LostKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewLostKeyboardFocus%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewLostKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent
  id: PreviewLostKeyboardFocusEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewLostKeyboardFocusEvent
  nameWithType: UIElement3D.PreviewLostKeyboardFocusEvent
  fullName: System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewLostKeyboardFocus&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewLostKeyboardFocusEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseDown
  id: PreviewMouseDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseDown
  nameWithType: UIElement3D.PreviewMouseDown
  fullName: System.Windows.UIElement3D.PreviewMouseDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於指標位於此項目上方時，按下任何滑鼠按鈕。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>附加這個類別中，事件，以便 PreviewMouseDown 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 附加至 PreviewMouseDown 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>       PreviewMouseDown 事件通常就會引發以及 <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>或<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>，這對應到其中的兩個標準滑鼠按鈕的按下。</xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> </xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>和<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>也是路由的事件，但它們是直接路由的事件，就會引發適當的按鈕特定事件時<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>事件到達事件路由上的這個項目。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> </xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown></xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> 請參閱備註或<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown><xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>.</xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> </xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>       .NET Framework 3.5 版中引進 PreviewMouseDown。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewMouseDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewMouseDownEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.MouseDown>。</xref:System.Windows.UIElement3D.MouseDown> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.PreviewMouseDownEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseDownEvent
  id: PreviewMouseDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseDownEvent
  nameWithType: UIElement3D.PreviewMouseDownEvent
  fullName: System.Windows.UIElement3D.PreviewMouseDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewMouseDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewMouseDownEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseLeftButtonDown
  id: PreviewMouseLeftButtonDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseLeftButtonDown
  nameWithType: UIElement3D.PreviewMouseLeftButtonDown
  fullName: System.Windows.UIElement3D.PreviewMouseLeftButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於滑鼠指標位在這個項目時按下滑鼠左鍵。"
  remarks: "雖然這[路由傳送事件概觀](~/add/includes/ajax-current-ext-md.md)似乎遵循通道路由項目樹狀目錄中，透過它實際上是直接的路由的事件的引發，而且每個<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D> reraised 沿著項目樹狀結構       此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>事件，這是附加的事件處理的事件路由上的每個項目。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>       這個事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<xref:System.Windows.UIElement3D.AddHandler%2A>，使用選項來處理已標記為已處理的事件、 事件接聽程式，才能。</xref:System.Windows.UIElement3D.AddHandler%2A> 如果您要標示 PreviewMouseLeftButtonDown 處理，您基本上會標示<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>路由中的所有其他接聽程式處理，而且所有相關事件。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 這可能包括類別處理常式產生事件，例如<xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>       在概念上，將這個事件 (和其他滑鼠按鈕的事件上<xref:System.Windows.UIElement3D>) 是滑鼠 「 服務 」 (所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement3D> 這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。 更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]<xref:System.Windows.Input.Mouse>類別而非於<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse>       在 PreviewMouseLeftButtonDown.NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewMouseLeftButtonDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -覆寫<xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent
  id: PreviewMouseLeftButtonDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseLeftButtonDownEvent
  nameWithType: UIElement3D.PreviewMouseLeftButtonDownEvent
  fullName: System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewMouseLeftButtonDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewMouseLeftButtonDownEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseLeftButtonUp
  id: PreviewMouseLeftButtonUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseLeftButtonUp
  nameWithType: UIElement3D.PreviewMouseLeftButtonUp
  fullName: System.Windows.UIElement3D.PreviewMouseLeftButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當滑鼠指標位於此元素上方且放開滑鼠左的按鈕時發生。"
  remarks: "雖然這[路由傳送事件概觀](~/add/includes/ajax-current-ext-md.md)似乎遵循通道路由項目樹狀目錄中，透過它實際上是直接的路由的事件的引發，而且每個<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D> reraised 沿著項目樹狀結構       此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>事件，這是附加的事件處理的事件路由上的每個項目。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       這個事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> 如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<xref:System.Windows.UIElement3D.AddHandler%2A>，使用選項來處理已標記為已處理的事件、 事件接聽程式，才能。</xref:System.Windows.UIElement3D.AddHandler%2A> 如果您要標示 PreviewMouseLeftButtonUp 處理，您基本上會標示<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>路由中的所有其他接聽程式處理，而且所有相關事件。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       在概念上，將這個事件 (和其他滑鼠按鈕的事件上<xref:System.Windows.UIElement3D>) 是滑鼠 「 服務 」 (所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement3D> 這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。 更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]<xref:System.Windows.Input.Mouse>類別而非於<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse>       .NET Framework 3.5 版中引進 PreviewMouseLeftButtonUp。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewMouseLeftButtonUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -覆寫<xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent
  id: PreviewMouseLeftButtonUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseLeftButtonUpEvent
  nameWithType: UIElement3D.PreviewMouseLeftButtonUpEvent
  fullName: System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewMouseLeftButtonUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewMouseLeftButtonUpEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseMove
  id: PreviewMouseMove
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseMove
  nameWithType: UIElement3D.PreviewMouseMove
  fullName: System.Windows.UIElement3D.PreviewMouseMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於滑鼠指標移動滑鼠指標位於此元素上方時。"
  remarks: "都會發生這個事件項目界限，第一次進入滑鼠指標時，也會在滑鼠指標移時仍保持項目範圍內。       此事件會建立一個別名<xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName>附加這個類別中，事件，以便 PreviewMouseMove 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> 附加至 PreviewMouseMove 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName>       .NET Framework 3.5 版中引進 PreviewMouseMove。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewMouseMove&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewMouseMoveEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.MouseEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.MouseMove>。</xref:System.Windows.UIElement3D.MouseMove> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement3D.PreviewMouseMoveEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewMouseMove%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewMouseMove%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler PreviewMouseMove;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseMoveEvent
  id: PreviewMouseMoveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseMoveEvent
  nameWithType: UIElement3D.PreviewMouseMoveEvent
  fullName: System.Windows.UIElement3D.PreviewMouseMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewMouseMove&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewMouseMoveEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseRightButtonDown
  id: PreviewMouseRightButtonDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseRightButtonDown
  nameWithType: UIElement3D.PreviewMouseRightButtonDown
  fullName: System.Windows.UIElement3D.PreviewMouseRightButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當滑鼠指標位於此元素上方時，按下滑鼠右按鈕時發生。"
  remarks: "雖然這[路由傳送事件概觀](~/add/includes/ajax-current-ext-md.md)似乎遵循通道路由項目樹狀目錄中，透過它實際上是直接的路由的事件的引發，而且每個<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D> reraised 沿著項目樹狀結構       此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>事件，這是附加的事件處理的事件路由上的每個項目。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>       這個事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<xref:System.Windows.UIElement3D.AddHandler%2A>，使用選項來處理已標記為已處理的事件、 事件接聽程式，才能。</xref:System.Windows.UIElement3D.AddHandler%2A> 如果您要標示 PreviewMouseRightButtonDown 處理，您基本上會標示<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>路由中的所有其他接聽程式處理，而且所有相關事件。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 這可能包括類別處理常式產生事件，例如<xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>       在概念上，將這個事件 (和其他滑鼠按鈕的事件上<xref:System.Windows.UIElement3D>) 是滑鼠 「 服務 」 (所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement3D> 這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。 更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]<xref:System.Windows.Input.Mouse>類別而非於<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse>       .NET Framework 3.5 版中引進 PreviewMouseRightButtonDown。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewMouseRightButtonDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -覆寫<xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent
  id: PreviewMouseRightButtonDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseRightButtonDownEvent
  nameWithType: UIElement3D.PreviewMouseRightButtonDownEvent
  fullName: System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewMouseRightButtonDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewMouseRightButtonDownEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseRightButtonUp
  id: PreviewMouseRightButtonUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseRightButtonUp
  nameWithType: UIElement3D.PreviewMouseRightButtonUp
  fullName: System.Windows.UIElement3D.PreviewMouseRightButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當滑鼠指標位於此元素上方且放開滑鼠右按鈕時發生。"
  remarks: "雖然這[路由傳送事件概觀](~/add/includes/ajax-current-ext-md.md)似乎遵循通道路由項目樹狀目錄中，透過它實際上是直接的路由的事件的引發，而且每個<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D> reraised 沿著項目樹狀結構       此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>事件，這是附加的事件處理的事件路由上的每個項目。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       這個事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> 如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<xref:System.Windows.UIElement3D.AddHandler%2A>，使用選項來處理已標記為已處理的事件、 事件接聽程式，才能。</xref:System.Windows.UIElement3D.AddHandler%2A> 如果您要標示 PreviewMouseRightButtonUp 處理，您基本上會標示<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>路由中的所有其他接聽程式處理，而且所有相關事件。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       在概念上，將這個事件 (和其他滑鼠按鈕的事件上<xref:System.Windows.UIElement3D>) 是滑鼠 「 服務 」 (所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement3D> 這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。 更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]<xref:System.Windows.Input.Mouse>類別而非於<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse>       .NET Framework 3.5 版中引進 PreviewMouseRightButtonUp。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewMouseRightButtonUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -覆寫<xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent
  id: PreviewMouseRightButtonUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseRightButtonUpEvent
  nameWithType: UIElement3D.PreviewMouseRightButtonUpEvent
  fullName: System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewMouseRightButtonUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewMouseRightButtonUpEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseUp
  id: PreviewMouseUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseUp
  nameWithType: UIElement3D.PreviewMouseUp
  fullName: System.Windows.UIElement3D.PreviewMouseUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於滑鼠指標位於此元素上方且放開任何滑鼠按鈕。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>附加這個類別中，事件，以便 PreviewMouseUp 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> 附加至 PreviewMouseUp 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       PreviewMouseUp 事件通常就會引發以及 <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>或<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>，這對應到其中的兩個標準滑鼠按鈕的按下。</xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> </xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>和<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>也是路由的事件，但它們是直接路由的事件，就會引發適當的按鈕特定事件時<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>事件到達事件路由上的這個項目。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> </xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp></xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> 請參閱備註或<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp><xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>.</xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> </xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>       .NET Framework 3.5 版中引進 PreviewMouseUp。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewMouseUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewMouseUpEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.MouseUp>。</xref:System.Windows.UIElement3D.MouseUp> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.PreviewMouseUpEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseUpEvent
  id: PreviewMouseUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseUpEvent
  nameWithType: UIElement3D.PreviewMouseUpEvent
  fullName: System.Windows.UIElement3D.PreviewMouseUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewMouseUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewMouseUpEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseWheel
  id: PreviewMouseWheel
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseWheel
  nameWithType: UIElement3D.PreviewMouseWheel
  fullName: System.Windows.UIElement3D.PreviewMouseWheel
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當滑鼠指標位於此元素上方且使用者滾動滑鼠滾輪時發生。"
  remarks: "焦點或滑鼠捕捉優先於滑鼠指標所在位置。因此，如果您收到這個事件與已取得焦點或擷取的項目時，滑鼠指標實際上可能是透過另一個項目。       此事件會建立一個別名<xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName>附加事件，這個類別，以便<xref:System.Windows.UIElement3D.PreviewMouseMove>屬於類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.UIElement3D.PreviewMouseMove> </xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> 事件處理常式附加至<xref:System.Windows.UIElement3D.PreviewMouseMove>事件會附加至基礎<xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> </xref:System.Windows.UIElement3D.PreviewMouseMove>       .NET Framework 3.5 版中引進 PreviewMouseWheel。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewMouseWheel&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewMouseWheelEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.MouseWheelEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.MouseWheel>。</xref:System.Windows.UIElement3D.MouseWheel> </xref:System.Windows.Input.MouseWheelEventHandler> </xref:System.Windows.UIElement3D.PreviewMouseWheelEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewMouseWheel%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewMouseWheel%2A>"
  syntax:
    content: public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;
    return:
      type: System.Windows.Input.MouseWheelEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseWheelEvent
  id: PreviewMouseWheelEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseWheelEvent
  nameWithType: UIElement3D.PreviewMouseWheelEvent
  fullName: System.Windows.UIElement3D.PreviewMouseWheelEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewMouseWheel&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewMouseWheelEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewQueryContinueDrag
  id: PreviewQueryContinueDrag
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewQueryContinueDrag
  nameWithType: UIElement3D.PreviewQueryContinueDrag
  fullName: System.Windows.UIElement3D.PreviewQueryContinueDrag
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "拖放作業期間鍵盤或滑鼠按鈕狀態變更時，就會發生。"
  remarks: "PreviewQueryContinueDrag 事件可讓拖曳來源能夠宣告是否應取消拖放作業。       此事件會建立一個別名<xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName>附加這個類別中，事件，以便 PreviewQueryContinueDrag 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> 附加至 PreviewQueryContinueDrag 事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName>       .NET Framework 3.5 版中引進 PreviewQueryContinueDrag。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewQueryContinueDrag&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewQueryContinueDragEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.QueryContinueDragEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.QueryContinueDrag>。</xref:System.Windows.UIElement3D.QueryContinueDrag> </xref:System.Windows.QueryContinueDragEventHandler> </xref:System.Windows.UIElement3D.PreviewQueryContinueDragEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewQueryContinueDrag%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewQueryContinueDrag%2A>"
  syntax:
    content: public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;
    return:
      type: System.Windows.QueryContinueDragEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewQueryContinueDragEvent
  id: PreviewQueryContinueDragEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewQueryContinueDragEvent
  nameWithType: UIElement3D.PreviewQueryContinueDragEvent
  fullName: System.Windows.UIElement3D.PreviewQueryContinueDragEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewQueryContinueDrag&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewQueryContinueDragEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusButtonDown
  id: PreviewStylusButtonDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusButtonDown
  nameWithType: UIElement3D.PreviewStylusButtonDown
  fullName: System.Windows.UIElement3D.PreviewStylusButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於指標位於此項目上方時，按下手寫筆按鈕。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName>附加這個類別中，事件，以便 PreviewStylusButtonDown 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> 附加至 PreviewStylusButtonDown 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 PreviewStylusButtonDown。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusButtonDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewStylusButtonDownEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.StylusButtonEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.StylusButtonDown>。</xref:System.Windows.UIElement3D.StylusButtonDown> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.UIElement3D.PreviewStylusButtonDownEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewStylusButtonDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewStylusButtonDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusButtonDownEvent
  id: PreviewStylusButtonDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusButtonDownEvent
  nameWithType: UIElement3D.PreviewStylusButtonDownEvent
  fullName: System.Windows.UIElement3D.PreviewStylusButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewStylusButtonDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewStylusButtonDownEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusButtonUp
  id: PreviewStylusButtonUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusButtonUp
  nameWithType: UIElement3D.PreviewStylusButtonUp
  fullName: System.Windows.UIElement3D.PreviewStylusButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於指標位於此元素上方且放開手寫筆按鈕。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName>附加這個類別中，事件，以便 PreviewStylusButtonUp 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> 附加至 PreviewStylusButtonUp 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 PreviewStylusButtonUp。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusButtonUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewStylusButtonUpEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.StylusButtonEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.StylusButtonUp>。</xref:System.Windows.UIElement3D.StylusButtonUp> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.UIElement3D.PreviewStylusButtonUpEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewStylusButtonUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewStylusButtonUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusButtonUpEvent
  id: PreviewStylusButtonUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusButtonUpEvent
  nameWithType: UIElement3D.PreviewStylusButtonUpEvent
  fullName: System.Windows.UIElement3D.PreviewStylusButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewStylusButtonUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewStylusButtonUpEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusDown
  id: PreviewStylusDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusDown
  nameWithType: UIElement3D.PreviewStylusDown
  fullName: System.Windows.UIElement3D.PreviewStylusDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "雖然此元素上方且碰觸數位板時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName>附加這個類別中，事件，以便 PreviewStylusDown 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> 附加至 PreviewStylusDown 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 PreviewStylusDown。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewStylusDownEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.StylusDownEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.StylusDown>。</xref:System.Windows.UIElement3D.StylusDown> </xref:System.Windows.Input.StylusDownEventHandler> </xref:System.Windows.UIElement3D.PreviewStylusDownEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewStylusDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewStylusDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;
    return:
      type: System.Windows.Input.StylusDownEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusDownEvent
  id: PreviewStylusDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusDownEvent
  nameWithType: UIElement3D.PreviewStylusDownEvent
  fullName: System.Windows.UIElement3D.PreviewStylusDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewStylusDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewStylusDownEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusInAirMove
  id: PreviewStylusInAirMove
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusInAirMove
  nameWithType: UIElement3D.PreviewStylusInAirMove
  fullName: System.Windows.UIElement3D.PreviewStylusInAirMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "手寫筆移動的項目上，但沒有真正碰觸數位板時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName>附加這個類別中，事件，以便 PreviewStylusInAirMove 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> 附加至 PreviewStylusInAirMove 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 PreviewStylusInAirMove。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusInAirMove&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewStylusInAirMoveEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.StylusInAirMove>。</xref:System.Windows.UIElement3D.StylusInAirMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.PreviewStylusInAirMoveEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewStylusInAirMove%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewStylusInAirMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusInAirMoveEvent
  id: PreviewStylusInAirMoveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusInAirMoveEvent
  nameWithType: UIElement3D.PreviewStylusInAirMoveEvent
  fullName: System.Windows.UIElement3D.PreviewStylusInAirMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewStylusInAirMove&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewStylusInAirMoveEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusInRange
  id: PreviewStylusInRange
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusInRange
  nameWithType: UIElement3D.PreviewStylusInRange
  fullName: System.Windows.UIElement3D.PreviewStylusInRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "手寫筆靠近數位板偵測，此元素上方時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName>附加這個類別中，事件，以便 PreviewStylusInRange 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> 附加至 PreviewStylusInRange 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 PreviewStylusInRange。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusInRange&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewStylusInRangeEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.StylusInRange>。</xref:System.Windows.UIElement3D.StylusInRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.PreviewStylusInRangeEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewStylusInRange%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewStylusInRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusInRangeEvent
  id: PreviewStylusInRangeEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusInRangeEvent
  nameWithType: UIElement3D.PreviewStylusInRangeEvent
  fullName: System.Windows.UIElement3D.PreviewStylusInRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewStylusInRange&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewStylusInRangeEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusMove
  id: PreviewStylusMove
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusMove
  nameWithType: UIElement3D.PreviewStylusMove
  fullName: System.Windows.UIElement3D.PreviewStylusMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "手寫筆在元素上方移動時發生。 手寫筆必須在受到數位板偵測時移動才能引發此事件，否則<xref href=&quot;System.Windows.UIElement3D.PreviewStylusInAirMove&quot;></xref>會改為引發。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName>附加這個類別中，事件，以便 PreviewStylusMove 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> 附加至 PreviewStylusMove 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 PreviewStylusMove。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusMove&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewStylusMoveEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.StylusMove>。</xref:System.Windows.UIElement3D.StylusMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.PreviewStylusMoveEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewStylusMove%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewStylusMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusMoveEvent
  id: PreviewStylusMoveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusMoveEvent
  nameWithType: UIElement3D.PreviewStylusMoveEvent
  fullName: System.Windows.UIElement3D.PreviewStylusMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewStylusMove&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewStylusMoveEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusOutOfRange
  id: PreviewStylusOutOfRange
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusOutOfRange
  nameWithType: UIElement3D.PreviewStylusOutOfRange
  fullName: System.Windows.UIElement3D.PreviewStylusOutOfRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "手寫筆遠離數位板偵測時，就會發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName>附加這個類別中，事件，以便 PreviewStylusOutOfRange 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> 附加至 PreviewStylusOutOfRange 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 PreviewStylusOutOfRange。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusOutOfRange&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.StylusOutOfRange>。</xref:System.Windows.UIElement3D.StylusOutOfRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewStylusOutOfRange%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewStylusOutOfRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent
  id: PreviewStylusOutOfRangeEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusOutOfRangeEvent
  nameWithType: UIElement3D.PreviewStylusOutOfRangeEvent
  fullName: System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewStylusOutOfRange&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewStylusOutOfRangeEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusSystemGesture
  id: PreviewStylusSystemGesture
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusSystemGesture
  nameWithType: UIElement3D.PreviewStylusSystemGesture
  fullName: System.Windows.UIElement3D.PreviewStylusSystemGesture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當使用者執行其中一種手寫筆筆勢時發生。"
  remarks: "手寫筆筆勢的相關資訊，請參閱<xref:System.Windows.Input.SystemGesture>.</xref:System.Windows.Input.SystemGesture>       此事件會建立一個別名<xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName>附加這個類別中，事件，以便 PreviewStylusSystemGesture 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> 附加至 PreviewStylusSystemGesture 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 PreviewStylusSystemGesture。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusSystemGesture&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewStylusSystemGestureEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.StylusSystemGestureEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.StylusSystemGesture>。</xref:System.Windows.UIElement3D.StylusSystemGesture> </xref:System.Windows.Input.StylusSystemGestureEventHandler> </xref:System.Windows.UIElement3D.PreviewStylusSystemGestureEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewStylusSystemGesture%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewStylusSystemGesture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;
    return:
      type: System.Windows.Input.StylusSystemGestureEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusSystemGestureEvent
  id: PreviewStylusSystemGestureEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusSystemGestureEvent
  nameWithType: UIElement3D.PreviewStylusSystemGestureEvent
  fullName: System.Windows.UIElement3D.PreviewStylusSystemGestureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewStylusSystemGesture&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewStylusSystemGestureEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusUp
  id: PreviewStylusUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusUp
  nameWithType: UIElement3D.PreviewStylusUp
  fullName: System.Windows.UIElement3D.PreviewStylusUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "且使用者舉起手寫筆在數位板手寫筆在此元素上方時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName>附加事件，這個類別，以便<xref:System.Windows.UIElement3D.PreviewStylusDown>屬於類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.UIElement3D.PreviewStylusDown> </xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> 事件處理常式附加至<xref:System.Windows.UIElement3D.PreviewStylusDown>事件會附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> </xref:System.Windows.UIElement3D.PreviewStylusDown>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 PreviewStylusUp。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewStylusUpEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.StylusUp>。</xref:System.Windows.UIElement3D.StylusUp> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.PreviewStylusUpEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewStylusUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewStylusUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusUp;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusUpEvent
  id: PreviewStylusUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusUpEvent
  nameWithType: UIElement3D.PreviewStylusUpEvent
  fullName: System.Windows.UIElement3D.PreviewStylusUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewStylusUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewStylusUpEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewTextInput
  id: PreviewTextInput
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewTextInput
  nameWithType: UIElement3D.PreviewTextInput
  fullName: System.Windows.UIElement3D.PreviewTextInput
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "這個項目與裝置無關的方式取得文字時發生。"
  remarks: "PreviewTextInput 事件可讓元件或應用程式與裝置無關的方式接聽文字輸入。 鍵盤是 PreviewTextInput; 的主要方法但語音、 手寫，以及其他輸入的裝置也可以產生 PreviewTextInput。       因為組合 — 在預設鍵盤或輸入的法編輯器透過 — 多個按鍵事件可能會引發一個文字輸入的事件。       此事件會建立一個別名<xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName>附加這個類別中，事件，以便 PreviewTextInput 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> 附加至 PreviewTextInput 事件的事件處理常式附加至基礎<xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName>       .NET Framework 3.5 版中引進 PreviewTextInput。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewTextInput&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewTextInputEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.TextCompositionEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement3D.TextInput>。</xref:System.Windows.UIElement3D.TextInput> </xref:System.Windows.Input.TextCompositionEventHandler> </xref:System.Windows.UIElement3D.PreviewTextInputEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewTextInput%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewTextInput%2A>"
  syntax:
    content: public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;
    return:
      type: System.Windows.Input.TextCompositionEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewTextInputEvent
  id: PreviewTextInputEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewTextInputEvent
  nameWithType: UIElement3D.PreviewTextInputEvent
  fullName: System.Windows.UIElement3D.PreviewTextInputEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewTextInput&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 PreviewTextInputEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewTouchDown
  id: PreviewTouchDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewTouchDown
  nameWithType: UIElement3D.PreviewTouchDown
  fullName: System.Windows.UIElement3D.PreviewTouchDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於手指接觸到螢幕，此元素上方時。"
  remarks: "根據預設，PreviewTouchDown 和<xref:System.Windows.UIElement3D.TouchDown>事件手指接觸到螢幕，並移動之前不會發生。</xref:System.Windows.UIElement3D.TouchDown> 手指在螢幕上按住它不移動的方式會造成按下按住不放的<xref:System.Windows.Input.Stylus>.</xref:System.Windows.Input.Stylus>行為 按住行為相當於按一下滑鼠右鍵。       若要讓 PreviewTouchDown 和<xref:System.Windows.UIElement3D.TouchDown>手指接觸到螢幕，因為發生事件設定<xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName>附加屬性`false`這個項目的。</xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> </xref:System.Windows.UIElement3D.TouchDown>      <a name=&quot;routedEventInfo_PreviewTouchDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewTouchDownEvent>|  |路由策略 |通道 |  |委派 |<xref:System.EventHandler%601>的型別<xref:System.Windows.Input.TouchEventArgs>。 |     -對應反昇事件為<xref:System.Windows.UIElement3D.TouchDown>。</xref:System.Windows.UIElement3D.TouchDown> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement3D.PreviewTouchDownEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchDown;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewTouchDownEvent
  id: PreviewTouchDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewTouchDownEvent
  nameWithType: UIElement3D.PreviewTouchDownEvent
  fullName: System.Windows.UIElement3D.PreviewTouchDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewTouchDown&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewTouchMove
  id: PreviewTouchMove
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewTouchMove
  nameWithType: UIElement3D.PreviewTouchMove
  fullName: System.Windows.UIElement3D.PreviewTouchMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於手指移動螢幕上，這個項目上方時發生。"
  remarks: "<a name=&quot;routedEventInfo_PreviewTouchMove&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewTouchMoveEvent>|  |路由策略 |通道 |  |委派 |<xref:System.EventHandler%601>的型別<xref:System.Windows.Input.TouchEventArgs>。 |     -對應反昇事件為<xref:System.Windows.UIElement3D.TouchMove>。</xref:System.Windows.UIElement3D.TouchMove> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement3D.PreviewTouchMoveEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchMove;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewTouchMoveEvent
  id: PreviewTouchMoveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewTouchMoveEvent
  nameWithType: UIElement3D.PreviewTouchMoveEvent
  fullName: System.Windows.UIElement3D.PreviewTouchMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewTouchMove&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewTouchUp
  id: PreviewTouchUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewTouchUp
  nameWithType: UIElement3D.PreviewTouchUp
  fullName: System.Windows.UIElement3D.PreviewTouchUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "這個項目上方時，引發手指不在畫面上時，就會發生。"
  remarks: "<a name=&quot;routedEventInfo_PreviewTouchUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.PreviewTouchUpEvent>|  |路由策略 |通道 |  |委派 |<xref:System.EventHandler%601>的型別<xref:System.Windows.Input.TouchEventArgs>。 |     -對應反昇事件為<xref:System.Windows.UIElement3D.TouchUp>。</xref:System.Windows.UIElement3D.TouchUp> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement3D.PreviewTouchUpEvent>      -覆寫<xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchUp;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewTouchUpEvent
  id: PreviewTouchUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewTouchUpEvent
  nameWithType: UIElement3D.PreviewTouchUpEvent
  fullName: System.Windows.UIElement3D.PreviewTouchUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.PreviewTouchUp&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.QueryContinueDrag
  id: QueryContinueDrag
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: QueryContinueDrag
  nameWithType: UIElement3D.QueryContinueDrag
  fullName: System.Windows.UIElement3D.QueryContinueDrag
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "拖放作業期間鍵盤或滑鼠按鈕狀態變更時，就會發生。"
  remarks: "QueryContinueDrag 事件可讓拖曳來源能夠決定是否應取消拖放作業。       此事件會建立一個別名<xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName>附加這個類別中，事件，以便 QueryContinueDrag 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> 附加至 QueryContinueDrag 事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName>       QueryContinueDrag.NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_QueryContinueDrag&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.QueryContinueDragEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.QueryContinueDragEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewQueryContinueDrag>。</xref:System.Windows.UIElement3D.PreviewQueryContinueDrag> </xref:System.Windows.QueryContinueDragEventHandler> </xref:System.Windows.UIElement3D.QueryContinueDragEvent>      -覆寫<xref:System.Windows.UIElement3D.OnQueryContinueDrag%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnQueryContinueDrag%2A>"
  syntax:
    content: public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;
    return:
      type: System.Windows.QueryContinueDragEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.QueryContinueDragEvent
  id: QueryContinueDragEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: QueryContinueDragEvent
  nameWithType: UIElement3D.QueryContinueDragEvent
  fullName: System.Windows.UIElement3D.QueryContinueDragEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.QueryContinueDrag&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 QueryContinueDragEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.QueryCursor
  id: QueryCursor
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: QueryCursor
  nameWithType: UIElement3D.QueryCursor
  fullName: System.Windows.UIElement3D.QueryCursor
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "要求游標顯示時發生。 每當滑鼠指標移到新位置，這表示游標物件可能需要變更根據其新位置時，是項目上引發這個事件。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName>附加這個類別中，事件，以便 QueryCursor 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> 附加至 QueryCursor 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName>       這個事件名稱所參考的資料指標不一定是文字游標 （有時稱為插入點）。 相反地，此內容中的資料指標是宣告畫面的圖形化顯示數個可能的輸入相關裝置或中的概念相關的物件[!INCLUDE[TLA2#tla_win](~/add/includes/tla2sharptla-win-md.md)]程式設計。 該物件由<xref:System.Windows.Input.Cursor>類別[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]。</xref:System.Windows.Input.Cursor> [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]輸入的系統可讓您變更這個資料指標，它代表在螢幕上的滑鼠指標位置時。 您可以使用預先定義的值從<xref:System.Windows.Input.Cursors>列舉型別，或者您可以宣告為影像檔的自訂資料指標。</xref:System.Windows.Input.Cursors>       接聽 QueryCursor 事件不是針對資料指標管理而有效率的技術。 相反地，每個項目應該定義它自己的資料指標行為和<xref:System.Windows.FrameworkContentElement.Cursor%2A><xref:System.Windows.FrameworkContentElement.ForceCursor%2A>.</xref:System.Windows.FrameworkContentElement.ForceCursor%2A> </xref:System.Windows.FrameworkContentElement.Cursor%2A> 您只應依賴 QueryCursor，如果您不想要使用的 WPF 架構層級基底項目，或在異常的情況下，其中定義以每個項目為基礎的資料指標的行為不符合您的需求。 如需有關在 QueryCursor 回應中實作資料指標行為的詳細資訊，請參閱<xref:System.Windows.Input.QueryCursorEventHandler>.</xref:System.Windows.Input.QueryCursorEventHandler>       .NET Framework 3.5 版中引進 QueryCursor。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_QueryCursor&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.QueryCursorEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.QueryCursorEventHandler>|     -沒有定義對應通道的事件。</xref:System.Windows.Input.QueryCursorEventHandler> </xref:System.Windows.UIElement3D.QueryCursorEvent>      -覆寫<xref:System.Windows.UIElement3D.OnQueryCursor%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnQueryCursor%2A>"
  syntax:
    content: public event System.Windows.Input.QueryCursorEventHandler QueryCursor;
    return:
      type: System.Windows.Input.QueryCursorEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.QueryCursorEvent
  id: QueryCursorEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: QueryCursorEvent
  nameWithType: UIElement3D.QueryCursorEvent
  fullName: System.Windows.UIElement3D.QueryCursorEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.QueryCursor&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 QueryCursorEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent QueryCursorEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.RaiseEvent(System.Windows.RoutedEventArgs)
  id: RaiseEvent(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: RaiseEvent(RoutedEventArgs)
  nameWithType: UIElement3D.RaiseEvent(RoutedEventArgs)
  fullName: System.Windows.UIElement3D.RaiseEvent(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "引發特定路由的事件。 <xref href=&quot;System.Windows.RoutedEvent&quot;> </xref>引發識別內<xref href=&quot;System.Windows.RoutedEventArgs&quot;></xref>所提供的執行個體 (做為<xref:System.Windows.RoutedEventArgs.RoutedEvent*>該事件資料的屬性)。</xref:System.Windows.RoutedEventArgs.RoutedEvent*>"
  remarks: "`e`參數的型別做為路由的事件的所有資料的通用基底類型; 不過，應該指定事件資料為最特定的事件資料類型是適用於所引發的事件，因為<xref:System.Windows.RoutedEventArgs>衍生的類別包含適用於特定的事件引發時的實際的特定資料屬性。</xref:System.Windows.RoutedEventArgs>       <xref:System.Windows.RoutedEventArgs>沒有狀態內容事件。它也會識別要引發哪個路由的事件。</xref:System.Windows.RoutedEventArgs> 此事件引發模式且同時與不同的路由的事件資料[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]事件和資料類別，通常只包含與事件相關的屬性。       RaiseEvent.NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void RaiseEvent (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "A <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref> ，包含事件資料，也會識別要引發的事件。"
  overload: System.Windows.UIElement3D.RaiseEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.ReleaseAllTouchCaptures
  id: ReleaseAllTouchCaptures
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: ReleaseAllTouchCaptures()
  nameWithType: UIElement3D.ReleaseAllTouchCaptures()
  fullName: System.Windows.UIElement3D.ReleaseAllTouchCaptures()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "釋放這個項目中的所有擷取的觸控式裝置。"
  syntax:
    content: public void ReleaseAllTouchCaptures ();
    parameters: []
  overload: System.Windows.UIElement3D.ReleaseAllTouchCaptures*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.ReleaseMouseCapture
  id: ReleaseMouseCapture
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: ReleaseMouseCapture()
  nameWithType: UIElement3D.ReleaseMouseCapture()
  fullName: System.Windows.UIElement3D.ReleaseMouseCapture()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "如果這個項目持有擷取，請釋放滑鼠捕捉。"
  remarks: "如果這個項目按擷取不放，呼叫這個方法沒有任何作用。 請考慮檢查值<xref:System.Windows.UIElement3D.IsMouseCaptured%2A>之前先呼叫這個方法。</xref:System.Windows.UIElement3D.IsMouseCaptured%2A>       .NET Framework 3.5 版中引進 ReleaseMouseCapture。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void ReleaseMouseCapture ();
    parameters: []
  overload: System.Windows.UIElement3D.ReleaseMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.ReleaseStylusCapture
  id: ReleaseStylusCapture
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: ReleaseStylusCapture()
  nameWithType: UIElement3D.ReleaseStylusCapture()
  fullName: System.Windows.UIElement3D.ReleaseStylusCapture()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "如果這個項目持有擷取，請釋放手寫筆裝置擷取。"
  remarks: "如果這個項目按擷取不放，呼叫這個方法沒有任何作用。 請考慮檢查值<xref:System.Windows.UIElement3D.IsStylusCaptured%2A>之前先呼叫這個方法。</xref:System.Windows.UIElement3D.IsStylusCaptured%2A>       .NET Framework 3.5 版中引進 ReleaseStylusCapture。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void ReleaseStylusCapture ();
    parameters: []
  overload: System.Windows.UIElement3D.ReleaseStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  id: ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: ReleaseTouchCapture(TouchDevice)
  nameWithType: UIElement3D.ReleaseTouchCapture(TouchDevice)
  fullName: System.Windows.UIElement3D.ReleaseTouchCapture(TouchDevice)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "正在嘗試釋出這個項目從指定的觸控式裝置。"
  syntax:
    content: public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);
    parameters:
    - id: touchDevice
      type: System.Windows.Input.TouchDevice
      description: "要釋放的裝置。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已發行的觸控式裝置。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.ReleaseTouchCapture*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>touchDevice</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.UIElement3D.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  id: RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: RemoveHandler(RoutedEvent,Delegate)
  nameWithType: UIElement3D.RemoveHandler(RoutedEvent,Delegate)
  fullName: System.Windows.UIElement3D.RemoveHandler(RoutedEvent,Delegate)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "從這個項目中移除指定的路由的事件處理常式。"
  remarks: "最常見的案例使用這[!INCLUDE[TLA#tla_api](~/add/includes/tlasharptla-api-md.md)]是當您實作[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]自訂路由事件，特別是當您實作在處理常式的 「 移除 」 邏輯時相關聯的 「 包裝函式 」 事件[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]層級。       如果沒有任何處理常式註冊以比對方法呼叫的輸入的參數的準則，則呼叫這個方法任何作用。       如果一個以上的處理常式附加事件處理常式存放區會移除比對準則，第一個處理常式。 這個行為會與一致[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]行為`-=`運算子。       既不`routedEvent`也`handler`可能`null`。 嘗試在提供做為任一個值`null`會引發例外狀況。       這個方法會忽略`handledEventsToo`加上參數資訊，如果第一個處理常式提供<xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>簽章，可讓已處理事件的處理。</xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 會移除任一類型的處理常式。       RemoveHandler.NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "路由事件處理常式附加的識別項。"
    - id: handler
      type: System.Delegate
      description: "要從這個項目上的事件處理常式集合中移除的特定處理常式實作。"
  overload: System.Windows.UIElement3D.RemoveHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.ShouldSerializeCommandBindings
  id: ShouldSerializeCommandBindings
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: ShouldSerializeCommandBindings()
  nameWithType: UIElement3D.ShouldSerializeCommandBindings()
  fullName: System.Windows.UIElement3D.ShouldSerializeCommandBindings()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "傳回序列化程序是否應序列化<xref:System.Windows.UIElement3D.CommandBindings*>此類別的執行個體上的屬性</xref:System.Windows.UIElement3D.CommandBindings*>的內容"
  remarks: "這會傳回`true`如果<xref:System.Windows.UIElement3D.CommandBindings%2A>本機設定。</xref:System.Windows.UIElement3D.CommandBindings%2A>       這`ShouldSerialize`方法提供，因為<xref:System.Windows.UIElement3D.CommandBindings%2A>屬性並沒有簡單的預設值。</xref:System.Windows.UIElement3D.CommandBindings%2A> 這個方法會指出屬性是否已變更其預設值。 當您是開發設計工具，或者開發自己的控制項加入<xref:System.Windows.UIElement3D>.</xref:System.Windows.UIElement3D>通常呼叫這個方法       如需詳細資訊，請參閱[定義預設值使用 ShouldSerialize 和重設方法](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 ShouldSerializeCommandBindings。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public bool ShouldSerializeCommandBindings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Windows.UIElement3D.CommandBindings*>屬性值應該序列化，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.UIElement3D.CommandBindings*>"
  overload: System.Windows.UIElement3D.ShouldSerializeCommandBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.ShouldSerializeInputBindings
  id: ShouldSerializeInputBindings
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: ShouldSerializeInputBindings()
  nameWithType: UIElement3D.ShouldSerializeInputBindings()
  fullName: System.Windows.UIElement3D.ShouldSerializeInputBindings()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "傳回序列化程序是否應序列化<xref:System.Windows.UIElement3D.InputBindings*>此類別的執行個體上的屬性</xref:System.Windows.UIElement3D.InputBindings*>的內容"
  remarks: "這會傳回`true`如果<xref:System.Windows.UIElement3D.InputBindings%2A>本機設定。</xref:System.Windows.UIElement3D.InputBindings%2A>       這`ShouldSerialize`方法提供，因為<xref:System.Windows.UIElement3D.InputBindings%2A>屬性並沒有簡單的預設值。</xref:System.Windows.UIElement3D.InputBindings%2A> 這個方法會指出屬性是否已變更其預設值。 當您是開發設計工具，或者開發自己的控制項加入<xref:System.Windows.UIElement3D>.</xref:System.Windows.UIElement3D>通常呼叫這個方法       如需詳細資訊，請參閱[定義預設值使用 ShouldSerialize 和重設方法](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 ShouldSerializeInputBindings。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public bool ShouldSerializeInputBindings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Windows.UIElement3D.InputBindings*>屬性值應該序列化，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.UIElement3D.InputBindings*>"
  overload: System.Windows.UIElement3D.ShouldSerializeInputBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusButtonDown
  id: StylusButtonDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusButtonDown
  nameWithType: UIElement3D.StylusButtonDown
  fullName: System.Windows.UIElement3D.StylusButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於指標位於此項目上方時，按下手寫筆按鈕。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName>附加這個類別中，事件，以便 StylusButtonDown 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> 附加至 StylusButtonDown 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 StylusButtonDown。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusButtonDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.StylusButtonDownEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.StylusButtonEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewStylusButtonDown>。</xref:System.Windows.UIElement3D.PreviewStylusButtonDown> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.UIElement3D.StylusButtonDownEvent>      -覆寫<xref:System.Windows.UIElement3D.OnStylusButtonDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnStylusButtonDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusButtonDownEvent
  id: StylusButtonDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusButtonDownEvent
  nameWithType: UIElement3D.StylusButtonDownEvent
  fullName: System.Windows.UIElement3D.StylusButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.StylusButtonDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 StylusButtonDownEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusButtonUp
  id: StylusButtonUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusButtonUp
  nameWithType: UIElement3D.StylusButtonUp
  fullName: System.Windows.UIElement3D.StylusButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於指標位於此元素上方且放開手寫筆按鈕。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName>附加這個類別中，事件，以便 StylusButtonUp 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> 附加至 StylusButtonUp 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 StylusButtonUp。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusButtonUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.StylusButtonUpEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.StylusButtonEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewStylusButtonUp>。</xref:System.Windows.UIElement3D.PreviewStylusButtonUp> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.UIElement3D.StylusButtonUpEvent>      -覆寫<xref:System.Windows.UIElement3D.OnStylusButtonUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnStylusButtonUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusButtonUpEvent
  id: StylusButtonUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusButtonUpEvent
  nameWithType: UIElement3D.StylusButtonUpEvent
  fullName: System.Windows.UIElement3D.StylusButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.StylusButtonUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 StylusButtonUpEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusDown
  id: StylusDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusDown
  nameWithType: UIElement3D.StylusDown
  fullName: System.Windows.UIElement3D.StylusDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當手寫筆在此元素上方且碰觸數位板時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName>附加這個類別中，事件，以便 StylusDown 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> 附加至 StylusDown 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 StylusDown。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.StylusDownEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.StylusDownEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewStylusDown>。</xref:System.Windows.UIElement3D.PreviewStylusDown> </xref:System.Windows.Input.StylusDownEventHandler> </xref:System.Windows.UIElement3D.StylusDownEvent>      -覆寫<xref:System.Windows.UIElement3D.OnStylusDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnStylusDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusDownEventHandler StylusDown;
    return:
      type: System.Windows.Input.StylusDownEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusDownEvent
  id: StylusDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusDownEvent
  nameWithType: UIElement3D.StylusDownEvent
  fullName: System.Windows.UIElement3D.StylusDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.StylusDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 StylusDownEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusEnter
  id: StylusEnter
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusEnter
  nameWithType: UIElement3D.StylusEnter
  fullName: System.Windows.UIElement3D.StylusEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "手寫筆進入此元素的邊界時發生。"
  remarks: "StylusEnter 是[路由傳送事件概觀](~/add/includes/ajax-current-ext-md.md)使用直接的事件處理路由策略。 直接路由的事件不會引發的路由。相反地，它們會在處理相同的項目所引發的位置。 不過，它們會啟用路由的事件的行為，例如事件觸發程序在樣式中的其他層面。       雖然 StylusEnter 會將手寫筆進入項目的界限追蹤，此事件更常值報告的<xref:System.Windows.UIElement3D.IsStylusOver%2A>屬性值已經從`false`至`true`這個項目上。</xref:System.Windows.UIElement3D.IsStylusOver%2A>       此事件會建立一個別名<xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName>附加這個類別中，事件，以便 StylusEnter 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> 附加至 StylusEnter 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 StylusEnter。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusEnter&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.StylusEnterEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -覆寫<xref:System.Windows.UIElement3D.OnStylusEnter%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnStylusEnter%2A> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.StylusEnterEvent>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusEnter;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusEnterEvent
  id: StylusEnterEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusEnterEvent
  nameWithType: UIElement3D.StylusEnterEvent
  fullName: System.Windows.UIElement3D.StylusEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.StylusEnter&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 StylusEnterEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusInAirMove
  id: StylusInAirMove
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusInAirMove
  nameWithType: UIElement3D.StylusInAirMove
  fullName: System.Windows.UIElement3D.StylusInAirMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "手寫筆移動的項目上，但沒有真正碰觸數位板時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName>附加這個類別中，事件，以便 StylusInAirMove 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> 附加至 StylusInAirMove 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 StylusInAirMove。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusInAirMove&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.StylusInAirMoveEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewStylusInAirMove>。</xref:System.Windows.UIElement3D.PreviewStylusInAirMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.StylusInAirMoveEvent>      -覆寫<xref:System.Windows.UIElement3D.OnStylusInAirMove%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnStylusInAirMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusInAirMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusInAirMoveEvent
  id: StylusInAirMoveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusInAirMoveEvent
  nameWithType: UIElement3D.StylusInAirMoveEvent
  fullName: System.Windows.UIElement3D.StylusInAirMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.StylusInAirMove&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 StylusInAirMoveEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusInRange
  id: StylusInRange
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusInRange
  nameWithType: UIElement3D.StylusInRange
  fullName: System.Windows.UIElement3D.StylusInRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "手寫筆靠近數位板偵測，此元素上方時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName>附加這個類別中，事件，以便 StylusInRange 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> 附加至 StylusInRange 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 StylusInRange。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusInRange&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.StylusInRangeEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewStylusInRange>。</xref:System.Windows.UIElement3D.PreviewStylusInRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.StylusInRangeEvent>      -覆寫<xref:System.Windows.UIElement3D.OnStylusInRange%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnStylusInRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusInRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusInRangeEvent
  id: StylusInRangeEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusInRangeEvent
  nameWithType: UIElement3D.StylusInRangeEvent
  fullName: System.Windows.UIElement3D.StylusInRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.StylusInRange&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 StylusInRangeEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusInRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusLeave
  id: StylusLeave
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusLeave
  nameWithType: UIElement3D.StylusLeave
  fullName: System.Windows.UIElement3D.StylusLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "手寫筆離開元素的邊界時發生。"
  remarks: "StylusLeave 是[路由傳送事件概觀](~/add/includes/ajax-current-ext-md.md)使用直接的事件處理路由策略。 直接路由的事件不會引發的路由。相反地，它們會在處理相同的項目所引發的位置。 不過，它們會啟用路由的事件的行為，例如事件觸發程序在樣式中的其他層面。       雖然 StylusLeave 會追蹤手寫筆離開元素的邊界時，此事件更常值報告的<xref:System.Windows.UIElement3D.IsStylusOver%2A>屬性值已經從`true`至`false`這個項目上。</xref:System.Windows.UIElement3D.IsStylusOver%2A>       此事件會建立一個別名<xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName>附加這個類別中，事件，以便 StylusLeave 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> 附加至 StylusLeave 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 StylusLeave。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusLeave&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.StylusLeaveEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -覆寫<xref:System.Windows.UIElement3D.OnStylusLeave%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnStylusLeave%2A> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.StylusLeaveEvent>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusLeave;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusLeaveEvent
  id: StylusLeaveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusLeaveEvent
  nameWithType: UIElement3D.StylusLeaveEvent
  fullName: System.Windows.UIElement3D.StylusLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.StylusLeave&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 StylusLeaveEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusMove
  id: StylusMove
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusMove
  nameWithType: UIElement3D.StylusMove
  fullName: System.Windows.UIElement3D.StylusMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素上方移動手寫筆時發生。 手寫筆必須移動才能引發此事件在數位板上。 否則， <xref href=&quot;System.Windows.UIElement3D.StylusInAirMove&quot;> </xref>會改為引發。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName>附加這個類別中，事件，以便 StylusMove 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> 附加至 StylusMove 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 StylusMove。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusMove&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.StylusMoveEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewStylusMove>。</xref:System.Windows.UIElement3D.PreviewStylusMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.StylusMoveEvent>      -覆寫<xref:System.Windows.UIElement3D.OnStylusMove%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnStylusMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusMoveEvent
  id: StylusMoveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusMoveEvent
  nameWithType: UIElement3D.StylusMoveEvent
  fullName: System.Windows.UIElement3D.StylusMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.StylusMove&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 StylusMoveEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusOutOfRange
  id: StylusOutOfRange
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusOutOfRange
  nameWithType: UIElement3D.StylusOutOfRange
  fullName: System.Windows.UIElement3D.StylusOutOfRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "手寫筆遠離數位板偵測，此元素上方時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName>附加這個類別中，事件，以便 StylusOutOfRange 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> 附加至 StylusOutOfRange 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 StylusOutOfRange。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusOutOfRange&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.StylusOutOfRangeEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewStylusOutOfRange>。</xref:System.Windows.UIElement3D.PreviewStylusOutOfRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.StylusOutOfRangeEvent>      -覆寫<xref:System.Windows.UIElement3D.OnStylusOutOfRange%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnStylusOutOfRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusOutOfRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusOutOfRangeEvent
  id: StylusOutOfRangeEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusOutOfRangeEvent
  nameWithType: UIElement3D.StylusOutOfRangeEvent
  fullName: System.Windows.UIElement3D.StylusOutOfRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.StylusOutOfRange&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 StylusOutOfRangeEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusSystemGesture
  id: StylusSystemGesture
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusSystemGesture
  nameWithType: UIElement3D.StylusSystemGesture
  fullName: System.Windows.UIElement3D.StylusSystemGesture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當使用者執行其中一種手寫筆筆勢時發生。"
  remarks: "手寫筆筆勢的相關資訊的詳細資訊，請參閱<xref:System.Windows.Input.SystemGesture>.</xref:System.Windows.Input.SystemGesture>       此事件會建立一個別名<xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName>附加這個類別中，事件，以便 StylusSystemGesture 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> 附加至 StylusSystemGesture 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 StylusSystemGesture。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusSystemGesture&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.StylusSystemGestureEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.StylusSystemGestureEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewStylusSystemGesture>。</xref:System.Windows.UIElement3D.PreviewStylusSystemGesture> </xref:System.Windows.Input.StylusSystemGestureEventHandler> </xref:System.Windows.UIElement3D.StylusSystemGestureEvent>      -覆寫<xref:System.Windows.UIElement3D.OnStylusSystemGesture%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnStylusSystemGesture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;
    return:
      type: System.Windows.Input.StylusSystemGestureEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusSystemGestureEvent
  id: StylusSystemGestureEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusSystemGestureEvent
  nameWithType: UIElement3D.StylusSystemGestureEvent
  fullName: System.Windows.UIElement3D.StylusSystemGestureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.StylusSystemGesture&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 StylusSystemGestureEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusUp
  id: StylusUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusUp
  nameWithType: UIElement3D.StylusUp
  fullName: System.Windows.UIElement3D.StylusUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "且使用者舉起手寫筆在數位板這個項目上方時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName>附加這個類別中，事件，以便 StylusUp 是部分類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> 附加至 StylusUp 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       .NET Framework 3.5 版中引進 StylusUp。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.StylusUpEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewStylusUp>。</xref:System.Windows.UIElement3D.PreviewStylusUp> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.StylusUpEvent>      -覆寫<xref:System.Windows.UIElement3D.OnStylusUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnStylusUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusUp;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusUpEvent
  id: StylusUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusUpEvent
  nameWithType: UIElement3D.StylusUpEvent
  fullName: System.Windows.UIElement3D.StylusUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.StylusUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 StylusUpEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TextInput
  id: TextInput
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TextInput
  nameWithType: UIElement3D.TextInput
  fullName: System.Windows.UIElement3D.TextInput
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "這個項目與裝置無關的方式取得文字時發生。"
  remarks: "輸入事件可讓元件或應用程式與裝置無關的方式接聽文字輸入。 鍵盤輸入，但是語音、 手寫的主要方法，而且其他輸入的裝置也會遇到輸入。       因為組合 — 在預設鍵盤或輸入的法編輯器透過 — 多個按鍵事件可能會引發一個文字輸入的事件。       此事件會建立一個別名<xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName>附加這個類別中，事件，以便輸入屬於類別的成員 清單時<xref:System.Windows.UIElement3D>繼承基底的項目。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> 附加至輸入事件的事件處理常式附加至基礎<xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName>       輸入.NET Framework 3.5 版中引進。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_TextInput&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.TextInputEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.TextCompositionEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewTextInput>。</xref:System.Windows.UIElement3D.PreviewTextInput> </xref:System.Windows.Input.TextCompositionEventHandler> </xref:System.Windows.UIElement3D.TextInputEvent>      -覆寫<xref:System.Windows.UIElement3D.OnTextInput%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnTextInput%2A>"
  syntax:
    content: public event System.Windows.Input.TextCompositionEventHandler TextInput;
    return:
      type: System.Windows.Input.TextCompositionEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TextInputEvent
  id: TextInputEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TextInputEvent
  nameWithType: UIElement3D.TextInputEvent
  fullName: System.Windows.UIElement3D.TextInputEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.TextInput&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>       .NET Framework 3.5 版中引進 TextInputEvent。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TextInputEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchDown
  id: TouchDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchDown
  nameWithType: UIElement3D.TouchDown
  fullName: System.Windows.UIElement3D.TouchDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於手指接觸到螢幕，此元素上方時。"
  remarks: "根據預設，<xref:System.Windows.UIElement3D.PreviewTouchDown>而且 TouchDown 事件手指接觸到螢幕，並移動之前不會發生。</xref:System.Windows.UIElement3D.PreviewTouchDown> 手指在螢幕上按住它不移動的方式會造成按下按住不放的<xref:System.Windows.Input.Stylus>.</xref:System.Windows.Input.Stylus>行為 按住行為相當於按一下滑鼠右鍵。       若要讓<xref:System.Windows.UIElement3D.PreviewTouchDown>TouchDown 事件發生手指接觸到螢幕，例如設定<xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName>附加屬性`false`這個項目的。</xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> </xref:System.Windows.UIElement3D.PreviewTouchDown>      <a name=&quot;routedEventInfo_TouchDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.TouchDownEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.EventHandler%601>的型別<xref:System.Windows.Input.TouchEventArgs>。 |     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewTouchDown>。</xref:System.Windows.UIElement3D.PreviewTouchDown> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement3D.TouchDownEvent>      -覆寫<xref:System.Windows.UIElement3D.OnTouchDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnTouchDown%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchDown;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchDownEvent
  id: TouchDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchDownEvent
  nameWithType: UIElement3D.TouchDownEvent
  fullName: System.Windows.UIElement3D.TouchDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.TouchDown&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchEnter
  id: TouchEnter
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchEnter
  nameWithType: UIElement3D.TouchEnter
  fullName: System.Windows.UIElement3D.TouchEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於從觸控式移動到這個項目之範圍內的外部。"
  remarks: "一律引發這個事件，或有觸控式裝置擷取至這個項目。      <a name=&quot;routedEventInfo_TouchEnter&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.TouchEnterEvent>|  |路由策略 |直接 |  |委派 |<xref:System.EventHandler%601>的型別<xref:System.Windows.Input.TouchEventArgs>。 |     -覆寫<xref:System.Windows.UIElement3D.OnTouchEnter%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnTouchEnter%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement3D.TouchEnterEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchEnter;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchEnterEvent
  id: TouchEnterEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchEnterEvent
  nameWithType: UIElement3D.TouchEnterEvent
  fullName: System.Windows.UIElement3D.TouchEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.TouchEnter&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchesCaptured
  id: TouchesCaptured
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchesCaptured
  nameWithType: UIElement3D.TouchesCaptured
  fullName: System.Windows.UIElement3D.TouchesCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得所有觸控裝置擷取至這個項目。"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCaptured { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "列舉<xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref>物件擷取至這個項目。"
  overload: System.Windows.UIElement3D.TouchesCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchesCapturedWithin
  id: TouchesCapturedWithin
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchesCapturedWithin
  nameWithType: UIElement3D.TouchesCapturedWithin
  fullName: System.Windows.UIElement3D.TouchesCapturedWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "其視覺化樹狀中取得所有擷取至這個項目的觸控式裝置或任何子項目。"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCapturedWithin { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "列舉<xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref>物件擷取至這個項目或其視覺化樹狀中的任何子項目。"
  overload: System.Windows.UIElement3D.TouchesCapturedWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchesDirectlyOver
  id: TouchesDirectlyOver
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchesDirectlyOver
  nameWithType: UIElement3D.TouchesDirectlyOver
  fullName: System.Windows.UIElement3D.TouchesDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得所有屬於此元素上方觸控式裝置。"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesDirectlyOver { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "列舉<xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref>此元素上方的物件。"
  overload: System.Windows.UIElement3D.TouchesDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchesOver
  id: TouchesOver
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchesOver
  nameWithType: UIElement3D.TouchesOver
  fullName: System.Windows.UIElement3D.TouchesOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "其視覺化樹狀中取得所有屬於此元素上方觸控式裝置或任何子項目。"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesOver { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "列舉<xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref>物件在這個項目或其視覺化樹狀中的任何子項目。"
  overload: System.Windows.UIElement3D.TouchesOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchLeave
  id: TouchLeave
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchLeave
  nameWithType: UIElement3D.TouchLeave
  fullName: System.Windows.UIElement3D.TouchLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於從觸控式移動到這個項目之範圍外的內部。"
  remarks: "<a name=&quot;routedEventInfo_TouchLeave&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.TouchLeaveEvent>|  |路由策略 |直接 |  |委派 |<xref:System.EventHandler%601>的型別<xref:System.Windows.Input.TouchEventArgs>。 |     -覆寫<xref:System.Windows.UIElement3D.OnTouchLeave%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnTouchLeave%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement3D.TouchLeaveEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchLeave;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchLeaveEvent
  id: TouchLeaveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchLeaveEvent
  nameWithType: UIElement3D.TouchLeaveEvent
  fullName: System.Windows.UIElement3D.TouchLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.TouchLeave&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchMove
  id: TouchMove
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchMove
  nameWithType: UIElement3D.TouchMove
  fullName: System.Windows.UIElement3D.TouchMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於手指移動螢幕上，這個項目上方時發生。"
  remarks: "<a name=&quot;routedEventInfo_TouchMove&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.TouchMoveEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.EventHandler%601>的型別<xref:System.Windows.Input.TouchEventArgs>。 |     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewTouchMove>。</xref:System.Windows.UIElement3D.PreviewTouchMove> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement3D.TouchMoveEvent>      -覆寫<xref:System.Windows.UIElement3D.OnTouchMove%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnTouchMove%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchMove;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchMoveEvent
  id: TouchMoveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchMoveEvent
  nameWithType: UIElement3D.TouchMoveEvent
  fullName: System.Windows.UIElement3D.TouchMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.TouchMove&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchUp
  id: TouchUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchUp
  nameWithType: UIElement3D.TouchUp
  fullName: System.Windows.UIElement3D.TouchUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "這個項目上方時，引發手指不在畫面上時，就會發生。"
  remarks: "<a name=&quot;routedEventInfo_TouchUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.TouchUpEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.EventHandler%601>的型別<xref:System.Windows.Input.TouchEventArgs>。 |     -對應通道的事件為<xref:System.Windows.UIElement3D.PreviewTouchUp>。</xref:System.Windows.UIElement3D.PreviewTouchUp> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement3D.TouchUpEvent>      -覆寫<xref:System.Windows.UIElement3D.OnTouchUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement3D.OnTouchUp%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchUp;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchUpEvent
  id: TouchUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchUpEvent
  nameWithType: UIElement3D.TouchUpEvent
  fullName: System.Windows.UIElement3D.TouchUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement3D.TouchUp&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.Visibility
  id: Visibility
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: Visibility
  nameWithType: UIElement3D.Visibility
  fullName: System.Windows.UIElement3D.Visibility
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]這個項目的可見性。"
  remarks: "設定這個屬性會影響值<xref:System.Windows.UIElement3D.IsVisible%2A>，其接著可能會引發<xref:System.Windows.UIElement3D.IsVisibleChanged>事件。</xref:System.Windows.UIElement3D.IsVisibleChanged> </xref:System.Windows.UIElement3D.IsVisible%2A> 不過，<xref:System.Windows.UIElement3D.IsVisible%2A>有其他因素，包括其執行個體，其中包含它的父代的可見性設定的影響</xref:System.Windows.UIElement3D.IsVisible%2A>       項目可見性，不是<xref:System.Windows.Visibility>不會參與輸入的事件 （或命令），並不會報告在點擊測試。</xref:System.Windows.Visibility>       .NET Framework 3.5 版中引進可見性。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_Visibility&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement3D.VisibilityProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement3D.VisibilityProperty>"
  syntax:
    content: public System.Windows.Visibility Visibility { get; set; }
    return:
      type: System.Windows.Visibility
      description: "列舉值。 預設值是<xref href=&quot;System.Windows.Visibility&quot;> </xref>。"
  overload: System.Windows.UIElement3D.Visibility*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.VisibilityProperty
  id: VisibilityProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: VisibilityProperty
  nameWithType: UIElement3D.VisibilityProperty
  fullName: System.Windows.UIElement3D.VisibilityProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement3D.Visibility*>相依性屬性。</xref:System.Windows.UIElement3D.Visibility*>"
  remarks: ".NET Framework 3.5 版中引進 VisibilityProperty。  如需詳細資訊，請參閱[版本和相依性](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty VisibilityProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Media.Media3D.Visual3D
  isExternal: false
  name: System.Windows.Media.Media3D.Visual3D
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.UIElement3D.#ctor
  parent: System.Windows.UIElement3D
  isExternal: false
  name: UIElement3D()
  nameWithType: UIElement3D.UIElement3D()
  fullName: System.Windows.UIElement3D.UIElement3D()
- uid: System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AddHandler(RoutedEvent,Delegate)
  nameWithType: UIElement3D.AddHandler(RoutedEvent,Delegate)
  fullName: System.Windows.UIElement3D.AddHandler(RoutedEvent,Delegate)
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AddHandler(RoutedEvent,Delegate,Boolean)
  nameWithType: UIElement3D.AddHandler(RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.UIElement3D.AddHandler(RoutedEvent,Delegate,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.UIElement3D.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AddToEventRoute(EventRoute,RoutedEventArgs)
  nameWithType: UIElement3D.AddToEventRoute(EventRoute,RoutedEventArgs)
  fullName: System.Windows.UIElement3D.AddToEventRoute(EventRoute,RoutedEventArgs)
- uid: System.Windows.EventRoute
  parent: System.Windows
  isExternal: false
  name: EventRoute
  nameWithType: EventRoute
  fullName: System.Windows.EventRoute
- uid: System.Windows.RoutedEventArgs
  parent: System.Windows
  isExternal: false
  name: RoutedEventArgs
  nameWithType: RoutedEventArgs
  fullName: System.Windows.RoutedEventArgs
- uid: System.Windows.UIElement3D.AllowDrop
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AllowDrop
  nameWithType: UIElement3D.AllowDrop
  fullName: System.Windows.UIElement3D.AllowDrop
- uid: System.Windows.UIElement3D.AllowDropProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AllowDropProperty
  nameWithType: UIElement3D.AllowDropProperty
  fullName: System.Windows.UIElement3D.AllowDropProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.UIElement3D.AreAnyTouchesCaptured
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesCaptured
  nameWithType: UIElement3D.AreAnyTouchesCaptured
  fullName: System.Windows.UIElement3D.AreAnyTouchesCaptured
- uid: System.Windows.UIElement3D.AreAnyTouchesCapturedProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesCapturedProperty
  nameWithType: UIElement3D.AreAnyTouchesCapturedProperty
  fullName: System.Windows.UIElement3D.AreAnyTouchesCapturedProperty
- uid: System.Windows.UIElement3D.AreAnyTouchesCapturedWithin
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesCapturedWithin
  nameWithType: UIElement3D.AreAnyTouchesCapturedWithin
  fullName: System.Windows.UIElement3D.AreAnyTouchesCapturedWithin
- uid: System.Windows.UIElement3D.AreAnyTouchesCapturedWithinProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesCapturedWithinProperty
  nameWithType: UIElement3D.AreAnyTouchesCapturedWithinProperty
  fullName: System.Windows.UIElement3D.AreAnyTouchesCapturedWithinProperty
- uid: System.Windows.UIElement3D.AreAnyTouchesDirectlyOver
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesDirectlyOver
  nameWithType: UIElement3D.AreAnyTouchesDirectlyOver
  fullName: System.Windows.UIElement3D.AreAnyTouchesDirectlyOver
- uid: System.Windows.UIElement3D.AreAnyTouchesDirectlyOverProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesDirectlyOverProperty
  nameWithType: UIElement3D.AreAnyTouchesDirectlyOverProperty
  fullName: System.Windows.UIElement3D.AreAnyTouchesDirectlyOverProperty
- uid: System.Windows.UIElement3D.AreAnyTouchesOver
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesOver
  nameWithType: UIElement3D.AreAnyTouchesOver
  fullName: System.Windows.UIElement3D.AreAnyTouchesOver
- uid: System.Windows.UIElement3D.AreAnyTouchesOverProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesOverProperty
  nameWithType: UIElement3D.AreAnyTouchesOverProperty
  fullName: System.Windows.UIElement3D.AreAnyTouchesOverProperty
- uid: System.Windows.UIElement3D.CaptureMouse
  parent: System.Windows.UIElement3D
  isExternal: false
  name: CaptureMouse()
  nameWithType: UIElement3D.CaptureMouse()
  fullName: System.Windows.UIElement3D.CaptureMouse()
- uid: System.Windows.UIElement3D.CaptureStylus
  parent: System.Windows.UIElement3D
  isExternal: false
  name: CaptureStylus()
  nameWithType: UIElement3D.CaptureStylus()
  fullName: System.Windows.UIElement3D.CaptureStylus()
- uid: System.Windows.UIElement3D.CaptureTouch(System.Windows.Input.TouchDevice)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: CaptureTouch(TouchDevice)
  nameWithType: UIElement3D.CaptureTouch(TouchDevice)
  fullName: System.Windows.UIElement3D.CaptureTouch(TouchDevice)
- uid: System.Windows.Input.TouchDevice
  parent: System.Windows.Input
  isExternal: false
  name: TouchDevice
  nameWithType: TouchDevice
  fullName: System.Windows.Input.TouchDevice
- uid: System.Windows.UIElement3D.CommandBindings
  parent: System.Windows.UIElement3D
  isExternal: false
  name: CommandBindings
  nameWithType: UIElement3D.CommandBindings
  fullName: System.Windows.UIElement3D.CommandBindings
- uid: System.Windows.Input.CommandBindingCollection
  parent: System.Windows.Input
  isExternal: false
  name: CommandBindingCollection
  nameWithType: CommandBindingCollection
  fullName: System.Windows.Input.CommandBindingCollection
- uid: System.Windows.UIElement3D.DragEnter
  parent: System.Windows.UIElement3D
  isExternal: false
  name: DragEnter
  nameWithType: UIElement3D.DragEnter
  fullName: System.Windows.UIElement3D.DragEnter
- uid: System.Windows.DragEventHandler
  parent: System.Windows
  isExternal: false
  name: DragEventHandler
  nameWithType: DragEventHandler
  fullName: System.Windows.DragEventHandler
- uid: System.Windows.UIElement3D.DragEnterEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: DragEnterEvent
  nameWithType: UIElement3D.DragEnterEvent
  fullName: System.Windows.UIElement3D.DragEnterEvent
- uid: System.Windows.UIElement3D.DragLeave
  parent: System.Windows.UIElement3D
  isExternal: false
  name: DragLeave
  nameWithType: UIElement3D.DragLeave
  fullName: System.Windows.UIElement3D.DragLeave
- uid: System.Windows.UIElement3D.DragLeaveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: DragLeaveEvent
  nameWithType: UIElement3D.DragLeaveEvent
  fullName: System.Windows.UIElement3D.DragLeaveEvent
- uid: System.Windows.UIElement3D.DragOver
  parent: System.Windows.UIElement3D
  isExternal: false
  name: DragOver
  nameWithType: UIElement3D.DragOver
  fullName: System.Windows.UIElement3D.DragOver
- uid: System.Windows.UIElement3D.DragOverEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: DragOverEvent
  nameWithType: UIElement3D.DragOverEvent
  fullName: System.Windows.UIElement3D.DragOverEvent
- uid: System.Windows.UIElement3D.Drop
  parent: System.Windows.UIElement3D
  isExternal: false
  name: Drop
  nameWithType: UIElement3D.Drop
  fullName: System.Windows.UIElement3D.Drop
- uid: System.Windows.UIElement3D.DropEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: DropEvent
  nameWithType: UIElement3D.DropEvent
  fullName: System.Windows.UIElement3D.DropEvent
- uid: System.Windows.UIElement3D.Focus
  parent: System.Windows.UIElement3D
  isExternal: false
  name: Focus()
  nameWithType: UIElement3D.Focus()
  fullName: System.Windows.UIElement3D.Focus()
- uid: System.Windows.UIElement3D.Focusable
  parent: System.Windows.UIElement3D
  isExternal: false
  name: Focusable
  nameWithType: UIElement3D.Focusable
  fullName: System.Windows.UIElement3D.Focusable
- uid: System.Windows.UIElement3D.FocusableChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: FocusableChanged
  nameWithType: UIElement3D.FocusableChanged
  fullName: System.Windows.UIElement3D.FocusableChanged
- uid: System.Windows.DependencyPropertyChangedEventHandler
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventHandler
  nameWithType: DependencyPropertyChangedEventHandler
  fullName: System.Windows.DependencyPropertyChangedEventHandler
- uid: System.Windows.UIElement3D.FocusableProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: FocusableProperty
  nameWithType: UIElement3D.FocusableProperty
  fullName: System.Windows.UIElement3D.FocusableProperty
- uid: System.Windows.UIElement3D.GetUIParentCore
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GetUIParentCore()
  nameWithType: UIElement3D.GetUIParentCore()
  fullName: System.Windows.UIElement3D.GetUIParentCore()
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.UIElement3D.GiveFeedback
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GiveFeedback
  nameWithType: UIElement3D.GiveFeedback
  fullName: System.Windows.UIElement3D.GiveFeedback
- uid: System.Windows.GiveFeedbackEventHandler
  parent: System.Windows
  isExternal: false
  name: GiveFeedbackEventHandler
  nameWithType: GiveFeedbackEventHandler
  fullName: System.Windows.GiveFeedbackEventHandler
- uid: System.Windows.UIElement3D.GiveFeedbackEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GiveFeedbackEvent
  nameWithType: UIElement3D.GiveFeedbackEvent
  fullName: System.Windows.UIElement3D.GiveFeedbackEvent
- uid: System.Windows.UIElement3D.GotFocus
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GotFocus
  nameWithType: UIElement3D.GotFocus
  fullName: System.Windows.UIElement3D.GotFocus
- uid: System.Windows.RoutedEventHandler
  parent: System.Windows
  isExternal: false
  name: RoutedEventHandler
  nameWithType: RoutedEventHandler
  fullName: System.Windows.RoutedEventHandler
- uid: System.Windows.UIElement3D.GotFocusEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GotFocusEvent
  nameWithType: UIElement3D.GotFocusEvent
  fullName: System.Windows.UIElement3D.GotFocusEvent
- uid: System.Windows.UIElement3D.GotKeyboardFocus
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GotKeyboardFocus
  nameWithType: UIElement3D.GotKeyboardFocus
  fullName: System.Windows.UIElement3D.GotKeyboardFocus
- uid: System.Windows.Input.KeyboardFocusChangedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: KeyboardFocusChangedEventHandler
  nameWithType: KeyboardFocusChangedEventHandler
  fullName: System.Windows.Input.KeyboardFocusChangedEventHandler
- uid: System.Windows.UIElement3D.GotKeyboardFocusEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GotKeyboardFocusEvent
  nameWithType: UIElement3D.GotKeyboardFocusEvent
  fullName: System.Windows.UIElement3D.GotKeyboardFocusEvent
- uid: System.Windows.UIElement3D.GotMouseCapture
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GotMouseCapture
  nameWithType: UIElement3D.GotMouseCapture
  fullName: System.Windows.UIElement3D.GotMouseCapture
- uid: System.Windows.Input.MouseEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseEventHandler
  nameWithType: MouseEventHandler
  fullName: System.Windows.Input.MouseEventHandler
- uid: System.Windows.UIElement3D.GotMouseCaptureEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GotMouseCaptureEvent
  nameWithType: UIElement3D.GotMouseCaptureEvent
  fullName: System.Windows.UIElement3D.GotMouseCaptureEvent
- uid: System.Windows.UIElement3D.GotStylusCapture
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GotStylusCapture
  nameWithType: UIElement3D.GotStylusCapture
  fullName: System.Windows.UIElement3D.GotStylusCapture
- uid: System.Windows.Input.StylusEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusEventHandler
  nameWithType: StylusEventHandler
  fullName: System.Windows.Input.StylusEventHandler
- uid: System.Windows.UIElement3D.GotStylusCaptureEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GotStylusCaptureEvent
  nameWithType: UIElement3D.GotStylusCaptureEvent
  fullName: System.Windows.UIElement3D.GotStylusCaptureEvent
- uid: System.Windows.UIElement3D.GotTouchCapture
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GotTouchCapture
  nameWithType: UIElement3D.GotTouchCapture
  fullName: System.Windows.UIElement3D.GotTouchCapture
- uid: System.EventHandler{System.Windows.Input.TouchEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<TouchEventArgs>
  nameWithType: EventHandler<TouchEventArgs>
  fullName: System.EventHandler<System.Windows.Input.TouchEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.TouchEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.TouchEventArgs
    name: TouchEventArgs
    nameWithType: TouchEventArgs
    fullName: TouchEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement3D.GotTouchCaptureEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GotTouchCaptureEvent
  nameWithType: UIElement3D.GotTouchCaptureEvent
  fullName: System.Windows.UIElement3D.GotTouchCaptureEvent
- uid: System.Windows.UIElement3D.InputBindings
  parent: System.Windows.UIElement3D
  isExternal: false
  name: InputBindings
  nameWithType: UIElement3D.InputBindings
  fullName: System.Windows.UIElement3D.InputBindings
- uid: System.Windows.Input.InputBindingCollection
  parent: System.Windows.Input
  isExternal: false
  name: InputBindingCollection
  nameWithType: InputBindingCollection
  fullName: System.Windows.Input.InputBindingCollection
- uid: System.Windows.UIElement3D.InvalidateModel
  parent: System.Windows.UIElement3D
  isExternal: false
  name: InvalidateModel()
  nameWithType: UIElement3D.InvalidateModel()
  fullName: System.Windows.UIElement3D.InvalidateModel()
- uid: System.Windows.UIElement3D.IsEnabled
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsEnabled
  nameWithType: UIElement3D.IsEnabled
  fullName: System.Windows.UIElement3D.IsEnabled
- uid: System.Windows.UIElement3D.IsEnabledChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsEnabledChanged
  nameWithType: UIElement3D.IsEnabledChanged
  fullName: System.Windows.UIElement3D.IsEnabledChanged
- uid: System.Windows.UIElement3D.IsEnabledCore
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsEnabledCore
  nameWithType: UIElement3D.IsEnabledCore
  fullName: System.Windows.UIElement3D.IsEnabledCore
- uid: System.Windows.UIElement3D.IsEnabledProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsEnabledProperty
  nameWithType: UIElement3D.IsEnabledProperty
  fullName: System.Windows.UIElement3D.IsEnabledProperty
- uid: System.Windows.UIElement3D.IsFocused
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsFocused
  nameWithType: UIElement3D.IsFocused
  fullName: System.Windows.UIElement3D.IsFocused
- uid: System.Windows.UIElement3D.IsFocusedProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsFocusedProperty
  nameWithType: UIElement3D.IsFocusedProperty
  fullName: System.Windows.UIElement3D.IsFocusedProperty
- uid: System.Windows.UIElement3D.IsHitTestVisible
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsHitTestVisible
  nameWithType: UIElement3D.IsHitTestVisible
  fullName: System.Windows.UIElement3D.IsHitTestVisible
- uid: System.Windows.UIElement3D.IsHitTestVisibleChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsHitTestVisibleChanged
  nameWithType: UIElement3D.IsHitTestVisibleChanged
  fullName: System.Windows.UIElement3D.IsHitTestVisibleChanged
- uid: System.Windows.UIElement3D.IsHitTestVisibleProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsHitTestVisibleProperty
  nameWithType: UIElement3D.IsHitTestVisibleProperty
  fullName: System.Windows.UIElement3D.IsHitTestVisibleProperty
- uid: System.Windows.UIElement3D.IsInputMethodEnabled
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsInputMethodEnabled
  nameWithType: UIElement3D.IsInputMethodEnabled
  fullName: System.Windows.UIElement3D.IsInputMethodEnabled
- uid: System.Windows.UIElement3D.IsKeyboardFocused
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsKeyboardFocused
  nameWithType: UIElement3D.IsKeyboardFocused
  fullName: System.Windows.UIElement3D.IsKeyboardFocused
- uid: System.Windows.UIElement3D.IsKeyboardFocusedChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsKeyboardFocusedChanged
  nameWithType: UIElement3D.IsKeyboardFocusedChanged
  fullName: System.Windows.UIElement3D.IsKeyboardFocusedChanged
- uid: System.Windows.UIElement3D.IsKeyboardFocusedProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsKeyboardFocusedProperty
  nameWithType: UIElement3D.IsKeyboardFocusedProperty
  fullName: System.Windows.UIElement3D.IsKeyboardFocusedProperty
- uid: System.Windows.UIElement3D.IsKeyboardFocusWithin
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsKeyboardFocusWithin
  nameWithType: UIElement3D.IsKeyboardFocusWithin
  fullName: System.Windows.UIElement3D.IsKeyboardFocusWithin
- uid: System.Windows.UIElement3D.IsKeyboardFocusWithinChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsKeyboardFocusWithinChanged
  nameWithType: UIElement3D.IsKeyboardFocusWithinChanged
  fullName: System.Windows.UIElement3D.IsKeyboardFocusWithinChanged
- uid: System.Windows.UIElement3D.IsKeyboardFocusWithinProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsKeyboardFocusWithinProperty
  nameWithType: UIElement3D.IsKeyboardFocusWithinProperty
  fullName: System.Windows.UIElement3D.IsKeyboardFocusWithinProperty
- uid: System.Windows.UIElement3D.IsMouseCaptured
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseCaptured
  nameWithType: UIElement3D.IsMouseCaptured
  fullName: System.Windows.UIElement3D.IsMouseCaptured
- uid: System.Windows.UIElement3D.IsMouseCapturedChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseCapturedChanged
  nameWithType: UIElement3D.IsMouseCapturedChanged
  fullName: System.Windows.UIElement3D.IsMouseCapturedChanged
- uid: System.Windows.UIElement3D.IsMouseCapturedProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseCapturedProperty
  nameWithType: UIElement3D.IsMouseCapturedProperty
  fullName: System.Windows.UIElement3D.IsMouseCapturedProperty
- uid: System.Windows.UIElement3D.IsMouseCaptureWithin
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseCaptureWithin
  nameWithType: UIElement3D.IsMouseCaptureWithin
  fullName: System.Windows.UIElement3D.IsMouseCaptureWithin
- uid: System.Windows.UIElement3D.IsMouseCaptureWithinChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseCaptureWithinChanged
  nameWithType: UIElement3D.IsMouseCaptureWithinChanged
  fullName: System.Windows.UIElement3D.IsMouseCaptureWithinChanged
- uid: System.Windows.UIElement3D.IsMouseCaptureWithinProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseCaptureWithinProperty
  nameWithType: UIElement3D.IsMouseCaptureWithinProperty
  fullName: System.Windows.UIElement3D.IsMouseCaptureWithinProperty
- uid: System.Windows.UIElement3D.IsMouseDirectlyOver
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseDirectlyOver
  nameWithType: UIElement3D.IsMouseDirectlyOver
  fullName: System.Windows.UIElement3D.IsMouseDirectlyOver
- uid: System.Windows.UIElement3D.IsMouseDirectlyOverChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseDirectlyOverChanged
  nameWithType: UIElement3D.IsMouseDirectlyOverChanged
  fullName: System.Windows.UIElement3D.IsMouseDirectlyOverChanged
- uid: System.Windows.UIElement3D.IsMouseDirectlyOverProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseDirectlyOverProperty
  nameWithType: UIElement3D.IsMouseDirectlyOverProperty
  fullName: System.Windows.UIElement3D.IsMouseDirectlyOverProperty
- uid: System.Windows.UIElement3D.IsMouseOver
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseOver
  nameWithType: UIElement3D.IsMouseOver
  fullName: System.Windows.UIElement3D.IsMouseOver
- uid: System.Windows.UIElement3D.IsMouseOverProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseOverProperty
  nameWithType: UIElement3D.IsMouseOverProperty
  fullName: System.Windows.UIElement3D.IsMouseOverProperty
- uid: System.Windows.UIElement3D.IsStylusCaptured
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusCaptured
  nameWithType: UIElement3D.IsStylusCaptured
  fullName: System.Windows.UIElement3D.IsStylusCaptured
- uid: System.Windows.UIElement3D.IsStylusCapturedChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusCapturedChanged
  nameWithType: UIElement3D.IsStylusCapturedChanged
  fullName: System.Windows.UIElement3D.IsStylusCapturedChanged
- uid: System.Windows.UIElement3D.IsStylusCapturedProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusCapturedProperty
  nameWithType: UIElement3D.IsStylusCapturedProperty
  fullName: System.Windows.UIElement3D.IsStylusCapturedProperty
- uid: System.Windows.UIElement3D.IsStylusCaptureWithin
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusCaptureWithin
  nameWithType: UIElement3D.IsStylusCaptureWithin
  fullName: System.Windows.UIElement3D.IsStylusCaptureWithin
- uid: System.Windows.UIElement3D.IsStylusCaptureWithinChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusCaptureWithinChanged
  nameWithType: UIElement3D.IsStylusCaptureWithinChanged
  fullName: System.Windows.UIElement3D.IsStylusCaptureWithinChanged
- uid: System.Windows.UIElement3D.IsStylusCaptureWithinProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusCaptureWithinProperty
  nameWithType: UIElement3D.IsStylusCaptureWithinProperty
  fullName: System.Windows.UIElement3D.IsStylusCaptureWithinProperty
- uid: System.Windows.UIElement3D.IsStylusDirectlyOver
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusDirectlyOver
  nameWithType: UIElement3D.IsStylusDirectlyOver
  fullName: System.Windows.UIElement3D.IsStylusDirectlyOver
- uid: System.Windows.UIElement3D.IsStylusDirectlyOverChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusDirectlyOverChanged
  nameWithType: UIElement3D.IsStylusDirectlyOverChanged
  fullName: System.Windows.UIElement3D.IsStylusDirectlyOverChanged
- uid: System.Windows.UIElement3D.IsStylusDirectlyOverProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusDirectlyOverProperty
  nameWithType: UIElement3D.IsStylusDirectlyOverProperty
  fullName: System.Windows.UIElement3D.IsStylusDirectlyOverProperty
- uid: System.Windows.UIElement3D.IsStylusOver
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusOver
  nameWithType: UIElement3D.IsStylusOver
  fullName: System.Windows.UIElement3D.IsStylusOver
- uid: System.Windows.UIElement3D.IsStylusOverProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusOverProperty
  nameWithType: UIElement3D.IsStylusOverProperty
  fullName: System.Windows.UIElement3D.IsStylusOverProperty
- uid: System.Windows.UIElement3D.IsVisible
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsVisible
  nameWithType: UIElement3D.IsVisible
  fullName: System.Windows.UIElement3D.IsVisible
- uid: System.Windows.UIElement3D.IsVisibleChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsVisibleChanged
  nameWithType: UIElement3D.IsVisibleChanged
  fullName: System.Windows.UIElement3D.IsVisibleChanged
- uid: System.Windows.UIElement3D.IsVisibleProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsVisibleProperty
  nameWithType: UIElement3D.IsVisibleProperty
  fullName: System.Windows.UIElement3D.IsVisibleProperty
- uid: System.Windows.UIElement3D.KeyDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: KeyDown
  nameWithType: UIElement3D.KeyDown
  fullName: System.Windows.UIElement3D.KeyDown
- uid: System.Windows.Input.KeyEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: KeyEventHandler
  nameWithType: KeyEventHandler
  fullName: System.Windows.Input.KeyEventHandler
- uid: System.Windows.UIElement3D.KeyDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: KeyDownEvent
  nameWithType: UIElement3D.KeyDownEvent
  fullName: System.Windows.UIElement3D.KeyDownEvent
- uid: System.Windows.UIElement3D.KeyUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: KeyUp
  nameWithType: UIElement3D.KeyUp
  fullName: System.Windows.UIElement3D.KeyUp
- uid: System.Windows.UIElement3D.KeyUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: KeyUpEvent
  nameWithType: UIElement3D.KeyUpEvent
  fullName: System.Windows.UIElement3D.KeyUpEvent
- uid: System.Windows.UIElement3D.LostFocus
  parent: System.Windows.UIElement3D
  isExternal: false
  name: LostFocus
  nameWithType: UIElement3D.LostFocus
  fullName: System.Windows.UIElement3D.LostFocus
- uid: System.Windows.UIElement3D.LostFocusEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: LostFocusEvent
  nameWithType: UIElement3D.LostFocusEvent
  fullName: System.Windows.UIElement3D.LostFocusEvent
- uid: System.Windows.UIElement3D.LostKeyboardFocus
  parent: System.Windows.UIElement3D
  isExternal: false
  name: LostKeyboardFocus
  nameWithType: UIElement3D.LostKeyboardFocus
  fullName: System.Windows.UIElement3D.LostKeyboardFocus
- uid: System.Windows.UIElement3D.LostKeyboardFocusEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: LostKeyboardFocusEvent
  nameWithType: UIElement3D.LostKeyboardFocusEvent
  fullName: System.Windows.UIElement3D.LostKeyboardFocusEvent
- uid: System.Windows.UIElement3D.LostMouseCapture
  parent: System.Windows.UIElement3D
  isExternal: false
  name: LostMouseCapture
  nameWithType: UIElement3D.LostMouseCapture
  fullName: System.Windows.UIElement3D.LostMouseCapture
- uid: System.Windows.UIElement3D.LostMouseCaptureEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: LostMouseCaptureEvent
  nameWithType: UIElement3D.LostMouseCaptureEvent
  fullName: System.Windows.UIElement3D.LostMouseCaptureEvent
- uid: System.Windows.UIElement3D.LostStylusCapture
  parent: System.Windows.UIElement3D
  isExternal: false
  name: LostStylusCapture
  nameWithType: UIElement3D.LostStylusCapture
  fullName: System.Windows.UIElement3D.LostStylusCapture
- uid: System.Windows.UIElement3D.LostStylusCaptureEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: LostStylusCaptureEvent
  nameWithType: UIElement3D.LostStylusCaptureEvent
  fullName: System.Windows.UIElement3D.LostStylusCaptureEvent
- uid: System.Windows.UIElement3D.LostTouchCapture
  parent: System.Windows.UIElement3D
  isExternal: false
  name: LostTouchCapture
  nameWithType: UIElement3D.LostTouchCapture
  fullName: System.Windows.UIElement3D.LostTouchCapture
- uid: System.Windows.UIElement3D.LostTouchCaptureEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: LostTouchCaptureEvent
  nameWithType: UIElement3D.LostTouchCaptureEvent
  fullName: System.Windows.UIElement3D.LostTouchCaptureEvent
- uid: System.Windows.UIElement3D.MouseDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseDown
  nameWithType: UIElement3D.MouseDown
  fullName: System.Windows.UIElement3D.MouseDown
- uid: System.Windows.Input.MouseButtonEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseButtonEventHandler
  nameWithType: MouseButtonEventHandler
  fullName: System.Windows.Input.MouseButtonEventHandler
- uid: System.Windows.UIElement3D.MouseDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseDownEvent
  nameWithType: UIElement3D.MouseDownEvent
  fullName: System.Windows.UIElement3D.MouseDownEvent
- uid: System.Windows.UIElement3D.MouseEnter
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseEnter
  nameWithType: UIElement3D.MouseEnter
  fullName: System.Windows.UIElement3D.MouseEnter
- uid: System.Windows.UIElement3D.MouseEnterEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseEnterEvent
  nameWithType: UIElement3D.MouseEnterEvent
  fullName: System.Windows.UIElement3D.MouseEnterEvent
- uid: System.Windows.UIElement3D.MouseLeave
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseLeave
  nameWithType: UIElement3D.MouseLeave
  fullName: System.Windows.UIElement3D.MouseLeave
- uid: System.Windows.UIElement3D.MouseLeaveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseLeaveEvent
  nameWithType: UIElement3D.MouseLeaveEvent
  fullName: System.Windows.UIElement3D.MouseLeaveEvent
- uid: System.Windows.UIElement3D.MouseLeftButtonDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseLeftButtonDown
  nameWithType: UIElement3D.MouseLeftButtonDown
  fullName: System.Windows.UIElement3D.MouseLeftButtonDown
- uid: System.Windows.UIElement3D.MouseLeftButtonDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseLeftButtonDownEvent
  nameWithType: UIElement3D.MouseLeftButtonDownEvent
  fullName: System.Windows.UIElement3D.MouseLeftButtonDownEvent
- uid: System.Windows.UIElement3D.MouseLeftButtonUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseLeftButtonUp
  nameWithType: UIElement3D.MouseLeftButtonUp
  fullName: System.Windows.UIElement3D.MouseLeftButtonUp
- uid: System.Windows.UIElement3D.MouseLeftButtonUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseLeftButtonUpEvent
  nameWithType: UIElement3D.MouseLeftButtonUpEvent
  fullName: System.Windows.UIElement3D.MouseLeftButtonUpEvent
- uid: System.Windows.UIElement3D.MouseMove
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseMove
  nameWithType: UIElement3D.MouseMove
  fullName: System.Windows.UIElement3D.MouseMove
- uid: System.Windows.UIElement3D.MouseMoveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseMoveEvent
  nameWithType: UIElement3D.MouseMoveEvent
  fullName: System.Windows.UIElement3D.MouseMoveEvent
- uid: System.Windows.UIElement3D.MouseRightButtonDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseRightButtonDown
  nameWithType: UIElement3D.MouseRightButtonDown
  fullName: System.Windows.UIElement3D.MouseRightButtonDown
- uid: System.Windows.UIElement3D.MouseRightButtonDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseRightButtonDownEvent
  nameWithType: UIElement3D.MouseRightButtonDownEvent
  fullName: System.Windows.UIElement3D.MouseRightButtonDownEvent
- uid: System.Windows.UIElement3D.MouseRightButtonUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseRightButtonUp
  nameWithType: UIElement3D.MouseRightButtonUp
  fullName: System.Windows.UIElement3D.MouseRightButtonUp
- uid: System.Windows.UIElement3D.MouseRightButtonUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseRightButtonUpEvent
  nameWithType: UIElement3D.MouseRightButtonUpEvent
  fullName: System.Windows.UIElement3D.MouseRightButtonUpEvent
- uid: System.Windows.UIElement3D.MouseUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseUp
  nameWithType: UIElement3D.MouseUp
  fullName: System.Windows.UIElement3D.MouseUp
- uid: System.Windows.UIElement3D.MouseUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseUpEvent
  nameWithType: UIElement3D.MouseUpEvent
  fullName: System.Windows.UIElement3D.MouseUpEvent
- uid: System.Windows.UIElement3D.MouseWheel
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseWheel
  nameWithType: UIElement3D.MouseWheel
  fullName: System.Windows.UIElement3D.MouseWheel
- uid: System.Windows.Input.MouseWheelEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseWheelEventHandler
  nameWithType: MouseWheelEventHandler
  fullName: System.Windows.Input.MouseWheelEventHandler
- uid: System.Windows.UIElement3D.MouseWheelEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseWheelEvent
  nameWithType: UIElement3D.MouseWheelEvent
  fullName: System.Windows.UIElement3D.MouseWheelEvent
- uid: System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MoveFocus(TraversalRequest)
  nameWithType: UIElement3D.MoveFocus(TraversalRequest)
  fullName: System.Windows.UIElement3D.MoveFocus(TraversalRequest)
- uid: System.Windows.Input.TraversalRequest
  parent: System.Windows.Input
  isExternal: false
  name: TraversalRequest
  nameWithType: TraversalRequest
  fullName: System.Windows.Input.TraversalRequest
- uid: System.Windows.UIElement3D.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnAccessKey(AccessKeyEventArgs)
  nameWithType: UIElement3D.OnAccessKey(AccessKeyEventArgs)
  fullName: System.Windows.UIElement3D.OnAccessKey(AccessKeyEventArgs)
- uid: System.Windows.Input.AccessKeyEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: AccessKeyEventArgs
  nameWithType: AccessKeyEventArgs
  fullName: System.Windows.Input.AccessKeyEventArgs
- uid: System.Windows.UIElement3D.OnCreateAutomationPeer
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnCreateAutomationPeer()
  nameWithType: UIElement3D.OnCreateAutomationPeer()
  fullName: System.Windows.UIElement3D.OnCreateAutomationPeer()
- uid: System.Windows.Automation.Peers.AutomationPeer
  parent: System.Windows.Automation.Peers
  isExternal: false
  name: AutomationPeer
  nameWithType: AutomationPeer
  fullName: System.Windows.Automation.Peers.AutomationPeer
- uid: System.Windows.UIElement3D.OnDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnDragEnter(DragEventArgs)
  nameWithType: UIElement3D.OnDragEnter(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnDragEnter(DragEventArgs)
- uid: System.Windows.DragEventArgs
  parent: System.Windows
  isExternal: false
  name: DragEventArgs
  nameWithType: DragEventArgs
  fullName: System.Windows.DragEventArgs
- uid: System.Windows.UIElement3D.OnDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnDragLeave(DragEventArgs)
  nameWithType: UIElement3D.OnDragLeave(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnDragLeave(DragEventArgs)
- uid: System.Windows.UIElement3D.OnDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnDragOver(DragEventArgs)
  nameWithType: UIElement3D.OnDragOver(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnDragOver(DragEventArgs)
- uid: System.Windows.UIElement3D.OnDrop(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnDrop(DragEventArgs)
  nameWithType: UIElement3D.OnDrop(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnDrop(DragEventArgs)
- uid: System.Windows.UIElement3D.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: UIElement3D.OnGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.UIElement3D.OnGiveFeedback(GiveFeedbackEventArgs)
- uid: System.Windows.GiveFeedbackEventArgs
  parent: System.Windows
  isExternal: false
  name: GiveFeedbackEventArgs
  nameWithType: GiveFeedbackEventArgs
  fullName: System.Windows.GiveFeedbackEventArgs
- uid: System.Windows.UIElement3D.OnGotFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGotFocus(RoutedEventArgs)
  nameWithType: UIElement3D.OnGotFocus(RoutedEventArgs)
  fullName: System.Windows.UIElement3D.OnGotFocus(RoutedEventArgs)
- uid: System.Windows.UIElement3D.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement3D.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.Input.KeyboardFocusChangedEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: KeyboardFocusChangedEventArgs
  nameWithType: KeyboardFocusChangedEventArgs
  fullName: System.Windows.Input.KeyboardFocusChangedEventArgs
- uid: System.Windows.UIElement3D.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGotMouseCapture(MouseEventArgs)
  nameWithType: UIElement3D.OnGotMouseCapture(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnGotMouseCapture(MouseEventArgs)
- uid: System.Windows.Input.MouseEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseEventArgs
  nameWithType: MouseEventArgs
  fullName: System.Windows.Input.MouseEventArgs
- uid: System.Windows.UIElement3D.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGotStylusCapture(StylusEventArgs)
  nameWithType: UIElement3D.OnGotStylusCapture(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnGotStylusCapture(StylusEventArgs)
- uid: System.Windows.Input.StylusEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusEventArgs
  nameWithType: StylusEventArgs
  fullName: System.Windows.Input.StylusEventArgs
- uid: System.Windows.UIElement3D.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGotTouchCapture(TouchEventArgs)
  nameWithType: UIElement3D.OnGotTouchCapture(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnGotTouchCapture(TouchEventArgs)
- uid: System.Windows.Input.TouchEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: TouchEventArgs
  nameWithType: TouchEventArgs
  fullName: System.Windows.Input.TouchEventArgs
- uid: System.Windows.UIElement3D.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.DependencyPropertyChangedEventArgs
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventArgs
  nameWithType: DependencyPropertyChangedEventArgs
  fullName: System.Windows.DependencyPropertyChangedEventArgs
- uid: System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement3D.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement3D.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement3D.OnKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnKeyDown(KeyEventArgs)
  nameWithType: UIElement3D.OnKeyDown(KeyEventArgs)
  fullName: System.Windows.UIElement3D.OnKeyDown(KeyEventArgs)
- uid: System.Windows.Input.KeyEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: KeyEventArgs
  nameWithType: KeyEventArgs
  fullName: System.Windows.Input.KeyEventArgs
- uid: System.Windows.UIElement3D.OnKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnKeyUp(KeyEventArgs)
  nameWithType: UIElement3D.OnKeyUp(KeyEventArgs)
  fullName: System.Windows.UIElement3D.OnKeyUp(KeyEventArgs)
- uid: System.Windows.UIElement3D.OnLostFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnLostFocus(RoutedEventArgs)
  nameWithType: UIElement3D.OnLostFocus(RoutedEventArgs)
  fullName: System.Windows.UIElement3D.OnLostFocus(RoutedEventArgs)
- uid: System.Windows.UIElement3D.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement3D.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.UIElement3D.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnLostMouseCapture(MouseEventArgs)
  nameWithType: UIElement3D.OnLostMouseCapture(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnLostMouseCapture(MouseEventArgs)
- uid: System.Windows.UIElement3D.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnLostStylusCapture(StylusEventArgs)
  nameWithType: UIElement3D.OnLostStylusCapture(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnLostStylusCapture(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnLostTouchCapture(TouchEventArgs)
  nameWithType: UIElement3D.OnLostTouchCapture(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnLostTouchCapture(TouchEventArgs)
- uid: System.Windows.UIElement3D.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseDown(MouseButtonEventArgs)
- uid: System.Windows.Input.MouseButtonEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseButtonEventArgs
  nameWithType: MouseButtonEventArgs
  fullName: System.Windows.Input.MouseButtonEventArgs
- uid: System.Windows.UIElement3D.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseEnter(MouseEventArgs)
  nameWithType: UIElement3D.OnMouseEnter(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseEnter(MouseEventArgs)
- uid: System.Windows.UIElement3D.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseLeave(MouseEventArgs)
  nameWithType: UIElement3D.OnMouseLeave(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseLeave(MouseEventArgs)
- uid: System.Windows.UIElement3D.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseLeftButtonDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement3D.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseLeftButtonUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement3D.OnMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseMove(MouseEventArgs)
  nameWithType: UIElement3D.OnMouseMove(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseMove(MouseEventArgs)
- uid: System.Windows.UIElement3D.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseRightButtonDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement3D.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseRightButtonUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement3D.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement3D.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseWheel(MouseWheelEventArgs)
  nameWithType: UIElement3D.OnMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseWheel(MouseWheelEventArgs)
- uid: System.Windows.Input.MouseWheelEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseWheelEventArgs
  nameWithType: MouseWheelEventArgs
  fullName: System.Windows.Input.MouseWheelEventArgs
- uid: System.Windows.UIElement3D.OnPreviewDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewDragEnter(DragEventArgs)
  nameWithType: UIElement3D.OnPreviewDragEnter(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewDragEnter(DragEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewDragLeave(DragEventArgs)
  nameWithType: UIElement3D.OnPreviewDragLeave(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewDragLeave(DragEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewDragOver(DragEventArgs)
  nameWithType: UIElement3D.OnPreviewDragOver(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewDragOver(DragEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewDrop(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewDrop(DragEventArgs)
  nameWithType: UIElement3D.OnPreviewDrop(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewDrop(DragEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: UIElement3D.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement3D.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewKeyDown(KeyEventArgs)
  nameWithType: UIElement3D.OnPreviewKeyDown(KeyEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewKeyDown(KeyEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewKeyUp(KeyEventArgs)
  nameWithType: UIElement3D.OnPreviewKeyUp(KeyEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewKeyUp(KeyEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement3D.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseMove(MouseEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseMove(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseMove(MouseEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseWheel(MouseWheelEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseWheel(MouseWheelEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: UIElement3D.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
- uid: System.Windows.QueryContinueDragEventArgs
  parent: System.Windows
  isExternal: false
  name: QueryContinueDragEventArgs
  nameWithType: QueryContinueDragEventArgs
  fullName: System.Windows.QueryContinueDragEventArgs
- uid: System.Windows.UIElement3D.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusButtonDown(StylusButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusButtonDown(StylusButtonEventArgs)
- uid: System.Windows.Input.StylusButtonEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusButtonEventArgs
  nameWithType: StylusButtonEventArgs
  fullName: System.Windows.Input.StylusButtonEventArgs
- uid: System.Windows.UIElement3D.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusButtonUp(StylusButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusButtonUp(StylusButtonEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusDown(StylusDownEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusDown(StylusDownEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusDown(StylusDownEventArgs)
- uid: System.Windows.Input.StylusDownEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusDownEventArgs
  nameWithType: StylusDownEventArgs
  fullName: System.Windows.Input.StylusDownEventArgs
- uid: System.Windows.UIElement3D.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusInAirMove(StylusEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusInAirMove(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusInRange(StylusEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusInRange(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusInRange(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusMove(StylusEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusMove(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusMove(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusOutOfRange(StylusEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusOutOfRange(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
- uid: System.Windows.Input.StylusSystemGestureEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusSystemGestureEventArgs
  nameWithType: StylusSystemGestureEventArgs
  fullName: System.Windows.Input.StylusSystemGestureEventArgs
- uid: System.Windows.UIElement3D.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusUp(StylusEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusUp(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusUp(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewTextInput(TextCompositionEventArgs)
  nameWithType: UIElement3D.OnPreviewTextInput(TextCompositionEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewTextInput(TextCompositionEventArgs)
- uid: System.Windows.Input.TextCompositionEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: TextCompositionEventArgs
  nameWithType: TextCompositionEventArgs
  fullName: System.Windows.Input.TextCompositionEventArgs
- uid: System.Windows.UIElement3D.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewTouchDown(TouchEventArgs)
  nameWithType: UIElement3D.OnPreviewTouchDown(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewTouchDown(TouchEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewTouchMove(TouchEventArgs)
  nameWithType: UIElement3D.OnPreviewTouchMove(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewTouchMove(TouchEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewTouchUp(TouchEventArgs)
  nameWithType: UIElement3D.OnPreviewTouchUp(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewTouchUp(TouchEventArgs)
- uid: System.Windows.UIElement3D.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: UIElement3D.OnQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.UIElement3D.OnQueryContinueDrag(QueryContinueDragEventArgs)
- uid: System.Windows.UIElement3D.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnQueryCursor(QueryCursorEventArgs)
  nameWithType: UIElement3D.OnQueryCursor(QueryCursorEventArgs)
  fullName: System.Windows.UIElement3D.OnQueryCursor(QueryCursorEventArgs)
- uid: System.Windows.Input.QueryCursorEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: QueryCursorEventArgs
  nameWithType: QueryCursorEventArgs
  fullName: System.Windows.Input.QueryCursorEventArgs
- uid: System.Windows.UIElement3D.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusButtonDown(StylusButtonEventArgs)
  nameWithType: UIElement3D.OnStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusButtonDown(StylusButtonEventArgs)
- uid: System.Windows.UIElement3D.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusButtonUp(StylusButtonEventArgs)
  nameWithType: UIElement3D.OnStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusButtonUp(StylusButtonEventArgs)
- uid: System.Windows.UIElement3D.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusDown(StylusDownEventArgs)
  nameWithType: UIElement3D.OnStylusDown(StylusDownEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusDown(StylusDownEventArgs)
- uid: System.Windows.UIElement3D.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusEnter(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusEnter(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusEnter(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusInAirMove(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusInAirMove(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusInRange(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusInRange(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusInRange(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusLeave(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusLeave(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusLeave(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusMove(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusMove(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusMove(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusOutOfRange(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusOutOfRange(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: UIElement3D.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusSystemGesture(StylusSystemGestureEventArgs)
- uid: System.Windows.UIElement3D.OnStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusUp(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusUp(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusUp(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTextInput(TextCompositionEventArgs)
  nameWithType: UIElement3D.OnTextInput(TextCompositionEventArgs)
  fullName: System.Windows.UIElement3D.OnTextInput(TextCompositionEventArgs)
- uid: System.Windows.UIElement3D.OnTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTouchDown(TouchEventArgs)
  nameWithType: UIElement3D.OnTouchDown(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnTouchDown(TouchEventArgs)
- uid: System.Windows.UIElement3D.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTouchEnter(TouchEventArgs)
  nameWithType: UIElement3D.OnTouchEnter(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnTouchEnter(TouchEventArgs)
- uid: System.Windows.UIElement3D.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTouchLeave(TouchEventArgs)
  nameWithType: UIElement3D.OnTouchLeave(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnTouchLeave(TouchEventArgs)
- uid: System.Windows.UIElement3D.OnTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTouchMove(TouchEventArgs)
  nameWithType: UIElement3D.OnTouchMove(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnTouchMove(TouchEventArgs)
- uid: System.Windows.UIElement3D.OnTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTouchUp(TouchEventArgs)
  nameWithType: UIElement3D.OnTouchUp(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnTouchUp(TouchEventArgs)
- uid: System.Windows.UIElement3D.OnUpdateModel
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnUpdateModel()
  nameWithType: UIElement3D.OnUpdateModel()
  fullName: System.Windows.UIElement3D.OnUpdateModel()
- uid: System.Windows.UIElement3D.OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: UIElement3D.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.UIElement3D.OnVisualParentChanged(DependencyObject)
- uid: System.Windows.UIElement3D.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PredictFocus(FocusNavigationDirection)
  nameWithType: UIElement3D.PredictFocus(FocusNavigationDirection)
  fullName: System.Windows.UIElement3D.PredictFocus(FocusNavigationDirection)
- uid: System.Windows.Input.FocusNavigationDirection
  parent: System.Windows.Input
  isExternal: false
  name: FocusNavigationDirection
  nameWithType: FocusNavigationDirection
  fullName: System.Windows.Input.FocusNavigationDirection
- uid: System.Windows.UIElement3D.PreviewDragEnter
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewDragEnter
  nameWithType: UIElement3D.PreviewDragEnter
  fullName: System.Windows.UIElement3D.PreviewDragEnter
- uid: System.Windows.UIElement3D.PreviewDragEnterEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewDragEnterEvent
  nameWithType: UIElement3D.PreviewDragEnterEvent
  fullName: System.Windows.UIElement3D.PreviewDragEnterEvent
- uid: System.Windows.UIElement3D.PreviewDragLeave
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewDragLeave
  nameWithType: UIElement3D.PreviewDragLeave
  fullName: System.Windows.UIElement3D.PreviewDragLeave
- uid: System.Windows.UIElement3D.PreviewDragLeaveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewDragLeaveEvent
  nameWithType: UIElement3D.PreviewDragLeaveEvent
  fullName: System.Windows.UIElement3D.PreviewDragLeaveEvent
- uid: System.Windows.UIElement3D.PreviewDragOver
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewDragOver
  nameWithType: UIElement3D.PreviewDragOver
  fullName: System.Windows.UIElement3D.PreviewDragOver
- uid: System.Windows.UIElement3D.PreviewDragOverEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewDragOverEvent
  nameWithType: UIElement3D.PreviewDragOverEvent
  fullName: System.Windows.UIElement3D.PreviewDragOverEvent
- uid: System.Windows.UIElement3D.PreviewDrop
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewDrop
  nameWithType: UIElement3D.PreviewDrop
  fullName: System.Windows.UIElement3D.PreviewDrop
- uid: System.Windows.UIElement3D.PreviewDropEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewDropEvent
  nameWithType: UIElement3D.PreviewDropEvent
  fullName: System.Windows.UIElement3D.PreviewDropEvent
- uid: System.Windows.UIElement3D.PreviewGiveFeedback
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewGiveFeedback
  nameWithType: UIElement3D.PreviewGiveFeedback
  fullName: System.Windows.UIElement3D.PreviewGiveFeedback
- uid: System.Windows.UIElement3D.PreviewGiveFeedbackEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewGiveFeedbackEvent
  nameWithType: UIElement3D.PreviewGiveFeedbackEvent
  fullName: System.Windows.UIElement3D.PreviewGiveFeedbackEvent
- uid: System.Windows.UIElement3D.PreviewGotKeyboardFocus
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewGotKeyboardFocus
  nameWithType: UIElement3D.PreviewGotKeyboardFocus
  fullName: System.Windows.UIElement3D.PreviewGotKeyboardFocus
- uid: System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewGotKeyboardFocusEvent
  nameWithType: UIElement3D.PreviewGotKeyboardFocusEvent
  fullName: System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent
- uid: System.Windows.UIElement3D.PreviewKeyDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewKeyDown
  nameWithType: UIElement3D.PreviewKeyDown
  fullName: System.Windows.UIElement3D.PreviewKeyDown
- uid: System.Windows.UIElement3D.PreviewKeyDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewKeyDownEvent
  nameWithType: UIElement3D.PreviewKeyDownEvent
  fullName: System.Windows.UIElement3D.PreviewKeyDownEvent
- uid: System.Windows.UIElement3D.PreviewKeyUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewKeyUp
  nameWithType: UIElement3D.PreviewKeyUp
  fullName: System.Windows.UIElement3D.PreviewKeyUp
- uid: System.Windows.UIElement3D.PreviewKeyUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewKeyUpEvent
  nameWithType: UIElement3D.PreviewKeyUpEvent
  fullName: System.Windows.UIElement3D.PreviewKeyUpEvent
- uid: System.Windows.UIElement3D.PreviewLostKeyboardFocus
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewLostKeyboardFocus
  nameWithType: UIElement3D.PreviewLostKeyboardFocus
  fullName: System.Windows.UIElement3D.PreviewLostKeyboardFocus
- uid: System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewLostKeyboardFocusEvent
  nameWithType: UIElement3D.PreviewLostKeyboardFocusEvent
  fullName: System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent
- uid: System.Windows.UIElement3D.PreviewMouseDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseDown
  nameWithType: UIElement3D.PreviewMouseDown
  fullName: System.Windows.UIElement3D.PreviewMouseDown
- uid: System.Windows.UIElement3D.PreviewMouseDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseDownEvent
  nameWithType: UIElement3D.PreviewMouseDownEvent
  fullName: System.Windows.UIElement3D.PreviewMouseDownEvent
- uid: System.Windows.UIElement3D.PreviewMouseLeftButtonDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseLeftButtonDown
  nameWithType: UIElement3D.PreviewMouseLeftButtonDown
  fullName: System.Windows.UIElement3D.PreviewMouseLeftButtonDown
- uid: System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseLeftButtonDownEvent
  nameWithType: UIElement3D.PreviewMouseLeftButtonDownEvent
  fullName: System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent
- uid: System.Windows.UIElement3D.PreviewMouseLeftButtonUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseLeftButtonUp
  nameWithType: UIElement3D.PreviewMouseLeftButtonUp
  fullName: System.Windows.UIElement3D.PreviewMouseLeftButtonUp
- uid: System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseLeftButtonUpEvent
  nameWithType: UIElement3D.PreviewMouseLeftButtonUpEvent
  fullName: System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent
- uid: System.Windows.UIElement3D.PreviewMouseMove
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseMove
  nameWithType: UIElement3D.PreviewMouseMove
  fullName: System.Windows.UIElement3D.PreviewMouseMove
- uid: System.Windows.UIElement3D.PreviewMouseMoveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseMoveEvent
  nameWithType: UIElement3D.PreviewMouseMoveEvent
  fullName: System.Windows.UIElement3D.PreviewMouseMoveEvent
- uid: System.Windows.UIElement3D.PreviewMouseRightButtonDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseRightButtonDown
  nameWithType: UIElement3D.PreviewMouseRightButtonDown
  fullName: System.Windows.UIElement3D.PreviewMouseRightButtonDown
- uid: System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseRightButtonDownEvent
  nameWithType: UIElement3D.PreviewMouseRightButtonDownEvent
  fullName: System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent
- uid: System.Windows.UIElement3D.PreviewMouseRightButtonUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseRightButtonUp
  nameWithType: UIElement3D.PreviewMouseRightButtonUp
  fullName: System.Windows.UIElement3D.PreviewMouseRightButtonUp
- uid: System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseRightButtonUpEvent
  nameWithType: UIElement3D.PreviewMouseRightButtonUpEvent
  fullName: System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent
- uid: System.Windows.UIElement3D.PreviewMouseUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseUp
  nameWithType: UIElement3D.PreviewMouseUp
  fullName: System.Windows.UIElement3D.PreviewMouseUp
- uid: System.Windows.UIElement3D.PreviewMouseUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseUpEvent
  nameWithType: UIElement3D.PreviewMouseUpEvent
  fullName: System.Windows.UIElement3D.PreviewMouseUpEvent
- uid: System.Windows.UIElement3D.PreviewMouseWheel
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseWheel
  nameWithType: UIElement3D.PreviewMouseWheel
  fullName: System.Windows.UIElement3D.PreviewMouseWheel
- uid: System.Windows.UIElement3D.PreviewMouseWheelEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseWheelEvent
  nameWithType: UIElement3D.PreviewMouseWheelEvent
  fullName: System.Windows.UIElement3D.PreviewMouseWheelEvent
- uid: System.Windows.UIElement3D.PreviewQueryContinueDrag
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewQueryContinueDrag
  nameWithType: UIElement3D.PreviewQueryContinueDrag
  fullName: System.Windows.UIElement3D.PreviewQueryContinueDrag
- uid: System.Windows.QueryContinueDragEventHandler
  parent: System.Windows
  isExternal: false
  name: QueryContinueDragEventHandler
  nameWithType: QueryContinueDragEventHandler
  fullName: System.Windows.QueryContinueDragEventHandler
- uid: System.Windows.UIElement3D.PreviewQueryContinueDragEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewQueryContinueDragEvent
  nameWithType: UIElement3D.PreviewQueryContinueDragEvent
  fullName: System.Windows.UIElement3D.PreviewQueryContinueDragEvent
- uid: System.Windows.UIElement3D.PreviewStylusButtonDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusButtonDown
  nameWithType: UIElement3D.PreviewStylusButtonDown
  fullName: System.Windows.UIElement3D.PreviewStylusButtonDown
- uid: System.Windows.Input.StylusButtonEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusButtonEventHandler
  nameWithType: StylusButtonEventHandler
  fullName: System.Windows.Input.StylusButtonEventHandler
- uid: System.Windows.UIElement3D.PreviewStylusButtonDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusButtonDownEvent
  nameWithType: UIElement3D.PreviewStylusButtonDownEvent
  fullName: System.Windows.UIElement3D.PreviewStylusButtonDownEvent
- uid: System.Windows.UIElement3D.PreviewStylusButtonUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusButtonUp
  nameWithType: UIElement3D.PreviewStylusButtonUp
  fullName: System.Windows.UIElement3D.PreviewStylusButtonUp
- uid: System.Windows.UIElement3D.PreviewStylusButtonUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusButtonUpEvent
  nameWithType: UIElement3D.PreviewStylusButtonUpEvent
  fullName: System.Windows.UIElement3D.PreviewStylusButtonUpEvent
- uid: System.Windows.UIElement3D.PreviewStylusDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusDown
  nameWithType: UIElement3D.PreviewStylusDown
  fullName: System.Windows.UIElement3D.PreviewStylusDown
- uid: System.Windows.Input.StylusDownEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusDownEventHandler
  nameWithType: StylusDownEventHandler
  fullName: System.Windows.Input.StylusDownEventHandler
- uid: System.Windows.UIElement3D.PreviewStylusDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusDownEvent
  nameWithType: UIElement3D.PreviewStylusDownEvent
  fullName: System.Windows.UIElement3D.PreviewStylusDownEvent
- uid: System.Windows.UIElement3D.PreviewStylusInAirMove
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusInAirMove
  nameWithType: UIElement3D.PreviewStylusInAirMove
  fullName: System.Windows.UIElement3D.PreviewStylusInAirMove
- uid: System.Windows.UIElement3D.PreviewStylusInAirMoveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusInAirMoveEvent
  nameWithType: UIElement3D.PreviewStylusInAirMoveEvent
  fullName: System.Windows.UIElement3D.PreviewStylusInAirMoveEvent
- uid: System.Windows.UIElement3D.PreviewStylusInRange
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusInRange
  nameWithType: UIElement3D.PreviewStylusInRange
  fullName: System.Windows.UIElement3D.PreviewStylusInRange
- uid: System.Windows.UIElement3D.PreviewStylusInRangeEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusInRangeEvent
  nameWithType: UIElement3D.PreviewStylusInRangeEvent
  fullName: System.Windows.UIElement3D.PreviewStylusInRangeEvent
- uid: System.Windows.UIElement3D.PreviewStylusMove
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusMove
  nameWithType: UIElement3D.PreviewStylusMove
  fullName: System.Windows.UIElement3D.PreviewStylusMove
- uid: System.Windows.UIElement3D.PreviewStylusMoveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusMoveEvent
  nameWithType: UIElement3D.PreviewStylusMoveEvent
  fullName: System.Windows.UIElement3D.PreviewStylusMoveEvent
- uid: System.Windows.UIElement3D.PreviewStylusOutOfRange
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusOutOfRange
  nameWithType: UIElement3D.PreviewStylusOutOfRange
  fullName: System.Windows.UIElement3D.PreviewStylusOutOfRange
- uid: System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusOutOfRangeEvent
  nameWithType: UIElement3D.PreviewStylusOutOfRangeEvent
  fullName: System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent
- uid: System.Windows.UIElement3D.PreviewStylusSystemGesture
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusSystemGesture
  nameWithType: UIElement3D.PreviewStylusSystemGesture
  fullName: System.Windows.UIElement3D.PreviewStylusSystemGesture
- uid: System.Windows.Input.StylusSystemGestureEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusSystemGestureEventHandler
  nameWithType: StylusSystemGestureEventHandler
  fullName: System.Windows.Input.StylusSystemGestureEventHandler
- uid: System.Windows.UIElement3D.PreviewStylusSystemGestureEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusSystemGestureEvent
  nameWithType: UIElement3D.PreviewStylusSystemGestureEvent
  fullName: System.Windows.UIElement3D.PreviewStylusSystemGestureEvent
- uid: System.Windows.UIElement3D.PreviewStylusUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusUp
  nameWithType: UIElement3D.PreviewStylusUp
  fullName: System.Windows.UIElement3D.PreviewStylusUp
- uid: System.Windows.UIElement3D.PreviewStylusUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusUpEvent
  nameWithType: UIElement3D.PreviewStylusUpEvent
  fullName: System.Windows.UIElement3D.PreviewStylusUpEvent
- uid: System.Windows.UIElement3D.PreviewTextInput
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewTextInput
  nameWithType: UIElement3D.PreviewTextInput
  fullName: System.Windows.UIElement3D.PreviewTextInput
- uid: System.Windows.Input.TextCompositionEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: TextCompositionEventHandler
  nameWithType: TextCompositionEventHandler
  fullName: System.Windows.Input.TextCompositionEventHandler
- uid: System.Windows.UIElement3D.PreviewTextInputEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewTextInputEvent
  nameWithType: UIElement3D.PreviewTextInputEvent
  fullName: System.Windows.UIElement3D.PreviewTextInputEvent
- uid: System.Windows.UIElement3D.PreviewTouchDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewTouchDown
  nameWithType: UIElement3D.PreviewTouchDown
  fullName: System.Windows.UIElement3D.PreviewTouchDown
- uid: System.Windows.UIElement3D.PreviewTouchDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewTouchDownEvent
  nameWithType: UIElement3D.PreviewTouchDownEvent
  fullName: System.Windows.UIElement3D.PreviewTouchDownEvent
- uid: System.Windows.UIElement3D.PreviewTouchMove
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewTouchMove
  nameWithType: UIElement3D.PreviewTouchMove
  fullName: System.Windows.UIElement3D.PreviewTouchMove
- uid: System.Windows.UIElement3D.PreviewTouchMoveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewTouchMoveEvent
  nameWithType: UIElement3D.PreviewTouchMoveEvent
  fullName: System.Windows.UIElement3D.PreviewTouchMoveEvent
- uid: System.Windows.UIElement3D.PreviewTouchUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewTouchUp
  nameWithType: UIElement3D.PreviewTouchUp
  fullName: System.Windows.UIElement3D.PreviewTouchUp
- uid: System.Windows.UIElement3D.PreviewTouchUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewTouchUpEvent
  nameWithType: UIElement3D.PreviewTouchUpEvent
  fullName: System.Windows.UIElement3D.PreviewTouchUpEvent
- uid: System.Windows.UIElement3D.QueryContinueDrag
  parent: System.Windows.UIElement3D
  isExternal: false
  name: QueryContinueDrag
  nameWithType: UIElement3D.QueryContinueDrag
  fullName: System.Windows.UIElement3D.QueryContinueDrag
- uid: System.Windows.UIElement3D.QueryContinueDragEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: QueryContinueDragEvent
  nameWithType: UIElement3D.QueryContinueDragEvent
  fullName: System.Windows.UIElement3D.QueryContinueDragEvent
- uid: System.Windows.UIElement3D.QueryCursor
  parent: System.Windows.UIElement3D
  isExternal: false
  name: QueryCursor
  nameWithType: UIElement3D.QueryCursor
  fullName: System.Windows.UIElement3D.QueryCursor
- uid: System.Windows.Input.QueryCursorEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: QueryCursorEventHandler
  nameWithType: QueryCursorEventHandler
  fullName: System.Windows.Input.QueryCursorEventHandler
- uid: System.Windows.UIElement3D.QueryCursorEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: QueryCursorEvent
  nameWithType: UIElement3D.QueryCursorEvent
  fullName: System.Windows.UIElement3D.QueryCursorEvent
- uid: System.Windows.UIElement3D.RaiseEvent(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: RaiseEvent(RoutedEventArgs)
  nameWithType: UIElement3D.RaiseEvent(RoutedEventArgs)
  fullName: System.Windows.UIElement3D.RaiseEvent(RoutedEventArgs)
- uid: System.Windows.UIElement3D.ReleaseAllTouchCaptures
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ReleaseAllTouchCaptures()
  nameWithType: UIElement3D.ReleaseAllTouchCaptures()
  fullName: System.Windows.UIElement3D.ReleaseAllTouchCaptures()
- uid: System.Windows.UIElement3D.ReleaseMouseCapture
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ReleaseMouseCapture()
  nameWithType: UIElement3D.ReleaseMouseCapture()
  fullName: System.Windows.UIElement3D.ReleaseMouseCapture()
- uid: System.Windows.UIElement3D.ReleaseStylusCapture
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ReleaseStylusCapture()
  nameWithType: UIElement3D.ReleaseStylusCapture()
  fullName: System.Windows.UIElement3D.ReleaseStylusCapture()
- uid: System.Windows.UIElement3D.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ReleaseTouchCapture(TouchDevice)
  nameWithType: UIElement3D.ReleaseTouchCapture(TouchDevice)
  fullName: System.Windows.UIElement3D.ReleaseTouchCapture(TouchDevice)
- uid: System.Windows.UIElement3D.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: RemoveHandler(RoutedEvent,Delegate)
  nameWithType: UIElement3D.RemoveHandler(RoutedEvent,Delegate)
  fullName: System.Windows.UIElement3D.RemoveHandler(RoutedEvent,Delegate)
- uid: System.Windows.UIElement3D.ShouldSerializeCommandBindings
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ShouldSerializeCommandBindings()
  nameWithType: UIElement3D.ShouldSerializeCommandBindings()
  fullName: System.Windows.UIElement3D.ShouldSerializeCommandBindings()
- uid: System.Windows.UIElement3D.ShouldSerializeInputBindings
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ShouldSerializeInputBindings()
  nameWithType: UIElement3D.ShouldSerializeInputBindings()
  fullName: System.Windows.UIElement3D.ShouldSerializeInputBindings()
- uid: System.Windows.UIElement3D.StylusButtonDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusButtonDown
  nameWithType: UIElement3D.StylusButtonDown
  fullName: System.Windows.UIElement3D.StylusButtonDown
- uid: System.Windows.UIElement3D.StylusButtonDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusButtonDownEvent
  nameWithType: UIElement3D.StylusButtonDownEvent
  fullName: System.Windows.UIElement3D.StylusButtonDownEvent
- uid: System.Windows.UIElement3D.StylusButtonUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusButtonUp
  nameWithType: UIElement3D.StylusButtonUp
  fullName: System.Windows.UIElement3D.StylusButtonUp
- uid: System.Windows.UIElement3D.StylusButtonUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusButtonUpEvent
  nameWithType: UIElement3D.StylusButtonUpEvent
  fullName: System.Windows.UIElement3D.StylusButtonUpEvent
- uid: System.Windows.UIElement3D.StylusDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusDown
  nameWithType: UIElement3D.StylusDown
  fullName: System.Windows.UIElement3D.StylusDown
- uid: System.Windows.UIElement3D.StylusDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusDownEvent
  nameWithType: UIElement3D.StylusDownEvent
  fullName: System.Windows.UIElement3D.StylusDownEvent
- uid: System.Windows.UIElement3D.StylusEnter
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusEnter
  nameWithType: UIElement3D.StylusEnter
  fullName: System.Windows.UIElement3D.StylusEnter
- uid: System.Windows.UIElement3D.StylusEnterEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusEnterEvent
  nameWithType: UIElement3D.StylusEnterEvent
  fullName: System.Windows.UIElement3D.StylusEnterEvent
- uid: System.Windows.UIElement3D.StylusInAirMove
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusInAirMove
  nameWithType: UIElement3D.StylusInAirMove
  fullName: System.Windows.UIElement3D.StylusInAirMove
- uid: System.Windows.UIElement3D.StylusInAirMoveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusInAirMoveEvent
  nameWithType: UIElement3D.StylusInAirMoveEvent
  fullName: System.Windows.UIElement3D.StylusInAirMoveEvent
- uid: System.Windows.UIElement3D.StylusInRange
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusInRange
  nameWithType: UIElement3D.StylusInRange
  fullName: System.Windows.UIElement3D.StylusInRange
- uid: System.Windows.UIElement3D.StylusInRangeEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusInRangeEvent
  nameWithType: UIElement3D.StylusInRangeEvent
  fullName: System.Windows.UIElement3D.StylusInRangeEvent
- uid: System.Windows.UIElement3D.StylusLeave
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusLeave
  nameWithType: UIElement3D.StylusLeave
  fullName: System.Windows.UIElement3D.StylusLeave
- uid: System.Windows.UIElement3D.StylusLeaveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusLeaveEvent
  nameWithType: UIElement3D.StylusLeaveEvent
  fullName: System.Windows.UIElement3D.StylusLeaveEvent
- uid: System.Windows.UIElement3D.StylusMove
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusMove
  nameWithType: UIElement3D.StylusMove
  fullName: System.Windows.UIElement3D.StylusMove
- uid: System.Windows.UIElement3D.StylusMoveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusMoveEvent
  nameWithType: UIElement3D.StylusMoveEvent
  fullName: System.Windows.UIElement3D.StylusMoveEvent
- uid: System.Windows.UIElement3D.StylusOutOfRange
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusOutOfRange
  nameWithType: UIElement3D.StylusOutOfRange
  fullName: System.Windows.UIElement3D.StylusOutOfRange
- uid: System.Windows.UIElement3D.StylusOutOfRangeEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusOutOfRangeEvent
  nameWithType: UIElement3D.StylusOutOfRangeEvent
  fullName: System.Windows.UIElement3D.StylusOutOfRangeEvent
- uid: System.Windows.UIElement3D.StylusSystemGesture
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusSystemGesture
  nameWithType: UIElement3D.StylusSystemGesture
  fullName: System.Windows.UIElement3D.StylusSystemGesture
- uid: System.Windows.UIElement3D.StylusSystemGestureEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusSystemGestureEvent
  nameWithType: UIElement3D.StylusSystemGestureEvent
  fullName: System.Windows.UIElement3D.StylusSystemGestureEvent
- uid: System.Windows.UIElement3D.StylusUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusUp
  nameWithType: UIElement3D.StylusUp
  fullName: System.Windows.UIElement3D.StylusUp
- uid: System.Windows.UIElement3D.StylusUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusUpEvent
  nameWithType: UIElement3D.StylusUpEvent
  fullName: System.Windows.UIElement3D.StylusUpEvent
- uid: System.Windows.UIElement3D.TextInput
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TextInput
  nameWithType: UIElement3D.TextInput
  fullName: System.Windows.UIElement3D.TextInput
- uid: System.Windows.UIElement3D.TextInputEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TextInputEvent
  nameWithType: UIElement3D.TextInputEvent
  fullName: System.Windows.UIElement3D.TextInputEvent
- uid: System.Windows.UIElement3D.TouchDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchDown
  nameWithType: UIElement3D.TouchDown
  fullName: System.Windows.UIElement3D.TouchDown
- uid: System.Windows.UIElement3D.TouchDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchDownEvent
  nameWithType: UIElement3D.TouchDownEvent
  fullName: System.Windows.UIElement3D.TouchDownEvent
- uid: System.Windows.UIElement3D.TouchEnter
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchEnter
  nameWithType: UIElement3D.TouchEnter
  fullName: System.Windows.UIElement3D.TouchEnter
- uid: System.Windows.UIElement3D.TouchEnterEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchEnterEvent
  nameWithType: UIElement3D.TouchEnterEvent
  fullName: System.Windows.UIElement3D.TouchEnterEvent
- uid: System.Windows.UIElement3D.TouchesCaptured
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchesCaptured
  nameWithType: UIElement3D.TouchesCaptured
  fullName: System.Windows.UIElement3D.TouchesCaptured
- uid: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<TouchDevice>
  nameWithType: IEnumerable<TouchDevice>
  fullName: System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Windows.Input.TouchDevice>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.TouchDevice
    name: TouchDevice
    nameWithType: TouchDevice
    fullName: TouchDevice
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement3D.TouchesCapturedWithin
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchesCapturedWithin
  nameWithType: UIElement3D.TouchesCapturedWithin
  fullName: System.Windows.UIElement3D.TouchesCapturedWithin
- uid: System.Windows.UIElement3D.TouchesDirectlyOver
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchesDirectlyOver
  nameWithType: UIElement3D.TouchesDirectlyOver
  fullName: System.Windows.UIElement3D.TouchesDirectlyOver
- uid: System.Windows.UIElement3D.TouchesOver
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchesOver
  nameWithType: UIElement3D.TouchesOver
  fullName: System.Windows.UIElement3D.TouchesOver
- uid: System.Windows.UIElement3D.TouchLeave
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchLeave
  nameWithType: UIElement3D.TouchLeave
  fullName: System.Windows.UIElement3D.TouchLeave
- uid: System.Windows.UIElement3D.TouchLeaveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchLeaveEvent
  nameWithType: UIElement3D.TouchLeaveEvent
  fullName: System.Windows.UIElement3D.TouchLeaveEvent
- uid: System.Windows.UIElement3D.TouchMove
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchMove
  nameWithType: UIElement3D.TouchMove
  fullName: System.Windows.UIElement3D.TouchMove
- uid: System.Windows.UIElement3D.TouchMoveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchMoveEvent
  nameWithType: UIElement3D.TouchMoveEvent
  fullName: System.Windows.UIElement3D.TouchMoveEvent
- uid: System.Windows.UIElement3D.TouchUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchUp
  nameWithType: UIElement3D.TouchUp
  fullName: System.Windows.UIElement3D.TouchUp
- uid: System.Windows.UIElement3D.TouchUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchUpEvent
  nameWithType: UIElement3D.TouchUpEvent
  fullName: System.Windows.UIElement3D.TouchUpEvent
- uid: System.Windows.UIElement3D.Visibility
  parent: System.Windows.UIElement3D
  isExternal: false
  name: Visibility
  nameWithType: UIElement3D.Visibility
  fullName: System.Windows.UIElement3D.Visibility
- uid: System.Windows.Visibility
  parent: System.Windows
  isExternal: false
  name: Visibility
  nameWithType: Visibility
  fullName: System.Windows.Visibility
- uid: System.Windows.UIElement3D.VisibilityProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: VisibilityProperty
  nameWithType: UIElement3D.VisibilityProperty
  fullName: System.Windows.UIElement3D.VisibilityProperty
- uid: System.Windows.UIElement3D.#ctor*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: UIElement3D
  nameWithType: UIElement3D.UIElement3D
- uid: System.Windows.UIElement3D.AddHandler*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AddHandler
  nameWithType: UIElement3D.AddHandler
- uid: System.Windows.UIElement3D.AddToEventRoute*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AddToEventRoute
  nameWithType: UIElement3D.AddToEventRoute
- uid: System.Windows.UIElement3D.AllowDrop*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AllowDrop
  nameWithType: UIElement3D.AllowDrop
- uid: System.Windows.UIElement3D.AreAnyTouchesCaptured*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesCaptured
  nameWithType: UIElement3D.AreAnyTouchesCaptured
- uid: System.Windows.UIElement3D.AreAnyTouchesCapturedWithin*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesCapturedWithin
  nameWithType: UIElement3D.AreAnyTouchesCapturedWithin
- uid: System.Windows.UIElement3D.AreAnyTouchesDirectlyOver*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesDirectlyOver
  nameWithType: UIElement3D.AreAnyTouchesDirectlyOver
- uid: System.Windows.UIElement3D.AreAnyTouchesOver*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesOver
  nameWithType: UIElement3D.AreAnyTouchesOver
- uid: System.Windows.UIElement3D.CaptureMouse*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: CaptureMouse
  nameWithType: UIElement3D.CaptureMouse
- uid: System.Windows.UIElement3D.CaptureStylus*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: CaptureStylus
  nameWithType: UIElement3D.CaptureStylus
- uid: System.Windows.UIElement3D.CaptureTouch*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: CaptureTouch
  nameWithType: UIElement3D.CaptureTouch
- uid: System.Windows.UIElement3D.CommandBindings*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: CommandBindings
  nameWithType: UIElement3D.CommandBindings
- uid: System.Windows.UIElement3D.Focus*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: Focus
  nameWithType: UIElement3D.Focus
- uid: System.Windows.UIElement3D.Focusable*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: Focusable
  nameWithType: UIElement3D.Focusable
- uid: System.Windows.UIElement3D.GetUIParentCore*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GetUIParentCore
  nameWithType: UIElement3D.GetUIParentCore
- uid: System.Windows.UIElement3D.InputBindings*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: InputBindings
  nameWithType: UIElement3D.InputBindings
- uid: System.Windows.UIElement3D.InvalidateModel*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: InvalidateModel
  nameWithType: UIElement3D.InvalidateModel
- uid: System.Windows.UIElement3D.IsEnabled*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsEnabled
  nameWithType: UIElement3D.IsEnabled
- uid: System.Windows.UIElement3D.IsEnabledCore*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsEnabledCore
  nameWithType: UIElement3D.IsEnabledCore
- uid: System.Windows.UIElement3D.IsFocused*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsFocused
  nameWithType: UIElement3D.IsFocused
- uid: System.Windows.UIElement3D.IsHitTestVisible*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsHitTestVisible
  nameWithType: UIElement3D.IsHitTestVisible
- uid: System.Windows.UIElement3D.IsInputMethodEnabled*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsInputMethodEnabled
  nameWithType: UIElement3D.IsInputMethodEnabled
- uid: System.Windows.UIElement3D.IsKeyboardFocused*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsKeyboardFocused
  nameWithType: UIElement3D.IsKeyboardFocused
- uid: System.Windows.UIElement3D.IsKeyboardFocusWithin*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsKeyboardFocusWithin
  nameWithType: UIElement3D.IsKeyboardFocusWithin
- uid: System.Windows.UIElement3D.IsMouseCaptured*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseCaptured
  nameWithType: UIElement3D.IsMouseCaptured
- uid: System.Windows.UIElement3D.IsMouseCaptureWithin*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseCaptureWithin
  nameWithType: UIElement3D.IsMouseCaptureWithin
- uid: System.Windows.UIElement3D.IsMouseDirectlyOver*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseDirectlyOver
  nameWithType: UIElement3D.IsMouseDirectlyOver
- uid: System.Windows.UIElement3D.IsMouseOver*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseOver
  nameWithType: UIElement3D.IsMouseOver
- uid: System.Windows.UIElement3D.IsStylusCaptured*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusCaptured
  nameWithType: UIElement3D.IsStylusCaptured
- uid: System.Windows.UIElement3D.IsStylusCaptureWithin*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusCaptureWithin
  nameWithType: UIElement3D.IsStylusCaptureWithin
- uid: System.Windows.UIElement3D.IsStylusDirectlyOver*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusDirectlyOver
  nameWithType: UIElement3D.IsStylusDirectlyOver
- uid: System.Windows.UIElement3D.IsStylusOver*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusOver
  nameWithType: UIElement3D.IsStylusOver
- uid: System.Windows.UIElement3D.IsVisible*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsVisible
  nameWithType: UIElement3D.IsVisible
- uid: System.Windows.UIElement3D.MoveFocus*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MoveFocus
  nameWithType: UIElement3D.MoveFocus
- uid: System.Windows.UIElement3D.OnAccessKey*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnAccessKey
  nameWithType: UIElement3D.OnAccessKey
- uid: System.Windows.UIElement3D.OnCreateAutomationPeer*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnCreateAutomationPeer
  nameWithType: UIElement3D.OnCreateAutomationPeer
- uid: System.Windows.UIElement3D.OnDragEnter*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnDragEnter
  nameWithType: UIElement3D.OnDragEnter
- uid: System.Windows.UIElement3D.OnDragLeave*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnDragLeave
  nameWithType: UIElement3D.OnDragLeave
- uid: System.Windows.UIElement3D.OnDragOver*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnDragOver
  nameWithType: UIElement3D.OnDragOver
- uid: System.Windows.UIElement3D.OnDrop*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnDrop
  nameWithType: UIElement3D.OnDrop
- uid: System.Windows.UIElement3D.OnGiveFeedback*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGiveFeedback
  nameWithType: UIElement3D.OnGiveFeedback
- uid: System.Windows.UIElement3D.OnGotFocus*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGotFocus
  nameWithType: UIElement3D.OnGotFocus
- uid: System.Windows.UIElement3D.OnGotKeyboardFocus*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGotKeyboardFocus
  nameWithType: UIElement3D.OnGotKeyboardFocus
- uid: System.Windows.UIElement3D.OnGotMouseCapture*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGotMouseCapture
  nameWithType: UIElement3D.OnGotMouseCapture
- uid: System.Windows.UIElement3D.OnGotStylusCapture*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGotStylusCapture
  nameWithType: UIElement3D.OnGotStylusCapture
- uid: System.Windows.UIElement3D.OnGotTouchCapture*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGotTouchCapture
  nameWithType: UIElement3D.OnGotTouchCapture
- uid: System.Windows.UIElement3D.OnIsKeyboardFocusedChanged*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsKeyboardFocusedChanged
  nameWithType: UIElement3D.OnIsKeyboardFocusedChanged
- uid: System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsKeyboardFocusWithinChanged
  nameWithType: UIElement3D.OnIsKeyboardFocusWithinChanged
- uid: System.Windows.UIElement3D.OnIsMouseCapturedChanged*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsMouseCapturedChanged
  nameWithType: UIElement3D.OnIsMouseCapturedChanged
- uid: System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsMouseCaptureWithinChanged
  nameWithType: UIElement3D.OnIsMouseCaptureWithinChanged
- uid: System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsMouseDirectlyOverChanged
  nameWithType: UIElement3D.OnIsMouseDirectlyOverChanged
- uid: System.Windows.UIElement3D.OnIsStylusCapturedChanged*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsStylusCapturedChanged
  nameWithType: UIElement3D.OnIsStylusCapturedChanged
- uid: System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsStylusCaptureWithinChanged
  nameWithType: UIElement3D.OnIsStylusCaptureWithinChanged
- uid: System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsStylusDirectlyOverChanged
  nameWithType: UIElement3D.OnIsStylusDirectlyOverChanged
- uid: System.Windows.UIElement3D.OnKeyDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnKeyDown
  nameWithType: UIElement3D.OnKeyDown
- uid: System.Windows.UIElement3D.OnKeyUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnKeyUp
  nameWithType: UIElement3D.OnKeyUp
- uid: System.Windows.UIElement3D.OnLostFocus*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnLostFocus
  nameWithType: UIElement3D.OnLostFocus
- uid: System.Windows.UIElement3D.OnLostKeyboardFocus*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnLostKeyboardFocus
  nameWithType: UIElement3D.OnLostKeyboardFocus
- uid: System.Windows.UIElement3D.OnLostMouseCapture*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnLostMouseCapture
  nameWithType: UIElement3D.OnLostMouseCapture
- uid: System.Windows.UIElement3D.OnLostStylusCapture*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnLostStylusCapture
  nameWithType: UIElement3D.OnLostStylusCapture
- uid: System.Windows.UIElement3D.OnLostTouchCapture*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnLostTouchCapture
  nameWithType: UIElement3D.OnLostTouchCapture
- uid: System.Windows.UIElement3D.OnMouseDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseDown
  nameWithType: UIElement3D.OnMouseDown
- uid: System.Windows.UIElement3D.OnMouseEnter*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseEnter
  nameWithType: UIElement3D.OnMouseEnter
- uid: System.Windows.UIElement3D.OnMouseLeave*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseLeave
  nameWithType: UIElement3D.OnMouseLeave
- uid: System.Windows.UIElement3D.OnMouseLeftButtonDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseLeftButtonDown
  nameWithType: UIElement3D.OnMouseLeftButtonDown
- uid: System.Windows.UIElement3D.OnMouseLeftButtonUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseLeftButtonUp
  nameWithType: UIElement3D.OnMouseLeftButtonUp
- uid: System.Windows.UIElement3D.OnMouseMove*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseMove
  nameWithType: UIElement3D.OnMouseMove
- uid: System.Windows.UIElement3D.OnMouseRightButtonDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseRightButtonDown
  nameWithType: UIElement3D.OnMouseRightButtonDown
- uid: System.Windows.UIElement3D.OnMouseRightButtonUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseRightButtonUp
  nameWithType: UIElement3D.OnMouseRightButtonUp
- uid: System.Windows.UIElement3D.OnMouseUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseUp
  nameWithType: UIElement3D.OnMouseUp
- uid: System.Windows.UIElement3D.OnMouseWheel*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseWheel
  nameWithType: UIElement3D.OnMouseWheel
- uid: System.Windows.UIElement3D.OnPreviewDragEnter*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewDragEnter
  nameWithType: UIElement3D.OnPreviewDragEnter
- uid: System.Windows.UIElement3D.OnPreviewDragLeave*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewDragLeave
  nameWithType: UIElement3D.OnPreviewDragLeave
- uid: System.Windows.UIElement3D.OnPreviewDragOver*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewDragOver
  nameWithType: UIElement3D.OnPreviewDragOver
- uid: System.Windows.UIElement3D.OnPreviewDrop*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewDrop
  nameWithType: UIElement3D.OnPreviewDrop
- uid: System.Windows.UIElement3D.OnPreviewGiveFeedback*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewGiveFeedback
  nameWithType: UIElement3D.OnPreviewGiveFeedback
- uid: System.Windows.UIElement3D.OnPreviewGotKeyboardFocus*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewGotKeyboardFocus
  nameWithType: UIElement3D.OnPreviewGotKeyboardFocus
- uid: System.Windows.UIElement3D.OnPreviewKeyDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewKeyDown
  nameWithType: UIElement3D.OnPreviewKeyDown
- uid: System.Windows.UIElement3D.OnPreviewKeyUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewKeyUp
  nameWithType: UIElement3D.OnPreviewKeyUp
- uid: System.Windows.UIElement3D.OnPreviewLostKeyboardFocus*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewLostKeyboardFocus
  nameWithType: UIElement3D.OnPreviewLostKeyboardFocus
- uid: System.Windows.UIElement3D.OnPreviewMouseDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseDown
  nameWithType: UIElement3D.OnPreviewMouseDown
- uid: System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseLeftButtonDown
  nameWithType: UIElement3D.OnPreviewMouseLeftButtonDown
- uid: System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseLeftButtonUp
  nameWithType: UIElement3D.OnPreviewMouseLeftButtonUp
- uid: System.Windows.UIElement3D.OnPreviewMouseMove*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseMove
  nameWithType: UIElement3D.OnPreviewMouseMove
- uid: System.Windows.UIElement3D.OnPreviewMouseRightButtonDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseRightButtonDown
  nameWithType: UIElement3D.OnPreviewMouseRightButtonDown
- uid: System.Windows.UIElement3D.OnPreviewMouseRightButtonUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseRightButtonUp
  nameWithType: UIElement3D.OnPreviewMouseRightButtonUp
- uid: System.Windows.UIElement3D.OnPreviewMouseUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseUp
  nameWithType: UIElement3D.OnPreviewMouseUp
- uid: System.Windows.UIElement3D.OnPreviewMouseWheel*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseWheel
  nameWithType: UIElement3D.OnPreviewMouseWheel
- uid: System.Windows.UIElement3D.OnPreviewQueryContinueDrag*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewQueryContinueDrag
  nameWithType: UIElement3D.OnPreviewQueryContinueDrag
- uid: System.Windows.UIElement3D.OnPreviewStylusButtonDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusButtonDown
  nameWithType: UIElement3D.OnPreviewStylusButtonDown
- uid: System.Windows.UIElement3D.OnPreviewStylusButtonUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusButtonUp
  nameWithType: UIElement3D.OnPreviewStylusButtonUp
- uid: System.Windows.UIElement3D.OnPreviewStylusDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusDown
  nameWithType: UIElement3D.OnPreviewStylusDown
- uid: System.Windows.UIElement3D.OnPreviewStylusInAirMove*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusInAirMove
  nameWithType: UIElement3D.OnPreviewStylusInAirMove
- uid: System.Windows.UIElement3D.OnPreviewStylusInRange*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusInRange
  nameWithType: UIElement3D.OnPreviewStylusInRange
- uid: System.Windows.UIElement3D.OnPreviewStylusMove*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusMove
  nameWithType: UIElement3D.OnPreviewStylusMove
- uid: System.Windows.UIElement3D.OnPreviewStylusOutOfRange*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusOutOfRange
  nameWithType: UIElement3D.OnPreviewStylusOutOfRange
- uid: System.Windows.UIElement3D.OnPreviewStylusSystemGesture*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusSystemGesture
  nameWithType: UIElement3D.OnPreviewStylusSystemGesture
- uid: System.Windows.UIElement3D.OnPreviewStylusUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusUp
  nameWithType: UIElement3D.OnPreviewStylusUp
- uid: System.Windows.UIElement3D.OnPreviewTextInput*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewTextInput
  nameWithType: UIElement3D.OnPreviewTextInput
- uid: System.Windows.UIElement3D.OnPreviewTouchDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewTouchDown
  nameWithType: UIElement3D.OnPreviewTouchDown
- uid: System.Windows.UIElement3D.OnPreviewTouchMove*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewTouchMove
  nameWithType: UIElement3D.OnPreviewTouchMove
- uid: System.Windows.UIElement3D.OnPreviewTouchUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewTouchUp
  nameWithType: UIElement3D.OnPreviewTouchUp
- uid: System.Windows.UIElement3D.OnQueryContinueDrag*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnQueryContinueDrag
  nameWithType: UIElement3D.OnQueryContinueDrag
- uid: System.Windows.UIElement3D.OnQueryCursor*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnQueryCursor
  nameWithType: UIElement3D.OnQueryCursor
- uid: System.Windows.UIElement3D.OnStylusButtonDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusButtonDown
  nameWithType: UIElement3D.OnStylusButtonDown
- uid: System.Windows.UIElement3D.OnStylusButtonUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusButtonUp
  nameWithType: UIElement3D.OnStylusButtonUp
- uid: System.Windows.UIElement3D.OnStylusDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusDown
  nameWithType: UIElement3D.OnStylusDown
- uid: System.Windows.UIElement3D.OnStylusEnter*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusEnter
  nameWithType: UIElement3D.OnStylusEnter
- uid: System.Windows.UIElement3D.OnStylusInAirMove*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusInAirMove
  nameWithType: UIElement3D.OnStylusInAirMove
- uid: System.Windows.UIElement3D.OnStylusInRange*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusInRange
  nameWithType: UIElement3D.OnStylusInRange
- uid: System.Windows.UIElement3D.OnStylusLeave*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusLeave
  nameWithType: UIElement3D.OnStylusLeave
- uid: System.Windows.UIElement3D.OnStylusMove*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusMove
  nameWithType: UIElement3D.OnStylusMove
- uid: System.Windows.UIElement3D.OnStylusOutOfRange*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusOutOfRange
  nameWithType: UIElement3D.OnStylusOutOfRange
- uid: System.Windows.UIElement3D.OnStylusSystemGesture*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusSystemGesture
  nameWithType: UIElement3D.OnStylusSystemGesture
- uid: System.Windows.UIElement3D.OnStylusUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusUp
  nameWithType: UIElement3D.OnStylusUp
- uid: System.Windows.UIElement3D.OnTextInput*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTextInput
  nameWithType: UIElement3D.OnTextInput
- uid: System.Windows.UIElement3D.OnTouchDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTouchDown
  nameWithType: UIElement3D.OnTouchDown
- uid: System.Windows.UIElement3D.OnTouchEnter*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTouchEnter
  nameWithType: UIElement3D.OnTouchEnter
- uid: System.Windows.UIElement3D.OnTouchLeave*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTouchLeave
  nameWithType: UIElement3D.OnTouchLeave
- uid: System.Windows.UIElement3D.OnTouchMove*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTouchMove
  nameWithType: UIElement3D.OnTouchMove
- uid: System.Windows.UIElement3D.OnTouchUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTouchUp
  nameWithType: UIElement3D.OnTouchUp
- uid: System.Windows.UIElement3D.OnUpdateModel*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnUpdateModel
  nameWithType: UIElement3D.OnUpdateModel
- uid: System.Windows.UIElement3D.OnVisualParentChanged*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnVisualParentChanged
  nameWithType: UIElement3D.OnVisualParentChanged
- uid: System.Windows.UIElement3D.PredictFocus*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PredictFocus
  nameWithType: UIElement3D.PredictFocus
- uid: System.Windows.UIElement3D.RaiseEvent*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: RaiseEvent
  nameWithType: UIElement3D.RaiseEvent
- uid: System.Windows.UIElement3D.ReleaseAllTouchCaptures*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ReleaseAllTouchCaptures
  nameWithType: UIElement3D.ReleaseAllTouchCaptures
- uid: System.Windows.UIElement3D.ReleaseMouseCapture*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ReleaseMouseCapture
  nameWithType: UIElement3D.ReleaseMouseCapture
- uid: System.Windows.UIElement3D.ReleaseStylusCapture*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ReleaseStylusCapture
  nameWithType: UIElement3D.ReleaseStylusCapture
- uid: System.Windows.UIElement3D.ReleaseTouchCapture*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ReleaseTouchCapture
  nameWithType: UIElement3D.ReleaseTouchCapture
- uid: System.Windows.UIElement3D.RemoveHandler*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: RemoveHandler
  nameWithType: UIElement3D.RemoveHandler
- uid: System.Windows.UIElement3D.ShouldSerializeCommandBindings*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ShouldSerializeCommandBindings
  nameWithType: UIElement3D.ShouldSerializeCommandBindings
- uid: System.Windows.UIElement3D.ShouldSerializeInputBindings*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ShouldSerializeInputBindings
  nameWithType: UIElement3D.ShouldSerializeInputBindings
- uid: System.Windows.UIElement3D.TouchesCaptured*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchesCaptured
  nameWithType: UIElement3D.TouchesCaptured
- uid: System.Windows.UIElement3D.TouchesCapturedWithin*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchesCapturedWithin
  nameWithType: UIElement3D.TouchesCapturedWithin
- uid: System.Windows.UIElement3D.TouchesDirectlyOver*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchesDirectlyOver
  nameWithType: UIElement3D.TouchesDirectlyOver
- uid: System.Windows.UIElement3D.TouchesOver*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchesOver
  nameWithType: UIElement3D.TouchesOver
- uid: System.Windows.UIElement3D.Visibility*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: Visibility
  nameWithType: UIElement3D.Visibility
