### YamlMime:ManagedReference
items:
- uid: System.Net.Http.MessageProcessingHandler
  id: MessageProcessingHandler
  children:
  - System.Net.Http.MessageProcessingHandler.#ctor
  - System.Net.Http.MessageProcessingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  - System.Net.Http.MessageProcessingHandler.ProcessRequest(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  - System.Net.Http.MessageProcessingHandler.ProcessResponse(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)
  - System.Net.Http.MessageProcessingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  langs:
  - csharp
  name: MessageProcessingHandler
  nameWithType: MessageProcessingHandler
  fullName: System.Net.Http.MessageProcessingHandler
  type: Class
  summary: "僅對執行一些小型處理的要求和/或回應訊息的處理常式的基底類型。"
  remarks: "實際的回應訊息建立會委派至內部處理常式。 MessageProcessingHandler 適合用於處理常式不需要非同步作業，因為作業要求和回應訊息的速度。       最常見的用法是衍生自這個類別並覆寫<xref:System.Net.Http.MessageProcessingHandler.ProcessRequest%2A>和<xref:System.Net.Http.MessageProcessingHandler.ProcessResponse%2A>方法。</xref:System.Net.Http.MessageProcessingHandler.ProcessResponse%2A> </xref:System.Net.Http.MessageProcessingHandler.ProcessRequest%2A>"
  syntax:
    content: 'public abstract class MessageProcessingHandler : System.Net.Http.DelegatingHandler'
  inheritance:
  - System.Object
  - System.Net.Http.HttpMessageHandler
  - System.Net.Http.DelegatingHandler
  implements: []
  inheritedMembers:
  - System.Net.Http.DelegatingHandler.Dispose(System.Boolean)
  - System.Net.Http.DelegatingHandler.InnerHandler
  - System.Net.Http.HttpMessageHandler.Dispose
  platform:
  - net462
- uid: System.Net.Http.MessageProcessingHandler.#ctor
  id: '#ctor'
  parent: System.Net.Http.MessageProcessingHandler
  langs:
  - csharp
  name: MessageProcessingHandler()
  nameWithType: MessageProcessingHandler.MessageProcessingHandler()
  fullName: System.Net.Http.MessageProcessingHandler.MessageProcessingHandler()
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "建立的執行個體<xref href=&quot;System.Net.Http.MessageProcessingHandler&quot;></xref>類別。"
  syntax:
    content: protected MessageProcessingHandler ();
    parameters: []
  overload: System.Net.Http.MessageProcessingHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.MessageProcessingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  id: '#ctor(System.Net.Http.HttpMessageHandler)'
  parent: System.Net.Http.MessageProcessingHandler
  langs:
  - csharp
  name: MessageProcessingHandler(HttpMessageHandler)
  nameWithType: MessageProcessingHandler.MessageProcessingHandler(HttpMessageHandler)
  fullName: System.Net.Http.MessageProcessingHandler.MessageProcessingHandler(HttpMessageHandler)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "建立的執行個體<xref href=&quot;System.Net.Http.MessageProcessingHandler&quot;></xref>與特定的內部處理常式的類別。"
  syntax:
    content: protected MessageProcessingHandler (System.Net.Http.HttpMessageHandler innerHandler);
    parameters:
    - id: innerHandler
      type: System.Net.Http.HttpMessageHandler
      description: "內部處理常式負責處理 HTTP 回應訊息。"
  overload: System.Net.Http.MessageProcessingHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.MessageProcessingHandler.ProcessRequest(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: ProcessRequest(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.MessageProcessingHandler
  langs:
  - csharp
  name: ProcessRequest(HttpRequestMessage,CancellationToken)
  nameWithType: MessageProcessingHandler.ProcessRequest(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.MessageProcessingHandler.ProcessRequest(HttpRequestMessage,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "每個要求傳送到伺服器上執行處理。"
  remarks: "應用程式就會覆寫這個方法以實作自訂處理 HTTP 要求訊息傳送到伺服器之前。"
  syntax:
    content: protected abstract System.Net.Http.HttpRequestMessage ProcessRequest (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "要處理的 HTTP 要求訊息。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消語彙基元可以由其他物件或執行緒用來接收取消通知。"
    return:
      type: System.Net.Http.HttpRequestMessage
      description: "處理 HTTP 要求訊息。"
  overload: System.Net.Http.MessageProcessingHandler.ProcessRequest*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.MessageProcessingHandler.ProcessResponse(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)
  id: ProcessResponse(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.MessageProcessingHandler
  langs:
  - csharp
  name: ProcessResponse(HttpResponseMessage,CancellationToken)
  nameWithType: MessageProcessingHandler.ProcessResponse(HttpResponseMessage,CancellationToken)
  fullName: System.Net.Http.MessageProcessingHandler.ProcessResponse(HttpResponseMessage,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "每個回應從伺服器上執行處理。"
  remarks: "應用程式就會覆寫這個方法，以從伺服器接收到之後實作自訂 HTTP 回應訊息的處理。"
  syntax:
    content: protected abstract System.Net.Http.HttpResponseMessage ProcessResponse (System.Net.Http.HttpResponseMessage response, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: response
      type: System.Net.Http.HttpResponseMessage
      description: "要處理的 HTTP 回應訊息。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消語彙基元可以由其他物件或執行緒用來接收取消通知。"
    return:
      type: System.Net.Http.HttpResponseMessage
      description: "已處理的 HTTP 回應訊息。"
  overload: System.Net.Http.MessageProcessingHandler.ProcessResponse*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.MessageProcessingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.MessageProcessingHandler
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: MessageProcessingHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.MessageProcessingHandler.SendAsync(HttpRequestMessage,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "將 HTTP 要求傳送至內部處理常式將傳送至伺服器，以非同步作業。"
  remarks: "這項作業不會封鎖。 此可覆寫方法的實作 SendAsync 會轉送至內部處理常式的 HTTP 要求傳送到伺服器以非同步作業。"
  syntax:
    content: protected override sealed System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "要傳送至伺服器的 HTTP 要求訊息。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消語彙基元可以由其他物件或執行緒用來接收取消通知。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "工作物件，表示非同步作業。"
  overload: System.Net.Http.MessageProcessingHandler.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Net.Http.DelegatingHandler
  isExternal: false
  name: System.Net.Http.DelegatingHandler
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.Http.MessageProcessingHandler.#ctor
  parent: System.Net.Http.MessageProcessingHandler
  isExternal: false
  name: MessageProcessingHandler()
  nameWithType: MessageProcessingHandler.MessageProcessingHandler()
  fullName: System.Net.Http.MessageProcessingHandler.MessageProcessingHandler()
- uid: System.Net.Http.MessageProcessingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  parent: System.Net.Http.MessageProcessingHandler
  isExternal: false
  name: MessageProcessingHandler(HttpMessageHandler)
  nameWithType: MessageProcessingHandler.MessageProcessingHandler(HttpMessageHandler)
  fullName: System.Net.Http.MessageProcessingHandler.MessageProcessingHandler(HttpMessageHandler)
- uid: System.Net.Http.HttpMessageHandler
  parent: System.Net.Http
  isExternal: false
  name: HttpMessageHandler
  nameWithType: HttpMessageHandler
  fullName: System.Net.Http.HttpMessageHandler
- uid: System.Net.Http.MessageProcessingHandler.ProcessRequest(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.MessageProcessingHandler
  isExternal: false
  name: ProcessRequest(HttpRequestMessage,CancellationToken)
  nameWithType: MessageProcessingHandler.ProcessRequest(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.MessageProcessingHandler.ProcessRequest(HttpRequestMessage,CancellationToken)
- uid: System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.Http.MessageProcessingHandler.ProcessResponse(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.MessageProcessingHandler
  isExternal: false
  name: ProcessResponse(HttpResponseMessage,CancellationToken)
  nameWithType: MessageProcessingHandler.ProcessResponse(HttpResponseMessage,CancellationToken)
  fullName: System.Net.Http.MessageProcessingHandler.ProcessResponse(HttpResponseMessage,CancellationToken)
- uid: System.Net.Http.HttpResponseMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpResponseMessage
  nameWithType: HttpResponseMessage
  fullName: System.Net.Http.HttpResponseMessage
- uid: System.Net.Http.MessageProcessingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.MessageProcessingHandler
  isExternal: false
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: MessageProcessingHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.MessageProcessingHandler.SendAsync(HttpRequestMessage,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Http.HttpResponseMessage>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.MessageProcessingHandler.#ctor*
  parent: System.Net.Http.MessageProcessingHandler
  isExternal: false
  name: MessageProcessingHandler
  nameWithType: MessageProcessingHandler.MessageProcessingHandler
- uid: System.Net.Http.MessageProcessingHandler.ProcessRequest*
  parent: System.Net.Http.MessageProcessingHandler
  isExternal: false
  name: ProcessRequest
  nameWithType: MessageProcessingHandler.ProcessRequest
- uid: System.Net.Http.MessageProcessingHandler.ProcessResponse*
  parent: System.Net.Http.MessageProcessingHandler
  isExternal: false
  name: ProcessResponse
  nameWithType: MessageProcessingHandler.ProcessResponse
- uid: System.Net.Http.MessageProcessingHandler.SendAsync*
  parent: System.Net.Http.MessageProcessingHandler
  isExternal: false
  name: SendAsync
  nameWithType: MessageProcessingHandler.SendAsync
