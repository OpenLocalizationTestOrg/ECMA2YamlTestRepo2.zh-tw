### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.Rfc2898DeriveBytes
  id: Rfc2898DeriveBytes
  children:
  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])
  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)
  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)
  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)
  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)
  - System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])
  - System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)
  - System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)
  - System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount
  - System.Security.Cryptography.Rfc2898DeriveBytes.Reset
  - System.Security.Cryptography.Rfc2898DeriveBytes.Salt
  langs:
  - csharp
  name: Rfc2898DeriveBytes
  nameWithType: Rfc2898DeriveBytes
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes
  type: Class
  summary: "實作密碼式的金鑰衍生功能 PBKDF2，使用虛擬亂數產生器根據<xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;> </xref>。"
  remarks: "Rfc2898DeriveBytes 接受密碼、 salt 和反覆項目計數，並接著會產生索引鍵，透過呼叫<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>方法。</xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>       RFC 2898 包含密碼和 salt，建立金鑰和初始化向量 (IV) 的方法。 您可以使用 PBKDF2，密碼為基礎的金鑰衍生函式，來衍生金鑰使用的虛擬隨機函式，以產生幾乎不受限制長度的金鑰。 Rfc2898DeriveBytes 類別可以用來產生衍生的金鑰的基底的索引鍵與其他參數。 密碼金鑰衍生函式中的基底的索引鍵是密碼，而其他參數則是 salt 值和反覆項目計數。       如需 PBKDF2 的詳細資訊，請參閱 RFC 2898&quot;PKCS #5︰ 密碼型密碼編譯規格 2.0 版中，&quot;上可用[要求註解的網站](http://go.microsoft.com/fwlink/?LinkID=37119)。 完整的詳細資訊，請參閱區段 5.2，&quot;PBKDF2，&quot;。      > [!IMPORTANT] > 從未硬式編碼在原始程式碼中的密碼。  可以從組件擷取硬式編碼的密碼，利用[Ildasm.exe （IL 解譯器）](~/add/includes/ajax-current-ext-md.md)、 使用十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。"
  example:
  - "The following code example uses the Rfc2898DeriveBytes class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.  It then encrypts and decrypts some data using the keys.  \n  \n [!code-cs[rfc28981#1](~/add/codesnippet/csharp/t-system.security.crypto_117_1.cs)]\n [!code-vb[rfc28981#1](~/add/codesnippet/visualbasic/t-system.security.crypto_117_1.vb)]\n [!code-cpp[rfc28981#1](~/add/codesnippet/cpp/t-system.security.crypto_117_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class Rfc2898DeriveBytes : System.Security.Cryptography.DeriveBytes
  inheritance:
  - System.Object
  - System.Security.Cryptography.DeriveBytes
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.DeriveBytes.Dispose
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])
  id: '#ctor(System.String,System.Byte[])'
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Rfc2898DeriveBytes(String,Byte[])
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[])
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.Rfc2898DeriveBytes&quot;></xref>類別使用密碼和 salt 來衍生金鑰。"
  remarks: "Salt 大小必須為 8 個位元組或更大。       RFC 2898 包含密碼和 salt，建立金鑰和初始化向量 (IV) 的方法。 您可以使用 PBKDF2，密碼為基礎的金鑰衍生函式，來衍生金鑰使用的虛擬隨機函式，以產生幾乎不受限制長度的金鑰。 <xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別可以用來產生衍生的金鑰的基底的索引鍵與其他參數。</xref:System.Security.Cryptography.Rfc2898DeriveBytes> 密碼金鑰衍生函式中的基底的索引鍵是密碼，而其他參數則是 salt 值和反覆項目計數。       如需 PBKDF2 的詳細資訊，請參閱 RFC 2898&quot;PKCS #5︰ 密碼型密碼編譯規格 2.0 版中，&quot;上可用[要求註解的網站](http://go.microsoft.com/fwlink/?LinkID=37119)。 完整的詳細資訊，請參閱區段 5.2，&quot;PBKDF2，&quot;。      > [!IMPORTANT] > 從未硬式編碼在原始程式碼中的密碼。  可以從組件擷取硬式編碼的密碼，利用[Ildasm.exe （IL 解譯器）](~/add/includes/ajax-current-ext-md.md)、 使用十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。"
  example:
  - "The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.  It then encrypts and decrypts some data using the keys.  \n  \n [!code-cs[rfc28981#1](~/add/codesnippet/csharp/7aa0756c-8905-4e75-ae9a-_1.cs)]\n [!code-vb[rfc28981#1](~/add/codesnippet/visualbasic/7aa0756c-8905-4e75-ae9a-_1.vb)]\n [!code-cpp[rfc28981#1](~/add/codesnippet/cpp/7aa0756c-8905-4e75-ae9a-_1.cpp)]"
  syntax:
    content: public Rfc2898DeriveBytes (string password, byte[] salt);
    parameters:
    - id: password
      type: System.String
      description: "用來衍生金鑰的密碼。"
    - id: salt
      type: System.Byte[]
      description: "用來衍生金鑰的金鑰 salt。"
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定的 salt 大小小於 8 個位元組或反覆項目計數小於 1。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "密碼或 salt <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Rfc2898DeriveBytes(String,Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.Rfc2898DeriveBytes&quot;></xref>類別使用的密碼和 salt 大小來衍生金鑰。"
  remarks: "Salt 大小必須為 8 個位元組或更大。       RFC 2898 包含密碼和 salt，建立金鑰和初始化向量 (IV) 的方法。 您可以使用 PBKDF2，密碼為基礎的金鑰衍生函式，來衍生金鑰使用的虛擬隨機函式，以產生幾乎不受限制長度的金鑰。 <xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別可以用來產生衍生的金鑰的基底的索引鍵與其他參數。</xref:System.Security.Cryptography.Rfc2898DeriveBytes> 密碼金鑰衍生函式中的基底的索引鍵是密碼，而其他參數則是 salt 值和反覆項目計數。       如需 PBKDF2 的詳細資訊，請參閱 RFC 2898&quot;PKCS #5︰ 密碼型密碼編譯規格 2.0 版中，&quot;上可用[要求註解的網站](http://go.microsoft.com/fwlink/?LinkID=37119)。 完整的詳細資訊，請參閱區段 5.2，&quot;PBKDF2，&quot;。      > [!IMPORTANT] > 從未硬式編碼在原始程式碼中的密碼。  可以從組件擷取硬式編碼的密碼，利用[Ildasm.exe （IL 解譯器）](~/add/includes/ajax-current-ext-md.md)、 使用十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。"
  syntax:
    content: public Rfc2898DeriveBytes (string password, int saltSize);
    parameters:
    - id: password
      type: System.String
      description: "用來衍生金鑰的密碼。"
    - id: saltSize
      type: System.Int32
      description: "您想要產生的類別之隨機 salt 的大小。"
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定的 salt 大小小於 8 個位元組。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "密碼或 salt <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)
  id: '#ctor(System.Byte[],System.Byte[],System.Int32)'
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Rfc2898DeriveBytes(Byte[],Byte[],Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(Byte[],Byte[],Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(Byte[],Byte[],Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.Rfc2898DeriveBytes&quot;></xref>類別來衍生金鑰使用密碼、 salt 和反覆項目數目。"
  remarks: "Salt 大小必須為 8 個位元組或更大，而且反覆項目計數必須小於或等於零。 建議的最小反覆項目數目是 1000年。       RFC 2898 包含密碼和 salt，建立金鑰和初始化向量 (IV) 的方法。 您可以使用 PBKDF2，密碼為基礎的金鑰衍生函式，來衍生金鑰使用的虛擬隨機函式，以產生幾乎不受限制長度的金鑰。 <xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別可以用來產生衍生的金鑰的基底的索引鍵與其他參數。</xref:System.Security.Cryptography.Rfc2898DeriveBytes> 密碼金鑰衍生函式中的基底的索引鍵是密碼，而其他參數則是 salt 值和反覆項目計數。       如需 PBKDF2 的詳細資訊，請參閱 RFC 2898&quot;PKCS #5︰ 密碼型密碼編譯規格 2.0 版中，&quot;上可用[要求註解的網站](http://go.microsoft.com/fwlink/?LinkID=37119)。 完整的詳細資訊，請參閱區段 5.2，&quot;PBKDF2，&quot;。      > [!IMPORTANT] > 從未硬式編碼在原始程式碼中的密碼。  可以從組件擷取硬式編碼的密碼，利用[Ildasm.exe （IL 解譯器）](~/add/includes/ajax-current-ext-md.md)、 使用十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。"
  syntax:
    content: public Rfc2898DeriveBytes (byte[] password, byte[] salt, int iterations);
    parameters:
    - id: password
      type: System.Byte[]
      description: "用來衍生金鑰的密碼。"
    - id: salt
      type: System.Byte[]
      description: "用來衍生金鑰的金鑰 salt。"
    - id: iterations
      type: System.Int32
      description: "作業的反覆項目數目。"
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定的 salt 大小小於 8 個位元組或反覆項目計數小於 1。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "密碼或 salt <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)
  id: '#ctor(System.String,System.Byte[],System.Int32)'
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Rfc2898DeriveBytes(String,Byte[],Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[],Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[],Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.Rfc2898DeriveBytes&quot;></xref>類別來衍生金鑰使用密碼、 salt 和反覆項目數目。"
  remarks: "Salt 大小必須為 8 個位元組或更大，而且反覆項目計數必須小於或等於零。 建議的最小反覆項目數目是 1000年。       RFC 2898 包含密碼和 salt，建立金鑰和初始化向量 (IV) 的方法。 您可以使用 PBKDF2，密碼為基礎的金鑰衍生函式，來衍生金鑰使用的虛擬隨機函式，以產生幾乎不受限制長度的金鑰。 <xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別可以用來產生衍生的金鑰的基底的索引鍵與其他參數。</xref:System.Security.Cryptography.Rfc2898DeriveBytes> 密碼金鑰衍生函式中的基底的索引鍵是密碼，而其他參數則是 salt 值和反覆項目計數。       如需 PBKDF2 的詳細資訊，請參閱 RFC 2898&quot;PKCS #5︰ 密碼型密碼編譯規格 2.0 版中，&quot;上可用[要求註解的網站](http://go.microsoft.com/fwlink/?LinkID=37119)。 完整的詳細資訊，請參閱區段 5.2，&quot;PBKDF2，&quot;。      > [!IMPORTANT] > 從未硬式編碼在原始程式碼中的密碼。  可以從組件擷取硬式編碼的密碼，利用[Ildasm.exe （IL 解譯器）](~/add/includes/ajax-current-ext-md.md)、 使用十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。"
  example:
  - "The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.  It then encrypts and decrypts some data using the keys.  \n  \n [!code-cs[rfc28981#1](~/add/codesnippet/csharp/8b79aa42-3b6a-4a39-985a-_1.cs)]\n [!code-vb[rfc28981#1](~/add/codesnippet/visualbasic/8b79aa42-3b6a-4a39-985a-_1.vb)]\n [!code-cpp[rfc28981#1](~/add/codesnippet/cpp/8b79aa42-3b6a-4a39-985a-_1.cpp)]"
  syntax:
    content: public Rfc2898DeriveBytes (string password, byte[] salt, int iterations);
    parameters:
    - id: password
      type: System.String
      description: "用來衍生金鑰的密碼。"
    - id: salt
      type: System.Byte[]
      description: "用來衍生金鑰的金鑰 salt。"
    - id: iterations
      type: System.Int32
      description: "作業的反覆項目數目。"
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定的 salt 大小小於 8 個位元組或反覆項目計數小於 1。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "密碼或 salt <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)
  id: '#ctor(System.String,System.Int32,System.Int32)'
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Rfc2898DeriveBytes(String,Int32,Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32,Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.Rfc2898DeriveBytes&quot;></xref>類別來衍生金鑰使用密碼、 salt 的大小和數目的反覆項目。"
  remarks: "Salt 大小必須為 8 個位元組或更大，而且反覆項目計數必須小於或等於零。 建議的最小反覆項目數目是 1000年。       RFC 2898 包含密碼和 salt，建立金鑰和初始化向量 (IV) 的方法。 您可以使用 PBKDF2，密碼為基礎的金鑰衍生函式，來衍生金鑰使用的虛擬隨機函式，以產生幾乎不受限制長度的金鑰。 <xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別可以用來產生衍生的金鑰的基底的索引鍵與其他參數。</xref:System.Security.Cryptography.Rfc2898DeriveBytes> 密碼金鑰衍生函式中的基底的索引鍵是密碼，而其他參數則是 salt 值和反覆項目計數。       如需有關 PBKDF2 的詳細資訊，請參閱 RFC 2898&quot;PKCS #5︰ 密碼型密碼編譯規格 2.0 版中，「 上可用[要求註解的網站](http://go.microsoft.com/fwlink/?LinkID=37119)。 完整的詳細資訊，請參閱區段 5.2，&quot;PBKDF2，&quot;。      > [!IMPORTANT] > 從未硬式編碼在原始程式碼中的密碼。  可以從組件擷取硬式編碼的密碼，利用[Ildasm.exe （IL 解譯器）](~/add/includes/ajax-current-ext-md.md)、 使用十六進位的編輯器，或藉由直接開啟 Notepad.exe 之類的文字編輯器中的組件。"
  syntax:
    content: public Rfc2898DeriveBytes (string password, int saltSize, int iterations);
    parameters:
    - id: password
      type: System.String
      description: "用來衍生金鑰的密碼。"
    - id: saltSize
      type: System.Int32
      description: "您想要產生的類別之隨機 salt 的大小。"
    - id: iterations
      type: System.Int32
      description: "作業的反覆項目數目。"
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定的 salt 大小小於 8 個位元組或反覆項目計數小於 1。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "密碼或 salt <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>iterations </code>已超出範圍。 這個參數需要非負數。"
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])
  id: CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: CryptDeriveKey(String,String,Int32,Byte[])
  nameWithType: Rfc2898DeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "衍生的密碼編譯金鑰<xref href=&quot;System.Security.Cryptography.Rfc2898DeriveBytes&quot;></xref>物件。"
  remarks: "此函式是 Crypto API 函式 CryptDeriveKey()，包裝函式，為了提供互通性與使用 Crypto API 的應用程式。       如果`keySize`參數設定為 0 位元時，使用指定的演算法的預設大小。"
  syntax:
    content: public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);
    parameters:
    - id: algname
      type: System.String
      description: "用來衍生金鑰的演算法名稱。"
    - id: alghashname
      type: System.String
      description: "要用來衍生金鑰的雜湊演算法名稱。"
    - id: keySize
      type: System.Int32
      description: "在位元為單位來衍生金鑰的大小。"
    - id: rgbIV
      type: System.Byte[]
      description: "初始化向量 (IV) 用來衍生金鑰。"
    return:
      type: System.Byte[]
      description: "衍生的金鑰。"
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<code> keySize </code>參數不正確。       -或者-無法取得密碼編譯服務提供者 (CSP)。       -或- <code> algname </code>參數不是有效的演算法名稱。       -或- <code> alghashname </code>參數不是有效的雜湊演算法名稱。"
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Rfc2898DeriveBytes.Dispose(Boolean)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "所使用的 unmanaged 的資源釋出<xref href=&quot;System.Security.Cryptography.Rfc2898DeriveBytes&quot;></xref>類別，並選擇性釋放 managed 的資源。"
  remarks: "這個方法會呼叫公用`Dispose()`方法和`Finalize`方法。 `Dispose()`叫用受保護`Dispose(Boolean)`方法`disposing`參數設定為`true`。 `Finalize`叫用`Dispose`與`disposing`設`false`。       當`disposing`參數是`true`，這個方法的任何 managed 物件所持有的資源全部釋出這個<xref:System.Security.Cryptography.Rfc2898DeriveBytes>參考。</xref:System.Security.Cryptography.Rfc2898DeriveBytes> 這個方法會叫用`Dispose()`每個參考物件的方法。"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>表示釋放 managed 和 unmanaged 資源，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>表示只釋放 unmanaged 的資源。"
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)
  id: GetBytes(System.Int32)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: GetBytes(Int32)
  nameWithType: Rfc2898DeriveBytes.GetBytes(Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "傳回這個物件的似隨機金鑰。"
  remarks: "<xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別會實作使用虛擬亂數產生器根據<xref:System.Security.Cryptography.HMACSHA1>.</xref:System.Security.Cryptography.HMACSHA1> PBKDF2 功能</xref:System.Security.Cryptography.Rfc2898DeriveBytes> <xref:System.Security.Cryptography.Rfc2898DeriveBytes>類別會採用密碼、 salt 和反覆項目計數，然後再產生金鑰，透過呼叫 GetBytes 方法。</xref:System.Security.Cryptography.Rfc2898DeriveBytes> 重複的呼叫這個方法不會產生相同的索引鍵。相反地，將附加兩個方法呼叫的 GetBytes 與`cb`參數值的`20`就相當於呼叫一次使用 GetBytes 方法`cb`參數值的`40`。"
  example:
  - "The following example shows how to use the GetBytes method to get the key for an instance of <xref:System.Security.Cryptography.Rfc2898DeriveBytes>. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.  \n  \n [!code-cs[rfc28981#2](~/add/codesnippet/csharp/m-system.security.crypto_127_1.cs)]\n [!code-vb[rfc28981#2](~/add/codesnippet/visualbasic/m-system.security.crypto_127_1.vb)]\n [!code-cpp[rfc28981#2](~/add/codesnippet/cpp/m-system.security.crypto_127_1.cpp)]"
  syntax:
    content: public override byte[] GetBytes (int cb);
    parameters:
    - id: cb
      type: System.Int32
      description: "若要產生的似隨機金鑰位元組數目。"
    return:
      type: System.Byte[]
      description: "位元組陣列，以虛擬隨機金鑰位元組填入。"
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>cb </code>已超出範圍。 這個參數需要非負數。"
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount
  id: IterationCount
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: IterationCount
  nameWithType: Rfc2898DeriveBytes.IterationCount
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得或設定作業的反覆項目數。"
  remarks: "反覆項目計數是執行作業的次數。 這個方法，計數必須大於零。 建議的最小反覆項目數目是 1000年。"
  example:
  - "The following example shows how to use the IterationCount property to display the number of iterations used in the generation of the key. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.  \n  \n [!code-cs[rfc28981#3](~/add/codesnippet/csharp/p-system.security.crypto_117_1.cs)]\n [!code-vb[rfc28981#3](~/add/codesnippet/visualbasic/p-system.security.crypto_117_1.vb)]\n [!code-cpp[rfc28981#3](~/add/codesnippet/cpp/p-system.security.crypto_117_1.cpp)]"
  syntax:
    content: public int IterationCount { get; set; }
    return:
      type: System.Int32
      description: "作業的反覆項目數目。"
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "反覆項目數為小於 1。"
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Reset
  id: Reset
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Reset()
  nameWithType: Rfc2898DeriveBytes.Reset()
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "重設作業的狀態。"
  remarks: "如果已修改的 salt 或反覆項目計數，會自動呼叫這個方法。"
  example:
  - "The following example shows how to use the Reset method. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.  \n  \n [!code-cs[rfc28981#5](~/add/codesnippet/csharp/m-system.security.crypto_26_1.cs)]\n [!code-vb[rfc28981#5](~/add/codesnippet/visualbasic/m-system.security.crypto_26_1.vb)]\n [!code-cpp[rfc28981#5](~/add/codesnippet/cpp/m-system.security.crypto_26_1.cpp)]"
  syntax:
    content: public override void Reset ();
    parameters: []
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Salt
  id: Salt
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Salt
  nameWithType: Rfc2898DeriveBytes.Salt
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Salt
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得或設定用於操作的金鑰 salt 值。"
  remarks: "Salt，一組隨機的位元組，可用來讓未經授權的解密更加困難的訊息。 字典攻擊是攻擊者嘗試藉由比較加密的值與最可能的索引鍵的先前計算加密值解密加密的訊息。 這種攻擊進行更為困難的 salt，或隨機位元組，結尾之前的金鑰衍生密碼的簡介。"
  syntax:
    content: public byte[] Salt { get; set; }
    return:
      type: System.Byte[]
      description: "用於操作的金鑰 salt 值。"
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.Salt*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定的 salt 大小小於 8 個位元組。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Salt 是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
references:
- uid: System.Security.Cryptography.DeriveBytes
  isExternal: false
  name: System.Security.Cryptography.DeriveBytes
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Rfc2898DeriveBytes(String,Byte[])
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[])
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Rfc2898DeriveBytes(String,Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Rfc2898DeriveBytes(Byte[],Byte[],Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(Byte[],Byte[],Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(Byte[],Byte[],Int32)
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Rfc2898DeriveBytes(String,Byte[],Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[],Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[],Int32)
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Rfc2898DeriveBytes(String,Int32,Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32,Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32,Int32)
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: CryptDeriveKey(String,String,Int32,Byte[])
  nameWithType: Rfc2898DeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Rfc2898DeriveBytes.Dispose(Boolean)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: GetBytes(Int32)
  nameWithType: Rfc2898DeriveBytes.GetBytes(Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(Int32)
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: IterationCount
  nameWithType: Rfc2898DeriveBytes.IterationCount
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Reset
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Reset()
  nameWithType: Rfc2898DeriveBytes.Reset()
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Reset()
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Salt
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Salt
  nameWithType: Rfc2898DeriveBytes.Salt
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Salt
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor*
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Rfc2898DeriveBytes
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey*
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: CryptDeriveKey
  nameWithType: Rfc2898DeriveBytes.CryptDeriveKey
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Dispose*
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Dispose
  nameWithType: Rfc2898DeriveBytes.Dispose
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes*
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: GetBytes
  nameWithType: Rfc2898DeriveBytes.GetBytes
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount*
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: IterationCount
  nameWithType: Rfc2898DeriveBytes.IterationCount
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Reset*
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Reset
  nameWithType: Rfc2898DeriveBytes.Reset
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Salt*
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Salt
  nameWithType: Rfc2898DeriveBytes.Salt
