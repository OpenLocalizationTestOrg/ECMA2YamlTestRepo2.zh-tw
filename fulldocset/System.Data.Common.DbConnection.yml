### YamlMime:ManagedReference
items:
- uid: System.Data.Common.DbConnection
  id: DbConnection
  children:
  - System.Data.Common.DbConnection.#ctor
  - System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.BeginTransaction
  - System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.ChangeDatabase(System.String)
  - System.Data.Common.DbConnection.Close
  - System.Data.Common.DbConnection.ConnectionString
  - System.Data.Common.DbConnection.ConnectionTimeout
  - System.Data.Common.DbConnection.CreateCommand
  - System.Data.Common.DbConnection.CreateDbCommand
  - System.Data.Common.DbConnection.Database
  - System.Data.Common.DbConnection.DataSource
  - System.Data.Common.DbConnection.DbProviderFactory
  - System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)
  - System.Data.Common.DbConnection.GetSchema
  - System.Data.Common.DbConnection.GetSchema(System.String)
  - System.Data.Common.DbConnection.GetSchema(System.String,System.String[])
  - System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  - System.Data.Common.DbConnection.Open
  - System.Data.Common.DbConnection.OpenAsync
  - System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbConnection.ServerVersion
  - System.Data.Common.DbConnection.State
  - System.Data.Common.DbConnection.StateChange
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  langs:
  - csharp
  name: DbConnection
  nameWithType: DbConnection
  fullName: System.Data.Common.DbConnection
  type: Class
  summary: "代表資料庫的連接。"
  syntax:
    content: 'public abstract class DbConnection : System.ComponentModel.Component, IDisposable, System.Data.IDbConnection'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.Data.IDbConnection
  - System.IDisposable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.Common.DbConnection.#ctor
  id: '#ctor'
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: DbConnection()
  nameWithType: DbConnection.DbConnection()
  fullName: System.Data.Common.DbConnection.DbConnection()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "初始化的新執行個體<xref href=&quot;System.Data.Common.DbConnection&quot;></xref>類別。"
  syntax:
    content: protected DbConnection ();
    parameters: []
  overload: System.Data.Common.DbConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)
  id: BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: DbConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.Common.DbConnection.BeginDbTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "開始資料庫異動。"
  remarks: "如果您要建立您自己的連線類型，會覆寫這個方法以實作開始交易的所需程式碼。"
  syntax:
    content: protected abstract System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "指定交易的隔離等級。"
    return:
      type: System.Data.Common.DbTransaction
      description: "代表新異動的物件。"
  overload: System.Data.Common.DbConnection.BeginDbTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.BeginTransaction
  id: BeginTransaction
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: BeginTransaction()
  nameWithType: DbConnection.BeginTransaction()
  fullName: System.Data.Common.DbConnection.BeginTransaction()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "開始資料庫異動。"
  remarks: "如果您不指定隔離等級，則會使用特定的連線類型的預設隔離等級。"
  syntax:
    content: public System.Data.Common.DbTransaction BeginTransaction ();
    parameters: []
    return:
      type: System.Data.Common.DbTransaction
      description: "代表新異動的物件。"
  overload: System.Data.Common.DbConnection.BeginTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel)
  nameWithType: DbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.Common.DbConnection.BeginTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "開始資料庫交易具有指定之隔離等級。"
  syntax:
    content: public System.Data.Common.DbTransaction BeginTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "指定交易的隔離等級。"
    return:
      type: System.Data.Common.DbTransaction
      description: "代表新異動的物件。"
  overload: System.Data.Common.DbConnection.BeginTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.ChangeDatabase(System.String)
  id: ChangeDatabase(System.String)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: ChangeDatabase(String)
  nameWithType: DbConnection.ChangeDatabase(String)
  fullName: System.Data.Common.DbConnection.ChangeDatabase(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "變更目前的資料庫開啟的連接。"
  remarks: "中提供的值`databaseName`參數必須是有效的資料庫名稱目前執行個體。"
  syntax:
    content: public abstract void ChangeDatabase (string databaseName);
    parameters:
    - id: databaseName
      type: System.String
      description: "指定要使用之連接的資料庫名稱。"
  overload: System.Data.Common.DbConnection.ChangeDatabase*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.Close
  id: Close
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: Close()
  nameWithType: DbConnection.Close()
  fullName: System.Data.Common.DbConnection.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "關閉資料庫的連接。 這是慣用的方法，關閉任何開啟的連接。"
  remarks: "Close 方法會回復任何暫止交易。 然後，它會釋放連接集區中，連接或關閉連接，如果連接共用已停用。       一次以上時，應用程式可以呼叫 Close。 會不產生任何例外狀況。       如果<xref:System.Data.Common.DbConnection>移出的範圍，它不封閉。</xref:System.Data.Common.DbConnection> 因此，您必須明確地關閉此連接呼叫`Close`或`Dispose`，這是相同的功能。 如果連接共用值`Pooling`設`true`或`yes`，這也會釋放實體連接。      > [!CAUTION] > 沒有呼叫`Close`或`Dispose`上**連接**、 **DataReader**，或在任何其他 managed 的物件`Finalize`類別的方法。 在完成項中，您應該只需釋放類別直接擁有的 unmanaged 的資源。 如果您的類別未擁有任何 unmanaged 的資源，並包含`Finalize`類別定義中的方法。 如需詳細資訊，請參閱[回收](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public abstract void Close ();
    parameters: []
  overload: System.Data.Common.DbConnection.Close*
  exceptions:
  - type: System.Data.Common.DbException
    commentId: T:System.Data.Common.DbException
    description: "開啟連接時發生連接層級時發生錯誤。"
  platform:
  - net462
- uid: System.Data.Common.DbConnection.ConnectionString
  id: ConnectionString
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: ConnectionString
  nameWithType: DbConnection.ConnectionString
  fullName: System.Data.Common.DbConnection.ConnectionString
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "取得或設定用來開啟連接的字串。"
  remarks: "連接字串的確切內容取決於此連線的特定資料來源。 若要判斷有效的設定，請參閱您使用的連接的特定類型的文件。"
  syntax:
    content: public abstract string ConnectionString { get; set; }
    return:
      type: System.String
      description: "連接字串，用來建立初始連接。 連接字串的確切內容取決於此連線的特定資料來源。 預設值為空字串。"
  overload: System.Data.Common.DbConnection.ConnectionString*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.ConnectionTimeout
  id: ConnectionTimeout
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: ConnectionTimeout
  nameWithType: DbConnection.ConnectionTimeout
  fullName: System.Data.Common.DbConnection.ConnectionTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "取得在終止嘗試並產生錯誤之前，建立連接時要等待的時間。"
  syntax:
    content: public virtual int ConnectionTimeout { get; }
    return:
      type: System.Int32
      description: "（以秒為單位） 的時間等待連接開啟的。 預設值取決於您使用的連接的特定類型。"
  overload: System.Data.Common.DbConnection.ConnectionTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.CreateCommand
  id: CreateCommand
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: CreateCommand()
  nameWithType: DbConnection.CreateCommand()
  fullName: System.Data.Common.DbConnection.CreateCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "建立並傳回<xref href=&quot;System.Data.Common.DbCommand&quot;></xref>目前連接相關聯的物件。"
  syntax:
    content: public System.Data.Common.DbCommand CreateCommand ();
    parameters: []
    return:
      type: System.Data.Common.DbCommand
      description: "A <xref href=&quot;System.Data.Common.DbCommand&quot;></xref> object."
  overload: System.Data.Common.DbConnection.CreateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.CreateDbCommand
  id: CreateDbCommand
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: CreateDbCommand()
  nameWithType: DbConnection.CreateDbCommand()
  fullName: System.Data.Common.DbConnection.CreateDbCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "建立並傳回<xref href=&quot;System.Data.Common.DbCommand&quot;></xref>目前連接相關聯的物件。"
  remarks: "如果您要實作自己的連接，覆寫這個方法以實作來建立並傳回所需程式碼<xref:System.Data.Common.DbCommand>物件。</xref:System.Data.Common.DbCommand>"
  syntax:
    content: protected abstract System.Data.Common.DbCommand CreateDbCommand ();
    parameters: []
    return:
      type: System.Data.Common.DbCommand
      description: "A <xref href=&quot;System.Data.Common.DbCommand&quot;></xref> object."
  overload: System.Data.Common.DbConnection.CreateDbCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.Database
  id: Database
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: Database
  nameWithType: DbConnection.Database
  fullName: System.Data.Common.DbConnection.Database
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "取得後開啟連接時，目前資料庫的名稱或之前開啟連接，連接字串中指定的資料庫名稱。"
  remarks: "連接通常會以動態方式更新這個屬性目前的資料庫變更時。"
  syntax:
    content: public abstract string Database { get; }
    return:
      type: System.String
      description: "目前的資料庫或要在連接開啟之後使用的資料庫名稱的名稱。 預設值為空字串。"
  overload: System.Data.Common.DbConnection.Database*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.DataSource
  id: DataSource
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: DataSource
  nameWithType: DbConnection.DataSource
  fullName: System.Data.Common.DbConnection.DataSource
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "取得要連接的資料庫伺服器的名稱。"
  remarks: "如果資料庫的連接已關閉，資料來源會傳回任何包含於<xref:System.Data.Common.DbConnection.ConnectionString%2A>如`DataSource`關鍵字。</xref:System.Data.Common.DbConnection.ConnectionString%2A> 如果連接已開啟和<xref:System.Data.Common.DbConnection.ConnectionString%2A>資料來源關鍵字的值開頭&quot;|`datadirectory`|&quot;，屬性會傳回任何包含於<xref:System.Data.Common.DbConnection.ConnectionString%2A>如`DataSource`關鍵字只。</xref:System.Data.Common.DbConnection.ConnectionString%2A> </xref:System.Data.Common.DbConnection.ConnectionString%2A> 如果資料庫的連接已開啟，屬性會傳回原生提供者傳回的`DBPROP_INIT_DATASOURCE`，空的若是原生提供者的`DBPROP_DATASOURCENAME`傳回。"
  syntax:
    content: public abstract string DataSource { get; }
    return:
      type: System.String
      description: "要連接的資料庫伺服器的名稱。 預設值為空字串。"
  overload: System.Data.Common.DbConnection.DataSource*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.DbProviderFactory
  id: DbProviderFactory
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: DbProviderFactory
  nameWithType: DbConnection.DbProviderFactory
  fullName: System.Data.Common.DbConnection.DbProviderFactory
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gets the <xref href=&quot;System.Data.Common.DbProviderFactory&quot;></xref> for this <xref href=&quot;System.Data.Common.DbConnection&quot;></xref>."
  syntax:
    content: protected virtual System.Data.Common.DbProviderFactory DbProviderFactory { get; }
    return:
      type: System.Data.Common.DbProviderFactory
      description: "一組方法，以建立資料來源類別的提供者實作的執行個體。"
  overload: System.Data.Common.DbConnection.DbProviderFactory*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)
  id: EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: EnlistTransaction(Transaction)
  nameWithType: DbConnection.EnlistTransaction(Transaction)
  fullName: System.Data.Common.DbConnection.EnlistTransaction(Transaction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "指定的異動登記。"
  remarks: "新的 ADO.NET 2.0 是支援的使用`EnlistTransaction`編列到分散式交易中的方法。 因為它在登錄中的連接<xref:System.Transactions.Transaction>執行個體，`EnlistTransaction`利用中的可用功能<xref:System.Transactions>命名空間來管理分散式交易。</xref:System.Transactions> </xref:System.Transactions.Transaction> 在交易中明確地登記連接之後, 無法取消登錄或另一個交易中登記，直到第一筆交易完成為止。"
  syntax:
    content: public virtual void EnlistTransaction (System.Transactions.Transaction transaction);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "若要將現有的參考<xref href=&quot;System.Transactions.Transaction&quot;></xref>要登記之。"
  overload: System.Data.Common.DbConnection.EnlistTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.GetSchema
  id: GetSchema
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: GetSchema()
  nameWithType: DbConnection.GetSchema()
  fullName: System.Data.Common.DbConnection.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "傳回這個資料來源的結構描述資訊<xref href=&quot;System.Data.Common.DbConnection&quot;> </xref>。"
  remarks: "如果連接與交易相關聯，執行`GetSchema`呼叫可能會造成某些提供者擲回例外狀況。"
  syntax:
    content: public virtual System.Data.DataTable GetSchema ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> ，其中包含結構描述資訊。"
  overload: System.Data.Common.DbConnection.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.GetSchema(System.String)
  id: GetSchema(System.String)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: GetSchema(String)
  nameWithType: DbConnection.GetSchema(String)
  fullName: System.Data.Common.DbConnection.GetSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "傳回這個資料來源的結構描述資訊<xref href=&quot;System.Data.Common.DbConnection&quot;></xref>結構描述名稱以指定的字串。"
  remarks: "如果連接與交易相關聯，執行`GetSchema`呼叫可能會造成某些提供者擲回例外狀況。"
  syntax:
    content: public virtual System.Data.DataTable GetSchema (string collectionName);
    parameters:
    - id: collectionName
      type: System.String
      description: "指定要傳回之結構描述的名稱。"
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> ，其中包含結構描述資訊。"
  overload: System.Data.Common.DbConnection.GetSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>collectionName</code>已指定為 null。"
  platform:
  - net462
- uid: System.Data.Common.DbConnection.GetSchema(System.String,System.String[])
  id: GetSchema(System.String,System.String[])
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: GetSchema(String,String[])
  nameWithType: DbConnection.GetSchema(String,String[])
  fullName: System.Data.Common.DbConnection.GetSchema(String,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "傳回這個資料來源的結構描述資訊<xref href=&quot;System.Data.Common.DbConnection&quot;></xref>結構描述名稱和指定的字串陣列的限制值以指定的字串。"
  remarks: "`restrictionValues`參數可以提供*n*深度的限制集合的特定集合所指定的值。 若要設定特定的限制，值及設定的其他限制的值，您需要將上述限制設為 null，然後放入您想要指定的值限制中的適當值。       這個範例是&quot;Tables&quot;集合。 如果&quot;Tables&quot;集合有三個的限制 （資料庫、 擁有者和資料表名稱），而且您想要取回只有擁有者 「 卡爾&quot;相關聯的資料表，您必須傳遞下列值至少︰ null、&quot;Carl&quot;。 如果未傳入限制值，預設值會使用該限制。 這是相同的對應與傳入 null，不同於傳遞的參數值為空字串。 在此情況下，則為空字串 (&quot;&quot;) 會被視為指定參數的值。       如果連接與交易相關聯，執行`GetSchema`呼叫可能會造成某些提供者擲回例外狀況。"
  syntax:
    content: public virtual System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);
    parameters:
    - id: collectionName
      type: System.String
      description: "指定要傳回之結構描述的名稱。"
    - id: restrictionValues
      type: System.String[]
      description: "指定要求之結構描述的限制值的集合。"
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> ，其中包含結構描述資訊。"
  overload: System.Data.Common.DbConnection.GetSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>collectionName</code>已指定為 null。"
  platform:
  - net462
- uid: System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  id: OnStateChange(System.Data.StateChangeEventArgs)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: OnStateChange(StateChangeEventArgs)
  nameWithType: DbConnection.OnStateChange(StateChangeEventArgs)
  fullName: System.Data.Common.DbConnection.OnStateChange(StateChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "引發<xref href=&quot;System.Data.Common.DbConnection.StateChange&quot;></xref>事件。"
  remarks: '引發事件會透過委派事件處理常式叫用。 如需概觀，請參閱[NIB︰ 引發事件](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)。'
  syntax:
    content: protected virtual void OnStateChange (System.Data.StateChangeEventArgs stateChange);
    parameters:
    - id: stateChange
      type: System.Data.StateChangeEventArgs
      description: "A <xref href=&quot;System.Data.StateChangeEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Data.Common.DbConnection.OnStateChange*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.Open
  id: Open
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: Open()
  nameWithType: DbConnection.Open()
  fullName: System.Data.Common.DbConnection.Open()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "<xref:System.Data.Common.DbConnection.ConnectionString*>.</xref:System.Data.Common.DbConnection.ConnectionString*>所指定的設定開啟資料庫連接"
  remarks: "使用者定義的行為必須覆寫這個方法。 <xref:System.Data.SqlClient.SqlConnection.Open%2A?displayProperty=fullName>將會擲回例外狀況，如果呼叫一次而不先關閉。</xref:System.Data.SqlClient.SqlConnection.Open%2A?displayProperty=fullName>"
  syntax:
    content: public abstract void Open ();
    parameters: []
  overload: System.Data.Common.DbConnection.Open*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.OpenAsync
  id: OpenAsync
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: OpenAsync()
  nameWithType: DbConnection.OpenAsync()
  fullName: System.Data.Common.DbConnection.OpenAsync()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "非同步版本<> *>，以開啟資料庫連接所指定的設定與<> *>。 這個方法會叫用虛擬方法<xref:System.Data.Common.DbConnection.OpenAsync*>與 CancellationToken.None。</xref:System.Data.Common.DbConnection.OpenAsync*>"
  remarks: "在呼叫<xref:System.Data.Common.DbConnection.OpenAsync%2A>，<xref:System.Data.Common.DbConnection.State%2A>必須傳回<xref:System.Data.ConnectionState>直到傳回<xref:System.Threading.Tasks.Task>完成。</xref:System.Threading.Tasks.Task> </xref:System.Data.ConnectionState> </xref:System.Data.Common.DbConnection.State%2A> </xref:System.Data.Common.DbConnection.OpenAsync%2A> 然後，如果連接成功，<xref:System.Data.Common.DbConnection.State%2A>必須傳回<xref:System.Data.ConnectionState>.</xref:System.Data.ConnectionState> </xref:System.Data.Common.DbConnection.State%2A> 如果連接失敗，<xref:System.Data.Common.DbConnection.State%2A>必須傳回<xref:System.Data.ConnectionState>.</xref:System.Data.ConnectionState> </xref:System.Data.Common.DbConnection.State%2A>       呼叫<xref:System.Data.Common.DbConnection.Close%2A>會嘗試取消，或關閉對應<xref:System.Data.Common.DbConnection.OpenAsync%2A>呼叫。</xref:System.Data.Common.DbConnection.OpenAsync%2A> </xref:System.Data.Common.DbConnection.Close%2A>       如需有關非同步程式設計中[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]，請參閱[進行非同步程式設計](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Threading.Tasks.Task OpenAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: "表示非同步作業的工作。"
  overload: System.Data.Common.DbConnection.OpenAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
  id: OpenAsync(System.Threading.CancellationToken)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: OpenAsync(CancellationToken)
  nameWithType: DbConnection.OpenAsync(CancellationToken)
  fullName: System.Data.Common.DbConnection.OpenAsync(CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "這是非同步版本<> *>。提供者應該覆寫的適當實作。可以選擇性地接受取消語彙基元。     預設實作會叫用同步<> *> 呼叫，並傳回已完成的工作。 預設實作會傳回已取消的工作，如果傳遞已取消的 cancellationToken。 開啟所擲回的例外狀況將經由傳回的工作例外狀況屬性傳送。       不會叫用其他方法和屬性的<xref uid=&quot;langword_csharp_DbConnection&quot; name=&quot;DbConnection&quot; href=&quot;&quot;></xref>物件，直到傳回的工作已完成。"
  remarks: "在呼叫<xref:System.Data.Common.DbConnection.OpenAsync%2A>，<xref:System.Data.Common.DbConnection.State%2A>必須傳回<xref:System.Data.ConnectionState>直到傳回<xref:System.Threading.Tasks.Task>完成。</xref:System.Threading.Tasks.Task> </xref:System.Data.ConnectionState> </xref:System.Data.Common.DbConnection.State%2A> </xref:System.Data.Common.DbConnection.OpenAsync%2A> 然後，如果連接成功，<xref:System.Data.Common.DbConnection.State%2A>必須傳回<xref:System.Data.ConnectionState>.</xref:System.Data.ConnectionState> </xref:System.Data.Common.DbConnection.State%2A> 如果連接失敗，<xref:System.Data.Common.DbConnection.State%2A>必須傳回<xref:System.Data.ConnectionState>.</xref:System.Data.ConnectionState> </xref:System.Data.Common.DbConnection.State%2A>       呼叫<xref:System.Data.Common.DbConnection.Close%2A>會嘗試取消，或關閉對應<xref:System.Data.Common.DbConnection.OpenAsync%2A>呼叫。</xref:System.Data.Common.DbConnection.OpenAsync%2A> </xref:System.Data.Common.DbConnection.Close%2A>       如需有關非同步程式設計中[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]，請參閱[進行非同步程式設計](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public virtual System.Threading.Tasks.Task OpenAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消指令。"
    return:
      type: System.Threading.Tasks.Task
      description: "表示非同步作業的工作。"
  overload: System.Data.Common.DbConnection.OpenAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.ServerVersion
  id: ServerVersion
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: ServerVersion
  nameWithType: DbConnection.ServerVersion
  fullName: System.Data.Common.DbConnection.ServerVersion
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "取得字串表示，物件所連接的伺服器版本。"
  syntax:
    content: public abstract string ServerVersion { get; }
    return:
      type: System.String
      description: "資料庫的版本。 傳回字串的格式取決於您正在使用的連接的特定類型。"
  overload: System.Data.Common.DbConnection.ServerVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "傳回的工作未完成和<xref:System.Data.Common.DbConnection.OpenAsync*>.</xref:System.Data.Common.DbConnection.OpenAsync*>呼叫之後未開啟連接時即已呼叫 ServerVersion"
  platform:
  - net462
- uid: System.Data.Common.DbConnection.State
  id: State
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: State
  nameWithType: DbConnection.State
  fullName: System.Data.Common.DbConnection.State
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "取得描述連接狀態的字串。"
  syntax:
    content: public abstract System.Data.ConnectionState State { get; }
    return:
      type: System.Data.ConnectionState
      description: "連接的狀態。 傳回字串的格式取決於您正在使用的連接的特定類型。"
  overload: System.Data.Common.DbConnection.State*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.StateChange
  id: StateChange
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: StateChange
  nameWithType: DbConnection.StateChange
  fullName: System.Data.Common.DbConnection.StateChange
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "事件的狀態變更時發生。"
  remarks: "事件的狀態從關閉開啟或關閉已開啟變更時，就會發生 StateChange 事件。"
  syntax:
    content: public virtual event System.Data.StateChangeEventHandler StateChange;
    return:
      type: System.Data.StateChangeEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  id: System#Data#IDbConnection#BeginTransaction
  isEii: true
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: System.Data.IDbConnection.BeginTransaction()
  nameWithType: DbConnection.System.Data.IDbConnection.BeginTransaction()
  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "開始資料庫異動。"
  remarks: "這個成員是明確介面成員實作。 它可用時，才<xref:System.Data.Common.DbConnection>執行個體轉換成<xref:System.Data.IDbConnection>介面。</xref:System.Data.IDbConnection> </xref:System.Data.Common.DbConnection>       如需詳細資訊，請參閱<xref:System.Data.IDbConnection.BeginTransaction%2A>.</xref:System.Data.IDbConnection.BeginTransaction%2A>"
  syntax:
    content: System.Data.IDbTransaction IDbConnection.BeginTransaction ();
    parameters: []
    return:
      type: System.Data.IDbTransaction
      description: "物件，代表新交易。"
  overload: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  id: System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  isEii: true
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: System.Data.IDbConnection.BeginTransaction(IsolationLevel)
  nameWithType: DbConnection.System.Data.IDbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "開始資料庫交易具有指定<xref href=&quot;System.Data.IsolationLevel&quot;></xref>值。"
  remarks: "如需詳細資訊，請參閱<xref:System.Data.IDbConnection.BeginTransaction%2A>.</xref:System.Data.IDbConnection.BeginTransaction%2A>"
  syntax:
    content: System.Data.IDbTransaction IDbConnection.BeginTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "其中一個<xref href=&quot;System.Data.IsolationLevel&quot;></xref>值。"
    return:
      type: System.Data.IDbTransaction
      description: "物件，代表新交易。"
  overload: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  id: System#Data#IDbConnection#CreateCommand
  isEii: true
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: System.Data.IDbConnection.CreateCommand()
  nameWithType: DbConnection.System.Data.IDbConnection.CreateCommand()
  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.CreateCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "建立並傳回<xref href=&quot;System.Data.Common.DbCommand&quot;></xref>與目前連接相關聯的物件。"
  remarks: "如需詳細資訊，請參閱[命令和參數](~/add/includes/ajax-current-ext-md.md)和<xref:System.Data.IDbConnection.CreateCommand%2A>。</xref:System.Data.IDbConnection.CreateCommand%2A>"
  syntax:
    content: System.Data.IDbCommand IDbConnection.CreateCommand ();
    parameters: []
    return:
      type: System.Data.IDbCommand
      description: "A <xref href=&quot;System.Data.Common.DbCommand&quot;> </xref>與連接相關聯的物件。"
  overload: System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.Data.Common.DbException
  parent: System.Data.Common
  isExternal: false
  name: DbException
  nameWithType: DbException
  fullName: System.Data.Common.DbException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.Common.DbConnection.#ctor
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: DbConnection()
  nameWithType: DbConnection.DbConnection()
  fullName: System.Data.Common.DbConnection.DbConnection()
- uid: System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: DbConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.Common.DbConnection.BeginDbTransaction(IsolationLevel)
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.Common.DbConnection.BeginTransaction
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: BeginTransaction()
  nameWithType: DbConnection.BeginTransaction()
  fullName: System.Data.Common.DbConnection.BeginTransaction()
- uid: System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel)
  nameWithType: DbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.Common.DbConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.Common.DbConnection.ChangeDatabase(System.String)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ChangeDatabase(String)
  nameWithType: DbConnection.ChangeDatabase(String)
  fullName: System.Data.Common.DbConnection.ChangeDatabase(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Common.DbConnection.Close
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: Close()
  nameWithType: DbConnection.Close()
  fullName: System.Data.Common.DbConnection.Close()
- uid: System.Data.Common.DbConnection.ConnectionString
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ConnectionString
  nameWithType: DbConnection.ConnectionString
  fullName: System.Data.Common.DbConnection.ConnectionString
- uid: System.Data.Common.DbConnection.ConnectionTimeout
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: DbConnection.ConnectionTimeout
  fullName: System.Data.Common.DbConnection.ConnectionTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.Common.DbConnection.CreateCommand
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: CreateCommand()
  nameWithType: DbConnection.CreateCommand()
  fullName: System.Data.Common.DbConnection.CreateCommand()
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.Common.DbConnection.CreateDbCommand
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: CreateDbCommand()
  nameWithType: DbConnection.CreateDbCommand()
  fullName: System.Data.Common.DbConnection.CreateDbCommand()
- uid: System.Data.Common.DbConnection.Database
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: Database
  nameWithType: DbConnection.Database
  fullName: System.Data.Common.DbConnection.Database
- uid: System.Data.Common.DbConnection.DataSource
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: DataSource
  nameWithType: DbConnection.DataSource
  fullName: System.Data.Common.DbConnection.DataSource
- uid: System.Data.Common.DbConnection.DbProviderFactory
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: DbProviderFactory
  nameWithType: DbConnection.DbProviderFactory
  fullName: System.Data.Common.DbConnection.DbProviderFactory
- uid: System.Data.Common.DbProviderFactory
  parent: System.Data.Common
  isExternal: false
  name: DbProviderFactory
  nameWithType: DbProviderFactory
  fullName: System.Data.Common.DbProviderFactory
- uid: System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: EnlistTransaction(Transaction)
  nameWithType: DbConnection.EnlistTransaction(Transaction)
  fullName: System.Data.Common.DbConnection.EnlistTransaction(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Data.Common.DbConnection.GetSchema
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: GetSchema()
  nameWithType: DbConnection.GetSchema()
  fullName: System.Data.Common.DbConnection.GetSchema()
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.Common.DbConnection.GetSchema(System.String)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: GetSchema(String)
  nameWithType: DbConnection.GetSchema(String)
  fullName: System.Data.Common.DbConnection.GetSchema(String)
- uid: System.Data.Common.DbConnection.GetSchema(System.String,System.String[])
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: GetSchema(String,String[])
  nameWithType: DbConnection.GetSchema(String,String[])
  fullName: System.Data.Common.DbConnection.GetSchema(String,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: OnStateChange(StateChangeEventArgs)
  nameWithType: DbConnection.OnStateChange(StateChangeEventArgs)
  fullName: System.Data.Common.DbConnection.OnStateChange(StateChangeEventArgs)
- uid: System.Data.StateChangeEventArgs
  parent: System.Data
  isExternal: false
  name: StateChangeEventArgs
  nameWithType: StateChangeEventArgs
  fullName: System.Data.StateChangeEventArgs
- uid: System.Data.Common.DbConnection.Open
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: Open()
  nameWithType: DbConnection.Open()
  fullName: System.Data.Common.DbConnection.Open()
- uid: System.Data.Common.DbConnection.OpenAsync
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: OpenAsync()
  nameWithType: DbConnection.OpenAsync()
  fullName: System.Data.Common.DbConnection.OpenAsync()
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: OpenAsync(CancellationToken)
  nameWithType: DbConnection.OpenAsync(CancellationToken)
  fullName: System.Data.Common.DbConnection.OpenAsync(CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Data.Common.DbConnection.ServerVersion
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ServerVersion
  nameWithType: DbConnection.ServerVersion
  fullName: System.Data.Common.DbConnection.ServerVersion
- uid: System.Data.Common.DbConnection.State
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: State
  nameWithType: DbConnection.State
  fullName: System.Data.Common.DbConnection.State
- uid: System.Data.ConnectionState
  parent: System.Data
  isExternal: false
  name: ConnectionState
  nameWithType: ConnectionState
  fullName: System.Data.ConnectionState
- uid: System.Data.Common.DbConnection.StateChange
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: StateChange
  nameWithType: DbConnection.StateChange
  fullName: System.Data.Common.DbConnection.StateChange
- uid: System.Data.StateChangeEventHandler
  parent: System.Data
  isExternal: false
  name: StateChangeEventHandler
  nameWithType: StateChangeEventHandler
  fullName: System.Data.StateChangeEventHandler
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.IDbConnection.BeginTransaction()
  nameWithType: DbConnection.System.Data.IDbConnection.BeginTransaction()
  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction()
- uid: System.Data.IDbTransaction
  parent: System.Data
  isExternal: false
  name: IDbTransaction
  nameWithType: IDbTransaction
  fullName: System.Data.IDbTransaction
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.IDbConnection.BeginTransaction(IsolationLevel)
  nameWithType: DbConnection.System.Data.IDbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.IDbConnection.CreateCommand()
  nameWithType: DbConnection.System.Data.IDbConnection.CreateCommand()
  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.CreateCommand()
- uid: System.Data.IDbCommand
  parent: System.Data
  isExternal: false
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.Data.Common.DbConnection.#ctor*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: DbConnection
  nameWithType: DbConnection.DbConnection
- uid: System.Data.Common.DbConnection.BeginDbTransaction*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: BeginDbTransaction
  nameWithType: DbConnection.BeginDbTransaction
- uid: System.Data.Common.DbConnection.BeginTransaction*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: BeginTransaction
  nameWithType: DbConnection.BeginTransaction
- uid: System.Data.Common.DbConnection.ChangeDatabase*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ChangeDatabase
  nameWithType: DbConnection.ChangeDatabase
- uid: System.Data.Common.DbConnection.Close*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: Close
  nameWithType: DbConnection.Close
- uid: System.Data.Common.DbConnection.ConnectionString*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ConnectionString
  nameWithType: DbConnection.ConnectionString
- uid: System.Data.Common.DbConnection.ConnectionTimeout*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: DbConnection.ConnectionTimeout
- uid: System.Data.Common.DbConnection.CreateCommand*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: CreateCommand
  nameWithType: DbConnection.CreateCommand
- uid: System.Data.Common.DbConnection.CreateDbCommand*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: CreateDbCommand
  nameWithType: DbConnection.CreateDbCommand
- uid: System.Data.Common.DbConnection.Database*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: Database
  nameWithType: DbConnection.Database
- uid: System.Data.Common.DbConnection.DataSource*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: DataSource
  nameWithType: DbConnection.DataSource
- uid: System.Data.Common.DbConnection.DbProviderFactory*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: DbProviderFactory
  nameWithType: DbConnection.DbProviderFactory
- uid: System.Data.Common.DbConnection.EnlistTransaction*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: EnlistTransaction
  nameWithType: DbConnection.EnlistTransaction
- uid: System.Data.Common.DbConnection.GetSchema*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: GetSchema
  nameWithType: DbConnection.GetSchema
- uid: System.Data.Common.DbConnection.OnStateChange*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: OnStateChange
  nameWithType: DbConnection.OnStateChange
- uid: System.Data.Common.DbConnection.Open*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: Open
  nameWithType: DbConnection.Open
- uid: System.Data.Common.DbConnection.OpenAsync*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: OpenAsync
  nameWithType: DbConnection.OpenAsync
- uid: System.Data.Common.DbConnection.ServerVersion*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ServerVersion
  nameWithType: DbConnection.ServerVersion
- uid: System.Data.Common.DbConnection.State*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: State
  nameWithType: DbConnection.State
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.IDbConnection.BeginTransaction
  nameWithType: DbConnection.System.Data.IDbConnection.BeginTransaction
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.IDbConnection.CreateCommand
  nameWithType: DbConnection.System.Data.IDbConnection.CreateCommand
