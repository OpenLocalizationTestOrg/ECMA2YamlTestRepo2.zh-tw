### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.ServiceHost
  id: ServiceHost
  children:
  - System.ServiceModel.ServiceHost.#ctor
  - System.ServiceModel.ServiceHost.#ctor(System.Object,System.Uri[])
  - System.ServiceModel.ServiceHost.#ctor(System.Type,System.Uri[])
  - System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)
  - System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)
  - System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)
  - System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)
  - System.ServiceModel.ServiceHost.ApplyConfiguration
  - System.ServiceModel.ServiceHost.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)
  - System.ServiceModel.ServiceHost.InitializeDescription(System.Object,System.ServiceModel.UriSchemeKeyedCollection)
  - System.ServiceModel.ServiceHost.InitializeDescription(System.Type,System.ServiceModel.UriSchemeKeyedCollection)
  - System.ServiceModel.ServiceHost.OnClosed
  - System.ServiceModel.ServiceHost.SingletonInstance
  langs:
  - csharp
  name: ServiceHost
  nameWithType: ServiceHost
  fullName: System.ServiceModel.ServiceHost
  type: Class
  summary: "提供服務的主機。"
  remarks: "實作使用的主機[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]服務模型程式設計模型。       使用 ServiceHost 類別來設定和使用的服務公開用戶端應用程式，當您不使用網際網路資訊服務 (IIS) 或 Windows Activation Services (WAS) 公開的服務。 IIS 和 WAS 互動與您的名義 ServiceHost 物件。       若要公開服務供呼叫端，使用[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]需要完整的服務描述 (由<xref:System.ServiceModel.Description.ServiceDescription>類別)。</xref:System.ServiceModel.Description.ServiceDescription> ServiceHost 類別會建立<xref:System.ServiceModel.Description.ServiceDescription>從服務類型及組態資訊，然後使用這個描述來建立<xref:System.ServiceModel.Dispatcher.ChannelDispatcher>描述中的每個端點的物件。</xref:System.ServiceModel.Dispatcher.ChannelDispatcher> </xref:System.ServiceModel.Description.ServiceDescription>       您可以使用 ServiceHost 物件來載入服務、 設定端點、 套用安全性設定及啟動接聽項處理傳入要求。"
  example:
  - >-
    [!code-cs[S_SelfHost#1](~/add/codesnippet/csharp/t-system.servicemodel.se_0_1.cs)]
     [!code-vb[S_SelfHost#1](~/add/codesnippet/visualbasic/t-system.servicemodel.se_0_1.vb)]
  syntax:
    content: 'public class ServiceHost : System.ServiceModel.ServiceHostBase'
  inheritance:
  - System.ServiceModel.Channels.CommunicationObject
  - System.ServiceModel.ServiceHostBase
  implements: []
  inheritedMembers:
  - System.ServiceModel.ServiceHostBase.AddBaseAddress(System.Uri)
  - System.ServiceModel.ServiceHostBase.AddDefaultEndpoints
  - System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint)
  - System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String)
  - System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String,System.Uri)
  - System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri)
  - System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)
  - System.ServiceModel.ServiceHostBase.Authentication
  - System.ServiceModel.ServiceHostBase.Authorization
  - System.ServiceModel.ServiceHostBase.BaseAddresses
  - System.ServiceModel.ServiceHostBase.ChannelDispatchers
  - System.ServiceModel.ServiceHostBase.CloseTimeout
  - System.ServiceModel.ServiceHostBase.Credentials
  - System.ServiceModel.ServiceHostBase.DefaultCloseTimeout
  - System.ServiceModel.ServiceHostBase.DefaultOpenTimeout
  - System.ServiceModel.ServiceHostBase.Description
  - System.ServiceModel.ServiceHostBase.Extensions
  - System.ServiceModel.ServiceHostBase.ImplementedContracts
  - System.ServiceModel.ServiceHostBase.IncrementManualFlowControlLimit(System.Int32)
  - System.ServiceModel.ServiceHostBase.InitializeDescription(System.ServiceModel.UriSchemeKeyedCollection)
  - System.ServiceModel.ServiceHostBase.InitializeRuntime
  - System.ServiceModel.ServiceHostBase.LoadConfigurationSection(System.ServiceModel.Configuration.ServiceElement)
  - System.ServiceModel.ServiceHostBase.ManualFlowControlLimit
  - System.ServiceModel.ServiceHostBase.OnAbort
  - System.ServiceModel.ServiceHostBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.ServiceHostBase.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.ServiceHostBase.OnClose(System.TimeSpan)
  - System.ServiceModel.ServiceHostBase.OnEndClose(System.IAsyncResult)
  - System.ServiceModel.ServiceHostBase.OnEndOpen(System.IAsyncResult)
  - System.ServiceModel.ServiceHostBase.OnOpen(System.TimeSpan)
  - System.ServiceModel.ServiceHostBase.OnOpened
  - System.ServiceModel.ServiceHostBase.OpenTimeout
  - System.ServiceModel.ServiceHostBase.ReleasePerformanceCounters
  - System.ServiceModel.ServiceHostBase.SetEndpointAddress(System.ServiceModel.Description.ServiceEndpoint,System.String)
  - System.ServiceModel.ServiceHostBase.System#IDisposable#Dispose
  - System.ServiceModel.ServiceHostBase.UnknownMessageReceived
  platform:
  - net462
- uid: System.ServiceModel.ServiceHost.#ctor
  id: '#ctor'
  parent: System.ServiceModel.ServiceHost
  langs:
  - csharp
  name: ServiceHost()
  nameWithType: ServiceHost.ServiceHost()
  fullName: System.ServiceModel.ServiceHost.ServiceHost()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "初始化的新執行個體<xref href=&quot;System.ServiceModel.ServiceHost&quot;></xref>類別。"
  remarks: "有兩個用來建立<xref:System.ServiceModel.ServiceHost>類別</xref:System.ServiceModel.ServiceHost>的執行個體的建構函式 使用[ServiceHost (類型、 Uri\\[\\])](assetId:///M:System.ServiceModel.ServiceHost.#ctor(System.Type,System.Uri[])?qualifyHint=False&autoUpgrade=False)做為輸入參數，大部分的情況下的服務類型的建構函式。 主機可以使用這要視需要建立新的服務。 使用[ServiceHost (物件、 Uri\\[\\])](assetId:///M:System.ServiceModel.ServiceHost.#ctor(System.Object,System.Uri[])?qualifyHint=False&autoUpgrade=False)建構函式而是只有在您想要使用服務的特定單一執行個體的服務主機。"
  syntax:
    content: protected ServiceHost ();
    parameters: []
  overload: System.ServiceModel.ServiceHost.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceHost.#ctor(System.Object,System.Uri[])
  id: '#ctor(System.Object,System.Uri[])'
  parent: System.ServiceModel.ServiceHost
  langs:
  - csharp
  name: ServiceHost(Object,Uri[])
  nameWithType: ServiceHost.ServiceHost(Object,Uri[])
  fullName: System.ServiceModel.ServiceHost.ServiceHost(Object,Uri[])
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "初始化的新執行個體<xref href=&quot;System.ServiceModel.ServiceHost&quot;></xref>與服務及其指定基底位址的執行個體的類別。"
  remarks: "使用這個建構函式以實作自訂的替代<xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=fullName>當您想要提供單一服務所使用的特定物件執行個體。</xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=fullName> 若要使用此多載，當服務實作類型很難建構時 （例如，如果它尚未實作的預設公用建構函式沒有參數）。       請注意，提供物件給這個多載，某些功能相關的[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]不同執行個體行為的工作。 例如，呼叫<xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A?displayProperty=fullName>使用這個建構函式多載提供已知物件執行個體時，沒有任何作用。</xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A?displayProperty=fullName> 同樣地，會忽略任何其他執行個體釋放機制。 <xref:System.ServiceModel.ServiceHost>一律行為如同<xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A?displayProperty=fullName>屬性設定為<xref:System.ServiceModel.ReleaseInstanceMode?displayProperty=fullName>所有作業。</xref:System.ServiceModel.ReleaseInstanceMode?displayProperty=fullName> </xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A?displayProperty=fullName> </xref:System.ServiceModel.ServiceHost>"
  example:
  - >-
    [!code-cs[S_UEServiceHost2#1](~/add/codesnippet/csharp/m-system.servicemodel.se_2_1.cs)]
     [!code-vb[S_UEServiceHost2#1](~/add/codesnippet/visualbasic/m-system.servicemodel.se_2_1.vb)]
  syntax:
    content: public ServiceHost (object singletonInstance, Uri[] baseAddresses);
    parameters:
    - id: singletonInstance
      type: System.Object
      description: "託管服務的執行個體。"
    - id: baseAddresses
      type: System.Uri[]
      description: "<xref:System.Array>型別的<xref:System.Uri>，其中包含裝載之服務的基底位址。</xref:System.Uri> </xref:System.Array>"
  overload: System.ServiceModel.ServiceHost.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>singletonInstance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ServiceModel.ServiceHost.#ctor(System.Type,System.Uri[])
  id: '#ctor(System.Type,System.Uri[])'
  parent: System.ServiceModel.ServiceHost
  langs:
  - csharp
  name: ServiceHost(Type,Uri[])
  nameWithType: ServiceHost.ServiceHost(Type,Uri[])
  fullName: System.ServiceModel.ServiceHost.ServiceHost(Type,Uri[])
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "初始化的新執行個體<xref href=&quot;System.ServiceModel.ServiceHost&quot;></xref>類別服務類型及其指定基底位址。"
  remarks: "當您有服務類型，而且您可以建立新的執行個體的需要即使當您需要單一執行個體時，請使用這個建構函式。 使用[ServiceHost (物件、 Uri\\[\\])](assetId:///M:System.ServiceModel.ServiceHost.#ctor(System.Object,System.Uri[])?qualifyHint=False&autoUpgrade=False)建構函式而是只有在您想要使用服務的特定單一執行個體的服務主機。"
  example:
  - "This sample illustrates how to use the <xref:System.ServiceModel.ServiceHost> class to host a Windows Communication Foundation service:  \n  \n [!code-vb[S_UEServiceHost#1](~/add/codesnippet/visualbasic/m-system.servicemodel.se_1_1.vb)]\n [!code-cs[S_UEServiceHost#1](~/add/codesnippet/csharp/m-system.servicemodel.se_1_1.cs)]"
  syntax:
    content: public ServiceHost (Type serviceType, Uri[] baseAddresses);
    parameters:
    - id: serviceType
      type: System.Type
      description: "託管服務的型別。"
    - id: baseAddresses
      type: System.Uri[]
      description: "類型的陣列<xref:System.Uri>，其中包含裝載之服務的基底位址。</xref:System.Uri>"
  overload: System.ServiceModel.ServiceHost.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>serviceType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)
  id: AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)
  parent: System.ServiceModel.ServiceHost
  langs:
  - csharp
  name: AddServiceEndpoint(Type,Binding,String)
  nameWithType: ServiceHost.AddServiceEndpoint(Type,Binding,String)
  fullName: System.ServiceModel.ServiceHost.AddServiceEndpoint(Type,Binding,String)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "將服務端點加入至裝載的服務，使用指定的合約、 繫結和端點位址。"
  remarks: ''
  example:
  - >-
    [!code-vb[S_UEServiceHost#3](~/add/codesnippet/visualbasic/70b66628-f847-4088-a4ea-_1.vb)]
     [!code-cs[S_UEServiceHost#3](~/add/codesnippet/csharp/70b66628-f847-4088-a4ea-_1.cs)]
  syntax:
    content: public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint (Type implementedContract, System.ServiceModel.Channels.Binding binding, string address);
    parameters:
    - id: implementedContract
      type: System.Type
      description: "<xref:System.Type>的已新增之端點的合約。</xref:System.Type>"
    - id: binding
      type: System.ServiceModel.Channels.Binding
      description: "<xref:System.ServiceModel.Channels.Binding>加入端點。</xref:System.ServiceModel.Channels.Binding>"
    - id: address
      type: System.String
      description: "已新增之端點位址。"
    return:
      type: System.ServiceModel.Description.ServiceEndpoint
      description: "<xref:System.ServiceModel.Description.ServiceEndpoint>新增至裝載的服務。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  overload: System.ServiceModel.ServiceHost.AddServiceEndpoint*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>implementedContract</code>or <code>binding</code> or <code>address</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)
  id: AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)
  parent: System.ServiceModel.ServiceHost
  langs:
  - csharp
  name: AddServiceEndpoint(Type,Binding,Uri)
  nameWithType: ServiceHost.AddServiceEndpoint(Type,Binding,Uri)
  fullName: System.ServiceModel.ServiceHost.AddServiceEndpoint(Type,Binding,Uri)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "將服務端點加入至裝載的服務，使用指定的合約、 繫結以及含有端點位址的 URI。"
  remarks: ''
  example:
  - >-
    [!code-vb[S_UEServiceHost#4](~/add/codesnippet/visualbasic/8e2cc351-67c1-445b-afad-_1.vb)]
     [!code-cs[S_UEServiceHost#4](~/add/codesnippet/csharp/8e2cc351-67c1-445b-afad-_1.cs)]
  syntax:
    content: public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint (Type implementedContract, System.ServiceModel.Channels.Binding binding, Uri address);
    parameters:
    - id: implementedContract
      type: System.Type
      description: "<xref:System.Type>的已新增之端點的合約。</xref:System.Type>"
    - id: binding
      type: System.ServiceModel.Channels.Binding
      description: "<xref:System.ServiceModel.Channels.Binding>加入端點。</xref:System.ServiceModel.Channels.Binding>"
    - id: address
      type: System.Uri
      description: "<xref:System.Uri>包含加入之端點位址。</xref:System.Uri>"
    return:
      type: System.ServiceModel.Description.ServiceEndpoint
      description: "<xref:System.ServiceModel.Description.ServiceEndpoint>新增至裝載的服務。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  overload: System.ServiceModel.ServiceHost.AddServiceEndpoint*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>implementedContract</code>or <code>binding</code> or <code>address</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)
  id: AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)
  parent: System.ServiceModel.ServiceHost
  langs:
  - csharp
  name: AddServiceEndpoint(Type,Binding,String,Uri)
  nameWithType: ServiceHost.AddServiceEndpoint(Type,Binding,String,Uri)
  fullName: System.ServiceModel.ServiceHost.AddServiceEndpoint(Type,Binding,String,Uri)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "將服務端點加入至託管服務指定的合約、 繫結、 端點位址以及服務所接聽的 URI。"
  remarks: "當您有多個必須接聽相同的端點指定的 URI 時，請使用這個版本的方法。"
  example:
  - >-
    [!code-vb[S_UEServiceHost#5](~/add/codesnippet/visualbasic/53ef03a0-4eb7-4902-b7b1-_1.vb)]
     [!code-cs[S_UEServiceHost#5](~/add/codesnippet/csharp/53ef03a0-4eb7-4902-b7b1-_1.cs)]
  syntax:
    content: public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint (Type implementedContract, System.ServiceModel.Channels.Binding binding, string address, Uri listenUri);
    parameters:
    - id: implementedContract
      type: System.Type
      description: "<xref:System.Type>的已新增之端點的合約。</xref:System.Type>"
    - id: binding
      type: System.ServiceModel.Channels.Binding
      description: "<xref:System.ServiceModel.Channels.Binding>加入端點。</xref:System.ServiceModel.Channels.Binding>"
    - id: address
      type: System.String
      description: "服務的端點位址。"
    - id: listenUri
      type: System.Uri
      description: "<xref:System.Uri>上的服務端點可以接聽。</xref:System.Uri>"
    return:
      type: System.ServiceModel.Description.ServiceEndpoint
      description: "<xref:System.ServiceModel.Description.ServiceEndpoint>新增至裝載的服務。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  overload: System.ServiceModel.ServiceHost.AddServiceEndpoint*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>implementedContract</code>or <code>binding</code> or <code>address</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)
  id: AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)
  parent: System.ServiceModel.ServiceHost
  langs:
  - csharp
  name: AddServiceEndpoint(Type,Binding,Uri,Uri)
  nameWithType: ServiceHost.AddServiceEndpoint(Type,Binding,Uri,Uri)
  fullName: System.ServiceModel.ServiceHost.AddServiceEndpoint(Type,Binding,Uri,Uri)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "將服務端點加入至託管服務指定的合約、 繫結、 含有端點位址的 URI 以及服務所接聽的 URI。"
  remarks: "當您有多個必須接聽相同的端點指定的 URI 時，請使用這個版本的方法。"
  example:
  - >-
    [!code-vb[S_UEServiceHost#6](~/add/codesnippet/visualbasic/681d17d9-9f10-449e-a378-_1.vb)]
     [!code-cs[S_UEServiceHost#6](~/add/codesnippet/csharp/681d17d9-9f10-449e-a378-_1.cs)]
  syntax:
    content: public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint (Type implementedContract, System.ServiceModel.Channels.Binding binding, Uri address, Uri listenUri);
    parameters:
    - id: implementedContract
      type: System.Type
      description: "<xref:System.Type>的已新增之端點的合約。</xref:System.Type>"
    - id: binding
      type: System.ServiceModel.Channels.Binding
      description: "<xref:System.ServiceModel.Channels.Binding>加入端點。</xref:System.ServiceModel.Channels.Binding>"
    - id: address
      type: System.Uri
      description: "<xref:System.Uri>包含加入之端點位址。</xref:System.Uri>"
    - id: listenUri
      type: System.Uri
      description: "<xref:System.Uri>上的服務端點可以接聽。</xref:System.Uri>"
    return:
      type: System.ServiceModel.Description.ServiceEndpoint
      description: "<xref:System.ServiceModel.Description.ServiceEndpoint>新增至裝載的服務。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  overload: System.ServiceModel.ServiceHost.AddServiceEndpoint*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>implementedContract</code>or <code>binding</code> or <code>address</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "合約未初始化或找不到合約索引鍵。"
  platform:
  - net462
- uid: System.ServiceModel.ServiceHost.ApplyConfiguration
  id: ApplyConfiguration
  parent: System.ServiceModel.ServiceHost
  langs:
  - csharp
  name: ApplyConfiguration()
  nameWithType: ServiceHost.ApplyConfiguration()
  fullName: System.ServiceModel.ServiceHost.ApplyConfiguration()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "從組態檔載入服務描述，並將其套用至正在建構的執行階段。"
  syntax:
    content: protected override void ApplyConfiguration ();
    parameters: []
  overload: System.ServiceModel.ServiceHost.ApplyConfiguration*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceHost.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)
  id: CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)
  parent: System.ServiceModel.ServiceHost
  langs:
  - csharp
  name: CreateDescription(IDictionary<String,ContractDescription>)
  nameWithType: ServiceHost.CreateDescription(IDictionary<String,ContractDescription>)
  fullName: System.ServiceModel.ServiceHost.CreateDescription(IDictionary<String,ContractDescription>)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "建立裝載之服務的描述。"
  remarks: "這個方法用來建構從自訂程式撰寫模型的合約描述。 覆寫對應的基底類別方法， <xref:System.ServiceModel.ServiceHostBase.CreateDescription%28System.Collections.Generic.IDictionary%7BSystem.String%2CSystem.ServiceModel.Description.ContractDescription%7D%40%29>，以實作自訂的模型。</xref:System.ServiceModel.ServiceHostBase.CreateDescription%28System.Collections.Generic.IDictionary%7BSystem.String%2CSystem.ServiceModel.Description.ContractDescription%7D%40%29>"
  syntax:
    content: protected override System.ServiceModel.Description.ServiceDescription CreateDescription (out System.Collections.Generic.IDictionary<string,System.ServiceModel.Description.ContractDescription> implementedContracts);
    parameters:
    - id: implementedContracts
      type: System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}
      description: "&lt;Xref:System.Collections.Generic.IDictionary%602&gt;的金鑰組的類型 (<xref:System.String>， <xref:System.ServiceModel.Description.ContractDescription>)，其中包含做為索引鍵-合約託管服務的已實作。</xref:System.ServiceModel.Description.ContractDescription> </xref:System.String>"
    return:
      type: System.ServiceModel.Description.ServiceDescription
      description: "A <xref href=&quot;System.ServiceModel.Description.ServiceDescription&quot;> </xref>託管服務。"
  overload: System.ServiceModel.ServiceHost.CreateDescription*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "裝載服務的型別是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.ServiceModel.ServiceHost.InitializeDescription(System.Object,System.ServiceModel.UriSchemeKeyedCollection)
  id: InitializeDescription(System.Object,System.ServiceModel.UriSchemeKeyedCollection)
  parent: System.ServiceModel.ServiceHost
  langs:
  - csharp
  name: InitializeDescription(Object,UriSchemeKeyedCollection)
  nameWithType: ServiceHost.InitializeDescription(Object,UriSchemeKeyedCollection)
  fullName: System.ServiceModel.ServiceHost.InitializeDescription(Object,UriSchemeKeyedCollection)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "初始化裝載之服務的描述根據其執行個體和指定的基底位址。"
  syntax:
    content: protected void InitializeDescription (object singletonInstance, System.ServiceModel.UriSchemeKeyedCollection baseAddresses);
    parameters:
    - id: singletonInstance
      type: System.Object
      description: "託管服務的執行個體。"
    - id: baseAddresses
      type: System.ServiceModel.UriSchemeKeyedCollection
      description: "<xref href=&quot;System.ServiceModel.UriSchemeKeyedCollection&quot;> </xref> ，其中包含裝載之服務的基底位址。"
  overload: System.ServiceModel.ServiceHost.InitializeDescription*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>singletonInstance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ServiceModel.ServiceHost.InitializeDescription(System.Type,System.ServiceModel.UriSchemeKeyedCollection)
  id: InitializeDescription(System.Type,System.ServiceModel.UriSchemeKeyedCollection)
  parent: System.ServiceModel.ServiceHost
  langs:
  - csharp
  name: InitializeDescription(Type,UriSchemeKeyedCollection)
  nameWithType: ServiceHost.InitializeDescription(Type,UriSchemeKeyedCollection)
  fullName: System.ServiceModel.ServiceHost.InitializeDescription(Type,UriSchemeKeyedCollection)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "裝載之服務的描述根據其類型，以及指定基底位址，初始化。"
  syntax:
    content: protected void InitializeDescription (Type serviceType, System.ServiceModel.UriSchemeKeyedCollection baseAddresses);
    parameters:
    - id: serviceType
      type: System.Type
      description: "<xref:System.Type>裝載服務。</xref:System.Type>"
    - id: baseAddresses
      type: System.ServiceModel.UriSchemeKeyedCollection
      description: "<xref href=&quot;System.ServiceModel.UriSchemeKeyedCollection&quot;> </xref> ，其中包含裝載之服務的基底位址。"
  overload: System.ServiceModel.ServiceHost.InitializeDescription*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>serviceType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ServiceModel.ServiceHost.OnClosed
  id: OnClosed
  parent: System.ServiceModel.ServiceHost
  langs:
  - csharp
  name: OnClosed()
  nameWithType: ServiceHost.OnClosed()
  fullName: System.ServiceModel.ServiceHost.OnClosed()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "處置可處置的服務主機關閉時所主控的服務。"
  remarks: "覆寫 OnClosed 方法時，您必須確定基底。OnClosed 方法會呼叫，即使發生例外狀況。 下列程式碼說明如何執行這項操作。      ```   protected override void OnClosed()   {       try       {           if (FaultFlagService.faultFlag == ThrowDuring.OnClosed)           {               FaultFlagService.faultFlag = ThrowDuring.Never;               throw new ServiceActivationException(&quot;Faulting the service because FaultFlagService.faultFlag = ThrowDuring.OnClosed&quot;);           }       }       finally       {           base.OnClosed();       }   }      ```"
  syntax:
    content: protected override void OnClosed ();
    parameters: []
  overload: System.ServiceModel.ServiceHost.OnClosed*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ServiceHost.SingletonInstance
  id: SingletonInstance
  parent: System.ServiceModel.ServiceHost
  langs:
  - csharp
  name: SingletonInstance
  nameWithType: ServiceHost.SingletonInstance
  fullName: System.ServiceModel.ServiceHost.SingletonInstance
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "取得裝載之服務的單一執行個體。"
  remarks: "使用[ServiceHost (物件、 Uri\\[\\])](assetId:///M:System.ServiceModel.ServiceHost.#ctor(System.Object,System.Uri[])?qualifyHint=False&autoUpgrade=False)建構函式初始化的單一執行個體，當您想要控制使用的服務執行個體所裝載的服務。"
  syntax:
    content: public object SingletonInstance { get; }
    return:
      type: System.Object
      description: "裝載的服務物件。"
  overload: System.ServiceModel.ServiceHost.SingletonInstance*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.ServiceHostBase
  isExternal: false
  name: System.ServiceModel.ServiceHostBase
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ServiceModel.ServiceHost.#ctor
  parent: System.ServiceModel.ServiceHost
  isExternal: false
  name: ServiceHost()
  nameWithType: ServiceHost.ServiceHost()
  fullName: System.ServiceModel.ServiceHost.ServiceHost()
- uid: System.ServiceModel.ServiceHost.#ctor(System.Object,System.Uri[])
  parent: System.ServiceModel.ServiceHost
  isExternal: false
  name: ServiceHost(Object,Uri[])
  nameWithType: ServiceHost.ServiceHost(Object,Uri[])
  fullName: System.ServiceModel.ServiceHost.ServiceHost(Object,Uri[])
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Uri[]
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri[]
  spec.csharp:
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceModel.ServiceHost.#ctor(System.Type,System.Uri[])
  parent: System.ServiceModel.ServiceHost
  isExternal: false
  name: ServiceHost(Type,Uri[])
  nameWithType: ServiceHost.ServiceHost(Type,Uri[])
  fullName: System.ServiceModel.ServiceHost.ServiceHost(Type,Uri[])
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)
  parent: System.ServiceModel.ServiceHost
  isExternal: false
  name: AddServiceEndpoint(Type,Binding,String)
  nameWithType: ServiceHost.AddServiceEndpoint(Type,Binding,String)
  fullName: System.ServiceModel.ServiceHost.AddServiceEndpoint(Type,Binding,String)
- uid: System.ServiceModel.Description.ServiceEndpoint
  parent: System.ServiceModel.Description
  isExternal: true
  name: ServiceEndpoint
  nameWithType: ServiceEndpoint
  fullName: System.ServiceModel.Description.ServiceEndpoint
- uid: System.ServiceModel.Channels.Binding
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Binding
  nameWithType: Binding
  fullName: System.ServiceModel.Channels.Binding
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)
  parent: System.ServiceModel.ServiceHost
  isExternal: false
  name: AddServiceEndpoint(Type,Binding,Uri)
  nameWithType: ServiceHost.AddServiceEndpoint(Type,Binding,Uri)
  fullName: System.ServiceModel.ServiceHost.AddServiceEndpoint(Type,Binding,Uri)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)
  parent: System.ServiceModel.ServiceHost
  isExternal: false
  name: AddServiceEndpoint(Type,Binding,String,Uri)
  nameWithType: ServiceHost.AddServiceEndpoint(Type,Binding,String,Uri)
  fullName: System.ServiceModel.ServiceHost.AddServiceEndpoint(Type,Binding,String,Uri)
- uid: System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)
  parent: System.ServiceModel.ServiceHost
  isExternal: false
  name: AddServiceEndpoint(Type,Binding,Uri,Uri)
  nameWithType: ServiceHost.AddServiceEndpoint(Type,Binding,Uri,Uri)
  fullName: System.ServiceModel.ServiceHost.AddServiceEndpoint(Type,Binding,Uri,Uri)
- uid: System.ServiceModel.ServiceHost.ApplyConfiguration
  parent: System.ServiceModel.ServiceHost
  isExternal: false
  name: ApplyConfiguration()
  nameWithType: ServiceHost.ApplyConfiguration()
  fullName: System.ServiceModel.ServiceHost.ApplyConfiguration()
- uid: System.ServiceModel.ServiceHost.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)
  parent: System.ServiceModel.ServiceHost
  isExternal: false
  name: CreateDescription(IDictionary<String,ContractDescription>)
  nameWithType: ServiceHost.CreateDescription(IDictionary<String,ContractDescription>)
  fullName: System.ServiceModel.ServiceHost.CreateDescription(IDictionary<String,ContractDescription>)
- uid: System.ServiceModel.Description.ServiceDescription
  parent: System.ServiceModel.Description
  isExternal: false
  name: ServiceDescription
  nameWithType: ServiceDescription
  fullName: System.ServiceModel.Description.ServiceDescription
- uid: System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,ContractDescription>
  nameWithType: IDictionary<String,ContractDescription>
  fullName: System.Collections.Generic.IDictionary<System.String,System.ServiceModel.Description.ContractDescription>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.ServiceModel.Description.ContractDescription>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.ServiceModel.Description.ContractDescription
    name: ContractDescription
    nameWithType: ContractDescription
    fullName: ContractDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.ServiceHost.InitializeDescription(System.Object,System.ServiceModel.UriSchemeKeyedCollection)
  parent: System.ServiceModel.ServiceHost
  isExternal: false
  name: InitializeDescription(Object,UriSchemeKeyedCollection)
  nameWithType: ServiceHost.InitializeDescription(Object,UriSchemeKeyedCollection)
  fullName: System.ServiceModel.ServiceHost.InitializeDescription(Object,UriSchemeKeyedCollection)
- uid: System.ServiceModel.UriSchemeKeyedCollection
  parent: System.ServiceModel
  isExternal: false
  name: UriSchemeKeyedCollection
  nameWithType: UriSchemeKeyedCollection
  fullName: System.ServiceModel.UriSchemeKeyedCollection
- uid: System.ServiceModel.ServiceHost.InitializeDescription(System.Type,System.ServiceModel.UriSchemeKeyedCollection)
  parent: System.ServiceModel.ServiceHost
  isExternal: false
  name: InitializeDescription(Type,UriSchemeKeyedCollection)
  nameWithType: ServiceHost.InitializeDescription(Type,UriSchemeKeyedCollection)
  fullName: System.ServiceModel.ServiceHost.InitializeDescription(Type,UriSchemeKeyedCollection)
- uid: System.ServiceModel.ServiceHost.OnClosed
  parent: System.ServiceModel.ServiceHost
  isExternal: false
  name: OnClosed()
  nameWithType: ServiceHost.OnClosed()
  fullName: System.ServiceModel.ServiceHost.OnClosed()
- uid: System.ServiceModel.ServiceHost.SingletonInstance
  parent: System.ServiceModel.ServiceHost
  isExternal: false
  name: SingletonInstance
  nameWithType: ServiceHost.SingletonInstance
  fullName: System.ServiceModel.ServiceHost.SingletonInstance
- uid: System.ServiceModel.ServiceHost.#ctor*
  parent: System.ServiceModel.ServiceHost
  isExternal: false
  name: ServiceHost
  nameWithType: ServiceHost.ServiceHost
- uid: System.ServiceModel.ServiceHost.AddServiceEndpoint*
  parent: System.ServiceModel.ServiceHost
  isExternal: false
  name: AddServiceEndpoint
  nameWithType: ServiceHost.AddServiceEndpoint
- uid: System.ServiceModel.ServiceHost.ApplyConfiguration*
  parent: System.ServiceModel.ServiceHost
  isExternal: false
  name: ApplyConfiguration
  nameWithType: ServiceHost.ApplyConfiguration
- uid: System.ServiceModel.ServiceHost.CreateDescription*
  parent: System.ServiceModel.ServiceHost
  isExternal: false
  name: CreateDescription
  nameWithType: ServiceHost.CreateDescription
- uid: System.ServiceModel.ServiceHost.InitializeDescription*
  parent: System.ServiceModel.ServiceHost
  isExternal: false
  name: InitializeDescription
  nameWithType: ServiceHost.InitializeDescription
- uid: System.ServiceModel.ServiceHost.OnClosed*
  parent: System.ServiceModel.ServiceHost
  isExternal: false
  name: OnClosed
  nameWithType: ServiceHost.OnClosed
- uid: System.ServiceModel.ServiceHost.SingletonInstance*
  parent: System.ServiceModel.ServiceHost
  isExternal: false
  name: SingletonInstance
  nameWithType: ServiceHost.SingletonInstance
