### YamlMime:ManagedReference
items:
- uid: System.Net.WebProxy
  id: WebProxy
  children:
  - System.Net.WebProxy.#ctor
  - System.Net.WebProxy.#ctor(System.String)
  - System.Net.WebProxy.#ctor(System.Uri)
  - System.Net.WebProxy.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Net.WebProxy.#ctor(System.String,System.Boolean)
  - System.Net.WebProxy.#ctor(System.String,System.Int32)
  - System.Net.WebProxy.#ctor(System.Uri,System.Boolean)
  - System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[])
  - System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[])
  - System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[],System.Net.ICredentials)
  - System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[],System.Net.ICredentials)
  - System.Net.WebProxy.Address
  - System.Net.WebProxy.BypassArrayList
  - System.Net.WebProxy.BypassList
  - System.Net.WebProxy.BypassProxyOnLocal
  - System.Net.WebProxy.Credentials
  - System.Net.WebProxy.GetDefaultProxy
  - System.Net.WebProxy.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Net.WebProxy.GetProxy(System.Uri)
  - System.Net.WebProxy.IsBypassed(System.Uri)
  - System.Net.WebProxy.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Net.WebProxy.UseDefaultCredentials
  langs:
  - csharp
  name: WebProxy
  nameWithType: WebProxy
  fullName: System.Net.WebProxy
  type: Class
  summary: "包含<xref:System.Net.WebRequest>類別</xref:System.Net.WebRequest>的 HTTP proxy 設定"
  remarks: "WebProxy 類別包含的 proxy 設定，<xref:System.Net.WebRequest>來判斷是否 Web proxy 會用來傳送要求的執行個體使用。</xref:System.Net.WebRequest> 全域 Web proxy 設定可以指定在電腦和應用程式組態檔，以及應用程式可以使用自訂 Web proxy 使用的 WebProxy 類別的執行個體。 WebProxy 類別是基底實作<xref:System.Net.IWebProxy>介面。</xref:System.Net.IWebProxy>       若要取得 Web proxy 類別的執行個體，您可以使用下列方法之一:-<xref:System.Net.WebProxy.%23ctor%2A>建構函式。</xref:System.Net.WebProxy.%23ctor%2A>      -<xref:System.Net.WebProxy.GetDefaultProxy%2A>方法。</xref:System.Net.WebProxy.GetDefaultProxy%2A>      -<xref:System.Net.GlobalProxySelection.Select%2A>方法。</xref:System.Net.GlobalProxySelection.Select%2A>       這些方法都會提供 WebProxy 執行個體，您可以進一步自訂。它們之間的差異是回到您的應用程式前，如何初始化執行個體。 <xref:System.Net.WebProxy.%23ctor%2A>建構函式傳回的 WebProxy 類別的執行個體<xref:System.Net.WebProxy.Address%2A>屬性設定為`null`。</xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy.%23ctor%2A> 當要求使用 WebProxy 執行個體處於此狀態時，沒有任何 proxy 用來傳送要求。       <xref:System.Net.WebProxy.GetDefaultProxy%2A>方法會傳回與 WebProxy 類別的執行個體<xref:System.Net.WebProxy.Address%2A>， <xref:System.Net.WebProxy.BypassProxyOnLocal%2A>，和<xref:System.Net.WebProxy.BypassList%2A>屬性設定為使用由 Internet Explorer 5.5 及更新版本的值。</xref:System.Net.WebProxy.BypassList%2A> </xref:System.Net.WebProxy.BypassProxyOnLocal%2A> </xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy.GetDefaultProxy%2A>       <xref:System.Net.GlobalProxySelection.Select%2A>方法會傳回它的 WebProxy 類別的執行個體根據 Internet Explorer 和組態檔設定的組合來設定屬性。</xref:System.Net.GlobalProxySelection.Select%2A>       WebProxy 類別支援自動偵測和 proxy 組態指令碼的執行。 這項功能就是所謂 Web Proxy 自動探索 (WPAD)。 使用自動 proxy 組態時，組態指令碼，通常會命名為 Wpad.dat，必須位於、 下載、 編譯及執行。 如果這些作業都成功，指令碼會傳回可用於要求的 proxy。"
  example:
  - "The following code example assigns a WebProxy instance to a <xref:System.Net.WebRequest> instance. The <xref:System.Net.WebRequest> instance uses the proxy to connect to external Internet resources. (For an example that demonstrates using the WPAD feature, see the documentation for the <xref:System.Net.IWebProxyScript> class.)  \n  \n [!code-cpp[Classic WebProxy Example#1](~/add/codesnippet/cpp/t-system.net.webproxy_1.cpp)]\n [!code-vb[Classic WebProxy Example#1](~/add/codesnippet/visualbasic/t-system.net.webproxy_1.vb)]\n [!code-cs[Classic WebProxy Example#1](~/add/codesnippet/csharp/t-system.net.webproxy_1.cs)]"
  syntax:
    content: 'public class WebProxy : System.Runtime.Serialization.ISerializable'
  inheritance:
  - System.Object
  implements:
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor
  id: '#ctor'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy()
  nameWithType: WebProxy.WebProxy()
  fullName: System.Net.WebProxy.WebProxy()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "初始化空的執行個體<xref href=&quot;System.Net.WebProxy&quot;></xref>類別。"
  remarks: "預設建構函式會初始化空的執行個體<xref:System.Net.WebProxy>類別<xref:System.Net.WebProxy.Address%2A>屬性設定為`null`。</xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy>       當<xref:System.Net.WebProxy.Address%2A>屬性是`null`、<xref:System.Net.WebProxy.IsBypassed%2A>方法會傳回`true`和<xref:System.Net.WebProxy.GetProxy%2A>方法會傳回目的地位址。</xref:System.Net.WebProxy.GetProxy%2A> </xref:System.Net.WebProxy.IsBypassed%2A> </xref:System.Net.WebProxy.Address%2A>"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#1](~/add/codesnippet/cpp/m-system.net.webproxy.sh_3_1.cpp)]\n [!code-cs[NCLWebProxy#1](~/add/codesnippet/csharp/m-system.net.webproxy.sh_3_1.cs)]"
  syntax:
    content: public WebProxy ();
    parameters: []
  overload: System.Net.WebProxy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(String)
  nameWithType: WebProxy.WebProxy(String)
  fullName: System.Net.WebProxy.WebProxy(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "初始化的新執行個體<xref href=&quot;System.Net.WebProxy&quot;></xref>類別使用指定的 URI。"
  remarks: "<xref:System.Net.WebProxy>執行個體以初始化<xref:System.Net.WebProxy.Address%2A>屬性設定為<xref:System.Uri>執行個體包含`Address`。</xref:System.Uri> </xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy>"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#6](~/add/codesnippet/cpp/m-system.net.webproxy.sh_1_1.cpp)]\n [!code-cs[NCLWebProxy#6](~/add/codesnippet/csharp/m-system.net.webproxy.sh_1_1.cs)]"
  syntax:
    content: public WebProxy (string Address);
    parameters:
    - id: Address
      type: System.String
      description: "Proxy 伺服器的 URI。"
  overload: System.Net.WebProxy.#ctor*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>Address</code> 是無效的 URI。"
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.Uri)
  id: '#ctor(System.Uri)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(Uri)
  nameWithType: WebProxy.WebProxy(Uri)
  fullName: System.Net.WebProxy.WebProxy(Uri)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "初始化的新執行個體<xref href=&quot;System.Net.WebProxy&quot;></xref>從指定的類別<xref:System.Uri>執行個體。</xref:System.Uri>"
  remarks: "<xref:System.Net.WebProxy>執行個體以初始化<xref:System.Net.WebProxy.Address%2A>屬性設定為`Address`參數。</xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy>"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#2](~/add/codesnippet/cpp/m-system.net.webproxy.sh_0_1.cpp)]\n [!code-cs[NCLWebProxy#2](~/add/codesnippet/csharp/m-system.net.webproxy.sh_0_1.cs)]"
  syntax:
    content: public WebProxy (Uri Address);
    parameters:
    - id: Address
      type: System.Uri
      description: "A<xref:System.Uri>執行個體，其中包含 proxy 伺服器位址。</xref:System.Uri>"
  overload: System.Net.WebProxy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(SerializationInfo,StreamingContext)
  nameWithType: WebProxy.WebProxy(SerializationInfo,StreamingContext)
  fullName: System.Net.WebProxy.WebProxy(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "初始化的執行個體<xref href=&quot;System.Net.WebProxy&quot;></xref>類別使用先前已序列化的內容。"
  remarks: "若要還原序列化<xref:System.Net.WebProxy>執行個體; 不會呼叫它的應用程式執行</xref:System.Net.WebProxy>系統呼叫這個方法"
  syntax:
    content: protected WebProxy (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
    parameters:
    - id: serializationInfo
      type: System.Runtime.Serialization.SerializationInfo
      description: "序列化資料。"
    - id: streamingContext
      type: System.Runtime.Serialization.StreamingContext
      description: "序列化資料的內容。"
  overload: System.Net.WebProxy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(String,Boolean)
  nameWithType: WebProxy.WebProxy(String,Boolean)
  fullName: System.Net.WebProxy.WebProxy(String,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "初始化的新執行個體<xref href=&quot;System.Net.WebProxy&quot;></xref>類別使用指定的 URI，並略過的設定。"
  remarks: "<xref:System.Net.WebProxy>執行個體以初始化<xref:System.Net.WebProxy.Address%2A>屬性設定為<xref:System.Uri>包含執行個體`Address`和<xref:System.Net.WebProxy.BypassProxyOnLocal%2A>屬性設定為`BypassOnLocal`。</xref:System.Net.WebProxy.BypassProxyOnLocal%2A> </xref:System.Uri> </xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy>"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#7](~/add/codesnippet/cpp/m-system.net.webproxy.sh_4_1.cpp)]\n [!code-cs[NCLWebProxy#7](~/add/codesnippet/csharp/m-system.net.webproxy.sh_4_1.cs)]"
  syntax:
    content: public WebProxy (string Address, bool BypassOnLocal);
    parameters:
    - id: Address
      type: System.String
      description: "Proxy 伺服器的 URI。"
    - id: BypassOnLocal
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>要略過本機位址，proxy否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.WebProxy.#ctor*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>Address</code> 是無效的 URI。"
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(String,Int32)
  nameWithType: WebProxy.WebProxy(String,Int32)
  fullName: System.Net.WebProxy.WebProxy(String,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "初始化的新執行個體<xref href=&quot;System.Net.WebProxy&quot;></xref>類別指定的主機和連接埠號碼。"
  remarks: '<xref:System.Net.WebProxy>執行個體以初始化<xref:System.Net.WebProxy.Address%2A>屬性設定為<xref:System.Uri>格式 http:// 的執行個體`Host`: `Port`。</xref:System.Uri> </xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy>'
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#5](~/add/codesnippet/cpp/m-system.net.webproxy.sh_6_1.cpp)]\n [!code-cs[NCLWebProxy#5](~/add/codesnippet/csharp/m-system.net.webproxy.sh_6_1.cs)]"
  syntax:
    content: public WebProxy (string Host, int Port);
    parameters:
    - id: Host
      type: System.String
      description: "Proxy 主機名稱。"
    - id: Port
      type: System.Int32
      description: "通訊埠編號`Host`使用。"
  overload: System.Net.WebProxy.#ctor*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "合併所形成的 URI <code> Host </code>和<code> Port </code>不是有效的 URI。"
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.Uri,System.Boolean)
  id: '#ctor(System.Uri,System.Boolean)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(Uri,Boolean)
  nameWithType: WebProxy.WebProxy(Uri,Boolean)
  fullName: System.Net.WebProxy.WebProxy(Uri,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "初始化的新執行個體<xref href=&quot;System.Net.WebProxy&quot;></xref>類別<xref:System.Uri>執行個體，並略過的設定。</xref:System.Uri>"
  remarks: "<xref:System.Net.WebProxy>執行個體以初始化<xref:System.Net.WebProxy.Address%2A>屬性設定為`Address`與<xref:System.Net.WebProxy.BypassProxyOnLocal%2A>屬性設定為`BypassOnLocal`。</xref:System.Net.WebProxy.BypassProxyOnLocal%2A> </xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy>"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#3](~/add/codesnippet/cpp/m-system.net.webproxy.sh_7_1.cpp)]\n [!code-cs[NCLWebProxy#3](~/add/codesnippet/csharp/m-system.net.webproxy.sh_7_1.cs)]"
  syntax:
    content: public WebProxy (Uri Address, bool BypassOnLocal);
    parameters:
    - id: Address
      type: System.Uri
      description: "A<xref:System.Uri>執行個體，其中包含 proxy 伺服器位址。</xref:System.Uri>"
    - id: BypassOnLocal
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>要略過本機位址，proxy否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.WebProxy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[])
  id: '#ctor(System.String,System.Boolean,System.String[])'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(String,Boolean,String[])
  nameWithType: WebProxy.WebProxy(String,Boolean,String[])
  fullName: System.Net.WebProxy.WebProxy(String,Boolean,String[])
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "初始化的新執行個體<xref href=&quot;System.Net.WebProxy&quot;></xref>類別，其中包含指定的 URI 設定，請略過，略過的 Uri 清單。"
  remarks: "<xref:System.Net.WebProxy>執行個體以初始化<xref:System.Net.WebProxy.Address%2A>屬性設定為<xref:System.Uri>包含執行個體`Address`、<xref:System.Net.WebProxy.BypassProxyOnLocal%2A>屬性設定為`BypassOnLocal`，而<xref:System.Net.WebProxy.BypassList%2A>屬性設定為`BypassList`。</xref:System.Net.WebProxy.BypassList%2A> </xref:System.Net.WebProxy.BypassProxyOnLocal%2A> </xref:System.Uri> </xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy>"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#8](~/add/codesnippet/cpp/m-system.net.webproxy.sh_2_1.cpp)]\n [!code-cs[NCLWebProxy#8](~/add/codesnippet/csharp/m-system.net.webproxy.sh_2_1.cs)]"
  syntax:
    content: public WebProxy (string Address, bool BypassOnLocal, string[] BypassList);
    parameters:
    - id: Address
      type: System.String
      description: "Proxy 伺服器的 URI。"
    - id: BypassOnLocal
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>要略過本機位址，proxy否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    - id: BypassList
      type: System.String[]
      description: "包含伺服器的 Uri，以略過的規則運算式字串的陣列。"
  overload: System.Net.WebProxy.#ctor*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>Address</code> 是無效的 URI。"
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[])
  id: '#ctor(System.Uri,System.Boolean,System.String[])'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(Uri,Boolean,String[])
  nameWithType: WebProxy.WebProxy(Uri,Boolean,String[])
  fullName: System.Net.WebProxy.WebProxy(Uri,Boolean,String[])
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "初始化的新執行個體<xref href=&quot;System.Net.WebProxy&quot;></xref>類別具有指定<xref:System.Uri>執行個體，略過設定和略過的 Uri 清單。</xref:System.Uri>"
  remarks: "<xref:System.Net.WebProxy>執行個體以初始化<xref:System.Net.WebProxy.Address%2A>屬性設定為`Address`、<xref:System.Net.WebProxy.BypassProxyOnLocal%2A>屬性設定為`BypassOnLocal`，而<xref:System.Net.WebProxy.BypassList%2A>屬性設定為`BypassList`。</xref:System.Net.WebProxy.BypassList%2A> </xref:System.Net.WebProxy.BypassProxyOnLocal%2A> </xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy>"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#4](~/add/codesnippet/cpp/m-system.net.webproxy.sh_5_1.cpp)]\n [!code-cs[NCLWebProxy#4](~/add/codesnippet/csharp/m-system.net.webproxy.sh_5_1.cs)]"
  syntax:
    content: public WebProxy (Uri Address, bool BypassOnLocal, string[] BypassList);
    parameters:
    - id: Address
      type: System.Uri
      description: "A<xref:System.Uri>執行個體，其中包含 proxy 伺服器位址。</xref:System.Uri>"
    - id: BypassOnLocal
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>要略過本機位址，proxy否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    - id: BypassList
      type: System.String[]
      description: "包含伺服器的 Uri，以略過的規則運算式的字串陣列。"
  overload: System.Net.WebProxy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[],System.Net.ICredentials)
  id: '#ctor(System.String,System.Boolean,System.String[],System.Net.ICredentials)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(String,Boolean,String[],ICredentials)
  nameWithType: WebProxy.WebProxy(String,Boolean,String[],ICredentials)
  fullName: System.Net.WebProxy.WebProxy(String,Boolean,String[],ICredentials)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "初始化的新執行個體<xref href=&quot;System.Net.WebProxy&quot;></xref>類別具有指定之 URI 中，略過設定，以略過，Uri 和認證的清單。"
  remarks: "<xref:System.Net.WebProxy>執行個體以初始化<xref:System.Net.WebProxy.Address%2A>屬性設定為<xref:System.Uri>包含執行個體`Address`、<xref:System.Net.WebProxy.BypassProxyOnLocal%2A>屬性設定為`BypassOnLocal`、<xref:System.Net.WebProxy.BypassList%2A>屬性設定為`BypassList`，而<xref:System.Net.WebProxy.Credentials%2A>屬性設定為`Credentials`。</xref:System.Net.WebProxy.Credentials%2A> </xref:System.Net.WebProxy.BypassList%2A> </xref:System.Net.WebProxy.BypassProxyOnLocal%2A> </xref:System.Uri> </xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy>"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#9](~/add/codesnippet/cpp/25929c39-89a2-4ac3-bf8d-_1.cpp)]\n [!code-cs[NCLWebProxy#9](~/add/codesnippet/csharp/25929c39-89a2-4ac3-bf8d-_1.cs)]"
  syntax:
    content: public WebProxy (string Address, bool BypassOnLocal, string[] BypassList, System.Net.ICredentials Credentials);
    parameters:
    - id: Address
      type: System.String
      description: "Proxy 伺服器的 URI。"
    - id: BypassOnLocal
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>要略過本機位址，proxy否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    - id: BypassList
      type: System.String[]
      description: "包含伺服器的 Uri，以略過的規則運算式的字串陣列。"
    - id: Credentials
      type: System.Net.ICredentials
      description: "<xref:System.Net.ICredentials>提交到 proxy 伺服器進行驗證的執行個體。</xref:System.Net.ICredentials>"
  overload: System.Net.WebProxy.#ctor*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>Address</code> 是無效的 URI。"
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[],System.Net.ICredentials)
  id: '#ctor(System.Uri,System.Boolean,System.String[],System.Net.ICredentials)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(Uri,Boolean,String[],ICredentials)
  nameWithType: WebProxy.WebProxy(Uri,Boolean,String[],ICredentials)
  fullName: System.Net.WebProxy.WebProxy(Uri,Boolean,String[],ICredentials)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "初始化的新執行個體<xref href=&quot;System.Net.WebProxy&quot;></xref>類別具有指定<xref:System.Uri>執行個體，請略過設定，以略過，Uri 和認證的清單。</xref:System.Uri>"
  remarks: "<xref:System.Net.WebProxy>執行個體以初始化<xref:System.Net.WebProxy.Address%2A>屬性設定為`Address`、<xref:System.Net.WebProxy.BypassProxyOnLocal%2A>屬性設定為`BypassOnLocal`、<xref:System.Net.WebProxy.BypassList%2A>屬性設定為`BypassList`，而<xref:System.Net.WebProxy.Credentials%2A>屬性設定為`Credentials`。</xref:System.Net.WebProxy.Credentials%2A> </xref:System.Net.WebProxy.BypassList%2A> </xref:System.Net.WebProxy.BypassProxyOnLocal%2A> </xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy>"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#13](~/add/codesnippet/cpp/35b6ace3-e60e-4d11-a417-_1.cpp)]\n [!code-cs[NCLWebProxy#13](~/add/codesnippet/csharp/35b6ace3-e60e-4d11-a417-_1.cs)]"
  syntax:
    content: public WebProxy (Uri Address, bool BypassOnLocal, string[] BypassList, System.Net.ICredentials Credentials);
    parameters:
    - id: Address
      type: System.Uri
      description: "A<xref:System.Uri>執行個體，其中包含 proxy 伺服器位址。</xref:System.Uri>"
    - id: BypassOnLocal
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>要略過本機位址，proxy否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    - id: BypassList
      type: System.String[]
      description: "包含伺服器的 Uri，以略過的規則運算式的字串陣列。"
    - id: Credentials
      type: System.Net.ICredentials
      description: "<xref:System.Net.ICredentials>提交到 proxy 伺服器進行驗證的執行個體。</xref:System.Net.ICredentials>"
  overload: System.Net.WebProxy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.Address
  id: Address
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: Address
  nameWithType: WebProxy.Address
  fullName: System.Net.WebProxy.Address
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得或設定 proxy 伺服器的位址。"
  remarks: "[位址] 屬性包含 proxy 伺服器的位址。 當未啟用自動 proxy 偵測，並指定任何自動組態指令碼、 地址屬性和<xref:System.Net.WebProxy.BypassList%2A>判斷用於要求的 proxy。</xref:System.Net.WebProxy.BypassList%2A>       [位址] 屬性時`null`，要求略過 proxy，並直接連接到目的地主機。"
  example:
  - "The following code example displays the properties of a <xref:System.Net.WebProxy> object, including its Address.  \n  \n [!code-cs[NCLAutoProxy#1](~/add/codesnippet/csharp/p-system.net.webproxy.ad_1.cs)]\n [!code-cpp[NCLAutoProxy#1](~/add/codesnippet/cpp/p-system.net.webproxy.ad_1.cpp)]"
  syntax:
    content: public Uri Address { get; set; }
    return:
      type: System.Uri
      description: "A<xref:System.Uri>執行個體，其中包含 proxy 伺服器位址。</xref:System.Uri>"
  overload: System.Net.WebProxy.Address*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.BypassArrayList
  id: BypassArrayList
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: BypassArrayList
  nameWithType: WebProxy.BypassArrayList
  fullName: System.Net.WebProxy.BypassArrayList
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得一份不使用 proxy 伺服器的位址。"
  remarks: "<xref:System.Net.WebProxy.BypassList%2A>是陣列的規則運算式字串清單會描述 Uri，<xref:System.Net.WebRequest>執行個體直接而不是透過 proxy 伺服器存取。</xref:System.Net.WebRequest> </xref:System.Net.WebProxy.BypassList%2A>"
  syntax:
    content: public System.Collections.ArrayList BypassArrayList { get; }
    return:
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> ，其中包含一份<xref:System.Net.WebProxy.BypassList*>代表 Uri 不使用 proxy 伺服器存取時的陣列。</xref:System.Net.WebProxy.BypassList*>"
  overload: System.Net.WebProxy.BypassArrayList*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.BypassList
  id: BypassList
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: BypassList
  nameWithType: WebProxy.BypassList
  fullName: System.Net.WebProxy.BypassList
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得或設定的位址不使用 proxy 伺服器陣列。"
  remarks: "BypassList 屬性包含規則運算式，其中描述 Uri 陣列的<xref:System.Net.WebRequest>執行個體直接而不是透過 proxy 伺服器存取。</xref:System.Net.WebRequest>"
  example:
  - "The following code example displays the properties of a <xref:System.Net.WebProxy> object, including its BypassList property.  \n  \n [!code-cs[NCLAutoProxy#1](~/add/codesnippet/csharp/p-system.net.webproxy.by_0_1.cs)]\n [!code-cpp[NCLAutoProxy#1](~/add/codesnippet/cpp/p-system.net.webproxy.by_0_1.cpp)]"
  syntax:
    content: public string[] BypassList { get; set; }
    return:
      type: System.String[]
      description: "陣列，其中包含規則運算式，其中描述 Uri 不使用 proxy 伺服器存取時的清單。"
  overload: System.Net.WebProxy.BypassList*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.BypassProxyOnLocal
  id: BypassProxyOnLocal
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: BypassProxyOnLocal
  nameWithType: WebProxy.BypassProxyOnLocal
  fullName: System.Net.WebProxy.BypassProxyOnLocal
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得或設定值，指出是否略過本機位址的 proxy 伺服器。"
  remarks: "BypassProxyOnLocal 屬性的設定會決定是否<xref:System.Net.WebRequest>執行個體會在存取本機網際網路資源時使用 proxy 伺服器。</xref:System.Net.WebRequest>       如果是 BypassProxyOnLocal `true`，對於本機網際網路資源的要求不使用 proxy 伺服器。 本機要求所識別的句號 （.），在 URI 中，如同 http://webserver/，缺少或存取本機伺服器，包括 http://localhost、 http://loopback 或 http://127.0.0.1。 BypassProxyOnLocal 時`false`，所有的網際網路要求都會經過 proxy 伺服器。      > [!NOTE] > 要求至本機主機的 uri 包含句號的使用 proxy。 若要避免在這些情況下使用 proxy，建立在<xref:System.Net.WebProxy.BypassList%2A>.</xref:System.Net.WebProxy.BypassList%2A>主機項目"
  example:
  - "The following code example demonstrates calling a constructor that sets this property and getting the value of this property.  \n  \n [!code-cpp[NCLWebProxy#7](~/add/codesnippet/cpp/p-system.net.webproxy.by_1_1.cpp)]\n [!code-cs[NCLWebProxy#7](~/add/codesnippet/csharp/p-system.net.webproxy.by_1_1.cs)]"
  syntax:
    content: public bool BypassProxyOnLocal { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>略過 proxy 伺服器的本機位址，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.WebProxy.BypassProxyOnLocal*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.Credentials
  id: Credentials
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: Credentials
  nameWithType: WebProxy.Credentials
  fullName: System.Net.WebProxy.Credentials
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得或設定要提交到 proxy 伺服器進行驗證的認證。"
  remarks: "認證屬性包含要傳送至 proxy 伺服器，以回應透過 HTTP 407 （proxy 授權） 狀態碼的驗證認證。 在大部分的用戶端情況下，您應該使用<xref:System.Net.CredentialCache.DefaultCredentials%2A>，這是目前登入使用者的認證。</xref:System.Net.CredentialCache.DefaultCredentials%2A> 若要這樣做，請設定<xref:System.Net.WebProxy.UseDefaultCredentials%2A>屬性`true`而不是設定這個屬性。</xref:System.Net.WebProxy.UseDefaultCredentials%2A>      > [!NOTE] > 如果您的認證將屬性設定為認證以外<xref:System.Net.CredentialCache.DefaultCredentials%2A>，設定<xref:System.Net.WebProxy.UseDefaultCredentials%2A>屬性`true`導致<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Net.WebProxy.UseDefaultCredentials%2A> </xref:System.Net.CredentialCache.DefaultCredentials%2A> 若要防止這個情況，您必須設定認證屬性`null`，才能設定<xref:System.Net.WebProxy.UseDefaultCredentials%2A>屬性`true`。</xref:System.Net.WebProxy.UseDefaultCredentials%2A> 同樣地，您無法設定此屬性為任何值時<xref:System.Net.WebProxy.UseDefaultCredentials%2A>是`true`。</xref:System.Net.WebProxy.UseDefaultCredentials%2A>"
  syntax:
    content: public System.Net.ICredentials Credentials { get; set; }
    return:
      type: System.Net.ICredentials
      description: "<xref:System.Net.ICredentials>執行個體，其中包含要提交到 proxy 伺服器進行驗證的認證。</xref:System.Net.ICredentials>"
  overload: System.Net.WebProxy.Credentials*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "您嘗試設定此屬性時<xref:System.Net.WebProxy.UseDefaultCredentials*>屬性設定為<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。</xref:System.Net.WebProxy.UseDefaultCredentials*>"
  platform:
  - net462
- uid: System.Net.WebProxy.GetDefaultProxy
  id: GetDefaultProxy
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: GetDefaultProxy()
  nameWithType: WebProxy.GetDefaultProxy()
  fullName: System.Net.WebProxy.GetDefaultProxy()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "讀取 Internet Explorer 非動態的 proxy 設定。"
  remarks: "GetDefaultProxy 方法讀取 Internet Explorer 5.5 及更新版本中，儲存的非動態的 proxy 設定，並建立<xref:System.Net.WebProxy>這些設定的執行個體。</xref:System.Net.WebProxy>       GetDefaultProxy 方法不會拾取來自 Internet Explorer 所執行的指令碼，自動設定項目，或 DHCP 或 DNS 查閱就會產生任何動態設定。       應用程式應該使用<xref:System.Net.WebRequest.DefaultWebProxy%2A?displayProperty=fullName>屬性和<xref:System.Net.WebRequest.GetSystemWebProxy%2A?displayProperty=fullName>方法，而不是 GetDefaultProxy 方法。</xref:System.Net.WebRequest.GetSystemWebProxy%2A?displayProperty=fullName> </xref:System.Net.WebRequest.DefaultWebProxy%2A?displayProperty=fullName>"
  example:
  - "The following code example demonstrates calling this method.  \n  \n [!code-cpp[NCLWebProxy#11](~/add/codesnippet/cpp/m-system.net.webproxy.ge_0_1.cpp)]\n [!code-cs[NCLWebProxy#11](~/add/codesnippet/csharp/m-system.net.webproxy.ge_0_1.cs)]"
  syntax:
    content: public static System.Net.WebProxy GetDefaultProxy ();
    parameters: []
    return:
      type: System.Net.WebProxy
      description: "A <xref href=&quot;System.Net.WebProxy&quot;> </xref>包含非動態的 proxy 設定，從 Internet Explorer 5.5 及更新版本的執行個體。"
  overload: System.Net.WebProxy.GetDefaultProxy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: WebProxy.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.WebProxy.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "於其中填入<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref>將序列化目標物件所需的資料。"
  remarks: "中所包含的任何物件<xref:System.Runtime.Serialization.SerializationInfo>自動追蹤和序列化格式子。</xref:System.Runtime.Serialization.SerializationInfo>"
  syntax:
    content: protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
    parameters:
    - id: serializationInfo
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>来填入資料。"
    - id: streamingContext
      type: System.Runtime.Serialization.StreamingContext
      description: "A <xref:System.Runtime.Serialization.StreamingContext>，指定這個序列化的目的地。</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Net.WebProxy.GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.GetProxy(System.Uri)
  id: GetProxy(System.Uri)
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: GetProxy(Uri)
  nameWithType: WebProxy.GetProxy(Uri)
  fullName: System.Net.WebProxy.GetProxy(Uri)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "傳回要求的 proxy URI。"
  remarks: "GetProxy 方法傳回的 URI，<xref:System.Net.WebRequest>執行個體會使用來存取網際網路資源。</xref:System.Net.WebRequest>       GetProxy 比較`destination`的內容<xref:System.Net.WebProxy.BypassList%2A>，並使用<xref:System.Net.WebProxy.IsBypassed%2A>方法。</xref:System.Net.WebProxy.IsBypassed%2A> </xref:System.Net.WebProxy.BypassList%2A> 如果<xref:System.Net.WebProxy.IsBypassed%2A>傳回`true`，GetProxy 傳回`destination`和<xref:System.Net.WebRequest>執行個體不會使用 proxy 伺服器。</xref:System.Net.WebRequest> </xref:System.Net.WebProxy.IsBypassed%2A>       如果`destination`不在<xref:System.Net.WebProxy.BypassList%2A>、<xref:System.Net.WebRequest>執行個體會使用 proxy 伺服器而<xref:System.Net.WebProxy.Address%2A>會傳回屬性。</xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebRequest> </xref:System.Net.WebProxy.BypassList%2A>"
  example:
  - "The following code example creates a <xref:System.Net.WebProxy> object and calls this method to get the proxy that is selected for a resource.  \n  \n [!code-cs[NCLAutoProxy#2](~/add/codesnippet/csharp/m-system.net.webproxy.ge_1_1.cs)]\n [!code-cpp[NCLAutoProxy#2](~/add/codesnippet/cpp/m-system.net.webproxy.ge_1_1.cpp)]"
  syntax:
    content: public Uri GetProxy (Uri destination);
    parameters:
    - id: destination
      type: System.Uri
      description: "<xref:System.Uri>要求之網際網路資源的執行個體。</xref:System.Uri>"
    return:
      type: System.Uri
      description: "<xref:System.Uri>執行個體的網際網路資源，如果資源位於略過清單; 否則<xref:System.Uri>proxy 的執行個體。</xref:System.Uri> </xref:System.Uri>"
  overload: System.Net.WebProxy.GetProxy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>destination</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.WebProxy.IsBypassed(System.Uri)
  id: IsBypassed(System.Uri)
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: IsBypassed(Uri)
  nameWithType: WebProxy.IsBypassed(Uri)
  fullName: System.Net.WebProxy.IsBypassed(Uri)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "指出是否要針對指定的主機使用 proxy 伺服器。"
  remarks: "IsBypassed 方法用來判斷是否要略過 proxy 伺服器存取網際網路資源時。       <xref:System.Net.WebProxy.BypassProxyOnLocal%2A>和<xref:System.Net.WebProxy.BypassList%2A>屬性控制 IsBypassed 方法的傳回值。</xref:System.Net.WebProxy.BypassList%2A> </xref:System.Net.WebProxy.BypassProxyOnLocal%2A>       IsBypassed 傳回`true`任何下列條件:-如果<xref:System.Net.WebProxy.BypassProxyOnLocal%2A>是`true`和`host`是本機的 URI。</xref:System.Net.WebProxy.BypassProxyOnLocal%2A> 本機要求識別沒有句號 （.） 中的 URI，如&quot;http://webserver/ 」 所示。      -如果`host`符合規則運算式中<xref:System.Net.WebProxy.BypassList%2A>.</xref:System.Net.WebProxy.BypassList%2A>      -   If <xref:System.Net.WebProxy.Address%2A> is `null`.</xref:System.Net.WebProxy.Address%2A>       所有其他條件傳回`false`。"
  example:
  - "The following code example creates a <xref:System.Net.WebProxy> object and calls this method to check whether the bypass list is properly set.  \n  \n [!code-cpp[NCLWebProxy#12](~/add/codesnippet/cpp/m-system.net.webproxy.is_1.cpp)]\n [!code-cs[NCLWebProxy#12](~/add/codesnippet/csharp/m-system.net.webproxy.is_1.cs)]"
  syntax:
    content: public bool IsBypassed (Uri host);
    parameters:
    - id: host
      type: System.Uri
      description: "<xref:System.Uri>檢查 proxy 使用主控件執行個體。</xref:System.Uri>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果 proxy 伺服器不能用於<code> host </code>，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.WebProxy.IsBypassed*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>host</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.WebProxy.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: WebProxy.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.WebProxy.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "建立的序列化資料和系統用於序列化的內容<xref href=&quot;System.Net.WebProxy&quot;></xref>物件。"
  remarks: "系統會呼叫這個方法，以序列化物件。應用程式不會呼叫它直接。"
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
    parameters:
    - id: serializationInfo
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>来填入資料的物件。"
    - id: streamingContext
      type: System.Runtime.Serialization.StreamingContext
      description: "A<xref:System.Runtime.Serialization.StreamingContext>結構，表示這個序列化的目的端。</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Net.WebProxy.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.UseDefaultCredentials
  id: UseDefaultCredentials
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: UseDefaultCredentials
  nameWithType: WebProxy.UseDefaultCredentials
  fullName: System.Net.WebProxy.UseDefaultCredentials
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得或設定<xref:System.Boolean>值，控制是否<xref:System.Net.CredentialCache.DefaultCredentials*>隨著要求傳送。</xref:System.Net.CredentialCache.DefaultCredentials*> </xref:System.Boolean>"
  remarks: "將此屬性設定為`true`當要求所做的變更<xref:System.Net.WebProxy>物件應該如果伺服器要求進行驗證使用目前登入使用者的認證。</xref:System.Net.WebProxy> 用戶端應用程式，這是所要的行為，在大部分情況下。 對於中介層應用程式，例如 ASP.NET 應用程式，而不是使用這個屬性，您需要設定<xref:System.Net.WebProxy.Credentials%2A>代表其提出要求的用戶端認證的屬性。</xref:System.Net.WebProxy.Credentials%2A>       下表顯示設定的值為基礎的 UseDefaultCredentials 值的效果<xref:System.Net.WebProxy.Credentials%2A>屬性。</xref:System.Net.WebProxy.Credentials%2A>      |<xref:System.Net.WebProxy.Credentials%2A>值 |UseDefaultCredentials 值 |效果 |  |----------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|  |<xref:System.Net.CredentialCache.DefaultCredentials%2A>|`true`|沒有作用。 |  |<xref:System.Net.CredentialCache.DefaultCredentials%2A>|`false`|<xref:System.Net.WebProxy.Credentials%2A>設`null`。 |  |`null`|`true`|<xref:System.Net.WebProxy.Credentials%2A> is set to <xref:System.Net.CredentialCache.DefaultCredentials%2A>.|  |<xref:System.Net.CredentialCache.DefaultCredentials%2A>以外的任何值或`null` | `true`或`false`|設定 UseDefaultCredentials 會擲回例外狀況。 |      如果是 UseDefaultCredentials `false`，您可以變更<xref:System.Net.WebProxy.Credentials%2A>任何認證的屬性。</xref:System.Net.WebProxy.Credentials%2A> </xref:System.Net.CredentialCache.DefaultCredentials%2A> </xref:System.Net.CredentialCache.DefaultCredentials%2A> </xref:System.Net.WebProxy.Credentials%2A> </xref:System.Net.WebProxy.Credentials%2A> </xref:System.Net.CredentialCache.DefaultCredentials%2A> </xref:System.Net.CredentialCache.DefaultCredentials%2A> </xref:System.Net.WebProxy.Credentials%2A> 如果是 UseDefaultCredentials `true`、 變更<xref:System.Net.WebProxy.Credentials%2A>屬性從<xref:System.Net.CredentialCache.DefaultCredentials%2A>(UseDefaultCredentials 屬性設定為時已設定的值`true`) 將會擲回例外狀況。</xref:System.Net.CredentialCache.DefaultCredentials%2A> </xref:System.Net.WebProxy.Credentials%2A>"
  syntax:
    content: public bool UseDefaultCredentials { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果使用預設認證。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.WebProxy.UseDefaultCredentials*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "您嘗試設定此屬性時<xref:System.Net.WebProxy.Credentials*>屬性包含預設認證以外的認證。</xref:System.Net.WebProxy.Credentials*> 如需詳細資訊，請參閱 < 備註 > 一節。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.UriFormatException
  isExternal: true
  name: System.UriFormatException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.WebProxy.#ctor
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy()
  nameWithType: WebProxy.WebProxy()
  fullName: System.Net.WebProxy.WebProxy()
- uid: System.Net.WebProxy.#ctor(System.String)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(String)
  nameWithType: WebProxy.WebProxy(String)
  fullName: System.Net.WebProxy.WebProxy(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.WebProxy.#ctor(System.Uri)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(Uri)
  nameWithType: WebProxy.WebProxy(Uri)
  fullName: System.Net.WebProxy.WebProxy(Uri)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.WebProxy.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(SerializationInfo,StreamingContext)
  nameWithType: WebProxy.WebProxy(SerializationInfo,StreamingContext)
  fullName: System.Net.WebProxy.WebProxy(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Net.WebProxy.#ctor(System.String,System.Boolean)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(String,Boolean)
  nameWithType: WebProxy.WebProxy(String,Boolean)
  fullName: System.Net.WebProxy.WebProxy(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.WebProxy.#ctor(System.String,System.Int32)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(String,Int32)
  nameWithType: WebProxy.WebProxy(String,Int32)
  fullName: System.Net.WebProxy.WebProxy(String,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.WebProxy.#ctor(System.Uri,System.Boolean)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(Uri,Boolean)
  nameWithType: WebProxy.WebProxy(Uri,Boolean)
  fullName: System.Net.WebProxy.WebProxy(Uri,Boolean)
- uid: System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[])
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(String,Boolean,String[])
  nameWithType: WebProxy.WebProxy(String,Boolean,String[])
  fullName: System.Net.WebProxy.WebProxy(String,Boolean,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[])
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(Uri,Boolean,String[])
  nameWithType: WebProxy.WebProxy(Uri,Boolean,String[])
  fullName: System.Net.WebProxy.WebProxy(Uri,Boolean,String[])
- uid: System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[],System.Net.ICredentials)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(String,Boolean,String[],ICredentials)
  nameWithType: WebProxy.WebProxy(String,Boolean,String[],ICredentials)
  fullName: System.Net.WebProxy.WebProxy(String,Boolean,String[],ICredentials)
- uid: System.Net.ICredentials
  parent: System.Net
  isExternal: true
  name: ICredentials
  nameWithType: ICredentials
  fullName: System.Net.ICredentials
- uid: System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[],System.Net.ICredentials)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(Uri,Boolean,String[],ICredentials)
  nameWithType: WebProxy.WebProxy(Uri,Boolean,String[],ICredentials)
  fullName: System.Net.WebProxy.WebProxy(Uri,Boolean,String[],ICredentials)
- uid: System.Net.WebProxy.Address
  parent: System.Net.WebProxy
  isExternal: false
  name: Address
  nameWithType: WebProxy.Address
  fullName: System.Net.WebProxy.Address
- uid: System.Net.WebProxy.BypassArrayList
  parent: System.Net.WebProxy
  isExternal: false
  name: BypassArrayList
  nameWithType: WebProxy.BypassArrayList
  fullName: System.Net.WebProxy.BypassArrayList
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Net.WebProxy.BypassList
  parent: System.Net.WebProxy
  isExternal: false
  name: BypassList
  nameWithType: WebProxy.BypassList
  fullName: System.Net.WebProxy.BypassList
- uid: System.Net.WebProxy.BypassProxyOnLocal
  parent: System.Net.WebProxy
  isExternal: false
  name: BypassProxyOnLocal
  nameWithType: WebProxy.BypassProxyOnLocal
  fullName: System.Net.WebProxy.BypassProxyOnLocal
- uid: System.Net.WebProxy.Credentials
  parent: System.Net.WebProxy
  isExternal: false
  name: Credentials
  nameWithType: WebProxy.Credentials
  fullName: System.Net.WebProxy.Credentials
- uid: System.Net.WebProxy.GetDefaultProxy
  parent: System.Net.WebProxy
  isExternal: false
  name: GetDefaultProxy()
  nameWithType: WebProxy.GetDefaultProxy()
  fullName: System.Net.WebProxy.GetDefaultProxy()
- uid: System.Net.WebProxy
  parent: System.Net
  isExternal: false
  name: WebProxy
  nameWithType: WebProxy
  fullName: System.Net.WebProxy
- uid: System.Net.WebProxy.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.WebProxy
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: WebProxy.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.WebProxy.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Net.WebProxy.GetProxy(System.Uri)
  parent: System.Net.WebProxy
  isExternal: false
  name: GetProxy(Uri)
  nameWithType: WebProxy.GetProxy(Uri)
  fullName: System.Net.WebProxy.GetProxy(Uri)
- uid: System.Net.WebProxy.IsBypassed(System.Uri)
  parent: System.Net.WebProxy
  isExternal: false
  name: IsBypassed(Uri)
  nameWithType: WebProxy.IsBypassed(Uri)
  fullName: System.Net.WebProxy.IsBypassed(Uri)
- uid: System.Net.WebProxy.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.WebProxy
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: WebProxy.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.WebProxy.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Net.WebProxy.UseDefaultCredentials
  parent: System.Net.WebProxy
  isExternal: false
  name: UseDefaultCredentials
  nameWithType: WebProxy.UseDefaultCredentials
  fullName: System.Net.WebProxy.UseDefaultCredentials
- uid: System.Net.WebProxy.#ctor*
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy
  nameWithType: WebProxy.WebProxy
- uid: System.Net.WebProxy.Address*
  parent: System.Net.WebProxy
  isExternal: false
  name: Address
  nameWithType: WebProxy.Address
- uid: System.Net.WebProxy.BypassArrayList*
  parent: System.Net.WebProxy
  isExternal: false
  name: BypassArrayList
  nameWithType: WebProxy.BypassArrayList
- uid: System.Net.WebProxy.BypassList*
  parent: System.Net.WebProxy
  isExternal: false
  name: BypassList
  nameWithType: WebProxy.BypassList
- uid: System.Net.WebProxy.BypassProxyOnLocal*
  parent: System.Net.WebProxy
  isExternal: false
  name: BypassProxyOnLocal
  nameWithType: WebProxy.BypassProxyOnLocal
- uid: System.Net.WebProxy.Credentials*
  parent: System.Net.WebProxy
  isExternal: false
  name: Credentials
  nameWithType: WebProxy.Credentials
- uid: System.Net.WebProxy.GetDefaultProxy*
  parent: System.Net.WebProxy
  isExternal: false
  name: GetDefaultProxy
  nameWithType: WebProxy.GetDefaultProxy
- uid: System.Net.WebProxy.GetObjectData*
  parent: System.Net.WebProxy
  isExternal: false
  name: GetObjectData
  nameWithType: WebProxy.GetObjectData
- uid: System.Net.WebProxy.GetProxy*
  parent: System.Net.WebProxy
  isExternal: false
  name: GetProxy
  nameWithType: WebProxy.GetProxy
- uid: System.Net.WebProxy.IsBypassed*
  parent: System.Net.WebProxy
  isExternal: false
  name: IsBypassed
  nameWithType: WebProxy.IsBypassed
- uid: System.Net.WebProxy.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: System.Net.WebProxy
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: WebProxy.System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Net.WebProxy.UseDefaultCredentials*
  parent: System.Net.WebProxy
  isExternal: false
  name: UseDefaultCredentials
  nameWithType: WebProxy.UseDefaultCredentials
