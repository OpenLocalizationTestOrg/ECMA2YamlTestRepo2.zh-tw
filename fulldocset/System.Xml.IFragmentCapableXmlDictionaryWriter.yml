### YamlMime:ManagedReference
items:
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter
  id: IFragmentCapableXmlDictionaryWriter
  children:
  - System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment
  - System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment
  - System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)
  - System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  name: IFragmentCapableXmlDictionaryWriter
  nameWithType: IFragmentCapableXmlDictionaryWriter
  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter
  type: Interface
  summary: "包含屬性和方法，當所實作<xref:System.Xml.XmlDictionaryWriter>，可讓處理 XML 片段。</xref:System.Xml.XmlDictionaryWriter>"
  remarks: "這個類別會定義的屬性和方法的功能與相關<xref:System.Xml.XmlDictionaryWriter>將其輸出 （「 片段 」） 的組件重新導向至其建立時使用的資料流不同資料流，並回到相同的寫入器，在稍後的主要資料流所擷取的這類片段直接插入。</xref:System.Xml.XmlDictionaryWriter>"
  syntax:
    content: public interface IFragmentCapableXmlDictionaryWriter
  implements: []
  platform:
  - net462
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment
  id: CanFragment
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  langs:
  - csharp
  name: CanFragment
  nameWithType: IFragmentCapableXmlDictionaryWriter.CanFragment
  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment
  type: Property
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Xml
  summary: "取得值，指出是否此<xref:System.Xml.XmlDictionaryWriter>可以處理 XML 片段。</xref:System.Xml.XmlDictionaryWriter>"
  remarks: "傳回 t`r`ue 如果實作此介面的寫入器可以產生和接受 XML 片段。"
  syntax:
    content: public bool CanFragment { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個<xref:System.Xml.XmlDictionaryWriter>可以處理 XML 片段，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.XmlDictionaryWriter>"
  overload: System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment
  id: EndFragment
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  langs:
  - csharp
  name: EndFragment()
  nameWithType: IFragmentCapableXmlDictionaryWriter.EndFragment()
  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment()
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Xml
  summary: "結束 XML 片段的處理。"
  remarks: "停止將輸出重新導向至提供的比對的資料流`StartFragment`呼叫。 呼叫後，XML 的寫入輸出會移至原本是之前的寫入器所使用的資料流`StartFragment`呼叫。"
  syntax:
    content: public void EndFragment ();
    parameters: []
  overload: System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)
  id: StartFragment(System.IO.Stream,System.Boolean)
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  langs:
  - csharp
  name: StartFragment(Stream,Boolean)
  nameWithType: IFragmentCapableXmlDictionaryWriter.StartFragment(Stream,Boolean)
  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(Stream,Boolean)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Xml
  summary: "開始處理 XML 片段。"
  remarks: "暫時開始將 XML 輸出的寫入重新導向至提供的資料流，直到`EndFragment`呼叫。 如果`generateSelfContainedTextFragment`是`true`，然後重新導向的 XML 輸出永遠是文字 XML 和獨立於其命名空間內容方面。 `StartFragment`不可為巢狀 （） 呼叫。"
  syntax:
    content: public void StartFragment (System.IO.Stream stream, bool generateSelfContainedTextFragment);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "要寫入資料流。"
    - id: generateSelfContainedTextFragment
      type: System.Boolean
      description: "如果<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>，該片段外部宣告的任何命名空間宣告一次內; 使用如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>不會重新宣告命名空間。"
  overload: System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)
  id: WriteFragment(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  langs:
  - csharp
  name: WriteFragment(Byte[],Int32,Int32)
  nameWithType: IFragmentCapableXmlDictionaryWriter.WriteFragment(Byte[],Int32,Int32)
  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Xml
  summary: "將 XML 片段寫入至寫入器的基礎資料流。"
  remarks: "寫入之間擷取的片段`StartFragment`和`EndFragment`並回呼至 XmlDictionaryWriter 的主要資料流。 寫入的片段是`count`位元組索引處開始`offset`提供`buffer`。 如果提供的片段不會擷取使用這個寫入器執行個體，則行為是未定義。"
  example:
  - "```  \nMemoryStream stream = new MemoryStream();  \nMemoryStream fragmentStream = new MemoryStream();  \nXmlDictionaryWriter writer = XmlDictionaryWriter.CreateTextWriter(stream);  \nIXmlFragmentCapableXmlDictionaryWriter fragmentWriter = writer as IXmlFragmentCapableXmlDictionaryWriter;  \nif (fragmentWriter == null || !fragmentWriter.CanFragment)  \n{  \nConsole.WriteLine(\"This writer doesn't support fragments\");  \nreturn;  \n}  \nwriter.WriteStartElement(\"Root\");  \nfragmentWriter.StartFragment(fragmentStream, false);  \nwriter.WriteStartElement(\"Body\");  \nwriter.WriteString(\"This is my body\");  \nwriter.WriteEndElement();  \nfragmentWriter.EndFragment();  \nwriter.WriteStartElement(\"CharsInTheBody\");  \nwriter.WriteValue(fragmentStream.Length);  \nwriter.WriteEndElement();  \nfragmentWriter.WriteFragment(fragmentStream.GetBuffer(), 0, (int)fragmentStream.Length);  \nwriter.WriteEndElement(); // Root  \n```"
  syntax:
    content: public void WriteFragment (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "要寫入的緩衝區。"
    - id: offset
      type: System.Int32
      description: "要寫入的起始位置`buffer`。"
    - id: count
      type: System.Int32
      description: "要寫入的位元組數目`buffer`。"
  overload: System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  isExternal: false
  name: CanFragment
  nameWithType: IFragmentCapableXmlDictionaryWriter.CanFragment
  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  isExternal: false
  name: EndFragment()
  nameWithType: IFragmentCapableXmlDictionaryWriter.EndFragment()
  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment()
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  isExternal: false
  name: StartFragment(Stream,Boolean)
  nameWithType: IFragmentCapableXmlDictionaryWriter.StartFragment(Stream,Boolean)
  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(Stream,Boolean)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  isExternal: false
  name: WriteFragment(Byte[],Int32,Int32)
  nameWithType: IFragmentCapableXmlDictionaryWriter.WriteFragment(Byte[],Int32,Int32)
  fullName: System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(Byte[],Int32,Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment*
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  isExternal: false
  name: CanFragment
  nameWithType: IFragmentCapableXmlDictionaryWriter.CanFragment
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment*
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  isExternal: false
  name: EndFragment
  nameWithType: IFragmentCapableXmlDictionaryWriter.EndFragment
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment*
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  isExternal: false
  name: StartFragment
  nameWithType: IFragmentCapableXmlDictionaryWriter.StartFragment
- uid: System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment*
  parent: System.Xml.IFragmentCapableXmlDictionaryWriter
  isExternal: false
  name: WriteFragment
  nameWithType: IFragmentCapableXmlDictionaryWriter.WriteFragment
