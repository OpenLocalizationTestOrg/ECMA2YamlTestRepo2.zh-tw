### YamlMime:ManagedReference
items:
- uid: System.Globalization.TaiwanCalendar
  id: TaiwanCalendar
  children:
  - System.Globalization.TaiwanCalendar.#ctor
  - System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)
  - System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)
  - System.Globalization.TaiwanCalendar.AlgorithmType
  - System.Globalization.TaiwanCalendar.Eras
  - System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)
  - System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)
  - System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)
  - System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)
  - System.Globalization.TaiwanCalendar.GetEra(System.DateTime)
  - System.Globalization.TaiwanCalendar.GetLeapMonth(System.Int32,System.Int32)
  - System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)
  - System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)
  - System.Globalization.TaiwanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  - System.Globalization.TaiwanCalendar.GetYear(System.DateTime)
  - System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)
  - System.Globalization.TaiwanCalendar.MaxSupportedDateTime
  - System.Globalization.TaiwanCalendar.MinSupportedDateTime
  - System.Globalization.TaiwanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)
  - System.Globalization.TaiwanCalendar.TwoDigitYearMax
  langs:
  - csharp
  name: TaiwanCalendar
  nameWithType: TaiwanCalendar
  fullName: System.Globalization.TaiwanCalendar
  type: Class
  summary: "台灣曆法。"
  remarks: "台灣曆法運作方式完全一樣西曆，除了年份和紀元不同。 TaiwanCalendar 類別會辨識目前的紀元。      > [!NOTE] > 使用 TaiwanCalendar 類別和其他行事曆類別的.NET Framework 相關資訊，請參閱[使用行事曆](~/add/includes/ajax-current-ext-md.md)。       在台灣曆法閏年與相同潤年西曆。 閏年西曆中定義為整除西曆年份中，由四個，除非它是整除 100。 不過，400 所整除西曆年份是潤年。 一般年份有 365 天，閏年有 366 天。       台灣曆法已有 28 到 31 天每 12 個月: |GetMonth 值 |月 |常見的年數天 |潤年中的天數 |  |--------------------|-----------|--------------------------|------------------------|  | 1 | 1 月 （一月） | 31 | 31 |  | 2 | 2 月 （二月） | 28 | 29 |  | 3 | 3 月 （三月） | 31 | 31 |  | 4 | 4 月 （四月） | 30 | 30 |  | 5 | 5月 （年） | 31 | 31 |  | 6 | 6月 （年 6 月） | 30 | 30 |  | 7 | 7月 (July) | 31 | 31 |  | 8 |8 月 （8 月） | 31 | 31 |  | 9 | 9月 （年 9 月） | 30 | 30 |  | 10 | 10 月 （十月） | 31 | 31 |  | 11 | 11 月 （十一月） | 30 | 30 |  | 12 | 12 月 （十二月） | 31 | 31 |      二月有 29 天，閏年和 28。       日期 2001 年 1 月 1 日西元 在西曆中就相當於 90 目前紀元台灣曆法的年 1 月的第一天。       每個<xref:System.Globalization.CultureInfo>支援一組的行事曆。</xref:System.Globalization.CultureInfo> <xref:System.Globalization.CultureInfo.Calendar%2A>屬性會傳回預設的行事曆文化特性，而<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>屬性會傳回陣列，其中包含所有支援的文化特性的行事曆。</xref:System.Globalization.CultureInfo.OptionalCalendars%2A> </xref:System.Globalization.CultureInfo.Calendar%2A> 若要變更<xref:System.Globalization.CultureInfo>、 應用程式應該設定<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A><xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>為新的<xref:System.Globalization.Calendar>。</xref:System.Globalization.Calendar></xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>屬性</xref:System.Globalization.DateTimeFormatInfo.Calendar%2A></xref:System.Globalization.CultureInfo>所使用的行事曆"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class TaiwanCalendar : System.Globalization.Calendar
  inheritance:
  - System.Globalization.Calendar
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.#ctor
  id: '#ctor'
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: TaiwanCalendar()
  nameWithType: TaiwanCalendar.TaiwanCalendar()
  fullName: System.Globalization.TaiwanCalendar.TaiwanCalendar()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "初始化的新執行個體<xref href=&quot;System.Globalization.TaiwanCalendar&quot;></xref>類別。"
  syntax:
    content: public TaiwanCalendar ();
    parameters: []
  overload: System.Globalization.TaiwanCalendar.#ctor*
  exceptions:
  - type: System.TypeInitializationException
    commentId: T:System.TypeInitializationException
    description: "無法初始化<xref href=&quot;System.Globalization.TaiwanCalendar&quot;></xref>因為遺漏文化特性資訊的物件。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)
  id: AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: AddMonths(DateTime,Int32)
  nameWithType: TaiwanCalendar.AddMonths(DateTime,Int32)
  fullName: System.Globalization.TaiwanCalendar.AddMonths(DateTime,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回<xref:System.DateTime>也就是指定的月數指定<xref:System.DateTime>.</xref:System.DateTime>遠離</xref:System.DateTime>"
  remarks: "產生的日期部分<xref:System.DateTime>如果產生的日期不是有效的日期，產生結果年的月份中會受到影響。</xref:System.DateTime> 它會變更為有效的最後一天，在產生的產生的年份。 <xref:System.DateTime>如果產生的月份超出指定<xref:System.DateTime>.</xref:System.DateTime>的年份，會影響</xref:System.DateTime>結果的年份部分 這項實作支援目前的紀元。 因此，<xref:System.ArgumentException>如果產生的年份超出指定<xref:System.DateTime>.</xref:System.DateTime>紀元，會擲回</xref:System.ArgumentException> 結果<xref:System.DateTime>仍然與指定<xref:System.DateTime>.</xref:System.DateTime>相同</xref:System.DateTime>的日期時間組件       比方說，如果指定的月份是 10 月 31 天內，其指定的日期，而且該月第 31 天的值`months`參數為 6，產生的年份會比指定的年份，產生的月份多一年 4 月，而產生的日期年 4 月最後一天的第 30 天。       如果值`months`參數是負值，<xref:System.DateTime>早於指定<xref:System.DateTime>.</xref:System.DateTime></xref:System.DateTime>產生       <xref:System.DateTime.Kind%2A>屬性的<xref:System.DateTime>值一律等於<xref:System.DateTimeKind?displayProperty=fullName>.</xref:System.DateTimeKind?displayProperty=fullName></xref:System.DateTime>傳回</xref:System.DateTime.Kind%2A> 您可以保留<xref:System.DateTime.Kind%2A>屬性`time`藉由呼叫參數<xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName>方法，如下列範例所示。</xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> </xref:System.DateTime.Kind%2A>       [!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/m-system.globalization.t_6_1.vb)][!code-cs[System.Globalization.Calendar.AddMethods#5  ](~/add/codesnippet/csharp/m-system.globalization.t_6_1.cs)]"
  example:
  - "The following code example demonstrates the use of the AddMonths method.  \n  \n [!code-cs[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.t_6_2.cs)]\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.t_6_2.vb)]\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.t_6_2.cpp)]"
  syntax:
    content: public override DateTime AddMonths (DateTime time, int months);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>其中加入幾個月。</xref:System.DateTime>"
    - id: months
      type: System.Int32
      description: "若要加入的月數。"
    return:
      type: System.DateTime
      description: "<xref:System.DateTime>從指定的月份來指定<xref:System.DateTime>.</xref:System.DateTime>數目相加的結果</xref:System.DateTime>"
  overload: System.Globalization.TaiwanCalendar.AddMonths*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "產生<xref:System.DateTime>超出支援的範圍。</xref:System.DateTime>"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>months</code>是小於-120000。       -或-<code>months</code>大於 120000。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)
  id: AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: AddYears(DateTime,Int32)
  nameWithType: TaiwanCalendar.AddYears(DateTime,Int32)
  fullName: System.Globalization.TaiwanCalendar.AddYears(DateTime,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回<xref:System.DateTime>也就是指定的年數指定<xref:System.DateTime>.</xref:System.DateTime>遠離</xref:System.DateTime>"
  remarks: "產生的日期部分<xref:System.DateTime>如果產生的日期不是有效的日期，產生結果年的月份中會受到影響。</xref:System.DateTime> 它會變更為有效的最後一天，在產生的產生的年份。 產生<xref:System.DateTime>仍然與指定<xref:System.DateTime>.</xref:System.DateTime>相同</xref:System.DateTime>的月份部分 這項實作支援目前的紀元。 因此，<xref:System.ArgumentException>如果產生的年份超出指定<xref:System.DateTime>.</xref:System.DateTime>紀元，會擲回</xref:System.ArgumentException> 結果<xref:System.DateTime>仍然與指定<xref:System.DateTime>.</xref:System.DateTime>相同</xref:System.DateTime>的日期時間組件       例如，二月有 28 天，除了閏年時有 29 天期間。 如果指定的日期是潤年 2 月 29 日值`years`為 1，則產生的日期是一年中的 2 月 28 日。       如果`years`是負數，<xref:System.DateTime>早於指定<xref:System.DateTime>.</xref:System.DateTime></xref:System.DateTime>產生       <xref:System.DateTime.Kind%2A>屬性的<xref:System.DateTime>值一律等於<xref:System.DateTimeKind?displayProperty=fullName>.</xref:System.DateTimeKind?displayProperty=fullName></xref:System.DateTime>傳回</xref:System.DateTime.Kind%2A> 您可以保留<xref:System.DateTime.Kind%2A>屬性`time`藉由呼叫參數<xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName>方法，如下列範例所示。</xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> </xref:System.DateTime.Kind%2A>       [!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/m-system.globalization.t_12_1.vb)][!code-cs[System.Globalization.Calendar.AddMethods#8  ](~/add/codesnippet/csharp/m-system.globalization.t_12_1.cs)]"
  example:
  - "The following code example displays the use of the AddYears method.  \n  \n [!code-cs[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.t_12_2.cs)]\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.t_12_2.vb)]\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.t_12_2.cpp)]"
  syntax:
    content: public override DateTime AddYears (DateTime time, int years);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>要加入年。</xref:System.DateTime>"
    - id: years
      type: System.Int32
      description: "若要加入的年數。"
    return:
      type: System.DateTime
      description: "<xref:System.DateTime>新增指定的至指定<xref:System.DateTime>。</xref:System.DateTime>的年數的結果</xref:System.DateTime>"
  overload: System.Globalization.TaiwanCalendar.AddYears*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "產生<xref:System.DateTime>超出支援的範圍。</xref:System.DateTime>"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.AlgorithmType
  id: AlgorithmType
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: AlgorithmType
  nameWithType: TaiwanCalendar.AlgorithmType
  fullName: System.Globalization.TaiwanCalendar.AlgorithmType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "取得值，指出是否將現行曆法是以陽曆為主、 以陰曆為主，或兩者的組合。"
  remarks: ''
  example:
  - "The following example uses reflection to instantiate each <xref:System.Globalization.Calendar> type found in the .NET Framework and displays the value of its <xref:System.Globalization.Calendar.AlgorithmType%2A> property.  \n  \n [!code-cs[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/csharp/p-system.globalization.t_2_1.cs)]\n [!code-vb[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/visualbasic/p-system.globalization.t_2_1.vb)]"
  syntax:
    content: public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }
    return:
      type: System.Globalization.CalendarAlgorithmType
      description: "一律傳回<xref href=&quot;System.Globalization.CalendarAlgorithmType&quot;> </xref>。"
  overload: System.Globalization.TaiwanCalendar.AlgorithmType*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.Eras
  id: Eras
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: Eras
  nameWithType: TaiwanCalendar.Eras
  fullName: System.Globalization.TaiwanCalendar.Eras
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "取得清單中的紀元<xref href=&quot;System.Globalization.TaiwanCalendar&quot;> </xref>。"
  remarks: "這個屬性所傳回陣列中的值會是範圍從 1 到最大的紀元數的數字。 第一個陣列元素中傳回的最大數的紀元和紀元小數會傳回最後一個項目中。"
  syntax:
    content: public override int[] Eras { get; }
    return:
      type: System.Int32[]
      description: "陣列，其中包含單一項目，這個值一律是目前紀元。"
  overload: System.Globalization.TaiwanCalendar.Eras*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)
  id: GetDayOfMonth(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: GetDayOfMonth(DateTime)
  nameWithType: TaiwanCalendar.GetDayOfMonth(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetDayOfMonth(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回在指定<xref:System.DateTime>.</xref:System.DateTime>當月日期"
  remarks: ''
  example:
  - "The following code example demonstrates the use of the GetDayOfMonth method.  \n  \n [!code-cs[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.t_2_1.cs)]\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.t_2_1.vb)]\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.t_2_1.cpp)]"
  syntax:
    content: public override int GetDayOfMonth (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>讀取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "從 1 到 31 的整數，表示在指定<xref:System.DateTime>.</xref:System.DateTime>當月日期"
  overload: System.Globalization.TaiwanCalendar.GetDayOfMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)
  id: GetDayOfWeek(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: GetDayOfWeek(DateTime)
  nameWithType: TaiwanCalendar.GetDayOfWeek(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetDayOfWeek(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回在指定<xref:System.DateTime>.</xref:System.DateTime>一週天數"
  remarks: "<xref:System.DayOfWeek>值如下: |DayOfWeek 值 | 表示 |  |---------------------|---------------------|  |星期日 | 星期日 |  |星期一 | 星期一 |  |星期二 | 星期二 |  |星期三 | 星期三 |  |星期四 | 星期四 |  |星期五 | 星期五 |  |星期六 | 星期六 |</xref:System.DayOfWeek>"
  example:
  - "The following code example demonstrates the use of the GetDayOfWeek method.  \n  \n [!code-cs[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.t_16_1.cs)]\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.t_16_1.vb)]\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.t_16_1.cpp)]"
  syntax:
    content: public override DayOfWeek GetDayOfWeek (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>讀取。</xref:System.DateTime>"
    return:
      type: System.DayOfWeek
      description: "<xref:System.DayOfWeek>值，表示在指定<xref:System.DateTime>.</xref:System.DateTime>一週天數</xref:System.DayOfWeek>"
  overload: System.Globalization.TaiwanCalendar.GetDayOfWeek*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)
  id: GetDayOfYear(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: GetDayOfYear(DateTime)
  nameWithType: TaiwanCalendar.GetDayOfYear(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetDayOfYear(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回在指定<xref:System.DateTime>.</xref:System.DateTime>年份的日期"
  remarks: "年份的日期被定義為一年的第一天中的天數。 例如，GetDayOfYear 的第一個月的第一天，則傳回 1，並在過去一個月的最後一天的 GetDayOfYear 傳回該年份中的總天數。 總計等同於<xref:System.Globalization.TaiwanCalendar.GetDaysInYear%2A>.</xref:System.Globalization.TaiwanCalendar.GetDaysInYear%2A>所傳回的值"
  example:
  - "The following code example demonstrates the use of the GetDayOfYear method.  \n  \n [!code-cs[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.t_13_1.cs)]\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.t_13_1.vb)]\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.t_13_1.cpp)]"
  syntax:
    content: public override int GetDayOfYear (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>讀取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "從 1 到 366 表示整數指定<xref:System.DateTime>。</xref:System.DateTime>年份的日期"
  overload: System.Globalization.TaiwanCalendar.GetDayOfYear*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  id: GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: GetDaysInMonth(Int32,Int32,Int32)
  nameWithType: TaiwanCalendar.GetDaysInMonth(Int32,Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.GetDaysInMonth(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "在指定紀元的指定年份中之指定月份中傳回的天數。"
  remarks: "例如，這個方法會傳回 28 或 29 表示二月 (`month` = 2)，取決於是否`year`是否為閏年。"
  example:
  - "The following example calls GetDaysInMonth for the second month in each of five years in each era.  \n  \n [!code-cs[System.Globalization.TaiwanCalendar.GetDaysInMonth#1](~/add/codesnippet/csharp/1aa062ee-33c0-43ad-963f-_1.cs)]\n [!code-cpp[System.Globalization.TaiwanCalendar.GetDaysInMonth#1](~/add/codesnippet/cpp/1aa062ee-33c0-43ad-963f-_1.cpp)]\n [!code-vb[System.Globalization.TaiwanCalendar.GetDaysInMonth#1](~/add/codesnippet/visualbasic/1aa062ee-33c0-43ad-963f-_1.vb)]"
  syntax:
    content: public override int GetDaysInMonth (int year, int month, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "整數，表示年份。"
    - id: month
      type: System.Int32
      description: "從 1 到 12 的整數，表示月份。"
    - id: era
      type: System.Int32
      description: "整數，表示紀元。"
    return:
      type: System.Int32
      description: "在指定紀元的指定年份中指定的月份天數。"
  overload: System.Globalization.TaiwanCalendar.GetDaysInMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>為曆法所支援的範圍之外。       -或-<code>month</code>曆法所支援的範圍。       -或-<code>era</code>曆法所支援的範圍。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)
  id: GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: GetDaysInYear(Int32,Int32)
  nameWithType: TaiwanCalendar.GetDaysInYear(Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.GetDaysInYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回在指定紀元的指定年份中的日數。"
  remarks: "例如，這個方法會傳回 365 或 366，取決於是否`year`是否為閏年。"
  example:
  - "The following example calls GetDaysInYear for five years in each era.  \n  \n [!code-cpp[System.Globalization.TaiwanCalendar.GetDaysInYear#1](~/add/codesnippet/cpp/m-system.globalization.t_1_1.cpp)]\n [!code-cs[System.Globalization.TaiwanCalendar.GetDaysInYear#1](~/add/codesnippet/csharp/m-system.globalization.t_1_1.cs)]\n [!code-vb[System.Globalization.TaiwanCalendar.GetDaysInYear#1](~/add/codesnippet/visualbasic/m-system.globalization.t_1_1.vb)]"
  syntax:
    content: public override int GetDaysInYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "整數，表示年份。"
    - id: era
      type: System.Int32
      description: "整數，表示紀元。"
    return:
      type: System.Int32
      description: "在指定紀元的指定年份中的日數。"
  overload: System.Globalization.TaiwanCalendar.GetDaysInYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>為曆法所支援的範圍之外。       -或-<code>era</code>曆法所支援的範圍。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.GetEra(System.DateTime)
  id: GetEra(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: GetEra(DateTime)
  nameWithType: TaiwanCalendar.GetEra(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetEra(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回在指定<xref:System.DateTime>.</xref:System.DateTime>紀元"
  remarks: "<xref:System.Globalization.TaiwanCalendar>類別會辨識目前的紀元。</xref:System.Globalization.TaiwanCalendar>"
  example:
  - "The following code example demonstrates the use of the GetEra method.  \n  \n [!code-cs[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.t_8_1.cs)]\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.t_8_1.vb)]\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.t_8_1.cpp)]"
  syntax:
    content: public override int GetEra (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>讀取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "表示在指定<xref:System.DateTime>.</xref:System.DateTime>紀元的整數"
  overload: System.Globalization.TaiwanCalendar.GetEra*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.GetLeapMonth(System.Int32,System.Int32)
  id: GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: GetLeapMonth(Int32,Int32)
  nameWithType: TaiwanCalendar.GetLeapMonth(Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.GetLeapMonth(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "計算指定之年份和紀元的閏月。"
  remarks: "曆法，支援閏月的概念，在特定月份或任何一年中月份之後發生的閏月。 例如，<xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>方法傳回的數字，介於 1 到 13，表示相關聯的指定日期的月份。</xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> 如果年份的第八個和第九個月之間沒有閏月<xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>方法會傳回 8 閏第八個月的 9 和 10 的第九個月份的第八個月份。</xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>"
  syntax:
    content: public override int GetLeapMonth (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一年。"
    - id: era
      type: System.Int32
      description: "紀元。"
    return:
      type: System.Int32
      description: "傳回值永遠是 0 因為<xref href=&quot;System.Globalization.TaiwanCalendar&quot;></xref>類別不支援閏月的概念。"
  overload: System.Globalization.TaiwanCalendar.GetLeapMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)
  id: GetMonth(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: GetMonth(DateTime)
  nameWithType: TaiwanCalendar.GetMonth(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetMonth(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回在指定<xref:System.DateTime>.</xref:System.DateTime>月份"
  remarks: ''
  example:
  - "The following code example demonstrates the use of the GetMonth method.  \n  \n [!code-cs[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.t_15_1.cs)]\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.t_15_1.vb)]\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.t_15_1.cpp)]"
  syntax:
    content: public override int GetMonth (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>讀取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "從 1 到 12 的整數，表示在指定<xref:System.DateTime>.</xref:System.DateTime>月份"
  overload: System.Globalization.TaiwanCalendar.GetMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)
  id: GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: GetMonthsInYear(Int32,Int32)
  nameWithType: TaiwanCalendar.GetMonthsInYear(Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.GetMonthsInYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回在指定紀元的指定年份中的月數。"
  remarks: ''
  example:
  - "The following example calls GetMonthsInYear for five years in each era.  \n  \n [!code-vb[System.Globalization.TaiwanCalendar.GetMonthsInYear#1](~/add/codesnippet/visualbasic/m-system.globalization.t_7_1.vb)]\n [!code-cpp[System.Globalization.TaiwanCalendar.GetMonthsInYear#1](~/add/codesnippet/cpp/m-system.globalization.t_7_1.cpp)]\n [!code-cs[System.Globalization.TaiwanCalendar.GetMonthsInYear#1](~/add/codesnippet/csharp/m-system.globalization.t_7_1.cs)]"
  syntax:
    content: public override int GetMonthsInYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "整數，表示年份。"
    - id: era
      type: System.Int32
      description: "整數，表示紀元。"
    return:
      type: System.Int32
      description: "在指定紀元的指定年份中的月數。"
  overload: System.Globalization.TaiwanCalendar.GetMonthsInYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>為曆法所支援的範圍之外。       -或-<code>era</code>曆法所支援的範圍。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  id: GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
  nameWithType: TaiwanCalendar.GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
  fullName: System.Globalization.TaiwanCalendar.GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回在指定<xref:System.DateTime>.</xref:System.DateTime>包含日期的年度週"
  remarks: "這個方法可用來判斷一年的週數藉由設定`time`一年的最後一天的參數。       <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>屬性包含的特定文化特性的值，可用於`rule`和`firstDayOfWeek`參數。</xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>       <xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A>屬性<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>包含<xref:System.DayOfWeek><xref:System.Globalization.DateTimeFormatInfo.Calendar%2A><xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>.</xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>屬性</xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>中指定的值，代表特定文化特性，使用日曆週的第一天</xref:System.DayOfWeek>的預設值</xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName></xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A>       <xref:System.Globalization.DateTimeFormatInfo.CalendarWeekRule%2A>屬性<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>包含<xref:System.Globalization.CalendarWeekRule>的值，定義特定文化特性，使用行事曆日曆週<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A><xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>.</xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>屬性</xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>中指定</xref:System.Globalization.CalendarWeekRule>的預設值</xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName></xref:System.Globalization.DateTimeFormatInfo.CalendarWeekRule%2A>       例如，在<xref:System.Globalization.GregorianCalendar>、<xref:System.Globalization.Calendar.GetWeekOfYear%2A>年 1 月 1 方法會傳回 1。</xref:System.Globalization.Calendar.GetWeekOfYear%2A> </xref:System.Globalization.GregorianCalendar>"
  example:
  - "The following code example shows how the result of <xref:System.Globalization.Calendar.GetWeekOfYear%2A> varies depending on the <xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A> and <xref:System.Globalization.CalendarWeekRule> values used. If the specified date is the last day of the year, <xref:System.Globalization.Calendar.GetWeekOfYear%2A> returns the total number of weeks in that year.  \n  \n [!code-cs[System.Globalization.Calendar.GetWeekOfYear#1](~/add/codesnippet/csharp/f44eb65b-9f5c-464b-9830-_1.cs)]\n [!code-vb[System.Globalization.Calendar.GetWeekOfYear#1](~/add/codesnippet/visualbasic/f44eb65b-9f5c-464b-9830-_1.vb)]\n [!code-cpp[System.Globalization.Calendar.GetWeekOfYear#1](~/add/codesnippet/cpp/f44eb65b-9f5c-464b-9830-_1.cpp)]"
  syntax:
    content: public override int GetWeekOfYear (DateTime time, System.Globalization.CalendarWeekRule rule, DayOfWeek firstDayOfWeek);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>讀取。</xref:System.DateTime>"
    - id: rule
      type: System.Globalization.CalendarWeekRule
      description: "其中一個<xref:System.Globalization.CalendarWeekRule>定義日曆週的值。</xref:System.Globalization.CalendarWeekRule>"
    - id: firstDayOfWeek
      type: System.DayOfWeek
      description: "其中一個<xref:System.DayOfWeek>值，表示當週的第一天。</xref:System.DayOfWeek>"
    return:
      type: System.Int32
      description: "正整數，表示包含的日期的年度週次<code> time </code>參數。"
  overload: System.Globalization.TaiwanCalendar.GetWeekOfYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>time</code>或<code>firstDayOfWeek</code>曆法所支援的範圍。       -<code>rule</code>不是有效<xref:System.Globalization.CalendarWeekRule>值。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.GetYear(System.DateTime)
  id: GetYear(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: GetYear(DateTime)
  nameWithType: TaiwanCalendar.GetYear(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetYear(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "在指定<xref:System.DateTime>.</xref:System.DateTime>傳回年份"
  remarks: ''
  example:
  - "The following code example demonstrates the use of the GetYear method.  \n  \n [!code-cs[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.t_5_1.cs)]\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.t_5_1.vb)]\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.t_5_1.cpp)]"
  syntax:
    content: public override int GetYear (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>讀取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "表示在指定<xref:System.DateTime>.</xref:System.DateTime>年份的整數"
  overload: System.Globalization.TaiwanCalendar.GetYear*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  id: IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: IsLeapDay(Int32,Int32,Int32,Int32)
  nameWithType: TaiwanCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "判斷指定紀元中指定的日期是否為閏日。"
  remarks: "在台灣曆法閏年與相同潤年西曆。 閏年西曆中定義為整除西曆年份中，由四個，除非它是整除 100。 不過，400 所整除西曆年份是潤年。 一般年份有 365 天，閏年有 366 天。       為閏日是閏年只會發生一天。 例如，年 2 月 29 日是唯一的閏日。"
  example:
  - "The following example calls IsLeapDay for the last day of the second month (February) for five years in each of the eras.  \n  \n [!code-vb[System.Globalization.TaiwanCalendar.IsLeapDay#1](~/add/codesnippet/visualbasic/2b9d593e-4675-4408-97f3-_1.vb)]\n [!code-cpp[System.Globalization.TaiwanCalendar.IsLeapDay#1](~/add/codesnippet/cpp/2b9d593e-4675-4408-97f3-_1.cpp)]\n [!code-cs[System.Globalization.TaiwanCalendar.IsLeapDay#1](~/add/codesnippet/csharp/2b9d593e-4675-4408-97f3-_1.cs)]"
  syntax:
    content: public override bool IsLeapDay (int year, int month, int day, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "整數，表示年份。"
    - id: month
      type: System.Int32
      description: "從 1 到 12 的整數，表示月份。"
    - id: day
      type: System.Int32
      description: "從 1 到 31 的整數，表示的日期。"
    - id: era
      type: System.Int32
      description: "整數，表示紀元。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的日期為閏日。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.TaiwanCalendar.IsLeapDay*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>為曆法所支援的範圍之外。       -或-<code>month</code>曆法所支援的範圍。       -或-<code>day</code>曆法所支援的範圍。       -或-<code>era</code>曆法所支援的範圍。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  id: IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: IsLeapMonth(Int32,Int32,Int32)
  nameWithType: TaiwanCalendar.IsLeapMonth(Int32,Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.IsLeapMonth(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "判斷指定紀元中指定的年中的指定的月份是否為閏月。"
  remarks: "在台灣曆法閏年與相同潤年西曆。 閏年西曆中定義為整除西曆年份中，由四個，除非它是整除 100。 不過，400 所整除西曆年份是潤年。 一般年份有 365 天，閏年有 366 天。       為閏月是只發生在閏年整個月。 台灣曆法，並沒有任何閏月。"
  example:
  - "The following example calls IsLeapMonth for all the months in five years in the current era.  \n  \n [!code-cpp[System.Globalization.TaiwanCalendar.IsLeapMonth#1](~/add/codesnippet/cpp/04a1c248-535f-415d-ac02-_1.cpp)]\n [!code-vb[System.Globalization.TaiwanCalendar.IsLeapMonth#1](~/add/codesnippet/visualbasic/04a1c248-535f-415d-ac02-_1.vb)]\n [!code-cs[System.Globalization.TaiwanCalendar.IsLeapMonth#1](~/add/codesnippet/csharp/04a1c248-535f-415d-ac02-_1.cs)]"
  syntax:
    content: public override bool IsLeapMonth (int year, int month, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "整數，表示年份。"
    - id: month
      type: System.Int32
      description: "從 1 到 12 的整數，表示月份。"
    - id: era
      type: System.Int32
      description: "整數，表示紀元。"
    return:
      type: System.Boolean
      description: "這個方法一律會傳回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>，除非在衍生類別覆寫。"
  overload: System.Globalization.TaiwanCalendar.IsLeapMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>為曆法所支援的範圍之外。       -或-<code>month</code>曆法所支援的範圍。       -或-<code>era</code>曆法所支援的範圍。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)
  id: IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: IsLeapYear(Int32,Int32)
  nameWithType: TaiwanCalendar.IsLeapYear(Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.IsLeapYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "判斷指定紀元中指定的年份是否為閏年。"
  remarks: "在台灣曆法閏年與相同潤年西曆。 閏年西曆中定義為整除西曆年份中，由四個，除非它是整除 100。 不過，400 所整除西曆年份是潤年。 一般年份有 365 天，閏年有 366 天。"
  example:
  - "The following example calls IsLeapYear for five years in each of the eras.  \n  \n [!code-cpp[System.Globalization.TaiwanCalendar.IsLeapYear#1](~/add/codesnippet/cpp/m-system.globalization.t_14_1.cpp)]\n [!code-vb[System.Globalization.TaiwanCalendar.IsLeapYear#1](~/add/codesnippet/visualbasic/m-system.globalization.t_14_1.vb)]\n [!code-cs[System.Globalization.TaiwanCalendar.IsLeapYear#1](~/add/codesnippet/csharp/m-system.globalization.t_14_1.cs)]"
  syntax:
    content: public override bool IsLeapYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "整數，表示年份。"
    - id: era
      type: System.Int32
      description: "整數，表示紀元。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的年份為閏年;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.TaiwanCalendar.IsLeapYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>為曆法所支援的範圍之外。       -或-<code>era</code>曆法所支援的範圍。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.MaxSupportedDateTime
  id: MaxSupportedDateTime
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: MaxSupportedDateTime
  nameWithType: TaiwanCalendar.MaxSupportedDateTime
  fullName: System.Globalization.TaiwanCalendar.MaxSupportedDateTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "取得最新的日期和時間所支援<xref href=&quot;System.Globalization.TaiwanCalendar&quot;></xref>類別。"
  remarks: ''
  example:
  - "The following code example gets the minimum value and the maximum value of the calendar.  \n  \n [!code-cs[System.Globalization.TaiwanCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.t_0_1.cs)]\n [!code-cpp[System.Globalization.TaiwanCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.t_0_1.cpp)]\n [!code-vb[System.Globalization.TaiwanCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.t_0_1.vb)]"
  syntax:
    content: public override DateTime MaxSupportedDateTime { get; }
    return:
      type: System.DateTime
      description: "最晚的日期和時間所支援<xref href=&quot;System.Globalization.TaiwanCalendar&quot;></xref>類別，這就相當於最後一刻的年 12 月 31 日到 9999 年 西曆。"
  overload: System.Globalization.TaiwanCalendar.MaxSupportedDateTime*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.MinSupportedDateTime
  id: MinSupportedDateTime
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: MinSupportedDateTime
  nameWithType: TaiwanCalendar.MinSupportedDateTime
  fullName: System.Globalization.TaiwanCalendar.MinSupportedDateTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "取得最早日期和時間所支援<xref href=&quot;System.Globalization.TaiwanCalendar&quot;></xref>類別。"
  remarks: "Microsoft Visual Basic 中代表最小支援<xref:System.DateTime>，就是公元 0001 年 1 月 1 日</xref:System.DateTime>的日期在指定的時間為一天的時間 不過，<xref:System.Globalization.TaiwanCalendar>類別不支援的最小日期。</xref:System.Globalization.TaiwanCalendar> 因此，如果您的應用程式呼叫方法以設定使用現行曆法的日期時間的格式，但不是指定格式規範，格式就會使用 ISO 8601 可排序 (&quot;s&quot;) 日期/時間模式的格式規範，而不是預設的一般 (&quot;G&quot;) 的日期/時間模式的格式規範。 如需詳細資訊，請參閱[標準日期和時間格式字串](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example gets the minimum value and the maximum value of the calendar.  \n  \n [!code-cs[System.Globalization.TaiwanCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.t_1_1.cs)]\n [!code-cpp[System.Globalization.TaiwanCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.t_1_1.cpp)]\n [!code-vb[System.Globalization.TaiwanCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.t_1_1.vb)]"
  syntax:
    content: public override DateTime MinSupportedDateTime { get; }
    return:
      type: System.DateTime
      description: "最早日期和時間所支援<xref href=&quot;System.Globalization.TaiwanCalendar&quot;></xref>類別，這就相當於 1912 年 1 月 1，西元第一個快照 西曆。"
  overload: System.Globalization.TaiwanCalendar.MinSupportedDateTime*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: TaiwanCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回<xref:System.DateTime>設定為指定的日期和時間在指定紀元。</xref:System.DateTime>"
  syntax:
    content: public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "整數，表示年份。"
    - id: month
      type: System.Int32
      description: "從 1 到 12 的整數，表示月份。"
    - id: day
      type: System.Int32
      description: "從 1 到 31 的整數，表示的日期。"
    - id: hour
      type: System.Int32
      description: "從 0 到 23 的整數，表示小時。"
    - id: minute
      type: System.Int32
      description: "從 0 到 59 的整數，表示分鐘。"
    - id: second
      type: System.Int32
      description: "從 0 到 59 的整數，表示第二個。"
    - id: millisecond
      type: System.Int32
      description: "從 0 到 999 之間的整數，表示毫秒。"
    - id: era
      type: System.Int32
      description: "整數，表示紀元。"
    return:
      type: System.DateTime
      description: "<xref:System.DateTime>設定為指定的日期和時間以目前紀元。</xref:System.DateTime>"
  overload: System.Globalization.TaiwanCalendar.ToDateTime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>為曆法所支援的範圍之外。       -或-<code>month</code>曆法所支援的範圍。       -或-<code>day</code>曆法所支援的範圍。       -或-<code>hour</code>小於零或大於 23。       -或-<code>minute</code>小於零或大於 59。       -或-<code>second</code>小於零或大於 59。       -或-<code>millisecond</code>小於零或大於 999。       -或-<code>era</code>曆法所支援的範圍。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)
  id: ToFourDigitYear(System.Int32)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: ToFourDigitYear(Int32)
  nameWithType: TaiwanCalendar.ToFourDigitYear(Int32)
  fullName: System.Globalization.TaiwanCalendar.ToFourDigitYear(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "使用轉換指定的年份為四位數年份<xref:System.Globalization.TaiwanCalendar.TwoDigitYearMax*>屬性來判斷適當世紀。</xref:System.Globalization.TaiwanCalendar.TwoDigitYearMax*>"
  remarks: "這個方法會實作<xref:System.Globalization.Calendar.ToFourDigitYear%2A?displayProperty=fullName>.</xref:System.Globalization.Calendar.ToFourDigitYear%2A?displayProperty=fullName>       因為在台灣曆法的年份通常少於四個位數，這個實作一律會傳回的值`year`參數。       ToFourDigitYear 支援兩位數年份或四位數年份。 傳遞的兩位數年份值 (小於 100) 將使這個方法將值轉換為四位數的值根據<xref:System.Globalization.TaiwanCalendar.TwoDigitYearMax%2A>值，表示該適當世紀。</xref:System.Globalization.TaiwanCalendar.TwoDigitYearMax%2A> 如果應用程式提供 ToFourDigitYear 支援行事曆範圍內的四位數年份值，則方法會傳回實際的輸入的值。 如果應用程式提供支援的行事曆範圍四位數值或它提供一個負數值，方法會擲回例外狀況。"
  syntax:
    content: public override int ToFourDigitYear (int year);
    parameters:
    - id: year
      type: System.Int32
      description: "兩位數或四位數的整數，表示要轉換的年份。"
    return:
      type: System.Int32
      description: "整數，其中包含的四位數表示<code> year </code>。"
  overload: System.Globalization.TaiwanCalendar.ToFourDigitYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>為曆法所支援的範圍之外。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.TwoDigitYearMax
  id: TwoDigitYearMax
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: TwoDigitYearMax
  nameWithType: TaiwanCalendar.TwoDigitYearMax
  fullName: System.Globalization.TaiwanCalendar.TwoDigitYearMax
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "取得或設定以 2 位數年份表示時，該 100 年範圍的最後一年。"
  remarks: "這個屬性會實作<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=fullName>.</xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=fullName>       因為在台灣曆法的年份通常少於四個位數，此實作中預設會傳回 99，而且不影響<xref:System.Globalization.TaiwanCalendar.ToFourDigitYear%2A>.</xref:System.Globalization.TaiwanCalendar.ToFourDigitYear%2A>的傳回值"
  syntax:
    content: public override int TwoDigitYearMax { get; set; }
    return:
      type: System.Int32
      description: "以 2 位數年份表示時，該 100 年範圍的最後一年。"
  overload: System.Globalization.TaiwanCalendar.TwoDigitYearMax*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "設定作業中指定的值是不超過 99。       -或-設定作業中指定的值大於<xref uid=&quot;langword_csharp_MaxSupportedDateTime.Year&quot; name=&quot;MaxSupportedDateTime.Year&quot; href=&quot;&quot;> </xref>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在設定作業中，目前的執行個體是唯讀狀態。"
  platform:
  - net462
references:
- uid: System.Globalization.Calendar
  isExternal: false
  name: System.Globalization.Calendar
- uid: System.TypeInitializationException
  isExternal: true
  name: System.TypeInitializationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Globalization.TaiwanCalendar.#ctor
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: TaiwanCalendar()
  nameWithType: TaiwanCalendar.TaiwanCalendar()
  fullName: System.Globalization.TaiwanCalendar.TaiwanCalendar()
- uid: System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: AddMonths(DateTime,Int32)
  nameWithType: TaiwanCalendar.AddMonths(DateTime,Int32)
  fullName: System.Globalization.TaiwanCalendar.AddMonths(DateTime,Int32)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: AddYears(DateTime,Int32)
  nameWithType: TaiwanCalendar.AddYears(DateTime,Int32)
  fullName: System.Globalization.TaiwanCalendar.AddYears(DateTime,Int32)
- uid: System.Globalization.TaiwanCalendar.AlgorithmType
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: AlgorithmType
  nameWithType: TaiwanCalendar.AlgorithmType
  fullName: System.Globalization.TaiwanCalendar.AlgorithmType
- uid: System.Globalization.CalendarAlgorithmType
  parent: System.Globalization
  isExternal: false
  name: CalendarAlgorithmType
  nameWithType: CalendarAlgorithmType
  fullName: System.Globalization.CalendarAlgorithmType
- uid: System.Globalization.TaiwanCalendar.Eras
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: Eras
  nameWithType: TaiwanCalendar.Eras
  fullName: System.Globalization.TaiwanCalendar.Eras
- uid: System.Int32[]
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetDayOfMonth(DateTime)
  nameWithType: TaiwanCalendar.GetDayOfMonth(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetDayOfMonth(DateTime)
- uid: System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetDayOfWeek(DateTime)
  nameWithType: TaiwanCalendar.GetDayOfWeek(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetDayOfWeek(DateTime)
- uid: System.DayOfWeek
  parent: System
  isExternal: true
  name: DayOfWeek
  nameWithType: DayOfWeek
  fullName: System.DayOfWeek
- uid: System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetDayOfYear(DateTime)
  nameWithType: TaiwanCalendar.GetDayOfYear(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetDayOfYear(DateTime)
- uid: System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetDaysInMonth(Int32,Int32,Int32)
  nameWithType: TaiwanCalendar.GetDaysInMonth(Int32,Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.GetDaysInMonth(Int32,Int32,Int32)
- uid: System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetDaysInYear(Int32,Int32)
  nameWithType: TaiwanCalendar.GetDaysInYear(Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.GetDaysInYear(Int32,Int32)
- uid: System.Globalization.TaiwanCalendar.GetEra(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetEra(DateTime)
  nameWithType: TaiwanCalendar.GetEra(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetEra(DateTime)
- uid: System.Globalization.TaiwanCalendar.GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetLeapMonth(Int32,Int32)
  nameWithType: TaiwanCalendar.GetLeapMonth(Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.GetLeapMonth(Int32,Int32)
- uid: System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetMonth(DateTime)
  nameWithType: TaiwanCalendar.GetMonth(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetMonth(DateTime)
- uid: System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetMonthsInYear(Int32,Int32)
  nameWithType: TaiwanCalendar.GetMonthsInYear(Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.GetMonthsInYear(Int32,Int32)
- uid: System.Globalization.TaiwanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
  nameWithType: TaiwanCalendar.GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
  fullName: System.Globalization.TaiwanCalendar.GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
- uid: System.Globalization.CalendarWeekRule
  parent: System.Globalization
  isExternal: true
  name: CalendarWeekRule
  nameWithType: CalendarWeekRule
  fullName: System.Globalization.CalendarWeekRule
- uid: System.Globalization.TaiwanCalendar.GetYear(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetYear(DateTime)
  nameWithType: TaiwanCalendar.GetYear(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetYear(DateTime)
- uid: System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: IsLeapDay(Int32,Int32,Int32,Int32)
  nameWithType: TaiwanCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: IsLeapMonth(Int32,Int32,Int32)
  nameWithType: TaiwanCalendar.IsLeapMonth(Int32,Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.IsLeapMonth(Int32,Int32,Int32)
- uid: System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: IsLeapYear(Int32,Int32)
  nameWithType: TaiwanCalendar.IsLeapYear(Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.IsLeapYear(Int32,Int32)
- uid: System.Globalization.TaiwanCalendar.MaxSupportedDateTime
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: MaxSupportedDateTime
  nameWithType: TaiwanCalendar.MaxSupportedDateTime
  fullName: System.Globalization.TaiwanCalendar.MaxSupportedDateTime
- uid: System.Globalization.TaiwanCalendar.MinSupportedDateTime
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: MinSupportedDateTime
  nameWithType: TaiwanCalendar.MinSupportedDateTime
  fullName: System.Globalization.TaiwanCalendar.MinSupportedDateTime
- uid: System.Globalization.TaiwanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: TaiwanCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
- uid: System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: ToFourDigitYear(Int32)
  nameWithType: TaiwanCalendar.ToFourDigitYear(Int32)
  fullName: System.Globalization.TaiwanCalendar.ToFourDigitYear(Int32)
- uid: System.Globalization.TaiwanCalendar.TwoDigitYearMax
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: TwoDigitYearMax
  nameWithType: TaiwanCalendar.TwoDigitYearMax
  fullName: System.Globalization.TaiwanCalendar.TwoDigitYearMax
- uid: System.Globalization.TaiwanCalendar.#ctor*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: TaiwanCalendar
  nameWithType: TaiwanCalendar.TaiwanCalendar
- uid: System.Globalization.TaiwanCalendar.AddMonths*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: AddMonths
  nameWithType: TaiwanCalendar.AddMonths
- uid: System.Globalization.TaiwanCalendar.AddYears*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: AddYears
  nameWithType: TaiwanCalendar.AddYears
- uid: System.Globalization.TaiwanCalendar.AlgorithmType*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: AlgorithmType
  nameWithType: TaiwanCalendar.AlgorithmType
- uid: System.Globalization.TaiwanCalendar.Eras*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: Eras
  nameWithType: TaiwanCalendar.Eras
- uid: System.Globalization.TaiwanCalendar.GetDayOfMonth*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetDayOfMonth
  nameWithType: TaiwanCalendar.GetDayOfMonth
- uid: System.Globalization.TaiwanCalendar.GetDayOfWeek*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetDayOfWeek
  nameWithType: TaiwanCalendar.GetDayOfWeek
- uid: System.Globalization.TaiwanCalendar.GetDayOfYear*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetDayOfYear
  nameWithType: TaiwanCalendar.GetDayOfYear
- uid: System.Globalization.TaiwanCalendar.GetDaysInMonth*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetDaysInMonth
  nameWithType: TaiwanCalendar.GetDaysInMonth
- uid: System.Globalization.TaiwanCalendar.GetDaysInYear*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetDaysInYear
  nameWithType: TaiwanCalendar.GetDaysInYear
- uid: System.Globalization.TaiwanCalendar.GetEra*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetEra
  nameWithType: TaiwanCalendar.GetEra
- uid: System.Globalization.TaiwanCalendar.GetLeapMonth*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetLeapMonth
  nameWithType: TaiwanCalendar.GetLeapMonth
- uid: System.Globalization.TaiwanCalendar.GetMonth*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetMonth
  nameWithType: TaiwanCalendar.GetMonth
- uid: System.Globalization.TaiwanCalendar.GetMonthsInYear*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetMonthsInYear
  nameWithType: TaiwanCalendar.GetMonthsInYear
- uid: System.Globalization.TaiwanCalendar.GetWeekOfYear*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetWeekOfYear
  nameWithType: TaiwanCalendar.GetWeekOfYear
- uid: System.Globalization.TaiwanCalendar.GetYear*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetYear
  nameWithType: TaiwanCalendar.GetYear
- uid: System.Globalization.TaiwanCalendar.IsLeapDay*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: IsLeapDay
  nameWithType: TaiwanCalendar.IsLeapDay
- uid: System.Globalization.TaiwanCalendar.IsLeapMonth*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: IsLeapMonth
  nameWithType: TaiwanCalendar.IsLeapMonth
- uid: System.Globalization.TaiwanCalendar.IsLeapYear*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: IsLeapYear
  nameWithType: TaiwanCalendar.IsLeapYear
- uid: System.Globalization.TaiwanCalendar.MaxSupportedDateTime*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: MaxSupportedDateTime
  nameWithType: TaiwanCalendar.MaxSupportedDateTime
- uid: System.Globalization.TaiwanCalendar.MinSupportedDateTime*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: MinSupportedDateTime
  nameWithType: TaiwanCalendar.MinSupportedDateTime
- uid: System.Globalization.TaiwanCalendar.ToDateTime*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: ToDateTime
  nameWithType: TaiwanCalendar.ToDateTime
- uid: System.Globalization.TaiwanCalendar.ToFourDigitYear*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: ToFourDigitYear
  nameWithType: TaiwanCalendar.ToFourDigitYear
- uid: System.Globalization.TaiwanCalendar.TwoDigitYearMax*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: TwoDigitYearMax
  nameWithType: TaiwanCalendar.TwoDigitYearMax
