### YamlMime:ManagedReference
items:
- uid: System.Xml.Schema.XmlSchemaSet
  id: XmlSchemaSet
  children:
  - System.Xml.Schema.XmlSchemaSet.#ctor
  - System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)
  - System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)
  - System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)
  - System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)
  - System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)
  - System.Xml.Schema.XmlSchemaSet.CompilationSettings
  - System.Xml.Schema.XmlSchemaSet.Compile
  - System.Xml.Schema.XmlSchemaSet.Contains(System.String)
  - System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)
  - System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)
  - System.Xml.Schema.XmlSchemaSet.Count
  - System.Xml.Schema.XmlSchemaSet.GlobalAttributes
  - System.Xml.Schema.XmlSchemaSet.GlobalElements
  - System.Xml.Schema.XmlSchemaSet.GlobalTypes
  - System.Xml.Schema.XmlSchemaSet.IsCompiled
  - System.Xml.Schema.XmlSchemaSet.NameTable
  - System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)
  - System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)
  - System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)
  - System.Xml.Schema.XmlSchemaSet.Schemas
  - System.Xml.Schema.XmlSchemaSet.Schemas(System.String)
  - System.Xml.Schema.XmlSchemaSet.ValidationEventHandler
  - System.Xml.Schema.XmlSchemaSet.XmlResolver
  langs:
  - csharp
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
  type: Class
  summary: "包含 XML 結構描述定義語言 (XSD) 結構描述的快取。"
  remarks: "> [!IMPORTANT]>-請勿使用結構描述從未知或未受信任的來源或位置。 如此一來，將危害您的程式碼的安全性。   >-（包括內嵌結構描述） 的 XML 結構描述是本質上容易遭到阻絕服務攻擊。不接受其在受信任的案例。   >-結構描述驗證錯誤訊息和例外狀況可能會公開機密資訊的內容模型或結構描述檔案的 URI 路徑。 請小心不要公開給未受信任的呼叫端的這項資訊。   > 的 < 安全性考量 > 章節將討論其他安全性考量。       XmlSchemaSet 是快取或文件庫，您可以在其中儲存的 XML 結構描述定義語言 (XSD) 結構描述。 XmlSchemaSet 會快取在記憶體中而不是從檔案或 URL 存取它們的結構描述，以提高效能。 每個結構描述由命名空間 URI 和結構描述加入至集時指定的位置。 您使用<xref:System.Xml.XmlReaderSettings.Schemas%2A?displayProperty=fullName>屬性來指定 XmlSchemaSet 物件的 XML 讀取器應該使用進行資料驗證。</xref:System.Xml.XmlReaderSettings.Schemas%2A?displayProperty=fullName>      ## 安全性考量-請勿使用來源不明或不受信任來源的結構描述。 如此一來，將危害您的程式碼的安全性。 外部命名空間或參考中的位置包含，匯入和重新定義結構描述的項目會解析與基底 URI 包含或匯入它們之結構描述。 例如，如果包含或匯入結構描述的基底 URI 是空的或`null`，外部位置都相對於目前目錄中已解決。 <xref:System.Xml.XmlUrlResolver>類別預設用來解析外部結構描述。</xref:System.Xml.XmlUrlResolver> 若要停用的 include，匯入、 解析度和重新定義結構描述的元素，設定<xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=fullName>屬性`null`。</xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=fullName>      -XmlSchemaSet 類別會使用<xref:System.Text.RegularExpressions.Regex?displayProperty=fullName>類別來剖析，並比對規則運算式中的 XML 結構描述。</xref:System.Text.RegularExpressions.Regex?displayProperty=fullName> XML 結構描述中使用規則運算式模式 facet 的驗證可能會增加的 CPU 使用量，應避免在高可用性案例。      -引發的例外狀況的結果使用 XmlSchemaSet 類別，例如<xref:System.Xml.Schema.XmlSchemaException>類別可能包含不應該公開受信任的案例中的機密資訊。</xref:System.Xml.Schema.XmlSchemaException> 例如，<xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A>屬性<xref:System.Xml.Schema.XmlSchemaException>回到造成例外狀況的結構描述檔案的 URI 路徑。</xref:System.Xml.Schema.XmlSchemaException> </xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A>屬性應該不會出現在受信任的案例。</xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> 使機密資訊不會出現在受信任的案例，就應該正確地處理例外狀況。"
  example:
  - "The following example validates an XML file using schemas stored in the XmlSchemaSet. The namespace in the XML file, `urn:bookstore-schema`, identifies which schema in the XmlSchemaSet to use for validation.  \n  \n [!code-cpp[XmlReader_Validate_SchemaSet#1](~/add/codesnippet/cpp/t-system.xml.schema.xmls_0_1.cpp)]\n [!code-cs[XmlReader_Validate_SchemaSet#1](~/add/codesnippet/csharp/t-system.xml.schema.xmls_0_1.cs)]\n [!code-vb[XmlReader_Validate_SchemaSet#1](~/add/codesnippet/visualbasic/t-system.xml.schema.xmls_0_1.vb)]  \n  \n## Input  \n The sample uses the following two input files.  \n  \n **booksSchemaFail.xml:**  \n  \n [!code-xml[XmlReader_Validate_SchemaSet#2](~/add/codesnippet/xml/t-system.xml.schema.xmls_0_2.xml)]  \n  \n **books.xsd:**  \n  \n [!code-xml[XmlReader_Validate_SchemaSet#3](~/add/codesnippet/xml/t-system.xml.schema.xmls_0_3.xsd)]  \n  \n## Output  \n Validation Error: The element 'book' in namespace 'urn:bookstore-schema' has invalid child element 'author' in namespace 'urn:bookstore-schema'. Expected 'title' in namespace 'urn:bookstore-schema'.  \n  \n Validation Error: The element 'author' in namespace 'urn:bookstore-schema' has invalid child element 'name' in namespace 'urn:bookstore-schema'. Expected 'first-name' in namespace 'urn:bookstore-schema'."
  syntax:
    content: public class XmlSchemaSet
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.#ctor
  id: '#ctor'
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: XmlSchemaSet()
  nameWithType: XmlSchemaSet.XmlSchemaSet()
  fullName: System.Xml.Schema.XmlSchemaSet.XmlSchemaSet()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "初始化的新執行個體<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>類別。"
  syntax:
    content: public XmlSchemaSet ();
    parameters: []
  overload: System.Xml.Schema.XmlSchemaSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)
  id: '#ctor(System.Xml.XmlNameTable)'
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: XmlSchemaSet(XmlNameTable)
  nameWithType: XmlSchemaSet.XmlSchemaSet(XmlNameTable)
  fullName: System.Xml.Schema.XmlSchemaSet.XmlSchemaSet(XmlNameTable)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "初始化的新執行個體<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>指定<xref:System.Xml.XmlNameTable>.</xref:System.Xml.XmlNameTable>類別"
  syntax:
    content: public XmlSchemaSet (System.Xml.XmlNameTable nameTable);
    parameters:
    - id: nameTable
      type: System.Xml.XmlNameTable
      description: "<xref:System.Xml.XmlNameTable>要使用的物件。</xref:System.Xml.XmlNameTable>"
  overload: System.Xml.Schema.XmlSchemaSet.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Xml.XmlNameTable>物件傳遞為參數是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.XmlNameTable>"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)
  id: Add(System.Xml.Schema.XmlSchema)
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Add(XmlSchema)
  nameWithType: XmlSchemaSet.Add(XmlSchema)
  fullName: System.Xml.Schema.XmlSchemaSet.Add(XmlSchema)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "加入給定<xref:System.Xml.Schema.XmlSchema>至<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
  remarks: "如果<xref:System.Xml.Schema.XmlSchema>物件已經存在於<xref:System.Xml.Schema.XmlSchemaSet>，Add 方法不做任何動作。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchema>       這個方法的功能等同於的<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法。</xref:System.Xml.Schema.XmlSchemaSet.Add%2A>"
  syntax:
    content: public System.Xml.Schema.XmlSchema Add (System.Xml.Schema.XmlSchema schema);
    parameters:
    - id: schema
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XmlSchema>要加入至物件<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
    return:
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XmlSchema>物件結構描述是否有效。</xref:System.Xml.Schema.XmlSchema> 如果結構描述不正確，且<xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;></xref>不指定，則<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>傳回，而且會引發適當的驗證事件。 否則， <xref href=&quot;System.Xml.Schema.XmlSchemaException&quot;> </xref>就會擲回。"
  overload: System.Xml.Schema.XmlSchemaSet.Add*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaException
    commentId: T:System.Xml.Schema.XmlSchemaException
    description: "結構描述無效。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Xml.Schema.XmlSchema>物件傳遞為參數是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)
  id: Add(System.Xml.Schema.XmlSchemaSet)
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Add(XmlSchemaSet)
  nameWithType: XmlSchemaSet.Add(XmlSchemaSet)
  fullName: System.Xml.Schema.XmlSchemaSet.Add(XmlSchemaSet)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "將所有 XML 結構描述定義語言 (XSD) 結構描述中的指定<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>至<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  remarks: "結構描述可以加入至之前<xref:System.Xml.Schema.XmlSchemaSet>，它必須成功地前置處理過。</xref:System.Xml.Schema.XmlSchemaSet> 前置處理，就會執行下列基本工作。      1.  結構的有效性，根據 W3C XML 結構描述，規則會檢查結構描述，但未完全驗證的結構描述。      2.  內部和外部結構描述元件的參考會解析。 已成功擷取任何匯入或包含結構描述也會加入至<xref:System.Xml.Schema.XmlSchemaSet>。</xref:System.Xml.Schema.XmlSchemaSet> 匯入結構描述會新增為個別<xref:System.Xml.Schema.XmlSchema>物件和包含的結構描述會包括<xref:System.Xml.Schema.XmlSchema>.</xref:System.Xml.Schema.XmlSchema>的一部分</xref:System.Xml.Schema.XmlSchema>       如果<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>屬性<xref:System.Xml.Schema.XmlSchemaSet>新增`true`中的所有結構描述<xref:System.Xml.Schema.XmlSchemaSet>將會加入至<xref:System.Xml.Schema.XmlSchemaSet>。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 如果<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>屬性<xref:System.Xml.Schema.XmlSchemaSet>新增`false`，加入每個結構描述之前所加入前置處理過。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 如果在新加入的結構描述<xref:System.Xml.Schema.XmlSchemaSet>前置處理，就無法加入的結構描述; 相反地，<xref:System.Xml.Schema.XmlSchemaException>就會擲回。</xref:System.Xml.Schema.XmlSchemaException> </xref:System.Xml.Schema.XmlSchemaSet> 因此，下列兩個程式碼範例並不相同。      ```vb#   &quot; First example   schemaSet.Add(schemaSet1)      &quot; Second example   Dim schema As XmlSchema      For Each schema in schemaSet.Schemas()          schemaSet.Add(schema)      Next   ```      ```c#   // First example   schemaSet.Add(schemaSet1);      // Second example   foreach(XmlSchema schema in schemaSet.Schemas())   {       schemaSet.Add(schema);   }   ```先前的兩個程式碼範例並不相同。 在第一個範例中，如果無效的結構描述存在於`schemaSet1`及其<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>屬性設定為`false`，結構描述會加入至`schemaSet`。</xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 在第二個範例中，結構描述數目可以加入至`schemaSet`遇到無效的結構描述，並擲回例外狀況之前。"
  example:
  - "The following code example illustrates adding schemas to an <xref:System.Xml.Schema.XmlSchemaSet>, then adding the <xref:System.Xml.Schema.XmlSchemaSet> to a new <xref:System.Xml.Schema.XmlSchemaSet> using the Add method.  \n  \n```vb#  \nDim schemaSet1 As XmlSchemaSet = New XmlSchemaSet  \nschemaSet1.Add(\"http://www.contoso.com/retail\", \"http://www.contoso.com/retail.xsd\")  \nschemaSet1.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\")  \nschemaSet1.Add(\"http://www.contoso.com/music\", \"http://www.contoso.com/music.xsd\")  \n  \nDim schemaSet2 As XmlSchemaSet = New XmlSchemaSet  \nschemaSet2.Add(schemaSet1)  \n```  \n  \n```c#  \nXmlSchemaSet schemaSet1 = new XmlSchemaSet();  \nschemaSet1.Add(\"http://www.contoso.com/retail\", \"http://www.contoso.com/retail.xsd\");  \nschemaSet1.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\");  \nschemaSet1.Add(\"http://www.contoso.com/music\", \"http://www.contoso.com/music.xsd\");  \n  \nXmlSchemaSet schemaSet2 = new XmlSchemaSet();  \nschemaSet2.Add(schemaSet1);  \n```"
  syntax:
    content: public void Add (System.Xml.Schema.XmlSchemaSet schemas);
    parameters:
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>物件。"
  overload: System.Xml.Schema.XmlSchemaSet.Add*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaException
    commentId: T:System.Xml.Schema.XmlSchemaException
    description: "中的結構描述<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>不正確。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>物件傳遞為參數是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)
  id: Add(System.String,System.String)
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Add(String,String)
  nameWithType: XmlSchemaSet.Add(String,String)
  fullName: System.Xml.Schema.XmlSchemaSet.Add(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "在指定的 URL 來新增 XML 結構描述定義語言 (XSD) 結構描述<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  remarks: "結構描述可以加入至之前<xref:System.Xml.Schema.XmlSchemaSet>，它必須成功地前置處理過。</xref:System.Xml.Schema.XmlSchemaSet> 前置處理，就會執行下列基本工作。      1.  結構的有效性，根據 W3C XML 結構描述，規則會檢查結構描述，但未完全驗證的結構描述。      2.  內部和外部結構描述元件的參考會解析。 已成功擷取任何匯入或包含結構描述也會加入至<xref:System.Xml.Schema.XmlSchemaSet>。</xref:System.Xml.Schema.XmlSchemaSet> 匯入結構描述會新增為個別<xref:System.Xml.Schema.XmlSchema>物件和包含的結構描述會包括<xref:System.Xml.Schema.XmlSchema>.</xref:System.Xml.Schema.XmlSchema>的一部分</xref:System.Xml.Schema.XmlSchema>       以下是使用的 Add 方法時要考慮的重要注意事項。      -新增結構描述以<xref:System.Xml.Schema.XmlSchemaSet>具有相同已經包含在結構描述目標命名空間和結構描述位置 URL<xref:System.Xml.Schema.XmlSchemaSet>會傳回原始的結構描述物件。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet>      -當新的結構描述已成功新增到<xref:System.Xml.Schema.XmlSchemaSet>、<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>屬性<xref:System.Xml.Schema.XmlSchemaSet>設`false`。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> </xref:System.Xml.Schema.XmlSchemaSet>      的 Add 方法呼叫時，會解析發生 XML 結構描述中任何包含或匯入項目。 無法解析包含和匯入項目產生結構描述驗證警告，如果沒有<xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler>已指定為<xref:System.Xml.Schema.XmlSchemaSet>物件，這些警告將不會報告。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler>      -如果具有相同的目標命名空間的結構描述的結構描述已存在於<xref:System.Xml.Schema.XmlSchemaSet>加入至<xref:System.Xml.Schema.XmlSchemaSet>，新增這兩個結構描述。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet>          > [!NOTE] > 此行為不同於過時<xref:System.Xml.Schema.XmlSchemaCollection>物件。</xref:System.Xml.Schema.XmlSchemaCollection>      -的 Add 方法<xref:System.Xml.Schema.XmlSchemaSet>已使用的目標命名空間的結構描述中定義，而不是需要時會呼叫加入方法做為參數指定的目標命名空間的能力。</xref:System.Xml.Schema.XmlSchemaSet> 指定`null`中`targetNamespace`Add 方法的參數會指示<xref:System.Xml.Schema.XmlSchemaSet>要使用的結構描述中定義的目標命名空間，如下列程式碼範例所示。</xref:System.Xml.Schema.XmlSchemaSet>      ```vb#   Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()   schemaSet.Add(Nothing, &quot;books.xsd&quot;)      Dim schema As XmlSchema   For Each schema In schemaSet.Schemas(&quot;http://www.contoso.com/books&quot;)       schema.Write(Console.Out)   Next   ```      ```c#   XmlSchemaSet schemaSet = new XmlSchemaSet();   schemaSet.Add(null, &quot;books.xsd&quot;);      foreach(XmlSchema schema in schemaSet.Schemas(&quot;http://www.contoso.com/books&quot;))   {       schema.Write(Console.Out);   }   ```在上述程式碼範例`null`指定為`targetNamespace`新增方法的參數。 如此一來，`targetNamespace`定義 books.xml 中使用檔案。 在此情況下，呼叫的 Add 方法的結果會是相同如果 http://www.contoso.com/books 已指定為`targetNamespace`參數。      -W3C XML 結構描述可讓沒有目標命名空間包含結構描述中定義的目標命名空間與結構描述。 在此情況下，結構描述中定義的目標命名空間會強制轉型為包含結構描述的目標命名空間。 包含結構描述會被視為已定義目標命名空間。 同樣地，結構描述沒有目標命名空間可以加入<xref:System.Xml.Schema.XmlSchemaSet>和強制型轉成指定的 Add 方法，如下列範例所示的目標命名空間。</xref:System.Xml.Schema.XmlSchemaSet>      ```   <xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;>       <xs:element name=&quot;A&quot; type=&quot;xs:string&quot; />   </xs:schema>   ```如果上述的結構描述加入至<xref:System.Xml.Schema.XmlSchemaSet>與目標命名空間會 http://www.contoso.com/new/targetnamespace （如下列程式碼所示），它會被視為結構描述中宣告的目標命名空間已`http://www.contoso.com/new/targetnamespace`。</xref:System.Xml.Schema.XmlSchemaSet>      ```vb#   Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()   schemaSet.Add(&quot;http://www.contoso.com/new/targetnamespace&quot;, &quot;http://www.contoso.com/targetnamespace.xsd&quot;)      Dim schema As XmlSchema      For Each schema in schemaSet.Schemas()          Console.WriteLine(schema.TargetNamespace)         Next   ```      ```c#   XmlSchemaSet schemaSet = new XmlSchemaSet();   schemaSet.Add(&quot;http://www.contoso.com/new/targetnamespace&quot;, &quot;http://www.contoso.com/targetnamespace.xsd&quot;);   foreach(XmlSchema schema in schemaSet.Schemas())   {       Console.WriteLine(schema.TargetNamespace);   }   ```"
  example:
  - "The following code example adds the http://www.contoso.com/books.xsd schema with a target namespace of http://www.contoso.com/books to the <xref:System.Xml.Schema.XmlSchemaSet>.  \n  \n```vb#  \nDim schemaSet As XmlSchemaSet = New XmlSchemaSet()  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\")  \n```  \n  \n```c#  \nXmlSchemaSet schemaSet = new XmlSchemaSet();  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\");  \n```  \n  \n The example uses the `books.xsd` file as input.  \n  \n [!code-xml[XmlSchemaSetOverall Example#3](~/add/codesnippet/xml/m-system.xml.schema.xmls_3_1.xsd)]"
  syntax:
    content: public System.Xml.Schema.XmlSchema Add (string targetNamespace, string schemaUri);
    parameters:
    - id: targetNamespace
      type: System.String
      description: "結構描述`targetNamespace`屬性，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>使用`targetNamespace`結構描述中指定。"
    - id: schemaUri
      type: System.String
      description: "指定要載入的結構描述的 URL。"
    return:
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XmlSchema>物件結構描述是否有效。</xref:System.Xml.Schema.XmlSchema> 如果結構描述不正確，且<xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;></xref>不指定，則<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>傳回，而且會引發適當的驗證事件。 否則， <xref href=&quot;System.Xml.Schema.XmlSchemaException&quot;> </xref>就會擲回。"
  overload: System.Xml.Schema.XmlSchemaSet.Add*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaException
    commentId: T:System.Xml.Schema.XmlSchemaException
    description: "結構描述無效。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "做為參數傳遞的 URL 是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或<xref:System.String.Empty>.</xref:System.String.Empty>"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)
  id: Add(System.String,System.Xml.XmlReader)
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Add(String,XmlReader)
  nameWithType: XmlSchemaSet.Add(String,XmlReader)
  fullName: System.Xml.Schema.XmlSchemaSet.Add(String,XmlReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "將 XML 結構描述定義語言 (XSD) 結構描述中包含<xref:System.Xml.XmlReader>至<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。</xref:System.Xml.XmlReader>"
  remarks: "結構描述可以加入至之前<xref:System.Xml.Schema.XmlSchemaSet>，它必須成功地前置處理過。</xref:System.Xml.Schema.XmlSchemaSet> 前置處理，就會執行下列基本工作。      1.  結構的有效性，根據 W3C XML 結構描述，規則會檢查結構描述，但未完全驗證的結構描述。      2.  內部和外部結構描述元件的參考會解析。 已成功擷取任何匯入或包含結構描述也會加入至<xref:System.Xml.Schema.XmlSchemaSet>。</xref:System.Xml.Schema.XmlSchemaSet> 匯入結構描述會新增為個別<xref:System.Xml.Schema.XmlSchema>物件和包含的結構描述會包括<xref:System.Xml.Schema.XmlSchema>.</xref:System.Xml.Schema.XmlSchema>的一部分</xref:System.Xml.Schema.XmlSchema>       以下是使用的 Add 方法時要考慮的重要注意事項。      -已成功擷取結構描述匯入，或包含中<xref:System.Xml.XmlReader>也會加入至<xref:System.Xml.Schema.XmlSchemaSet>。</xref:System.Xml.Schema.XmlSchemaSet></xref:System.Xml.XmlReader>包含結構描述      -如果<xref:System.Xml.XmlReader>並非位於根項目<xref:System.Xml.Schema.XmlSchemaException>除非目前的項目是項目就會擲回。</xref:System.Xml.Schema.XmlSchemaException> </xref:System.Xml.XmlReader> 如果目前的項目`xs:schema`項目，結構描述文件讀入<xref:System.Xml.Schema.XmlSchemaSet>，否則<xref:System.Xml.Schema.XmlSchemaException>因為無效的結構描述會擲回。</xref:System.Xml.Schema.XmlSchemaException> </xref:System.Xml.Schema.XmlSchemaSet>      -如果<xref:System.Xml.XmlReader>位於 XML 節點的序列，透過新增的第一個節點的順序。</xref:System.Xml.XmlReader>      -如果建立結構描述從<xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName>方法呼叫、 值<xref:System.Xml.Schema.XmlSchemaValidationFlags>屬性會被忽略，因為內嵌結構描述處理不會套用為 W3C XML 結構描述文件。</xref:System.Xml.Schema.XmlSchemaValidationFlags> </xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName>      -<xref:System.Xml.XmlResolver>屬性<xref:System.Xml.XmlReader>不會用來解析命名空間或結構描述中的位置參考包含和匯入項目。</xref:System.Xml.XmlReader> </xref:System.Xml.XmlResolver> 相反地，<xref:System.Xml.XmlResolver>屬性<xref:System.Xml.Schema.XmlSchemaSet>用。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.XmlResolver>      -的 Add 方法<xref:System.Xml.Schema.XmlSchemaSet>已使用的目標命名空間的結構描述中定義，而不是需要時會呼叫加入方法做為參數指定的目標命名空間的能力。</xref:System.Xml.Schema.XmlSchemaSet> 指定`null`或<xref:System.String.Empty?displayProperty=fullName>方法指示來新增<xref:System.Xml.Schema.XmlSchemaSet>使用結構描述中定義的目標命名空間。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.String.Empty?displayProperty=fullName> 如需這個行為的範例，請參閱<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法。</xref:System.Xml.Schema.XmlSchemaSet.Add%2A>       這個方法的其餘的功能等同於的<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法。</xref:System.Xml.Schema.XmlSchemaSet.Add%2A>"
  example:
  - "The following code example adds the books.xsd schema contained in the <xref:System.Xml.XmlTextReader> with a target namespace of http://www.contoso.com/books to the <xref:System.Xml.Schema.XmlSchemaSet>.  \n  \n```vb#  \nDim schemaSet As XmlSchemaSet = New XmlSchemaSet()  \nschemaSet.Add(\"http://www.contoso.com/books\", New XmlTextReader(\"books.xsd\")  \n```  \n  \n```c#  \nXmlSchemaSet schemaSet = new XmlSchemaSet();  \nschemaSet.Add(\"http://www.contoso.com/books\", new XmlTextReader(\"books.xsd\");  \n```"
  syntax:
    content: public System.Xml.Schema.XmlSchema Add (string targetNamespace, System.Xml.XmlReader schemaDocument);
    parameters:
    - id: targetNamespace
      type: System.String
      description: "結構描述`targetNamespace`屬性，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>使用`targetNamespace`結構描述中指定。"
    - id: schemaDocument
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>物件。</xref:System.Xml.XmlReader>"
    return:
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XmlSchema>物件結構描述是否有效。</xref:System.Xml.Schema.XmlSchema> 如果結構描述不正確，且<xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;></xref>不指定，則<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>傳回，而且會引發適當的驗證事件。 否則， <xref href=&quot;System.Xml.Schema.XmlSchemaException&quot;> </xref>就會擲回。"
  overload: System.Xml.Schema.XmlSchemaSet.Add*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaException
    commentId: T:System.Xml.Schema.XmlSchemaException
    description: "結構描述無效。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Xml.XmlReader>物件傳遞為參數是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.XmlReader>"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.CompilationSettings
  id: CompilationSettings
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: CompilationSettings
  nameWithType: XmlSchemaSet.CompilationSettings
  fullName: System.Xml.Schema.XmlSchemaSet.CompilationSettings
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "取得或設定<xref href=&quot;System.Xml.Schema.XmlSchemaCompilationSettings&quot;></xref>如<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  remarks: "<xref:System.Xml.Schema.XmlSchemaCompilationSettings>類別會指定<xref:System.Xml.Schema.XmlSchemaSet>.</xref:System.Xml.Schema.XmlSchemaSet>的唯一物件屬性 (UPA) 驗證選項</xref:System.Xml.Schema.XmlSchemaCompilationSettings> 如需啟用 UPA 驗證檢查的詳細資訊，請參閱<xref:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck%2A>屬性。</xref:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck%2A>"
  syntax:
    content: public System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings { get; set; }
    return:
      type: System.Xml.Schema.XmlSchemaCompilationSettings
      description: "The <xref href=&quot;System.Xml.Schema.XmlSchemaCompilationSettings&quot;></xref> for the <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>. 預設值是<xref href=&quot;System.Xml.Schema.XmlSchemaCompilationSettings&quot;></xref>執行個體，其<xref:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck*>屬性設定為<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck*>"
  overload: System.Xml.Schema.XmlSchemaSet.CompilationSettings*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Compile
  id: Compile
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Compile()
  nameWithType: XmlSchemaSet.Compile()
  fullName: System.Xml.Schema.XmlSchemaSet.Compile()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "會加入至 XML 結構描述定義語言 (XSD) 結構描述編譯<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>成一個邏輯結構描述。"
  remarks: "驗證會在需要時自動呼叫這個方法和<xref:System.Xml.Schema.XmlSchemaSet>不已經先前編譯 — 例如，當<xref:System.Xml.Schema.XmlSchemaSet>做為輸入用來建立<xref:System.Xml.XmlReader>物件存放至<xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A>屬性<xref:System.Xml.XmlReaderSettings>物件。</xref:System.Xml.XmlReaderSettings> </xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> </xref:System.Xml.XmlReader> </xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet> 如果<xref:System.Xml.Schema.XmlSchemaSet>是已經在已編譯的狀態，這個方法會重新編譯結構描述。</xref:System.Xml.Schema.XmlSchemaSet> 如果此方法執行成功，<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>屬性設定為`true`。</xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>       先前編譯的結構描述<xref:System.Xml.Schema.XmlSchemaSet>不會重新編譯。</xref:System.Xml.Schema.XmlSchemaSet> 不過，使用編譯的方法所編譯的結構描述<xref:System.Xml.Schema.XmlSchema>會重新編譯。</xref:System.Xml.Schema.XmlSchema>      > [!NOTE] > 您需要呼叫<xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>方法，如果您已新增至<xref:System.Xml.Schema.XmlSchemaSet>。</xref:System.Xml.Schema.XmlSchemaSet>後變更結構描述 （或其包含/匯入）</xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>方法會檢查結構描述的結構的有效性，根據 W3C XML 結構描述的規則。</xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> 不過，它不會執行完整的驗證檢查。 它也會解析內部和外部結構描述元件的參考。 已成功擷取任何匯入或包含結構描述也會加入至<xref:System.Xml.Schema.XmlSchemaSet>。</xref:System.Xml.Schema.XmlSchemaSet> 為個別的<xref:System.Xml.Schema.XmlSchema>物件時包含的結構描述會包括<xref:System.Xml.Schema.XmlSchema>.</xref:System.Xml.Schema.XmlSchema>的一部分</xref:System.Xml.Schema.XmlSchema>加入匯入結構描述 如果成功，請重新處理呼叫<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>屬性設定為 false。</xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>"
  example:
  - "```vb#  \nDim schemaSet As XmlSchemaSet = New XmlSchemaSet()  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\")  \nschemaSet.Compile()  \n```  \n  \n```c#  \nXmlSchemaSet schemaSet = new XmlSchemaSet();  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\");  \nschemaSet.Compile();  \n```"
  syntax:
    content: public void Compile ();
    parameters: []
  overload: System.Xml.Schema.XmlSchemaSet.Compile*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaException
    commentId: T:System.Xml.Schema.XmlSchemaException
    description: "當驗證及編譯中的結構描述時發生錯誤<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Contains(System.String)
  id: Contains(System.String)
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Contains(String)
  nameWithType: XmlSchemaSet.Contains(String)
  fullName: System.Xml.Schema.XmlSchemaSet.Contains(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "指出是否與指定的目標命名空間 URI 的 XML 結構描述定義語言 (XSD) 結構描述為<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  remarks: "間接加入至結構描述<xref:System.Xml.Schema.XmlSchemaSet>會偵測到的 Contains 方法; 例如，匯入結構描述。</xref:System.Xml.Schema.XmlSchemaSet> 如此一來，如果 http://www.contoso.com/retail 命名空間的結構描述的匯入 http://www.contoso.com/books 命名空間的結構描述加入至<xref:System.Xml.Schema.XmlSchemaSet>，呼叫與 Contains`http://www.contoso.com/books`做為參數，它會傳回`true`。</xref:System.Xml.Schema.XmlSchemaSet>"
  syntax:
    content: public bool Contains (string targetNamespace);
    parameters:
    - id: targetNamespace
      type: System.String
      description: "結構描述`targetNamespace`屬性。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>具有指定的目標命名空間 URI 的結構描述是否在<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.Schema.XmlSchemaSet.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)
  id: Contains(System.Xml.Schema.XmlSchema)
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Contains(XmlSchema)
  nameWithType: XmlSchemaSet.Contains(XmlSchema)
  fullName: System.Xml.Schema.XmlSchemaSet.Contains(XmlSchema)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "指出是否指定的 XML 結構描述定義語言 (XSD)<xref:System.Xml.Schema.XmlSchema>物件是處於<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
  syntax:
    content: public bool Contains (System.Xml.Schema.XmlSchema schema);
    parameters:
    - id: schema
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XmlSchema>物件。</xref:System.Xml.Schema.XmlSchema>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Xml.Schema.XmlSchema>物件是處於<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
  overload: System.Xml.Schema.XmlSchemaSet.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>參數形式傳遞<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)
  id: CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: CopyTo(XmlSchema[],Int32)
  nameWithType: XmlSchemaSet.CopyTo(XmlSchema[],Int32)
  fullName: System.Xml.Schema.XmlSchemaSet.CopyTo(XmlSchema[],Int32)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "複製所有<xref:System.Xml.Schema.XmlSchema>物件從<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>到指定的陣列，指定索引處開始。</xref:System.Xml.Schema.XmlSchema>"
  remarks: ''
  example:
  - "The following example copies all the <xref:System.Xml.Schema.XmlSchema> objects in the <xref:System.Xml.Schema.XmlSchemaSet> to an array of <xref:System.Xml.Schema.XmlSchema> objects.  \n  \n```vb#  \nDim schemaSet As XmlSchemaSet = New XmlSchemaSet  \nschemaSet.Add(\"http://www.contoso.com/retail\", \"http://www.contoso.com/retail.xsd\")  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\")  \nschemaSet.Add(\"http://www.contoso.com/music\", \"http://www.contoso.com/music.xsd\")  \n  \nDim schemas(schemaSet.Count) As XmlSchema  \nschemaSet.CopyTo(schemas, 0)  \n```  \n  \n```c#  \nXmlSchemaSet schemaSet = new XmlSchemaSet();  \nschemaSet.Add(\"http://www.contoso.com/retail\", \"http://www.contoso.com/retail.xsd\");  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\");  \nschemaSet.Add(\"http://www.contoso.com/music\", \"http://www.contoso.com/music.xsd\");  \n  \nXmlSchema[] schemas = new XmlSchema[schemaSet.Count];  \nschemaSet.CopyTo(schemas, 0);  \n```"
  syntax:
    content: public void CopyTo (System.Xml.Schema.XmlSchema[] schemas, int index);
    parameters:
    - id: schemas
      type: System.Xml.Schema.XmlSchema[]
      description: "若要將物件複製到陣列。"
    - id: index
      type: System.Int32
      description: "中開始複製的陣列索引。"
  overload: System.Xml.Schema.XmlSchemaSet.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Count
  id: Count
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Count
  nameWithType: XmlSchemaSet.Count
  fullName: System.Xml.Schema.XmlSchemaSet.Count
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "取得數目邏輯的 XML 結構描述定義語言 (XSD) 結構描述中<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  remarks: "如果有兩個結構描述命名空間`http://www.contoso.com`中<xref:System.Xml.Schema.XmlSchemaSet>，Count 屬性會傳回 1，因為結構描述會被視為單一邏輯結構描述進行驗證。</xref:System.Xml.Schema.XmlSchemaSet> 不過，如果命名空間的結構描述`http://www.contoso.com/retail`匯入的結構描述`http://www.contoso.com/books`命名空間，Count 屬性的值為 2。"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "中的邏輯結構描述數目<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  overload: System.Xml.Schema.XmlSchemaSet.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.GlobalAttributes
  id: GlobalAttributes
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: GlobalAttributes
  nameWithType: XmlSchemaSet.GlobalAttributes
  fullName: System.Xml.Schema.XmlSchemaSet.GlobalAttributes
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "取得所有全域屬性中的所有 XML 結構描述定義語言 (XSD) 結構描述中<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  syntax:
    content: public System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes { get; }
    return:
      type: System.Xml.Schema.XmlSchemaObjectTable
      description: "全域屬性的集合。"
  overload: System.Xml.Schema.XmlSchemaSet.GlobalAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.GlobalElements
  id: GlobalElements
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: GlobalElements
  nameWithType: XmlSchemaSet.GlobalElements
  fullName: System.Xml.Schema.XmlSchemaSet.GlobalElements
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "取得所有全域項目中的所有 XML 結構描述定義語言 (XSD) 結構描述中<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  syntax:
    content: public System.Xml.Schema.XmlSchemaObjectTable GlobalElements { get; }
    return:
      type: System.Xml.Schema.XmlSchemaObjectTable
      description: "全域元素的集合。"
  overload: System.Xml.Schema.XmlSchemaSet.GlobalElements*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.GlobalTypes
  id: GlobalTypes
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: GlobalTypes
  nameWithType: XmlSchemaSet.GlobalTypes
  fullName: System.Xml.Schema.XmlSchemaSet.GlobalTypes
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "取得所有全域簡單和複雜類型中所有的 XML 結構描述定義語言 (XSD) 結構描述中的<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  remarks: "GlobalTypes 屬性一律會傳回表示類型`xs:anyType`複雜型別。"
  syntax:
    content: public System.Xml.Schema.XmlSchemaObjectTable GlobalTypes { get; }
    return:
      type: System.Xml.Schema.XmlSchemaObjectTable
      description: "全域簡單和複雜類型的集合。"
  overload: System.Xml.Schema.XmlSchemaSet.GlobalTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.IsCompiled
  id: IsCompiled
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: IsCompiled
  nameWithType: XmlSchemaSet.IsCompiled
  fullName: System.Xml.Schema.XmlSchemaSet.IsCompiled
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "取得值，指出是否在 XML 結構描述定義語言 (XSD) 結構描述<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>已編譯。"
  remarks: "如果結構描述在<xref:System.Xml.Schema.XmlSchemaSet>.</xref:System.Xml.Schema.XmlSchemaSet>中編輯，不會影響 IsCompiled 屬性 中的個別結構描述的更新<xref:System.Xml.Schema.XmlSchemaSet>不會受到追蹤。</xref:System.Xml.Schema.XmlSchemaSet> 如此一來，可以 IsCompiled 屬性`true`即使其中一個結構描述中的<xref:System.Xml.Schema.XmlSchemaSet>已變更，只要沒有結構描述已加入或移除<xref:System.Xml.Schema.XmlSchemaSet>.</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet>"
  example:
  - For an example of the IsCompiled property, see the <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> method.
  syntax:
    content: public bool IsCompiled { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果在結構描述<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>自從上次結構描述已加入或移除的已編譯<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.Schema.XmlSchemaSet.IsCompiled*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.NameTable
  id: NameTable
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: NameTable
  nameWithType: XmlSchemaSet.NameTable
  fullName: System.Xml.Schema.XmlSchemaSet.NameTable
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "取得預設<xref:System.Xml.XmlNameTable>供<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>載入新的 XML 結構描述定義語言 (XSD) 結構描述時。</xref:System.Xml.XmlNameTable>"
  syntax:
    content: public System.Xml.XmlNameTable NameTable { get; }
    return:
      type: System.Xml.XmlNameTable
      description: "原子化的字串物件的資料表。"
  overload: System.Xml.Schema.XmlSchemaSet.NameTable*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)
  id: Remove(System.Xml.Schema.XmlSchema)
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Remove(XmlSchema)
  nameWithType: XmlSchemaSet.Remove(XmlSchema)
  fullName: System.Xml.Schema.XmlSchemaSet.Remove(XmlSchema)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "移除指定的 XML 結構描述定義語言 (XSD) 結構描述從<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  remarks: "移除結構描述從<xref:System.Xml.Schema.XmlSchemaSet>設定<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>屬性`false`。</xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> </xref:System.Xml.Schema.XmlSchemaSet>"
  example:
  - "The following example illustrates adding multiple schemas to an <xref:System.Xml.Schema.XmlSchemaSet>, then removing one of the schemas using the Remove method.  \n  \n```vb#  \nDim schemaSet As XmlSchemaSet = New XmlSchemaSet()  \nschemaSet.Add(\"http://www.contoso.com/retail\", \"http://www.contoso.com/retail.xsd\")  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\")  \nschemaSet.Add(\"http://www.contoso.com/music\", \"http://www.contoso.com/music.xsd\")  \n  \nDim schema As XmlSchema  \n  \nFor Each schema In schemaSet.Schemas()  \n  \n    If schema.TargetNamespace = \"http://www.contoso.com/music\" Then  \n        schemaSet.Remove(schema)  \n    End If  \n  \nNext  \n```  \n  \n```c#  \nXmlSchemaSet schemaSet = new XmlSchemaSet();  \nschemaSet.Add(\"http://www.contoso.com/retail\", \"http://www.contoso.com/retail.xsd\");  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\");  \nschemaSet.Add(\"http://www.contoso.com/music\", \"http://www.contoso.com/music.xsd\");  \n  \nforeach (XmlSchema schema in schemaSet.Schemas())  \n{  \n    if (schema.TargetNamespace == \"http://www.contoso.com/music\")  \n    {  \n        schemaSet.Remove(schema);  \n    }  \n}  \n```"
  syntax:
    content: public System.Xml.Schema.XmlSchema Remove (System.Xml.Schema.XmlSchema schema);
    parameters:
    - id: schema
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XmlSchema>物件移除<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
    return:
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XmlSchema>物件移除<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>中找不到結構描述如果<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
  overload: System.Xml.Schema.XmlSchemaSet.Remove*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaException
    commentId: T:System.Xml.Schema.XmlSchemaException
    description: "結構描述不是有效的結構描述。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Xml.Schema.XmlSchema>參數形式傳遞<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)
  id: RemoveRecursive(System.Xml.Schema.XmlSchema)
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: RemoveRecursive(XmlSchema)
  nameWithType: XmlSchemaSet.RemoveRecursive(XmlSchema)
  fullName: System.Xml.Schema.XmlSchemaSet.RemoveRecursive(XmlSchema)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "移除指定的 XML 結構描述定義語言 (XSD) 結構描述，它會從匯入的所有結構描述<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  remarks: "RemoveRecursive 方法中移除指定的結構描述，它會從匯入的所有結構描述<xref:System.Xml.Schema.XmlSchemaSet>，只要沒有結構描述或其匯入的結構描述的相依性。</xref:System.Xml.Schema.XmlSchemaSet> 如果有相依性的結構描述或其匯入的結構描述中<xref:System.Xml.Schema.XmlSchemaSet>，不會移除，然後傳回此 RemoveRecursive `false`。</xref:System.Xml.Schema.XmlSchemaSet> 如果`false`會傳回與<xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler>是定義，會傳送警告描述相依性的事件處理常式。</xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler>       如果指定的結構描述匯入其他結構描述，以及指定的結構描述之前已移除與<xref:System.Xml.Schema.XmlSchemaSet.Remove%2A>方法，方法將不會移除匯入結構描述，並將傳回 RemoveRecursive `false`。</xref:System.Xml.Schema.XmlSchemaSet.Remove%2A> 例如，如果`parentSchema`匯入`childSchema1`和`childSchema2`只會移除下列程式碼`parentSchema`，但不是匯入`childSchema1`和`childSchema2`結構描述︰```   XmlSchemaSet ss = new XmlSchemaSet();   XmlSchema xs = XmlSchema.Read(XmlReader.Create(&quot;parentSchema.xsd&quot;), null);   ss.Add(xs);   ss.Compile();   ss.Remove(xs);   ss.Compile();   ss.RemoveRecursive(xs);   ss.Compile();   ```下列程式碼將會移除`parentSchema`和匯入結構描述︰ ```   XmlSchemaSet ss = new XmlSchemaSet();   XmlSchema xs = XmlSchema.Read(XmlReader.Create(&quot;parentSchema.xsd&quot;), null);   ss.Add(xs);   ss.Compile();   ss.RemoveRecursive(xs);   ss.Compile();   ``` RemoveRecursive 方法沒有任何作用狀態的<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>屬性。</xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>"
  example:
  - "The following code example illustrates adding multiple schemas to an <xref:System.Xml.Schema.XmlSchemaSet>, then removing one of the schemas and all the schemas it imports using the RemoveRecursive method.  \n  \n```vb#  \nDim schemaSet As XmlSchemaSet = New XmlSchemaSet()  \nschemaSet.Add(\"http://www.contoso.com/retail\", \"http://www.contoso.com/retail.xsd\")  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\")  \nschemaSet.Add(\"http://www.contoso.com/music\", \"http://www.contoso.com/music.xsd\")  \n  \nDim schema As XmlSchema  \n  \nFor Each schema In schemaSet.Schemas()  \n  \n    If schema.TargetNamespace = \"http://www.contoso.com/music\" Then  \n        schemaSet.RemoveRecursive(schema)  \n    End If  \n  \nNext  \n```  \n  \n```c#  \nXmlSchemaSet schemaSet = new XmlSchemaSet();  \nschemaSet.Add(\"http://www.contoso.com/retail\", \"http://www.contoso.com/retail.xsd\");  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\");  \nschemaSet.Add(\"http://www.contoso.com/music\", \"http://www.contoso.com/music.xsd\");  \n  \nforeach (XmlSchema schema in schemaSet.Schemas())  \n{  \n    if (schema.TargetNamespace == \"http://www.contoso.com/music\")  \n    {  \n        schemaSet.RemoveRecursive(schema);  \n    }  \n}  \n```"
  syntax:
    content: public bool RemoveRecursive (System.Xml.Schema.XmlSchema schemaToRemove);
    parameters:
    - id: schemaToRemove
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XmlSchema>物件移除<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Xml.Schema.XmlSchema>物件和其所有匯入已成功移除，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
  overload: System.Xml.Schema.XmlSchemaSet.RemoveRecursive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Xml.Schema.XmlSchema>參數形式傳遞<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)
  id: Reprocess(System.Xml.Schema.XmlSchema)
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Reprocess(XmlSchema)
  nameWithType: XmlSchemaSet.Reprocess(XmlSchema)
  fullName: System.Xml.Schema.XmlSchemaSet.Reprocess(XmlSchema)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "重新處理已經存在於 XML 結構描述定義語言 (XSD) 結構描述<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  remarks: "重新處理結構描述執行結構描述上執行的所有前置處理步驟時<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法呼叫。</xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 如果成功，請重新處理呼叫<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>屬性設定為`false`。</xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>       重新處理方法應該在之後的結構描述中使用<xref:System.Xml.Schema.XmlSchemaSet>之後已修改<xref:System.Xml.Schema.XmlSchemaSet>執行編譯。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet>      > [!NOTE] > 您需要將它新增至<xref:System.Xml.Schema.XmlSchemaSet>。</xref:System.Xml.Schema.XmlSchemaSet>如果您有變更結構描述 （或其包含/匯入） 呼叫重新處理方法 重新處理方法會檢查結構描述的結構的有效性，根據 W3C XML 結構描述的規則。 不過，它不會執行完整的驗證檢查。 它也會解析內部和外部結構描述元件的參考。 已成功擷取任何匯入或包含結構描述也會加入至<xref:System.Xml.Schema.XmlSchemaSet>。</xref:System.Xml.Schema.XmlSchemaSet> 為個別的<xref:System.Xml.Schema.XmlSchema>物件時包含的結構描述會包括<xref:System.Xml.Schema.XmlSchema>.</xref:System.Xml.Schema.XmlSchema>的一部分</xref:System.Xml.Schema.XmlSchema>加入匯入結構描述 如果成功，請重新處理呼叫<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>屬性設定為 false。</xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>"
  example:
  - "The following example illustrates reprocessing a schema added to the <xref:System.Xml.Schema.XmlSchemaSet>. After the <xref:System.Xml.Schema.XmlSchemaSet> is compiled using the <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> method, and the schema added to the <xref:System.Xml.Schema.XmlSchemaSet> is modified, the <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> property will be set to `true`, even though a schema in the <xref:System.Xml.Schema.XmlSchemaSet> has been modified. Calling the Reprocess method performs all the preprocessing performed by the <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> method and sets the <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> property to `false`.  \n  \n```vb#  \nDim schemaSet As XmlSchemaSet = New XmlSchemaSet()  \nDim schema As XmlSchema = schemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\")  \nschemaSet.Compile()  \n  \nDim element As XmlSchemaElement = New XmlSchemaElement()  \nschema.Items.Add(element)  \nelement.Name = \"book\"  \nelement.SchemaTypeName = New XmlQualifiedName(\"string\", \"http://www.w3.org/2001/XMLSchema\")  \n  \nschemaSet.Reprocess(schema)  \n```  \n  \n```c#  \nXmlSchemaSet schemaSet = new XmlSchemaSet();  \nXmlSchema schema = schemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\");  \nschemaSet.Compile();  \n  \nXmlSchemaElement element = new XmlSchemaElement();  \nschema.Items.Add(element);  \nelement.Name = \"book\";  \nelement.SchemaTypeName = new XmlQualifiedName(\"string\", \"http://www.w3.org/2001/XMLSchema\");  \n  \nschemaSet.Reprocess(schema);  \n```"
  syntax:
    content: public System.Xml.Schema.XmlSchema Reprocess (System.Xml.Schema.XmlSchema schema);
    parameters:
    - id: schema
      type: System.Xml.Schema.XmlSchema
      description: "若要重新處理結構描述。"
    return:
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XmlSchema>物件結構描述是否有效的結構描述。</xref:System.Xml.Schema.XmlSchema> 如果結構描述不正確，且<xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;></xref>指定，則<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>傳回，而且會引發適當的驗證事件。 否則， <xref href=&quot;System.Xml.Schema.XmlSchemaException&quot;> </xref>就會擲回。"
  overload: System.Xml.Schema.XmlSchemaSet.Reprocess*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaException
    commentId: T:System.Xml.Schema.XmlSchemaException
    description: "結構描述無效。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Xml.Schema.XmlSchema>物件傳遞為參數是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref:System.Xml.Schema.XmlSchema>物件傳遞為參數並不存在於<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Schemas
  id: Schemas
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Schemas()
  nameWithType: XmlSchemaSet.Schemas()
  fullName: System.Xml.Schema.XmlSchemaSet.Schemas()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "傳回集合的所有 XML 結構描述定義語言 (XSD) 結構描述中的<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  remarks: "這個方法會傳回結構描述，已加入間接<xref:System.Xml.Schema.XmlSchemaSet>因為它們已匯入。</xref:System.Xml.Schema.XmlSchemaSet>      > [!NOTE] > 的結構描述的方法就相當於<xref:System.Xml.Schema.XmlSchemaCollection.GetEnumerator%2A>過時<xref:System.Xml.Schema.XmlSchemaCollection>.</xref:System.Xml.Schema.XmlSchemaCollection>方法</xref:System.Xml.Schema.XmlSchemaCollection.GetEnumerator%2A>"
  example:
  - "The following example illustrates how to iterate over all the schemas in the <xref:System.Xml.Schema.XmlSchemaSet>.  \n  \n```vb#  \nDim schemaSet As XmlSchemaSet = New XmlSchemaSet  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\")  \n  \nDim schema As XmlSchema  \n  \nFor Each schema In schemaSet.Schemas()  \n  \n    schema.Write(Console.Out)  \n  \nNext  \n```  \n  \n```c#  \nXmlSchemaSet schemaSet = new XmlSchemaSet();  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\");  \n  \nforeach (XmlSchema schema in schemaSet.Schemas())  \n{  \n    schema.Write(Console.Out);  \n}  \n```"
  syntax:
    content: public System.Collections.ICollection Schemas ();
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>物件，其中包含已新增至的所有結構描述<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。</xref:System.Collections.ICollection> 如果沒有結構描述已新增到<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>，空<xref:System.Collections.ICollection>物件傳回。</xref:System.Collections.ICollection>"
  overload: System.Xml.Schema.XmlSchemaSet.Schemas*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Schemas(System.String)
  id: Schemas(System.String)
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Schemas(String)
  nameWithType: XmlSchemaSet.Schemas(String)
  fullName: System.Xml.Schema.XmlSchemaSet.Schemas(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "傳回集合的所有 XML 結構描述定義語言 (XSD) 結構描述中的<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>屬於指定的命名空間。"
  remarks: "如果`targetNamespace`參數是`null`或<xref:System.String.Empty>，則會傳回沒有命名空間的所有結構描述。</xref:System.String.Empty>       這個方法會傳回結構描述，已加入間接<xref:System.Xml.Schema.XmlSchemaSet>因為它們已匯入。</xref:System.Xml.Schema.XmlSchemaSet>      > [!NOTE] > 的結構描述的方法就相當於<xref:System.Xml.Schema.XmlSchemaCollection.Item%2A>過時<xref:System.Xml.Schema.XmlSchemaCollection>.</xref:System.Xml.Schema.XmlSchemaCollection>方法</xref:System.Xml.Schema.XmlSchemaCollection.Item%2A>"
  example:
  - "The following example illustrates how to iterate over all the schemas in the http://www.contoso.com/books namespace in the <xref:System.Xml.Schema.XmlSchemaSet>.  \n  \n```vb#  \nDim schemaSet As XmlSchemaSet = New XmlSchemaSet  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\")  \n  \nDim schema As XmlSchema  \n  \nFor Each schema In schemaSet.Schemas(\"http://www.contoso.com/books\")  \n  \n    schema.Write(Console.Out)  \n  \nNext  \n```  \n  \n```c#  \nXmlSchemaSet schemaSet = new XmlSchemaSet();  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\");  \n  \nforeach (XmlSchema schema in schemaSet.Schemas(\"http://www.contoso.com/books\"))  \n{  \n    schema.Write(Console.Out);  \n}  \n```"
  syntax:
    content: public System.Collections.ICollection Schemas (string targetNamespace);
    parameters:
    - id: targetNamespace
      type: System.String
      description: "結構描述`targetNamespace`屬性。"
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>物件，其中包含已新增至的所有結構描述<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>屬於指定的命名空間。</xref:System.Collections.ICollection> 如果沒有結構描述已新增到<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>，空<xref:System.Collections.ICollection>物件傳回。</xref:System.Collections.ICollection>"
  overload: System.Xml.Schema.XmlSchemaSet.Schemas*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.ValidationEventHandler
  id: ValidationEventHandler
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: ValidationEventHandler
  nameWithType: XmlSchemaSet.ValidationEventHandler
  fullName: System.Xml.Schema.XmlSchemaSet.ValidationEventHandler
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "指定事件處理常式，接收 XML 結構描述定義語言 (XSD) 結構描述驗證錯誤的資訊。"
  remarks: "設定事件處理常式，接收有關結構描述驗證錯誤的資訊時<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>或<xref:System.Xml.Schema.XmlSchemaSet.Compile%2A>方法<xref:System.Xml.Schema.XmlSchemaSet>稱為。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> </xref:System.Xml.Schema.XmlSchemaSet.Add%2A>       如果未定義的事件處理常式，<xref:System.Xml.Schema.XmlSchemaException>會擲回的任何驗證錯誤所在的<xref:System.Xml.Schema.XmlSeverityType>為<xref:System.Xml.Schema.XmlSeverityType>。</xref:System.Xml.Schema.XmlSeverityType> </xref:System.Xml.Schema.XmlSeverityType> </xref:System.Xml.Schema.XmlSchemaException> 驗證錯誤<xref:System.Xml.Schema.XmlSeverityType>的<xref:System.Xml.Schema.XmlSeverityType>。</xref:System.Xml.Schema.XmlSeverityType> </xref:System.Xml.Schema.XmlSeverityType> ，不擲回例外狀況"
  example:
  - "The following code example illustrates adding a ValidationEventHandler to capture errors and warnings when validating an XML document against a schema.  \n  \n [!code-cs[XmlSchemaSetOverall Example#1](~/add/codesnippet/csharp/e-system.xml.schema.xmls_2_1.cs)]\n [!code-cpp[XmlSchemaSetOverall Example#1](~/add/codesnippet/cpp/e-system.xml.schema.xmls_2_1.cpp)]\n [!code-vb[XmlSchemaSetOverall Example#1](~/add/codesnippet/visualbasic/e-system.xml.schema.xmls_2_1.vb)]  \n  \n The example uses the books.xml file as an input.  \n  \n [!code-xml[XmlSchemaSetOverall Example#2](~/add/codesnippet/xml/e-system.xml.schema.xmls_2_2.xml)]  \n  \n The example uses the books.xsd file as an input.  \n  \n [!code-xml[XmlSchemaSetOverall Example#3](~/add/codesnippet/xml/e-system.xml.schema.xmls_2_3.xsd)]"
  syntax:
    content: public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;
    return:
      type: System.Xml.Schema.ValidationEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.XmlResolver
  id: XmlResolver
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: XmlResolver
  nameWithType: XmlSchemaSet.XmlResolver
  fullName: System.Xml.Schema.XmlSchemaSet.XmlResolver
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "設定<xref href=&quot;System.Xml.XmlResolver&quot;></xref>用來解析命名空間或參考中的位置包含和匯入結構描述的元素。"
  remarks: "<xref:System.Xml.XmlResolver>的<xref:System.Xml.Schema.XmlSchemaSet>用來解析命名空間或參考中的位置包含和匯入的結構描述、 項目結構描述會加入使用任何時間<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>或<xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>方法。</xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> </xref:System.Xml.Schema.XmlSchemaSet.Add%2A> </xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.XmlResolver>      > [!IMPORTANT] > 外部命名空間或參考中的位置包含，匯入和重新定義結構描述的項目會解析與基底 URI 包含或匯入它們之結構描述。 例如，如果包含或匯入結構描述的基底 URI 是空的或`null`，外部位置都相對於目前目錄中已解決。 <xref:System.Xml.XmlUrlResolver>類別預設用來解析外部結構描述。</xref:System.Xml.XmlUrlResolver> 若要停用的 include 解析度，匯入和重新定義結構描述中，項目的設定 XmlResolver 屬性為`null`。"
  syntax:
    content: public System.Xml.XmlResolver XmlResolver { set; }
    return:
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用來解析命名空間或參考中的位置包含和匯入結構描述的元素。"
  overload: System.Xml.Schema.XmlSchemaSet.XmlResolver*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Xml.Schema.XmlSchemaException
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaException
  nameWithType: XmlSchemaException
  fullName: System.Xml.Schema.XmlSchemaException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Xml.Schema.XmlSchemaSet.#ctor
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: XmlSchemaSet()
  nameWithType: XmlSchemaSet.XmlSchemaSet()
  fullName: System.Xml.Schema.XmlSchemaSet.XmlSchemaSet()
- uid: System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: XmlSchemaSet(XmlNameTable)
  nameWithType: XmlSchemaSet.XmlSchemaSet(XmlNameTable)
  fullName: System.Xml.Schema.XmlSchemaSet.XmlSchemaSet(XmlNameTable)
- uid: System.Xml.XmlNameTable
  parent: System.Xml
  isExternal: true
  name: XmlNameTable
  nameWithType: XmlNameTable
  fullName: System.Xml.XmlNameTable
- uid: System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Add(XmlSchema)
  nameWithType: XmlSchemaSet.Add(XmlSchema)
  fullName: System.Xml.Schema.XmlSchemaSet.Add(XmlSchema)
- uid: System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Add(XmlSchemaSet)
  nameWithType: XmlSchemaSet.Add(XmlSchemaSet)
  fullName: System.Xml.Schema.XmlSchemaSet.Add(XmlSchemaSet)
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Add(String,String)
  nameWithType: XmlSchemaSet.Add(String,String)
  fullName: System.Xml.Schema.XmlSchemaSet.Add(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Add(String,XmlReader)
  nameWithType: XmlSchemaSet.Add(String,XmlReader)
  fullName: System.Xml.Schema.XmlSchemaSet.Add(String,XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml.Schema.XmlSchemaSet.CompilationSettings
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: CompilationSettings
  nameWithType: XmlSchemaSet.CompilationSettings
  fullName: System.Xml.Schema.XmlSchemaSet.CompilationSettings
- uid: System.Xml.Schema.XmlSchemaCompilationSettings
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaCompilationSettings
  nameWithType: XmlSchemaCompilationSettings
  fullName: System.Xml.Schema.XmlSchemaCompilationSettings
- uid: System.Xml.Schema.XmlSchemaSet.Compile
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Compile()
  nameWithType: XmlSchemaSet.Compile()
  fullName: System.Xml.Schema.XmlSchemaSet.Compile()
- uid: System.Xml.Schema.XmlSchemaSet.Contains(System.String)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Contains(String)
  nameWithType: XmlSchemaSet.Contains(String)
  fullName: System.Xml.Schema.XmlSchemaSet.Contains(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Contains(XmlSchema)
  nameWithType: XmlSchemaSet.Contains(XmlSchema)
  fullName: System.Xml.Schema.XmlSchemaSet.Contains(XmlSchema)
- uid: System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: CopyTo(XmlSchema[],Int32)
  nameWithType: XmlSchemaSet.CopyTo(XmlSchema[],Int32)
  fullName: System.Xml.Schema.XmlSchemaSet.CopyTo(XmlSchema[],Int32)
- uid: System.Xml.Schema.XmlSchema[]
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema[]
  spec.csharp:
  - uid: System.Xml.Schema.XmlSchema
    name: XmlSchema
    nameWithType: XmlSchema
    fullName: XmlSchema[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Xml.Schema.XmlSchemaSet.Count
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Count
  nameWithType: XmlSchemaSet.Count
  fullName: System.Xml.Schema.XmlSchemaSet.Count
- uid: System.Xml.Schema.XmlSchemaSet.GlobalAttributes
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: GlobalAttributes
  nameWithType: XmlSchemaSet.GlobalAttributes
  fullName: System.Xml.Schema.XmlSchemaSet.GlobalAttributes
- uid: System.Xml.Schema.XmlSchemaObjectTable
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaObjectTable
  nameWithType: XmlSchemaObjectTable
  fullName: System.Xml.Schema.XmlSchemaObjectTable
- uid: System.Xml.Schema.XmlSchemaSet.GlobalElements
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: GlobalElements
  nameWithType: XmlSchemaSet.GlobalElements
  fullName: System.Xml.Schema.XmlSchemaSet.GlobalElements
- uid: System.Xml.Schema.XmlSchemaSet.GlobalTypes
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: GlobalTypes
  nameWithType: XmlSchemaSet.GlobalTypes
  fullName: System.Xml.Schema.XmlSchemaSet.GlobalTypes
- uid: System.Xml.Schema.XmlSchemaSet.IsCompiled
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: IsCompiled
  nameWithType: XmlSchemaSet.IsCompiled
  fullName: System.Xml.Schema.XmlSchemaSet.IsCompiled
- uid: System.Xml.Schema.XmlSchemaSet.NameTable
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: NameTable
  nameWithType: XmlSchemaSet.NameTable
  fullName: System.Xml.Schema.XmlSchemaSet.NameTable
- uid: System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Remove(XmlSchema)
  nameWithType: XmlSchemaSet.Remove(XmlSchema)
  fullName: System.Xml.Schema.XmlSchemaSet.Remove(XmlSchema)
- uid: System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: RemoveRecursive(XmlSchema)
  nameWithType: XmlSchemaSet.RemoveRecursive(XmlSchema)
  fullName: System.Xml.Schema.XmlSchemaSet.RemoveRecursive(XmlSchema)
- uid: System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Reprocess(XmlSchema)
  nameWithType: XmlSchemaSet.Reprocess(XmlSchema)
  fullName: System.Xml.Schema.XmlSchemaSet.Reprocess(XmlSchema)
- uid: System.Xml.Schema.XmlSchemaSet.Schemas
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Schemas()
  nameWithType: XmlSchemaSet.Schemas()
  fullName: System.Xml.Schema.XmlSchemaSet.Schemas()
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Xml.Schema.XmlSchemaSet.Schemas(System.String)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Schemas(String)
  nameWithType: XmlSchemaSet.Schemas(String)
  fullName: System.Xml.Schema.XmlSchemaSet.Schemas(String)
- uid: System.Xml.Schema.XmlSchemaSet.ValidationEventHandler
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: ValidationEventHandler
  nameWithType: XmlSchemaSet.ValidationEventHandler
  fullName: System.Xml.Schema.XmlSchemaSet.ValidationEventHandler
- uid: System.Xml.Schema.ValidationEventHandler
  parent: System.Xml.Schema
  isExternal: false
  name: ValidationEventHandler
  nameWithType: ValidationEventHandler
  fullName: System.Xml.Schema.ValidationEventHandler
- uid: System.Xml.Schema.XmlSchemaSet.XmlResolver
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: XmlResolver
  nameWithType: XmlSchemaSet.XmlResolver
  fullName: System.Xml.Schema.XmlSchemaSet.XmlResolver
- uid: System.Xml.XmlResolver
  parent: System.Xml
  isExternal: false
  name: XmlResolver
  nameWithType: XmlResolver
  fullName: System.Xml.XmlResolver
- uid: System.Xml.Schema.XmlSchemaSet.#ctor*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet.XmlSchemaSet
- uid: System.Xml.Schema.XmlSchemaSet.Add*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Add
  nameWithType: XmlSchemaSet.Add
- uid: System.Xml.Schema.XmlSchemaSet.CompilationSettings*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: CompilationSettings
  nameWithType: XmlSchemaSet.CompilationSettings
- uid: System.Xml.Schema.XmlSchemaSet.Compile*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Compile
  nameWithType: XmlSchemaSet.Compile
- uid: System.Xml.Schema.XmlSchemaSet.Contains*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Contains
  nameWithType: XmlSchemaSet.Contains
- uid: System.Xml.Schema.XmlSchemaSet.CopyTo*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: CopyTo
  nameWithType: XmlSchemaSet.CopyTo
- uid: System.Xml.Schema.XmlSchemaSet.Count*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Count
  nameWithType: XmlSchemaSet.Count
- uid: System.Xml.Schema.XmlSchemaSet.GlobalAttributes*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: GlobalAttributes
  nameWithType: XmlSchemaSet.GlobalAttributes
- uid: System.Xml.Schema.XmlSchemaSet.GlobalElements*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: GlobalElements
  nameWithType: XmlSchemaSet.GlobalElements
- uid: System.Xml.Schema.XmlSchemaSet.GlobalTypes*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: GlobalTypes
  nameWithType: XmlSchemaSet.GlobalTypes
- uid: System.Xml.Schema.XmlSchemaSet.IsCompiled*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: IsCompiled
  nameWithType: XmlSchemaSet.IsCompiled
- uid: System.Xml.Schema.XmlSchemaSet.NameTable*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: NameTable
  nameWithType: XmlSchemaSet.NameTable
- uid: System.Xml.Schema.XmlSchemaSet.Remove*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Remove
  nameWithType: XmlSchemaSet.Remove
- uid: System.Xml.Schema.XmlSchemaSet.RemoveRecursive*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: RemoveRecursive
  nameWithType: XmlSchemaSet.RemoveRecursive
- uid: System.Xml.Schema.XmlSchemaSet.Reprocess*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Reprocess
  nameWithType: XmlSchemaSet.Reprocess
- uid: System.Xml.Schema.XmlSchemaSet.Schemas*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Schemas
  nameWithType: XmlSchemaSet.Schemas
- uid: System.Xml.Schema.XmlSchemaSet.XmlResolver*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: XmlResolver
  nameWithType: XmlSchemaSet.XmlResolver
