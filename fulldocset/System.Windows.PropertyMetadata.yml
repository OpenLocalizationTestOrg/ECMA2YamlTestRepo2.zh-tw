### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyMetadata
  id: PropertyMetadata
  children:
  - System.Windows.PropertyMetadata.#ctor
  - System.Windows.PropertyMetadata.#ctor(System.Object)
  - System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.PropertyMetadata.CoerceValueCallback
  - System.Windows.PropertyMetadata.DefaultValue
  - System.Windows.PropertyMetadata.IsSealed
  - System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  - System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  - System.Windows.PropertyMetadata.PropertyChangedCallback
  langs:
  - csharp
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
  type: Class
  summary: "定義相依性屬性的特定行為方面，因為它會套用到特定的類型，包括註冊與條件。"
  remarks: "屬性中繼資料可以定義，以及呼叫時，在相依性屬性註冊期間使用<xref:System.Windows.DependencyProperty.Register%2A>方法 （或附加的屬性或唯讀相依性屬性的變體），或之後呼叫時的原始擁有者登錄<xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>方法。</xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.Register%2A> <xref:System.Windows.DependencyProperty.AddOwner%2A>也會採用屬性中繼資料。</xref:System.Windows.DependencyProperty.AddOwner%2A>       這個類別是可用於每個這些呼叫的具象基底類別。 不過，是很常見，指定使用其中一種衍生的類別，例如<xref:System.Windows.FrameworkPropertyMetadata>.</xref:System.Windows.FrameworkPropertyMetadata>的中繼資料 這些衍生的類別支援更詳細的中繼資料做為布林屬性值，可用於偵測或啟用只在實作某些屬性系統和配置行為執行[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]架構層級。       這個類別的一些屬性，以讀寫物件模型，但只能用於屬性<xref:System.Windows.DependencyProperty.Register%2A>或<xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>.</xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A></xref:System.Windows.DependencyProperty.Register%2A>等系統作業的執行個體之前寫入 每一個屬性可能也已設定的建構函式，但會公開讓<xref:System.Windows.PropertyMetadata.Merge%2A>方法實作可以設定它們。</xref:System.Windows.PropertyMetadata.Merge%2A>      <a name=&quot;xamlTextUsage_PropertyMetadata&quot;></a># # XAML 文字使用這個型別和成員，這種不通常會以[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]。"
  syntax:
    content: public class PropertyMetadata
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor
  id: '#ctor'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.PropertyMetadata&quot;></xref>類別。"
  syntax:
    content: public PropertyMetadata ();
    parameters: []
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.PropertyMetadata&quot;></xref>使用指定的預設值為這個中繼資料將會套用至相依性屬性的類別。"
  remarks: "提供值的型別`defaultValue`必須相符或相關的原始註冊相依性屬性會套用這個中繼資料中指定的型別。 因為 （不符項目會引發執行階段例外狀況） 的編譯期間未偵測到不符項目，很難偵錯時，中繼資料的預設值類型與套用至相依性屬性的型別之間的不符。       雖然它是預設的無參數建構函式每`defaultValue`的<xref:System.Windows.DependencyProperty.UnsetValue>不指定。</xref:System.Windows.DependencyProperty.UnsetValue> 嘗試這麼做的話，將會引發例外狀況。"
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor1param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor1param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "若要指定相依性屬性，通常會提供一些特定類型的值為預設值。"
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>無法設定為值<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; 請參閱 < 備註 >。"
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.PropertyMetadata&quot;></xref>類別具有指定<xref href=&quot;System.Windows.PropertyChangedCallback&quot;></xref>實作參考。"
  remarks: ''
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor1paramcallback](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor1paramcallback)]"
  syntax:
    content: public PropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "有效的屬性值變更時要呼叫屬性系統的處理常式實作的參考。"
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.PropertyMetadata&quot;></xref>類別，而指定的預設值和<xref href=&quot;System.Windows.PropertyChangedCallback&quot;></xref>實作參考。"
  remarks: "提供值的型別`defaultValue`必須相符或相關的原始註冊相依性屬性會套用這個中繼資料中指定的型別。 因為 （不符項目會引發執行階段例外狀況） 的編譯期間未偵測到不符項目，很難偵錯時，中繼資料的預設值類型與套用至相依性屬性的型別之間的不符。       雖然它是預設的無參數建構函式每`defaultValue`的<xref:System.Windows.DependencyProperty.UnsetValue>不指定。</xref:System.Windows.DependencyProperty.UnsetValue> 嘗試這麼做的話，將會引發例外狀況。"
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor2param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor2param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "相依性屬性，通常會提供一些特定類型的值為預設值。"
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "有效的屬性值變更時要呼叫屬性系統的處理常式實作的參考。"
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>無法設定為值<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; 請參閱 < 備註 >。"
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.PropertyMetadata&quot;></xref>具有指定的預設值和回呼類別。"
  remarks: "如果您想要指定<xref:System.Windows.CoerceValueCallback>但不是<xref:System.Windows.PropertyChangedCallback>，您可以傳遞`null`如`propertyChangedCallback`參數。</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback>       提供值的型別`defaultValue`必須相符或相關的原始註冊相依性屬性會套用這個中繼資料中指定的型別。 因為 （不符項目會引發執行階段例外狀況） 的編譯期間未偵測到不符項目，很難偵錯時，中繼資料的預設值類型與套用至相依性屬性的型別之間的不符。       雖然它是預設的無參數建構函式每`defaultValue`的<xref:System.Windows.DependencyProperty.UnsetValue>不指定。</xref:System.Windows.DependencyProperty.UnsetValue> 嘗試這麼做的話，將會引發例外狀況。"
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor3param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor3param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "相依性屬性，通常會提供一些特定類型的值為預設值。"
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "有效的屬性值變更時要呼叫屬性系統的處理常式實作的參考。"
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "每當對屬性系統呼叫時要呼叫的處理常式實作的參考<xref:System.Windows.DependencyObject.CoerceValue*>針對這個屬性。</xref:System.Windows.DependencyObject.CoerceValue*>"
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>無法設定為值<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; 請參閱 < 備註 >。"
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  id: CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "取得或設定參考<xref href=&quot;System.Windows.CoerceValueCallback&quot;></xref>此中繼資料中指定的實作。"
  remarks: "屬性中繼資料中的回呼不包含的類型，通常是公用成員，因此這個屬性的值並不重要，在大部分情況下，只要使用 現有相依性屬性的中繼資料。 這個屬性會公開的其中一個原因是，讓中繼資料的子類別可以執行他們想要的合併的邏輯，如果基底中繼資料和覆寫或加入的中繼資料指定<xref:System.Windows.CoerceValueCallback>.</xref:System.Windows.CoerceValueCallback> 不過，CoerceValueCallback 預設的合併邏輯是以取代先前的密碼。       CoerceValueCallback 物件模型中定義為讀寫。 這是讓初始化之後，可以調整 CoerceValueCallback<xref:System.Windows.PropertyMetadata>物件本身。</xref:System.Windows.PropertyMetadata> 不過，一旦一部分的呼叫會使用中繼資料<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 對屬性系統將密封該中繼資料執行個體和內容現在會被視為不變。</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> 嘗試一次設定 CoerceValueCallback<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`此中繼資料執行個體將會引發例外狀況。</xref:System.Windows.PropertyMetadata.IsSealed%2A>"
  syntax:
    content: public System.Windows.CoerceValueCallback CoerceValueCallback { get; set; }
    return:
      type: System.Windows.CoerceValueCallback
      description: "A <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref>實作參考。"
  overload: System.Windows.PropertyMetadata.CoerceValueCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "套用至相依性屬性作業之後，無法設定中繼資料屬性。"
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.DefaultValue
  id: DefaultValue
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "取得或設定相依性屬性的預設值。"
  remarks: "預設值是物件模型中定義為讀寫。 這是讓初始化之後，可以調整 DefaultValue<xref:System.Windows.PropertyMetadata>物件本身。</xref:System.Windows.PropertyMetadata> 不過，一旦一部分的呼叫會使用中繼資料<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 對屬性系統將密封該中繼資料執行個體和內容現在會被視為不變。</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> 嘗試一次設定 DefaultValue<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`此中繼資料執行個體將會引發例外狀況。</xref:System.Windows.PropertyMetadata.IsSealed%2A>       雖然它是預設的無參數建構函式每`defaultValue`的<xref:System.Windows.DependencyProperty.UnsetValue>無法使用預設值或建構函式設定。</xref:System.Windows.DependencyProperty.UnsetValue> 嘗試這麼做的話，將會引發例外狀況。      <a name=&quot;xamlTextUsage_PropertyChangedCallback&quot;></a># # XAML 文字使用這個類型的成員不通常會以[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]。"
  syntax:
    content: public object DefaultValue { get; set; }
    return:
      type: System.Object
      description: "屬性的預設值。 上的預設值<xref href=&quot;System.Windows.PropertyMetadata&quot;></xref>具有無參數建構函式所建立的執行個體將會<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; 請參閱 < 備註 >。"
  overload: System.Windows.PropertyMetadata.DefaultValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "無法設定為值<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref>一旦建立，請參閱 < 備註 >。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "套用至相依性屬性作業之後，無法設定中繼資料屬性。"
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.IsSealed
  id: IsSealed
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "取得值，可判斷中繼資料是否已套用至以某種方式，產生的不可變的狀態，該中繼資料執行個體的屬性。"
  remarks: "各種屬性<xref:System.Windows.PropertyMetadata>，例如<xref:System.Windows.PropertyMetadata.DefaultValue%2A>，為讀寫物件模型中定義。</xref:System.Windows.PropertyMetadata.DefaultValue%2A> </xref:System.Windows.PropertyMetadata> 這是可以初始化之後調整這些屬性，因此<xref:System.Windows.PropertyMetadata>物件本身。</xref:System.Windows.PropertyMetadata> 不過，一旦中繼資料套用至相依性屬性來呼叫過程<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 對屬性系統將密封該中繼資料執行個體和內容現在會被視為不變。</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> 在這些呼叫，其中的階段<xref:System.Windows.PropertyMetadata.OnApply%2A>呼叫，且這個屬性的值設定為`true`。</xref:System.Windows.PropertyMetadata.OnApply%2A>"
  example:
  - "The following example  checks IsSealed prior to a set operation of a custom metadata property.  \n  \n [!code-cs[PropertyMetadataAPIs#MergeImpl](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#mergeimpl)]"
  syntax:
    content: protected bool IsSealed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果中繼資料執行個體是不可變的;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.PropertyMetadata.IsSealed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  id: Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "合併此中繼資料與基底中繼資料。"
  remarks: "這個方法用在內部中繼資料覆寫時 (<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>方法)。</xref:System.Windows.DependencyProperty.OverrideMetadata%2A>"
  example:
  - "The following example implements a merge for a custom metadata type that adds an additional property to the property metadata.  \n  \n [!code-cs[PropertyMetadataAPIs#MergeImpl](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#mergeimpl)]"
  syntax:
    content: protected virtual void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);
    parameters:
    - id: baseMetadata
      type: System.Windows.PropertyMetadata
      description: "要與這個執行個體的值合併的基底中繼資料。"
    - id: dp
      type: System.Windows.DependencyProperty
      description: "要套用這個中繼資料相依性屬性。"
  overload: System.Windows.PropertyMetadata.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  id: OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: OnApply(DependencyProperty,Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.PropertyMetadata.OnApply(DependencyProperty,Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "此中繼資料已套用至屬性，指出密封的中繼資料時呼叫。"
  remarks: "子類別應該確保任何可變動性的資料結構的<xref:System.Windows.PropertyMetadata>子類別應該標示為不可變一旦呼叫 OnApply。</xref:System.Windows.PropertyMetadata> 這會呼叫中繼資料套用至屬性系統作業之後 （登錄、 將擁有者新增、 覆寫中繼資料）。"
  syntax:
    content: protected virtual void OnApply (System.Windows.DependencyProperty dp, Type targetType);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "相依性屬性中繼資料套用。"
    - id: targetType
      type: System.Type
      description: "如果這是特定類型的中繼資料，此中繼資料與相關聯的類型。 如果這是預設的中繼資料時，這個值是 null 參考。"
  overload: System.Windows.PropertyMetadata.OnApply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  id: PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "取得或設定參考<xref href=&quot;System.Windows.PropertyChangedCallback&quot;></xref>此中繼資料中指定的實作。"
  remarks: "屬性中繼資料中的回呼不上定義的類型，通常是公用成員，因此這個屬性的值並不重要，在大部分情況下，只要使用 現有相依性屬性的中繼資料。 這個屬性會公開的其中一個原因是，讓中繼資料類別可以執行他們想要的合併的邏輯，如果基底中繼資料和覆寫或加入的中繼資料指定<xref:System.Windows.PropertyChangedCallback>.</xref:System.Windows.PropertyChangedCallback> 預設合併邏輯是維護表格中的所有 PropertyChangedCallback 實作和呼叫每個項目，執行第一個階層中最深層的類別所建立的回呼。       PropertyChangedCallback 物件模型中定義為讀寫。 這是讓初始化之後，可以調整 PropertyChangedCallback<xref:System.Windows.PropertyMetadata>物件本身。</xref:System.Windows.PropertyMetadata> 不過，一旦一部分的呼叫會使用中繼資料<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 對屬性系統將密封該中繼資料執行個體和內容現在會被視為不變。</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> 嘗試一次設定 PropertyChangedCallback<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`此中繼資料執行個體將會引發例外狀況。</xref:System.Windows.PropertyMetadata.IsSealed%2A>"
  syntax:
    content: public System.Windows.PropertyChangedCallback PropertyChangedCallback { get; set; }
    return:
      type: System.Windows.PropertyChangedCallback
      description: "A <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref>實作參考。"
  overload: System.Windows.PropertyMetadata.PropertyChangedCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "套用至相依性屬性作業之後，無法設定中繼資料屬性。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.PropertyMetadata.#ctor
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object)
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
- uid: System.Windows.PropertyChangedCallback
  parent: System.Windows
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyChangedCallback
  fullName: System.Windows.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
- uid: System.Windows.CoerceValueCallback
  parent: System.Windows
  isExternal: false
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
- uid: System.Windows.PropertyMetadata
  parent: System.Windows
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: OnApply(DependencyProperty,Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.PropertyMetadata.OnApply(DependencyProperty,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.#ctor*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata.PropertyMetadata
- uid: System.Windows.PropertyMetadata.CoerceValueCallback*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
- uid: System.Windows.PropertyMetadata.Merge*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: Merge
  nameWithType: PropertyMetadata.Merge
- uid: System.Windows.PropertyMetadata.OnApply*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: OnApply
  nameWithType: PropertyMetadata.OnApply
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
