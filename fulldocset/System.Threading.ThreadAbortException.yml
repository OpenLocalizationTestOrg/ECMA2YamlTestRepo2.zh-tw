### YamlMime:ManagedReference
items:
- uid: System.Threading.ThreadAbortException
  id: ThreadAbortException
  children:
  - System.Threading.ThreadAbortException.ExceptionState
  langs:
  - csharp
  name: ThreadAbortException
  nameWithType: ThreadAbortException
  fullName: System.Threading.ThreadAbortException
  type: Class
  summary: "進行呼叫時，會擲回的例外狀況<xref:System.Threading.Thread.Abort*>方法。</xref:System.Threading.Thread.Abort*> 這個類別無法被繼承。"
  remarks: "進行呼叫以<xref:System.Threading.Thread.Abort%2A>終結執行緒時，common language runtime 的方法會擲回 ThreadAbortException。</xref:System.Threading.Thread.Abort%2A> ThreadAbortException 特殊可以攔截的例外狀況，但它會自動再次引發結尾`catch`區塊。 當產生這個例外狀況時，執行階段會執行所有`finally`區塊結束的執行緒之前。 因為執行緒可以進行無限制的計算`finally`區塊或呼叫<xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName>取消中止，也不會保證曾經將會結束執行緒。</xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName> 如果您想要等到被中止的執行緒已結束，您可以呼叫<xref:System.Threading.Thread.Join%2A?displayProperty=fullName>方法。</xref:System.Threading.Thread.Join%2A?displayProperty=fullName> <xref:System.Threading.Thread.Join%2A>是封鎖呼叫執行緒實際上會停止執行之前不會傳回。</xref:System.Threading.Thread.Join%2A>      > [!NOTE] > 當 common language runtime (CLR) 停止背景 threadsafter managed 可執行檔中的所有前景執行緒已都結束時，它不會使用<xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>.</xref:System.Threading.Thread.Abort%2A?displayProperty=fullName> 因此，您無法使用 ThreadAbortException 偵測時，clr 即將終止背景執行緒。       ThreadAbortException 會使用 HRESULT COR_E_THREADABORTED，0x80131530 的值。      > [!NOTE] > 的繼承值<xref:System.Exception.Data%2A>屬性一律會是`null`。</xref:System.Exception.Data%2A>"
  example:
  - "The following example demonstrates aborting a thread. The thread that receives the `ThreadAbortException` uses the <xref:System.Threading.Thread.ResetAbort%2A> method to cancel the abort request and continue executing.  \n  \n [!code-cpp[ThreadAbEx#1](~/add/codesnippet/cpp/t-system.threading.threa_4_1.cpp)]\n [!code-vb[ThreadAbEx#1](~/add/codesnippet/visualbasic/t-system.threading.threa_4_1.vb)]\n [!code-cs[ThreadAbEx#1](~/add/codesnippet/csharp/t-system.threading.threa_4_1.cs)]  \n  \n This code produces the following output:  \n  \n```  \nThread - working.  \nMain - aborting my thread.  \nThread - caught ThreadAbortException - resetting.  \nException message: Thread was being aborted.  \nThread - still alive and working.  \nThread - finished working.  \nMain ending.  \n```"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ThreadAbortException : SystemException
  inheritance:
  - System.Exception
  - System.SystemException
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Threading.ThreadAbortException.ExceptionState
  id: ExceptionState
  parent: System.Threading.ThreadAbortException
  langs:
  - csharp
  name: ExceptionState
  nameWithType: ThreadAbortException.ExceptionState
  fullName: System.Threading.ThreadAbortException.ExceptionState
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "取得物件，包含與執行緒中止的應用程式特定資訊。"
  remarks: "這個屬性所傳回的物件透過指定`stateInfo`參數<xref:System.Threading.Thread.Abort%2A>方法。</xref:System.Threading.Thread.Abort%2A> 確切內容和此物件的使用方式是定義; 的應用程式它通常用來傳達正在中止的執行緒以有意義的資訊。"
  example:
  - "The following code example shows how to pass information to a thread that is being aborted.  \n  \n [!code-cs[System.Threading.Thread.Abort2#1](~/add/codesnippet/csharp/p-system.threading.threa_10_1.cs)]\n [!code-cpp[System.Threading.Thread.Abort2#1](~/add/codesnippet/cpp/p-system.threading.threa_10_1.cpp)]\n [!code-vb[System.Threading.Thread.Abort2#1](~/add/codesnippet/visualbasic/p-system.threading.threa_10_1.vb)]"
  syntax:
    content: public object ExceptionState { get; }
    return:
      type: System.Object
      description: "物件，包含應用程式特定資訊。"
  overload: System.Threading.ThreadAbortException.ExceptionState*
  exceptions: []
  platform:
  - net462
references:
- uid: System.SystemException
  isExternal: false
  name: System.SystemException
- uid: System.Threading.ThreadAbortException.ExceptionState
  parent: System.Threading.ThreadAbortException
  isExternal: false
  name: ExceptionState
  nameWithType: ThreadAbortException.ExceptionState
  fullName: System.Threading.ThreadAbortException.ExceptionState
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.ThreadAbortException.ExceptionState*
  parent: System.Threading.ThreadAbortException
  isExternal: false
  name: ExceptionState
  nameWithType: ThreadAbortException.ExceptionState
