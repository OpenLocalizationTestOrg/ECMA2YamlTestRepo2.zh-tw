### YamlMime:ManagedReference
items:
- uid: System.Globalization.SortKey
  id: SortKey
  children:
  - System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)
  - System.Globalization.SortKey.Equals(System.Object)
  - System.Globalization.SortKey.GetHashCode
  - System.Globalization.SortKey.KeyData
  - System.Globalization.SortKey.OriginalString
  - System.Globalization.SortKey.ToString
  langs:
  - csharp
  name: SortKey
  nameWithType: SortKey
  fullName: System.Globalization.SortKey
  type: Class
  summary: "表示將字串對應至其排序索引鍵的結果。"
  remarks: "區分文化特性的比較兩個字串取決於有數種類別排序加權值，包括指令碼、 alphabetic、 字串中的每個字元大小寫和變音符號的加權。 排序索引鍵做為這些權數的特定字串的儲存機制。       <xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=fullName>方法會傳回指定之字串中字元的區分文化特性的對應會反映 SortKey 類別的執行個體。</xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=fullName> 排序鍵物件的值是其索引鍵的資料，由<xref:System.Globalization.SortKey.KeyData%2A>屬性。</xref:System.Globalization.SortKey.KeyData%2A> 此索引鍵的資料是由一系列的字串、 特定文化特性的排序規則和使用者指定的比較選項進行編碼的位元組所組成。 使用 排序鍵比較包含每個排序索引鍵中的對應鍵的資料位元比較。  例如，如果您建立的排序索引鍵呼叫<xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29>方法，其值為<xref:System.Globalization.CompareOptions?displayProperty=fullName>，使用的排序索引鍵的字串比較作業不區分大小寫。</xref:System.Globalization.CompareOptions?displayProperty=fullName> </xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29>       建立字串的排序索引鍵之後，您藉由呼叫靜態比較排序鍵<xref:System.Globalization.SortKey.Compare%2A?displayProperty=fullName>方法。</xref:System.Globalization.SortKey.Compare%2A?displayProperty=fullName> 這個方法會執行簡單的位元組的比較，所以它的速度比<xref:System.String.Compare%2A?displayProperty=fullName>或<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>方法。</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> </xref:System.String.Compare%2A?displayProperty=fullName>      ## 效能考量，當執行字串比較，<xref:System.Globalization.SortKey.Compare%2A>和<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>方法產生相同的結果，但它們以不同的案例為目標。</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> </xref:System.Globalization.SortKey.Compare%2A>       在高層級，<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>方法會產生每個字串的排序索引鍵、 執行比較，然後會捨棄的排序索引鍵，並傳回比較的結果。</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> 不過，<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>方法實際上不會產生整個排序索引鍵來進行比較。</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> 相反地，此方法會產生每個字串中的每個文字項目 （也就是，基底的字元 surrogate 字組，或結合字元序列） 的索引鍵的資料。 方法接著會比較索引鍵資料的相對應的文字項目。 一旦決定最終的結果比較的終止作業。 計算排序索引鍵資訊，但不排序鍵會建立物件。 這項策略是經濟效能而言，如果這兩個字串比較一次，但會高度耗費資源，如果相同的字串比較的次數。       <xref:System.Globalization.SortKey.Compare%2A>方法需要針對每個字串的排序鍵物件產生之前執行的比較。</xref:System.Globalization.SortKey.Compare%2A> 因為記憶體投資以產生 SortKey 物件與時間，這項策略是第一個比較的效能成本。 不過，它可節省資源，如果相同的排序鍵進行比較的次數。       例如，假設您撰寫的應用程式，搜尋字串為基礎的索引資料行符合指定之搜尋字串的資料列的資料庫資料表。 資料表包含數千個資料列，並比較每個資料列中的索引搜尋字串需要很長的時間。 因此，當應用程式會儲存一個資料列和其索引資料行，它也會產生，並專門用來改善搜尋效能資料行中儲存索引的排序索引鍵。 當應用程式搜尋目標資料列時，它會比較索引字串，而不是比較的索引字串的搜尋字串的排序索引鍵之搜尋字串的排序索引鍵。      ## 安全性考量<xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>方法會傳回根據指定的字串值的排序鍵物件和<xref:System.Globalization.CompareOptions>值和相關聯的基礎的文化特性<xref:System.Globalization.CompareInfo>物件。</xref:System.Globalization.CompareInfo> </xref:System.Globalization.CompareOptions> </xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName> 如果安全性決策，取決於字串比較或大小寫變更，您應該使用<xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>方法，以確保作業的行為一致，無論作業系統的文化特性設定而異的文化特性。</xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>       若要取得的排序索引鍵中使用下列步驟︰ 1。  擷取從文化特性而異<xref:System.Globalization.CultureInfo.InvariantCulture?displayProperty=fullName>屬性。</xref:System.Globalization.CultureInfo.InvariantCulture?displayProperty=fullName>      2.  擷取<xref:System.Globalization.CompareInfo>物件而異的文化特性，從<xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=fullName>屬性。</xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=fullName> </xref:System.Globalization.CompareInfo>      3.  呼叫<xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>方法。</xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>       使用 排序鍵的值物件相當於呼叫 Windows `LCMapString` LCMAP_SORTKEY 值的指定方法。 不過，對於排序鍵物件，英文字元的排序索引鍵之前韓文字元的排序索引鍵。       排序鍵物件可序列化，但只限於，讓它們可以跨越<xref:System.AppDomain>物件。</xref:System.AppDomain> 如果應用程式會將排序鍵物件序列化，應用程式必須重新產生排序索引鍵的新版本的.NET framework 時。       如需排序索引鍵的詳細資訊，請參閱 Unicode 技術標準 #10，「 Unicode 定序演算法 」 上[Unicode Consortium 網站](http://go.microsoft.com/fwlink/?linkid=37123)。"
  example:
  - "The following example compares the string \"llama\" using the \"en-US\" and \"es-ES\" cultures, and the \"en-US\" and \"es-ES\" traditional cultures.  \n  \n [!code-cpp[System.Globalization.SortKey.Compare#1](~/add/codesnippet/cpp/t-system.globalization.s_1_1.cpp)]\n [!code-cs[System.Globalization.SortKey.Compare#1](~/add/codesnippet/csharp/t-system.globalization.s_1_1.cs)]\n [!code-vb[System.Globalization.SortKey.Compare#1](~/add/codesnippet/visualbasic/t-system.globalization.s_1_1.vb)]  \n  \n The following example shows how you can use the SortKey class to improve performance in an application that relies extensively on sorting and searching a large array. The example creates an unordered array of names, which in this case has 13 elements. It then stores the sort key of each name in a parallel array, which it passes to the <xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=fullName> method. The result is a sorted array. The example then searches the array for three strings. For each search string, it calls the <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName> method to retrieve the string's sort key, and then calls the <xref:System.Array.FindIndex%2A?displayProperty=fullName> method to retrieve the index of that sort key in the array of sort keys. Because the name and sort key arrays are parallel, the returned index is also the index of the name in the `names` array.  \n  \n [!code-vb[System.Globalization.SortKey.Class#1](~/add/codesnippet/visualbasic/t-system.globalization.s_1_2.vb)]\n [!code-cs[System.Globalization.SortKey.Class#1](~/add/codesnippet/csharp/t-system.globalization.s_1_2.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class SortKey
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)
  id: Compare(System.Globalization.SortKey,System.Globalization.SortKey)
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: Compare(SortKey,SortKey)
  nameWithType: SortKey.Compare(SortKey,SortKey)
  fullName: System.Globalization.SortKey.Compare(SortKey,SortKey)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "比較兩個排序鍵。"
  remarks: "Compare 方法比較<xref:System.Globalization.SortKey.KeyData%2A>屬性`sortkey1`和`sortkey2`參數。</xref:System.Globalization.SortKey.KeyData%2A> 這個方法會產生相同的結果<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>方法。</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>       如需比較方法，並排序鍵比較的詳細資訊，請參閱<xref:System.Globalization.SortKey>類別主題。</xref:System.Globalization.SortKey>"
  example:
  - "The following code example compares two strings using the Compare method and the equivalent <xref:System.Globalization.CompareInfo.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName> method.  \n  \n [!code-cs[sys.glob.sortkey.compare#1](~/add/codesnippet/csharp/4647647d-ce80-4fb7-82b7-_1.cs)]\n [!code-vb[sys.glob.sortkey.compare#1](~/add/codesnippet/visualbasic/4647647d-ce80-4fb7-82b7-_1.vb)]"
  syntax:
    content: public static int Compare (System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2);
    parameters:
    - id: sortkey1
      type: System.Globalization.SortKey
      description: "要比較的第一個排序鍵。"
    - id: sortkey2
      type: System.Globalization.SortKey
      description: "要比較的第二個排序鍵。"
    return:
      type: System.Int32
      description: "帶正負號的整數，指出之間的關聯性<code> sortkey1 </code>和<code> sortkey2 </code>。       <table><thead><tr><th> 值       </th><th> 狀況       </th></tr></thead><tbody><tr><td> 小於零       </td><td><code>sortkey1</code>is less than <code>sortkey2</code>.       </td></tr><tr><td> 零       </td><td><code>sortkey1</code>is equal to <code>sortkey2</code>.       </td></tr><tr><td> 小於或等於零       </td><td><code>sortkey1</code>大於<code> sortkey2 </code>。       </td></tr></tbody></table>"
  overload: System.Globalization.SortKey.Compare*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sortkey1</code>or <code>sortkey2</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Globalization.SortKey.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: SortKey.Equals(Object)
  fullName: System.Globalization.SortKey.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "判斷指定的物件是否等於目前<xref href=&quot;System.Globalization.SortKey&quot;></xref>物件。"
  remarks: "兩個<xref:System.Globalization.SortKey>物件會被視為相等，如果其<xref:System.Globalization.SortKey.KeyData%2A>屬性是否相等。</xref:System.Globalization.SortKey.KeyData%2A> </xref:System.Globalization.SortKey>       這個方法會覆寫<xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>"
  example:
  - "The following code example shows the results of Equals when compared with different <xref:System.Globalization.SortKey> objects.  \n  \n [!code-vb[System.Globalization.SortKey.Equals#1](~/add/codesnippet/visualbasic/m-system.globalization.s_0_1.vb)]\n [!code-cpp[System.Globalization.SortKey.Equals#1](~/add/codesnippet/cpp/m-system.globalization.s_0_1.cpp)]\n [!code-cs[System.Globalization.SortKey.Equals#1](~/add/codesnippet/csharp/m-system.globalization.s_0_1.cs)]"
  syntax:
    content: public override bool Equals (object value);
    parameters:
    - id: value
      type: System.Object
      description: "要與目前比較的物件<xref href=&quot;System.Globalization.SortKey&quot;></xref>物件。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> value </code>參數等於目前<xref href=&quot;System.Globalization.SortKey&quot;></xref>物件; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.SortKey.Equals*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Globalization.SortKey.GetHashCode
  id: GetHashCode
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: SortKey.GetHashCode()
  fullName: System.Globalization.SortKey.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "做為目前的雜湊函式<xref href=&quot;System.Globalization.SortKey&quot;></xref>適用於雜湊演算法和資料結構，例如雜湊表的物件。"
  remarks: "這個方法會產生相同的雜湊程式碼中，兩個物件根據相同的<xref:System.Globalization.SortKey.Equals%2A>方法。</xref:System.Globalization.SortKey.Equals%2A>       這個方法會覆寫<xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "目前的雜湊碼<xref href=&quot;System.Globalization.SortKey&quot;></xref>物件。"
  overload: System.Globalization.SortKey.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortKey.KeyData
  id: KeyData
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: KeyData
  nameWithType: SortKey.KeyData
  fullName: System.Globalization.SortKey.KeyData
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "取得代表目前的位元組陣列<xref href=&quot;System.Globalization.SortKey&quot;></xref>物件。"
  remarks: "KeyData 屬性中比較字串所傳回的資料使用的相關資訊，請參閱<xref:System.Globalization.SortKey>類別主題。</xref:System.Globalization.SortKey>"
  example:
  - "The following code example displays an original string and the equivalent string and key data for a case-sensitive sort key and a case-insensitive sort key.  \n  \n [!code-vb[sys.glob.sortkey.tostring#1](~/add/codesnippet/visualbasic/p-system.globalization.s_0_1.vb)]\n [!code-cs[sys.glob.sortkey.tostring#1](~/add/codesnippet/csharp/p-system.globalization.s_0_1.cs)]"
  syntax:
    content: public virtual byte[] KeyData { get; }
    return:
      type: System.Byte[]
      description: "位元組陣列，代表目前<xref href=&quot;System.Globalization.SortKey&quot;></xref>物件。"
  overload: System.Globalization.SortKey.KeyData*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortKey.OriginalString
  id: OriginalString
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: OriginalString
  nameWithType: SortKey.OriginalString
  fullName: System.Globalization.SortKey.OriginalString
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "取得用來建立目前的原始字串<xref href=&quot;System.Globalization.SortKey&quot;></xref>物件。"
  remarks: ''
  example:
  - "The following code example displays an original string and the equivalent string and key data for a case-sensitive sort key and a case-insensitive sort key.  \n  \n [!code-vb[sys.glob.sortkey.tostring#1](~/add/codesnippet/visualbasic/p-system.globalization.s_1_1.vb)]\n [!code-cs[sys.glob.sortkey.tostring#1](~/add/codesnippet/csharp/p-system.globalization.s_1_1.cs)]"
  syntax:
    content: public virtual string OriginalString { get; }
    return:
      type: System.String
      description: "用來建立目前的原始字串<xref href=&quot;System.Globalization.SortKey&quot;></xref>物件。"
  overload: System.Globalization.SortKey.OriginalString*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortKey.ToString
  id: ToString
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: ToString()
  nameWithType: SortKey.ToString()
  fullName: System.Globalization.SortKey.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "傳回字串，代表目前<xref href=&quot;System.Globalization.SortKey&quot;></xref>物件。"
  remarks: "傳回值是&quot;SortKey-&quot;的字串串連、 文化特性識別項和比較選項的目前<xref:System.Globalization.SortKey>物件，以及值<xref:System.Globalization.SortKey.OriginalString%2A>屬性。</xref:System.Globalization.SortKey.OriginalString%2A> </xref:System.Globalization.SortKey>       這個方法會覆寫<xref:System.Object.ToString%2A?displayProperty=fullName>.</xref:System.Object.ToString%2A?displayProperty=fullName>"
  example:
  - "The following code example displays an original string, the strings yielded by the ToString method for case-sensitive and case-insensitive sort keys, and the key data for case-sensitive and case-insensitive sort keys.  \n  \n [!code-vb[sys.glob.sortkey.tostring#1](~/add/codesnippet/visualbasic/m-system.globalization.s_1_1.vb)]\n [!code-cs[sys.glob.sortkey.tostring#1](~/add/codesnippet/csharp/m-system.globalization.s_1_1.cs)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "字串，代表目前<xref href=&quot;System.Globalization.SortKey&quot;></xref>物件。"
  overload: System.Globalization.SortKey.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)
  parent: System.Globalization.SortKey
  isExternal: false
  name: Compare(SortKey,SortKey)
  nameWithType: SortKey.Compare(SortKey,SortKey)
  fullName: System.Globalization.SortKey.Compare(SortKey,SortKey)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.SortKey
  parent: System.Globalization
  isExternal: false
  name: SortKey
  nameWithType: SortKey
  fullName: System.Globalization.SortKey
- uid: System.Globalization.SortKey.Equals(System.Object)
  parent: System.Globalization.SortKey
  isExternal: false
  name: Equals(Object)
  nameWithType: SortKey.Equals(Object)
  fullName: System.Globalization.SortKey.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.SortKey.GetHashCode
  parent: System.Globalization.SortKey
  isExternal: false
  name: GetHashCode()
  nameWithType: SortKey.GetHashCode()
  fullName: System.Globalization.SortKey.GetHashCode()
- uid: System.Globalization.SortKey.KeyData
  parent: System.Globalization.SortKey
  isExternal: false
  name: KeyData
  nameWithType: SortKey.KeyData
  fullName: System.Globalization.SortKey.KeyData
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.SortKey.OriginalString
  parent: System.Globalization.SortKey
  isExternal: false
  name: OriginalString
  nameWithType: SortKey.OriginalString
  fullName: System.Globalization.SortKey.OriginalString
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.SortKey.ToString
  parent: System.Globalization.SortKey
  isExternal: false
  name: ToString()
  nameWithType: SortKey.ToString()
  fullName: System.Globalization.SortKey.ToString()
- uid: System.Globalization.SortKey.Compare*
  parent: System.Globalization.SortKey
  isExternal: false
  name: Compare
  nameWithType: SortKey.Compare
- uid: System.Globalization.SortKey.Equals*
  parent: System.Globalization.SortKey
  isExternal: false
  name: Equals
  nameWithType: SortKey.Equals
- uid: System.Globalization.SortKey.GetHashCode*
  parent: System.Globalization.SortKey
  isExternal: false
  name: GetHashCode
  nameWithType: SortKey.GetHashCode
- uid: System.Globalization.SortKey.KeyData*
  parent: System.Globalization.SortKey
  isExternal: false
  name: KeyData
  nameWithType: SortKey.KeyData
- uid: System.Globalization.SortKey.OriginalString*
  parent: System.Globalization.SortKey
  isExternal: false
  name: OriginalString
  nameWithType: SortKey.OriginalString
- uid: System.Globalization.SortKey.ToString*
  parent: System.Globalization.SortKey
  isExternal: false
  name: ToString
  nameWithType: SortKey.ToString
