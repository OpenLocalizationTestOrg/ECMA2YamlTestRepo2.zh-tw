### YamlMime:ManagedReference
items:
- uid: System.Windows.Interop.WindowInteropHelper
  id: WindowInteropHelper
  children:
  - System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)
  - System.Windows.Interop.WindowInteropHelper.EnsureHandle
  - System.Windows.Interop.WindowInteropHelper.Handle
  - System.Windows.Interop.WindowInteropHelper.Owner
  langs:
  - csharp
  name: WindowInteropHelper
  nameWithType: WindowInteropHelper
  fullName: System.Windows.Interop.WindowInteropHelper
  type: Class
  summary: "之間的互通性，來協助[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]和[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]程式碼。"
  remarks: "這個類別的成員可讓內部存取呼叫者[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]HWND 和父 HWND 的[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>.</xref:System.Windows.Window>  適當的安全性檢查都是透過這些成員。       每當您需要根據 HWND 更特定的物件時，請使用這個類別。       如果您要裝載即為一例[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]對話方塊[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]應用程式。 初始化與 WindowInteropHelper[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]對話方塊視窗物件。 您可以取得[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]視窗的控制代碼 (HWND) 與<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>屬性和指定的擁有人[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]視窗<xref:System.Windows.Interop.WindowInteropHelper.Owner%2A>屬性。</xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> </xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> 下列程式碼範例示範如何裝載時，使用 WindowInteropHelper[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]對話方塊[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]應用程式。       [!code-cs[CorePseudocode #WindowInteropHelper](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#windowinterophelper)][!code-vb[CorePseudocode #WindowInteropHelper](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#windowinterophelper) ]這個類別支援的另一種情況，是取得<xref:System.Windows.Interop.HwndSource>物件從[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]<xref:System.Windows.Window>物件。</xref:System.Windows.Window> </xref:System.Windows.Interop.HwndSource>   <xref:System.Windows.Interop.HwndSource>可讓您直接處理[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]訊息透過<xref:System.Windows.Interop.HwndSource.AddHook%2A>方法。</xref:System.Windows.Interop.HwndSource.AddHook%2A> </xref:System.Windows.Interop.HwndSource> 使用<xref:System.Windows.Interop.HwndSource>和<xref:System.Windows.Interop.HwndSource.AddHook%2A>取代<xref:System.Windows.Window>您仍然可以處理不對應或處理中的訊息[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]。</xref:System.Windows.Window> </xref:System.Windows.Interop.HwndSource.AddHook%2A> </xref:System.Windows.Interop.HwndSource> 建立與<xref:System.Windows.Window>來源，然後呼叫<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>以取得從 HWND <xref:System.Windows.Interop.HwndSource>.</xref:System.Windows.Interop.HwndSource> WindowInteropHelper</xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> </xref:System.Windows.Window> WindowInteropHelper"
  syntax:
    content: public sealed class WindowInteropHelper
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)
  id: '#ctor(System.Windows.Window)'
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: WindowInteropHelper(Window)
  nameWithType: WindowInteropHelper.WindowInteropHelper(Window)
  fullName: System.Windows.Interop.WindowInteropHelper.WindowInteropHelper(Window)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.Interop.WindowInteropHelper&quot;></xref>針對指定的類別[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]視窗。"
  remarks: "視窗可以是對話方塊中或視窗，否則會不適合用來裝載界限內[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]應用程式。"
  syntax:
    content: public WindowInteropHelper (System.Windows.Window window);
    parameters:
    - id: window
      type: System.Windows.Window
      description: "A[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]視窗物件。"
  overload: System.Windows.Interop.WindowInteropHelper.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle
  id: EnsureHandle
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: EnsureHandle()
  nameWithType: WindowInteropHelper.EnsureHandle()
  fullName: System.Windows.Interop.WindowInteropHelper.EnsureHandle()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "如果將 HWND 尚未建立，請建立視窗的 HWND。"
  remarks: "當您想要分隔實際顯示的受管理的<xref:System.Windows.Window>。</xref:System.Windows.Window>的視窗控制代碼 (HWND) 建立使用 EnsureHandle 方法 當您有可以完成其工作，而不需要顯示視窗的自動化用戶端時，這非常有用。       如果尚未建立原生視窗，這個方法會建立原生視窗中，設定<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>屬性，並傳回 HWND。</xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> 如果已經建立原生視窗，則會傳回現有的原生視窗的控制代碼。       如果因為呼叫這個方法，建立原生視窗<xref:System.Windows.Window.SourceInitialized>就會引發事件。</xref:System.Windows.Window.SourceInitialized>       查詢<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>EnsureHandle 方法呼叫之後的屬性會傳回現有的視窗控制代碼。</xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> 視覺化樹狀結構未連接至後直到視窗<xref:System.Windows.Window.Show%2A>方法呼叫。</xref:System.Windows.Window.Show%2A>       呼叫 EnsureHandle 方法超過一次並不會建立新的視窗控制代碼。 當呼叫已建立之控制代碼呼叫 EnsureHandle 方法<xref:System.Windows.Window.Show%2A>方法不會建立新的視窗控制代碼。</xref:System.Windows.Window.Show%2A> 沒有控制代碼存在 EnsureHandle 方法呼叫時，才會建立原生的視窗。       視窗屬性所設定使用原生視窗應用程式開發介面，透過 p/invoke 可能不會出現在受管理的應用程式開發介面視窗。 例如，如果您設定後呼叫 EnsureHandle 方法時，使用原生 MS_EX_TOPMOST 旗標是最上層視窗<xref:System.Windows.Window.Topmost%2A>屬性不一定會反映原始設定。</xref:System.Windows.Window.Topmost%2A>"
  syntax:
    content: public IntPtr EnsureHandle ();
    parameters: []
    return:
      type: System.IntPtr
      description: "<xref:System.IntPtr>表示 HWND。</xref:System.IntPtr>"
  overload: System.Windows.Interop.WindowInteropHelper.EnsureHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.Handle
  id: Handle
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: Handle
  nameWithType: WindowInteropHelper.Handle
  fullName: System.Windows.Interop.WindowInteropHelper.Handle
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "取得的視窗控制代碼[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]視窗用來建立此<xref href=&quot;System.Windows.Interop.WindowInteropHelper&quot;> </xref>。"
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: "[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]視窗控制代碼 (HWND)。"
  overload: System.Windows.Interop.WindowInteropHelper.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.Owner
  id: Owner
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: Owner
  nameWithType: WindowInteropHelper.Owner
  fullName: System.Windows.Interop.WindowInteropHelper.Owner
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "取得或設定的控制代碼[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]主控視窗。"
  remarks: "您可以重設 windows 藉由設定這個屬性中的父代。 True 會對一般[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]程式設計，請勿不重設父代已經在使用中的 windows。"
  syntax:
    content: public IntPtr Owner { get; set; }
    return:
      type: System.IntPtr
      description: "擁有者的視窗控制代碼 (HWND) 中。"
  overload: System.Windows.Interop.WindowInteropHelper.Owner*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: WindowInteropHelper(Window)
  nameWithType: WindowInteropHelper.WindowInteropHelper(Window)
  fullName: System.Windows.Interop.WindowInteropHelper.WindowInteropHelper(Window)
- uid: System.Windows.Window
  parent: System.Windows
  isExternal: false
  name: Window
  nameWithType: Window
  fullName: System.Windows.Window
- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: EnsureHandle()
  nameWithType: WindowInteropHelper.EnsureHandle()
  fullName: System.Windows.Interop.WindowInteropHelper.EnsureHandle()
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Windows.Interop.WindowInteropHelper.Handle
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Handle
  nameWithType: WindowInteropHelper.Handle
  fullName: System.Windows.Interop.WindowInteropHelper.Handle
- uid: System.Windows.Interop.WindowInteropHelper.Owner
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Owner
  nameWithType: WindowInteropHelper.Owner
  fullName: System.Windows.Interop.WindowInteropHelper.Owner
- uid: System.Windows.Interop.WindowInteropHelper.#ctor*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: WindowInteropHelper
  nameWithType: WindowInteropHelper.WindowInteropHelper
- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: EnsureHandle
  nameWithType: WindowInteropHelper.EnsureHandle
- uid: System.Windows.Interop.WindowInteropHelper.Handle*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Handle
  nameWithType: WindowInteropHelper.Handle
- uid: System.Windows.Interop.WindowInteropHelper.Owner*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Owner
  nameWithType: WindowInteropHelper.Owner
