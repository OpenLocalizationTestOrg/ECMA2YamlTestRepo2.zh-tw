### YamlMime:ManagedReference
items:
- uid: System.IO.Packaging.PackageRelationship
  id: PackageRelationship
  children:
  - System.IO.Packaging.PackageRelationship.Id
  - System.IO.Packaging.PackageRelationship.Package
  - System.IO.Packaging.PackageRelationship.RelationshipType
  - System.IO.Packaging.PackageRelationship.SourceUri
  - System.IO.Packaging.PackageRelationship.TargetMode
  - System.IO.Packaging.PackageRelationship.TargetUri
  langs:
  - csharp
  name: PackageRelationship
  nameWithType: PackageRelationship
  fullName: System.IO.Packaging.PackageRelationship
  type: Class
  summary: "表示與來源之間的關聯<xref href=&quot;System.IO.Packaging.Package&quot;></xref>或<xref href=&quot;System.IO.Packaging.PackagePart&quot;> </xref>，和它可以是目標物件<xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref>或外部的資源。"
  remarks: "PackageRelationship 定義之間的關聯*來源*<xref:System.IO.Packaging.Package>或<xref:System.IO.Packaging.PackagePart>至*目標*<xref:System.IO.Packaging.PackagePart>或外部的資源。</xref:System.IO.Packaging.PackagePart> </xref:System.IO.Packaging.PackagePart> </xref:System.IO.Packaging.Package>  來源物件會被視為 「 擁有者 」 的關聯性。       PackageRelationship 類別有沒有公用建構函式。相反地，使用兩個建立方法: | | |  |-|-|  |<xref:System.IO.Packaging.Package>.<xref:System.IO.Packaging.Package.CreateRelationship%2A>|建立的 「 封裝層級 」 關聯性 — 從封裝到指定的組件或外部的資源。 |  |<xref:System.IO.Packaging.PackagePart>.<xref:System.IO.Packaging.PackagePart.CreateRelationship%2A>|建立的 「 組件層級 」 關聯性 — 從某個組件到另一個組件或外部的資源。 |      來源封裝或組件由<xref:System.IO.Packaging.PackageRelationship.SourceUri%2A>屬性關聯性。</xref:System.IO.Packaging.PackageRelationship.SourceUri%2A> </xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> </xref:System.IO.Packaging.PackagePart> </xref:System.IO.Packaging.Package.CreateRelationship%2A> </xref:System.IO.Packaging.Package>  目標組件或外部的資源由<xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>屬性關聯性。</xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>       建立或刪除的關聯性不會影響以任何方式的來源或目標物件。       如果刪除來源物件，就會一併刪除物件所擁有的所有關聯性。       關聯性中的文件和文件之間的導覽。  關聯性也支援文件物件模型服務，例如連結<xref:System.Printing.PrintTicket>列印時的特定文件項目。</xref:System.Printing.PrintTicket>       如需有關 PackageRelationship 項目，請參閱中的區段 1.3 「 關聯性 」*開放式封裝慣例*規格下載[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public class PackageRelationship
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageRelationship.Id
  id: Id
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  name: Id
  nameWithType: PackageRelationship.Id
  fullName: System.IO.Packaging.PackageRelationship.Id
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得字串，識別關聯性。"
  remarks: "Id 屬性字串都是唯一的<xref:System.IO.Packaging.PackageRelationship.SourceUri%2A>封裝或組件</xref:System.IO.Packaging.PackageRelationship.SourceUri%2A>所擁有的所有關聯性       呼叫中指定 Id**封裝**。<xref:System.IO.Packaging.Package.CreateRelationship%2A>或**PackagePart**。<xref:System.IO.Packaging.PackagePart.CreateRelationship%2A>建立關聯性的方法。</xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> </xref:System.IO.Packaging.Package.CreateRelationship%2A>  在建立關聯性之後，就無法變更 Id。       Id 屬性的字串是有效的 XML 識別項。 Id 類型是 xsd:ID，且必須遵照中規定的命名慣例*XML 結構描述第 2 部分︰ 資料型別*規格 (請參閱[http://www.w3.org/TR/xmlschema-2/#ID](http://www.w3.org/TR/xmlschema-2/))。"
  syntax:
    content: public string Id { get; }
    return:
      type: System.String
      description: "字串，識別關聯性。"
  overload: System.IO.Packaging.PackageRelationship.Id*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageRelationship.Package
  id: Package
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  name: Package
  nameWithType: PackageRelationship.Package
  fullName: System.IO.Packaging.PackageRelationship.Package
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得<xref href=&quot;System.IO.Packaging.Package&quot;> </xref> ，其中包含這個關聯性。"
  remarks: "如需有關<xref:System.IO.Packaging.Package>項目請參閱*開放式封裝慣例*規格下載[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。</xref:System.IO.Packaging.Package>"
  syntax:
    content: public System.IO.Packaging.Package Package { get; }
    return:
      type: System.IO.Packaging.Package
      description: "此封裝會包含此關聯性。"
  overload: System.IO.Packaging.PackageRelationship.Package*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageRelationship.RelationshipType
  id: RelationshipType
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  name: RelationshipType
  nameWithType: PackageRelationship.RelationshipType
  fullName: System.IO.Packaging.PackageRelationship.RelationshipType
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得關聯性的限定型別名稱。"
  remarks: "呼叫中指定之 RelationshipType**封裝**。<xref:System.IO.Packaging.Package.CreateRelationship%2A>或**PackagePart**。<xref:System.IO.Packaging.PackagePart.CreateRelationship%2A>建立關聯性的方法。</xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> </xref:System.IO.Packaging.Package.CreateRelationship%2A>  在建立關聯性之後，就無法變更 RelationshipType。       RelationshipType 定義類似的 URI 語法中，並識別關聯性的角色。 例如，&quot;http://schemas.microsoft.com/xps/2005/06/required-resource&quot;識別的關聯性目標屬於 「 必要-資源 」。       **封裝範圍的關聯性類型**|描述 |關聯性類型 |  |-----------------|-----------------------|  |核心屬性 | http://schemas.microsoft.com/package/2006/relationships/metadata/core-properties |  |數位簽章 | http://schemas.microsoft.com/package/2006/relationships/digital-signature/signature |  |數位簽章憑證 | http://schemas.microsoft.com/package/2006/relationships/digital-signature/certificate |  |數位簽章來源 | http://schemas.microsoft.com/package/2006/relationships/digital-signature/origin |  | 縮圖 | http://schemas.microsoft.com/package/2006/relationships/metadata/thumbnail |      如需有關封裝關聯性類型請參閱第 3 章和附錄 I 的*開放式封裝慣例*規格下載[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public string RelationshipType { get; }
    return:
      type: System.String
      description: "關聯性的限定型別名稱。"
  overload: System.IO.Packaging.PackageRelationship.RelationshipType*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageRelationship.SourceUri
  id: SourceUri
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  name: SourceUri
  nameWithType: PackageRelationship.SourceUri
  fullName: System.IO.Packaging.PackageRelationship.SourceUri
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]封裝或擁有關聯性的一部分。"
  remarks: "如果擁有者的關聯性，是<xref:System.IO.Packaging.Package>，SourceUri 傳回的 URI&quot;/&quot;。</xref:System.IO.Packaging.Package>       如果關聯性由所擁有<xref:System.IO.Packaging.PackagePart>，SourceUri 傳回組件的 URI</xref:System.IO.Packaging.PackagePart>"
  syntax:
    content: public Uri SourceUri { get; }
    return:
      type: System.Uri
      description: "[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]的<xref href=&quot;System.IO.Packaging.Package&quot;></xref>或<xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref>擁有關聯性。"
  overload: System.IO.Packaging.PackageRelationship.SourceUri*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageRelationship.TargetMode
  id: TargetMode
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  name: TargetMode
  nameWithType: PackageRelationship.TargetMode
  fullName: System.IO.Packaging.PackageRelationship.TargetMode
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得值，指出關聯性的目標是<xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref>或<xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref>至<xref href=&quot;System.IO.Packaging.Package&quot;> </xref>。"
  remarks: "呼叫中指定的 TargetMode**封裝**。<xref:System.IO.Packaging.Package.CreateRelationship%2A>或**PackagePart**。<xref:System.IO.Packaging.PackagePart.CreateRelationship%2A>建立關聯性的方法。</xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> </xref:System.IO.Packaging.Package.CreateRelationship%2A> 在建立關聯性之後就無法變更 TargetMode。       TargetMode 時<xref:System.IO.Packaging.TargetMode>、<xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>必須是相對的參考。</xref:System.IO.Packaging.PackageRelationship.TargetUri%2A> </xref:System.IO.Packaging.TargetMode>  相對參考的封裝層級關聯性，<xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>解析相對於擁有且包含關聯性的來源封裝的 pack URI。</xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>  (範例來源封裝組件的 URI:&quot;pack://http:、 www.adatum.com、 files,datapak.package/&quot;。)組件層級關聯性，<xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>解決相對於來源組件擁有關聯性 (<xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>解譯相對於<xref:System.IO.Packaging.PackageRelationship.SourceUri%2A>)。</xref:System.IO.Packaging.PackageRelationship.SourceUri%2A> </xref:System.IO.Packaging.PackageRelationship.TargetUri%2A> </xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>       TargetMode 時<xref:System.IO.Packaging.TargetMode>、<xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>可以是相對的參考或完整格式的 URI。</xref:System.IO.Packaging.PackageRelationship.TargetUri%2A> </xref:System.IO.Packaging.TargetMode>  如果<xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>是相對的參考，參考會解譯為與位置<xref:System.IO.Packaging.Package>，其中包含這個關聯性。</xref:System.IO.Packaging.Package> </xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>       如需有關 TargetMode 參閱 1.3.3 」 關聯性標記 」 的*開放式封裝慣例*規格下載[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public System.IO.Packaging.TargetMode TargetMode { get; }
    return:
      type: System.IO.Packaging.TargetMode
      description: "列舉值，指出是否<xref:System.IO.Packaging.PackageRelationship.TargetUri*>參考的資源<xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref>或<xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref>至<xref href=&quot;System.IO.Packaging.Package&quot;> </xref>。</xref:System.IO.Packaging.PackageRelationship.TargetUri*>"
  overload: System.IO.Packaging.PackageRelationship.TargetMode*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageRelationship.TargetUri
  id: TargetUri
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  name: TargetUri
  nameWithType: PackageRelationship.TargetUri
  fullName: System.IO.Packaging.PackageRelationship.TargetUri
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]的關聯性的目標資源。"
  remarks: "呼叫中指定 TargetUri**封裝**。<xref:System.IO.Packaging.Package.CreateRelationship%2A>或**PackagePart**。<xref:System.IO.Packaging.PackagePart.CreateRelationship%2A>建立關聯性的方法。</xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> </xref:System.IO.Packaging.Package.CreateRelationship%2A> 在建立關聯性之後就無法變更 TargetUri。       當<xref:System.IO.Packaging.PackageRelationship.TargetMode%2A>是<xref:System.IO.Packaging.TargetMode>，TargetUri 必須是相對參考。</xref:System.IO.Packaging.TargetMode> </xref:System.IO.Packaging.PackageRelationship.TargetMode%2A>  封裝層級關聯性，TargetUri 相對參考會解析相對於擁有且包含關聯性的來源封裝的 pack URI。  (範例來源封裝組件的 URI:&quot;pack://http:、 www.adatum.com、 files,datapak.package/&quot;。)組件層級關聯性，是相對於擁有關聯性的來源組件解析 TargetUri (相對於解譯 TargetUri <xref:System.IO.Packaging.PackageRelationship.SourceUri%2A>)。</xref:System.IO.Packaging.PackageRelationship.SourceUri%2A>       當<xref:System.IO.Packaging.PackageRelationship.TargetMode%2A>是<xref:System.IO.Packaging.TargetMode>，TargetUri 可以是相對的參考或完整格式的 URI。</xref:System.IO.Packaging.TargetMode> </xref:System.IO.Packaging.PackageRelationship.TargetMode%2A>  如果 TargetUri 相對參照，參考會解譯為與位置，則<xref:System.IO.Packaging.Package>，其中包含這個關聯性。</xref:System.IO.Packaging.Package>       如需有關 TargetUri 參閱 1.3.3 」 關聯性標記 」 的*開放式封裝慣例*規格下載[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public Uri TargetUri { get; }
    return:
      type: System.Uri
      description: "[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]目標資源。"
  overload: System.IO.Packaging.PackageRelationship.TargetUri*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IO.Packaging.PackageRelationship.Id
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: Id
  nameWithType: PackageRelationship.Id
  fullName: System.IO.Packaging.PackageRelationship.Id
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Packaging.PackageRelationship.Package
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: Package
  nameWithType: PackageRelationship.Package
  fullName: System.IO.Packaging.PackageRelationship.Package
- uid: System.IO.Packaging.Package
  parent: System.IO.Packaging
  isExternal: false
  name: Package
  nameWithType: Package
  fullName: System.IO.Packaging.Package
- uid: System.IO.Packaging.PackageRelationship.RelationshipType
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: RelationshipType
  nameWithType: PackageRelationship.RelationshipType
  fullName: System.IO.Packaging.PackageRelationship.RelationshipType
- uid: System.IO.Packaging.PackageRelationship.SourceUri
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: SourceUri
  nameWithType: PackageRelationship.SourceUri
  fullName: System.IO.Packaging.PackageRelationship.SourceUri
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.IO.Packaging.PackageRelationship.TargetMode
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: TargetMode
  nameWithType: PackageRelationship.TargetMode
  fullName: System.IO.Packaging.PackageRelationship.TargetMode
- uid: System.IO.Packaging.TargetMode
  parent: System.IO.Packaging
  isExternal: false
  name: TargetMode
  nameWithType: TargetMode
  fullName: System.IO.Packaging.TargetMode
- uid: System.IO.Packaging.PackageRelationship.TargetUri
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: TargetUri
  nameWithType: PackageRelationship.TargetUri
  fullName: System.IO.Packaging.PackageRelationship.TargetUri
- uid: System.IO.Packaging.PackageRelationship.Id*
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: Id
  nameWithType: PackageRelationship.Id
- uid: System.IO.Packaging.PackageRelationship.Package*
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: Package
  nameWithType: PackageRelationship.Package
- uid: System.IO.Packaging.PackageRelationship.RelationshipType*
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: RelationshipType
  nameWithType: PackageRelationship.RelationshipType
- uid: System.IO.Packaging.PackageRelationship.SourceUri*
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: SourceUri
  nameWithType: PackageRelationship.SourceUri
- uid: System.IO.Packaging.PackageRelationship.TargetMode*
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: TargetMode
  nameWithType: PackageRelationship.TargetMode
- uid: System.IO.Packaging.PackageRelationship.TargetUri*
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: TargetUri
  nameWithType: PackageRelationship.TargetUri
