### YamlMime:ManagedReference
items:
- uid: System.Windows.CoerceValueCallback
  id: CoerceValueCallback
  langs:
  - csharp
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
  type: Delegate
  summary: "提供範本的重新評估相依性屬性值，或強制轉型會在特別要求時呼叫的方法。"
  remarks: "根據 CoerceValueCallback 回呼可以指派透過數種不同技術的相依性屬性。 這些技術的每個需要您先建立新的屬性中繼資料物件 (<xref:System.Windows.PropertyMetadata>，或衍生的類別，例如<xref:System.Windows.FrameworkPropertyMetadata>)。</xref:System.Windows.FrameworkPropertyMetadata> </xref:System.Windows.PropertyMetadata> 建立使用會採用的建構函式簽章的中繼資料物件`coerceValueCallback`參數，並將該參數指派給您的回呼處理常式。 建構的任何簽章和集合的中繼資料或<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>屬性，再將中繼資料放在使用中。</xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>       當您擁有此中繼資料時，您可以:-新的類別，並使用其中一個簽章上定義新的相依性屬性<xref:System.Windows.DependencyProperty.Register%2A>，讓中繼資料當做`typeMetadata`值。</xref:System.Windows.DependencyProperty.Register%2A>      -覆寫中繼資料 (呼叫<xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) 針對現有的相依性屬性，當您從擁有相依性屬性的類別衍生。</xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>      -將現有的相依性屬性新增至新的<xref:System.Windows.DependencyObject>類別，使用新的中繼資料，藉由呼叫<xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> </xref:System.Windows.DependencyObject>       此回呼的實作應該檢查值`baseValue`並判斷這是否需要進一步強制轉型的值為基礎的值或型別。       <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>相依性屬性會叫用屬性系統或其他呼叫端呼叫任何時間<xref:System.Windows.DependencyObject.CoerceValue%2A>上<xref:System.Windows.DependencyObject>執行個體，並指定該屬性的識別碼，則為`dp`。</xref:System.Windows.DependencyObject> </xref:System.Windows.DependencyObject.CoerceValue%2A> </xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>       屬性值的變更可能會有來自屬性系統中任何可能的參與者。 這包括樣式、 泛型失效，觸發程序、 屬性值繼承，以及本機值設定。       您通常應該避免指定一個以上的<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>針對任何指定的相依性屬性 (覆寫或新增具有新的中繼資料已經有相依性屬性的<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>)。</xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> </xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> 只有其中一個回呼會起作用。 做回呼將會套用到繼承相較之下中最常衍生的類別的一個<xref:System.Windows.DependencyObject>呼叫端。</xref:System.Windows.DependencyObject> 中繼資料遭到覆寫時，會取代其他回呼仍所指派的相依性屬性的中繼資料的擁有者階層更高版本存在。"
  example:
  - "The following example includes an implementation of this callback to coerce the stored value of a dependency property based on other inputs, such as another property's value. In this case, the callback checks to see whether the `ShirtType` property corresponds to a type of shirt that has buttons; if so it establishes a starting default color for the `ButtonColor`, if the shirt type has no buttons, it coerces the `ButtonColor` value back to a starting value, which causes the [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] (not shown) to remove that dropdown from the effective choices.  \n  \n [!code-cs[DPCustom#CoerceValueCallback](~/add/codesnippet/csharp/DPCustom/default.xaml.cs#coercevaluecallback)]\n [!code-vb[DPCustom#CoerceValueCallback](~/add/codesnippet/visualbasic/dpcustom/default.xaml.vb#coercevaluecallback)]"
  syntax:
    content: public delegate object CoerceValueCallback(DependencyObject d, object baseValue);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
