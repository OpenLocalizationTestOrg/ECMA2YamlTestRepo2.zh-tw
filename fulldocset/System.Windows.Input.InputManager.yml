### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.InputManager
  id: InputManager
  children:
  - System.Windows.Input.InputManager.Current
  - System.Windows.Input.InputManager.EnterMenuMode
  - System.Windows.Input.InputManager.HitTestInvalidatedAsync
  - System.Windows.Input.InputManager.InputProviders
  - System.Windows.Input.InputManager.IsInMenuMode
  - System.Windows.Input.InputManager.LeaveMenuMode
  - System.Windows.Input.InputManager.MostRecentInputDevice
  - System.Windows.Input.InputManager.PopMenuMode(System.Windows.PresentationSource)
  - System.Windows.Input.InputManager.PostNotifyInput
  - System.Windows.Input.InputManager.PostProcessInput
  - System.Windows.Input.InputManager.PreNotifyInput
  - System.Windows.Input.InputManager.PreProcessInput
  - System.Windows.Input.InputManager.PrimaryKeyboardDevice
  - System.Windows.Input.InputManager.PrimaryMouseDevice
  - System.Windows.Input.InputManager.ProcessInput(System.Windows.Input.InputEventArgs)
  - System.Windows.Input.InputManager.PushMenuMode(System.Windows.PresentationSource)
  langs:
  - csharp
  name: InputManager
  nameWithType: InputManager
  fullName: System.Windows.Input.InputManager
  type: Class
  summary: "管理中的所有輸入的系統[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]。"
  remarks: "Inputmanager 集結類別負責協調所有輸入中的系統[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]。       篩選條件是接聽<xref:System.Windows.Input.InputManager.PreProcessInput>或<xref:System.Windows.Input.InputManager.PostProcessInput>.</xref:System.Windows.Input.InputManager.PostProcessInput></xref:System.Windows.Input.InputManager.PreProcessInput>任何程式碼  篩選可以修改輸入的暫存區域。       監視器就會接聽<xref:System.Windows.Input.InputManager.PreNotifyInput>或<xref:System.Windows.Input.InputManager.PostNotifyInput>.</xref:System.Windows.Input.InputManager.PostNotifyInput></xref:System.Windows.Input.InputManager.PreNotifyInput>任何程式碼  監視器無法修改輸入的暫存區域。       Inputmanager 集結控制輸入的暫存區域。  輸入的臨時區域處理輸入[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]事件。       在處理輸入[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]後續階段中︰ 1。  前置處理階段。  輸入的管理員引發<xref:System.Windows.Input.InputManager.PreProcessInput>事件。</xref:System.Windows.Input.InputManager.PreProcessInput>      2.  預先通知階段。  輸入的管理員引發<xref:System.Windows.Input.InputManager.PreNotifyInput>事件。</xref:System.Windows.Input.InputManager.PreNotifyInput>      3.  [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]輸入的事件所引發。      4.  通知後階段。  輸入的管理員引發<xref:System.Windows.Input.InputManager.PostNotifyInput>事件。</xref:System.Windows.Input.InputManager.PostNotifyInput>      5.  後置處理階段。  輸入的管理員引發<xref:System.Windows.Input.InputManager.PostProcessInput>事件。</xref:System.Windows.Input.InputManager.PostProcessInput>"
  syntax:
    content: 'public sealed class InputManager : System.Windows.Threading.DispatcherObject'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  implements: []
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Input.InputManager.Current
  id: Current
  parent: System.Windows.Input.InputManager
  langs:
  - csharp
  name: Current
  nameWithType: InputManager.Current
  fullName: System.Windows.Input.InputManager.Current
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得<xref href=&quot;System.Windows.Input.InputManager&quot;></xref>與目前執行緒相關聯。"
  remarks: "這個類別在網際網路區域中將無法使用。"
  syntax:
    content: public static System.Windows.Input.InputManager Current { get; }
    return:
      type: System.Windows.Input.InputManager
      description: "輸入的管理員。"
  overload: System.Windows.Input.InputManager.Current*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputManager.EnterMenuMode
  id: EnterMenuMode
  parent: System.Windows.Input.InputManager
  langs:
  - csharp
  name: EnterMenuMode
  nameWithType: InputManager.EnterMenuMode
  fullName: System.Windows.Input.InputManager.EnterMenuMode
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "發生於控制項進入功能表模式，藉由呼叫<xref:System.Windows.Input.InputManager.PushMenuMode*>方法。</xref:System.Windows.Input.InputManager.PushMenuMode*>"
  remarks: "元件會與這個事件來回應輸入輸入的管理員功能表模式的控制項註冊的委派。"
  syntax:
    content: public event EventHandler EnterMenuMode;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputManager.HitTestInvalidatedAsync
  id: HitTestInvalidatedAsync
  parent: System.Windows.Input.InputManager
  langs:
  - csharp
  name: HitTestInvalidatedAsync
  nameWithType: InputManager.HitTestInvalidatedAsync
  fullName: System.Windows.Input.InputManager.HitTestInvalidatedAsync
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "點擊測試的結果可能已變更時發生。"
  syntax:
    content: public event EventHandler HitTestInvalidatedAsync;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputManager.InputProviders
  id: InputProviders
  parent: System.Windows.Input.InputManager
  langs:
  - csharp
  name: InputProviders
  nameWithType: InputManager.InputProviders
  fullName: System.Windows.Input.InputManager.InputProviders
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得集合的 InputProviders 向<xref href=&quot;System.Windows.Input.InputManager&quot;> </xref>。"
  syntax:
    content: public System.Collections.ICollection InputProviders { get; }
    return:
      type: System.Collections.ICollection
      description: "提供的輸入集合。"
  overload: System.Windows.Input.InputManager.InputProviders*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputManager.IsInMenuMode
  id: IsInMenuMode
  parent: System.Windows.Input.InputManager
  langs:
  - csharp
  name: IsInMenuMode
  nameWithType: InputManager.IsInMenuMode
  fullName: System.Windows.Input.InputManager.IsInMenuMode
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得值，指出是否此<xref href=&quot;System.Windows.Interop.ComponentDispatcher&quot;></xref>處於功能表模式。"
  remarks: "IsInMenuMode 屬性會傳回`true`若任何功能表未開啟，而它會傳回`false`如果有任何功能表開啟。"
  syntax:
    content: public bool IsInMenuMode { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個<xref href=&quot;System.Windows.Interop.ComponentDispatcher&quot;></xref>處於功能表模式; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.InputManager.IsInMenuMode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputManager.LeaveMenuMode
  id: LeaveMenuMode
  parent: System.Windows.Input.InputManager
  langs:
  - csharp
  name: LeaveMenuMode
  nameWithType: InputManager.LeaveMenuMode
  fullName: System.Windows.Input.InputManager.LeaveMenuMode
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "當控制離開功能表模式，藉由呼叫時，就會發生<xref:System.Windows.Input.InputManager.PopMenuMode*>方法。</xref:System.Windows.Input.InputManager.PopMenuMode*>"
  remarks: "元件會與此事件以回應離開輸入的管理員功能表模式的控制項註冊的委派。"
  syntax:
    content: public event EventHandler LeaveMenuMode;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputManager.MostRecentInputDevice
  id: MostRecentInputDevice
  parent: System.Windows.Input.InputManager
  langs:
  - csharp
  name: MostRecentInputDevice
  nameWithType: InputManager.MostRecentInputDevice
  fullName: System.Windows.Input.InputManager.MostRecentInputDevice
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得值，表示最新的輸入事件相關聯的輸入的裝置。"
  syntax:
    content: public System.Windows.Input.InputDevice MostRecentInputDevice { get; }
    return:
      type: System.Windows.Input.InputDevice
      description: "輸入的裝置。"
  overload: System.Windows.Input.InputManager.MostRecentInputDevice*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputManager.PopMenuMode(System.Windows.PresentationSource)
  id: PopMenuMode(System.Windows.PresentationSource)
  parent: System.Windows.Input.InputManager
  langs:
  - csharp
  name: PopMenuMode(PresentationSource)
  nameWithType: InputManager.PopMenuMode(PresentationSource)
  fullName: System.Windows.Input.InputManager.PopMenuMode(PresentationSource)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "呼叫離開功能表模式的元件。"
  remarks: "元件會呼叫這個方法，以保留輸入的管理員功能表模式。 `menuSite`釋出的特殊的存取權的視窗訊息。       呼叫這個方法會導致內部開啟功能表，以遞減的計數，並設定<xref:System.Windows.Input.InputManager.IsInMenuMode%2A>屬性`false`，如果這是要關閉的最後一個功能表。</xref:System.Windows.Input.InputManager.IsInMenuMode%2A>"
  syntax:
    content: public void PopMenuMode (System.Windows.PresentationSource menuSite);
    parameters:
    - id: menuSite
      type: System.Windows.PresentationSource
      description: "要保留的功能表。"
  overload: System.Windows.Input.InputManager.PopMenuMode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>menuSite</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.InputManager.PostNotifyInput
  id: PostNotifyInput
  parent: System.Windows.Input.InputManager
  langs:
  - csharp
  name: PostNotifyInput
  nameWithType: InputManager.PostNotifyInput
  fullName: System.Windows.Input.InputManager.PostNotifyInput
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "之後，就會發生<xref href=&quot;System.Windows.Input.InputManager.PreNotifyInput&quot;></xref>處理常式已完成處理的輸入和對應[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]已經引發事件。"
  remarks: "監視器就會接聽任何程式碼<xref:System.Windows.Input.InputManager.PreNotifyInput>或 PostNotifyInput。</xref:System.Windows.Input.InputManager.PreNotifyInput>  監視器無法修改輸入的暫存區域。       附加至 PostNotifyInput 的處理常式會使使用者所加入的處理常式叫用處理常式之前在系統中以相反順序叫用。       在處理輸入[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]後續階段中︰ 1。  前置處理階段。  輸入的管理員引發<xref:System.Windows.Input.InputManager.PreProcessInput>事件。</xref:System.Windows.Input.InputManager.PreProcessInput>      2.  預先通知階段。  輸入的管理員引發<xref:System.Windows.Input.InputManager.PreNotifyInput>事件。</xref:System.Windows.Input.InputManager.PreNotifyInput>      3.  [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]輸入的事件所引發。      4.  通知後階段。  輸入的管理員引發 PostNotifyInput 事件。      5.  後置處理階段。  輸入的管理員引發<xref:System.Windows.Input.InputManager.PostProcessInput>事件。</xref:System.Windows.Input.InputManager.PostProcessInput>"
  syntax:
    content: public event System.Windows.Input.NotifyInputEventHandler PostNotifyInput;
    return:
      type: System.Windows.Input.NotifyInputEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputManager.PostProcessInput
  id: PostProcessInput
  parent: System.Windows.Input.InputManager
  langs:
  - csharp
  name: PostProcessInput
  nameWithType: InputManager.PostProcessInput
  fullName: System.Windows.Input.InputManager.PostProcessInput
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "之後，就會發生<xref href=&quot;System.Windows.Input.InputManager.PreNotifyInput&quot;></xref>處理常式已完成處理輸入。"
  remarks: "篩選條件是接聽的任何程式碼<xref:System.Windows.Input.InputManager.PreProcessInput>或 PostProcessInput。</xref:System.Windows.Input.InputManager.PreProcessInput>  篩選可以修改輸入的暫存區域。       附加至 PostProcessInput 的處理常式會使使用者所加入的處理常式叫用處理常式之前在系統中以相反順序叫用。       在處理輸入[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]後續階段中︰ 1。  前置處理階段。  輸入的管理員引發<xref:System.Windows.Input.InputManager.PreProcessInput>事件。</xref:System.Windows.Input.InputManager.PreProcessInput>      2.  預先通知階段。  輸入的管理員引發<xref:System.Windows.Input.InputManager.PreNotifyInput>事件。</xref:System.Windows.Input.InputManager.PreNotifyInput>      3.  [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]輸入的事件所引發。      4.  通知後階段。  輸入的管理員引發<xref:System.Windows.Input.InputManager.PostNotifyInput>事件。</xref:System.Windows.Input.InputManager.PostNotifyInput>      5.  後置處理階段。  輸入的管理員引發 PostProcessInput 事件。"
  syntax:
    content: public event System.Windows.Input.ProcessInputEventHandler PostProcessInput;
    return:
      type: System.Windows.Input.ProcessInputEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputManager.PreNotifyInput
  id: PreNotifyInput
  parent: System.Windows.Input.InputManager
  langs:
  - csharp
  name: PreNotifyInput
  nameWithType: InputManager.PreNotifyInput
  fullName: System.Windows.Input.InputManager.PreNotifyInput
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "發生時<xref href=&quot;System.Windows.Input.InputManager.PreProcessInput&quot;></xref>處理常式完成處理輸入、 輸入不取消。"
  remarks: "監視器就會接聽 PreNotifyInput 或<xref:System.Windows.Input.InputManager.PostNotifyInput>.</xref:System.Windows.Input.InputManager.PostNotifyInput>任何程式碼  監視器無法修改輸入的暫存區域。       附加至 PreNotifyInput 的處理常式會使使用者所加入的處理常式叫用處理常式之前在系統中以相反順序叫用。       在處理輸入[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]後續階段中︰ 1。  前置處理階段。  輸入的管理員引發<xref:System.Windows.Input.InputManager.PreProcessInput>事件。</xref:System.Windows.Input.InputManager.PreProcessInput>      2.  預先通知階段。  輸入的管理員引發 PreNotifyInput 事件。      3.  [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]輸入的事件所引發。      4.  通知後階段。  輸入的管理員引發<xref:System.Windows.Input.InputManager.PostNotifyInput>事件。</xref:System.Windows.Input.InputManager.PostNotifyInput>      5.  後置處理階段。  輸入的管理員引發<xref:System.Windows.Input.InputManager.PostProcessInput>事件。</xref:System.Windows.Input.InputManager.PostProcessInput>"
  syntax:
    content: public event System.Windows.Input.NotifyInputEventHandler PreNotifyInput;
    return:
      type: System.Windows.Input.NotifyInputEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputManager.PreProcessInput
  id: PreProcessInput
  parent: System.Windows.Input.InputManager
  langs:
  - csharp
  name: PreProcessInput
  nameWithType: InputManager.PreProcessInput
  fullName: System.Windows.Input.InputManager.PreProcessInput
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "發生時<xref href=&quot;System.Windows.Input.InputManager&quot;></xref>開始處理輸入的項目。"
  remarks: "篩選條件是 PreProcessInput 或<xref:System.Windows.Input.InputManager.PostProcessInput>.</xref:System.Windows.Input.InputManager.PostProcessInput>接聽的任何程式碼  篩選可以修改輸入的暫存區域。       附加至 PreProcessInput 的處理常式會使使用者所加入的處理常式叫用處理常式之前在系統中以相反順序叫用。       呼叫<xref:System.Windows.Input.PreProcessInputEventArgs.Cancel%2A>上<xref:System.Windows.Input.PreProcessInputEventArgs>傳遞至<xref:System.Windows.Input.PreProcessInputEventHandler>將會取消處理輸入。</xref:System.Windows.Input.PreProcessInputEventHandler> </xref:System.Windows.Input.PreProcessInputEventArgs> </xref:System.Windows.Input.PreProcessInputEventArgs.Cancel%2A>       在處理輸入[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]後續階段中︰ 1。  前置處理階段。  輸入的管理員引發 PreProcessInput 事件。      2.  預先通知階段。  輸入的管理員引發<xref:System.Windows.Input.InputManager.PreNotifyInput>事件。</xref:System.Windows.Input.InputManager.PreNotifyInput>      3.  [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]輸入的事件所引發。      4.  通知後階段。  輸入的管理員引發<xref:System.Windows.Input.InputManager.PostNotifyInput>事件。</xref:System.Windows.Input.InputManager.PostNotifyInput>      5.  後置處理階段。  輸入的管理員引發<xref:System.Windows.Input.InputManager.PostProcessInput>事件。</xref:System.Windows.Input.InputManager.PostProcessInput>"
  syntax:
    content: public event System.Windows.Input.PreProcessInputEventHandler PreProcessInput;
    return:
      type: System.Windows.Input.PreProcessInputEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputManager.PrimaryKeyboardDevice
  id: PrimaryKeyboardDevice
  parent: System.Windows.Input.InputManager
  langs:
  - csharp
  name: PrimaryKeyboardDevice
  nameWithType: InputManager.PrimaryKeyboardDevice
  fullName: System.Windows.Input.InputManager.PrimaryKeyboardDevice
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得主要鍵盤裝置。"
  syntax:
    content: public System.Windows.Input.KeyboardDevice PrimaryKeyboardDevice { get; }
    return:
      type: System.Windows.Input.KeyboardDevice
      description: "鍵盤的裝置。"
  overload: System.Windows.Input.InputManager.PrimaryKeyboardDevice*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputManager.PrimaryMouseDevice
  id: PrimaryMouseDevice
  parent: System.Windows.Input.InputManager
  langs:
  - csharp
  name: PrimaryMouseDevice
  nameWithType: InputManager.PrimaryMouseDevice
  fullName: System.Windows.Input.InputManager.PrimaryMouseDevice
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得主要滑鼠裝置。"
  syntax:
    content: public System.Windows.Input.MouseDevice PrimaryMouseDevice { get; }
    return:
      type: System.Windows.Input.MouseDevice
      description: "滑鼠裝置。"
  overload: System.Windows.Input.InputManager.PrimaryMouseDevice*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputManager.ProcessInput(System.Windows.Input.InputEventArgs)
  id: ProcessInput(System.Windows.Input.InputEventArgs)
  parent: System.Windows.Input.InputManager
  langs:
  - csharp
  name: ProcessInput(InputEventArgs)
  nameWithType: InputManager.ProcessInput(InputEventArgs)
  fullName: System.Windows.Input.InputManager.ProcessInput(InputEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "同步處理指定的輸入。"
  remarks: "篩選條件是接聽<xref:System.Windows.Input.InputManager.PreProcessInput>或<xref:System.Windows.Input.InputManager.PostProcessInput>.</xref:System.Windows.Input.InputManager.PostProcessInput></xref:System.Windows.Input.InputManager.PreProcessInput>任何程式碼  篩選可以修改輸入的暫存區域。       監視器就會接聽<xref:System.Windows.Input.InputManager.PreNotifyInput>或<xref:System.Windows.Input.InputManager.PostNotifyInput>.</xref:System.Windows.Input.InputManager.PostNotifyInput></xref:System.Windows.Input.InputManager.PreNotifyInput>任何程式碼  監視器無法修改輸入的暫存區域。       指定的輸入處理的所有篩選器和監視，最後會分派至適當的項目，做為輸入的事件。       在處理輸入[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]後續階段中︰ 1。  前置處理階段。  輸入的管理員引發<xref:System.Windows.Input.InputManager.PreProcessInput>事件。</xref:System.Windows.Input.InputManager.PreProcessInput>      2.  預先通知階段。  輸入的管理員引發<xref:System.Windows.Input.InputManager.PreNotifyInput>事件。</xref:System.Windows.Input.InputManager.PreNotifyInput>      3.  [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]輸入的事件所引發。      4.  通知後階段。  輸入的管理員引發<xref:System.Windows.Input.InputManager.PostNotifyInput>事件。</xref:System.Windows.Input.InputManager.PostNotifyInput>      5.  後置處理階段。  輸入的管理員引發<xref:System.Windows.Input.InputManager.PostProcessInput>事件。</xref:System.Windows.Input.InputManager.PostProcessInput>"
  syntax:
    content: public bool ProcessInput (System.Windows.Input.InputEventArgs input);
    parameters:
    - id: input
      type: System.Windows.Input.InputEventArgs
      description: "要處理的輸入。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已處理所有輸入的事件。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.InputManager.ProcessInput*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>input</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.InputManager.PushMenuMode(System.Windows.PresentationSource)
  id: PushMenuMode(System.Windows.PresentationSource)
  parent: System.Windows.Input.InputManager
  langs:
  - csharp
  name: PushMenuMode(PresentationSource)
  nameWithType: InputManager.PushMenuMode(PresentationSource)
  fullName: System.Windows.Input.InputManager.PushMenuMode(PresentationSource)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "呼叫進入功能表模式的元件。"
  remarks: "元件會呼叫此方法來進入輸入的管理員功能表模式。 `menuSite`取得權限的存取權的視窗訊息。 呼叫這個方法會導致遞增的開啟功能表內部計數並設定<xref:System.Windows.Input.InputManager.IsInMenuMode%2A>屬性`true`，如果這是要開啟的第一個功能表。</xref:System.Windows.Input.InputManager.IsInMenuMode%2A>"
  syntax:
    content: public void PushMenuMode (System.Windows.PresentationSource menuSite);
    parameters:
    - id: menuSite
      type: System.Windows.PresentationSource
      description: "輸入功能表。"
  overload: System.Windows.Input.InputManager.PushMenuMode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>menuSite</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: System.Windows.Threading.DispatcherObject
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.InputManager.Current
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: Current
  nameWithType: InputManager.Current
  fullName: System.Windows.Input.InputManager.Current
- uid: System.Windows.Input.InputManager
  parent: System.Windows.Input
  isExternal: false
  name: InputManager
  nameWithType: InputManager
  fullName: System.Windows.Input.InputManager
- uid: System.Windows.Input.InputManager.EnterMenuMode
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: EnterMenuMode
  nameWithType: InputManager.EnterMenuMode
  fullName: System.Windows.Input.InputManager.EnterMenuMode
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Input.InputManager.HitTestInvalidatedAsync
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: HitTestInvalidatedAsync
  nameWithType: InputManager.HitTestInvalidatedAsync
  fullName: System.Windows.Input.InputManager.HitTestInvalidatedAsync
- uid: System.Windows.Input.InputManager.InputProviders
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: InputProviders
  nameWithType: InputManager.InputProviders
  fullName: System.Windows.Input.InputManager.InputProviders
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Windows.Input.InputManager.IsInMenuMode
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: IsInMenuMode
  nameWithType: InputManager.IsInMenuMode
  fullName: System.Windows.Input.InputManager.IsInMenuMode
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Input.InputManager.LeaveMenuMode
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: LeaveMenuMode
  nameWithType: InputManager.LeaveMenuMode
  fullName: System.Windows.Input.InputManager.LeaveMenuMode
- uid: System.Windows.Input.InputManager.MostRecentInputDevice
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: MostRecentInputDevice
  nameWithType: InputManager.MostRecentInputDevice
  fullName: System.Windows.Input.InputManager.MostRecentInputDevice
- uid: System.Windows.Input.InputDevice
  parent: System.Windows.Input
  isExternal: false
  name: InputDevice
  nameWithType: InputDevice
  fullName: System.Windows.Input.InputDevice
- uid: System.Windows.Input.InputManager.PopMenuMode(System.Windows.PresentationSource)
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: PopMenuMode(PresentationSource)
  nameWithType: InputManager.PopMenuMode(PresentationSource)
  fullName: System.Windows.Input.InputManager.PopMenuMode(PresentationSource)
- uid: System.Windows.PresentationSource
  parent: System.Windows
  isExternal: false
  name: PresentationSource
  nameWithType: PresentationSource
  fullName: System.Windows.PresentationSource
- uid: System.Windows.Input.InputManager.PostNotifyInput
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: PostNotifyInput
  nameWithType: InputManager.PostNotifyInput
  fullName: System.Windows.Input.InputManager.PostNotifyInput
- uid: System.Windows.Input.NotifyInputEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: NotifyInputEventHandler
  nameWithType: NotifyInputEventHandler
  fullName: System.Windows.Input.NotifyInputEventHandler
- uid: System.Windows.Input.InputManager.PostProcessInput
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: PostProcessInput
  nameWithType: InputManager.PostProcessInput
  fullName: System.Windows.Input.InputManager.PostProcessInput
- uid: System.Windows.Input.ProcessInputEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: ProcessInputEventHandler
  nameWithType: ProcessInputEventHandler
  fullName: System.Windows.Input.ProcessInputEventHandler
- uid: System.Windows.Input.InputManager.PreNotifyInput
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: PreNotifyInput
  nameWithType: InputManager.PreNotifyInput
  fullName: System.Windows.Input.InputManager.PreNotifyInput
- uid: System.Windows.Input.InputManager.PreProcessInput
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: PreProcessInput
  nameWithType: InputManager.PreProcessInput
  fullName: System.Windows.Input.InputManager.PreProcessInput
- uid: System.Windows.Input.PreProcessInputEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: PreProcessInputEventHandler
  nameWithType: PreProcessInputEventHandler
  fullName: System.Windows.Input.PreProcessInputEventHandler
- uid: System.Windows.Input.InputManager.PrimaryKeyboardDevice
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: PrimaryKeyboardDevice
  nameWithType: InputManager.PrimaryKeyboardDevice
  fullName: System.Windows.Input.InputManager.PrimaryKeyboardDevice
- uid: System.Windows.Input.KeyboardDevice
  parent: System.Windows.Input
  isExternal: false
  name: KeyboardDevice
  nameWithType: KeyboardDevice
  fullName: System.Windows.Input.KeyboardDevice
- uid: System.Windows.Input.InputManager.PrimaryMouseDevice
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: PrimaryMouseDevice
  nameWithType: InputManager.PrimaryMouseDevice
  fullName: System.Windows.Input.InputManager.PrimaryMouseDevice
- uid: System.Windows.Input.MouseDevice
  parent: System.Windows.Input
  isExternal: false
  name: MouseDevice
  nameWithType: MouseDevice
  fullName: System.Windows.Input.MouseDevice
- uid: System.Windows.Input.InputManager.ProcessInput(System.Windows.Input.InputEventArgs)
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: ProcessInput(InputEventArgs)
  nameWithType: InputManager.ProcessInput(InputEventArgs)
  fullName: System.Windows.Input.InputManager.ProcessInput(InputEventArgs)
- uid: System.Windows.Input.InputEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: InputEventArgs
  nameWithType: InputEventArgs
  fullName: System.Windows.Input.InputEventArgs
- uid: System.Windows.Input.InputManager.PushMenuMode(System.Windows.PresentationSource)
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: PushMenuMode(PresentationSource)
  nameWithType: InputManager.PushMenuMode(PresentationSource)
  fullName: System.Windows.Input.InputManager.PushMenuMode(PresentationSource)
- uid: System.Windows.Input.InputManager.Current*
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: Current
  nameWithType: InputManager.Current
- uid: System.Windows.Input.InputManager.InputProviders*
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: InputProviders
  nameWithType: InputManager.InputProviders
- uid: System.Windows.Input.InputManager.IsInMenuMode*
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: IsInMenuMode
  nameWithType: InputManager.IsInMenuMode
- uid: System.Windows.Input.InputManager.MostRecentInputDevice*
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: MostRecentInputDevice
  nameWithType: InputManager.MostRecentInputDevice
- uid: System.Windows.Input.InputManager.PopMenuMode*
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: PopMenuMode
  nameWithType: InputManager.PopMenuMode
- uid: System.Windows.Input.InputManager.PrimaryKeyboardDevice*
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: PrimaryKeyboardDevice
  nameWithType: InputManager.PrimaryKeyboardDevice
- uid: System.Windows.Input.InputManager.PrimaryMouseDevice*
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: PrimaryMouseDevice
  nameWithType: InputManager.PrimaryMouseDevice
- uid: System.Windows.Input.InputManager.ProcessInput*
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: ProcessInput
  nameWithType: InputManager.ProcessInput
- uid: System.Windows.Input.InputManager.PushMenuMode*
  parent: System.Windows.Input.InputManager
  isExternal: false
  name: PushMenuMode
  nameWithType: InputManager.PushMenuMode
