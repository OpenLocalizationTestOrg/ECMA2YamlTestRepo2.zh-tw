### YamlMime:ManagedReference
items:
- uid: System.Net.HttpListenerContext
  id: HttpListenerContext
  children:
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  - System.Net.HttpListenerContext.Request
  - System.Net.HttpListenerContext.Response
  - System.Net.HttpListenerContext.User
  langs:
  - csharp
  name: HttpListenerContext
  nameWithType: HttpListenerContext
  fullName: System.Net.HttpListenerContext
  type: Class
  summary: "提供所使用的要求和回應物件的存取<xref href=&quot;System.Net.HttpListener&quot;></xref>類別。 這個類別無法被繼承。"
  remarks: "這個類別會提供用戶端的超文字傳輸通訊協定 (HTTP) 的要求正在處理的相關資訊<xref:System.Net.HttpListener>物件。</xref:System.Net.HttpListener> 這個類別也有方法可讓<xref:System.Net.HttpListener>接受 WebSocket 連線物件。</xref:System.Net.HttpListener>       <xref:System.Net.HttpListener.GetContext%2A>方法會傳回 HttpListenerContext 類別的執行個體</xref:System.Net.HttpListener.GetContext%2A> 若要取得的物件，代表用戶端要求，請使用<xref:System.Net.HttpListenerContext.Request%2A>屬性。</xref:System.Net.HttpListenerContext.Request%2A> 若要取得物件，表示將傳送到用戶端的回應<xref:System.Net.HttpListener>，使用<xref:System.Net.HttpListenerContext.Response%2A>屬性。</xref:System.Net.HttpListenerContext.Response%2A> </xref:System.Net.HttpListener> 若要取得用戶端傳送要求，例如其登入名稱與是否它有已通過驗證的使用者資訊，您可以查詢中的屬性<xref:System.Security.Principal.IPrincipal>所傳回物件<xref:System.Net.HttpListenerContext.User%2A>屬性。</xref:System.Net.HttpListenerContext.User%2A> </xref:System.Security.Principal.IPrincipal>       關閉 HttpListenerContext 物件傳送回應至用戶端，並釋放任何 HttpListenerContext 所使用的資源。 正在中止 HttpListenerContext 物件，如果它已經尚未傳送，並釋出 HttpListenerContext 所使用的任何資源，就會捨棄用戶端的回應。 關閉或中止 HttpListenerContext 物件之後，您無法參考其方法或屬性。 如果您這樣做，您會收到<xref:System.ObjectDisposedException>例外狀況。</xref:System.ObjectDisposedException>"
  example:
  - "The following code example displays the user information for a client request.  \n  \n [!code-cs[Net_Listener_Basic#8](~/add/codesnippet/csharp/t-system.net.httplistene_0_1.cs)]"
  syntax:
    content: public sealed class HttpListenerContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  id: AcceptWebSocketAsync(System.String)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "接受以非同步作業的 WebSocket 連線。"
  remarks: "這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>已接受 WebSocket 連線之後，物件會完成。</xref:System.Threading.Tasks.Task%601>       接收緩衝區的大小為 16,385 位元組。 WebSocket 保持連接間隔設定為 30000 （30 秒） 的預設值。"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol);
    parameters:
    - id: subProtocol
      type: System.String
      description: "支援的 WebSocket 子通訊協定。"
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "傳回&lt;xref:System.Threading.Tasks.Task%601&gt;。       工作物件，表示非同步作業。 &lt;Xref:System.Threading.Tasks.Task%601.Result%2A&gt;工作物件上的屬性會傳回<xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;></xref>物件。"
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>為空字串-或-<code>subProtocol</code>包含不合法的字元。"
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "傳送完成的 WebSocket 信號交換的回應時，就會發生錯誤。"
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  id: AcceptWebSocketAsync(System.String,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "接受指定支援的 WebSocket 子通訊協定和 WebSocket 保持連接間隔，以非同步作業的 WebSocket 連線。"
  remarks: "這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>已接受 WebSocket 連線之後，物件會完成。</xref:System.Threading.Tasks.Task%601>       接收緩衝區的大小為 16,385 位元組。"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, TimeSpan keepAliveInterval);
    parameters:
    - id: subProtocol
      type: System.String
      description: "支援的 WebSocket 子通訊協定。"
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "WebSocket 通訊協定保持連接間隔 （毫秒）。"
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "傳回&lt;xref:System.Threading.Tasks.Task%601&gt;。       工作物件，表示非同步作業。 &lt;Xref:System.Threading.Tasks.Task%601.Result%2A&gt;工作物件上的屬性會傳回<xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;></xref>物件。"
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>為空字串-或-<code>subProtocol</code>包含不合法的字元。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>為太小。"
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "傳送完成的 WebSocket 信號交換的回應時，就會發生錯誤。"
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  id: AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,Int32,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "接受指定支援的 WebSocket 子通訊協定的 WebSocket 連線時，收到的緩衝區大小，並以非同步作業的 WebSocket 保持連接間隔。"
  remarks: "這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>> 已接受 WebSocket 連線之後，物件會完成。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval);
    parameters:
    - id: subProtocol
      type: System.String
      description: "支援的 WebSocket 子通訊協定。"
    - id: receiveBufferSize
      type: System.Int32
      description: "接收緩衝區的大小 （位元組）。"
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "WebSocket 通訊協定保持連接間隔 （毫秒）。"
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "傳回&lt;xref:System.Threading.Tasks.Task%601&gt;。       工作物件，表示非同步作業。 &lt;Xref:System.Threading.Tasks.Task%601.Result%2A&gt;工作物件上的屬性會傳回<xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;></xref>物件。"
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>為空字串-或-<code>subProtocol</code>包含不合法的字元。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>為太小。       -<code>receiveBufferSize</code>小於 16 位元組-或-<code>receiveBufferSize</code>大於 64k 位元組。"
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "傳送完成的 WebSocket 信號交換的回應時，就會發生錯誤。"
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  id: AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "接受指定支援的 WebSocket 子通訊協定的 WebSocket 連線時，收到的緩衝區大小、 WebSocket 保持連接間隔，並以非同步作業的內部緩衝區。"
  remarks: "這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>已接受 WebSocket 連線之後，物件會完成。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval, ArraySegment<byte> internalBuffer);
    parameters:
    - id: subProtocol
      type: System.String
      description: "支援的 WebSocket 子通訊協定。"
    - id: receiveBufferSize
      type: System.Int32
      description: "接收緩衝區的大小 （位元組）。"
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "WebSocket 通訊協定保持連接間隔 （毫秒）。"
    - id: internalBuffer
      type: System.ArraySegment{System.Byte}
      description: "若要使用這項作業內部緩衝區。"
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "傳回&lt;xref:System.Threading.Tasks.Task%601&gt;。       工作物件，表示非同步作業。 &lt;Xref:System.Threading.Tasks.Task%601.Result%2A&gt;工作物件上的屬性會傳回<xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;></xref>物件。"
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>為空字串-或-<code>subProtocol</code>包含不合法的字元。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>為太小。       -<code>receiveBufferSize</code>小於 16 位元組-或-<code>receiveBufferSize</code>大於 64k 位元組。"
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "傳送完成的 WebSocket 信號交換的回應時，就會發生錯誤。"
  platform:
  - net462
- uid: System.Net.HttpListenerContext.Request
  id: Request
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: Request
  nameWithType: HttpListenerContext.Request
  fullName: System.Net.HttpListenerContext.Request
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得<xref href=&quot;System.Net.HttpListenerRequest&quot;></xref>表示資源的用戶端的要求。"
  remarks: "如果您關閉這<xref:System.Net.HttpListenerContext>，它會傳送回應至用戶端，關閉<xref:System.Net.HttpListenerResponse>包含回應，並關閉<xref:System.Net.HttpListenerRequest>這個屬性所傳回的物件。</xref:System.Net.HttpListenerRequest> </xref:System.Net.HttpListenerResponse> </xref:System.Net.HttpListenerContext>"
  example:
  - "The following code example demonstrates calling this method. The `listener` variable holds an <xref:System.Net.HttpListener> object.  \n  \n [!code-cs[Net_Listener_Basic#3](~/add/codesnippet/csharp/p-system.net.httplistene_16_1.cs)]"
  syntax:
    content: public System.Net.HttpListenerRequest Request { get; }
    return:
      type: System.Net.HttpListenerRequest
      description: "<xref href=&quot;System.Net.HttpListenerRequest&quot;> </xref>物件，代表用戶端要求。"
  overload: System.Net.HttpListenerContext.Request*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.Response
  id: Response
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: Response
  nameWithType: HttpListenerContext.Response
  fullName: System.Net.HttpListenerContext.Response
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得<xref href=&quot;System.Net.HttpListenerResponse&quot;></xref>將用戶端的要求回應中的用戶端傳送的物件。"
  remarks: "您的應用程式設定中設定屬性的回應<xref:System.Net.HttpListenerResponse>這個屬性所傳回的物件。</xref:System.Net.HttpListenerResponse> 設定回應之後, 您傳送給用戶端透過關閉回應，或是關閉這<xref:System.Net.HttpListenerContext>物件。</xref:System.Net.HttpListenerContext>"
  example:
  - "The following code example demonstrates getting the response to a client's request and adding the response body.  \n  \n [!code-cs[Net_Listener_Basic#3](~/add/codesnippet/csharp/p-system.net.httplistene_35_1.cs)]"
  syntax:
    content: public System.Net.HttpListenerResponse Response { get; }
    return:
      type: System.Net.HttpListenerResponse
      description: "<xref href=&quot;System.Net.HttpListenerResponse&quot;> </xref>物件用來傳送回用戶端的回應。"
  overload: System.Net.HttpListenerContext.Response*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.User
  id: User
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: User
  nameWithType: HttpListenerContext.User
  fullName: System.Net.HttpListenerContext.User
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得用來取得其要求由這個用戶端的身分識別、 驗證資訊，以及安全性角色的物件<xref href=&quot;System.Net.HttpListenerContext&quot;></xref>物件。"
  remarks: "<xref:System.Net.HttpListener>指出它需要驗證使用<xref:System.Net.HttpListener.AuthenticationSchemes%2A>屬性或藉由指定<xref:System.Net.AuthenticationSchemeSelector>委派使用<xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A>屬性。</xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> </xref:System.Net.AuthenticationSchemeSelector> </xref:System.Net.HttpListener.AuthenticationSchemes%2A> </xref:System.Net.HttpListener>       若要判斷用戶端的登入名稱和驗證資訊，請檢查<xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName>這個屬性所傳回的物件中的屬性。</xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName>"
  example:
  - "The following code example demonstrates accessing identity and authentication information about the client, and returning it to the client in the response.  \n  \n [!code-cs[Net_Listener_Basic#8](~/add/codesnippet/csharp/p-system.net.httplistene_19_1.cs)]"
  syntax:
    content: public System.Security.Principal.IPrincipal User { get; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "<xref:System.Security.Principal.IPrincipal>物件，描述用戶端，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Net.HttpListener&quot;></xref>這提供的<xref href=&quot;System.Net.HttpListenerContext&quot;></xref>不需要驗證。</xref:System.Security.Principal.IPrincipal>"
  overload: System.Net.HttpListenerContext.User*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Net.WebSockets.WebSocketException
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketException
  nameWithType: WebSocketException
  fullName: System.Net.WebSockets.WebSocketException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String)
- uid: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpListenerWebSocketContext>
  nameWithType: Task<HttpListenerWebSocketContext>
  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.WebSockets.HttpListenerWebSocketContext>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.HttpListenerWebSocketContext
    name: HttpListenerWebSocketContext
    nameWithType: HttpListenerWebSocketContext
    fullName: HttpListenerWebSocketContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,Int32,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
- uid: System.ArraySegment{System.Byte}
  parent: System
  isExternal: true
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.HttpListenerContext.Request
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Request
  nameWithType: HttpListenerContext.Request
  fullName: System.Net.HttpListenerContext.Request
- uid: System.Net.HttpListenerRequest
  parent: System.Net
  isExternal: false
  name: HttpListenerRequest
  nameWithType: HttpListenerRequest
  fullName: System.Net.HttpListenerRequest
- uid: System.Net.HttpListenerContext.Response
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Response
  nameWithType: HttpListenerContext.Response
  fullName: System.Net.HttpListenerContext.Response
- uid: System.Net.HttpListenerResponse
  parent: System.Net
  isExternal: false
  name: HttpListenerResponse
  nameWithType: HttpListenerResponse
  fullName: System.Net.HttpListenerResponse
- uid: System.Net.HttpListenerContext.User
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: User
  nameWithType: HttpListenerContext.User
  fullName: System.Net.HttpListenerContext.User
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync
  nameWithType: HttpListenerContext.AcceptWebSocketAsync
- uid: System.Net.HttpListenerContext.Request*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Request
  nameWithType: HttpListenerContext.Request
- uid: System.Net.HttpListenerContext.Response*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Response
  nameWithType: HttpListenerContext.Response
- uid: System.Net.HttpListenerContext.User*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: User
  nameWithType: HttpListenerContext.User
