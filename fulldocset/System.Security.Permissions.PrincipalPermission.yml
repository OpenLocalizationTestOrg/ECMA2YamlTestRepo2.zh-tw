### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.PrincipalPermission
  id: PrincipalPermission
  children:
  - System.Security.Permissions.PrincipalPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String)
  - System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String,System.Boolean)
  - System.Security.Permissions.PrincipalPermission.Copy
  - System.Security.Permissions.PrincipalPermission.Demand
  - System.Security.Permissions.PrincipalPermission.Equals(System.Object)
  - System.Security.Permissions.PrincipalPermission.FromXml(System.Security.SecurityElement)
  - System.Security.Permissions.PrincipalPermission.GetHashCode
  - System.Security.Permissions.PrincipalPermission.Intersect(System.Security.IPermission)
  - System.Security.Permissions.PrincipalPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.Permissions.PrincipalPermission.IsUnrestricted
  - System.Security.Permissions.PrincipalPermission.ToString
  - System.Security.Permissions.PrincipalPermission.ToXml
  - System.Security.Permissions.PrincipalPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: PrincipalPermission
  nameWithType: PrincipalPermission
  fullName: System.Security.Permissions.PrincipalPermission
  type: Class
  summary: "允許針對使用中的主體檢查 (請參閱<xref:System.Security.Principal.IPrincipal>) 使用這兩種宣告式和命令式安全性動作所定義的語言建構。</xref:System.Security.Principal.IPrincipal> 這個類別無法被繼承。"
  remarks: "藉由傳遞建構函式的識別資訊 （使用者名稱和角色），PrincipalPermission 可以用於要求的作用中的主體身分識別符合這項資訊。       要比對使用中<xref:System.Security.Principal.IPrincipal>以及相關聯<xref:System.Security.Principal.IIdentity>，必須符合指定的識別和角色。</xref:System.Security.Principal.IIdentity> </xref:System.Security.Principal.IPrincipal> 如果`null`識別字串，則將它解譯為要比對任何身分識別的要求。 使用`null`角色字串會符合任何角色。 也就是說，傳遞`null`參數`name`或`role`至 PrincipalPermission 會比對的身分識別和任何<xref:System.Security.Principal.IPrincipal>.</xref:System.Security.Principal.IPrincipal>中的角色 也可以建構只會決定 PrincipalPermission 是否<xref:System.Security.Principal.IIdentity>代表已驗證或未驗證的實體。</xref:System.Security.Principal.IIdentity> 在此情況下，`name`和`role`都會被忽略。       不像其他大部分的權限，PrincipalPermission 從不會擴充<xref:System.Security.CodeAccessPermission>.</xref:System.Security.CodeAccessPermission> 不過，它會實作<xref:System.Security.IPermission>介面。</xref:System.Security.IPermission> 這是因為 PrincipalPermission 不是程式碼存取權限;也就是說，並未具備根據執行的組件的識別。 相反地，它可讓程式碼來執行動作 (<xref:System.Security.Permissions.PrincipalPermission.Demand%2A>， <xref:System.Security.Permissions.PrincipalPermission.Union%2A>，<xref:System.Security.Permissions.PrincipalPermission.Intersect%2A>等等) 比對目前的使用者識別的方式有一致的方式執行這些動作的程式碼存取和程式碼識別權限。</xref:System.Security.Permissions.PrincipalPermission.Intersect%2A> </xref:System.Security.Permissions.PrincipalPermission.Union%2A> </xref:System.Security.Permissions.PrincipalPermission.Demand%2A>      > [!IMPORTANT] > 主體的權限的要求之前就必須將目前的應用程式定義域的主要原則設定列舉值<xref:System.Security.Principal.PrincipalPolicy>.</xref:System.Security.Principal.PrincipalPolicy> 根據預設，主要原則設定至<xref:System.Security.Principal.PrincipalPolicy>。</xref:System.Security.Principal.PrincipalPolicy> 如果您沒有設定主體的原則<xref:System.Security.Principal.PrincipalPolicy>，主體的權限的要求將會失敗。</xref:System.Security.Principal.PrincipalPolicy> 要求主體的使用權限之前，應該執行下列程式碼: >>`AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal).`"
  example:
  - "The following example requires the active principal to be an administrator. The `name` parameter is `null`, which enables any user who is an administrator to pass the demand.  \n  \n> [!NOTE]\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that requires you to be an administrator, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n [!code-cs[Classic PrincipalPermission Example#1](~/add/codesnippet/csharp/t-system.security.permis_19_1.cs)]\n [!code-vb[Classic PrincipalPermission Example#1](~/add/codesnippet/visualbasic/t-system.security.permis_19_1.vb)]\n [!code-cpp[Classic PrincipalPermission Example#1](~/add/codesnippet/cpp/t-system.security.permis_19_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class PrincipalPermission : System.Security.IPermission, System.Security.Permissions.IUnrestrictedPermission
  inheritance:
  - System.Object
  implements:
  - System.Security.IPermission
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: PrincipalPermission(PermissionState)
  nameWithType: PrincipalPermission.PrincipalPermission(PermissionState)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;></xref>類別具有指定<xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>。"
  remarks: "`None`符合未驗證的主體 (<xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A>為空字串 (&quot;&quot;)，而不<xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A>，<xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A>是`false`)。</xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A> </xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> </xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> `Unrestricted`比對所有主體 (<xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A>是`null`，<xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A>是`null`)。</xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> </xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A>      > [!NOTE] > 這個建構函式是為了與其他權限，設計的一致性，但不是有用的作法。"
  syntax:
    content: public PrincipalPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "其中一個<xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref>值。"
  overload: System.Security.Permissions.PrincipalPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> state </code>參數不是有效<xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: PrincipalPermission(String,String)
  nameWithType: PrincipalPermission.PrincipalPermission(String,String)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;></xref>類別指定<code> name </code>和<code> role </code>。"
  remarks: "這兩個`name`參數和`role`參數必須符合針對這個權限，使其符合使用中<xref:System.Security.Principal.IPrincipal>和相關聯<xref:System.Security.Principal.IIdentity>。</xref:System.Security.Principal.IIdentity> </xref:System.Security.Principal.IPrincipal> 設定`name`至`null`來檢查是否有任何使用者角色中。"
  example:
  - "The following example requires the active principal to be an administrator. The `name` parameter is `null`, which enables any user who is an administrator to pass the demand.  \n  \n **Note** In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that requires you to be an administrator, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n [!code-cs[Classic PrincipalPermission Example#1](~/add/codesnippet/csharp/b42fc3af-7a7c-4eef-9f54-_1.cs)]\n [!code-vb[Classic PrincipalPermission Example#1](~/add/codesnippet/visualbasic/b42fc3af-7a7c-4eef-9f54-_1.vb)]\n [!code-cpp[Classic PrincipalPermission Example#1](~/add/codesnippet/cpp/b42fc3af-7a7c-4eef-9f54-_1.cpp)]"
  syntax:
    content: public PrincipalPermission (string name, string role);
    parameters:
    - id: name
      type: System.String
      description: "名稱<xref:System.Security.Principal.IPrincipal>物件的使用者。</xref:System.Security.Principal.IPrincipal>"
    - id: role
      type: System.String
      description: "角色<xref:System.Security.Principal.IPrincipal>物件的使用者 （例如，系統管理員）。</xref:System.Security.Principal.IPrincipal>"
  overload: System.Security.Permissions.PrincipalPermission.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String,System.Boolean)
  id: '#ctor(System.String,System.String,System.Boolean)'
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: PrincipalPermission(String,String,Boolean)
  nameWithType: PrincipalPermission.PrincipalPermission(String,String,Boolean)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(String,String,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;></xref>類別指定<code> name </code>， <code> role </code>，以及驗證狀態。"
  remarks: "這兩個`name`參數和`role`參數必須符合針對這個權限，使其符合使用中<xref:System.Security.Principal.IPrincipal>和相關聯<xref:System.Security.Principal.IIdentity>。</xref:System.Security.Principal.IIdentity> </xref:System.Security.Principal.IPrincipal>"
  syntax:
    content: public PrincipalPermission (string name, string role, bool isAuthenticated);
    parameters:
    - id: name
      type: System.String
      description: "名稱<xref:System.Security.Principal.IPrincipal>物件的使用者。</xref:System.Security.Principal.IPrincipal>"
    - id: role
      type: System.String
      description: "角色<xref:System.Security.Principal.IPrincipal>物件的使用者 （例如，系統管理員）。</xref:System.Security.Principal.IPrincipal>"
    - id: isAuthenticated
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>表示，驗證使用者;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Permissions.PrincipalPermission.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.Copy
  id: Copy
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: PrincipalPermission.Copy()
  fullName: System.Security.Permissions.PrincipalPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "建立並傳回目前權限的相同複本。"
  remarks: "權限的複本與原始的權限，表示相同的主體和身分識別。"
  syntax:
    content: public System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "一份目前的權限。"
  overload: System.Security.Permissions.PrincipalPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.Demand
  id: Demand
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: Demand()
  nameWithType: PrincipalPermission.Demand()
  fullName: System.Security.Permissions.PrincipalPermission.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "決定在執行階段目前的主體符合目前的權限所指定的主體。"
  remarks: "如果沒有<xref:System.Security.SecurityException>是引發，要求執行成功。</xref:System.Security.SecurityException>       這個方法會根據附加至呼叫端執行緒的主體。      > [!IMPORTANT] > 之前呼叫指定方法，是為了將目前的應用程式定義域的主要原則設定為列舉值<xref:System.Security.Principal.PrincipalPolicy>.</xref:System.Security.Principal.PrincipalPolicy> 根據預設主體的原則設定至<xref:System.Security.Principal.PrincipalPolicy>。</xref:System.Security.Principal.PrincipalPolicy> 如果您沒有設定主體的原則<xref:System.Security.Principal.PrincipalPolicy>，主體的權限的要求將會失敗。</xref:System.Security.Principal.PrincipalPolicy> 要求主體的使用權限之前，應該執行下列程式碼: >>`AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal).`"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.Permissions.PrincipalPermission.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "目前的主體未通過目前權限所指定之主體的安全性檢查。       -目前<xref:System.Security.Principal.IPrincipal>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Security.Principal.IPrincipal>"
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: PrincipalPermission.Equals(Object)
  fullName: System.Security.Permissions.PrincipalPermission.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "決定是否指定<xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;></xref>物件是否等於目前<xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref>。"
  remarks: "如需詳細資訊，請參閱<xref:System.Object.Equals%2A>.</xref:System.Object.Equals%2A>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "<xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref>物件要與目前比較<xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定<xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;></xref>是否等於目前<xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;></xref>物件; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Permissions.PrincipalPermission.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: PrincipalPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.PrincipalPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "重新建構具有指定狀態的 XML 編碼方式的權限。"
  syntax:
    content: public void FromXml (System.Security.SecurityElement elem);
    parameters:
    - id: elem
      type: System.Security.SecurityElement
      description: "XML 編碼用來重新建構權限。"
  overload: System.Security.Permissions.PrincipalPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>elem</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> elem </code>參數不是有效的權限項目。       -或- <code> elem </code>參數的版本號碼不正確。"
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.GetHashCode
  id: GetHashCode
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: PrincipalPermission.GetHashCode()
  fullName: System.Security.Permissions.PrincipalPermission.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "取得的雜湊碼<xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;></xref>物件，其適合用於雜湊演算法和資料結構，例如雜湊表。"
  remarks: "相同的權限的兩個執行個體的雜湊程式碼可能會不同，因此雜湊程式碼不應比較兩個<xref:System.Security.Permissions.PrincipalPermission>物件。</xref:System.Security.Permissions.PrincipalPermission>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "目前的雜湊碼<xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;></xref>物件。"
  overload: System.Security.Permissions.PrincipalPermission.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: PrincipalPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "建立並傳回目前權限和指定的權限交集的權限。"
  remarks: "兩個使用者永遠不會交集，因為這個方法不是適用於<xref:System.Security.Permissions.PrincipalPermission>.</xref:System.Security.Permissions.PrincipalPermission> 例如， [!code-cpp [System.Security.Permissions.PrincipalPermission#1](~/add/codesnippet/cpp/7be5e612-f4dc-44d9-9530-_1.cpp)][!code-cs[System.Security.Permissions.PrincipalPermission#1](~/add/codesnippet/csharp/7be5e612-f4dc-44d9-9530-_1.cs)][!code-vb[System.Security.Permissions.PrincipalPermission#1](~/add/codesnippet/visualbasic/7be5e612-f4dc-44d9-9530-_1.vb) ]相當於[!code-cpp [System.Security.Permissions.PrincipalPermission#2](~/add/codesnippet/cpp/7be5e612-f4dc-44d9-9530-_2.cpp)][!code-cs[System.Security.Permissions.PrincipalPermission#2](~/add/codesnippet/csharp/7be5e612-f4dc-44d9-9530-_2.cs)][!code-vb[System.Security.Permissions.PrincipalPermission#2](~/add/codesnippet/visualbasic/7be5e612-f4dc-44d9-9530-_2.vb) ]由於 Bob 和路易斯公主和，同時可不表示任何身分識別。         實際上，`pp1.Demand()`才會成功未經驗證的主體 (名稱等於空字串 (&quot;&quot;)) 可以做為系統管理員角色。"
  syntax:
    content: public System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "要與目前權限產生交集的權限。 它必須是類型的相同與目前權限。"
    return:
      type: System.Security.IPermission
      description: "代表目前權限與指定權限交集的新權限。 將這個新權限<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果交集是空的。"
  overload: System.Security.Permissions.PrincipalPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code>參數不是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>並不是與目前權限具有相同類別的執行個體。"
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: PrincipalPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "判斷目前權限是否為指定的權限的子集。"
  remarks: "如果順利完成目前的權限的所有要求所指定權限也會都成功，目前的權限會是所指定權限的子集。"
  example:
  - "The following example defines instances of <xref:System.Security.Permissions.PrincipalPermission> corresponding to three distinct users. Two additional instances are then created as groups of users. `pp1` represents Bob and Louise, `pp2` represents Bob, Louise, and Greg.  \n  \n [!code-cpp[Classic PrincipalPermission.IsSubsetOf Example#1](~/add/codesnippet/cpp/88c77b70-6ab7-4d6b-914d-_1.cpp)]\n [!code-vb[Classic PrincipalPermission.IsSubsetOf Example#1](~/add/codesnippet/visualbasic/88c77b70-6ab7-4d6b-914d-_1.vb)]\n [!code-cs[Classic PrincipalPermission.IsSubsetOf Example#1](~/add/codesnippet/csharp/88c77b70-6ab7-4d6b-914d-_1.cs)]  \n  \n With the preceding declarations, `pp1.IsSubsetOf(pp2)` returns `true`, and `pp2.IsSubsetOf(pp1)` returns `false`."
  syntax:
    content: public bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "要測試子集關聯性的權限。 此權限必須是類型的相同與目前權限。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果目前權限是指定的權限的子集否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Permissions.PrincipalPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code>參數是不是相同的類型與目前權限的物件。"
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: PrincipalPermission.IsUnrestricted()
  fullName: System.Security.Permissions.PrincipalPermission.IsUnrestricted()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "傳回值，指出目前的權限是否不受限制。"
  remarks: "不受限制<xref:System.Security.Permissions.PrincipalPermission>符合任何主體。</xref:System.Security.Permissions.PrincipalPermission>"
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果目前權限不受限制;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Permissions.PrincipalPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.ToString
  id: ToString
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: ToString()
  nameWithType: PrincipalPermission.ToString()
  fullName: System.Security.Permissions.PrincipalPermission.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "建立並傳回字串，代表目前權限。"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "表示目前的權限。"
  overload: System.Security.Permissions.PrincipalPermission.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.ToXml
  id: ToXml
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: PrincipalPermission.ToXml()
  fullName: System.Security.Permissions.PrincipalPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "建立權限和其目前狀態的 XML 編碼方式。"
  syntax:
    content: public System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "權限，包括任何狀態資訊的 XML 編碼方式。"
  overload: System.Security.Permissions.PrincipalPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: PrincipalPermission.Union(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "建立權限聯集的目前的權限與指定權限。"
  remarks: "聯集建立代表準則的一組給定的個別權限<xref:System.Security.Permissions.PrincipalPermission>物件。</xref:System.Security.Permissions.PrincipalPermission> 它可用於簡潔代表一組測試的條件。 例如，使用宣告[!code-cpp [System.Security.Permissions.PrincipalPermission#3](~/add/codesnippet/cpp/dd443af0-98ea-4e3c-9761-_1.cpp)][!code-cs[System.Security.Permissions.PrincipalPermission#3](~/add/codesnippet/csharp/dd443af0-98ea-4e3c-9761-_1.cs)][!code-vb[System.Security.Permissions.PrincipalPermission#3](~/add/codesnippet/visualbasic/dd443af0-98ea-4e3c-9761-_1.vb) ] `(ppBob.Union(ppLouise)).Demand()`如果目前的主體中的系統管理員角色中的系統管理員或路易斯公主和角色代表 Bob 將會成功。           "
  syntax:
    content: public System.Security.IPermission Union (System.Security.IPermission other);
    parameters:
    - id: other
      type: System.Security.IPermission
      description: "與目前權限結合的權限。 它必須是類型的相同與目前權限。"
    return:
      type: System.Security.IPermission
      description: "新的權限，表示目前的權限與指定權限的聯集。"
  overload: System.Security.Permissions.PrincipalPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> other </code>參數是不是相同的類型與目前權限的物件。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: PrincipalPermission(PermissionState)
  nameWithType: PrincipalPermission.PrincipalPermission(PermissionState)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: PrincipalPermission(String,String)
  nameWithType: PrincipalPermission.PrincipalPermission(String,String)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String,System.Boolean)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: PrincipalPermission(String,String,Boolean)
  nameWithType: PrincipalPermission.PrincipalPermission(String,String,Boolean)
  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(String,String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.PrincipalPermission.Copy
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Copy()
  nameWithType: PrincipalPermission.Copy()
  fullName: System.Security.Permissions.PrincipalPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.PrincipalPermission.Demand
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Demand()
  nameWithType: PrincipalPermission.Demand()
  fullName: System.Security.Permissions.PrincipalPermission.Demand()
- uid: System.Security.Permissions.PrincipalPermission.Equals(System.Object)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Equals(Object)
  nameWithType: PrincipalPermission.Equals(Object)
  fullName: System.Security.Permissions.PrincipalPermission.Equals(Object)
- uid: System.Security.Permissions.PrincipalPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: PrincipalPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.PrincipalPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Permissions.PrincipalPermission.GetHashCode
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: GetHashCode()
  nameWithType: PrincipalPermission.GetHashCode()
  fullName: System.Security.Permissions.PrincipalPermission.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Permissions.PrincipalPermission.Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: PrincipalPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.Intersect(IPermission)
- uid: System.Security.Permissions.PrincipalPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: PrincipalPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.IsSubsetOf(IPermission)
- uid: System.Security.Permissions.PrincipalPermission.IsUnrestricted
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: PrincipalPermission.IsUnrestricted()
  fullName: System.Security.Permissions.PrincipalPermission.IsUnrestricted()
- uid: System.Security.Permissions.PrincipalPermission.ToString
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: ToString()
  nameWithType: PrincipalPermission.ToString()
  fullName: System.Security.Permissions.PrincipalPermission.ToString()
- uid: System.Security.Permissions.PrincipalPermission.ToXml
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: ToXml()
  nameWithType: PrincipalPermission.ToXml()
  fullName: System.Security.Permissions.PrincipalPermission.ToXml()
- uid: System.Security.Permissions.PrincipalPermission.Union(System.Security.IPermission)
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: PrincipalPermission.Union(IPermission)
  fullName: System.Security.Permissions.PrincipalPermission.Union(IPermission)
- uid: System.Security.Permissions.PrincipalPermission.#ctor*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: PrincipalPermission
  nameWithType: PrincipalPermission.PrincipalPermission
- uid: System.Security.Permissions.PrincipalPermission.Copy*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Copy
  nameWithType: PrincipalPermission.Copy
- uid: System.Security.Permissions.PrincipalPermission.Demand*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Demand
  nameWithType: PrincipalPermission.Demand
- uid: System.Security.Permissions.PrincipalPermission.Equals*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Equals
  nameWithType: PrincipalPermission.Equals
- uid: System.Security.Permissions.PrincipalPermission.FromXml*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: FromXml
  nameWithType: PrincipalPermission.FromXml
- uid: System.Security.Permissions.PrincipalPermission.GetHashCode*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: GetHashCode
  nameWithType: PrincipalPermission.GetHashCode
- uid: System.Security.Permissions.PrincipalPermission.Intersect*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Intersect
  nameWithType: PrincipalPermission.Intersect
- uid: System.Security.Permissions.PrincipalPermission.IsSubsetOf*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: PrincipalPermission.IsSubsetOf
- uid: System.Security.Permissions.PrincipalPermission.IsUnrestricted*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: PrincipalPermission.IsUnrestricted
- uid: System.Security.Permissions.PrincipalPermission.ToString*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: ToString
  nameWithType: PrincipalPermission.ToString
- uid: System.Security.Permissions.PrincipalPermission.ToXml*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: ToXml
  nameWithType: PrincipalPermission.ToXml
- uid: System.Security.Permissions.PrincipalPermission.Union*
  parent: System.Security.Permissions.PrincipalPermission
  isExternal: false
  name: Union
  nameWithType: PrincipalPermission.Union
