### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.ApplicationServices.User
  id: User
  children:
  - Microsoft.VisualBasic.ApplicationServices.User.#ctor
  - Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal
  - Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser
  - Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal
  - Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated
  - Microsoft.VisualBasic.ApplicationServices.User.IsInRole(Microsoft.VisualBasic.ApplicationServices.BuiltInRole)
  - Microsoft.VisualBasic.ApplicationServices.User.IsInRole(System.String)
  - Microsoft.VisualBasic.ApplicationServices.User.Name
  langs:
  - csharp
  name: User
  nameWithType: User
  fullName: Microsoft.VisualBasic.ApplicationServices.User
  type: Class
  summary: "提供存取目前使用者的相關資訊。"
  remarks: "公開屬性和方法所`My.User`物件提供存取目前使用者的相關資訊。 「 目前使用者 」 的意義與 Windows 及 Web 應用程式之間稍有不同。 在 Windows 應用程式中，目前使用者是執行應用程式的使用者。 Web 應用程式中目前的使用者是存取應用程式的使用者。       `My.User`屬性也可存取<xref:System.Security.Principal.IPrincipal>目前的使用者。</xref:System.Security.Principal.IPrincipal> 主體的物件代表使用者的安全性內容，包括該使用者的識別以及使用者所屬的任何角色。       對於 Windows 應用程式，這個屬性會提供相同的功能<xref:System.Threading.Thread.CurrentPrincipal%2A>屬性。</xref:System.Threading.Thread.CurrentPrincipal%2A> Web 應用程式，這個屬性會提供相同的功能<xref:System.Web.HttpContext.User%2A>屬性所傳回的物件<xref:System.Web.HttpContext.Current%2A>屬性。</xref:System.Web.HttpContext.Current%2A> </xref:System.Web.HttpContext.User%2A>      > [!NOTE] > For Windows 應用程式上, 建置的專案**Windows 應用程式**範本初始化`My.User`預設物件。 在其他所有的 Windows 專案類型，您必須初始化`My.User`藉由呼叫物件<xref:Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser%2A>方法明確或指派值給<xref:System.Threading.Thread.CurrentPrincipal%2A>.</xref:System.Threading.Thread.CurrentPrincipal%2A> </xref:Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser%2A>      > [!NOTE] >`My.User`物件無法報告目前的 Windows 使用者，因為這些作業系統不支援登入之使用者的概念，當執行在 Windows 95 及 Windows 98 的相關資訊。 您必須實作自訂驗證，才能使用`My.User`這些作業系統上的物件。"
  example:
  - "This example checks if the application is using Windows or custom authentication, and uses that information to parse the `My.User.Name` property.  \n  \n [!code-vb[VbVbalrMyUser#3](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#3)]"
  syntax:
    content: public class User
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.#ctor
  id: '#ctor'
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: User()
  nameWithType: User.User()
  fullName: Microsoft.VisualBasic.ApplicationServices.User.User()
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "初始化的新執行個體<xref href=&quot;Microsoft.VisualBasic.ApplicationServices.User&quot;></xref>類別。"
  remarks: "公開屬性和方法所`My.User`物件提供存取目前使用者相關資訊。"
  syntax:
    content: public User ();
    parameters: []
  overload: Microsoft.VisualBasic.ApplicationServices.User.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal
  id: CurrentPrincipal
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: CurrentPrincipal
  nameWithType: User.CurrentPrincipal
  fullName: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "取得或設定目前的主體 （適用於角色型安全性）。"
  remarks: "您可以設定`My.User.CurrentPrincipal`要實作的物件屬性<xref:System.Security.Principal.IPrincipal>介面以啟用自訂驗證。</xref:System.Security.Principal.IPrincipal>       在大部分的專案類型，這個屬性會取得並設定執行緒的目前主體。 ASP.NET 應用程式中，這個屬性會取得及設定目前 HTTP 要求的使用者身分識別的安全性資訊。       這是進階的成員;它不會顯示在 IntelliSense 中除非您按一下**所有** 索引標籤。      ## 專案類型的可用性 | | |  |-|-|  |專案類型 |可用 |  |Windows 應用程式 |**Yes**|  |類別庫 |**Yes**|  |主控台應用程式 |**Yes**|  |Windows 控制項程式庫 |**Yes**|  |Web 控制項程式庫 |**Yes**|  |Windows 服務 |**Yes**|  |網站 |**Yes**|"
  example:
  - "This example checks if the application is using Windows or custom authentication, and uses that information to parse `My.User.Name` property.  \n  \n [!code-vb[VbVbalrMyUser#3](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#3)]"
  syntax:
    content: public System.Security.Principal.IPrincipal CurrentPrincipal { get; set; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "A<xref:System.Security.Principal.IPrincipal>值，代表安全性內容。</xref:System.Security.Principal.IPrincipal>"
  overload: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要使用權限設定主體。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser
  id: InitializeWithWindowsUser
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: InitializeWithWindowsUser()
  nameWithType: User.InitializeWithWindowsUser()
  fullName: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "將執行緒的目前主體設定為啟動應用程式的 Windows 使用者。"
  remarks: "您可以使用`My.User.InitializeWithWindowsUser`設為 啟動應用程式的 Windows 使用者執行緒的目前主體的方法。 Visual Basic 應用程式模型中的 Windows 應用程式啟動時呼叫這個方法，根據預設。 在其他專案類型，您必須設定執行緒的目前主體藉由呼叫這個方法明確或指派至<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>。</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>值       在 Windows 專案中，`My.User`物件以執行緒的目前主體為基礎; 因此，這個方法可以變更的資訊`My.User`傳回。 ASP.NET 應用程式中，`My.User`物件根據目前的 HTTP 要求的使用者身分識別，而且是由這個方法不會受到影響。      > [!NOTE] > 的確切行為`My.User`物件取決於應用程式的類型以及應用程式執行所在的作業系統。 如需詳細資訊，請參閱<xref:Microsoft.VisualBasic.ApplicationServices.User>類別概觀。</xref:Microsoft.VisualBasic.ApplicationServices.User>       這是進階的成員;它不會顯示在 IntelliSense 中除非您按一下**所有** 索引標籤。      ## 專案類型的可用性 | | |  |-|-|  |專案類型 |可用 |  |Windows 應用程式 |**Yes**|  |類別庫 |**Yes**|  |主控台應用程式 |**Yes**|  |Windows 控制項程式庫 |**Yes**|  |Web 控制項程式庫 |**Yes**|  |Windows 服務 |**Yes**|  |網站 |**Yes**|"
  syntax:
    content: public void InitializeWithWindowsUser ();
    parameters: []
  overload: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal
  id: InternalPrincipal
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: InternalPrincipal
  nameWithType: User.InternalPrincipal
  fullName: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "取得或設定表示目前使用者的主體物件。"
  remarks: "在<xref:Microsoft.VisualBasic.ApplicationServices.User>物件，此屬性包裝<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>屬性。</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> </xref:Microsoft.VisualBasic.ApplicationServices.User> 覆寫此方法以提供不同的行為在衍生類別中。 例如，<xref:Microsoft.VisualBasic.ApplicationServices.WebUser.InternalPrincipal%2A?displayProperty=fullName>屬性會覆寫這個屬性。</xref:Microsoft.VisualBasic.ApplicationServices.WebUser.InternalPrincipal%2A?displayProperty=fullName>"
  syntax:
    content: protected virtual System.Security.Principal.IPrincipal InternalPrincipal { get; set; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "<xref:System.Security.Principal.IPrincipal>物件，代表目前的使用者。</xref:System.Security.Principal.IPrincipal>"
  overload: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated
  id: IsAuthenticated
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: User.IsAuthenticated
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "取得值，指出是否已驗證使用者。"
  remarks: "`My.User.IsAuthenticated`屬性可讓您判斷目前的使用者是否已驗證的程式碼。      > [!NOTE] > 的確切行為`My.User`物件取決於應用程式類型和執行應用程式的作業系統。 如需詳細資訊，請參閱<xref:Microsoft.VisualBasic.ApplicationServices.User>類別概觀。</xref:Microsoft.VisualBasic.ApplicationServices.User>      ## 專案類型的可用性 | | |  |-|-|  |專案類型 |可用 |  |Windows 應用程式 |**Yes**|  |類別庫 |**Yes**|  |主控台應用程式 |**Yes**|  |Windows 控制項程式庫 |**Yes**|  |Web 控制項程式庫 |**Yes**|  |Windows 服務 |**Yes**|  |網站 |**Yes**|"
  example:
  - "This example verifies that the user has been authenticated before accessing a resource.  \n  \n [!code-vb[VbVbalrMyUser#2](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#2)]"
  syntax:
    content: public bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>如果使用者通過驗證。否則， <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>。"
  overload: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(Microsoft.VisualBasic.ApplicationServices.BuiltInRole)
  id: IsInRole(Microsoft.VisualBasic.ApplicationServices.BuiltInRole)
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: IsInRole(BuiltInRole)
  nameWithType: User.IsInRole(BuiltInRole)
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(BuiltInRole)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "判斷目前使用者是否屬於指定的角色。"
  remarks: "`My.User.IsInRole`方法可讓您的程式碼，判斷目前使用者是否為指定之角色的成員。       多載`My.User.IsInRole`方法可接受 string 提供簡易存取<xref:System.Security.Principal.IPrincipal.IsInRole%2A>目前主體的方法。</xref:System.Security.Principal.IPrincipal.IsInRole%2A>       多載`My.User.IsInRole`採用方法`BuiltInRole`列舉型別行為方式，會根據目前的主體。 如果是 Windows 使用者主體 (<xref:System.Security.Principal.WindowsPrincipal>)，此函式會將轉換`role`對等<xref:System.Security.Principal.WindowsBuiltInRole>列舉型別，並傳回結果的呼叫<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>.</xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> </xref:System.Security.Principal.WindowsBuiltInRole> </xref:System.Security.Principal.WindowsPrincipal> 如果目前的主體為任何其他主體，此函式會將傳遞中列舉值的名稱`role`主體<xref:System.Security.Principal.IPrincipal.IsInRole%2A>方法。</xref:System.Security.Principal.IPrincipal.IsInRole%2A>      > [!NOTE] > 的確切行為`My.User`物件取決於應用程式類型和執行應用程式的作業系統。 如需詳細資訊，請參閱<xref:Microsoft.VisualBasic.ApplicationServices.User>類別概觀。</xref:Microsoft.VisualBasic.ApplicationServices.User>      ## 專案類型的可用性 | | |  |-|-|  |專案類型 |可用 |  |Windows 應用程式 |**Yes**|  |類別庫 |**Yes**|  |主控台應用程式 |**Yes**|  |Windows 控制項程式庫 |**Yes**|  |Web 控制項程式庫 |**Yes**|  |Windows 服務 |**Yes**|  |網站 |**Yes**|"
  example:
  - "This example checks if the user is an administrator before accessing a resource.  \n  \n [!code-vb[VbVbalrMyUser#1](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#1)]"
  syntax:
    content: public bool IsInRole (Microsoft.VisualBasic.ApplicationServices.BuiltInRole role);
    parameters:
    - id: role
      type: Microsoft.VisualBasic.ApplicationServices.BuiltInRole
      description: "內建的 Windows 角色要檢查成員資格。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>如果目前的使用者是指定之角色; 的成員否則， <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>。"
  overload: Microsoft.VisualBasic.ApplicationServices.User.IsInRole*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(System.String)
  id: IsInRole(System.String)
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: IsInRole(String)
  nameWithType: User.IsInRole(String)
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "判斷目前使用者是否屬於指定的角色。"
  remarks: "`My.User.IsInRole`方法可讓您的程式碼，判斷目前使用者是否為指定之角色的成員。       多載`My.User.IsInRole`方法可接受 string 提供簡易存取<xref:System.Security.Principal.IPrincipal.IsInRole%2A>目前主體的方法。</xref:System.Security.Principal.IPrincipal.IsInRole%2A>       多載`My.User.IsInRole`採用方法`BuiltInRole`列舉型別行為方式，會根據目前的主體。 如果是 Windows 使用者主體 (<xref:System.Security.Principal.WindowsPrincipal>)，此函式會將轉換`role`對等<xref:System.Security.Principal.WindowsBuiltInRole>列舉型別，並傳回結果的呼叫<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>.</xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> </xref:System.Security.Principal.WindowsBuiltInRole> </xref:System.Security.Principal.WindowsPrincipal> 如果目前的主體為任何其他主體，此函式會將傳遞中列舉值的名稱`role`主體<xref:System.Security.Principal.IPrincipal.IsInRole%2A>方法。</xref:System.Security.Principal.IPrincipal.IsInRole%2A>      > [!NOTE] > 的確切行為`My.User`物件取決於應用程式類型和執行應用程式的作業系統。 如需詳細資訊，請參閱<xref:Microsoft.VisualBasic.ApplicationServices.User>類別概觀。</xref:Microsoft.VisualBasic.ApplicationServices.User>      ## 專案類型的可用性 | | |  |-|-|  |專案類型 |可用 |  |Windows 應用程式 |**Yes**|  |類別庫 |**Yes**|  |主控台應用程式 |**Yes**|  |Windows 控制項程式庫 |**Yes**|  |Web 控制項程式庫 |**Yes**|  |Windows 服務 |**Yes**|  |網站 |**Yes**|"
  example:
  - "This example checks if the user is an administrator before accessing a resource.  \n  \n [!code-vb[VbVbalrMyUser#1](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#1)]"
  syntax:
    content: public bool IsInRole (string role);
    parameters:
    - id: role
      type: System.String
      description: "這是要檢查成員資格之角色的名稱。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>如果目前的使用者是指定之角色; 的成員否則， <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>。"
  overload: Microsoft.VisualBasic.ApplicationServices.User.IsInRole*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.Name
  id: Name
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: Name
  nameWithType: User.Name
  fullName: Microsoft.VisualBasic.ApplicationServices.User.Name
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "取得目前使用者的名稱。"
  remarks: "You can use the `My.User` object to get information about the current user.  \n  \n The principal that authenticates the user also controls the format of the user name. By default, an application uses Windows authentication, and the user name has the format DOMAIN\\USERNAME. A custom implementation of the principal does not necessarily use the same format.  \n  \n> [!NOTE]\n>  The `My.User.Name` property returns an empty string when run under Windows 95 and Windows 98 because those operating systems do not recognize user names.  \n  \n> [!NOTE]\n>  The exact behavior of the `My.User` object depends on the type of the application and on the operating system on which the application runs. For more information, see the <xref:Microsoft.VisualBasic.ApplicationServices.User> class overview.  \n  \n## Availability by Project Type  \n  \n|||  \n|-|-|  \n|Project type|Available|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|**Yes**|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example checks if the application is using Windows or custom authentication, and uses that information to parse the `My.User.Name` property.  \n  \n [!code-vb[VbVbalrMyUser#3](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#3)]"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. 目前使用者的名稱。"
  overload: Microsoft.VisualBasic.ApplicationServices.User.Name*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: Microsoft.VisualBasic.ApplicationServices.User.#ctor
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: User()
  nameWithType: User.User()
  fullName: Microsoft.VisualBasic.ApplicationServices.User.User()
- uid: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: CurrentPrincipal
  nameWithType: User.CurrentPrincipal
  fullName: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: InitializeWithWindowsUser()
  nameWithType: User.InitializeWithWindowsUser()
  fullName: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser()
- uid: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: InternalPrincipal
  nameWithType: User.InternalPrincipal
  fullName: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: IsAuthenticated
  nameWithType: User.IsAuthenticated
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(Microsoft.VisualBasic.ApplicationServices.BuiltInRole)
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: IsInRole(BuiltInRole)
  nameWithType: User.IsInRole(BuiltInRole)
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(BuiltInRole)
- uid: Microsoft.VisualBasic.ApplicationServices.BuiltInRole
  parent: Microsoft.VisualBasic.ApplicationServices
  isExternal: false
  name: BuiltInRole
  nameWithType: BuiltInRole
  fullName: Microsoft.VisualBasic.ApplicationServices.BuiltInRole
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(System.String)
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: IsInRole(String)
  nameWithType: User.IsInRole(String)
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.ApplicationServices.User.Name
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: Name
  nameWithType: User.Name
  fullName: Microsoft.VisualBasic.ApplicationServices.User.Name
- uid: Microsoft.VisualBasic.ApplicationServices.User.#ctor*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: User
  nameWithType: User.User
- uid: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: CurrentPrincipal
  nameWithType: User.CurrentPrincipal
- uid: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: InitializeWithWindowsUser
  nameWithType: User.InitializeWithWindowsUser
- uid: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: InternalPrincipal
  nameWithType: User.InternalPrincipal
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: IsAuthenticated
  nameWithType: User.IsAuthenticated
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsInRole*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: IsInRole
  nameWithType: User.IsInRole
- uid: Microsoft.VisualBasic.ApplicationServices.User.Name*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: Name
  nameWithType: User.Name
