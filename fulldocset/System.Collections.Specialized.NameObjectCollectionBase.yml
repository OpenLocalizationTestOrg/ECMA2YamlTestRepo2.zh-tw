### YamlMime:ManagedReference
items:
- uid: System.Collections.Specialized.NameObjectCollectionBase
  id: NameObjectCollectionBase
  children:
  - System.Collections.Specialized.NameObjectCollectionBase.#ctor
  - System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IEqualityComparer)
  - System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IEqualityComparer)
  - System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseClear
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys
  - System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)
  - System.Collections.Specialized.NameObjectCollectionBase.Count
  - System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator
  - System.Collections.Specialized.NameObjectCollectionBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly
  - System.Collections.Specialized.NameObjectCollectionBase.Keys
  - System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization(System.Object)
  - System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized
  - System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot
  langs:
  - csharp
  name: NameObjectCollectionBase
  nameWithType: NameObjectCollectionBase
  fullName: System.Collections.Specialized.NameObjectCollectionBase
  type: Class
  summary: "提供<xref uid=&quot;langword_csharp_abstract&quot; name=&quot;abstract&quot; href=&quot;&quot;></xref>基底類別的集合相關聯<xref:System.String>索引鍵和<xref:System.Object>可以存取具有索引鍵或索引的值。</xref:System.Object> </xref:System.String>"
  remarks: "這個類別的基礎結構是雜湊表。       每個項目是索引鍵/值組。       NameObjectCollectionBase 的容量是 NameObjectCollectionBase 可以保存的項目數目。 當項目加入至 NameObjectCollectionBase 時，會自動增加容量視需要透過重新配置。       雜湊碼提供者在該 NameObjectCollectionBase 執行個體中的索引鍵的雜湊碼。 預設雜湊碼提供者是<xref:System.Collections.CaseInsensitiveHashCodeProvider>.</xref:System.Collections.CaseInsensitiveHashCodeProvider>       比較子判斷兩個索引鍵是否相等。 預設比較子是<xref:System.Collections.CaseInsensitiveComparer>.</xref:System.Collections.CaseInsensitiveComparer>       在.NET Framework 1.0 版，這個類別會使用區分文化特性的字串比較。 不過，在.NET Framework 1.1 和更新版本中，這個類別會使用<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>比較字串時。</xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> 如需文化特性如何影響比較和排序的詳細資訊，請參閱[執行不區分文化特性的字串作業](~/add/includes/ajax-current-ext-md.md)。       `null`允許做為索引鍵或值。      > [!CAUTION] ><xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGet%2A>方法不會區分`null`傳回因為找不到指定的索引鍵和`null`因為索引鍵相關聯的值是傳回哪個`null`。</xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGet%2A>"
  example:
  - "The following code example shows how to implement and use the NameObjectCollectionBase class.  \n  \n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase#1](~/add/codesnippet/cpp/t-system.collections.spe_0_1.cpp)]\n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase#1](~/add/codesnippet/csharp/t-system.collections.spe_0_1.cs)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase#1](~/add/codesnippet/visualbasic/t-system.collections.spe_0_1.vb)]"
  syntax:
    content: 'public abstract class NameObjectCollectionBase : System.Collections.ICollection, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable'
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor
  id: '#ctor'
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: NameObjectCollectionBase()
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase()
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "初始化的新執行個體<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>是空的類別。"
  remarks: "容量<xref:System.Collections.Specialized.NameObjectCollectionBase>是項目數目，<xref:System.Collections.Specialized.NameObjectCollectionBase>可以保存。</xref:System.Collections.Specialized.NameObjectCollectionBase> </xref:System.Collections.Specialized.NameObjectCollectionBase> 當項目加入至<xref:System.Collections.Specialized.NameObjectCollectionBase>，就會自動增加容量的要求以重新配置內部的陣列。</xref:System.Collections.Specialized.NameObjectCollectionBase>       如果可以評估集合的大小，指定初始容量，就不需要執行數個項目加入至<xref:System.Collections.Specialized.NameObjectCollectionBase>。</xref:System.Collections.Specialized.NameObjectCollectionBase>時調整大小作業       雜湊碼提供者在該雜湊程式碼中的索引鍵<xref:System.Collections.Specialized.NameObjectCollectionBase>執行個體。</xref:System.Collections.Specialized.NameObjectCollectionBase> 預設雜湊碼提供者是<xref:System.Collections.CaseInsensitiveHashCodeProvider>.</xref:System.Collections.CaseInsensitiveHashCodeProvider>       比較子判斷兩個索引鍵是否相等。 預設比較子是<xref:System.Collections.CaseInsensitiveComparer>.</xref:System.Collections.CaseInsensitiveComparer>       這個建構函式是 o （1） 運算。"
  syntax:
    content: protected NameObjectCollectionBase ();
    parameters: []
  overload: System.Collections.Specialized.NameObjectCollectionBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IEqualityComparer)'
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: NameObjectCollectionBase(IEqualityComparer)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(IEqualityComparer)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(IEqualityComparer)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "初始化的新執行個體<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>類別是空白的、 具有預設初始容量，並使用指定<xref:System.Collections.IEqualityComparer>物件。</xref:System.Collections.IEqualityComparer>"
  remarks: "容量<xref:System.Collections.Specialized.NameObjectCollectionBase>物件則是項目數目，<xref:System.Collections.Specialized.NameObjectCollectionBase>可以保存。</xref:System.Collections.Specialized.NameObjectCollectionBase> </xref:System.Collections.Specialized.NameObjectCollectionBase> 當項目加入至<xref:System.Collections.Specialized.NameObjectCollectionBase>，就會自動增加容量的要求以重新配置內部的陣列。</xref:System.Collections.Specialized.NameObjectCollectionBase>       如果可以評估集合的大小，指定初始容量，就不需要執行數個項目加入至<xref:System.Collections.Specialized.NameObjectCollectionBase>。</xref:System.Collections.Specialized.NameObjectCollectionBase>時調整大小作業       <xref:System.Collections.IEqualityComparer>物件結合的比較子和雜湊碼提供者。</xref:System.Collections.IEqualityComparer>  雜湊碼提供者在該<xref:System.Collections.Specialized.NameObjectCollectionBase>.</xref:System.Collections.Specialized.NameObjectCollectionBase>中的索引鍵的雜湊程式碼  比較子判斷兩個索引鍵是否相等。       這個建構函式是 o （1） 運算。"
  syntax:
    content: protected NameObjectCollectionBase (System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "<xref:System.Collections.IEqualityComparer>物件，可用來判斷兩個索引鍵是否相等，以及集合中產生的索引鍵的雜湊碼。</xref:System.Collections.IEqualityComparer>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: NameObjectCollectionBase(Int32)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "初始化的新執行個體<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>類別是空白的、 具有指定的初始容量，並使用預設雜湊碼提供者和預設比較子。"
  remarks: "容量<xref:System.Collections.Specialized.NameObjectCollectionBase>是項目數目，<xref:System.Collections.Specialized.NameObjectCollectionBase>可以保存。</xref:System.Collections.Specialized.NameObjectCollectionBase> </xref:System.Collections.Specialized.NameObjectCollectionBase> 當項目加入至<xref:System.Collections.Specialized.NameObjectCollectionBase>，就會自動增加容量的要求以重新配置內部的陣列。</xref:System.Collections.Specialized.NameObjectCollectionBase>       如果可以評估集合的大小，指定初始容量，就不需要執行數個項目加入至<xref:System.Collections.Specialized.NameObjectCollectionBase>。</xref:System.Collections.Specialized.NameObjectCollectionBase>時調整大小作業       雜湊碼提供者在該雜湊程式碼中的索引鍵<xref:System.Collections.Specialized.NameObjectCollectionBase>執行個體。</xref:System.Collections.Specialized.NameObjectCollectionBase> 預設雜湊碼提供者是<xref:System.Collections.CaseInsensitiveHashCodeProvider>.</xref:System.Collections.CaseInsensitiveHashCodeProvider>       比較子判斷兩個索引鍵是否相等。 預設比較子是<xref:System.Collections.CaseInsensitiveComparer>.</xref:System.Collections.CaseInsensitiveComparer>       這個建構函式為 O (`n`) 作業，其中`n`是`capacity`。"
  syntax:
    content: protected NameObjectCollectionBase (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: "項目的大約數目， <xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;> </xref>一開始可包含執行個體。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>小於零。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: NameObjectCollectionBase(IHashCodeProvider,IComparer)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(IHashCodeProvider,IComparer)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "初始化的新執行個體<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>類別是空白的、 具有預設初始容量，並使用指定的雜湊碼提供者和指定的比較子。"
  remarks: "容量<xref:System.Collections.Specialized.NameObjectCollectionBase>是項目數目，<xref:System.Collections.Specialized.NameObjectCollectionBase>可以保存。</xref:System.Collections.Specialized.NameObjectCollectionBase> </xref:System.Collections.Specialized.NameObjectCollectionBase> 當項目加入至<xref:System.Collections.Specialized.NameObjectCollectionBase>，就會自動增加容量的要求以重新配置內部的陣列。</xref:System.Collections.Specialized.NameObjectCollectionBase>       如果可以評估集合的大小，指定初始容量，就不需要執行數個項目加入至<xref:System.Collections.Specialized.NameObjectCollectionBase>。</xref:System.Collections.Specialized.NameObjectCollectionBase>時調整大小作業       雜湊碼提供者在該雜湊程式碼中的索引鍵<xref:System.Collections.Specialized.NameObjectCollectionBase>執行個體。</xref:System.Collections.Specialized.NameObjectCollectionBase> 預設雜湊碼提供者是<xref:System.Collections.CaseInsensitiveHashCodeProvider>.</xref:System.Collections.CaseInsensitiveHashCodeProvider>       比較子判斷兩個索引鍵是否相等。 預設比較子是<xref:System.Collections.CaseInsensitiveComparer>.</xref:System.Collections.CaseInsensitiveComparer>       這個建構函式是 o （1） 運算。"
  syntax:
    content: protected NameObjectCollectionBase (System.Collections.IHashCodeProvider hashProvider, System.Collections.IComparer comparer);
    parameters:
    - id: hashProvider
      type: System.Collections.IHashCodeProvider
      description: "<xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> ，將提供的雜湊程式碼中的所有索引鍵<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。"
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>可用來判斷兩個索引鍵是否相等。</xref:System.Collections.IComparer>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IEqualityComparer)
  id: '#ctor(System.Int32,System.Collections.IEqualityComparer)'
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: NameObjectCollectionBase(Int32,IEqualityComparer)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(Int32,IEqualityComparer)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(Int32,IEqualityComparer)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "初始化的新執行個體<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>類別是空白的、 具有指定的初始容量，並使用指定<xref:System.Collections.IEqualityComparer>物件。</xref:System.Collections.IEqualityComparer>"
  remarks: "容量<xref:System.Collections.Specialized.NameObjectCollectionBase>物件則是項目數目，<xref:System.Collections.Specialized.NameObjectCollectionBase>可以保存。</xref:System.Collections.Specialized.NameObjectCollectionBase> </xref:System.Collections.Specialized.NameObjectCollectionBase> 當項目加入至<xref:System.Collections.Specialized.NameObjectCollectionBase>，就會自動增加容量的要求以重新配置內部的陣列。</xref:System.Collections.Specialized.NameObjectCollectionBase>       如果可以評估集合的大小，指定初始容量，就不需要執行數個項目加入至<xref:System.Collections.Specialized.NameObjectCollectionBase>。</xref:System.Collections.Specialized.NameObjectCollectionBase>時調整大小作業       <xref:System.Collections.IEqualityComparer>物件結合的比較子和雜湊碼提供者。</xref:System.Collections.IEqualityComparer>  雜湊碼提供者在該<xref:System.Collections.Specialized.NameObjectCollectionBase>.</xref:System.Collections.Specialized.NameObjectCollectionBase>中的索引鍵的雜湊程式碼  比較子判斷兩個索引鍵是否相等。       這個建構函式為 O (`n`) 作業，其中`n`是`capacity`參數。"
  syntax:
    content: protected NameObjectCollectionBase (int capacity, System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "項目的大約數目， <xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;> </xref>一開始可包含物件。"
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "<xref:System.Collections.IEqualityComparer>物件，可用來判斷兩個索引鍵是否相等，以及集合中產生的索引鍵的雜湊碼。</xref:System.Collections.IEqualityComparer>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>小於零。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: NameObjectCollectionBase(SerializationInfo,StreamingContext)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(SerializationInfo,StreamingContext)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "初始化的新執行個體<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>序列化，並使用指定的類別<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref>和&lt;xref:System.Runtime.Serialization.StreamingContext?displayProperty=fullName&gt;。"
  remarks: "這個建構函式是 o （1） 運算。"
  syntax:
    content: protected NameObjectCollectionBase (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "A <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>物件，包含序列化新所需的資訊<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "A &lt;xref:System.Runtime.Serialization.StreamingContext?displayProperty=fullName&gt;物件，其中包含來源和目的地與新相關聯之序列化資料流<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: NameObjectCollectionBase(Int32,IHashCodeProvider,IComparer)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(Int32,IHashCodeProvider,IComparer)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(Int32,IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "初始化的新執行個體<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>類別是空白的、 具有指定的初始容量，並使用指定的雜湊碼提供者和指定的比較子。"
  remarks: "容量<xref:System.Collections.Specialized.NameObjectCollectionBase>是項目數目，<xref:System.Collections.Specialized.NameObjectCollectionBase>可以保存。</xref:System.Collections.Specialized.NameObjectCollectionBase> </xref:System.Collections.Specialized.NameObjectCollectionBase> 當項目加入至<xref:System.Collections.Specialized.NameObjectCollectionBase>，就會自動增加容量的要求以重新配置內部的陣列。</xref:System.Collections.Specialized.NameObjectCollectionBase>       如果可以評估集合的大小，指定初始容量，就不需要執行數個項目加入至<xref:System.Collections.Specialized.NameObjectCollectionBase>。</xref:System.Collections.Specialized.NameObjectCollectionBase>時調整大小作業       雜湊碼提供者在該雜湊程式碼中的索引鍵<xref:System.Collections.Specialized.NameObjectCollectionBase>執行個體。</xref:System.Collections.Specialized.NameObjectCollectionBase> 預設雜湊碼提供者是<xref:System.Collections.CaseInsensitiveHashCodeProvider>.</xref:System.Collections.CaseInsensitiveHashCodeProvider>       比較子判斷兩個索引鍵是否相等。 預設比較子是<xref:System.Collections.CaseInsensitiveComparer>.</xref:System.Collections.CaseInsensitiveComparer>       這個建構函式為 O (`n`) 作業，其中`n`是`capacity`。"
  syntax:
    content: protected NameObjectCollectionBase (int capacity, System.Collections.IHashCodeProvider hashProvider, System.Collections.IComparer comparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "項目的大約數目， <xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;> </xref>一開始可包含執行個體。"
    - id: hashProvider
      type: System.Collections.IHashCodeProvider
      description: "<xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> ，將提供的雜湊程式碼中的所有索引鍵<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。"
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>可用來判斷兩個索引鍵是否相等。</xref:System.Collections.IComparer>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>小於零。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)
  id: BaseAdd(System.String,System.Object)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseAdd(String,Object)
  nameWithType: NameObjectCollectionBase.BaseAdd(String,Object)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(String,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "將具有指定之索引鍵和值的項目<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。"
  remarks: "如果<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>已等於容量，容量<xref:System.Collections.Specialized.NameObjectCollectionBase>增加的自動重新配置內部的陣列，並加入新項目之前現有的項目複製到新陣列。</xref:System.Collections.Specialized.NameObjectCollectionBase> </xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>       如果<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>小於比容量，這個方法是一種 o （1） 運算。</xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A> 如果需要增加，以容納新項目容量，這個方法會變成 O (`n`) 作業，其中`n`為<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>。</xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>"
  example:
  - "The following code example uses BaseAdd to create a new <xref:System.Collections.Specialized.NameObjectCollectionBase> with elements from an <xref:System.Collections.IDictionary>.  \n  \n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseAdd#1](~/add/codesnippet/visualbasic/08f4bd55-361e-4a55-bdc1-_1.vb)]\n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseAdd#1](~/add/codesnippet/cpp/08f4bd55-361e-4a55-bdc1-_1.cpp)]\n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseAdd#1](~/add/codesnippet/csharp/08f4bd55-361e-4a55-bdc1-_1.cs)]"
  syntax:
    content: protected void BaseAdd (string name, object value);
    parameters:
    - id: name
      type: System.String
      description: "<xref:System.String>要加入項目的索引鍵</xref:System.String> 索引鍵可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: value
      type: System.Object
      description: "<xref:System.Object>要加入之項目的值</xref:System.Object> 這個值可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "集合是唯讀的。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseClear
  id: BaseClear
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseClear()
  nameWithType: NameObjectCollectionBase.BaseClear()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseClear()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "移除所有項目從<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。"
  remarks: "<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>已設為零，並從項目集合的其他物件的參考也會釋放。</xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>       這個方法是一種 o （1） 運算。"
  example:
  - "The following code example uses BaseClear to remove all elements from a <xref:System.Collections.Specialized.NameObjectCollectionBase>.  \n  \n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseClear#1](~/add/codesnippet/csharp/m-system.collections.spe_13_1.cs)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseClear#1](~/add/codesnippet/visualbasic/m-system.collections.spe_13_1.vb)]\n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseClear#1](~/add/codesnippet/cpp/m-system.collections.spe_13_1.cpp)]"
  syntax:
    content: protected void BaseClear ();
    parameters: []
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseClear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "集合是唯讀的。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)
  id: BaseGet(System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseGet(Int32)
  nameWithType: NameObjectCollectionBase.BaseGet(Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "取得位於指定索引處之項目的值<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。"
  remarks: "這個方法是一種 o （1） 運算。"
  example:
  - "The following code example uses <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey%2A> and <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGet%2A> to get specific keys and values.  \n  \n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1](~/add/codesnippet/cpp/m-system.collections.spe_24_1.cpp)]\n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1](~/add/codesnippet/csharp/m-system.collections.spe_24_1.cs)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1](~/add/codesnippet/visualbasic/m-system.collections.spe_24_1.vb)]"
  syntax:
    content: protected object BaseGet (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "要取得之值的以零為起始的索引。"
    return:
      type: System.Object
      description: "<xref:System.Object>表示值的指定索引處的項目。</xref:System.Object>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseGet*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>超出集合索引的有效範圍內。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)
  id: BaseGet(System.String)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseGet(String)
  nameWithType: NameObjectCollectionBase.BaseGet(String)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(String)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "取得具有指定之索引鍵的第一個項目值<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。"
  remarks: "如果集合包含具有指定索引鍵的多個項目，這個方法會傳回第一個項目。 若要取得的後續項目的值使用相同的金鑰，可使用的列舉值逐一查看集合，並比較索引鍵。      > [!CAUTION] > 這個方法會傳回`null`在下列情況︰ 1） 如果找不到指定的索引鍵; 以及 2） 如果找到指定的索引鍵，其相關聯的值為`null`。 這個方法不會區分兩種情況。       這個方法是一種 o （1） 運算。"
  example:
  - "The following code example uses <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey%2A> and BaseGet to get specific keys and values.  \n  \n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1](~/add/codesnippet/cpp/m-system.collections.spe_41_1.cpp)]\n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1](~/add/codesnippet/csharp/m-system.collections.spe_41_1.cs)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1](~/add/codesnippet/visualbasic/m-system.collections.spe_41_1.vb)]"
  syntax:
    content: protected object BaseGet (string name);
    parameters:
    - id: name
      type: System.String
      description: "<xref:System.String>要取得之項目的索引鍵。</xref:System.String> 索引鍵可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Object
      description: "<xref:System.Object>代表第一個項目的值具有指定之索引鍵，如果有找到則為<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Object>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseGet*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys
  id: BaseGetAllKeys
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseGetAllKeys()
  nameWithType: NameObjectCollectionBase.BaseGetAllKeys()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "傳回<xref:System.String>陣列，其中包含中的所有索引鍵<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。</xref:System.String>"
  remarks: "這個方法是 O (`n`) 作業，其中`n`為<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>。</xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>"
  example:
  - "The following code example uses BaseGetAllKeys and <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues%2A> to get an array of the keys or an array of the values.  \n  \n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll#1](~/add/codesnippet/csharp/m-system.collections.spe_38_1.cs)]\n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll#1](~/add/codesnippet/cpp/m-system.collections.spe_38_1.cpp)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll#1](~/add/codesnippet/visualbasic/m-system.collections.spe_38_1.vb)]"
  syntax:
    content: protected string[] BaseGetAllKeys ();
    parameters: []
    return:
      type: System.String[]
      description: "A<xref:System.String>陣列，其中包含中的所有索引鍵<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。</xref:System.String>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues
  id: BaseGetAllValues
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseGetAllValues()
  nameWithType: NameObjectCollectionBase.BaseGetAllValues()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "傳回<xref:System.Object>陣列，其中包含的所有值<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。</xref:System.Object>"
  remarks: "這個方法是 O (`n`) 作業，其中`n`為<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>。</xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>"
  example:
  - "The following code example uses <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys%2A> and BaseGetAllValues to get an array of the keys or an array of the values.  \n  \n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll#1](~/add/codesnippet/csharp/m-system.collections.spe_32_1.cs)]\n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll#1](~/add/codesnippet/cpp/m-system.collections.spe_32_1.cpp)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll#1](~/add/codesnippet/visualbasic/m-system.collections.spe_32_1.vb)]"
  syntax:
    content: protected object[] BaseGetAllValues ();
    parameters: []
    return:
      type: System.Object[]
      description: "<xref:System.Object>陣列，其中包含的所有值<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。</xref:System.Object>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)
  id: BaseGetAllValues(System.Type)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseGetAllValues(Type)
  nameWithType: NameObjectCollectionBase.BaseGetAllValues(Type)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(Type)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "傳回指定的型別，其中包含的所有值的陣列<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。"
  remarks: "這個方法是 O (`n`) 作業，其中`n`為<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>。</xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>"
  syntax:
    content: protected object[] BaseGetAllValues (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "A<xref:System.Type>表示要傳回的陣列型別。</xref:System.Type>"
    return:
      type: System.Object[]
      description: "指定的型別，其中包含的所有值的陣列<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>type</code>不是有效<xref:System.Type>。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)
  id: BaseGetKey(System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseGetKey(Int32)
  nameWithType: NameObjectCollectionBase.BaseGetKey(Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "取得位於指定索引處的索引鍵的項目<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。"
  remarks: "這個方法是一種 o （1） 運算。"
  example:
  - "The following code example uses BaseGetKey and <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGet%2A> to get specific keys and values.  \n  \n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1](~/add/codesnippet/cpp/3cf5a014-1166-4fdc-b41d-_1.cpp)]\n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1](~/add/codesnippet/csharp/3cf5a014-1166-4fdc-b41d-_1.cs)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1](~/add/codesnippet/visualbasic/3cf5a014-1166-4fdc-b41d-_1.vb)]"
  syntax:
    content: protected string BaseGetKey (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "要取得之索引鍵以零為起始的索引。"
    return:
      type: System.String
      description: "A <xref:System.String>，代表指定索引處之項目的索引鍵。</xref:System.String>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>超出集合索引的有效範圍內。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys
  id: BaseHasKeys
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseHasKeys()
  nameWithType: NameObjectCollectionBase.BaseHasKeys()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "取得值，指出是否<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體會包含其索引鍵不是項目<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  remarks: "這個方法是一種 o （1） 運算。"
  example:
  - "The following code example uses BaseHasKeys to determine if the collection contains keys that are not `null`.  \n  \n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys#1](~/add/codesnippet/cpp/m-system.collections.spe_17_1.cpp)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys#1](~/add/codesnippet/visualbasic/m-system.collections.spe_17_1.vb)]\n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys#1](~/add/codesnippet/csharp/m-system.collections.spe_17_1.cs)]"
  syntax:
    content: protected bool BaseHasKeys ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體會包含其索引鍵不是項目<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)
  id: BaseRemove(System.String)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseRemove(String)
  nameWithType: NameObjectCollectionBase.BaseRemove(String)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(String)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "移除具有指定之索引鍵的項目<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。"
  remarks: "如果<xref:System.Collections.Specialized.NameObjectCollectionBase>不包含具有指定之索引鍵項目<xref:System.Collections.Specialized.NameObjectCollectionBase>維持不變。</xref:System.Collections.Specialized.NameObjectCollectionBase> </xref:System.Collections.Specialized.NameObjectCollectionBase> 擲不回任何例外狀況。       在連續項目，例如清單的集合中移除項的項目向上移動以佔用空出的位置。 如果集合具有索引，會移動之項目的索引也會更新。 這個問題不適用於集合的項目在概念上群組成 bucket，例如雜湊資料表。       這個方法是 O (`n`) 作業，其中`n`為<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>。</xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>"
  example:
  - "The following code example uses BaseRemove and <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt%2A> to remove elements from a <xref:System.Collections.Specialized.NameObjectCollectionBase>.  \n  \n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseRemove#1](~/add/codesnippet/csharp/6fd86396-bc06-4c0a-8ef5-_1.cs)]\n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseRemove#1](~/add/codesnippet/cpp/6fd86396-bc06-4c0a-8ef5-_1.cpp)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseRemove#1](~/add/codesnippet/visualbasic/6fd86396-bc06-4c0a-8ef5-_1.vb)]"
  syntax:
    content: protected void BaseRemove (string name);
    parameters:
    - id: name
      type: System.String
      description: "<xref:System.String>要移除之項目的索引鍵。</xref:System.String> 索引鍵可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "集合是唯讀的。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)
  id: BaseRemoveAt(System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseRemoveAt(Int32)
  nameWithType: NameObjectCollectionBase.BaseRemoveAt(Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "移除位於指定索引處的項目<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。"
  remarks: "在連續項目，例如清單的集合中移除項的項目向上移動以佔用空出的位置。 如果集合具有索引，會移動之項目的索引也會更新。 這個問題不適用於集合的項目在概念上群組成 bucket，例如雜湊資料表。       這個方法是 O (`n`) 作業，其中`n`為<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>。</xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>"
  example:
  - "The following code example uses <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseRemove%2A> and BaseRemoveAt to remove elements from a <xref:System.Collections.Specialized.NameObjectCollectionBase>.  \n  \n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseRemove#1](~/add/codesnippet/csharp/c118a875-5132-4e70-b0e9-_1.cs)]\n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseRemove#1](~/add/codesnippet/cpp/c118a875-5132-4e70-b0e9-_1.cpp)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseRemove#1](~/add/codesnippet/visualbasic/c118a875-5132-4e70-b0e9-_1.vb)]"
  syntax:
    content: protected void BaseRemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "若要移除的項目以零為起始的索引。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>超出集合索引的有效範圍內。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "集合是唯讀的。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)
  id: BaseSet(System.Int32,System.Object)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseSet(Int32,Object)
  nameWithType: NameObjectCollectionBase.BaseSet(Int32,Object)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(Int32,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "設定指定索引處之項目的值<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。"
  remarks: "這個方法是一種 o （1） 運算。"
  example:
  - "The following code example uses <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseSet%2A> to set the value of a specific element.  \n  \n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseSet#1](~/add/codesnippet/cpp/2287b31c-3439-4899-9c69-_1.cpp)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseSet#1](~/add/codesnippet/visualbasic/2287b31c-3439-4899-9c69-_1.vb)]\n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseSet#1](~/add/codesnippet/csharp/2287b31c-3439-4899-9c69-_1.cs)]"
  syntax:
    content: protected void BaseSet (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "若要設定的項目以零為起始的索引。"
    - id: value
      type: System.Object
      description: "<xref:System.Object>，代表要設定之項目的新值。</xref:System.Object> 這個值可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseSet*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "集合是唯讀的。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>超出集合索引的有效範圍內。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)
  id: BaseSet(System.String,System.Object)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseSet(String,Object)
  nameWithType: NameObjectCollectionBase.BaseSet(String,Object)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(String,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "設定具有指定之索引鍵中的值，第一個項目的<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體，如果找到則為，將使用指定的索引鍵和值的項目<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。"
  remarks: "如果集合包含具有指定索引鍵的多個項目，這個方法會設定第一個項目。 若要使用相同的金鑰設定的後續項目的值，可使用的列舉值逐一查看集合，並比較索引鍵。       這個方法是一種 o （1） 運算。"
  example:
  - "The following code example uses BaseSet to set the value of a specific element.  \n  \n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseSet#1](~/add/codesnippet/cpp/3574a9bc-5d60-40e9-a4ae-_1.cpp)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseSet#1](~/add/codesnippet/visualbasic/3574a9bc-5d60-40e9-a4ae-_1.vb)]\n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseSet#1](~/add/codesnippet/csharp/3574a9bc-5d60-40e9-a4ae-_1.cs)]"
  syntax:
    content: protected void BaseSet (string name, object value);
    parameters:
    - id: name
      type: System.String
      description: "<xref:System.String>要設定之項目的索引鍵。</xref:System.String> 索引鍵可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: value
      type: System.Object
      description: "<xref:System.Object>，代表要設定之項目的新值。</xref:System.Object> 這個值可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseSet*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "集合是唯讀的。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.Count
  id: Count
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: Count
  nameWithType: NameObjectCollectionBase.Count
  fullName: System.Collections.Specialized.NameObjectCollectionBase.Count
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "取得中所包含的索引鍵/值組數目<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。"
  remarks: "容量則是項目數目，<xref:System.Collections.Specialized.NameObjectCollectionBase>可以儲存。</xref:System.Collections.Specialized.NameObjectCollectionBase> 計數是實際<xref:System.Collections.Specialized.NameObjectCollectionBase>.</xref:System.Collections.Specialized.NameObjectCollectionBase>中的項目數目       容量永遠是大於或等於 Count。 如果計數超過容量加入項目時，容量會自動增加之前複製的舊項目並加入新項目後，重新配置內部的陣列。       擷取這個屬性的值是一種 o （1） 運算。"
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "中所包含的索引鍵/值組數目<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: NameObjectCollectionBase.GetEnumerator()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "傳回逐一查看的列舉值<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;> </xref>。"
  remarks: "這個列舉值傳回為字串集合的索引鍵。       `foreach` C# 語言的陳述式 (`for each`在 Visual Basic 中) 會隱藏列舉值的複雜度。  因此，使用`foreach`建議，而不是直接管理 列舉值。       列舉程式可以用來讀取集合中的資料，但無法用於修改基礎集合。       一開始，列舉程式位在集合中的第一個項目之前。 <xref:System.Collections.IEnumerator.Reset%2A>也會列舉值帶回至這個位置。</xref:System.Collections.IEnumerator.Reset%2A>  此位置<xref:System.Collections.IEnumerator.Current%2A>是未定義。</xref:System.Collections.IEnumerator.Current%2A> 因此，您必須呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>前進的第一個元素之前讀取<xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A>值集合的列舉值</xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>會傳回相同的物件直到<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>稱為。</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>設定<xref:System.Collections.IEnumerator.Current%2A>下一個項目。</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       如果<xref:System.Collections.IEnumerator.MoveNext%2A>超過集合的列舉值的結尾會位於集合中的最後一個元素之後和<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 列舉值位於這個位置上，後續呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>也會傳回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> 如果最後一個呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`，<xref:System.Collections.IEnumerator.Current%2A>是未定義。</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 若要設定<xref:System.Collections.IEnumerator.Current%2A>的第一個元素的集合，您可以呼叫<xref:System.Collections.IEnumerator.Reset%2A>後面加上<xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       只要集合維持不變，列舉程式就持續有效。 如果對集合進行變更，例如加入、 修改或刪除元素，列舉程式會永久失效，且其行為未定義。       列舉程式沒有集合的獨佔存取因此，列舉集合在本質上並非安全執行緒的程序。  若要保證列舉過程的執行緒安全，您可以鎖定在整個列舉過程的集合。  若要讓集合以便進行讀取和寫入的多重執行緒能夠存取，您必須實作自己的同步處理。       這個方法是一種 o （1） 運算。"
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>如<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。</xref:System.Collections.IEnumerator>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: NameObjectCollectionBase.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "實作<xref href=&quot;System.Runtime.Serialization.ISerializable&quot;></xref>介面，並傳回序列化所需的資料<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。"
  remarks: "這個方法是 O (`n`) 作業，其中`n`為<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>。</xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>"
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "A <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>物件，其中包含要序列化所需的資訊<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "A<xref:System.Runtime.Serialization.StreamingContext>物件，其中包含來源和目的地相關聯之序列化資料流<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: NameObjectCollectionBase.IsReadOnly
  fullName: System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "取得或設定值，指出是否<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體是唯讀的。"
  remarks: "是唯讀的集合不允許在集合建立後增加、 移除或修改項目。       是唯讀的集合是唯讀的集合只具有可防止修改集合的包裝函式因此，如果基礎集合進行變更，唯讀的集合會反映這些變更。       擷取這個屬性的值是一種 o （1） 運算。"
  example:
  - "The following code example creates a read-only collection.  \n  \n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly#1](~/add/codesnippet/cpp/p-system.collections.spe_25_1.cpp)]\n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly#1](~/add/codesnippet/csharp/p-system.collections.spe_25_1.cs)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly#1](~/add/codesnippet/visualbasic/p-system.collections.spe_25_1.vb)]"
  syntax:
    content: protected bool IsReadOnly { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體是唯讀，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.Keys
  id: Keys
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: Keys
  nameWithType: NameObjectCollectionBase.Keys
  fullName: System.Collections.Specialized.NameObjectCollectionBase.Keys
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "取得<xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection>包含中的所有索引鍵的執行個體<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。</xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection>"
  remarks: "擷取這個屬性的值是一種 o （1） 運算。"
  syntax:
    content: public virtual System.Collections.Specialized.NameObjectCollectionBase.KeysCollection Keys { get; }
    return:
      type: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
      description: "A<xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection>包含中的所有索引鍵的執行個體<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>執行個體。</xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization(System.Object)
  id: OnDeserialization(System.Object)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: OnDeserialization(Object)
  nameWithType: NameObjectCollectionBase.OnDeserialization(Object)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "實作<xref href=&quot;System.Runtime.Serialization.ISerializable&quot;></xref>介面，並引發還原序列化完成時，還原序列化事件。"
  remarks: "雖然 OnDeserialization 方法看不到 COM 用戶端，根據預設，繼承<xref:System.Collections.Specialized.NameObjectCollectionBase>類別將它公開和 COM 用戶端會造成非預期的行為。</xref:System.Collections.Specialized.NameObjectCollectionBase>       這個方法是 O (`n`) 作業，其中`n`為<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>。</xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>"
  syntax:
    content: public virtual void OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: "還原序列化事件的來源。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization*
  exceptions:
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>目前相關聯的物件<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>是無效的執行個體。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: NameObjectCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "複製整個<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>到相容的一維<xref:System.Array>，從目標陣列的指定索引處開始。</xref:System.Array>"
  remarks: "指定的陣列必須是相容的類型。       這個方法會使用<xref:System.Array.Copy%2A?displayProperty=fullName>複製項目。</xref:System.Array.Copy%2A?displayProperty=fullName>       雖然 ICollection.CopyTo 方法看不到 COM 用戶端，根據預設，繼承<xref:System.Collections.Specialized.NameObjectCollectionBase>類別將它公開和 COM 用戶端會造成非預期的行為。</xref:System.Collections.Specialized.NameObjectCollectionBase>       這個方法是 O (`n`) 作業，其中`n`為<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>。</xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "一維<xref:System.Array>也就是從複製之元素的目的地<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;> </xref>。</xref:System.Array> <xref:System.Array>必須有以零為起始的索引。</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "中以零為起始的索引`array`由此開始複製。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>小於零。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>是多維的。       -在來源中的項目數<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>大於可用空間<code>index</code>至目的地結尾<code>array</code>。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "來源類型<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>無法自動轉換成目的地類型<code> array </code>。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: NameObjectCollectionBase.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "取得值，指出是否存取<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>物件為同步 （安全執行緒）。"
  remarks: "A<xref:System.Collections.Specialized.NameObjectCollectionBase>物件未同步處理。</xref:System.Collections.Specialized.NameObjectCollectionBase> 在衍生的類別可以提供的同步化的版本<xref:System.Collections.Specialized.NameObjectCollectionBase>使用<xref:System.Collections.ICollection.SyncRoot%2A>屬性。</xref:System.Collections.ICollection.SyncRoot%2A> </xref:System.Collections.Specialized.NameObjectCollectionBase>       透過集合進行列舉在本質上並不是安全執行緒程序。 即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。 若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。       下列程式碼範例示範如何鎖定集合使用<xref:System.Collections.ICollection.SyncRoot%2A>在整個列舉過程的屬性。</xref:System.Collections.ICollection.SyncRoot%2A>       [!code-cs[System.Collections.Specialized.NameObjectCollectionBase#2](~/add/codesnippet/csharp/cfdb0c87-90d1-4db2-b260-_1.cs)][!code-cpp[System.Collections.Specialized.NameObjectCollectionBase#2](~/add/codesnippet/cpp/cfdb0c87-90d1-4db2-b260-_1.cpp)][!code-vb[System.Collections.Specialized.NameObjectCollectionBase#2](~/add/codesnippet/visualbasic/cfdb0c87-90d1-4db2-b260-_1.vb) ]擷取這個屬性的值是一種 o （1） 運算。    "
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果存取<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>物件為同步 （安全執行緒），否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: NameObjectCollectionBase.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "取得物件，可用來同步處理存取具備<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>物件。"
  remarks: "在衍生的類別可以提供自己的同步處理的版本<xref:System.Collections.Specialized.NameObjectCollectionBase>類別使用<xref:System.Collections.ICollection.SyncRoot%2A>屬性。</xref:System.Collections.ICollection.SyncRoot%2A> </xref:System.Collections.Specialized.NameObjectCollectionBase> 同步處理的程式碼必須在上執行作業<xref:System.Collections.ICollection.SyncRoot%2A>屬性<xref:System.Collections.Specialized.NameObjectCollectionBase>物件，直接依據<xref:System.Collections.Specialized.NameObjectCollectionBase>物件。</xref:System.Collections.Specialized.NameObjectCollectionBase> </xref:System.Collections.Specialized.NameObjectCollectionBase> </xref:System.Collections.ICollection.SyncRoot%2A> 這可確保衍生自其他物件的集合正常運作。 具體而言，保持正常的同步處理與其他可能同時修改的執行緒<xref:System.Collections.Specialized.NameObjectCollectionBase>物件。</xref:System.Collections.Specialized.NameObjectCollectionBase>       透過集合進行列舉在本質上並不是安全執行緒程序。 即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。 若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。       下列程式碼範例示範如何鎖定集合使用<xref:System.Collections.ICollection.SyncRoot%2A>在整個列舉過程。</xref:System.Collections.ICollection.SyncRoot%2A>       [!code-cs[System.Collections.Specialized.NameObjectCollectionBase#2](~/add/codesnippet/csharp/240bf954-5c3e-40ea-821a-_1.cs)][!code-cpp[System.Collections.Specialized.NameObjectCollectionBase#2](~/add/codesnippet/cpp/240bf954-5c3e-40ea-821a-_1.cpp)][!code-vb[System.Collections.Specialized.NameObjectCollectionBase#2](~/add/codesnippet/visualbasic/240bf954-5c3e-40ea-821a-_1.vb) ]擷取這個屬性的值是一種 o （1） 運算。    "
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "物件，可用來同步處理存取具備<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>物件。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Runtime.Serialization.SerializationException
  isExternal: true
  name: System.Runtime.Serialization.SerializationException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: NameObjectCollectionBase()
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase()
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IEqualityComparer)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: NameObjectCollectionBase(IEqualityComparer)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(IEqualityComparer)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(IEqualityComparer)
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: true
  name: IEqualityComparer
  nameWithType: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: NameObjectCollectionBase(Int32)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: NameObjectCollectionBase(IHashCodeProvider,IComparer)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(IHashCodeProvider,IComparer)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(IHashCodeProvider,IComparer)
- uid: System.Collections.IHashCodeProvider
  parent: System.Collections
  isExternal: false
  name: IHashCodeProvider
  nameWithType: IHashCodeProvider
  fullName: System.Collections.IHashCodeProvider
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IEqualityComparer)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: NameObjectCollectionBase(Int32,IEqualityComparer)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(Int32,IEqualityComparer)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(Int32,IEqualityComparer)
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: NameObjectCollectionBase(SerializationInfo,StreamingContext)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(SerializationInfo,StreamingContext)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: NameObjectCollectionBase(Int32,IHashCodeProvider,IComparer)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(Int32,IHashCodeProvider,IComparer)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(Int32,IHashCodeProvider,IComparer)
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseAdd(String,Object)
  nameWithType: NameObjectCollectionBase.BaseAdd(String,Object)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseClear
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseClear()
  nameWithType: NameObjectCollectionBase.BaseClear()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseClear()
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseGet(Int32)
  nameWithType: NameObjectCollectionBase.BaseGet(Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(Int32)
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseGet(String)
  nameWithType: NameObjectCollectionBase.BaseGet(String)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(String)
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseGetAllKeys()
  nameWithType: NameObjectCollectionBase.BaseGetAllKeys()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseGetAllValues()
  nameWithType: NameObjectCollectionBase.BaseGetAllValues()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues()
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseGetAllValues(Type)
  nameWithType: NameObjectCollectionBase.BaseGetAllValues(Type)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseGetKey(Int32)
  nameWithType: NameObjectCollectionBase.BaseGetKey(Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(Int32)
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseHasKeys()
  nameWithType: NameObjectCollectionBase.BaseHasKeys()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseRemove(String)
  nameWithType: NameObjectCollectionBase.BaseRemove(String)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(String)
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseRemoveAt(Int32)
  nameWithType: NameObjectCollectionBase.BaseRemoveAt(Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(Int32)
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseSet(Int32,Object)
  nameWithType: NameObjectCollectionBase.BaseSet(Int32,Object)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(Int32,Object)
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseSet(String,Object)
  nameWithType: NameObjectCollectionBase.BaseSet(String,Object)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(String,Object)
- uid: System.Collections.Specialized.NameObjectCollectionBase.Count
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: Count
  nameWithType: NameObjectCollectionBase.Count
  fullName: System.Collections.Specialized.NameObjectCollectionBase.Count
- uid: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: GetEnumerator()
  nameWithType: NameObjectCollectionBase.GetEnumerator()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Specialized.NameObjectCollectionBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: NameObjectCollectionBase.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: IsReadOnly
  nameWithType: NameObjectCollectionBase.IsReadOnly
  fullName: System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly
- uid: System.Collections.Specialized.NameObjectCollectionBase.Keys
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: Keys
  nameWithType: NameObjectCollectionBase.Keys
  fullName: System.Collections.Specialized.NameObjectCollectionBase.Keys
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameObjectCollectionBase+KeysCollection
  nameWithType: NameObjectCollectionBase+KeysCollection
  fullName: System.Collections.Specialized.NameObjectCollectionBase+KeysCollection
- uid: System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization(System.Object)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: OnDeserialization(Object)
  nameWithType: NameObjectCollectionBase.OnDeserialization(Object)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization(Object)
- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: NameObjectCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: NameObjectCollectionBase.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: NameObjectCollectionBase.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: NameObjectCollectionBase
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseAdd
  nameWithType: NameObjectCollectionBase.BaseAdd
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseClear*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseClear
  nameWithType: NameObjectCollectionBase.BaseClear
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseGet
  nameWithType: NameObjectCollectionBase.BaseGet
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseGetAllKeys
  nameWithType: NameObjectCollectionBase.BaseGetAllKeys
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseGetAllValues
  nameWithType: NameObjectCollectionBase.BaseGetAllValues
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseGetKey
  nameWithType: NameObjectCollectionBase.BaseGetKey
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseHasKeys
  nameWithType: NameObjectCollectionBase.BaseHasKeys
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseRemove
  nameWithType: NameObjectCollectionBase.BaseRemove
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseRemoveAt
  nameWithType: NameObjectCollectionBase.BaseRemoveAt
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseSet
  nameWithType: NameObjectCollectionBase.BaseSet
- uid: System.Collections.Specialized.NameObjectCollectionBase.Count*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: Count
  nameWithType: NameObjectCollectionBase.Count
- uid: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: GetEnumerator
  nameWithType: NameObjectCollectionBase.GetEnumerator
- uid: System.Collections.Specialized.NameObjectCollectionBase.GetObjectData*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: GetObjectData
  nameWithType: NameObjectCollectionBase.GetObjectData
- uid: System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: IsReadOnly
  nameWithType: NameObjectCollectionBase.IsReadOnly
- uid: System.Collections.Specialized.NameObjectCollectionBase.Keys*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: Keys
  nameWithType: NameObjectCollectionBase.Keys
- uid: System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: OnDeserialization
  nameWithType: NameObjectCollectionBase.OnDeserialization
- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: NameObjectCollectionBase.System.Collections.ICollection.CopyTo
- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: NameObjectCollectionBase.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: NameObjectCollectionBase.System.Collections.ICollection.SyncRoot
