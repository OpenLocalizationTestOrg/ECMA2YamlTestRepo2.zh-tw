### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.XmlDataSource
  id: XmlDataSource
  children:
  - System.Web.UI.WebControls.XmlDataSource.#ctor
  - System.Web.UI.WebControls.XmlDataSource.CacheDuration
  - System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy
  - System.Web.UI.WebControls.XmlDataSource.CacheKeyContext
  - System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency
  - System.Web.UI.WebControls.XmlDataSource.Data
  - System.Web.UI.WebControls.XmlDataSource.DataFile
  - System.Web.UI.WebControls.XmlDataSource.EnableCaching
  - System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(System.String)
  - System.Web.UI.WebControls.XmlDataSource.GetXmlDocument
  - System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)
  - System.Web.UI.WebControls.XmlDataSource.Save
  - System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection
  - System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList
  - System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView(System.String)
  - System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames
  - System.Web.UI.WebControls.XmlDataSource.Transform
  - System.Web.UI.WebControls.XmlDataSource.TransformArgumentList
  - System.Web.UI.WebControls.XmlDataSource.TransformFile
  - System.Web.UI.WebControls.XmlDataSource.Transforming
  - System.Web.UI.WebControls.XmlDataSource.XPath
  langs:
  - csharp
  name: XmlDataSource
  nameWithType: XmlDataSource
  fullName: System.Web.UI.WebControls.XmlDataSource
  type: Class
  summary: "表示資料繫結控制項的 XML 資料來源。"
  remarks: "本主題內容:-[簡介](#introduction)      -   [XML 資料的來源](#source_of_xml_data)      -   [更新 XML 資料](#updating_xml_data)      -   [指定 XSL 轉換](#specifying_an_xsl_transformation)      -   [篩選使用 XPath 運算式](#filtering_using_an_xpath_expression)      -   [快取](#caching)      -   [額外的功能](#additional_features)      -   [資料檢視物件](#data_view_object)      -   [宣告式語法](#declarative_syntax)<a name=&quot;introduction&quot;> </a> # # 簡介 XmlDataSource 控制項是逐一呈現資料繫結控制項的 XML 資料的資料來源控制項。       XmlDataSource 控制項可以用於資料繫結控制項所顯示階層式和表格式資料。 XmlDataSource 控制項通常會用來在唯讀案例中顯示階層式 XML 資料中。 因為 XmlDataSource 控制項延伸<xref:System.Web.UI.HierarchicalDataSourceControl>類別，它適用於階層式資料。</xref:System.Web.UI.HierarchicalDataSourceControl> XmlDataSource 控制項也會實作<xref:System.Web.UI.IDataSource>的介面，並使用表格或清單樣式、 資料。</xref:System.Web.UI.IDataSource>      > [!NOTE] > 基於安全性考量，沒有任何的 XmlDataSource 控制項屬性儲存在檢視狀態。 因為這是可行的用戶端上檢視狀態的內容進行解碼，儲存機密資訊的資料結構或其內容可能會為您公開資訊洩漏威脅。 請注意，如果您要儲存的資訊，例如<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>屬性在檢視狀態中，您可以啟用加密來保護內容，藉由設定<xref:System.Web.UI.Page.ViewStateEncryptionMode%2A>上`@ Page`指示詞。</xref:System.Web.UI.Page.ViewStateEncryptionMode%2A> </xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>       網頁開發人員會使用 XmlDataSource 控制項來顯示使用資料繫結控制項的 XML 資料。      <a name=&quot;source_of_xml_data&quot;></a># # 從 XML 檔案中所指定的 XML 資料的 XmlDataSource 來源通常載入的 XML 資料<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>屬性。</xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> XML 資料也可以直接由資料來源控制項在表單中使用字串儲存<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>屬性。</xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 如果您想要轉換的 XML 資料顯示的資料繫結控制項之前，您可以提供可延伸樣式表語言 (XSL) 樣式表的轉換。 所指定的 XML 資料，您通常載入樣式表檔案中，如<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>屬性，但是您也可以儲存它以字串形式直接使用<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>屬性。</xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> </xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>      <a name=&quot;updating_xml_data&quot;></a># # 更新 XML 資料的 XmlDataSource 控制項常用在唯讀資料的案例資料繫結控制項顯示 XML 資料的位置。 不過，您也可以使用 XmlDataSource 控制項編輯 XML 資料。 若要編輯的 XML 資料，請呼叫<xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A>方法來擷取<xref:System.Xml.XmlDataDocument>是 XML 資料的記憶體中表示的物件。</xref:System.Xml.XmlDataDocument> </xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> 您可以使用所公開的物件模型<xref:System.Xml.XmlDataDocument>和<xref:System.Xml.XmlNode>它包含或使用 XPath 篩選運算式來操作文件中的資料物件。</xref:System.Xml.XmlNode> </xref:System.Xml.XmlDataDocument> 當您已經變更的 XML 資料的記憶體中表示時，您可以將儲存至磁碟，藉由呼叫<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>方法。</xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>       有一些限制的編輯功能的 XmlDataSource 控制項:-的 XML 資料必須載入從 XML 檔案所指定之<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>屬性，不是從 XML 中指定的內嵌<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>屬性。</xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> </xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>      -沒有 XSLT 轉換中可指定<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>或<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>屬性。</xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> </xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>      -<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>方法不會處理儲存作業同時由不同的要求。</xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 如果多個使用者正在編輯的 XmlDataSource 透過 XML 檔案，則不保證所有的使用者正在使用相同的資料。 也可能會<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>作業，因為這些相同的並行問題而失敗。</xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>      <a name=&quot;specifying_an_xsl_transformation&quot;></a># # 指定的 XML 資料執行 XSL 轉換的一般作業為轉換從一種 XML 資料集到另一個。 XmlDataSource 控制項支援使用 XML 轉換<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>和<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>屬性，指定要傳遞至資料繫結控制項之前，套用至 XML 資料的 XSL 樣式表，而<xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>屬性，可讓您動態 XSLT 樣式表引數提供給可供轉換期間的 XSL 樣式表。</xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> </xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> </xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 如果您指定篩選運算式使用 XPath<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>屬性，它會在轉換之後套用。</xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>      > [!NOTE] > XmlDataSource 類別會使用已被取代<xref:System.Xml.Xsl.XslTransform>類別以執行 XSL 轉換。</xref:System.Xml.Xsl.XslTransform> 如果您想要使用的<xref:System.Xml.Xsl.XslTransform>類別已被取代，請將套用的<xref:System.Xml.Xsl.XslCompiledTransform>類別。</xref:System.Xml.Xsl.XslCompiledTransform>轉換</xref:System.Xml.Xsl.XslTransform>之後導入的樣式表功能      <a name=&quot;filtering_using_an_xpath_expression&quot;></a># # 篩選使用的 XPath 運算式的預設值，控制會載入所識別的 XML 檔案中的所有 XML 資料的 XmlDataSource<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>屬性或找到的內嵌在<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>屬性，但是您可以篩選使用 XPath 運算式的資料。</xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> </xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>屬性支援 XML 資料會載入並轉換後所套用的 XPath 語法篩選器。</xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>      <a name=&quot;caching&quot;></a># # 快取的效能考量，快取預設會啟用 XmlDataSource 控制項。 開啟和讀取伺服器上的 XML 檔案，每次要求頁面可能會降低應用程式的效能。 快取可讓您的伺服器，但會犧牲 Web 伺服器上的記憶體上減少的處理負載在大部分情況下，這是理想的取捨。 XmlDataSource 自動會快取的資料時<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>屬性設定為`true`，而<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>屬性設定為快取將資料儲存在快取失效之前的秒數。</xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 您可以使用<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>，進一步微調資料來源控制項的快取行為。</xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>      <a name=&quot;additional_features&quot;></a># # 額外的功能下表列出 XmlDataSource 控制項所支援的其他功能。      |功能 |描述 |  |----------------|-----------------|  |排序 |不支援由 XmlDataSource 控制項。 |  |篩選 |<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>屬性可用來篩選使用適當的 XPath 運算式的 XML 資料。 |  |分頁 |不支援由 XmlDataSource 控制項。 |  |更新 |支援的直接操作<xref:System.Xml.XmlDataDocument>，然後再呼叫<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>方法。 |  |刪除 |支援的直接操作<xref:System.Xml.XmlDataDocument>，然後再呼叫<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>方法。 |  |插入 |支援的直接操作<xref:System.Xml.XmlDataDocument>，然後再呼叫<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>方法。 |  |快取 |根據預設，啟用使用<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>屬性設定為 0 （無限時） 和<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>屬性設定為<xref:System.Web.UI.DataSourceCacheExpiry>。 |     <a name=&quot;data_view_object&quot;> </a> # # 資料檢視物件，因為 XmlDataSource 控制項支援將顯示階層式資料的資料繫結控制項，以及顯示表格式資料控制項、 資料來源控制項支援多種類型的資料來源檢視物件上其基礎 XML 資料。</xref:System.Web.UI.DataSourceCacheExpiry> </xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> </xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> </xref:System.Xml.XmlDataDocument> </xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> </xref:System.Xml.XmlDataDocument> </xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> </xref:System.Xml.XmlDataDocument> </xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> XmlDataSource 控制項擷取的單一具名<xref:System.Web.UI.WebControls.XmlDataSourceView>顯示表格式資料的資料繫結控制項搭配使用時的物件。</xref:System.Web.UI.WebControls.XmlDataSourceView> <xref:System.Web.UI.IDataSource.GetViewNames%2A>方法會識別此單一具名檢視。</xref:System.Web.UI.IDataSource.GetViewNames%2A> 顯示階層式資料的資料繫結控制項搭配使用時，XmlDataSource 控制項擷取<xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView>的任何唯一的階層式路徑傳遞至<xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A>方法。</xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A> </xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView>      <a name=&quot;declarative_syntax&quot;></a># # 宣告式語法```   <asp:XmlDataSource       CacheDuration=&quot;string|Infinite&quot;       CacheExpirationPolicy=&quot;Absolute|Sliding&quot;       CacheKeyDependency=&quot;string&quot;       DataFile=&quot;string&quot;       EnableCaching=&quot;True|False&quot;       EnableTheming=&quot;True|False&quot;       EnableViewState=&quot;True|False&quot;       ID=&quot;string&quot;       OnDataBinding=&quot;DataBinding event handler&quot;       OnDisposed=&quot;Disposed event handler&quot;       OnInit=&quot;Init event handler&quot;       OnLoad=&quot;Load event handler&quot;       OnPreRender=&quot;PreRender event handler&quot;       OnTransforming=&quot;Transforming event handler&quot;       OnUnload=&quot;Unload event handler&quot;       runat=&quot;server&quot;       SkinID=&quot;string&quot;       TransformArgumentList=&quot;string&quot;       TransformFile=&quot;string&quot;       Visible=&quot;True|False&quot;       XPath=&quot;string&quot;   >       <Data>string</Data>       <Transform>string</Transform>   </asp:XmlDataSource>   ```"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an XmlDataSource control with a <xref:System.Web.UI.WebControls.TreeView> control to display XML data from the sample XML file. The second example demonstrates how to use an XmlDataSource control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display XML data.  \n  \n The following code example demonstrates how to use an XmlDataSource control with a <xref:System.Web.UI.WebControls.TreeView> control to display XML data. The XmlDataSource loads XML data from the XML file identified by the <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> property.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_1#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_22_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_22_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<books>  \n   <computerbooks>  \n     <book title=\"Secrets of Silicon Valley\" author=\"Sheryl Hunter\"/>  \n     <book title=\"Straight Talk About Computers\" author=\"Dean Straight\"/>  \n     <book title=\"You Can Combat Computer Stress!\" author=\"Marjorie Green\"/>                  \n   </computerbooks>  \n   <cookbooks>  \n     <book title=\"Silicon Valley Gastronomic Treats\" author=\"Innes del Castill\"/>  \n   </cookbooks>  \n</books>  \n```  \n  \n The following code example demonstrates how to use an XmlDataSource control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display XML data. The <xref:System.Web.UI.WebControls.Repeater> control uses an XPath data-binding expression to bind to data items within the XML document that the XmlDataSource represents. For more information about `XPath` and `XPathSelect` data-binding syntax, see the <xref:System.Web.UI.XPathBinder> class.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_14#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_22_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_14#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_22_2.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>  \n <orders>  \n   <order>  \n     <customer id=\"12345\" />  \n     <customername>  \n         <firstn>John</firstn>  \n         <lastn>Smith</lastn>  \n     </customername>  \n     <transaction id=\"12345\" />  \n     <shipaddress>  \n         <address1>1234 Tenth Avenue</address1>  \n         <city>Bellevue</city>  \n         <state>Washington</state>  \n         <zip>98001</zip>  \n     </shipaddress>  \n     <summary>  \n         <item dept=\"tools\">screwdriver</item>  \n         <item dept=\"tools\">hammer</item>  \n         <item dept=\"plumbing\">fixture</item>  \n     </summary>  \n   </order>  \n</orders>  \n```"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Transforming")]

      [System.ComponentModel.DefaultProperty("DataFile")]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.XmlDataSource))]

      [System.Web.UI.ParseChildren(true)]

      [System.Web.UI.PersistChildren(false)]

      public class XmlDataSource : System.Web.UI.HierarchicalDataSourceControl, System.ComponentModel.IListSource, System.Web.UI.IDataSource
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.HierarchicalDataSourceControl
  implements:
  - System.ComponentModel.IListSource
  - System.Web.UI.IDataSource
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnInit(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnPreRender(System.EventArgs)
  - System.Web.UI.Control.OnUnload(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SaveViewState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.TrackViewState
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.HierarchicalDataSourceControl.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.HierarchicalDataSourceControl.ClientID
  - System.Web.UI.HierarchicalDataSourceControl.ClientIDMode
  - System.Web.UI.HierarchicalDataSourceControl.Controls
  - System.Web.UI.HierarchicalDataSourceControl.CreateControlCollection
  - System.Web.UI.HierarchicalDataSourceControl.EnableTheming
  - System.Web.UI.HierarchicalDataSourceControl.FindControl(System.String)
  - System.Web.UI.HierarchicalDataSourceControl.Focus
  - System.Web.UI.HierarchicalDataSourceControl.HasControls
  - System.Web.UI.HierarchicalDataSourceControl.OnDataSourceChanged(System.EventArgs)
  - System.Web.UI.HierarchicalDataSourceControl.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.HierarchicalDataSourceControl.SkinID
  - System.Web.UI.HierarchicalDataSourceControl.System#Web#UI#IHierarchicalDataSource#GetHierarchicalView(System.String)
  - System.Web.UI.HierarchicalDataSourceControl.Visible
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: XmlDataSource()
  nameWithType: XmlDataSource.XmlDataSource()
  fullName: System.Web.UI.WebControls.XmlDataSource.XmlDataSource()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "建立的新執行個體<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>類別。"
  syntax:
    content: public XmlDataSource ();
    parameters: []
  overload: System.Web.UI.WebControls.XmlDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.CacheDuration
  id: CacheDuration
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: CacheDuration
  nameWithType: XmlDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheDuration
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定的時間長度 （秒），資料來源控制項會快取擷取的資料。"
  remarks: "<xref:System.Web.UI.WebControls.XmlDataSource>控制項會自動快取資料，當下列適用於:-<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>屬性設定為`true`。</xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> </xref:System.Web.UI.WebControls.XmlDataSource>      -CacheDuration 屬性設定為大於 0，表示快取將資料儲存在快取失效之前的秒數。       對任何變更<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>屬性或包含 XML 資料檔案的內容會導致快取失效。</xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>       根據預設，CacheDuration 屬性設定為 0，表示無限期的快取，而且資料來源將快取資料，直到它所依據的 XML 檔案變更。       快取的行為由持續時間的組合和<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>設定。</xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 如果<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>設<xref:System.Web.UI.DataSourceCacheExpiry>、<xref:System.Web.UI.WebControls.XmlDataSource>控制快取資料的第一個資料擷取作業、 保留在記憶體中 CacheDuration，所指定的時間和之後的時間也已屆滿，使它。</xref:System.Web.UI.WebControls.XmlDataSource> </xref:System.Web.UI.DataSourceCacheExpiry> </xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 然後會在下一項作業時重新整理快取。 如果<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>設<xref:System.Web.UI.DataSourceCacheExpiry>，資料來源控制項快取資料的第一項資料擷取作業，但保留快取中的每個後續的作業時的時間間隔會重設。</xref:System.Web.UI.DataSourceCacheExpiry> </xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 如果沒有任何活動時間等於 CacheDuration 自上次擷取資料，只將到期快取。"
  example:
  - "The following code example demonstrates how to enable caching when using the <xref:System.Web.UI.WebControls.XmlDataSource> control to display data contained in an XML file. Caching is enabled when the <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> property is set to `true` and the CacheDuration is set to the number of seconds that the data is cached by the data source control.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_16#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_928_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_928_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<books>  \n   <computerbooks>  \n     <book title=\"Secrets of Silicon Valley\" author=\"Sheryl Hunter\"/>  \n     <book title=\"Straight Talk About Computers\" author=\"Dean Straight\"/>  \n     <book title=\"You Can Combat Computer Stress!\" author=\"Marjorie Green\"/>  \n   </computerbooks>  \n   <cookbooks>  \n     <book title=\"Silicon Valley Gastronomic Treats\" author=\"Innes del Castill\"/>  \n   </cookbooks>  \n</books>  \n```"
  syntax:
    content: public virtual int CacheDuration { get; set; }
    return:
      type: System.Int32
      description: "的秒數<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>控制快取的資料擷取作業結果。 預設值為 0。"
  overload: System.Web.UI.WebControls.XmlDataSource.CacheDuration*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy
  id: CacheExpirationPolicy
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: CacheExpirationPolicy
  nameWithType: XmlDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定快取到期原則，並結合來描述資料來源控制項所使用的快取的快取行為的快取持續時間。"
  remarks: "快取的行為由多種<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>和 CacheExpirationPolicy 設定。</xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 如果 CacheExpirationPolicy 設<xref:System.Web.UI.DataSourceCacheExpiry>、<xref:System.Web.UI.WebControls.XmlDataSource>會快取資料的第一個資料擷取作業、 保留在記憶體中所指定的時間量<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>之後也已屆滿時,，則它。</xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.XmlDataSource> </xref:System.Web.UI.DataSourceCacheExpiry> 然後會在下一項作業時重新整理快取。 如果設為 CacheExpirationPolicy <xref:System.Web.UI.DataSourceCacheExpiry>，資料來源控制項快取資料的第一項資料擷取作業，但保留快取中的每個後續的作業時的時間間隔會重設。</xref:System.Web.UI.DataSourceCacheExpiry> 快取逾期，只有當沒有任何活動時間等於<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>自上次擷取資料。</xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>"
  example:
  - "The following code example demonstrates how to enable caching when using the <xref:System.Web.UI.WebControls.XmlDataSource> control to display data contained in an XML file. Caching is enabled when the <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> property is set to `true` and the <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> is set to the number of seconds that the data is cached by the data source control.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_16#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_427_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_427_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<books>  \n   <computerbooks>  \n     <book title=\"Secrets of Silicon Valley\" author=\"Sheryl Hunter\"/>  \n     <book title=\"Straight Talk About Computers\" author=\"Dean Straight\"/>  \n     <book title=\"You Can Combat Computer Stress!\" author=\"Marjorie Green\"/>                  \n   </computerbooks>  \n   <cookbooks>  \n     <book title=\"Silicon Valley Gastronomic Treats\" author=\"Innes del Castill\"/>  \n   </cookbooks>  \n</books>  \n```"
  syntax:
    content: public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }
    return:
      type: System.Web.UI.DataSourceCacheExpiry
      description: "其中一個<xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;></xref>值。 預設快取到期原則設定是<xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;> </xref>。"
  overload: System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.CacheKeyContext
  id: CacheKeyContext
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: CacheKeyContext
  nameWithType: XmlDataSource.CacheKeyContext
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheKeyContext
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定資料來源控制項的快取索引鍵的值從檢視狀態，或將快取的索引鍵來檢視狀態。"
  remarks: "CacheKeyContext 屬性可讓您以手動方式建立的快取索引鍵<xref:System.Web.UI.WebControls.XmlDataSource>控制項。</xref:System.Web.UI.WebControls.XmlDataSource> 這是必要的只有當您要指定包含 XML 或 XSLT 的資料，而不是指定包含資料的檔案控制的物件。 您可以將資料指派至控制項，資料不會用來產生快取索引鍵。 相反地，您必須以手動方式產生的唯一快取索引鍵如果您打算要更新的資料物件。"
  syntax:
    content: public virtual string CacheKeyContext { get; set; }
    return:
      type: System.String
      description: "快取索引鍵或為空字串，如果快取索引鍵不在檢視狀態的值。"
  overload: System.Web.UI.WebControls.XmlDataSource.CacheKeyContext*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency
  id: CacheKeyDependency
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: CacheKeyDependency
  nameWithType: XmlDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定使用者定義索引鍵相依性連結至資料來源控制項所建立的所有資料快取物件。 所有快取物件明確到期時金鑰到期。"
  remarks: "<xref:System.Web.UI.WebControls.XmlDataSource>控制項支援的資料快取。</xref:System.Web.UI.WebControls.XmlDataSource> 雖然快取資料，則<xref:System.Web.UI.WebControls.XmlDataSource>從快取，而不是從基礎資料檔擷取資料。</xref:System.Web.UI.WebControls.XmlDataSource> 當快取到期時，它會從基礎檔案擷取資料，並重新快取資料。       您可以設定要建立所建立的所有快取項目之間的相依性的 CacheKeyDependency 屬性<xref:System.Web.UI.WebControls.XmlDataSource>控制項和索引鍵。</xref:System.Web.UI.WebControls.XmlDataSource> 您以程式設計的方式會使所有快取項目失效在任何時間，索引鍵設定為已過期。       由於用來建立 CacheKeyDependency 的屬性，多個<xref:System.Web.UI.WebControls.XmlDataSource>控制項可以使用相同的快取，讓他們從相同的 XML 檔案載入相同的資料和轉換檔案並具有相同的案例中<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>設定。</xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> </xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.XmlDataSource>"
  syntax:
    content: public virtual string CacheKeyDependency { get; set; }
    return:
      type: System.String
      description: "可識別的所有快取物件的索引鍵建立<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>控制項。"
  overload: System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.Data
  id: Data
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: Data
  nameWithType: XmlDataSource.Data
  fullName: System.Web.UI.WebControls.XmlDataSource.Data
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定資料來源控制項繫結至 XML 資料的區塊。"
  remarks: "在宣告式的情況下，資料屬性會指定為多行的內部屬性<xref:System.Web.UI.WebControls.XmlDataSource>物件。</xref:System.Web.UI.WebControls.XmlDataSource> 內部屬性是相容的 XML 資料，因為它可讓您以任何方式將 XML 資料格式化，並且忽略字元填補問題，例如填補引號字元。       如果兩個<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>，且資料屬性設定，則<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>屬性會優先，會使用 XML 檔案中的資料，而非資料屬性中指定的 XML 資料。</xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> </xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>       如果您變更資料屬性的值<xref:System.Web.UI.IDataSource.DataSourceChanged>就會引發事件。</xref:System.Web.UI.IDataSource.DataSourceChanged> 如果已啟用快取，而且您變更資料的值，則會快取失效。"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control to display inline XML data contained by the Data property with a <xref:System.Web.UI.WebControls.TreeView> control.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_10#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_378_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_10#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_378_1.aspx)]"
  syntax:
    content: public virtual string Data { get; set; }
    return:
      type: System.String
      description: "內嵌 XML 資料的字串， <xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;> </xref>控制項繫結至。 預設值是&lt;xref:System.String.Empty?displayProperty=fullName&gt;。"
  overload: System.Web.UI.WebControls.XmlDataSource.Data*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "正在載入文件。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.DataFile
  id: DataFile
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: DataFile
  nameWithType: XmlDataSource.DataFile
  fullName: System.Web.UI.WebControls.XmlDataSource.DataFile
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "指定資料來源所繫結的 XML 檔案的檔案名稱。"
  remarks: "如果這兩個資料檔和<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>屬性會設定、 DataFile 屬性會優先和 XML 檔案中的資料會用來取代在指定的 XML 資料<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>屬性。</xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> </xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>       如果您變更 DataFile 屬性的值<xref:System.Web.UI.IDataSource.DataSourceChanged>就會引發事件。</xref:System.Web.UI.IDataSource.DataSourceChanged> 如果已啟用快取，而且您變更資料檔的值，則會快取失效。"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control to display XML data contained in a file with a <xref:System.Web.UI.WebControls.TreeView> control.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_1#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_472_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_472_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<books>  \n   <computerbooks>  \n     <book title=\"Secrets of Silicon Valley\" author=\"Sheryl Hunter\"/>  \n     <book title=\"Straight Talk About Computers\" author=\"Dean Straight\"/>  \n     <book title=\"You Can Combat Computer Stress!\" author=\"Marjorie Green\"/>                  \n   </computerbooks>  \n   <cookbooks>  \n     <book title=\"Silicon Valley Gastronomic Treats\" author=\"Innes del Castill\"/>  \n   </cookbooks>  \n</books>  \n```"
  syntax:
    content: public virtual string DataFile { get; set; }
    return:
      type: System.String
      description: "實體的絕對路徑或相對路徑，包含資料的 XML 檔案， <xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;> </xref>控制代表。 預設值是&lt;xref:System.String.Empty?displayProperty=fullName&gt;。"
  overload: System.Web.UI.WebControls.XmlDataSource.DataFile*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "正在載入文件。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.EnableCaching
  id: EnableCaching
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: EnableCaching
  nameWithType: XmlDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.XmlDataSource.EnableCaching
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，指出是否<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>控制項已啟用快取的資料。"
  remarks: "<xref:System.Web.UI.WebControls.XmlDataSource>控制項會自動快取資料，當 EnableCaching 屬性設定為`true`。</xref:System.Web.UI.WebControls.XmlDataSource> 根據預設，<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>屬性設定為 0，表示無限期的快取，以及資料來源將快取資料，直到它所依據的 XML 檔案變更。</xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 如果您設定<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>屬性大於 0 的值，快取儲存的資料之前擷取最新的組那麼多的秒數。</xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>       如果 EnableCaching 屬性設定為`true`和<xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>屬性設定時，快取項目不會自動會失效轉換引數清單中的參數變更時。</xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> 在此情況下，您必須撰寫程式碼，以確認快取設定<xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>屬性。</xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>"
  example:
  - "The following code example demonstrates how to enable caching when using the <xref:System.Web.UI.WebControls.XmlDataSource> control to display data contained in an XML file. Caching is enabled when the EnableCaching property is set to `true` and the <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> is set to the number of seconds that the data is cached by the data source control.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_16#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_365_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_365_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<books>  \n   <computerbooks>  \n     <book title=\"Secrets of Silicon Valley\" author=\"Sheryl Hunter\"/>  \n     <book title=\"Straight Talk About Computers\" author=\"Dean Straight\"/>  \n     <book title=\"You Can Combat Computer Stress!\" author=\"Marjorie Green\"/>                  \n   </computerbooks>  \n   <cookbooks>  \n     <book title=\"Silicon Valley Gastronomic Treats\" author=\"Innes del Castill\"/>  \n   </cookbooks>  \n</books>  \n```"
  syntax:
    content: public virtual bool EnableCaching { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果資料快取的資料來源控制項; 已啟用否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.XmlDataSource.EnableCaching*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(System.String)
  id: GetHierarchicalView(System.String)
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: GetHierarchicalView(String)
  nameWithType: XmlDataSource.GetHierarchicalView(String)
  fullName: System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得資料來源檢視物件，如<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>控制項。 <code> viewPath </code>參數可以是 XPath 運算式。"
  remarks: "您可以呼叫 GetHierarchicalView 方法來擷取<xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView>物件相關聯<xref:System.Web.UI.WebControls.XmlDataSource>控制項。</xref:System.Web.UI.WebControls.XmlDataSource> </xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView> 如果您指定`viewPath`值<xref:System.Web.UI.WebControls.XmlDataSource>控制傳回資料來源檢視物件，表示所識別的節點上檢視`viewPath`，以及其所有子節點。</xref:System.Web.UI.WebControls.XmlDataSource> 如果您設定`viewPath`至<xref:System.String.Empty?displayProperty=fullName>、<xref:System.Web.UI.WebControls.XmlDataSource>控制檢查<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>屬性來判斷要建立資料來源檢視的根節點。</xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> </xref:System.Web.UI.WebControls.XmlDataSource> </xref:System.String.Empty?displayProperty=fullName> 如果<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>設定屬性，則<xref:System.Web.UI.WebControls.XmlDataSource>控制項將使用它來傳回在相同的資料來源檢視方式`viewPath`運算式使用。</xref:System.Web.UI.WebControls.XmlDataSource> </xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 如果<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>未設定屬性，<xref:System.Web.UI.WebControls.XmlDataSource>控制項的 XML 資料中傳回資料的所有節點的檢視。</xref:System.Web.UI.WebControls.XmlDataSource> </xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>"
  syntax:
    content: protected override System.Web.UI.HierarchicalDataSourceView GetHierarchicalView (string viewPath);
    parameters:
    - id: viewPath
      type: System.String
      description: "XPath 運算式，可識別從中建置目前的階層式檢視的節點。"
    return:
      type: System.Web.UI.HierarchicalDataSourceView
      description: "傳回<xref href=&quot;System.Web.UI.WebControls.XmlHierarchicalDataSourceView&quot;></xref>物件，代表所識別的資料節點為開頭的資料的單一檢視<code> viewPath </code>。"
  overload: System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.GetXmlDocument
  id: GetXmlDocument
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: GetXmlDocument()
  nameWithType: XmlDataSource.GetXmlDocument()
  fullName: System.Web.UI.WebControls.XmlDataSource.GetXmlDocument()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "將 XML 資料載入到記憶體中，直接從基礎資料存放區，或是從快取，並傳回它的形式<xref href=&quot;System.Xml.XmlDataDocument&quot;></xref>物件。"
  remarks: "針對直接存取基礎 XML 資料的記憶體中表示使用 GetXmlDocument 方法。       您可以操作傳回<xref:System.Xml.XmlDataDocument>物件，然後呼叫<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>保存您所指定的 XML 檔案變更<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>屬性。</xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> </xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> </xref:System.Xml.XmlDataDocument> 必須符合幾項需求，再<xref:System.Xml.XmlDataDocument>物件可以儲存成功。</xref:System.Xml.XmlDataDocument> 如需詳細資訊，請參閱<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>方法。</xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>"
  example:
  - "This section contains two code examples. The first example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a <xref:System.Web.UI.WebControls.TreeView> control to display and edit XML data contained in an XML file. The second example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display and edit XML data contained in an XML file.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a <xref:System.Web.UI.WebControls.TreeView> control to display and edit XML data contained in an XML file. The data is manipulated in memory using the GetXmlDocument method every time you select a <xref:System.Web.UI.WebControls.TreeView> node, and is then saved to the XML file. Finally, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> is called on the <xref:System.Web.UI.WebControls.TreeView> control to refresh the data that it displays.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_17#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_196_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_196_1.aspx)]  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display and edit XML data contained in an XML file. As with the previous example, the data is manipulated in memory using the <xref:System.Xml.XmlDataDocument> retrieved by the GetXmlDocument method. Finally, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> is called on the <xref:System.Web.UI.WebControls.TreeView> control to refresh the data that it displays.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_196_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_18#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_196_2.aspx)]  \n  \n The XML file in the code examples has the following data:  \n  \n```  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n <bookstore xmlns:bk=\"urn:samples\">  \n   <book genre=\"novel\" publicationdate=\"1999\" bk:ISBN=\"0000000000\">  \n     <title>Secrets of Silicon Valley</title>  \n     <author>  \n       <first-name>Sheryl</first-name>  \n       <last-name>Hunter</last-name>  \n     </author>  \n     <price>24.95</price>\"   \n     </book>  \n   <book genre=\"novel\" publicationdate=\"1985\" bk:ISBN=\"1111111111\">  \n     <title>Straight Talk About Computers</title>  \n     <author>  \n       <first-name>Dean</first-name>  \n       <last-name>Straight</last-name>  \n     </author>  \n     <price>29.95</price>  \n   </book>  \n</bookstore>  \n```"
  syntax:
    content: public System.Xml.XmlDocument GetXmlDocument ();
    parameters: []
    return:
      type: System.Xml.XmlDocument
      description: "<xref href=&quot;System.Xml.XmlDataDocument&quot;> </xref>物件中指定的 XML 表示<> *> 屬性或所識別的檔案中<> *> 屬性，使用任何轉換和<xref:System.Web.UI.WebControls.XmlDataSource.XPath*>套用查詢。</xref:System.Web.UI.WebControls.XmlDataSource.XPath*>"
  overload: System.Web.UI.WebControls.XmlDataSource.GetXmlDocument*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "URL 指定給<xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>屬性; 不過， <xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;> </xref>控制項沒有正確的權限之 Web 資源。</xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A URL is specified for the <xref:System.Web.UI.WebControls.XmlDataSource.DataFile*> property; however, it is not an HTTP-based URL.  \n  \n \\- or -  \n  \n A design-time relative path was not mapped correctly by the designer before using the <xref href=\"System.Web.UI.WebControls.XmlDataSource\"></xref> control.  \n  \n \\- or -  \n  \n Both caching and client impersonation are enabled. The <xref href=\"System.Web.UI.WebControls.XmlDataSource\"></xref> control does not support caching when client impersonation is enabled."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "針對指定的路徑來拒絕存取<xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>屬性。</xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)
  id: OnTransforming(System.EventArgs)
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: OnTransforming(EventArgs)
  nameWithType: XmlDataSource.OnTransforming(EventArgs)
  fullName: System.Web.UI.WebControls.XmlDataSource.OnTransforming(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "引發<xref href=&quot;System.Web.UI.WebControls.XmlDataSource.Transforming&quot;></xref>事件之前<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>控制項在其 XML 資料上執行 XSLT 轉換。"
  remarks: "引發事件會透過委派事件處理常式叫用。 如需詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。       OnTransforming 方法也允許衍生的類別處理事件，而不用附加委派。 這是處理衍生類別中的事件的慣用的技巧。"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a <xref:System.Web.UI.WebControls.TreeView> control to display transformed XML data. The XML transformation is performed using the style sheet indicated by the <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> property. Additionally, the style sheet uses transform arguments that are passed to the data source control in an <xref:System.Xml.Xsl.XsltArgumentList> object at runtime. The code example demonstrates how to pass the <xref:System.Xml.Xsl.XsltArgumentList> object to the data source control by handling the <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> event with a custom event handler, which is identified by name of the method set for the OnTransforming method.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_60_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_9#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_60_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<bookstore>  \n   <genre name=\"fiction\">  \n     <book ISBN=\"0000000000\">  \n       <title>Secrets of Silicon Valley</title>  \n       <price>12.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />             \n         <chapter num=\"2\" name=\"Body\" />            \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n   <genre name=\"novel\">  \n     <book genre=\"novel\" ISBN=\"1111111111\">  \n       <title>Straight Talk About Computers</title>  \n       <price>24.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />   \n         <chapter num=\"2\" name=\"Body\" />  \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n</bookstore>  \n```  \n  \n The XML transformation is performed using the following style sheet.  \n  \n```  \n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">  \n <xsl:param name=\"purchdate\"/>  \n <xsl:template match=\"bookstore\">  \n   <bookstore>  \n     <xsl:apply-templates select=\"genre\"/>  \n   </bookstore>  \n </xsl:template>  \n <xsl:template match=\"genre\">  \n   <genre>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"book\"/>  \n   </genre>  \n </xsl:template>  \n <xsl:template match=\"book\">  \n   <book>  \n     <xsl:attribute name=\"ISBN\">  \n       <xsl:value-of select=\"@ISBN\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"title\">  \n       <xsl:value-of select=\"title\"/>  \n       Price: <xsl:value-of select=\"price\"/>  \n           15% discount if purchased by: <xsl:value-of select=\"$purchdate\"/>        \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"chapters/chapter\" />  \n   </book>  \n </xsl:template>  \n <xsl:template match=\"chapter\">  \n   <chapter>  \n     <xsl:attribute name=\"num\">  \n       <xsl:value-of select=\"@num\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates/>  \n   </chapter>  \n </xsl:template>  \n</xsl:stylesheet>  \n```"
  syntax:
    content: protected virtual void OnTransforming (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件資料。</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.XmlDataSource.OnTransforming*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.Save
  id: Save
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: Save()
  nameWithType: XmlDataSource.Save()
  fullName: System.Web.UI.WebControls.XmlDataSource.Save()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "將目前保留在記憶體中 XML 資料儲存<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>控制磁碟<xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>屬性設定。</xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>"
  remarks: "雖然<xref:System.Web.UI.WebControls.XmlDataSource>控制項通常是在唯讀資料繫結案例中，您可以使用<xref:System.Web.UI.WebControls.XmlDataSource>編輯基礎 XML 資料檔中的 XML 資料的控制項。</xref:System.Web.UI.WebControls.XmlDataSource> </xref:System.Web.UI.WebControls.XmlDataSource> 在這些情況下，XML 資料從 XML 檔案載入<xref:System.Web.UI.WebControls.XmlDataSource>控制項。</xref:System.Web.UI.WebControls.XmlDataSource> 您修改<xref:System.Xml.XmlDataDocument>中記憶體使用<xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A>方法，並再儲存到 XML 資料檔，藉由呼叫 Save 方法。</xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> </xref:System.Xml.XmlDataDocument> 這可以讓您編輯的 XML 案例可能會符合下列條件時:-從所指定的 XML 檔案載入 XML 資料<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>屬性，不是從內嵌 XML 資料中指定<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>屬性。</xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> </xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>      -沒有 XSLT 轉換中所指定<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>或<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>屬性。</xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> </xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>       Save 方法不會處理儲存作業同時由不同的要求。 透過 XML 檔案時，如果要編輯多個使用者<xref:System.Web.UI.WebControls.XmlDataSource>控制項，所有使用者都正在使用相同的資料不保證。</xref:System.Web.UI.WebControls.XmlDataSource> 它也可能會儲存作業，因為這些相同的並行問題而失敗。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a <xref:System.Web.UI.WebControls.TreeView> control to display and edit XML data contained in an XML file. The second code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display and edit XML data contained in an XML file.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a <xref:System.Web.UI.WebControls.TreeView> control to display and edit XML data contained in an XML file. The data is manipulated in memory using the <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> method every time you select a <xref:System.Web.UI.WebControls.TreeView> node, and is then saved to the XML file. Finally, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> is called on the <xref:System.Web.UI.WebControls.TreeView> control to refresh the data that it displays.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_17#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_117_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_117_1.aspx)]  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display and edit XML data contained in an XML file. As with the previous example, the data is manipulated in memory using the <xref:System.Xml.XmlDataDocument> object retrieved by the <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> method. Finally, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> is called on the <xref:System.Web.UI.WebControls.TreeView> control to refresh the data that it displays.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_117_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_18#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_117_2.aspx)]  \n  \n The XML file in the code examples has the following data:  \n  \n```  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n <bookstore xmlns:bk=\"urn:samples\">  \n   <book genre=\"novel\" publicationdate=\"1999\" bk:ISBN=\"0000000000\">  \n     <title>Secrets of Silicon Valley</title>  \n     <author>  \n       <first-name>Sheryl</first-name>  \n       <last-name>Hunter</last-name>  \n     </author>  \n     <price>24.95</price>\"   \n     </book>  \n   <book genre=\"novel\" publicationdate=\"1985\" bk:ISBN=\"1111111111\">  \n     <title>Straight Talk About Computers</title>  \n     <author>  \n       <first-name>Dean</first-name>  \n       <last-name>Straight</last-name>  \n     </author>  \n     <price>29.95</price>  \n   </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public void Save ();
    parameters: []
  overload: System.Web.UI.WebControls.XmlDataSource.Save*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "XML data was loaded using the <xref:System.Web.UI.WebControls.XmlDataSource.Data*> property instead of the <xref:System.Web.UI.WebControls.XmlDataSource.DataFile*> property.  \n  \n \\- or -  \n  \n A URL is specified for the <xref:System.Web.UI.WebControls.XmlDataSource.DataFile*> property; however, the <xref href=\"System.Web.UI.WebControls.XmlDataSource\"></xref> control does not have the correct permissions for the Web resource."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A URL is specified for the <xref:System.Web.UI.WebControls.XmlDataSource.DataFile*> property; however, it is not an HTTP-based URL.  \n  \n \\- or -  \n  \n A design-time relative path was not mapped correctly by the designer before using the <xref href=\"System.Web.UI.WebControls.XmlDataSource\"></xref> control."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "針對指定的路徑來拒絕存取<xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>屬性。</xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection
  id: System#ComponentModel#IListSource#ContainsListCollection
  isEii: true
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: XmlDataSource.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Web.UI.WebControls.XmlDataSource.System.ComponentModel.IListSource.ContainsListCollection
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "如需這個成員的說明，請參閱<xref:System.ComponentModel.IListSource.ContainsListCollection*>.</xref:System.ComponentModel.IListSource.ContainsListCollection*>"
  remarks: "這個成員是明確介面成員實作。 它可用時，才<xref:System.Web.UI.WebControls.XmlDataSource>執行個體轉換成<xref:System.ComponentModel.IListSource>介面。</xref:System.ComponentModel.IListSource> </xref:System.Web.UI.WebControls.XmlDataSource>"
  syntax:
    content: bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果集合是一系列<xref:System.Collections.IList>物件; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Collections.IList>"
  overload: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList
  id: System#ComponentModel#IListSource#GetList
  isEii: true
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: XmlDataSource.System.ComponentModel.IListSource.GetList()
  fullName: System.Web.UI.WebControls.XmlDataSource.System.ComponentModel.IListSource.GetList()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "如需這個成員的說明，請參閱<xref:System.ComponentModel.IListSource.GetList*>.</xref:System.ComponentModel.IListSource.GetList*>"
  remarks: "這個成員是明確介面成員實作。 它可用時，才<xref:System.Web.UI.WebControls.XmlDataSource>執行個體轉換成<xref:System.ComponentModel.IListSource>介面。</xref:System.ComponentModel.IListSource> </xref:System.Web.UI.WebControls.XmlDataSource>"
  syntax:
    content: System.Collections.IList IListSource.GetList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "實作<xref:System.Collections.IList>，可以繫結至資料來源。</xref:System.Collections.IList>"
  overload: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView(System.String)
  id: System#Web#UI#IDataSource#GetView(System.String)
  isEii: true
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: System.Web.UI.IDataSource.GetView(String)
  nameWithType: XmlDataSource.System.Web.UI.IDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.XmlDataSource.System.Web.UI.IDataSource.GetView(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得與資料來源控制項相關聯的具名的資料來源檢視。"
  syntax:
    content: System.Web.UI.DataSourceView IDataSource.GetView (string viewName);
    parameters:
    - id: viewName
      type: System.String
      description: "要擷取之檢視的名稱。 如果&lt;xref:System.String?displayProperty=fullName&gt;指定的預設檢視<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>擷取控制項。"
    return:
      type: System.Web.UI.DataSourceView
      description: "傳回具名<xref href=&quot;System.Web.UI.WebControls.XmlDataSourceView&quot;></xref>物件相關聯<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>控制項。"
  overload: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames
  id: System#Web#UI#IDataSource#GetViewNames
  isEii: true
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: System.Web.UI.IDataSource.GetViewNames()
  nameWithType: XmlDataSource.System.Web.UI.IDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.XmlDataSource.System.Web.UI.IDataSource.GetViewNames()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "如需這個成員的說明，請參閱<xref:System.Web.UI.IDataSource.GetViewNames*>.</xref:System.Web.UI.IDataSource.GetViewNames*>"
  remarks: "這個成員是明確介面成員實作。 它可用時，才<xref:System.Web.UI.WebControls.XmlDataSource>執行個體轉換成<xref:System.Web.UI.IDataSource>介面。</xref:System.Web.UI.IDataSource> </xref:System.Web.UI.WebControls.XmlDataSource>"
  syntax:
    content: System.Collections.ICollection IDataSource.GetViewNames ();
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "實作<xref:System.Collections.ICollection>包含表示清單檢視物件的名稱與相關聯<xref href=&quot;System.Web.UI.IDataSource&quot;></xref>物件。</xref:System.Collections.ICollection>"
  overload: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.Transform
  id: Transform
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: Transform
  nameWithType: XmlDataSource.Transform
  fullName: System.Web.UI.WebControls.XmlDataSource.Transform
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定資料區塊的可延伸樣式表語言 (XSL) 會定義在所管理的 XML 資料上執行 XSLT 轉換<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>控制項。"
  remarks: "在宣告式的情況下，指定轉換屬性為多行的內部屬性<xref:System.Web.UI.WebControls.XmlDataSource>物件。</xref:System.Web.UI.WebControls.XmlDataSource> 內部屬性是 XSL 樣式表的資料，與相容，因為它可讓您以格式化樣式表以任何方式，並且忽略字元填補問題，例如填補引號字元。       如果兩個<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>和設定轉換屬性、<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>屬性會優先和 XSL 樣式表檔案 (.xsl) 中的資料會用來轉換屬性中指定的樣式表項目取代。</xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> </xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 如果 XPath 運算式會設定使用<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>屬性，它會在轉換 XML 資料之後，將套用。</xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>       如果您變更屬性的轉換值<xref:System.Web.UI.IDataSource.DataSourceChanged>就會引發事件。</xref:System.Web.UI.IDataSource.DataSourceChanged> 如果已啟用快取，而且您變更轉換的值，則會快取失效。      > [!NOTE] ><xref:System.Web.UI.WebControls.XmlDataSource>類別會使用已被取代<xref:System.Xml.Xsl.XslTransform>類別以執行 XSL 轉換。</xref:System.Xml.Xsl.XslTransform> </xref:System.Web.UI.WebControls.XmlDataSource> 如果您想要使用的<xref:System.Xml.Xsl.XslTransform>類別已被取代，請將套用的<xref:System.Xml.Xsl.XslCompiledTransform>類別。</xref:System.Xml.Xsl.XslCompiledTransform>轉換</xref:System.Xml.Xsl.XslTransform>之後導入的樣式表功能"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display transformed XML data. The style sheet that performs the transformation is defined inline by the Transform property of the data source control.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>  \n <orders>  \n   <order>  \n     <customer id=\"12345\" />  \n     <customername>  \n         <firstn>Todd</firstn>  \n         <lastn>Rowe</lastn>  \n     </customername>  \n     <transaction id=\"12345\" />  \n     <shipaddress>  \n         <address1>1234 Tenth Avenue</address1>  \n         <city>Bellevue</city>  \n         <state>Washington</state>  \n         <zip>98001</zip>  \n     </shipaddress>  \n     <summary>  \n         <item dept=\"tools\">screwdriver</item>  \n         <item dept=\"tools\">hammer</item>  \n         <item dept=\"plumbing\">fixture</item>  \n     </summary>  \n   </order>  \n</orders>  \n```"
  syntax:
    content: public virtual string Transform { get; set; }
    return:
      type: System.String
      description: "字串的內嵌定義 XML 轉換中包含的資料上執行的 XSL <> </> *> 或<> *> 屬性。 預設值是&lt;xref:System.String.Empty?displayProperty=fullName&gt;。"
  overload: System.Web.UI.WebControls.XmlDataSource.Transform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "正在載入文件。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.TransformArgumentList
  id: TransformArgumentList
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: TransformArgumentList
  nameWithType: XmlDataSource.TransformArgumentList
  fullName: System.Web.UI.WebControls.XmlDataSource.TransformArgumentList
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "提供與所定義的樣式表所使用的 XSLT 引數清單<> *> 或<> *> 內容的 XML 資料上執行的轉換。"
  remarks: "設定 TransformArgumentList 屬性時<xref:System.Web.UI.WebControls.XmlDataSource.Transforming>引發事件來確保 XSLT 參數，可在 XSLT 轉換套用至 XML 資料的時間。</xref:System.Web.UI.WebControls.XmlDataSource.Transforming>       如果<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>屬性設定為`true`和 TransformArgumentList 屬性設定時，快取項目不會自動會失效轉換引數清單中的參數變更時。</xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 在此情況下，您必須撰寫程式碼，以確認快取設定<xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>屬性。</xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> with a <xref:System.Web.UI.WebControls.TreeView> control to display transformed XML data. The XML transformation is performed using the style sheet indicated by the <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> property. Additionally, the style sheet uses transform arguments that are passed to the data source control in an <xref:System.Xml.Xsl.XsltArgumentList> object at run time. The code example demonstrates how to pass the <xref:System.Xml.Xsl.XsltArgumentList> to the data source control by handling the <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> event with a custom event handler.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_437_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_9#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_437_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<bookstore>  \n   <genre name=\"fiction\">  \n     <book ISBN=\"0000000000\">  \n       <title>Secrets of Silicon Valley</title>  \n       <price>12.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />             \n         <chapter num=\"2\" name=\"Body\" />            \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n   <genre name=\"novel\">  \n     <book genre=\"novel\" ISBN=\"1111111111\">  \n       <title>Straight Talk About Computers</title>  \n       <price>24.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />   \n         <chapter num=\"2\" name=\"Body\" />  \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n</bookstore>  \n```  \n  \n The transformation of the XML data is performed with the following style sheet.  \n  \n```  \n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">  \n <xsl:param name=\"purchdate\"/>  \n <xsl:template match=\"bookstore\">  \n   <bookstore>  \n     <xsl:apply-templates select=\"genre\"/>  \n   </bookstore>  \n </xsl:template>  \n <xsl:template match=\"genre\">  \n   <genre>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"book\"/>  \n   </genre>  \n </xsl:template>  \n <xsl:template match=\"book\">  \n   <book>  \n     <xsl:attribute name=\"ISBN\">  \n       <xsl:value-of select=\"@ISBN\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"title\">  \n       <xsl:value-of select=\"title\"/>  \n       Price: <xsl:value-of select=\"price\"/>  \n           15% discount if purchased by: <xsl:value-of select=\"$purchdate\"/>        \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"chapters/chapter\" />  \n   </book>  \n </xsl:template>  \n <xsl:template match=\"chapter\">  \n   <chapter>  \n     <xsl:attribute name=\"num\">  \n       <xsl:value-of select=\"@num\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates/>  \n   </chapter>  \n </xsl:template>  \n</xsl:stylesheet>  \n```"
  syntax:
    content: public virtual System.Xml.Xsl.XsltArgumentList TransformArgumentList { get; set; }
    return:
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>物件，其中包含 XSLT 參數和物件時要套用至 XML 資料載入<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>控制項。 預設值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.XmlDataSource.TransformArgumentList*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.TransformFile
  id: TransformFile
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: TransformFile
  nameWithType: XmlDataSource.TransformFile
  fullName: System.Web.UI.WebControls.XmlDataSource.TransformFile
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "指定定義在所管理的 XML 資料上執行 XSLT 轉換的可延伸樣式表語言 (XSL) 檔案 (.xsl) 的檔案名稱<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>控制項。"
  remarks: "如果這兩個 TransformFile 和<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>屬性會設定、 在 TransformFile 屬性會優先和 XSL 樣式表檔案 (.xsl) 中的資料會用來在指定的樣式表項目取代<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>屬性。</xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> </xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 如果 XPath 運算式會設定使用<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>屬性，它會在轉換 XML 資料之後，將套用。</xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>       如果您變更的值<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>屬性，<xref:System.Web.UI.IDataSource.DataSourceChanged>就會引發事件。</xref:System.Web.UI.IDataSource.DataSourceChanged> </xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 如果已啟用快取和變更的值<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>，快取失效。</xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>      > [!NOTE] ><xref:System.Web.UI.WebControls.XmlDataSource>類別會使用已被取代<xref:System.Xml.Xsl.XslTransform>類別以執行 XSL 轉換。</xref:System.Xml.Xsl.XslTransform> </xref:System.Web.UI.WebControls.XmlDataSource> 如果您想要使用的<xref:System.Xml.Xsl.XslTransform>類別已被取代，請將套用的<xref:System.Xml.Xsl.XslCompiledTransform>類別。</xref:System.Xml.Xsl.XslCompiledTransform>轉換</xref:System.Xml.Xsl.XslTransform>之後導入的樣式表功能"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control and a <xref:System.Web.UI.WebControls.TreeView> control to display transformed XML data on a Web form. The transformation is performed using the style sheet indicated by the TransformFile property. You can optionally supply transformation arguments for the style sheet using an <xref:System.Xml.Xsl.XsltArgumentList>. For more information, see the <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> property.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_5#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_625_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_5#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_625_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<bookstore>  \n   <genre name=\"fiction\">  \n     <book ISBN=\"0000000000\">  \n       <title>Secrets of Silicon Valley</title>  \n       <price>12.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />             \n         <chapter num=\"2\" name=\"Body\" />            \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n   <genre name=\"novel\">  \n     <book genre=\"novel\" ISBN=\"1111111111\">  \n       <title>Straight Talk About Computers</title>  \n       <price>24.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />   \n         <chapter num=\"2\" name=\"Body\" />  \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n</bookstore>  \n```  \n  \n The XSL style sheet that performs the XML transformation has the following structure:  \n  \n```  \n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">  \n <xsl:template match=\"bookstore\">  \n   <bookstore>  \n     <xsl:apply-templates select=\"genre\"/>  \n   </bookstore>  \n </xsl:template>  \n <xsl:template match=\"genre\">  \n   <genre>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"book\"/>  \n   </genre>  \n </xsl:template>  \n <xsl:template match=\"book\">  \n   <book>  \n     <xsl:attribute name=\"ISBN\">  \n       <xsl:value-of select=\"@ISBN\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"title\">  \n       <xsl:value-of select=\"title\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"price\">  \n       <xsl:value-of select=\"price\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"chapters/chapter\" />  \n   </book>  \n </xsl:template>  \n <xsl:template match=\"chapter\">  \n   <chapter>  \n     <xsl:attribute name=\"num\">  \n       <xsl:value-of select=\"@num\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates/>  \n   </chapter>  \n </xsl:template>  \n</xsl:stylesheet>  \n```"
  syntax:
    content: public virtual string TransformFile { get; set; }
    return:
      type: System.String
      description: "實體的絕對路徑或相對路徑會定義 XML 轉換中包含的資料上執行的 XSL 樣式表檔案<> *> 或<> *> 屬性。 預設值是&lt;xref:System.String.Empty?displayProperty=fullName&gt;。"
  overload: System.Web.UI.WebControls.XmlDataSource.TransformFile*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "正在載入文件。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.Transforming
  id: Transforming
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: Transforming
  nameWithType: XmlDataSource.Transforming
  fullName: System.Web.UI.WebControls.XmlDataSource.Transforming
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "發生於之前所定義的樣式表<> *> 屬性或識別<> *> 屬性會套用到 XML 資料。"
  remarks: "處理 Transforming 事件設定<xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>屬性<xref:System.Xml.Xsl.XsltArgumentList>物件之前<xref:System.Web.UI.WebControls.XmlDataSource>控制項執行 XML 轉換。</xref:System.Web.UI.WebControls.XmlDataSource> </xref:System.Xml.Xsl.XsltArgumentList> </xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>       如需處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a <xref:System.Web.UI.WebControls.TreeView> control to display transformed XML data. The XML transformation is performed using the style sheet indicated by the <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> property. Additionally, the style sheet uses transform arguments that are passed to the data source control in an <xref:System.Xml.Xsl.XsltArgumentList> at run time. The code example demonstrates how to pass the <xref:System.Xml.Xsl.XsltArgumentList> object to the data source control by handling the Transforming event with a custom event handler.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_49_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_9#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_49_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<bookstore>  \n   <genre name=\"fiction\">  \n     <book ISBN=\"0000000000\">  \n       <title>Secrets of Silicon Valley</title>  \n       <price>12.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />             \n         <chapter num=\"2\" name=\"Body\" />            \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n   <genre name=\"novel\">  \n     <book genre=\"novel\" ISBN=\"1111111111\">  \n       <title>Straight Talk About Computers</title>  \n       <price>24.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />   \n         <chapter num=\"2\" name=\"Body\" />  \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n</bookstore>  \n```  \n  \n The transformation of the XML data is performed with the following style sheet:  \n  \n```  \n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">  \n <xsl:param name=\"purchdate\"/>  \n <xsl:template match=\"bookstore\">  \n   <bookstore>  \n     <xsl:apply-templates select=\"genre\"/>  \n   </bookstore>  \n </xsl:template>  \n <xsl:template match=\"genre\">  \n   <genre>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"book\"/>  \n   </genre>  \n </xsl:template>  \n <xsl:template match=\"book\">  \n   <book>  \n     <xsl:attribute name=\"ISBN\">  \n       <xsl:value-of select=\"@ISBN\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"title\">  \n       <xsl:value-of select=\"title\"/>  \n       Price: <xsl:value-of select=\"price\"/>  \n           15% discount if purchased by: <xsl:value-of select=\"$purchdate\"/>        \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"chapters/chapter\" />  \n   </book>  \n </xsl:template>  \n <xsl:template match=\"chapter\">  \n   <chapter>  \n     <xsl:attribute name=\"num\">  \n       <xsl:value-of select=\"@num\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates/>  \n   </chapter>  \n </xsl:template>  \n</xsl:stylesheet>  \n```"
  syntax:
    content: public event EventHandler Transforming;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.XPath
  id: XPath
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: XPath
  nameWithType: XmlDataSource.XPath
  fullName: System.Web.UI.WebControls.XmlDataSource.XPath
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "指定要套用至所包含的 XML 資料的 XPath 運算式<> *> 屬性或所指示的 XML 檔案所<> *> 屬性。"
  remarks: "如需有關 XPath 的資料繫結運算式的詳細資訊，請參閱[表格式控制項繫結至 XmlDataSource 控制項](http://msdn.microsoft.com/en-us/d6bf202f-6454-45fd-9424-e17f6c7eafe8)。"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display XML data that has been filtered using an XPath expression. In this example, XPath syntax is used to filter the XML data when the XPath property of the data source control is set, and also binds elements of the <xref:System.Web.UI.WebControls.Repeater> control template to the XML data.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_8#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_422_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_8#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_422_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<bookstore>  \n   <genre name=\"fiction\">  \n     <book ISBN=\"0000000000\">  \n       <title>Secrets of Silicon Valley</title>  \n       <price>12.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />             \n         <chapter num=\"2\" name=\"Body\" />            \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n   <genre name=\"novel\">  \n     <book genre=\"novel\" ISBN=\"1111111111\">  \n       <title>Straight Talk About Computers</title>  \n       <price>24.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />   \n         <chapter num=\"2\" name=\"Body\" />  \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n</bookstore>  \n```"
  syntax:
    content: public virtual string XPath { get; set; }
    return:
      type: System.String
      description: "字串，代表 XPath 運算式，可用來篩選所包含的資料<> *> 屬性或所指示的 XML 檔案所<> *> 屬性。 預設值是&lt;xref:System.String.Empty?displayProperty=fullName&gt;。"
  overload: System.Web.UI.WebControls.XmlDataSource.XPath*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "正在載入文件。"
  platform:
  - net462
references:
- uid: System.Web.UI.HierarchicalDataSourceControl
  isExternal: false
  name: System.Web.UI.HierarchicalDataSourceControl
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.Web.UI.WebControls.XmlDataSource.#ctor
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: XmlDataSource()
  nameWithType: XmlDataSource.XmlDataSource()
  fullName: System.Web.UI.WebControls.XmlDataSource.XmlDataSource()
- uid: System.Web.UI.WebControls.XmlDataSource.CacheDuration
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: XmlDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheDuration
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: XmlDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy
- uid: System.Web.UI.DataSourceCacheExpiry
  parent: System.Web.UI
  isExternal: false
  name: DataSourceCacheExpiry
  nameWithType: DataSourceCacheExpiry
  fullName: System.Web.UI.DataSourceCacheExpiry
- uid: System.Web.UI.WebControls.XmlDataSource.CacheKeyContext
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheKeyContext
  nameWithType: XmlDataSource.CacheKeyContext
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheKeyContext
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: XmlDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.XmlDataSource.Data
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: Data
  nameWithType: XmlDataSource.Data
  fullName: System.Web.UI.WebControls.XmlDataSource.Data
- uid: System.Web.UI.WebControls.XmlDataSource.DataFile
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: DataFile
  nameWithType: XmlDataSource.DataFile
  fullName: System.Web.UI.WebControls.XmlDataSource.DataFile
- uid: System.Web.UI.WebControls.XmlDataSource.EnableCaching
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: XmlDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.XmlDataSource.EnableCaching
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(System.String)
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: GetHierarchicalView(String)
  nameWithType: XmlDataSource.GetHierarchicalView(String)
  fullName: System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(String)
- uid: System.Web.UI.HierarchicalDataSourceView
  parent: System.Web.UI
  isExternal: false
  name: HierarchicalDataSourceView
  nameWithType: HierarchicalDataSourceView
  fullName: System.Web.UI.HierarchicalDataSourceView
- uid: System.Web.UI.WebControls.XmlDataSource.GetXmlDocument
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: GetXmlDocument()
  nameWithType: XmlDataSource.GetXmlDocument()
  fullName: System.Web.UI.WebControls.XmlDataSource.GetXmlDocument()
- uid: System.Xml.XmlDocument
  parent: System.Xml
  isExternal: false
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: OnTransforming(EventArgs)
  nameWithType: XmlDataSource.OnTransforming(EventArgs)
  fullName: System.Web.UI.WebControls.XmlDataSource.OnTransforming(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.XmlDataSource.Save
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: Save()
  nameWithType: XmlDataSource.Save()
  fullName: System.Web.UI.WebControls.XmlDataSource.Save()
- uid: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: XmlDataSource.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Web.UI.WebControls.XmlDataSource.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: XmlDataSource.System.ComponentModel.IListSource.GetList()
  fullName: System.Web.UI.WebControls.XmlDataSource.System.ComponentModel.IListSource.GetList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView(System.String)
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.Web.UI.IDataSource.GetView(String)
  nameWithType: XmlDataSource.System.Web.UI.IDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.XmlDataSource.System.Web.UI.IDataSource.GetView(String)
- uid: System.Web.UI.DataSourceView
  parent: System.Web.UI
  isExternal: false
  name: DataSourceView
  nameWithType: DataSourceView
  fullName: System.Web.UI.DataSourceView
- uid: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.Web.UI.IDataSource.GetViewNames()
  nameWithType: XmlDataSource.System.Web.UI.IDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.XmlDataSource.System.Web.UI.IDataSource.GetViewNames()
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Web.UI.WebControls.XmlDataSource.Transform
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: Transform
  nameWithType: XmlDataSource.Transform
  fullName: System.Web.UI.WebControls.XmlDataSource.Transform
- uid: System.Web.UI.WebControls.XmlDataSource.TransformArgumentList
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: TransformArgumentList
  nameWithType: XmlDataSource.TransformArgumentList
  fullName: System.Web.UI.WebControls.XmlDataSource.TransformArgumentList
- uid: System.Xml.Xsl.XsltArgumentList
  parent: System.Xml.Xsl
  isExternal: false
  name: XsltArgumentList
  nameWithType: XsltArgumentList
  fullName: System.Xml.Xsl.XsltArgumentList
- uid: System.Web.UI.WebControls.XmlDataSource.TransformFile
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: TransformFile
  nameWithType: XmlDataSource.TransformFile
  fullName: System.Web.UI.WebControls.XmlDataSource.TransformFile
- uid: System.Web.UI.WebControls.XmlDataSource.Transforming
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: Transforming
  nameWithType: XmlDataSource.Transforming
  fullName: System.Web.UI.WebControls.XmlDataSource.Transforming
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Web.UI.WebControls.XmlDataSource.XPath
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: XPath
  nameWithType: XmlDataSource.XPath
  fullName: System.Web.UI.WebControls.XmlDataSource.XPath
- uid: System.Web.UI.WebControls.XmlDataSource.#ctor*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: XmlDataSource
  nameWithType: XmlDataSource.XmlDataSource
- uid: System.Web.UI.WebControls.XmlDataSource.CacheDuration*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: XmlDataSource.CacheDuration
- uid: System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: XmlDataSource.CacheExpirationPolicy
- uid: System.Web.UI.WebControls.XmlDataSource.CacheKeyContext*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheKeyContext
  nameWithType: XmlDataSource.CacheKeyContext
- uid: System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: XmlDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.XmlDataSource.Data*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: Data
  nameWithType: XmlDataSource.Data
- uid: System.Web.UI.WebControls.XmlDataSource.DataFile*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: DataFile
  nameWithType: XmlDataSource.DataFile
- uid: System.Web.UI.WebControls.XmlDataSource.EnableCaching*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: XmlDataSource.EnableCaching
- uid: System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: GetHierarchicalView
  nameWithType: XmlDataSource.GetHierarchicalView
- uid: System.Web.UI.WebControls.XmlDataSource.GetXmlDocument*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: GetXmlDocument
  nameWithType: XmlDataSource.GetXmlDocument
- uid: System.Web.UI.WebControls.XmlDataSource.OnTransforming*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: OnTransforming
  nameWithType: XmlDataSource.OnTransforming
- uid: System.Web.UI.WebControls.XmlDataSource.Save*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: Save
  nameWithType: XmlDataSource.Save
- uid: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: XmlDataSource.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.ComponentModel.IListSource.GetList
  nameWithType: XmlDataSource.System.ComponentModel.IListSource.GetList
- uid: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.Web.UI.IDataSource.GetView
  nameWithType: XmlDataSource.System.Web.UI.IDataSource.GetView
- uid: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.Web.UI.IDataSource.GetViewNames
  nameWithType: XmlDataSource.System.Web.UI.IDataSource.GetViewNames
- uid: System.Web.UI.WebControls.XmlDataSource.Transform*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: Transform
  nameWithType: XmlDataSource.Transform
- uid: System.Web.UI.WebControls.XmlDataSource.TransformArgumentList*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: TransformArgumentList
  nameWithType: XmlDataSource.TransformArgumentList
- uid: System.Web.UI.WebControls.XmlDataSource.TransformFile*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: TransformFile
  nameWithType: XmlDataSource.TransformFile
- uid: System.Web.UI.WebControls.XmlDataSource.XPath*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: XPath
  nameWithType: XmlDataSource.XPath
