### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.TripleDES
  id: TripleDES
  children:
  - System.Security.Cryptography.TripleDES.#ctor
  - System.Security.Cryptography.TripleDES.Create
  - System.Security.Cryptography.TripleDES.Create(System.String)
  - System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])
  - System.Security.Cryptography.TripleDES.Key
  langs:
  - csharp
  name: TripleDES
  nameWithType: TripleDES
  fullName: System.Security.Cryptography.TripleDES
  type: Class
  summary: "代表三重資料加密標準演算法的實作必須從哪些所有 TripleDES 衍生的基底類別。"
  remarks: "TripleDES 使用的三個後續反覆項目<xref:System.Security.Cryptography.DES>演算法。</xref:System.Security.Cryptography.DES> 它可以使用兩個或三個 56 位元金鑰。      > [!NOTE] > 較新的對稱式加密演算法，進階加密標準 (AES)，為可用。 請考慮使用的<xref:System.Security.Cryptography.Aes>類別和其衍生的類別，而不是 TripleDES 類別。</xref:System.Security.Cryptography.Aes> 使用 tripledes 代表只為了與舊版的應用程式和資料的相容性。       這個演算法在 64 位元為增量來支援 128 位元的金鑰長度為 192 位元。"
  example:
  - "The following code example method uses <xref:System.Security.Cryptography.TripleDESCryptoServiceProvider> with the specified key (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>) and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) to encrypt a file specified by `inName`. It then outputs the encrypted result to the file specified by `outName`.  \n  \n [!code-cpp[Classic TripleDESCryptoServiceProvider Example#1](~/add/codesnippet/cpp/t-system.security.crypto_61_1.cpp)]\n [!code-cs[Classic TripleDESCryptoServiceProvider Example#1](~/add/codesnippet/csharp/t-system.security.crypto_61_1.cs)]\n [!code-vb[Classic TripleDESCryptoServiceProvider Example#1](~/add/codesnippet/visualbasic/t-system.security.crypto_61_1.vb)]  \n  \n Decryption can be handled in the same way; use <xref:System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateDecryptor%2A> instead of <xref:System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateEncryptor%2A>. The same key (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>) and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) used to encrypt the file must be used to decrypt it."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class TripleDES : System.Security.Cryptography.SymmetricAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.SymmetricAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Clear
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  - System.Security.Cryptography.SymmetricAlgorithm.IV
  - System.Security.Cryptography.SymmetricAlgorithm.IVValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeySize
  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.Mode
  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Padding
  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  platform:
  - net462
- uid: System.Security.Cryptography.TripleDES.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.TripleDES
  langs:
  - csharp
  name: TripleDES()
  nameWithType: TripleDES.TripleDES()
  fullName: System.Security.Cryptography.TripleDES.TripleDES()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.TripleDES&quot;></xref>類別。"
  remarks: "您無法建立抽象類別的執行個體。 應用程式程式碼會建立衍生類別的新執行個體。       這個方法會初始化的受保護的欄位<xref:System.Security.Cryptography.SymmetricAlgorithm>下表列出類別設為預設值。</xref:System.Security.Cryptography.SymmetricAlgorithm>      |欄位 |預設值 |  |-----------|-------------------|  |<xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>|&192; |  |<xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>|&64; |  |<xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue>|64|</xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue></xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue></xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>"
  syntax:
    content: protected TripleDES ();
    parameters: []
  overload: System.Security.Cryptography.TripleDES.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.TripleDES.Create
  id: Create
  parent: System.Security.Cryptography.TripleDES
  langs:
  - csharp
  name: Create()
  nameWithType: TripleDES.Create()
  fullName: System.Security.Cryptography.TripleDES.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "建立密碼編譯的物件執行的執行個體<xref href=&quot;System.Security.Cryptography.TripleDES&quot;></xref>演算法。"
  remarks: "建立<xref:System.Security.Cryptography.TripleDES>類別</xref:System.Security.Cryptography.TripleDES>的新執行個體"
  example:
  - "The following code example shows how to create and use a <xref:System.Security.Cryptography.TripleDES> object to encrypt and decrypt data in a file.  \n  \n [!code-cs[Cryptography.3DES.Create.File#1](~/add/codesnippet/csharp/m-system.security.crypto_61_1.cs)]\n [!code-cpp[Cryptography.3DES.Create.File#1](~/add/codesnippet/cpp/m-system.security.crypto_61_1.cpp)]\n [!code-vb[Cryptography.3DES.Create.File#1](~/add/codesnippet/visualbasic/m-system.security.crypto_61_1.vb)]  \n  \n The following code example shows how to create and use a <xref:System.Security.Cryptography.TripleDES> object to encrypt and decrypt data in memory.  \n  \n [!code-cpp[Cryptography.3DES.Create.Memory#1](~/add/codesnippet/cpp/m-system.security.crypto_61_2.cpp)]\n [!code-vb[Cryptography.3DES.Create.Memory#1](~/add/codesnippet/visualbasic/m-system.security.crypto_61_2.vb)]"
  syntax:
    content: public static System.Security.Cryptography.TripleDES Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.TripleDES
      description: "密碼編譯物件的執行個體。"
  overload: System.Security.Cryptography.TripleDES.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.TripleDES.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.TripleDES
  langs:
  - csharp
  name: Create(String)
  nameWithType: TripleDES.Create(String)
  fullName: System.Security.Cryptography.TripleDES.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "建立密碼編譯物件執行之指定的實作的執行個體<xref href=&quot;System.Security.Cryptography.TripleDES&quot;></xref>演算法。"
  remarks: ''
  example:
  - "The following code example shows how to create and use a <xref:System.Security.Cryptography.TripleDES> object to encrypt and decrypt data in a file.  \n  \n [!code-cpp[Cryptography.3DES.Createstring.File#1](~/add/codesnippet/cpp/m-system.security.crypto_55_1.cpp)]\n [!code-cs[Cryptography.3DES.Createstring.File#1](~/add/codesnippet/csharp/m-system.security.crypto_55_1.cs)]\n [!code-vb[Cryptography.3DES.Createstring.File#1](~/add/codesnippet/visualbasic/m-system.security.crypto_55_1.vb)]  \n  \n The following code example shows how to create and use a <xref:System.Security.Cryptography.TripleDES> object to encrypt and decrypt data in memory.  \n  \n [!code-cs[Cryptography.3DES.Createstring.Memory#1](~/add/codesnippet/csharp/m-system.security.crypto_55_2.cs)]\n [!code-vb[Cryptography.3DES.Createstring.Memory#1](~/add/codesnippet/visualbasic/m-system.security.crypto_55_2.vb)]\n [!code-cpp[Cryptography.3DES.Createstring.Memory#1](~/add/codesnippet/cpp/m-system.security.crypto_55_2.cpp)]"
  syntax:
    content: public static System.Security.Cryptography.TripleDES Create (string str);
    parameters:
    - id: str
      type: System.String
      description: "名稱的特定實作<xref href=&quot;System.Security.Cryptography.TripleDES&quot;></xref>使用。"
    return:
      type: System.Security.Cryptography.TripleDES
      description: "密碼編譯物件的執行個體。"
  overload: System.Security.Cryptography.TripleDES.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])
  id: IsWeakKey(System.Byte[])
  parent: System.Security.Cryptography.TripleDES
  langs:
  - csharp
  name: IsWeakKey(Byte[])
  nameWithType: TripleDES.IsWeakKey(Byte[])
  fullName: System.Security.Cryptography.TripleDES.IsWeakKey(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "判斷指定的索引鍵是否為弱式。"
  remarks: "弱式金鑰為密碼，以便於中斷所導致的索引鍵。 如果文字以弱式金鑰加密，使用相同的弱式金鑰重新加密所產生的密碼傳回原始的文字。 在 128 位元模式中，如果第一個 64 位元與最後一個 64 位元，相同索引鍵是弱式。 在 192 位元模式中，如果第一個 64 位元與第二個 64 位元相同，或第二個 64 位元的最後一個 64 位元，與相同索引鍵是弱式。       嘗試設定弱式金鑰結果<xref:System.Security.Cryptography.CryptographicException>。</xref:System.Security.Cryptography.CryptographicException> 當<xref:System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateKey%2A>稱為 「 若要建立隨機金鑰，弱式金鑰會永遠不會傳回。</xref:System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateKey%2A>"
  syntax:
    content: public static bool IsWeakKey (byte[] rgbKey);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "若要測試為弱式秘密金鑰。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果按鍵是弱式。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.TripleDES.IsWeakKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "大小<code> rgbKey </code>參數無效。"
  platform:
  - net462
- uid: System.Security.Cryptography.TripleDES.Key
  id: Key
  parent: System.Security.Cryptography.TripleDES
  langs:
  - csharp
  name: Key
  nameWithType: TripleDES.Key
  fullName: System.Security.Cryptography.TripleDES.Key
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得或設定的祕密金鑰<xref href=&quot;System.Security.Cryptography.TripleDES&quot;></xref>演算法。"
  remarks: "這個演算法在 64 位元為增量來支援 128 位元的金鑰長度為 192 位元。"
  syntax:
    content: public override byte[] Key { get; set; }
    return:
      type: System.Byte[]
      description: "祕密金鑰<xref href=&quot;System.Security.Cryptography.TripleDES&quot;></xref>演算法。"
  overload: System.Security.Cryptography.TripleDES.Key*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "嘗試將索引鍵設定<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "嘗試設定索引鍵長度無效。       -或-嘗試設定弱式金鑰 (請參閱<xref:System.Security.Cryptography.TripleDES.IsWeakKey*>)。</xref:System.Security.Cryptography.TripleDES.IsWeakKey*>"
  platform:
  - net462
references:
- uid: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: System.Security.Cryptography.SymmetricAlgorithm
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.TripleDES.#ctor
  parent: System.Security.Cryptography.TripleDES
  isExternal: false
  name: TripleDES()
  nameWithType: TripleDES.TripleDES()
  fullName: System.Security.Cryptography.TripleDES.TripleDES()
- uid: System.Security.Cryptography.TripleDES.Create
  parent: System.Security.Cryptography.TripleDES
  isExternal: false
  name: Create()
  nameWithType: TripleDES.Create()
  fullName: System.Security.Cryptography.TripleDES.Create()
- uid: System.Security.Cryptography.TripleDES
  parent: System.Security.Cryptography
  isExternal: false
  name: TripleDES
  nameWithType: TripleDES
  fullName: System.Security.Cryptography.TripleDES
- uid: System.Security.Cryptography.TripleDES.Create(System.String)
  parent: System.Security.Cryptography.TripleDES
  isExternal: false
  name: Create(String)
  nameWithType: TripleDES.Create(String)
  fullName: System.Security.Cryptography.TripleDES.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])
  parent: System.Security.Cryptography.TripleDES
  isExternal: false
  name: IsWeakKey(Byte[])
  nameWithType: TripleDES.IsWeakKey(Byte[])
  fullName: System.Security.Cryptography.TripleDES.IsWeakKey(Byte[])
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.TripleDES.Key
  parent: System.Security.Cryptography.TripleDES
  isExternal: false
  name: Key
  nameWithType: TripleDES.Key
  fullName: System.Security.Cryptography.TripleDES.Key
- uid: System.Security.Cryptography.TripleDES.#ctor*
  parent: System.Security.Cryptography.TripleDES
  isExternal: false
  name: TripleDES
  nameWithType: TripleDES.TripleDES
- uid: System.Security.Cryptography.TripleDES.Create*
  parent: System.Security.Cryptography.TripleDES
  isExternal: false
  name: Create
  nameWithType: TripleDES.Create
- uid: System.Security.Cryptography.TripleDES.IsWeakKey*
  parent: System.Security.Cryptography.TripleDES
  isExternal: false
  name: IsWeakKey
  nameWithType: TripleDES.IsWeakKey
- uid: System.Security.Cryptography.TripleDES.Key*
  parent: System.Security.Cryptography.TripleDES
  isExternal: false
  name: Key
  nameWithType: TripleDES.Key
