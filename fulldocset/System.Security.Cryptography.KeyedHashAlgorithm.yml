### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.KeyedHashAlgorithm
  id: KeyedHashAlgorithm
  children:
  - System.Security.Cryptography.KeyedHashAlgorithm.#ctor
  - System.Security.Cryptography.KeyedHashAlgorithm.Create
  - System.Security.Cryptography.KeyedHashAlgorithm.Create(System.String)
  - System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.KeyedHashAlgorithm.Key
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  langs:
  - csharp
  name: KeyedHashAlgorithm
  nameWithType: KeyedHashAlgorithm
  fullName: System.Security.Cryptography.KeyedHashAlgorithm
  type: Class
  summary: "表示實作從它所有的索引雜湊演算法必須衍生的抽象類別。"
  remarks: "雜湊函式的二進位字串對應任意長度的固定長度的小型二進位字串。 密碼編譯雜湊函數具有屬性無法進行該雜湊處理至相同的值找到兩個不同的輸入。 對資料進行小變更造成大，無法預期的變更，雜湊。       索引雜湊演算法是做為訊息驗證碼的索引鍵相關，但單向雜湊函式。 只知道金鑰的人才可以驗證的雜湊。 索引雜湊演算法提供不加密的驗證。       雜湊函式通常用於使用數位簽章，資料的完整性。 <xref:System.Security.Cryptography.HMACSHA1>類別是索引鍵的雜湊演算法的一個範例。</xref:System.Security.Cryptography.HMACSHA1>"
  example:
  - "The following code example demonstrates how to derive from the KeyedHashAlgorithm class.  \n  \n [!code-cs[KeyedHashAlgorithm#1](~/add/codesnippet/csharp/t-system.security.crypto_129_1.cs)]\n [!code-vb[KeyedHashAlgorithm#1](~/add/codesnippet/visualbasic/t-system.security.crypto_129_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class KeyedHashAlgorithm : System.Security.Cryptography.HashAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.HashFinal
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.Initialize
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  platform:
  - net462
- uid: System.Security.Cryptography.KeyedHashAlgorithm.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  langs:
  - csharp
  name: KeyedHashAlgorithm()
  nameWithType: KeyedHashAlgorithm.KeyedHashAlgorithm()
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.KeyedHashAlgorithm()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.KeyedHashAlgorithm&quot;></xref>類別。"
  remarks: "您無法建立抽象類別的執行個體。 應用程式程式碼會建立衍生類別的新執行個體。"
  syntax:
    content: protected KeyedHashAlgorithm ();
    parameters: []
  overload: System.Security.Cryptography.KeyedHashAlgorithm.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Create
  id: Create
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  langs:
  - csharp
  name: Create()
  nameWithType: KeyedHashAlgorithm.Create()
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "建立金鑰雜湊演算法的預設實作的執行個體。"
  remarks: "根據預設，這個多載會使用<xref:System.Security.Cryptography.HMACSHA1>索引雜湊演算法的實作。</xref:System.Security.Cryptography.HMACSHA1> 如果您想要指定不同的實作，使用<xref:System.Security.Cryptography.KeyedHashAlgorithm.Create%28System.String%29>多載，可讓您指定的演算法名稱，改為。</xref:System.Security.Cryptography.KeyedHashAlgorithm.Create%28System.String%29> 密碼編譯組態系統定義的預設實作的<xref:System.Security.Cryptography.KeyedHashAlgorithm>類別。</xref:System.Security.Cryptography.KeyedHashAlgorithm>"
  syntax:
    content: public static System.Security.Cryptography.KeyedHashAlgorithm Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.KeyedHashAlgorithm
      description: "新<xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref>執行個體，除非已經變更預設設定。"
  overload: System.Security.Cryptography.KeyedHashAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  langs:
  - csharp
  name: Create(String)
  nameWithType: KeyedHashAlgorithm.Create(String)
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "建立指定的金鑰雜湊演算法實作的執行個體。"
  remarks: "這個方法支援演算法，包括 MD5，sha-1、 sha-256，與 RIPEMD160 的數的字。 如需完整清單，請參閱支援的值`algName`參數。"
  syntax:
    content: public static System.Security.Cryptography.KeyedHashAlgorithm Create (string algName);
    parameters:
    - id: algName
      type: System.String
      description: "要使用的金鑰雜湊演算法實作。 下表顯示有效的值`algName`參數以及它們所對應的演算法。       <table><thead><tr><th> 參數值       </th><th> 實作       </th></tr></thead><tbody><tr><td> System.Security.Cryptography.HMAC       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> System.Security.Cryptography.KeyedHashAlgorithm       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> HMACMD5       </td><td><xref href=&quot;System.Security.Cryptography.HMACMD5&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACMD5       </td><td><xref href=&quot;System.Security.Cryptography.HMACMD5&quot;></xref></td></tr><tr><td> HMACRIPEMD160       </td><td><xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACRIPEMD160       </td><td><xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;></xref></td></tr><tr><td> HMACSHA1       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA1       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> HMACSHA256       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA256       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;></xref></td></tr><tr><td> HMACSHA384       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA384&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA384       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA384&quot;></xref></td></tr><tr><td> HMACSHA512       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA512&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA512       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA512&quot;></xref></td></tr><tr><td> MACTripleDES       </td><td><xref href=&quot;System.Security.Cryptography.MACTripleDES&quot;></xref></td></tr><tr><td> System.Security.Cryptography.MACTripleDES       </td><td><xref href=&quot;System.Security.Cryptography.MACTripleDES&quot;></xref></td></tr></tbody></table>"
    return:
      type: System.Security.Cryptography.KeyedHashAlgorithm
      description: "指定索引雜湊演算法的新執行個體。"
  overload: System.Security.Cryptography.KeyedHashAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: KeyedHashAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "所使用的 unmanaged 的資源釋出<xref href=&quot;System.Security.Cryptography.KeyedHashAlgorithm&quot;></xref>並選擇性釋放 managed 的資源。"
  remarks: "這個方法會呼叫公用`Dispose()`方法和`Finalize`方法。 `Dispose()`叫用受保護`Dispose(Boolean)`撘`disposing`參數設定為`true`。 `Finalize`叫用`Dispose`與`disposing`設`false`。       當`disposing`參數是`true`，這個方法的任何 managed 物件所持有的資源全部釋出這個<xref:System.Security.Cryptography.KeyedHashAlgorithm>參考。</xref:System.Security.Cryptography.KeyedHashAlgorithm> 這個方法會叫用`Dispose()`每個參考物件的方法。"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>表示釋放 managed 和 unmanaged 資源，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>表示只釋放 unmanaged 的資源。"
  overload: System.Security.Cryptography.KeyedHashAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Key
  id: Key
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  langs:
  - csharp
  name: Key
  nameWithType: KeyedHashAlgorithm.Key
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Key
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得或設定要使用於雜湊演算法的金鑰。"
  remarks: "這是屬性的公用存取子<xref:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue>欄位。</xref:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue>"
  example:
  - "The following code example demonstrates how to override the Key property to retrieve the key used in the current <xref:System.Security.Cryptography.KeyedHashAlgorithm> object. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.KeyedHashAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.KeyedHashAlgorithm#22](~/add/codesnippet/csharp/p-system.security.crypto_121_1.cs)]\n [!code-vb[System.Security.Cryptography.KeyedHashAlgorithm#22](~/add/codesnippet/visualbasic/p-system.security.crypto_121_1.vb)]\n [!code-cpp[System.Security.Cryptography.KeyedHashAlgorithm#22](~/add/codesnippet/cpp/p-system.security.crypto_121_1.cpp)]"
  syntax:
    content: public virtual byte[] Key { get; set; }
    return:
      type: System.Byte[]
      description: "要用於雜湊演算法的金鑰。"
  overload: System.Security.Cryptography.KeyedHashAlgorithm.Key*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "您嘗試變更雜湊開始之後的索引鍵內容。"
  platform:
  - net462
- uid: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  id: KeyValue
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  langs:
  - csharp
  name: KeyValue
  nameWithType: KeyedHashAlgorithm.KeyValue
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "要用於雜湊演算法的金鑰。"
  remarks: "這個欄位透過存取<xref:System.Security.Cryptography.KeyedHashAlgorithm.Key%2A>屬性。</xref:System.Security.Cryptography.KeyedHashAlgorithm.Key%2A>"
  syntax:
    content: protected byte[] KeyValue;
    return:
      type: System.Byte[]
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: System.Security.Cryptography.HashAlgorithm
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.KeyedHashAlgorithm.#ctor
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: KeyedHashAlgorithm()
  nameWithType: KeyedHashAlgorithm.KeyedHashAlgorithm()
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.KeyedHashAlgorithm()
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Create
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: Create()
  nameWithType: KeyedHashAlgorithm.Create()
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Create()
- uid: System.Security.Cryptography.KeyedHashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: KeyedHashAlgorithm
  nameWithType: KeyedHashAlgorithm
  fullName: System.Security.Cryptography.KeyedHashAlgorithm
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Create(System.String)
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: Create(String)
  nameWithType: KeyedHashAlgorithm.Create(String)
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: KeyedHashAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Key
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: Key
  nameWithType: KeyedHashAlgorithm.Key
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Key
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: KeyValue
  nameWithType: KeyedHashAlgorithm.KeyValue
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
- uid: System.Security.Cryptography.KeyedHashAlgorithm.#ctor*
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: KeyedHashAlgorithm
  nameWithType: KeyedHashAlgorithm.KeyedHashAlgorithm
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Create*
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: Create
  nameWithType: KeyedHashAlgorithm.Create
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Dispose*
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: Dispose
  nameWithType: KeyedHashAlgorithm.Dispose
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Key*
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: Key
  nameWithType: KeyedHashAlgorithm.Key
