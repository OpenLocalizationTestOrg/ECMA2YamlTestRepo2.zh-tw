### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.SchemaNameCollection
  id: SchemaNameCollection
  children:
  - System.DirectoryServices.SchemaNameCollection.Add(System.String)
  - System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)
  - System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])
  - System.DirectoryServices.SchemaNameCollection.Clear
  - System.DirectoryServices.SchemaNameCollection.Contains(System.String)
  - System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)
  - System.DirectoryServices.SchemaNameCollection.Count
  - System.DirectoryServices.SchemaNameCollection.GetEnumerator
  - System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)
  - System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)
  - System.DirectoryServices.SchemaNameCollection.Item(System.Int32)
  - System.DirectoryServices.SchemaNameCollection.Remove(System.String)
  - System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized
  - System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)
  langs:
  - csharp
  name: SchemaNameCollection
  nameWithType: SchemaNameCollection
  fullName: System.DirectoryServices.SchemaNameCollection
  type: Class
  summary: "包含名稱的結構描述清單<xref:System.DirectoryServices.DirectoryEntries.SchemaFilter*>屬性<xref href=&quot;System.DirectoryServices.DirectoryEntries&quot;></xref>物件可以使用。</xref:System.DirectoryServices.DirectoryEntries.SchemaFilter*>"
  syntax:
    content: 'public class SchemaNameCollection : System.Collections.IList'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  inheritedMembers: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Add(System.String)
  id: Add(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Add(String)
  nameWithType: SchemaNameCollection.Add(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Add(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "將指定的結構描述名稱附加至這個集合。"
  syntax:
    content: public int Add (string value);
    parameters:
    - id: value
      type: System.String
      description: "要加入至這個集合的結構描述名稱。"
    return:
      type: System.Int32
      description: "指定的屬性值的以零為起始的索引。 如果找不到物件，傳回的值為-1。"
  overload: System.DirectoryServices.SchemaNameCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)
  id: AddRange(System.DirectoryServices.SchemaNameCollection)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: AddRange(SchemaNameCollection)
  nameWithType: SchemaNameCollection.AddRange(SchemaNameCollection)
  fullName: System.DirectoryServices.SchemaNameCollection.AddRange(SchemaNameCollection)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "將一組指定的結構描述名稱附加至這個集合。"
  syntax:
    content: public void AddRange (System.DirectoryServices.SchemaNameCollection value);
    parameters:
    - id: value
      type: System.DirectoryServices.SchemaNameCollection
      description: "A <xref href=&quot;System.DirectoryServices.SchemaNameCollection&quot;> </xref> ，其中包含要加入的結構描述名稱。"
  overload: System.DirectoryServices.SchemaNameCollection.AddRange*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])
  id: AddRange(System.String[])
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: AddRange(String[])
  nameWithType: SchemaNameCollection.AddRange(String[])
  fullName: System.DirectoryServices.SchemaNameCollection.AddRange(String[])
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "將一組指定的結構描述名稱附加至這個集合。"
  syntax:
    content: public void AddRange (string[] value);
    parameters:
    - id: value
      type: System.String[]
      description: "陣列的型別<xref:System.String>，其中包含要加入的結構描述名稱</xref:System.String>"
  overload: System.DirectoryServices.SchemaNameCollection.AddRange*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Clear
  id: Clear
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Clear()
  nameWithType: SchemaNameCollection.Clear()
  fullName: System.DirectoryServices.SchemaNameCollection.Clear()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "從此集合移除所有物件。"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.DirectoryServices.SchemaNameCollection.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Contains(System.String)
  id: Contains(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Contains(String)
  nameWithType: SchemaNameCollection.Contains(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Contains(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "判斷這個集合是否包含指定的結構描述名稱。"
  syntax:
    content: public bool Contains (string value);
    parameters:
    - id: value
      type: System.String
      description: "要搜尋的結構描述名稱。"
    return:
      type: System.Boolean
      description: "傳回值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的屬性隸屬於這個集合中; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.DirectoryServices.SchemaNameCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)
  id: CopyTo(System.String[],System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: CopyTo(String[],Int32)
  nameWithType: SchemaNameCollection.CopyTo(String[],Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.CopyTo(String[],Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "結構描述名稱從這個集合複製到陣列，從特定的陣列索引開始。"
  syntax:
    content: public void CopyTo (string[] stringArray, int index);
    parameters:
    - id: stringArray
      type: System.String[]
      description: "類型的陣列<xref:System.String>接收此集合的結構描述名稱。</xref:System.String>"
    - id: index
      type: System.Int32
      description: "以零為起始的陣列索引處開始複製結構描述名稱。"
  overload: System.DirectoryServices.SchemaNameCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Count
  id: Count
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Count
  nameWithType: SchemaNameCollection.Count
  fullName: System.DirectoryServices.SchemaNameCollection.Count
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Count 屬性會取得此集合中的物件數目。"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "在此集合中的物件數目。"
  overload: System.DirectoryServices.SchemaNameCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.GetEnumerator
  id: GetEnumerator
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SchemaNameCollection.GetEnumerator()
  fullName: System.DirectoryServices.SchemaNameCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "傳回可用來逐一查看這個集合的列舉值。"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "您可以用來逐一查看這個集合的列舉值。"
  overload: System.DirectoryServices.SchemaNameCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)
  id: IndexOf(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: IndexOf(String)
  nameWithType: SchemaNameCollection.IndexOf(String)
  fullName: System.DirectoryServices.SchemaNameCollection.IndexOf(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "判斷這個集合中指定的結構描述名稱的索引。"
  syntax:
    content: public int IndexOf (string value);
    parameters:
    - id: value
      type: System.String
      description: "要搜尋的結構描述名稱。"
    return:
      type: System.Int32
      description: "指定的結構描述名稱，則為-1 的集合中找不到結構描述名稱的以零為起始的索引。"
  overload: System.DirectoryServices.SchemaNameCollection.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)
  id: Insert(System.Int32,System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Insert(Int32,String)
  nameWithType: SchemaNameCollection.Insert(Int32,String)
  fullName: System.DirectoryServices.SchemaNameCollection.Insert(Int32,String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "插入此集合中指定索引處的結構描述名稱。"
  remarks: "如果`index`參數等於集合中的項目數目，這個方法會將值附加至集合結尾。"
  syntax:
    content: public void Insert (int index, string value);
    parameters:
    - id: index
      type: System.Int32
      description: "插入集合中要插入結構描述名稱以零為起始的索引。"
    - id: value
      type: System.String
      description: "要插入此集合的結構描述名稱。"
  overload: System.DirectoryServices.SchemaNameCollection.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: SchemaNameCollection.Item(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.Item(Int32)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "取得或設定指定索引處的存在的物件。"
  remarks: "在 C# 中，這個屬性是索引子<xref:System.DirectoryServices.SchemaNameCollection>類別。</xref:System.DirectoryServices.SchemaNameCollection>       在 JScript，您可以使用類型，所定義的預設索引屬性，但您無法明確地定義您自己。 不過，指定 expando 屬性類別上的會自動提供預設索引的屬性，其類型為 Object 時，而且索引類型為<xref:System.String>.</xref:System.String>"
  syntax:
    content: public string this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "集合內以零為起始的索引。"
    return:
      type: System.String
      description: "存在指定的索引處的物件。"
  overload: System.DirectoryServices.SchemaNameCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Remove(System.String)
  id: Remove(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Remove(String)
  nameWithType: SchemaNameCollection.Remove(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Remove(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "從此集合移除指定的結構描述名稱。"
  syntax:
    content: public void Remove (string value);
    parameters:
    - id: value
      type: System.String
      description: "要移除的結構描述名稱。"
  overload: System.DirectoryServices.SchemaNameCollection.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SchemaNameCollection.RemoveAt(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "移除位於指定的索引，從這個集合的結構描述名稱。"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "要移除之結構描述名稱的以零為起始的索引。"
  overload: System.DirectoryServices.SchemaNameCollection.RemoveAt*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "以零為起始的索引小於零或等於集合的大小。"
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: SchemaNameCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "複製的項目<xref:System.Collections.ICollection>至<xref:System.Array>特定處開始，<xref:System.Array>索引。</xref:System.Array> </xref:System.Array> </xref:System.Collections.ICollection>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "<xref:System.Array>這是從<xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>複製之元素的目的地</xref:System.Array>一維 <xref:System.Array>必須有以零為起始的索引。</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "中以零為起始的索引`array`由此開始複製。"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>小於零。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>是多維的。       -在來源中的項目數<xref:System.Collections.ICollection>大於可用空間<code>index</code>至目的地結尾<code>array</code>。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "來源類型<xref:System.Collections.ICollection>無法自動轉換成目的地類型<code> array </code>。</xref:System.Collections.ICollection>"
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SchemaNameCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "取得值，指出是否存取<xref:System.Collections.ICollection>是同步 （安全執行緒）。</xref:System.Collections.ICollection>"
  remarks: "<xref:System.Collections.ICollection.SyncRoot%2A>傳回的物件，可用來同步處理存取具備<xref:System.Collections.ICollection>.</xref:System.Collections.ICollection></xref:System.Collections.ICollection.SyncRoot%2A>       大部分的集合中的類別<xref:System.Collections?displayProperty=fullName>命名空間也會實作同步處理方法，這會提供基礎集合周圍同步處理的包裝函式。</xref:System.Collections?displayProperty=fullName>       透過集合進行列舉在本質上並不是安全執行緒程序。 即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。 若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。       [Visual Basic、 C#]      下列範例示範如何鎖定集合使用<xref:System.Collections.ICollection.SyncRoot%2A>在整個列舉過程︰ ```c#   ICollection myCollection = new ICollection();     lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果存取<xref:System.Collections.ICollection>是同步 （安全執行緒），否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SchemaNameCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "取得物件，可用來同步處理存取具備<xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>"
  remarks: "針對無法公開使用基礎存放區的集合，則所預期的實作會傳回目前執行個體。 請注意目前的執行個體的指標可能無法完全包裝其他集合，集合這些集合應該傳回基礎集合`SyncRoot`屬性。       大部分的集合中的類別<xref:System.Collections?displayProperty=fullName>命名空間也實作`Synchronized`方法，這會提供基礎集合周圍同步處理的包裝函式。</xref:System.Collections?displayProperty=fullName> 不過，在衍生的類別可以提供自己的集合的同步化的版本<xref:System.Collections.ICollection.SyncRoot%2A>屬性。</xref:System.Collections.ICollection.SyncRoot%2A> 同步處理的程式碼必須在上執行作業<xref:System.Collections.ICollection.SyncRoot%2A>集合，不是直接在集合中。</xref:System.Collections.ICollection.SyncRoot%2A> 這可確保衍生自其他物件的集合正常運作。 具體而言，保持正常的同步處理與其他可能同時修改集合執行個體的執行緒。       如果沒有`Synchronized`方法的集合，如的預期使用量<xref:System.Collections.ICollection.SyncRoot%2A>看起來像這樣︰ ```c#   ICollection MyCollection =...    lock(MyCollection.SyncRoot) {     // Some operation on the collection, which is now thread safe.    }   ``` ```vb#   Dim myCollection as New ICollection()    SyncLock myCollection.SyncRoot     &quot; Some operation on the collection, which is now thread safe.    End SyncLock   ```透過集合進行列舉在本質上並非安全執行緒程序。      </xref:System.Collections.ICollection.SyncRoot%2A> 即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。 若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。       [Visual Basic、 C#]      下列範例示範如何鎖定集合使用<xref:System.Collections.ICollection.SyncRoot%2A>在整個列舉過程︰ ```c#   ICollection myCollection = new ICollection();    lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "物件，可用來同步處理存取具備<xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Add(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Add(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "將項目加入至清單。"
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "要加入至清單的項目。"
    return:
      type: System.Int32
      description: "新的項目已插入的位置。"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Contains(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Contains(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "判斷清單是否包含指定的值。"
  remarks: "從.NET Framework 2.0 開始，這個方法會使用等號和 CompareTo 方法來判斷項目集合中的物件存在。 在舊版的.NET Framework 中，所使用的等號和 CompareTo 做這項判斷項目上的參數集合中物件的方法。"
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: "要在清單中找到的值。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果中找到的值清單中，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.IndexOf(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "判斷指定的項目在清單中的索引。"
  remarks: "從.NET Framework 2.0 開始，這個方法會使用等號和 CompareTo 方法來判斷項目集合中的物件存在。 在舊版的.NET Framework 中，所使用的等號和 CompareTo 做這項判斷項目上的參數集合中物件的方法。"
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "要在清單中找到的項目。"
    return:
      type: System.Int32
      description: "索引<code> value </code>如果在清單中找到則為-1。"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Insert(Int32,Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "將清單項目插入位於指定索引處。"
  remarks: "如果`index`然後等於在清單中的項目數*值*附加至結尾。       在連續項目，例如清單的集合中移除項的項目向上移動以佔用空出的位置。 如果集合具有索引，會移動之項目的索引也會更新。"
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "值應該插入以零為起始的索引。"
    - id: value
      type: System.Object
      description: "要插入清單的項目。"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.IsFixedSize
  nameWithType: SchemaNameCollection.System.Collections.IList.IsFixedSize
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IsFixedSize
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "取得值，指出是否<xref:System.Collections.IList>有固定的大小。</xref:System.Collections.IList>"
  remarks: "具有固定大小的集合不允許在集合建立後，但允許修改現有的項目後新增或移除項目。"
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Collections.IList>有固定大小，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Collections.IList>"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.IsReadOnly
  nameWithType: SchemaNameCollection.System.Collections.IList.IsReadOnly
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IsReadOnly
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "取得值，指出是否<xref:System.Collections.IList>處於唯讀狀態。</xref:System.Collections.IList>"
  remarks: "是唯讀的集合不允許在集合建立後增加、 移除或修改項目。"
  syntax:
    content: bool System.Collections.IList.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Collections.IList>是唯讀，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Collections.IList>"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Item(Int32)
  nameWithType: SchemaNameCollection.System.Collections.IList.Item(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Item(Int32)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "取得或設定指定索引處的項目。"
  remarks: '這個屬性會提供可以使用下列語法存取集合中的特定元素的能力︰ `myCollection[index]`。'
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "取得或設定項目之以零為起始的索引。"
    return:
      type: System.Object
      description: "指定索引處的項目。"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>不是有效的索引中<xref:System.Collections.IList>。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "此屬性設定和<xref:System.Collections.IList>處於唯讀狀態。</xref:System.Collections.IList>"
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Remove(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Remove(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "移除第一次出現的特定<code> value </code>從清單中。"
  remarks: "在連續項目，例如清單的集合中移除項的項目向上移動以佔用空出的位置。 如果集合具有索引，會移動之項目的索引也會更新。"
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: "`value`若要從清單中移除。"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.DirectoryServices.SchemaNameCollection.Add(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Add(String)
  nameWithType: SchemaNameCollection.Add(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Add(String)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: AddRange(SchemaNameCollection)
  nameWithType: SchemaNameCollection.AddRange(SchemaNameCollection)
  fullName: System.DirectoryServices.SchemaNameCollection.AddRange(SchemaNameCollection)
- uid: System.DirectoryServices.SchemaNameCollection
  parent: System.DirectoryServices
  isExternal: false
  name: SchemaNameCollection
  nameWithType: SchemaNameCollection
  fullName: System.DirectoryServices.SchemaNameCollection
- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: AddRange(String[])
  nameWithType: SchemaNameCollection.AddRange(String[])
  fullName: System.DirectoryServices.SchemaNameCollection.AddRange(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.DirectoryServices.SchemaNameCollection.Clear
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Clear()
  nameWithType: SchemaNameCollection.Clear()
  fullName: System.DirectoryServices.SchemaNameCollection.Clear()
- uid: System.DirectoryServices.SchemaNameCollection.Contains(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Contains(String)
  nameWithType: SchemaNameCollection.Contains(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Contains(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: CopyTo(String[],Int32)
  nameWithType: SchemaNameCollection.CopyTo(String[],Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.CopyTo(String[],Int32)
- uid: System.DirectoryServices.SchemaNameCollection.Count
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Count
  nameWithType: SchemaNameCollection.Count
  fullName: System.DirectoryServices.SchemaNameCollection.Count
- uid: System.DirectoryServices.SchemaNameCollection.GetEnumerator
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: SchemaNameCollection.GetEnumerator()
  fullName: System.DirectoryServices.SchemaNameCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: IndexOf(String)
  nameWithType: SchemaNameCollection.IndexOf(String)
  fullName: System.DirectoryServices.SchemaNameCollection.IndexOf(String)
- uid: System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Insert(Int32,String)
  nameWithType: SchemaNameCollection.Insert(Int32,String)
  fullName: System.DirectoryServices.SchemaNameCollection.Insert(Int32,String)
- uid: System.DirectoryServices.SchemaNameCollection.Item(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: SchemaNameCollection.Item(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.Item(Int32)
- uid: System.DirectoryServices.SchemaNameCollection.Remove(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Remove(String)
  nameWithType: SchemaNameCollection.Remove(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Remove(String)
- uid: System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SchemaNameCollection.RemoveAt(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.RemoveAt(Int32)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: SchemaNameCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SchemaNameCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SchemaNameCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.SyncRoot
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Add(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Add(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Add(Object)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Contains(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Contains(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Contains(Object)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.IndexOf(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IndexOf(Object)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Insert(Int32,Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Insert(Int32,Object)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: SchemaNameCollection.System.Collections.IList.IsFixedSize
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IsFixedSize
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: SchemaNameCollection.System.Collections.IList.IsReadOnly
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IsReadOnly
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Item(Int32)
  nameWithType: SchemaNameCollection.System.Collections.IList.Item(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Item(Int32)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Remove(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Remove(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Remove(Object)
- uid: System.DirectoryServices.SchemaNameCollection.Add*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Add
  nameWithType: SchemaNameCollection.Add
- uid: System.DirectoryServices.SchemaNameCollection.AddRange*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: AddRange
  nameWithType: SchemaNameCollection.AddRange
- uid: System.DirectoryServices.SchemaNameCollection.Clear*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Clear
  nameWithType: SchemaNameCollection.Clear
- uid: System.DirectoryServices.SchemaNameCollection.Contains*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Contains
  nameWithType: SchemaNameCollection.Contains
- uid: System.DirectoryServices.SchemaNameCollection.CopyTo*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: CopyTo
  nameWithType: SchemaNameCollection.CopyTo
- uid: System.DirectoryServices.SchemaNameCollection.Count*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Count
  nameWithType: SchemaNameCollection.Count
- uid: System.DirectoryServices.SchemaNameCollection.GetEnumerator*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: SchemaNameCollection.GetEnumerator
- uid: System.DirectoryServices.SchemaNameCollection.IndexOf*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: IndexOf
  nameWithType: SchemaNameCollection.IndexOf
- uid: System.DirectoryServices.SchemaNameCollection.Insert*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Insert
  nameWithType: SchemaNameCollection.Insert
- uid: System.DirectoryServices.SchemaNameCollection.Item*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Item
  nameWithType: SchemaNameCollection.Item
- uid: System.DirectoryServices.SchemaNameCollection.Remove*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Remove
  nameWithType: SchemaNameCollection.Remove
- uid: System.DirectoryServices.SchemaNameCollection.RemoveAt*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: RemoveAt
  nameWithType: SchemaNameCollection.RemoveAt
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: SchemaNameCollection.System.Collections.ICollection.CopyTo
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SchemaNameCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SchemaNameCollection.System.Collections.ICollection.SyncRoot
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: SchemaNameCollection.System.Collections.IList.Add
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: SchemaNameCollection.System.Collections.IList.Contains
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: SchemaNameCollection.System.Collections.IList.IndexOf
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: SchemaNameCollection.System.Collections.IList.Insert
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: SchemaNameCollection.System.Collections.IList.IsFixedSize
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: SchemaNameCollection.System.Collections.IList.IsReadOnly
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Item
  nameWithType: SchemaNameCollection.System.Collections.IList.Item
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: SchemaNameCollection.System.Collections.IList.Remove
