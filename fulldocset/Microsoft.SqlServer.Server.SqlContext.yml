### YamlMime:ManagedReference
items:
- uid: Microsoft.SqlServer.Server.SqlContext
  id: SqlContext
  children:
  - Microsoft.SqlServer.Server.SqlContext.IsAvailable
  - Microsoft.SqlServer.Server.SqlContext.Pipe
  - Microsoft.SqlServer.Server.SqlContext.TriggerContext
  - Microsoft.SqlServer.Server.SqlContext.WindowsIdentity
  langs:
  - csharp
  name: SqlContext
  nameWithType: SqlContext
  fullName: Microsoft.SqlServer.Server.SqlContext
  type: Class
  summary: "表示呼叫端的內容，它提供存取權的抽象<xref href=&quot;Microsoft.SqlServer.Server.SqlPipe&quot;> </xref>， <xref href=&quot;Microsoft.SqlServer.Server.SqlTriggerContext&quot;> </xref>，和<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>物件。 這個類別無法被繼承。"
  remarks: "SqlContext 物件可以用來取得該觸發程序內容 （適用於觸發程序中執行的程式碼） 和管道物件 （可用時，例如預存程序）。 它也可用來取得<xref:System.Security.Principal.WindowsIdentity>物件，表示呼叫的用戶端，Microsoft Windows 身分識別，如果用戶端驗證伺服器使用整合式驗證。</xref:System.Security.Principal.WindowsIdentity>"
  example:
  - "The following example creates a new <xref:Microsoft.SqlServer.Server.SqlDataRecord> and its <xref:Microsoft.SqlServer.Server.SqlMetaData>. The example then marks the beginning of a result set using the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> method, sends records with example data back to the client using the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> method, and marks the end of the result set with the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> method.  \n  \n [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/add/codesnippet/visualbasic/t-microsoft.sqlserver.se_11_1.vb)]\n [!code-cs[DataWorks SqlPipe.SendResultsRow#1](~/add/codesnippet/csharp/t-microsoft.sqlserver.se_11_1.cs)]"
  syntax:
    content: public sealed class SqlContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.SqlServer.Server.SqlContext.IsAvailable
  id: IsAvailable
  parent: Microsoft.SqlServer.Server.SqlContext
  langs:
  - csharp
  name: IsAvailable
  nameWithType: SqlContext.IsAvailable
  fullName: Microsoft.SqlServer.Server.SqlContext.IsAvailable
  type: Property
  assemblies:
  - System.Data
  namespace: Microsoft.SqlServer.Server
  summary: "指定是否呼叫的程式碼在 SQL Server 中執行，並可存取此內容連接。"
  remarks: "如果這個屬性會傳回 false，所有其他<xref:Microsoft.SqlServer.Server.SqlContext>成員擲回<xref:System.InvalidOperationException>如果。</xref:System.InvalidOperationException> </xref:Microsoft.SqlServer.Server.SqlContext>       如果這個屬性會傳回 false，任何嘗試開啟連接物件的 「 內容連接 = true&quot;的連接字串中會失敗。       這個屬性是唯讀的。       如果一段程式碼可能會執行 （使用 common language runtime 整合） 的 SQL Server 內部和外部 SQL Server，請使用 ADO.NET 存取資料，這個屬性可用來檢查是否可以使用內容連接。"
  syntax:
    content: public static bool IsAvailable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>如果使用內容連接和其他<xref href=&quot;Microsoft.SqlServer.Server.SqlContext&quot;></xref>可以存取的成員。"
  overload: Microsoft.SqlServer.Server.SqlContext.IsAvailable*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.SqlServer.Server.SqlContext.Pipe
  id: Pipe
  parent: Microsoft.SqlServer.Server.SqlContext
  langs:
  - csharp
  name: Pipe
  nameWithType: SqlContext.Pipe
  fullName: Microsoft.SqlServer.Server.SqlContext.Pipe
  type: Property
  assemblies:
  - System.Data
  namespace: Microsoft.SqlServer.Server
  summary: "取得管道物件，可讓呼叫者傳送結果集、 訊息及執行傳回給用戶端的命令的結果。"
  remarks: "如果從 SQL Server 外部，叫用<xref:System.NotSupportedException>就會擲回。</xref:System.NotSupportedException>       這個屬性是唯讀的。"
  syntax:
    content: public static Microsoft.SqlServer.Server.SqlPipe Pipe { get; }
    return:
      type: Microsoft.SqlServer.Server.SqlPipe
      description: "執行個體<xref href=&quot;Microsoft.SqlServer.Server.SqlPipe&quot;></xref>管道是否可用，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果在內容中呼叫管道不可用 （例如，在使用者定義的函式）。"
  overload: Microsoft.SqlServer.Server.SqlContext.Pipe*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.SqlServer.Server.SqlContext.TriggerContext
  id: TriggerContext
  parent: Microsoft.SqlServer.Server.SqlContext
  langs:
  - csharp
  name: TriggerContext
  nameWithType: SqlContext.TriggerContext
  fullName: Microsoft.SqlServer.Server.SqlContext.TriggerContext
  type: Property
  assemblies:
  - System.Data
  namespace: Microsoft.SqlServer.Server
  summary: "取得用來提供造成引發觸發程序和已更新的資料行的對應資訊的呼叫端的觸發程序內容。"
  remarks: "<xref:Microsoft.SqlServer.Server.SqlTriggerContext>只可擷取物件從通用語言執行階段觸發程序內。</xref:Microsoft.SqlServer.Server.SqlTriggerContext>       如果從 SQL Server 外部存取 TriggerContext 屬性<xref:System.NotSupportedException>就會擲回。</xref:System.NotSupportedException>       這個屬性是唯讀的。"
  syntax:
    content: public static Microsoft.SqlServer.Server.SqlTriggerContext TriggerContext { get; }
    return:
      type: Microsoft.SqlServer.Server.SqlTriggerContext
      description: "執行個體<xref href=&quot;Microsoft.SqlServer.Server.SqlTriggerContext&quot;></xref>觸發程序內容是否可用，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果觸發程序引動過程之外呼叫。"
  overload: Microsoft.SqlServer.Server.SqlContext.TriggerContext*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.SqlServer.Server.SqlContext.WindowsIdentity
  id: WindowsIdentity
  parent: Microsoft.SqlServer.Server.SqlContext
  langs:
  - csharp
  name: WindowsIdentity
  nameWithType: SqlContext.WindowsIdentity
  fullName: Microsoft.SqlServer.Server.SqlContext.WindowsIdentity
  type: Property
  assemblies:
  - System.Data
  namespace: Microsoft.SqlServer.Server
  summary: "呼叫端的 Microsoft Windows 身分識別。"
  remarks: "在 SQL Server 內的 common language runtime (CLR) 程式碼會永遠叫用處理序帳戶的內容中。 如果有必要的程式碼執行的動作，使用呼叫使用者的身分識別，而不 SQL Server 處理序身分識別，然後模擬語彙基元應該透過這個屬性取得。 取得之後<xref:System.Security.Principal.WindowsIdentity>物件，呼叫端可以模擬用戶端帳戶，並代表它執行動作。</xref:System.Security.Principal.WindowsIdentity>       如果從 SQL Server 外部，叫用<xref:System.NotSupportedException>就會擲回。</xref:System.NotSupportedException>       只有組件標示`EXTERNAL_ACCESS`或`UNSAFE`權限可以存取這個屬性。       這個屬性是唯讀的。"
  example:
  - "The following example shows how to get the Windows identity of the calling client and impersonate the client. See \"Impersonation Sample\" in SQL Server Books Online for an example of impersonation using the WindowsIdentity property.  \n  \n [!code-cs[DataWorks SqlContext.WindowsIdentity Sample#1](~/add/codesnippet/csharp/p-microsoft.sqlserver.se_6_1.cs)]\n [!code-vb[DataWorks SqlContext.WindowsIdentity Sample#1](~/add/codesnippet/visualbasic/p-microsoft.sqlserver.se_6_1.vb)]"
  syntax:
    content: public static System.Security.Principal.WindowsIdentity WindowsIdentity { get; }
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "A <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>代表 Windows 身分識別的呼叫端，執行個體或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果用戶端驗證使用 SQL Server 驗證。"
  overload: Microsoft.SqlServer.Server.SqlContext.WindowsIdentity*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: Microsoft.SqlServer.Server.SqlContext.IsAvailable
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: IsAvailable
  nameWithType: SqlContext.IsAvailable
  fullName: Microsoft.SqlServer.Server.SqlContext.IsAvailable
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.SqlServer.Server.SqlContext.Pipe
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: Pipe
  nameWithType: SqlContext.Pipe
  fullName: Microsoft.SqlServer.Server.SqlContext.Pipe
- uid: Microsoft.SqlServer.Server.SqlPipe
  parent: Microsoft.SqlServer.Server
  isExternal: false
  name: SqlPipe
  nameWithType: SqlPipe
  fullName: Microsoft.SqlServer.Server.SqlPipe
- uid: Microsoft.SqlServer.Server.SqlContext.TriggerContext
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: TriggerContext
  nameWithType: SqlContext.TriggerContext
  fullName: Microsoft.SqlServer.Server.SqlContext.TriggerContext
- uid: Microsoft.SqlServer.Server.SqlTriggerContext
  parent: Microsoft.SqlServer.Server
  isExternal: false
  name: SqlTriggerContext
  nameWithType: SqlTriggerContext
  fullName: Microsoft.SqlServer.Server.SqlTriggerContext
- uid: Microsoft.SqlServer.Server.SqlContext.WindowsIdentity
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: WindowsIdentity
  nameWithType: SqlContext.WindowsIdentity
  fullName: Microsoft.SqlServer.Server.SqlContext.WindowsIdentity
- uid: System.Security.Principal.WindowsIdentity
  parent: System.Security.Principal
  isExternal: false
  name: WindowsIdentity
  nameWithType: WindowsIdentity
  fullName: System.Security.Principal.WindowsIdentity
- uid: Microsoft.SqlServer.Server.SqlContext.IsAvailable*
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: IsAvailable
  nameWithType: SqlContext.IsAvailable
- uid: Microsoft.SqlServer.Server.SqlContext.Pipe*
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: Pipe
  nameWithType: SqlContext.Pipe
- uid: Microsoft.SqlServer.Server.SqlContext.TriggerContext*
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: TriggerContext
  nameWithType: SqlContext.TriggerContext
- uid: Microsoft.SqlServer.Server.SqlContext.WindowsIdentity*
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: WindowsIdentity
  nameWithType: SqlContext.WindowsIdentity
