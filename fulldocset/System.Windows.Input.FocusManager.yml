### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.FocusManager
  id: FocusManager
  children:
  - System.Windows.Input.FocusManager.AddGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  - System.Windows.Input.FocusManager.AddLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  - System.Windows.Input.FocusManager.FocusedElementProperty
  - System.Windows.Input.FocusManager.GetFocusedElement(System.Windows.DependencyObject)
  - System.Windows.Input.FocusManager.GetFocusScope(System.Windows.DependencyObject)
  - System.Windows.Input.FocusManager.GetIsFocusScope(System.Windows.DependencyObject)
  - System.Windows.Input.FocusManager.GotFocusEvent
  - System.Windows.Input.FocusManager.IsFocusScopeProperty
  - System.Windows.Input.FocusManager.LostFocusEvent
  - System.Windows.Input.FocusManager.RemoveGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  - System.Windows.Input.FocusManager.RemoveLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  - System.Windows.Input.FocusManager.SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)
  - System.Windows.Input.FocusManager.SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)
  langs:
  - csharp
  name: FocusManager
  nameWithType: FocusManager
  fullName: System.Windows.Input.FocusManager
  type: Class
  summary: "提供一組靜態方法，附加的屬性和事件，以判斷並設定焦點領域以及設定焦點的項目範圍內。"
  remarks: "在[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]有關於焦點的兩個概念︰ 鍵盤焦點時，邏輯焦點。       目前接收鍵盤輸入的項目與鍵盤焦點。  可以有只有一個項目具有鍵盤焦點。  這個項目具有鍵盤焦點具有<xref:System.Windows.IInputElement.IsKeyboardFocused%2A>設`true`。</xref:System.Windows.IInputElement.IsKeyboardFocused%2A>  <xref:System.Windows.Input.Keyboard.FocusedElement%2A?displayProperty=fullName>傳回具有鍵盤焦點的項目。</xref:System.Windows.Input.Keyboard.FocusedElement%2A?displayProperty=fullName>       邏輯焦點與<xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>特定範圍內。</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>       焦點領域是容器項目，可追蹤的<xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>其範圍內。</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>  根據預設，<xref:System.Windows.Window>類別是一個焦點領域時<xref:System.Windows.Controls.Menu>， <xref:System.Windows.Controls.ContextMenu>，和<xref:System.Windows.Controls.ToolBar>類別。</xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window>  項目是焦點範圍有<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>設`true`。</xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       可以有多個項目具有邏輯焦點，但只能有一個項目具有邏輯焦點單一焦點範圍內。  具有邏輯焦點的項目不一定有鍵盤焦點，但具有鍵盤焦點的項目會具有邏輯焦點。  您可定義焦點領域焦點範圍內。  在此情況下，父焦點領域和子焦點領域都可以有<xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>.</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>       下列案例說明如何鍵盤焦點和邏輯焦點而變更[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]具有<xref:System.Windows.Window>使用<xref:System.Windows.Controls.TextBox>且<xref:System.Windows.Controls.Menu>具有<xref:System.Windows.Controls.MenuItem>.</xref:System.Windows.Controls.MenuItem></xref:System.Windows.Controls.Menu></xref:System.Windows.Controls.TextBox></xref:System.Windows.Window>應用程式  當從變更鍵盤焦點<xref:System.Windows.Controls.TextBox>至<xref:System.Windows.Controls.MenuItem>、<xref:System.Windows.Controls.TextBox>失去鍵盤焦點，但保留邏輯焦點<xref:System.Windows.Window>焦點領域。</xref:System.Windows.Window> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.MenuItem> </xref:System.Windows.Controls.TextBox>  <xref:System.Windows.Controls.MenuItem>取得鍵盤焦點，而取得邏輯焦點<xref:System.Windows.Controls.Menu>焦點領域。</xref:System.Windows.Controls.Menu> </xref:System.Windows.Controls.MenuItem>  當鍵盤焦點返回根<xref:System.Windows.Window><xref:System.Windows.Window>焦點領域，具有邏輯焦點會取得鍵盤焦點，在此案例中是<xref:System.Windows.Controls.TextBox>.</xref:System.Windows.Controls.TextBox></xref:System.Windows.Window>中的項目</xref:System.Windows.Window>  <xref:System.Windows.Controls.TextBox>現在具有鍵盤焦點，以及邏輯焦點。</xref:System.Windows.Controls.TextBox>  <xref:System.Windows.Controls.MenuItem>失去鍵盤焦點，但會保留邏輯焦點<xref:System.Windows.Controls.Menu>焦點領域。</xref:System.Windows.Controls.Menu> </xref:System.Windows.Controls.MenuItem>       預設值<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>上<xref:System.Windows.Window>， <xref:System.Windows.Controls.Menu>， <xref:System.Windows.Controls.ToolBar>，和<xref:System.Windows.Controls.ContextMenu>是`true`。</xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window> </xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       如需有關焦點的詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)和[焦點概觀](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static class FocusManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.AddGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  id: AddGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "加入的處理常式<xref:System.Windows.Input.FocusManager.GotFocus>附加事件。</xref:System.Windows.Input.FocusManager.GotFocus>"
  syntax:
    content: public static void AddGotFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>或<xref href=&quot;System.Windows.ContentElement&quot;></xref>接聽此事件。"
    - id: handler
      type: System.Windows.RoutedEventHandler
      description: "要加入事件處理常式。"
  overload: System.Windows.Input.FocusManager.AddGotFocusHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.AddLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  id: AddLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "加入的處理常式<xref:System.Windows.Input.FocusManager.LostFocus>附加事件。</xref:System.Windows.Input.FocusManager.LostFocus>"
  syntax:
    content: public static void AddLostFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>或<xref href=&quot;System.Windows.ContentElement&quot;></xref>接聽此事件。"
    - id: handler
      type: System.Windows.RoutedEventHandler
      description: "要加入事件處理常式。"
  overload: System.Windows.Input.FocusManager.AddLostFocusHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.FocusedElementProperty
  id: FocusedElementProperty
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: FocusedElementProperty
  nameWithType: FocusManager.FocusedElementProperty
  fullName: System.Windows.Input.FocusManager.FocusedElementProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "識別<xref:System.Windows.Input.FocusManager.FocusedElement*>附加屬性。</xref:System.Windows.Input.FocusManager.FocusedElement*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty FocusedElementProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.GetFocusedElement(System.Windows.DependencyObject)
  id: GetFocusedElement(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: GetFocusedElement(DependencyObject)
  nameWithType: FocusManager.GetFocusedElement(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetFocusedElement(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得具有邏輯焦點的項目範圍內的指定的焦點。"
  remarks: "<xref:System.Windows.Input.FocusManager.FocusedElement%2A>是項目具有邏輯焦點特定焦點領域。</xref:System.Windows.Input.FocusManager.FocusedElement%2A>  這個物件可能會或可能沒有鍵盤焦點。  鍵盤焦點是指收到鍵盤輸入的項目。  焦點、 鍵盤焦點，以及邏輯焦點的詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       如果`element`不焦點領域，這個方法會傳回`null`。       使用<xref:System.Windows.Input.FocusManager.SetFocusedElement%2A>，以指定項目具有邏輯焦點，在指定的焦點的範圍內。</xref:System.Windows.Input.FocusManager.SetFocusedElement%2A>"
  example:
  - "The following example sets the element with logical focus by using the <xref:System.Windows.Input.FocusManager.SetFocusedElement%2A> and it gets the element with logical focus by using the GetFocusedElement.  \n  \n [!code-cs[focussnippets#FocusGetSetFocusedElement](~/add/codesnippet/csharp/FocusSnippets/Window1.xaml.cs#focusgetsetfocusedelement)]\n [!code-vb[focussnippets#FocusGetSetFocusedElement](~/add/codesnippet/visualbasic/focussnippets/window1.xaml.vb#focusgetsetfocusedelement)]"
  syntax:
    content: public static System.Windows.IInputElement GetFocusedElement (System.Windows.DependencyObject element);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "具有指定的焦點領域中的邏輯焦點的項目。"
    return:
      type: System.Windows.IInputElement
      description: "與指定的焦點範圍中具有邏輯焦點項目。"
  overload: System.Windows.Input.FocusManager.GetFocusedElement*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>element</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.GetFocusScope(System.Windows.DependencyObject)
  id: GetFocusScope(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: GetFocusScope(DependencyObject)
  nameWithType: FocusManager.GetFocusScope(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetFocusScope(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "判斷指定的項目具有的最接近上階<xref:System.Windows.Input.FocusManager.IsFocusScope*>設<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.Input.FocusManager.IsFocusScope*>"
  remarks: "預設值<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>上<xref:System.Windows.Window>， <xref:System.Windows.Controls.Menu>， <xref:System.Windows.Controls.ToolBar>，<xref:System.Windows.Controls.ContextMenu>是`true`。</xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window> </xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       焦點領域是容器項目，可追蹤的<xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>其範圍內。</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>  根據預設，<xref:System.Windows.Window>類別是一個焦點領域時<xref:System.Windows.Controls.Menu>， <xref:System.Windows.Controls.ContextMenu>，和<xref:System.Windows.Controls.ToolBar>類別。</xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window>  項目是焦點範圍有<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>設`true`。</xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       焦點、 鍵盤焦點，以及邏輯焦點的詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static System.Windows.DependencyObject GetFocusScope (System.Windows.DependencyObject element);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "若要取得最接近的焦點範圍的項目。"
    return:
      type: System.Windows.DependencyObject
      description: "指定項目的焦點領域。"
  overload: System.Windows.Input.FocusManager.GetFocusScope*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>element</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.GetIsFocusScope(System.Windows.DependencyObject)
  id: GetIsFocusScope(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: GetIsFocusScope(DependencyObject)
  nameWithType: FocusManager.GetIsFocusScope(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetIsFocusScope(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "決定是否指定<xref href=&quot;System.Windows.DependencyObject&quot;></xref>的焦點領域。"
  remarks: "焦點領域是容器項目，可追蹤的<xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>其範圍內。</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>  根據預設，<xref:System.Windows.Window>類別是一個焦點領域時<xref:System.Windows.Controls.Menu>， <xref:System.Windows.Controls.ContextMenu>，和<xref:System.Windows.Controls.ToolBar>類別。</xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window>  項目是焦點範圍有<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>設`true`。</xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       焦點、 鍵盤焦點，以及邏輯焦點的詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static bool GetIsFocusScope (System.Windows.DependencyObject element);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "要從中讀取附加的屬性的項目。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Windows.Input.FocusManager.IsFocusScope*>設<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>上指定的項目; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.Input.FocusManager.IsFocusScope*>"
  overload: System.Windows.Input.FocusManager.GetIsFocusScope*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.GotFocusEvent
  id: GotFocusEvent
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: GotFocusEvent
  nameWithType: FocusManager.GotFocusEvent
  fullName: System.Windows.Input.FocusManager.GotFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "識別<xref:System.Windows.Input.FocusManager.GotFocus>附加事件。</xref:System.Windows.Input.FocusManager.GotFocus>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.IsFocusScopeProperty
  id: IsFocusScopeProperty
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: IsFocusScopeProperty
  nameWithType: FocusManager.IsFocusScopeProperty
  fullName: System.Windows.Input.FocusManager.IsFocusScopeProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "識別<xref:System.Windows.Input.FocusManager.IsFocusScope*>附加屬性。</xref:System.Windows.Input.FocusManager.IsFocusScope*>"
  remarks: "預設值<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>上<xref:System.Windows.Window>， <xref:System.Windows.Controls.Menu>， <xref:System.Windows.Controls.ToolBar>，<xref:System.Windows.Controls.ContextMenu>是`true`。</xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window> </xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       焦點領域是容器項目，可追蹤的<xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>其範圍內。</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>  根據預設，<xref:System.Windows.Window>類別是一個焦點領域時<xref:System.Windows.Controls.Menu>， <xref:System.Windows.Controls.ContextMenu>，和<xref:System.Windows.Controls.ToolBar>類別。</xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window>  項目是焦點範圍有<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>設`true`。</xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       焦點、 鍵盤焦點，以及邏輯焦點的詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsFocusScopeProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.LostFocusEvent
  id: LostFocusEvent
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: LostFocusEvent
  nameWithType: FocusManager.LostFocusEvent
  fullName: System.Windows.Input.FocusManager.LostFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "識別<xref:System.Windows.Input.FocusManager.LostFocus>附加事件。</xref:System.Windows.Input.FocusManager.LostFocus>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.RemoveGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  id: RemoveGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "移除的處理常式<xref:System.Windows.Input.FocusManager.GotFocus>附加事件。</xref:System.Windows.Input.FocusManager.GotFocus>"
  syntax:
    content: public static void RemoveGotFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>或<xref href=&quot;System.Windows.ContentElement&quot;></xref>接聽此事件。"
    - id: handler
      type: System.Windows.RoutedEventHandler
      description: "要移除事件處理常式。"
  overload: System.Windows.Input.FocusManager.RemoveGotFocusHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.RemoveLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  id: RemoveLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "移除的處理常式<xref:System.Windows.Input.FocusManager.LostFocus>附加事件。</xref:System.Windows.Input.FocusManager.LostFocus>"
  syntax:
    content: public static void RemoveLostFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>或<xref href=&quot;System.Windows.ContentElement&quot;></xref>接聽此事件。"
    - id: handler
      type: System.Windows.RoutedEventHandler
      description: "要移除事件處理常式。"
  overload: System.Windows.Input.FocusManager.RemoveLostFocusHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)
  id: SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: SetFocusedElement(DependencyObject,IInputElement)
  nameWithType: FocusManager.SetFocusedElement(DependencyObject,IInputElement)
  fullName: System.Windows.Input.FocusManager.SetFocusedElement(DependencyObject,IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "指定的項目上，設定邏輯焦點。"
  remarks: "<xref:System.Windows.Input.FocusManager.FocusedElement%2A>是項目具有邏輯焦點特定焦點領域。</xref:System.Windows.Input.FocusManager.FocusedElement%2A>  這個物件可能會或可能沒有鍵盤焦點。  鍵盤焦點是指收到鍵盤輸入的項目。  焦點、 鍵盤焦點，以及邏輯焦點的詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       您可指定之上階元素為焦點領域的焦點領域。  例如，如果<xref:System.Windows.Controls.StackPanel>是焦點領域和其父代<xref:System.Windows.Window>的焦點領域，<xref:System.Windows.Controls.TextBox>的子系<xref:System.Windows.Controls.StackPanel>無法指定<xref:System.Windows.Window>作為呼叫 SetFocusedElement 時的焦點領域。</xref:System.Windows.Window> </xref:System.Windows.Controls.StackPanel> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Window> </xref:System.Windows.Controls.StackPanel>  <xref:System.Windows.Controls.TextBox>接著<xref:System.Windows.Input.FocusManager.FocusedElement%2A>兩者<xref:System.Windows.Window>聚焦領域和<xref:System.Windows.Controls.StackPanel>焦點領域。</xref:System.Windows.Controls.StackPanel> </xref:System.Windows.Window> </xref:System.Windows.Input.FocusManager.FocusedElement%2A> </xref:System.Windows.Controls.TextBox>       SetFocusedElement，將指定的焦點領域中指定的項目邏輯焦點，並會嘗試提供項目鍵盤焦點。"
  example:
  - "The following example sets the element with logical focus by using the SetFocusedElement and it gets the element with logical focus by using the <xref:System.Windows.Input.FocusManager.GetFocusedElement%2A>.  \n  \n [!code-cs[focussnippets#FocusGetSetFocusedElement](~/add/codesnippet/csharp/FocusSnippets/Window1.xaml.cs#focusgetsetfocusedelement)]\n [!code-vb[focussnippets#FocusGetSetFocusedElement](~/add/codesnippet/visualbasic/focussnippets/window1.xaml.vb#focusgetsetfocusedelement)]"
  syntax:
    content: public static void SetFocusedElement (System.Windows.DependencyObject element, System.Windows.IInputElement value);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "要進行指定的項目<xref:System.Windows.Input.FocusManager.FocusedElement*>.</xref:System.Windows.Input.FocusManager.FocusedElement*>焦點範圍"
    - id: value
      type: System.Windows.IInputElement
      description: "將邏輯焦點項目。"
  overload: System.Windows.Input.FocusManager.SetFocusedElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)
  id: SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: SetIsFocusScope(DependencyObject,Boolean)
  nameWithType: FocusManager.SetIsFocusScope(DependencyObject,Boolean)
  fullName: System.Windows.Input.FocusManager.SetIsFocusScope(DependencyObject,Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "設定指定<xref href=&quot;System.Windows.DependencyObject&quot;></xref>為焦點領域。"
  remarks: "焦點領域是容器項目，可追蹤的<xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>其範圍內。</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>  根據預設，<xref:System.Windows.Window>類別是一個焦點領域時<xref:System.Windows.Controls.Menu>， <xref:System.Windows.Controls.ContextMenu>，和<xref:System.Windows.Controls.ToolBar>類別。</xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window>  項目是焦點範圍有<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>設`true`。</xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       焦點、 鍵盤焦點，以及邏輯焦點的詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The follow example makes an element a focus scope by using SetIsFocusScope.  \n  \n [!code-cs[focussnippets#FocusSetIsFocusScope](~/add/codesnippet/csharp/FocusSnippets/Window1.xaml.cs#focussetisfocusscope)]\n [!code-vb[focussnippets#FocusSetIsFocusScope](~/add/codesnippet/visualbasic/focussnippets/window1.xaml.vb#focussetisfocusscope)]"
  syntax:
    content: public static void SetIsFocusScope (System.Windows.DependencyObject element, bool value);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "要成為焦點範圍的項目。"
    - id: value
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果`element`的焦點領域，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.FocusManager.SetIsFocusScope*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.FocusManager.AddGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.AddGotFocusHandler(DependencyObject,RoutedEventHandler)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.RoutedEventHandler
  parent: System.Windows
  isExternal: false
  name: RoutedEventHandler
  nameWithType: RoutedEventHandler
  fullName: System.Windows.RoutedEventHandler
- uid: System.Windows.Input.FocusManager.AddLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.AddLostFocusHandler(DependencyObject,RoutedEventHandler)
- uid: System.Windows.Input.FocusManager.FocusedElementProperty
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: FocusedElementProperty
  nameWithType: FocusManager.FocusedElementProperty
  fullName: System.Windows.Input.FocusManager.FocusedElementProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Input.FocusManager.GetFocusedElement(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetFocusedElement(DependencyObject)
  nameWithType: FocusManager.GetFocusedElement(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetFocusedElement(DependencyObject)
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.FocusManager.GetFocusScope(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetFocusScope(DependencyObject)
  nameWithType: FocusManager.GetFocusScope(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetFocusScope(DependencyObject)
- uid: System.Windows.Input.FocusManager.GetIsFocusScope(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetIsFocusScope(DependencyObject)
  nameWithType: FocusManager.GetIsFocusScope(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetIsFocusScope(DependencyObject)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Input.FocusManager.GotFocusEvent
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GotFocusEvent
  nameWithType: FocusManager.GotFocusEvent
  fullName: System.Windows.Input.FocusManager.GotFocusEvent
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Windows.Input.FocusManager.IsFocusScopeProperty
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: IsFocusScopeProperty
  nameWithType: FocusManager.IsFocusScopeProperty
  fullName: System.Windows.Input.FocusManager.IsFocusScopeProperty
- uid: System.Windows.Input.FocusManager.LostFocusEvent
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: LostFocusEvent
  nameWithType: FocusManager.LostFocusEvent
  fullName: System.Windows.Input.FocusManager.LostFocusEvent
- uid: System.Windows.Input.FocusManager.RemoveGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
- uid: System.Windows.Input.FocusManager.RemoveLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
- uid: System.Windows.Input.FocusManager.SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: SetFocusedElement(DependencyObject,IInputElement)
  nameWithType: FocusManager.SetFocusedElement(DependencyObject,IInputElement)
  fullName: System.Windows.Input.FocusManager.SetFocusedElement(DependencyObject,IInputElement)
- uid: System.Windows.Input.FocusManager.SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: SetIsFocusScope(DependencyObject,Boolean)
  nameWithType: FocusManager.SetIsFocusScope(DependencyObject,Boolean)
  fullName: System.Windows.Input.FocusManager.SetIsFocusScope(DependencyObject,Boolean)
- uid: System.Windows.Input.FocusManager.AddGotFocusHandler*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: AddGotFocusHandler
  nameWithType: FocusManager.AddGotFocusHandler
- uid: System.Windows.Input.FocusManager.AddLostFocusHandler*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: AddLostFocusHandler
  nameWithType: FocusManager.AddLostFocusHandler
- uid: System.Windows.Input.FocusManager.GetFocusedElement*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetFocusedElement
  nameWithType: FocusManager.GetFocusedElement
- uid: System.Windows.Input.FocusManager.GetFocusScope*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetFocusScope
  nameWithType: FocusManager.GetFocusScope
- uid: System.Windows.Input.FocusManager.GetIsFocusScope*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetIsFocusScope
  nameWithType: FocusManager.GetIsFocusScope
- uid: System.Windows.Input.FocusManager.RemoveGotFocusHandler*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: RemoveGotFocusHandler
  nameWithType: FocusManager.RemoveGotFocusHandler
- uid: System.Windows.Input.FocusManager.RemoveLostFocusHandler*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: RemoveLostFocusHandler
  nameWithType: FocusManager.RemoveLostFocusHandler
- uid: System.Windows.Input.FocusManager.SetFocusedElement*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: SetFocusedElement
  nameWithType: FocusManager.SetFocusedElement
- uid: System.Windows.Input.FocusManager.SetIsFocusScope*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: SetIsFocusScope
  nameWithType: FocusManager.SetIsFocusScope
