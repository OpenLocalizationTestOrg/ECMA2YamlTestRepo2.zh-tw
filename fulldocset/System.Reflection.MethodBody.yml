### YamlMime:ManagedReference
items:
- uid: System.Reflection.MethodBody
  id: MethodBody
  children:
  - System.Reflection.MethodBody.#ctor
  - System.Reflection.MethodBody.ExceptionHandlingClauses
  - System.Reflection.MethodBody.GetILAsByteArray
  - System.Reflection.MethodBody.InitLocals
  - System.Reflection.MethodBody.LocalSignatureMetadataToken
  - System.Reflection.MethodBody.LocalVariables
  - System.Reflection.MethodBody.MaxStackSize
  langs:
  - csharp
  name: MethodBody
  nameWithType: MethodBody
  fullName: System.Reflection.MethodBody
  type: Class
  summary: "提供存取權的中繼資料和 MSIL 主體的方法。"
  remarks: "MethodBody 類別會提供與存取權的本機變數和例外狀況處理子句，在方法主體中，資訊的 Microsoft intermediate language (MSIL) 組成的方法主體。       您可以使用語彙基元解析方法的模組類別，例如<xref:System.Reflection.Module.ResolveType%2A>， <xref:System.Reflection.Module.ResolveMethod%2A>，和<xref:System.Reflection.Module.ResolveType%2A>、 解析方法主體中的語彙基元<xref:System.Type>物件<xref:System.Reflection.MethodInfo>物件，和<xref:System.Reflection.FieldInfo>提供型別、 方法和欄位在方法主體的 MSIL 所存取的詳細的資訊的物件。</xref:System.Reflection.FieldInfo> </xref:System.Reflection.MethodInfo> </xref:System.Type> </xref:System.Reflection.Module.ResolveType%2A> </xref:System.Reflection.Module.ResolveMethod%2A> </xref:System.Reflection.Module.ResolveType%2A>      > [!NOTE] > 剖析方法主體需要瞭解的中繼資料和 MSIL 指令格式。 可以找到資訊，通用語言基礎結構 (CLI) 文件，尤其是 < 磁碟分割第二部分︰ 中繼資料定義和語意 > 以及 < 磁碟分割 iii 部分︰ CIL 指令集 」 中。 線上; 也提供文件請參閱[ECMA C# 和通用語言基礎結構標準](http://go.microsoft.com/fwlink/?LinkID=99212)msdn 和[標準 ecma-335-通用語言基礎結構 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 網站上。       若要取得指定方法的 MethodBody 物件，請先取得<xref:System.Reflection.MethodInfo>物件方法，然後呼叫<xref:System.Reflection.MethodInfo>物件的<xref:System.Reflection.MethodBase.GetMethodBody%2A>方法。</xref:System.Reflection.MethodBase.GetMethodBody%2A> </xref:System.Reflection.MethodInfo> </xref:System.Reflection.MethodInfo>"
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a MethodBody object for the test method.  \n  \n The example uses the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects and then displays their types and index order. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of exception-handling clauses.  \n  \n> [!NOTE]\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \n  \n [!code-cpp[MethodBody#1](~/add/codesnippet/cpp/t-system.reflection.meth_1.cpp)]\n [!code-vb[MethodBody#1](~/add/codesnippet/visualbasic/t-system.reflection.meth_1.vb)]\n [!code-cs[MethodBody#1](~/add/codesnippet/csharp/t-system.reflection.meth_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class MethodBody
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.#ctor
  id: '#ctor'
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: MethodBody()
  nameWithType: MethodBody.MethodBody()
  fullName: System.Reflection.MethodBody.MethodBody()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "初始化的新執行個體<xref href=&quot;System.Reflection.MethodBody&quot;></xref>類別。"
  remarks: "這個建構函式會由衍生類別叫用的建構期間<xref:System.Reflection.MethodBody>物件。</xref:System.Reflection.MethodBody>"
  syntax:
    content: protected MethodBody ();
    parameters: []
  overload: System.Reflection.MethodBody.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.ExceptionHandlingClauses
  id: ExceptionHandlingClauses
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: ExceptionHandlingClauses
  nameWithType: MethodBody.ExceptionHandlingClauses
  fullName: System.Reflection.MethodBody.ExceptionHandlingClauses
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "取得包含在方法主體中的所有例外狀況處理子句的清單。"
  remarks: "清單包含所有的 try 區塊的子句方法主體中。 每個<xref:System.Reflection.ExceptionHandlingClause>物件包含可識別 try 區塊與相關聯的資訊。</xref:System.Reflection.ExceptionHandlingClause>      > [!NOTE] > 例外狀況處理子句使用需要的中繼資料和 MSIL 指令格式徹底了解。 可以找到資訊，通用語言基礎結構 (CLI) 文件，尤其是 < 磁碟分割第二部分︰ 中繼資料定義和語意 > 以及 < 磁碟分割 iii 部分︰ CIL 指令集 」 中。 線上; 也提供文件請參閱[ECMA C# 和通用語言基礎結構標準](http://go.microsoft.com/fwlink/?LinkID=99212)msdn 和[標準 ecma-335-通用語言基礎結構 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 網站上。"
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays information about its exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The ExceptionHandlingClauses property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects.  \n  \n> [!NOTE]\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_2_1.cpp)]\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_1.vb)]\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_2_1.cs)]  \n[!code-cpp[MethodBody#4](~/add/codesnippet/cpp/p-system.reflection.meth_2_2.cpp)]\n[!code-vb[MethodBody#4](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_2.vb)]\n[!code-cs[MethodBody#4](~/add/codesnippet/csharp/p-system.reflection.meth_2_2.cs)]  \n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_2_3.cpp)]\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_3.vb)]\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_2_3.cs)]  \n[!code-cpp[MethodBody#7](~/add/codesnippet/cpp/p-system.reflection.meth_2_4.cpp)]\n[!code-vb[MethodBody#7](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_4.vb)]\n[!code-cs[MethodBody#7](~/add/codesnippet/csharp/p-system.reflection.meth_2_4.cs)]"
  syntax:
    content: public virtual System.Collections.Generic.IList<System.Reflection.ExceptionHandlingClause> ExceptionHandlingClauses { get; }
    return:
      type: System.Collections.Generic.IList{System.Reflection.ExceptionHandlingClause}
      description: "&lt;Xref:System.Collections.Generic.IList%601&gt;的<xref href=&quot;System.Reflection.ExceptionHandlingClause&quot;></xref>物件，代表在方法主體中的例外狀況處理子句。"
  overload: System.Reflection.MethodBody.ExceptionHandlingClauses*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.GetILAsByteArray
  id: GetILAsByteArray
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: GetILAsByteArray()
  nameWithType: MethodBody.GetILAsByteArray()
  fullName: System.Reflection.MethodBody.GetILAsByteArray()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "傳回的 MSIL 方法主體中，做為位元組陣列。"
  remarks: "您可以使用語彙基元解析方法的模組類別，例如<xref:System.Reflection.Module.ResolveType%2A>， <xref:System.Reflection.Module.ResolveMethod%2A>，和<xref:System.Reflection.Module.ResolveMember%2A>、 解析方法主體中的語彙基元<xref:System.Type>物件<xref:System.Reflection.MethodInfo>物件，和<xref:System.Reflection.FieldInfo>提供型別、 方法和欄位在方法主體的 MSIL 所存取的詳細的資訊的物件。</xref:System.Reflection.FieldInfo> </xref:System.Reflection.MethodInfo> </xref:System.Type> </xref:System.Reflection.Module.ResolveMember%2A> </xref:System.Reflection.Module.ResolveMethod%2A> </xref:System.Reflection.Module.ResolveType%2A>      > [!NOTE] > 剖析方法主體需要瞭解的中繼資料和 MSIL 指令格式。 可以找到資訊，通用語言基礎結構 (CLI) 文件，尤其是 < 磁碟分割第二部分︰ 中繼資料定義和語意 > 以及 < 磁碟分割 iii 部分︰ CIL 指令集 」 中。 線上; 也提供文件請參閱[ECMA C# 和通用語言基礎結構標準](http://go.microsoft.com/fwlink/?LinkID=99212)msdn 和[標準 ecma-335-通用語言基礎結構 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 網站上。"
  syntax:
    content: public virtual byte[] GetILAsByteArray ();
    parameters: []
    return:
      type: System.Byte[]
      description: "類型的陣列<xref:System.Byte>，其中包含的方法主體的 MSIL。</xref:System.Byte>"
  overload: System.Reflection.MethodBody.GetILAsByteArray*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.InitLocals
  id: InitLocals
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: InitLocals
  nameWithType: MethodBody.InitLocals
  fullName: System.Reflection.MethodBody.InitLocals
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "取得值，指出是否在方法主體中的區域變數會初始化為其類型的預設值。"
  remarks: "將 InitLocals 屬性參考到未明確初始化; 的變數也就是這類宣告語法中的變數`int x;`在 C# 或`Dim x As Integer`在 Visual Basic 中。       參考變數會初始化為`null`預設。 數值變數初始化為零。"
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.MaxStackSize%2A> and InitLocals properties are displayed.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_3_1.cpp)]\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_3_1.vb)]\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_3_1.cs)]  \n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_3_2.cpp)]\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_3_2.vb)]\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_3_2.cs)]"
  syntax:
    content: public virtual bool InitLocals { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果方法主體會包含程式碼以初始化區域變數<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>參考類型或實值類型; 零初始化值否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Reflection.MethodBody.InitLocals*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken
  id: LocalSignatureMetadataToken
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: LocalSignatureMetadataToken
  nameWithType: MethodBody.LocalSignatureMetadataToken
  fullName: System.Reflection.MethodBody.LocalSignatureMetadataToken
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "取得描述的本機變數中的中繼資料的方法簽章的中繼資料語彙基元。"
  remarks: "使用<xref:System.Reflection.MethodBody.LocalVariables%2A>屬性，以取得方法的本機變數的相關資訊。</xref:System.Reflection.MethodBody.LocalVariables%2A>      > [!NOTE] > 可以找到本機變數的簽章的相關資訊，通用語言基礎結構 (CLI) 文件，尤其是 < 磁碟分割 II︰ 中繼資料定義和語意 > 中。 線上; 也提供文件請參閱[ECMA C# 和通用語言基礎結構標準](http://go.microsoft.com/fwlink/?LinkID=99212)msdn 和[標準 ecma-335-通用語言基礎結構 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 網站上。"
  syntax:
    content: public virtual int LocalSignatureMetadataToken { get; }
    return:
      type: System.Int32
      description: "整數，表示中繼資料語彙基元。"
  overload: System.Reflection.MethodBody.LocalSignatureMetadataToken*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.LocalVariables
  id: LocalVariables
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: LocalVariables
  nameWithType: MethodBody.LocalVariables
  fullName: System.Reflection.MethodBody.LocalVariables
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "取得區域變數的方法主體中宣告的清單。"
  remarks: "您不需要中繼資料語彙基元所提供的本機變數簽章<xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A>屬性。</xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A>"
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The LocalVariables property is used to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_0_1.cpp)]\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_1.vb)]\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_0_1.cs)]  \n[!code-cpp[MethodBody#3](~/add/codesnippet/cpp/p-system.reflection.meth_0_2.cpp)]\n[!code-vb[MethodBody#3](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_2.vb)]\n[!code-cs[MethodBody#3](~/add/codesnippet/csharp/p-system.reflection.meth_0_2.cs)]  \n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_0_3.cpp)]\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_3.vb)]\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_0_3.cs)]  \n[!code-cpp[MethodBody#6](~/add/codesnippet/cpp/p-system.reflection.meth_0_4.cpp)]\n[!code-vb[MethodBody#6](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_4.vb)]\n[!code-cs[MethodBody#6](~/add/codesnippet/csharp/p-system.reflection.meth_0_4.cs)]"
  syntax:
    content: public virtual System.Collections.Generic.IList<System.Reflection.LocalVariableInfo> LocalVariables { get; }
    return:
      type: System.Collections.Generic.IList{System.Reflection.LocalVariableInfo}
      description: "&lt;Xref:System.Collections.Generic.IList%601&gt;的<xref:System.Reflection.LocalVariableInfo>方法主體中的物件，其描述的本機變數宣告。</xref:System.Reflection.LocalVariableInfo>"
  overload: System.Reflection.MethodBody.LocalVariables*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.MaxStackSize
  id: MaxStackSize
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: MaxStackSize
  nameWithType: MethodBody.MaxStackSize
  fullName: System.Reflection.MethodBody.MaxStackSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "執行方法時，取得運算元堆疊上的項目數上限。"
  remarks: '如需詳細資訊，請參閱通用語言基礎結構 (CLI) 文件，尤其是 < 磁碟分割第二部分︰ 中繼資料定義和語意 > 以及 < 磁碟分割 iii 部分︰ CIL 指令集 」。 線上; 也提供文件請參閱[ECMA C# 和通用語言基礎結構標準](http://go.microsoft.com/fwlink/?LinkID=99212)msdn 和[標準 ecma-335-通用語言基礎結構 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 網站上。'
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The MaxStackSize and <xref:System.Reflection.MethodBody.InitLocals%2A> properties are displayed.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_1_1.cpp)]\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_1_1.vb)]\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_1_1.cs)]  \n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_1_2.cpp)]\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_1_2.vb)]\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_1_2.cs)]"
  syntax:
    content: public virtual int MaxStackSize { get; }
    return:
      type: System.Int32
      description: "執行此方法時，運算元堆疊上的項目數目上限。"
  overload: System.Reflection.MethodBody.MaxStackSize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Reflection.MethodBody.#ctor
  parent: System.Reflection.MethodBody
  isExternal: false
  name: MethodBody()
  nameWithType: MethodBody.MethodBody()
  fullName: System.Reflection.MethodBody.MethodBody()
- uid: System.Reflection.MethodBody.ExceptionHandlingClauses
  parent: System.Reflection.MethodBody
  isExternal: false
  name: ExceptionHandlingClauses
  nameWithType: MethodBody.ExceptionHandlingClauses
  fullName: System.Reflection.MethodBody.ExceptionHandlingClauses
- uid: System.Collections.Generic.IList{System.Reflection.ExceptionHandlingClause}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<ExceptionHandlingClause>
  nameWithType: IList<ExceptionHandlingClause>
  fullName: System.Collections.Generic.IList<System.Reflection.ExceptionHandlingClause>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Reflection.ExceptionHandlingClause>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.ExceptionHandlingClause
    name: ExceptionHandlingClause
    nameWithType: ExceptionHandlingClause
    fullName: ExceptionHandlingClause
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.MethodBody.GetILAsByteArray
  parent: System.Reflection.MethodBody
  isExternal: false
  name: GetILAsByteArray()
  nameWithType: MethodBody.GetILAsByteArray()
  fullName: System.Reflection.MethodBody.GetILAsByteArray()
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.MethodBody.InitLocals
  parent: System.Reflection.MethodBody
  isExternal: false
  name: InitLocals
  nameWithType: MethodBody.InitLocals
  fullName: System.Reflection.MethodBody.InitLocals
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken
  parent: System.Reflection.MethodBody
  isExternal: false
  name: LocalSignatureMetadataToken
  nameWithType: MethodBody.LocalSignatureMetadataToken
  fullName: System.Reflection.MethodBody.LocalSignatureMetadataToken
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.MethodBody.LocalVariables
  parent: System.Reflection.MethodBody
  isExternal: false
  name: LocalVariables
  nameWithType: MethodBody.LocalVariables
  fullName: System.Reflection.MethodBody.LocalVariables
- uid: System.Collections.Generic.IList{System.Reflection.LocalVariableInfo}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<LocalVariableInfo>
  nameWithType: IList<LocalVariableInfo>
  fullName: System.Collections.Generic.IList<System.Reflection.LocalVariableInfo>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Reflection.LocalVariableInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.LocalVariableInfo
    name: LocalVariableInfo
    nameWithType: LocalVariableInfo
    fullName: LocalVariableInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.MethodBody.MaxStackSize
  parent: System.Reflection.MethodBody
  isExternal: false
  name: MaxStackSize
  nameWithType: MethodBody.MaxStackSize
  fullName: System.Reflection.MethodBody.MaxStackSize
- uid: System.Reflection.MethodBody.#ctor*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: MethodBody
  nameWithType: MethodBody.MethodBody
- uid: System.Reflection.MethodBody.ExceptionHandlingClauses*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: ExceptionHandlingClauses
  nameWithType: MethodBody.ExceptionHandlingClauses
- uid: System.Reflection.MethodBody.GetILAsByteArray*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: GetILAsByteArray
  nameWithType: MethodBody.GetILAsByteArray
- uid: System.Reflection.MethodBody.InitLocals*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: InitLocals
  nameWithType: MethodBody.InitLocals
- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: LocalSignatureMetadataToken
  nameWithType: MethodBody.LocalSignatureMetadataToken
- uid: System.Reflection.MethodBody.LocalVariables*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: LocalVariables
  nameWithType: MethodBody.LocalVariables
- uid: System.Reflection.MethodBody.MaxStackSize*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: MaxStackSize
  nameWithType: MethodBody.MaxStackSize
