### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider
  id: IInstanceContextProvider
  children:
  - System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  - System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  - System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)
  - System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)
  langs:
  - csharp
  name: IInstanceContextProvider
  nameWithType: IInstanceContextProvider
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider
  type: Interface
  summary: "實作以參與建立或選擇&lt;xref:System.ServiceModel.InstanceContext?displayProperty=fullName&gt;物件，特別是，讓共用工作階段。"
  remarks: "實作 IInstanceContextProvider 介面，以提供適當<xref:System.ServiceModel.InstanceContext?displayProperty=fullName>系統物件。</xref:System.ServiceModel.InstanceContext?displayProperty=fullName> 一般而言，被實作這個介面，以支援共用工作階段、 啟用服務執行個體共用、 控制的服務執行個體，或用戶端之間的群組內容的存留期。       例如，若要實作共用，插入以決定哪一個工作階段或從用戶端的呼叫者與其相關聯的自訂 IInstanceContextProvider<xref:System.ServiceModel.InstanceContext>物件。</xref:System.ServiceModel.InstanceContext> 如需示範共用執行個體內容的範例，請參閱[InstanceContextSharing](http://msdn.microsoft.com/en-us/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)。      > [!NOTE] > 時 IInstanceContextProvider 插入[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]，控制建立的標準屬性<xref:System.ServiceModel.InstanceContext>物件 (<xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName>屬性) 就不再接受檢查，會不有任何影響。</xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName> </xref:System.ServiceModel.InstanceContext>       您可以用來初始化的一般機制<xref:System.ServiceModel.InstanceContext>物件建立時 (例如，若要附加至每個自訂延伸模組<xref:System.ServiceModel.InstanceContext>) 為<xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=fullName>。</xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=fullName> </xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.InstanceContext>"
  syntax:
    content: public interface IInstanceContextProvider
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  id: GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  langs:
  - csharp
  name: GetExistingInstanceContext(Message,IContextChannel)
  nameWithType: IInstanceContextProvider.GetExistingInstanceContext(Message,IContextChannel)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(Message,IContextChannel)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "當收到新訊息時呼叫。"
  remarks: "收到訊息時，會呼叫 GetExistingInstanceContext 方法。 傳回<xref:System.ServiceModel.InstanceContext>物件您想要處理訊息，或`null`。</xref:System.ServiceModel.InstanceContext> 如果是`null`，[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]新建<xref:System.ServiceModel.InstanceContext>物件的訊息，然後呼叫<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A>方法。</xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> </xref:System.ServiceModel.InstanceContext>       如果您傳回`null`，新的<xref:System.ServiceModel.InstanceContext>物件會通過節流系統和<xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=fullName>.</xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=fullName>計數遞增</xref:System.ServiceModel.InstanceContext>"
  syntax:
    content: public System.ServiceModel.InstanceContext GetExistingInstanceContext (System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);
    parameters:
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "傳入的訊息。"
    - id: channel
      type: System.ServiceModel.IContextChannel
      description: "通道收到的訊息。"
    return:
      type: System.ServiceModel.InstanceContext
      description: "&lt;Xref:System.ServiceModel.InstanceContext?displayProperty=fullName&gt;物件，用來處理訊息，會傳回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>指示[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]來建立新的<xref:System.ServiceModel.InstanceContext>物件。</xref:System.ServiceModel.InstanceContext>"
  overload: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  id: InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  langs:
  - csharp
  name: InitializeInstanceContext(InstanceContext,Message,IContextChannel)
  nameWithType: IInstanceContextProvider.InitializeInstanceContext(InstanceContext,Message,IContextChannel)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(InstanceContext,Message,IContextChannel)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "時呼叫<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>從傳回<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext*>方法。</xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext*>"
  remarks: "InitializeInstanceContext 時，會呼叫<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A>傳回`null`和新<xref:System.ServiceModel.InstanceContext>建立物件。</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> 這個方法呼叫以通知您，新<xref:System.ServiceModel.InstanceContext>已建立。</xref:System.ServiceModel.InstanceContext>"
  syntax:
    content: public void InitializeInstanceContext (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "新&lt;xref:System.ServiceModel.InstanceContext?displayProperty=fullName&gt;物件。"
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "傳入的訊息。"
    - id: channel
      type: System.ServiceModel.IContextChannel
      description: "通道收到的訊息。"
  overload: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)
  id: IsIdle(System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  langs:
  - csharp
  name: IsIdle(InstanceContext)
  nameWithType: IInstanceContextProvider.IsIdle(InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(InstanceContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "時，呼叫所有<xref:System.ServiceModel.InstanceContext>以便實作器，以防止活動完成<xref:System.ServiceModel.InstanceContext>被回收。</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.InstanceContext>"
  remarks: "IsIdle 時，會呼叫[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]即將關閉並回收<xref:System.ServiceModel.InstanceContext>物件，讓您可以告知執行階段，是否要繼續進行此項</xref:System.ServiceModel.InstanceContext>設定的閒置       如需示範共用執行個體內容的範例，請參閱[InstanceContextSharing](http://msdn.microsoft.com/en-us/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)。"
  syntax:
    content: public bool IsIdle (System.ServiceModel.InstanceContext instanceContext);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "<xref:System.ServiceModel.InstanceContext>物件會被視為閒置。</xref:System.ServiceModel.InstanceContext>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]要關閉並回收<xref:System.ServiceModel.InstanceContext>物件，並調整值&lt;xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=fullName&gt;，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.ServiceModel.InstanceContext>"
  overload: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)
  id: NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  langs:
  - csharp
  name: NotifyIdle(InstanceContextIdleCallback,InstanceContext)
  nameWithType: IInstanceContextProvider.NotifyIdle(InstanceContextIdleCallback,InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(InstanceContextIdleCallback,InstanceContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "時呼叫<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle*>方法會傳回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>以便實作器能夠提供的回呼通知[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]時<xref:System.ServiceModel.InstanceContext>物件完成。</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle*>"
  remarks: "NotifyIdle 方法時，會呼叫<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>方法會傳回`false`可讓您提供[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]與<xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=fullName>物件，以便用來通知執行階段，<xref:System.ServiceModel.InstanceContext>已完成其工作。</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=fullName> </xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> 當<xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=fullName>物件通知執行階段，<xref:System.ServiceModel.InstanceContext>已完成其工作，[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]呼叫<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>再次。</xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> </xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=fullName> 這個循環會持續直到<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>傳回`true`和內容已關閉並回收。</xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>"
  syntax:
    content: public void NotifyIdle (System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, System.ServiceModel.InstanceContext instanceContext);
    parameters:
    - id: callback
      type: System.ServiceModel.Dispatcher.InstanceContextIdleCallback
      description: "<xref href=&quot;System.ServiceModel.Dispatcher.InstanceContextIdleCallback&quot;> </xref>通知的物件[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]時<xref:System.ServiceModel.InstanceContext>物件是關閉並回收。</xref:System.ServiceModel.InstanceContext>"
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "目前<xref:System.ServiceModel.InstanceContext>.</xref:System.ServiceModel.InstanceContext>"
  overload: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: GetExistingInstanceContext(Message,IContextChannel)
  nameWithType: IInstanceContextProvider.GetExistingInstanceContext(Message,IContextChannel)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(Message,IContextChannel)
- uid: System.ServiceModel.InstanceContext
  parent: System.ServiceModel
  isExternal: true
  name: InstanceContext
  nameWithType: InstanceContext
  fullName: System.ServiceModel.InstanceContext
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.IContextChannel
  parent: System.ServiceModel
  isExternal: true
  name: IContextChannel
  nameWithType: IContextChannel
  fullName: System.ServiceModel.IContextChannel
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: InitializeInstanceContext(InstanceContext,Message,IContextChannel)
  nameWithType: IInstanceContextProvider.InitializeInstanceContext(InstanceContext,Message,IContextChannel)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(InstanceContext,Message,IContextChannel)
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: IsIdle(InstanceContext)
  nameWithType: IInstanceContextProvider.IsIdle(InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(InstanceContext)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: NotifyIdle(InstanceContextIdleCallback,InstanceContext)
  nameWithType: IInstanceContextProvider.NotifyIdle(InstanceContextIdleCallback,InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(InstanceContextIdleCallback,InstanceContext)
- uid: System.ServiceModel.Dispatcher.InstanceContextIdleCallback
  parent: System.ServiceModel.Dispatcher
  isExternal: false
  name: InstanceContextIdleCallback
  nameWithType: InstanceContextIdleCallback
  fullName: System.ServiceModel.Dispatcher.InstanceContextIdleCallback
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext*
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: GetExistingInstanceContext
  nameWithType: IInstanceContextProvider.GetExistingInstanceContext
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext*
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: InitializeInstanceContext
  nameWithType: IInstanceContextProvider.InitializeInstanceContext
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle*
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: IsIdle
  nameWithType: IInstanceContextProvider.IsIdle
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle*
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: NotifyIdle
  nameWithType: IInstanceContextProvider.NotifyIdle
