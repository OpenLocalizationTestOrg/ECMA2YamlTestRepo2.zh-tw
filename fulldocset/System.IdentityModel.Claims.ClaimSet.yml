### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Claims.ClaimSet
  id: ClaimSet
  children:
  - System.IdentityModel.Claims.ClaimSet.#ctor
  - System.IdentityModel.Claims.ClaimSet.ContainsClaim(System.IdentityModel.Claims.Claim)
  - System.IdentityModel.Claims.ClaimSet.ContainsClaim(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})
  - System.IdentityModel.Claims.ClaimSet.Count
  - System.IdentityModel.Claims.ClaimSet.FindClaims(System.String,System.String)
  - System.IdentityModel.Claims.ClaimSet.GetEnumerator
  - System.IdentityModel.Claims.ClaimSet.Issuer
  - System.IdentityModel.Claims.ClaimSet.Item(System.Int32)
  - System.IdentityModel.Claims.ClaimSet.System
  - System.IdentityModel.Claims.ClaimSet.System#Collections#IEnumerable#GetEnumerator
  - System.IdentityModel.Claims.ClaimSet.Windows
  langs:
  - csharp
  name: ClaimSet
  nameWithType: ClaimSet
  fullName: System.IdentityModel.Claims.ClaimSet
  type: Class
  summary: "表示與實體相關聯之宣告的集合。"
  remarks: "ClaimSet 類別建立之後，就無法變更。       使用宣告架構授權時，檢查的特定類型的宣告 ClaimSet 內容是常見的工作。 若要檢查是否有特定的宣告 ClaimSet，使用<xref:System.IdentityModel.Claims.ClaimSet.FindClaims%2A>方法。</xref:System.IdentityModel.Claims.ClaimSet.FindClaims%2A> 此方法提供更佳的效能比逐一查看直接，而且宣告集合。"
  example:
  - >-
    [!code-cs[c_ClaimSet#1](~/add/codesnippet/csharp/t-system.identitymodel.c_1_1.cs)]
     [!code-vb[c_ClaimSet#1](~/add/codesnippet/visualbasic/t-system.identitymodel.c_1_1.vb)]
  syntax:
    content: >-
      [System.Runtime.Serialization.DataContract(Namespace="http://schemas.xmlsoap.org/ws/2005/05/identity")]

      public abstract class ClaimSet : System.Collections.Generic.IEnumerable<System.IdentityModel.Claims.Claim>
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable<System.IdentityModel.Claims.Claim>
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Claims.ClaimSet.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Claims.ClaimSet
  langs:
  - csharp
  name: ClaimSet()
  nameWithType: ClaimSet.ClaimSet()
  fullName: System.IdentityModel.Claims.ClaimSet.ClaimSet()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Claims
  summary: "初始化的新執行個體<xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref>類別。"
  remarks: "保留供將來使用。"
  syntax:
    content: protected ClaimSet ();
    parameters: []
  overload: System.IdentityModel.Claims.ClaimSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Claims.ClaimSet.ContainsClaim(System.IdentityModel.Claims.Claim)
  id: ContainsClaim(System.IdentityModel.Claims.Claim)
  parent: System.IdentityModel.Claims.ClaimSet
  langs:
  - csharp
  name: ContainsClaim(Claim)
  nameWithType: ClaimSet.ContainsClaim(Claim)
  fullName: System.IdentityModel.Claims.ClaimSet.ContainsClaim(Claim)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Claims
  summary: "決定是否<xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref>包含指定<xref href=&quot;System.IdentityModel.Claims.Claim&quot;> </xref>。"
  remarks: "若要尋找指定的宣告，請呼叫<xref:System.IdentityModel.Claims.ClaimSet.FindClaims%28System.String%2CSystem.String%29>方法。</xref:System.IdentityModel.Claims.ClaimSet.FindClaims%28System.String%2CSystem.String%29>"
  syntax:
    content: public virtual bool ContainsClaim (System.IdentityModel.Claims.Claim claim);
    parameters:
    - id: claim
      type: System.IdentityModel.Claims.Claim
      description: "<xref href=&quot;System.IdentityModel.Claims.Claim&quot;> </xref>要搜尋。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的宣告包含在<xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;> </xref>，否則為<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IdentityModel.Claims.ClaimSet.ContainsClaim*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Claims.ClaimSet.ContainsClaim(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})
  id: ContainsClaim(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})
  parent: System.IdentityModel.Claims.ClaimSet
  langs:
  - csharp
  name: ContainsClaim(Claim,IEqualityComparer<Claim>)
  nameWithType: ClaimSet.ContainsClaim(Claim,IEqualityComparer<Claim>)
  fullName: System.IdentityModel.Claims.ClaimSet.ContainsClaim(Claim,IEqualityComparer<Claim>)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Claims
  summary: "決定是否<xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref>包含指定<xref href=&quot;System.IdentityModel.Claims.Claim&quot;> </xref>，使用指定的&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;物件。"
  remarks: "若要尋找指定的宣告，請呼叫<xref:System.IdentityModel.Claims.ClaimSet.FindClaims%28System.String%2CSystem.String%29>方法。</xref:System.IdentityModel.Claims.ClaimSet.FindClaims%28System.String%2CSystem.String%29>"
  syntax:
    content: public virtual bool ContainsClaim (System.IdentityModel.Claims.Claim claim, System.Collections.Generic.IEqualityComparer<System.IdentityModel.Claims.Claim> comparer);
    parameters:
    - id: claim
      type: System.IdentityModel.Claims.Claim
      description: "<xref href=&quot;System.IdentityModel.Claims.Claim&quot;> </xref>要搜尋。"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim}
      description: "&lt;Xref:System.Collections.Generic.IEqualityComparer%601&gt;用來進行比較的物件。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的宣告包含在<xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;> </xref>，否則為<xref uid=&quot;langword_csharp_false.&quot; name=&quot;false.&quot; href=&quot;&quot;></xref>"
  overload: System.IdentityModel.Claims.ClaimSet.ContainsClaim*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Claims.ClaimSet.Count
  id: Count
  parent: System.IdentityModel.Claims.ClaimSet
  langs:
  - csharp
  name: Count
  nameWithType: ClaimSet.Count
  fullName: System.IdentityModel.Claims.ClaimSet.Count
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Claims
  summary: "在衍生類別中覆寫，請在此宣告集中取得宣告的數。"
  remarks: "若要取得個別的宣告，請使用<xref:System.IdentityModel.Claims.ClaimSet.Item%2A>屬性。</xref:System.IdentityModel.Claims.ClaimSet.Item%2A>"
  syntax:
    content: public abstract int Count { get; }
    return:
      type: System.Int32
      description: "在這個宣告的數量<xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;> </xref>。"
  overload: System.IdentityModel.Claims.ClaimSet.Count*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Claims.ClaimSet.FindClaims(System.String,System.String)
  id: FindClaims(System.String,System.String)
  parent: System.IdentityModel.Claims.ClaimSet
  langs:
  - csharp
  name: FindClaims(String,String)
  nameWithType: ClaimSet.FindClaims(String,String)
  fullName: System.IdentityModel.Claims.ClaimSet.FindClaims(String,String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Claims
  summary: "當在衍生類別中覆寫時，會搜尋<xref href=&quot;System.IdentityModel.Claims.Claim&quot;></xref>符合指定的宣告類型和權限的物件<xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;> </xref>。"
  remarks: "若要判斷是否有此<xref:System.IdentityModel.Claims.ClaimSet>包含宣告，而不需傳回的宣告，請呼叫<xref:System.IdentityModel.Claims.ClaimSet.ContainsClaim%2A>方法。</xref:System.IdentityModel.Claims.ClaimSet.ContainsClaim%2A> </xref:System.IdentityModel.Claims.ClaimSet>"
  example:
  - >-
    [!code-cs[c_ClaimSet#2](~/add/codesnippet/csharp/m-system.identitymodel.c_1.cs)]
     [!code-vb[c_ClaimSet#2](~/add/codesnippet/visualbasic/m-system.identitymodel.c_1.vb)]
  syntax:
    content: public abstract System.Collections.Generic.IEnumerable<System.IdentityModel.Claims.Claim> FindClaims (string claimType, string right);
    parameters:
    - id: claimType
      type: System.String
      description: "宣告型別統一資源識別元 (URI)。 多個宣告類型可用的靜態屬性<xref href=&quot;System.IdentityModel.Claims.ClaimTypes&quot;></xref>類別。"
    - id: right
      type: System.String
      description: "與新宣告相關聯的權限的 URI。 數個權限可為靜態屬性的<xref href=&quot;System.IdentityModel.Claims.Rights&quot;></xref>類別。"
    return:
      type: System.Collections.Generic.IEnumerable{System.IdentityModel.Claims.Claim}
      description: "A &lt;xref:System.Collections.Generic.IEnumerable%601&gt;型別的<xref href=&quot;System.IdentityModel.Claims.Claim&quot;> </xref> ，可讓您列舉符合指定的準則的宣告。"
  overload: System.IdentityModel.Claims.ClaimSet.FindClaims*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Claims.ClaimSet.GetEnumerator
  id: GetEnumerator
  parent: System.IdentityModel.Claims.ClaimSet
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ClaimSet.GetEnumerator()
  fullName: System.IdentityModel.Claims.ClaimSet.GetEnumerator()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Claims
  summary: "當在衍生類別中覆寫時，取得&lt;xref:System.Collections.Generic.IEnumerator%601&gt;可以用來列舉<xref href=&quot;System.IdentityModel.Claims.Claim&quot;></xref>物件存放至<xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;> </xref>。"
  remarks: "`foreach` C# 語言的陳述式 (`for each`在 Visual Basic 中) 會隱藏列舉值的複雜度。 因此，使用`foreach`建議，而不是直接管理 列舉值。       列舉程式可以用來讀取集合中的資料，但無法用於修改基礎集合。"
  syntax:
    content: public abstract System.Collections.Generic.IEnumerator<System.IdentityModel.Claims.Claim> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator{System.IdentityModel.Claims.Claim}
      description: "A &lt;xref:System.Collections.Generic.IEnumerator%601&gt;可以用來列舉<xref href=&quot;System.IdentityModel.Claims.Claim&quot;></xref>物件存放至<xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;> </xref>。"
  overload: System.IdentityModel.Claims.ClaimSet.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Claims.ClaimSet.Issuer
  id: Issuer
  parent: System.IdentityModel.Claims.ClaimSet
  langs:
  - csharp
  name: Issuer
  nameWithType: ClaimSet.Issuer
  fullName: System.IdentityModel.Claims.ClaimSet.Issuer
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Claims
  summary: "當在衍生類別中覆寫時，取得發行此實體<xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;> </xref>。"
  remarks: "也就是宣告的簽發者傳回的<xref:System.IdentityModel.Claims.ClaimSet.System%2A>屬性是<xref:System.IdentityModel.Claims.DefaultClaimSet>.</xref:System.IdentityModel.Claims.DefaultClaimSet> </xref:System.IdentityModel.Claims.ClaimSet.System%2A>"
  syntax:
    content: public abstract System.IdentityModel.Claims.ClaimSet Issuer { get; }
    return:
      type: System.IdentityModel.Claims.ClaimSet
      description: "<xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;> </xref>物件發行此<xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref>物件。"
  overload: System.IdentityModel.Claims.ClaimSet.Issuer*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Claims.ClaimSet.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.IdentityModel.Claims.ClaimSet
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: ClaimSet.Item(Int32)
  fullName: System.IdentityModel.Claims.ClaimSet.Item(Int32)
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Claims
  summary: "當在衍生類別中覆寫時，取得<xref href=&quot;System.IdentityModel.Claims.Claim&quot;></xref>指定索引。"
  syntax:
    content: public abstract System.IdentityModel.Claims.Claim this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "要擷取宣告索引。"
    return:
      type: System.IdentityModel.Claims.Claim
      description: "<xref href=&quot;System.IdentityModel.Claims.Claim&quot;> </xref>指定索引處。"
  overload: System.IdentityModel.Claims.ClaimSet.Item*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Claims.ClaimSet.System
  id: System
  parent: System.IdentityModel.Claims.ClaimSet
  langs:
  - csharp
  name: System
  nameWithType: ClaimSet.System
  fullName: System.IdentityModel.Claims.ClaimSet.System
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Claims
  summary: "取得<xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref>物件，表示應用程式信任的發行者。"
  remarks: "這種類型的<xref:System.IdentityModel.Claims.ClaimSet>物件通常是做為值<xref:System.IdentityModel.Claims.ClaimSet.Issuer%2A>屬性<xref:System.IdentityModel.Claims.ClaimSet>目前應用程式所發行。</xref:System.IdentityModel.Claims.ClaimSet> </xref:System.IdentityModel.Claims.ClaimSet.Issuer%2A> </xref:System.IdentityModel.Claims.ClaimSet>       例如，在應用程式驗證使用者名稱和密碼之後，它會建立<xref:System.IdentityModel.Claims.ClaimSet>表示以使用者<xref:System.IdentityModel.Claims.ClaimSet.Issuer%2A>屬性設定為系統。</xref:System.IdentityModel.Claims.ClaimSet.Issuer%2A> </xref:System.IdentityModel.Claims.ClaimSet>"
  syntax:
    content: public static System.IdentityModel.Claims.ClaimSet System { get; }
    return:
      type: System.IdentityModel.Claims.ClaimSet
      description: "系統<xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;></xref>物件。"
  overload: System.IdentityModel.Claims.ClaimSet.System*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Claims.ClaimSet.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.IdentityModel.Claims.ClaimSet
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ClaimSet.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.IdentityModel.Claims.ClaimSet.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Claims
  summary: "取得&lt;xref:System.Collections.Generic.IEnumerator%601&gt;可以用來列舉<xref href=&quot;System.IdentityModel.Claims.Claim&quot;></xref>物件存放至<xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;> </xref>。"
  remarks: "`foreach` C# 語言的陳述式 (`for each`在 Visual Basic 中) 會隱藏列舉值的複雜度。 因此，使用`foreach`建議，而不是直接管理 列舉值。       列舉程式可以用來讀取集合中的資料，但無法用於修改基礎集合。"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "A &lt;xref:System.Collections.Generic.IEnumerator%601&gt;可以用來列舉<xref href=&quot;System.IdentityModel.Claims.Claim&quot;></xref>物件存放至<xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;> </xref>。"
  overload: System.IdentityModel.Claims.ClaimSet.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Claims.ClaimSet.Windows
  id: Windows
  parent: System.IdentityModel.Claims.ClaimSet
  langs:
  - csharp
  name: Windows
  nameWithType: ClaimSet.Windows
  fullName: System.IdentityModel.Claims.ClaimSet.Windows
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Claims
  summary: "取得一組宣告，其中包含 Windows 安全性識別碼。"
  remarks: "這種類型的<xref:System.IdentityModel.Claims.ClaimSet>物件通常是做為值<xref:System.IdentityModel.Claims.ClaimSet.Issuer%2A>屬性<xref:System.IdentityModel.Claims.ClaimSet>所發行的 windows。</xref:System.IdentityModel.Claims.ClaimSet> </xref:System.IdentityModel.Claims.ClaimSet.Issuer%2A> </xref:System.IdentityModel.Claims.ClaimSet> 例如，在應用程式驗證使用者名稱和密碼使用 Windows 驗證之後，它會建立<xref:System.IdentityModel.Claims.ClaimSet>與<xref:System.IdentityModel.Claims.ClaimSet.Issuer%2A>屬性設定為 Windows。</xref:System.IdentityModel.Claims.ClaimSet.Issuer%2A> </xref:System.IdentityModel.Claims.ClaimSet>"
  syntax:
    content: public static System.IdentityModel.Claims.ClaimSet Windows { get; }
    return:
      type: System.IdentityModel.Claims.ClaimSet
      description: "A <xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;> </xref> ，其中包含至少一個宣告的型別<xref:System.IdentityModel.Claims.ClaimTypes.Sid*>.</xref:System.IdentityModel.Claims.ClaimTypes.Sid*>"
  overload: System.IdentityModel.Claims.ClaimSet.Windows*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IdentityModel.Claims.ClaimSet.#ctor
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: ClaimSet()
  nameWithType: ClaimSet.ClaimSet()
  fullName: System.IdentityModel.Claims.ClaimSet.ClaimSet()
- uid: System.IdentityModel.Claims.ClaimSet.ContainsClaim(System.IdentityModel.Claims.Claim)
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: ContainsClaim(Claim)
  nameWithType: ClaimSet.ContainsClaim(Claim)
  fullName: System.IdentityModel.Claims.ClaimSet.ContainsClaim(Claim)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Claims.Claim
  parent: System.IdentityModel.Claims
  isExternal: false
  name: Claim
  nameWithType: Claim
  fullName: System.IdentityModel.Claims.Claim
- uid: System.IdentityModel.Claims.ClaimSet.ContainsClaim(System.IdentityModel.Claims.Claim,System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim})
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: ContainsClaim(Claim,IEqualityComparer<Claim>)
  nameWithType: ClaimSet.ContainsClaim(Claim,IEqualityComparer<Claim>)
  fullName: System.IdentityModel.Claims.ClaimSet.ContainsClaim(Claim,IEqualityComparer<Claim>)
- uid: System.Collections.Generic.IEqualityComparer{System.IdentityModel.Claims.Claim}
  parent: System.Collections.Generic
  isExternal: true
  name: IEqualityComparer<Claim>
  nameWithType: IEqualityComparer<Claim>
  fullName: System.Collections.Generic.IEqualityComparer<System.IdentityModel.Claims.Claim>
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: IEqualityComparer<System.IdentityModel.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Claims.ClaimSet.Count
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: Count
  nameWithType: ClaimSet.Count
  fullName: System.IdentityModel.Claims.ClaimSet.Count
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IdentityModel.Claims.ClaimSet.FindClaims(System.String,System.String)
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: FindClaims(String,String)
  nameWithType: ClaimSet.FindClaims(String,String)
  fullName: System.IdentityModel.Claims.ClaimSet.FindClaims(String,String)
- uid: System.Collections.Generic.IEnumerable{System.IdentityModel.Claims.Claim}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.IdentityModel.Claims.Claim>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.IdentityModel.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Claims.ClaimSet.GetEnumerator
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: GetEnumerator()
  nameWithType: ClaimSet.GetEnumerator()
  fullName: System.IdentityModel.Claims.ClaimSet.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator{System.IdentityModel.Claims.Claim}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<Claim>
  nameWithType: IEnumerator<Claim>
  fullName: System.Collections.Generic.IEnumerator<System.IdentityModel.Claims.Claim>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator<System.IdentityModel.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Claims.ClaimSet.Issuer
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: Issuer
  nameWithType: ClaimSet.Issuer
  fullName: System.IdentityModel.Claims.ClaimSet.Issuer
- uid: System.IdentityModel.Claims.ClaimSet
  parent: System.IdentityModel.Claims
  isExternal: false
  name: ClaimSet
  nameWithType: ClaimSet
  fullName: System.IdentityModel.Claims.ClaimSet
- uid: System.IdentityModel.Claims.ClaimSet.Item(System.Int32)
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: Item(Int32)
  nameWithType: ClaimSet.Item(Int32)
  fullName: System.IdentityModel.Claims.ClaimSet.Item(Int32)
- uid: System.IdentityModel.Claims.ClaimSet.System
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: System
  nameWithType: ClaimSet.System
  fullName: System.IdentityModel.Claims.ClaimSet.System
- uid: System.IdentityModel.Claims.ClaimSet.System#Collections#IEnumerable#GetEnumerator
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ClaimSet.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.IdentityModel.Claims.ClaimSet.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.IdentityModel.Claims.ClaimSet.Windows
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: Windows
  nameWithType: ClaimSet.Windows
  fullName: System.IdentityModel.Claims.ClaimSet.Windows
- uid: System.IdentityModel.Claims.ClaimSet.#ctor*
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: ClaimSet
  nameWithType: ClaimSet.ClaimSet
- uid: System.IdentityModel.Claims.ClaimSet.ContainsClaim*
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: ContainsClaim
  nameWithType: ClaimSet.ContainsClaim
- uid: System.IdentityModel.Claims.ClaimSet.Count*
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: Count
  nameWithType: ClaimSet.Count
- uid: System.IdentityModel.Claims.ClaimSet.FindClaims*
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: FindClaims
  nameWithType: ClaimSet.FindClaims
- uid: System.IdentityModel.Claims.ClaimSet.GetEnumerator*
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: GetEnumerator
  nameWithType: ClaimSet.GetEnumerator
- uid: System.IdentityModel.Claims.ClaimSet.Issuer*
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: Issuer
  nameWithType: ClaimSet.Issuer
- uid: System.IdentityModel.Claims.ClaimSet.Item*
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: Item
  nameWithType: ClaimSet.Item
- uid: System.IdentityModel.Claims.ClaimSet.System*
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: System
  nameWithType: ClaimSet.System
- uid: System.IdentityModel.Claims.ClaimSet.System#Collections#IEnumerable#GetEnumerator*
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ClaimSet.System.Collections.IEnumerable.GetEnumerator
- uid: System.IdentityModel.Claims.ClaimSet.Windows*
  parent: System.IdentityModel.Claims.ClaimSet
  isExternal: false
  name: Windows
  nameWithType: ClaimSet.Windows
