### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.ReadOnlyAttribute
  id: ReadOnlyAttribute
  children:
  - System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)
  - System.ComponentModel.ReadOnlyAttribute.Default
  - System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)
  - System.ComponentModel.ReadOnlyAttribute.GetHashCode
  - System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute
  - System.ComponentModel.ReadOnlyAttribute.IsReadOnly
  - System.ComponentModel.ReadOnlyAttribute.No
  - System.ComponentModel.ReadOnlyAttribute.Yes
  langs:
  - csharp
  name: ReadOnlyAttribute
  nameWithType: ReadOnlyAttribute
  fullName: System.ComponentModel.ReadOnlyAttribute
  type: Class
  summary: "指定此屬性所繫結的屬性是唯讀還是讀取/寫入。 這個類別無法被繼承。"
  remarks: "與 ReadOnlyAttribute 標示的成員設定為`true`或沒有`Set`方法不能變更。 沒有這個屬性，或標示 ReadOnlyAttribute 成員設定為`false`是讀取/寫入，而且可以變更。 預設值為<xref:System.ComponentModel.ReadOnlyAttribute.No>.</xref:System.ComponentModel.ReadOnlyAttribute.No>      > [!IMPORTANT] ><xref:System.ComponentModel.PropertyDescriptor>類別會強制執行在設計環境中，並在執行階段 ReadOnlyAttribute。</xref:System.ComponentModel.PropertyDescriptor> 當您將標示 ReadOnlyAttribute 的屬性設定為`true`，這個屬性的值設定為常數成員<xref:System.ComponentModel.ReadOnlyAttribute.Yes>.</xref:System.ComponentModel.ReadOnlyAttribute.Yes> 針對屬性設定為 ReadOnlyAttribute 使用標示`false`，值為<xref:System.ComponentModel.ReadOnlyAttribute.No>。</xref:System.ComponentModel.ReadOnlyAttribute.No> 因此，當您想要檢查您的程式碼中的此屬性的值，您必須指定屬性或<xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName><xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.</xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName> </xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName>       如需詳細資訊，請參閱[屬性](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example marks a property as read-only.  \n  \n [!code-cs[Classic ReadOnlyAttribute Example#1](~/add/codesnippet/csharp/t-system.componentmodel._82_1.cs)]\n [!code-vb[Classic ReadOnlyAttribute Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._82_1.vb)]\n [!code-cpp[Classic ReadOnlyAttribute Example#1](~/add/codesnippet/cpp/t-system.componentmodel._82_1.cpp)]  \n  \n The next code example shows how to check the value of the ReadOnlyAttribute for `MyProperty`. First, the code gets a <xref:System.ComponentModel.PropertyDescriptorCollection> with all the properties for the object. Next, it indexes into the <xref:System.ComponentModel.PropertyDescriptorCollection> to get `MyProperty`. Then it returns the attributes for this property and saves them in the attributes variable.  \n  \n The example presents two different ways of checking the value of the ReadOnlyAttribute. In the second code fragment, the example calls the <xref:System.ComponentModel.ReadOnlyAttribute.Equals%2A> method. In the last code fragment, the example uses the <xref:System.ComponentModel.ReadOnlyAttribute.IsReadOnly%2A> property to check the value.  \n  \n [!code-cs[Classic ReadOnlyAttribute Example#2](~/add/codesnippet/csharp/t-system.componentmodel._82_2.cs)]\n [!code-vb[Classic ReadOnlyAttribute Example#2](~/add/codesnippet/visualbasic/t-system.componentmodel._82_2.vb)]\n [!code-cpp[Classic ReadOnlyAttribute Example#2](~/add/codesnippet/cpp/t-system.componentmodel._82_2.cpp)]  \n  \n If you marked a class with the ReadOnlyAttribute, use the following code example to check the value.  \n  \n [!code-cs[Classic ReadOnlyAttribute Example#3](~/add/codesnippet/csharp/t-system.componentmodel._82_3.cs)]\n [!code-vb[Classic ReadOnlyAttribute Example#3](~/add/codesnippet/visualbasic/t-system.componentmodel._82_3.vb)]\n [!code-cpp[Classic ReadOnlyAttribute Example#3](~/add/codesnippet/cpp/t-system.componentmodel._82_3.cpp)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.All)]

      public sealed class ReadOnlyAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: ReadOnlyAttribute(Boolean)
  nameWithType: ReadOnlyAttribute.ReadOnlyAttribute(Boolean)
  fullName: System.ComponentModel.ReadOnlyAttribute.ReadOnlyAttribute(Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "初始化的新執行個體<xref href=&quot;System.ComponentModel.ReadOnlyAttribute&quot;></xref>類別。"
  remarks: "使用標示的成員<xref:System.ComponentModel.ReadOnlyAttribute>設`true`或沒有`Set`方法不能變更。</xref:System.ComponentModel.ReadOnlyAttribute> 沒有這個屬性，或標示的成員<xref:System.ComponentModel.ReadOnlyAttribute>設`false`是讀取/寫入，而且可以變更。</xref:System.ComponentModel.ReadOnlyAttribute> 預設值為<xref:System.ComponentModel.ReadOnlyAttribute.No>.</xref:System.ComponentModel.ReadOnlyAttribute.No>      > [!NOTE] > 當您將屬性標記與<xref:System.ComponentModel.ReadOnlyAttribute>設`true`，這個屬性的值設定為常數成員<xref:System.ComponentModel.ReadOnlyAttribute.Yes>.</xref:System.ComponentModel.ReadOnlyAttribute.Yes> </xref:System.ComponentModel.ReadOnlyAttribute> 為屬性標記為<xref:System.ComponentModel.ReadOnlyAttribute>設`false`，值為<xref:System.ComponentModel.ReadOnlyAttribute.No>。</xref:System.ComponentModel.ReadOnlyAttribute.No> </xref:System.ComponentModel.ReadOnlyAttribute> 因此，當您想要檢查您的程式碼中的此屬性的值，您必須指定屬性或<xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName><xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.</xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName> </xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName>"
  example:
  - "The following code example marks a property as read-only. This code creates a new <xref:System.ComponentModel.ReadOnlyAttribute>, sets its value to <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName>, and binds it to the property.  \n  \n [!code-cpp[Classic ReadOnlyAttribute.ReadOnlyAttribute Example#1](~/add/codesnippet/cpp/m-system.componentmodel._35_1.cpp)]\n [!code-vb[Classic ReadOnlyAttribute.ReadOnlyAttribute Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._35_1.vb)]\n [!code-cs[Classic ReadOnlyAttribute.ReadOnlyAttribute Example#1](~/add/codesnippet/csharp/m-system.componentmodel._35_1.cs)]"
  syntax:
    content: public ReadOnlyAttribute (bool isReadOnly);
    parameters:
    - id: isReadOnly
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>顯示這個屬性所繫結的屬性是唯讀的。<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>屬性是讀取/寫入。"
  overload: System.ComponentModel.ReadOnlyAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.Default
  id: Default
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: Default
  nameWithType: ReadOnlyAttribute.Default
  fullName: System.ComponentModel.ReadOnlyAttribute.Default
  type: Field
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定的預設值為<xref href=&quot;System.ComponentModel.ReadOnlyAttribute&quot;> </xref>，也就是<xref href=&quot;System.ComponentModel.ReadOnlyAttribute.No&quot;> </xref> （也就是這個屬性所繫結的屬性是讀取/寫入）。 這<xref uid=&quot;langword_csharp_static&quot; name=&quot;static&quot; href=&quot;&quot;></xref>欄位為唯讀。"
  remarks: "當您要標示屬性與這個值時，這個屬性設為常數成員<xref:System.ComponentModel.ReadOnlyAttribute>.</xref:System.ComponentModel.ReadOnlyAttribute> 因此，當您想要檢查屬性是否設定為這個程式碼中的值，您必須指定屬性為<xref:System.ComponentModel.ReadOnlyAttribute?displayProperty=fullName>.</xref:System.ComponentModel.ReadOnlyAttribute?displayProperty=fullName>"
  syntax:
    content: public static readonly System.ComponentModel.ReadOnlyAttribute Default;
    return:
      type: System.ComponentModel.ReadOnlyAttribute
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: ReadOnlyAttribute.Equals(Object)
  fullName: System.ComponentModel.ReadOnlyAttribute.Equals(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指出這個執行個體和指定的物件是否相等。"
  syntax:
    content: public override bool Equals (object value);
    parameters:
    - id: value
      type: System.Object
      description: "要比較的另一個物件。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> value </code>等於這個執行個體; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.ReadOnlyAttribute.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.GetHashCode
  id: GetHashCode
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: ReadOnlyAttribute.GetHashCode()
  fullName: System.ComponentModel.ReadOnlyAttribute.GetHashCode()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "傳回這個執行個體的雜湊碼。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "目前的雜湊碼<xref href=&quot;System.ComponentModel.ReadOnlyAttribute&quot;> </xref>。"
  overload: System.ComponentModel.ReadOnlyAttribute.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute
  id: IsDefaultAttribute
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: IsDefaultAttribute()
  nameWithType: ReadOnlyAttribute.IsDefaultAttribute()
  fullName: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "判斷此屬性是否為預設值。"
  syntax:
    content: public override bool IsDefaultAttribute ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果屬性為預設值，這個屬性類別。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.IsReadOnly
  id: IsReadOnly
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: ReadOnlyAttribute.IsReadOnly
  fullName: System.ComponentModel.ReadOnlyAttribute.IsReadOnly
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "取得值，表示這個屬性所繫結的屬性是否為唯讀。"
  remarks: ''
  example:
  - "The following code example checks to see whether `MyProperty` is read-only. First, the code gets the attributes for `MyProperty` by doing the following:  \n  \n-   Retrieving a <xref:System.ComponentModel.PropertyDescriptorCollection> with all the properties for the object.  \n  \n-   Indexing into the <xref:System.ComponentModel.PropertyDescriptorCollection> to get `MyProperty`.  \n  \n-   Saving the attributes for this property in the attributes variable.  \n  \n Then the code sets `myAttribute` to the value of the <xref:System.ComponentModel.ReadOnlyAttribute> in the <xref:System.ComponentModel.AttributeCollection> and checks whether the property is read-only.  \n  \n [!code-cs[Classic ReadOnlyAttribute.IsReadOnly Example#1](~/add/codesnippet/csharp/p-system.componentmodel._25_1.cs)]\n [!code-cpp[Classic ReadOnlyAttribute.IsReadOnly Example#1](~/add/codesnippet/cpp/p-system.componentmodel._25_1.cpp)]\n [!code-vb[Classic ReadOnlyAttribute.IsReadOnly Example#1](~/add/codesnippet/visualbasic/p-system.componentmodel._25_1.vb)]"
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個屬性所繫結的屬性是唯讀的;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果屬性是讀取/寫入。"
  overload: System.ComponentModel.ReadOnlyAttribute.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.No
  id: No
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: No
  nameWithType: ReadOnlyAttribute.No
  fullName: System.ComponentModel.ReadOnlyAttribute.No
  type: Field
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定此屬性所繫結的屬性是讀取/寫入，而且可以修改。 這<xref uid=&quot;langword_csharp_static&quot; name=&quot;static&quot; href=&quot;&quot;></xref>欄位為唯讀。"
  remarks: "這個欄位是此屬性的預設設定。       當您將屬性標記與<xref:System.ComponentModel.ReadOnlyAttribute>設`false`，這個屬性的值設定為常數成員不可以。</xref:System.ComponentModel.ReadOnlyAttribute> 因此，當您想要檢查屬性是否設定為這個程式碼中的值，您必須指定屬性為 [否]。"
  syntax:
    content: public static readonly System.ComponentModel.ReadOnlyAttribute No;
    return:
      type: System.ComponentModel.ReadOnlyAttribute
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ReadOnlyAttribute.Yes
  id: Yes
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  name: Yes
  nameWithType: ReadOnlyAttribute.Yes
  fullName: System.ComponentModel.ReadOnlyAttribute.Yes
  type: Field
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定這個屬性所繫結的屬性是唯讀的而且無法在伺服器總管中修改。 這<xref uid=&quot;langword_csharp_static&quot; name=&quot;static&quot; href=&quot;&quot;></xref>欄位為唯讀。"
  remarks: "當您將屬性標記與<xref:System.ComponentModel.ReadOnlyAttribute>設`true`，這個屬性的值設定為常數成員 [是]。</xref:System.ComponentModel.ReadOnlyAttribute> 因此，當您想要檢查屬性是否設定為這個程式碼中的值，您必須指定屬性為 [是]。"
  syntax:
    content: public static readonly System.ComponentModel.ReadOnlyAttribute Yes;
    return:
      type: System.ComponentModel.ReadOnlyAttribute
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: ReadOnlyAttribute(Boolean)
  nameWithType: ReadOnlyAttribute.ReadOnlyAttribute(Boolean)
  fullName: System.ComponentModel.ReadOnlyAttribute.ReadOnlyAttribute(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.ReadOnlyAttribute.Default
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: Default
  nameWithType: ReadOnlyAttribute.Default
  fullName: System.ComponentModel.ReadOnlyAttribute.Default
- uid: System.ComponentModel.ReadOnlyAttribute
  parent: System.ComponentModel
  isExternal: false
  name: ReadOnlyAttribute
  nameWithType: ReadOnlyAttribute
  fullName: System.ComponentModel.ReadOnlyAttribute
- uid: System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: Equals(Object)
  nameWithType: ReadOnlyAttribute.Equals(Object)
  fullName: System.ComponentModel.ReadOnlyAttribute.Equals(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ComponentModel.ReadOnlyAttribute.GetHashCode
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: GetHashCode()
  nameWithType: ReadOnlyAttribute.GetHashCode()
  fullName: System.ComponentModel.ReadOnlyAttribute.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: IsDefaultAttribute()
  nameWithType: ReadOnlyAttribute.IsDefaultAttribute()
  fullName: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute()
- uid: System.ComponentModel.ReadOnlyAttribute.IsReadOnly
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: IsReadOnly
  nameWithType: ReadOnlyAttribute.IsReadOnly
  fullName: System.ComponentModel.ReadOnlyAttribute.IsReadOnly
- uid: System.ComponentModel.ReadOnlyAttribute.No
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: No
  nameWithType: ReadOnlyAttribute.No
  fullName: System.ComponentModel.ReadOnlyAttribute.No
- uid: System.ComponentModel.ReadOnlyAttribute.Yes
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: Yes
  nameWithType: ReadOnlyAttribute.Yes
  fullName: System.ComponentModel.ReadOnlyAttribute.Yes
- uid: System.ComponentModel.ReadOnlyAttribute.#ctor*
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: ReadOnlyAttribute
  nameWithType: ReadOnlyAttribute.ReadOnlyAttribute
- uid: System.ComponentModel.ReadOnlyAttribute.Equals*
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: Equals
  nameWithType: ReadOnlyAttribute.Equals
- uid: System.ComponentModel.ReadOnlyAttribute.GetHashCode*
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: GetHashCode
  nameWithType: ReadOnlyAttribute.GetHashCode
- uid: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute*
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: IsDefaultAttribute
  nameWithType: ReadOnlyAttribute.IsDefaultAttribute
- uid: System.ComponentModel.ReadOnlyAttribute.IsReadOnly*
  parent: System.ComponentModel.ReadOnlyAttribute
  isExternal: false
  name: IsReadOnly
  nameWithType: ReadOnlyAttribute.IsReadOnly
