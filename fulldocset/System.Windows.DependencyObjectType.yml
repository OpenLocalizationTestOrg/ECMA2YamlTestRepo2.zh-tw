### YamlMime:ManagedReference
items:
- uid: System.Windows.DependencyObjectType
  id: DependencyObjectType
  children:
  - System.Windows.DependencyObjectType.BaseType
  - System.Windows.DependencyObjectType.FromSystemType(System.Type)
  - System.Windows.DependencyObjectType.GetHashCode
  - System.Windows.DependencyObjectType.Id
  - System.Windows.DependencyObjectType.IsInstanceOfType(System.Windows.DependencyObject)
  - System.Windows.DependencyObjectType.IsSubclassOf(System.Windows.DependencyObjectType)
  - System.Windows.DependencyObjectType.Name
  - System.Windows.DependencyObjectType.SystemType
  langs:
  - csharp
  name: DependencyObjectType
  nameWithType: DependencyObjectType
  fullName: System.Windows.DependencyObjectType
  type: Class
  summary: "所有實作的基礎類型快取<xref href=&quot;System.Windows.DependencyObject&quot;></xref>衍生型別。"
  remarks: "DependencyObjectType 代表特定的基礎系統 ([!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)])<xref:System.Type>的<xref:System.Windows.DependencyObject>。</xref:System.Windows.DependencyObject> </xref:System.Type> DependencyObjectType 是基本上包裝函式 ([!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]) <xref:System.Type>，讓它可以擴充其功能。</xref:System.Type>       這個類別具有公用建構函式。 這個類別的執行個體只能取得透過對其他物件的屬性 (例如<xref:System.Windows.DependencyObject.DependencyObjectType%2A?displayProperty=fullName>)，或透過靜態方法<xref:System.Windows.DependencyObjectType.FromSystemType%2A>.</xref:System.Windows.DependencyObjectType.FromSystemType%2A> </xref:System.Windows.DependencyObject.DependencyObjectType%2A?displayProperty=fullName>"
  syntax:
    content: public class DependencyObjectType
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.DependencyObjectType.BaseType
  id: BaseType
  parent: System.Windows.DependencyObjectType
  langs:
  - csharp
  name: BaseType
  nameWithType: DependencyObjectType.BaseType
  fullName: System.Windows.DependencyObjectType.BaseType
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "取得<xref href=&quot;System.Windows.DependencyObjectType&quot;></xref>立即基底類別的目前<xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref>。"
  syntax:
    content: public System.Windows.DependencyObjectType BaseType { get; }
    return:
      type: System.Windows.DependencyObjectType
      description: "基底類別的類型。"
  overload: System.Windows.DependencyObjectType.BaseType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObjectType.FromSystemType(System.Type)
  id: FromSystemType(System.Type)
  parent: System.Windows.DependencyObjectType
  langs:
  - csharp
  name: FromSystemType(Type)
  nameWithType: DependencyObjectType.FromSystemType(Type)
  fullName: System.Windows.DependencyObjectType.FromSystemType(Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "傳回<xref href=&quot;System.Windows.DependencyObjectType&quot;></xref>表示指定的系統 ([!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]) 型別。"
  remarks: "每個<xref:System.Windows.DependencyObject>維護<xref:System.Windows.DependencyObject.DependencyObjectType%2A>屬性，傳回<xref:System.Windows.DependencyObjectType>，但這需要具有特定<xref:System.Windows.DependencyObject>執行個體。</xref:System.Windows.DependencyObject> </xref:System.Windows.DependencyObjectType> </xref:System.Windows.DependencyObject.DependencyObjectType%2A> </xref:System.Windows.DependencyObject> 您可以使用這個靜態公用程式方法，如果您還沒有的<xref:System.Windows.DependencyObject>執行個體，並需要<xref:System.Windows.DependencyObjectType>.</xref:System.Windows.DependencyObjectType> </xref:System.Windows.DependencyObject>"
  example:
  - "The following example calls FromSystemType , creating a <xref:System.Windows.DependencyObjectType> based on the type of the <xref:System.Windows.Window> class.  \n  \n [!code-cs[PropertiesOvwSupport#DOTFromSystemType](~/add/codesnippet/csharp/PropertiesOvwSupport/page3.xaml.cs#dotfromsystemtype)]\n [!code-vb[PropertiesOvwSupport#DOTFromSystemType](~/add/codesnippet/visualbasic/propertiesovwsupport/page3.xaml.vb#dotfromsystemtype)]"
  syntax:
    content: public static System.Windows.DependencyObjectType FromSystemType (Type systemType);
    parameters:
    - id: systemType
      type: System.Type
      description: "系統 ([!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]) 要轉換的類型。"
    return:
      type: System.Windows.DependencyObjectType
      description: "A <xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref>表示系統 ([!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]) 型別。"
  overload: System.Windows.DependencyObjectType.FromSystemType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObjectType.GetHashCode
  id: GetHashCode
  parent: System.Windows.DependencyObjectType
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: DependencyObjectType.GetHashCode()
  fullName: System.Windows.DependencyObjectType.GetHashCode()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "傳回這個雜湊程式碼<xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref>。"
  remarks: "此實作會連結到的值<xref:System.Windows.DependencyObjectType.Id%2A>屬性。</xref:System.Windows.DependencyObjectType.Id%2A>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "32 位元帶正負號的整數雜湊碼。"
  overload: System.Windows.DependencyObjectType.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObjectType.Id
  id: Id
  parent: System.Windows.DependencyObjectType
  langs:
  - csharp
  name: Id
  nameWithType: DependencyObjectType.Id
  fullName: System.Windows.DependencyObjectType.Id
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "常數時間陣列查閱作業取得的以零為起始的唯一識別碼。"
  remarks: "請勿使用一般的雜湊函式。 並不保證這個值。 它會因應用程式執行。"
  syntax:
    content: public int Id { get; }
    return:
      type: System.Int32
      description: "內部識別項。"
  overload: System.Windows.DependencyObjectType.Id*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObjectType.IsInstanceOfType(System.Windows.DependencyObject)
  id: IsInstanceOfType(System.Windows.DependencyObject)
  parent: System.Windows.DependencyObjectType
  langs:
  - csharp
  name: IsInstanceOfType(DependencyObject)
  nameWithType: DependencyObjectType.IsInstanceOfType(DependencyObject)
  fullName: System.Windows.DependencyObjectType.IsInstanceOfType(DependencyObject)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "判斷指定的物件是否為目前的執行個體<xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref>。"
  remarks: "物件的完全相同的類型傳回`true`。"
  syntax:
    content: public bool IsInstanceOfType (System.Windows.DependencyObject dependencyObject);
    parameters:
    - id: dependencyObject
      type: System.Windows.DependencyObject
      description: "要與目前比較的物件<xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此類別代表由目前<xref href=&quot;System.Windows.DependencyObjectType&quot;></xref>的繼承階層架構中<xref href=&quot;System.Windows.DependencyObject&quot;></xref>做為傳遞<code> d </code>，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.DependencyObjectType.IsInstanceOfType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObjectType.IsSubclassOf(System.Windows.DependencyObjectType)
  id: IsSubclassOf(System.Windows.DependencyObjectType)
  parent: System.Windows.DependencyObjectType
  langs:
  - csharp
  name: IsSubclassOf(DependencyObjectType)
  nameWithType: DependencyObjectType.IsSubclassOf(DependencyObjectType)
  fullName: System.Windows.DependencyObjectType.IsSubclassOf(DependencyObjectType)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "決定是否目前<xref href=&quot;System.Windows.DependencyObjectType&quot;></xref>衍生自指定<xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref>。"
  syntax:
    content: public bool IsSubclassOf (System.Windows.DependencyObjectType dependencyObjectType);
    parameters:
    - id: dependencyObjectType
      type: System.Windows.DependencyObjectType
      description: "<xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref>比較。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> dependencyObjectType </code>參數和目前<xref href=&quot;System.Windows.DependencyObjectType&quot;></xref>代表類型的類別，以及表示由目前類別<xref href=&quot;System.Windows.DependencyObjectType&quot;></xref>衍生自類別所代表<code> dependencyObjectType </code>。 否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 這個方法也會傳回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果<code> dependencyObjectType </code>和目前<xref href=&quot;System.Windows.DependencyObjectType&quot;></xref>代表相同的類別。"
  overload: System.Windows.DependencyObjectType.IsSubclassOf*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObjectType.Name
  id: Name
  parent: System.Windows.DependencyObjectType
  langs:
  - csharp
  name: Name
  nameWithType: DependencyObjectType.Name
  fullName: System.Windows.DependencyObjectType.Name
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "取得代表的名稱[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]系統類型。"
  remarks: "名稱的值是<xref:System.Type>.</xref:System.Type>的型別名稱的名稱相同的字串"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "表示的名稱[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]系統類型。"
  overload: System.Windows.DependencyObjectType.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObjectType.SystemType
  id: SystemType
  parent: System.Windows.DependencyObjectType
  langs:
  - csharp
  name: SystemType
  nameWithType: DependencyObjectType.SystemType
  fullName: System.Windows.DependencyObjectType.SystemType
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "取得[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]所表示的系統類型<xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref>。"
  syntax:
    content: public Type SystemType { get; }
    return:
      type: System.Type
      description: "[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]所表示的系統類型<xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref>。"
  overload: System.Windows.DependencyObjectType.SystemType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.DependencyObjectType.BaseType
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: BaseType
  nameWithType: DependencyObjectType.BaseType
  fullName: System.Windows.DependencyObjectType.BaseType
- uid: System.Windows.DependencyObjectType
  parent: System.Windows
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObjectType
  fullName: System.Windows.DependencyObjectType
- uid: System.Windows.DependencyObjectType.FromSystemType(System.Type)
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: FromSystemType(Type)
  nameWithType: DependencyObjectType.FromSystemType(Type)
  fullName: System.Windows.DependencyObjectType.FromSystemType(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.DependencyObjectType.GetHashCode
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: GetHashCode()
  nameWithType: DependencyObjectType.GetHashCode()
  fullName: System.Windows.DependencyObjectType.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.DependencyObjectType.Id
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: Id
  nameWithType: DependencyObjectType.Id
  fullName: System.Windows.DependencyObjectType.Id
- uid: System.Windows.DependencyObjectType.IsInstanceOfType(System.Windows.DependencyObject)
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: IsInstanceOfType(DependencyObject)
  nameWithType: DependencyObjectType.IsInstanceOfType(DependencyObject)
  fullName: System.Windows.DependencyObjectType.IsInstanceOfType(DependencyObject)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.DependencyObjectType.IsSubclassOf(System.Windows.DependencyObjectType)
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: IsSubclassOf(DependencyObjectType)
  nameWithType: DependencyObjectType.IsSubclassOf(DependencyObjectType)
  fullName: System.Windows.DependencyObjectType.IsSubclassOf(DependencyObjectType)
- uid: System.Windows.DependencyObjectType.Name
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: Name
  nameWithType: DependencyObjectType.Name
  fullName: System.Windows.DependencyObjectType.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.DependencyObjectType.SystemType
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: SystemType
  nameWithType: DependencyObjectType.SystemType
  fullName: System.Windows.DependencyObjectType.SystemType
- uid: System.Windows.DependencyObjectType.BaseType*
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: BaseType
  nameWithType: DependencyObjectType.BaseType
- uid: System.Windows.DependencyObjectType.FromSystemType*
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: FromSystemType
  nameWithType: DependencyObjectType.FromSystemType
- uid: System.Windows.DependencyObjectType.GetHashCode*
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: GetHashCode
  nameWithType: DependencyObjectType.GetHashCode
- uid: System.Windows.DependencyObjectType.Id*
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: Id
  nameWithType: DependencyObjectType.Id
- uid: System.Windows.DependencyObjectType.IsInstanceOfType*
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: IsInstanceOfType
  nameWithType: DependencyObjectType.IsInstanceOfType
- uid: System.Windows.DependencyObjectType.IsSubclassOf*
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: IsSubclassOf
  nameWithType: DependencyObjectType.IsSubclassOf
- uid: System.Windows.DependencyObjectType.Name*
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: Name
  nameWithType: DependencyObjectType.Name
- uid: System.Windows.DependencyObjectType.SystemType*
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: SystemType
  nameWithType: DependencyObjectType.SystemType
