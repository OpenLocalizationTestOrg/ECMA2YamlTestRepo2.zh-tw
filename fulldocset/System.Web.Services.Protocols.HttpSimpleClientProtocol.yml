### YamlMime:ManagedReference
items:
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol
  id: HttpSimpleClientProtocol
  children:
  - System.Web.Services.Protocols.HttpSimpleClientProtocol.#ctor
  - System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)
  - System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(System.IAsyncResult)
  - System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(System.String,System.String,System.Object[])
  - System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback)
  - System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  langs:
  - csharp
  name: HttpSimpleClientProtocol
  nameWithType: HttpSimpleClientProtocol
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol
  type: Class
  summary: "表示使用簡單的 HTTP GET 和 HTTP POST 通訊協定繫結 XML Web 服務進行通訊的基底類別。"
  remarks: "這個類別指定的大部分實作透過 HTTP 使用編碼器編碼的參數和傳回值到通用的 MIME 格式與 XML Web 服務進行通訊。 這些編碼器衍生自<xref:System.Web.Services.Protocols.MimeFormatter>類別。</xref:System.Web.Services.Protocols.MimeFormatter> 根據預設，proxy 類別，衍生自 HttpSimpleClientProtocol 編碼使用純文字 XML 中的應用程式/x-www-表單-urlencoded MIME 類型和回應的參數。 您可以使用指定自訂的 mime 格式器<xref:System.Web.Services.Protocols.HttpMethodAttribute>屬性，不過，沒有任何支援將這整合到服務描述和 proxy 產生。</xref:System.Web.Services.Protocols.HttpMethodAttribute>       `Notes to Inheritors:`當您覆寫這個類別時，您可以引入衍生類別中的方法專屬於特定類型的 XML Web 服務。 方法只要擷取參數，並呼叫基底類別進行通訊與站台的工作。 導入的方法是非同步的如果呼叫<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A>和<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A>方法。</xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> </xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> 導入的方法是同步的如果呼叫<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A>方法。</xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> 覆寫建構函式通常會設定<xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>XML Web 服務方法的 URI 的屬性。</xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>       Web 服務描述語言工具 (Wsdl.exe) 會產生指定的服務描述的 HttpSimpleClientProtocol 衍生的類別。"
  example:
  - "The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service below. The proxy class derives from <xref:System.Web.Services.Protocols.HttpGetClientProtocol>, which derives from the abstract HttpSimpleClientProtocol class.  \n  \n [!code-cs[Classic HttpGetClientProtocol Example#1](~/add/codesnippet/csharp/t-system.web.services.pr_3_1.cs)]\n [!code-cpp[Classic HttpGetClientProtocol Example#1](~/add/codesnippet/cpp/t-system.web.services.pr_3_1.cpp)]\n [!code-vb[Classic HttpGetClientProtocol Example#1](~/add/codesnippet/visualbasic/t-system.web.services.pr_3_1.vb)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \n  \n [!code-vb[Classic HttpSimpleClientProtocol Example#1](~/add/codesnippet/visualbasic/t-system.web.services.pr_3_2.vb)]\n [!code-cpp[Classic HttpSimpleClientProtocol Example#1](~/add/codesnippet/cpp/t-system.web.services.pr_3_2.cpp)]\n [!code-cs[Classic HttpSimpleClientProtocol Example#1](~/add/codesnippet/csharp/t-system.web.services.pr_3_2.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class HttpSimpleClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Web.Services.Protocols.WebClientProtocol
  - System.Web.Services.Protocols.HttpWebClientProtocol
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Web.Services.Protocols.HttpWebClientProtocol.AllowAutoRedirect
  - System.Web.Services.Protocols.HttpWebClientProtocol.CancelAsync(System.Object)
  - System.Web.Services.Protocols.HttpWebClientProtocol.ClientCertificates
  - System.Web.Services.Protocols.HttpWebClientProtocol.CookieContainer
  - System.Web.Services.Protocols.HttpWebClientProtocol.EnableDecompression
  - System.Web.Services.Protocols.HttpWebClientProtocol.GenerateXmlMappings(System.Type,System.Collections.ArrayList)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GenerateXmlMappings(System.Type[],System.Collections.ArrayList)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GetWebRequest(System.Uri)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(System.Net.WebRequest)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)
  - System.Web.Services.Protocols.HttpWebClientProtocol.Proxy
  - System.Web.Services.Protocols.HttpWebClientProtocol.UnsafeAuthenticatedConnectionSharing
  - System.Web.Services.Protocols.HttpWebClientProtocol.UserAgent
  - System.Web.Services.Protocols.WebClientProtocol.Abort
  - System.Web.Services.Protocols.WebClientProtocol.AddToCache(System.Type,System.Object)
  - System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName
  - System.Web.Services.Protocols.WebClientProtocol.Credentials
  - System.Web.Services.Protocols.WebClientProtocol.GetFromCache(System.Type)
  - System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate
  - System.Web.Services.Protocols.WebClientProtocol.RequestEncoding
  - System.Web.Services.Protocols.WebClientProtocol.Timeout
  - System.Web.Services.Protocols.WebClientProtocol.Url
  - System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials
  platform:
  - net462
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.#ctor
  id: '#ctor'
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  langs:
  - csharp
  name: HttpSimpleClientProtocol()
  nameWithType: HttpSimpleClientProtocol.HttpSimpleClientProtocol()
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.HttpSimpleClientProtocol()
  type: Constructor
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "初始化的新執行個體<xref href=&quot;System.Web.Services.Protocols.HttpSimpleClientProtocol&quot;></xref>類別。"
  syntax:
    content: protected HttpSimpleClientProtocol ();
    parameters: []
  overload: System.Web.Services.Protocols.HttpSimpleClientProtocol.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)
  id: BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  langs:
  - csharp
  name: BeginInvoke(String,String,Object[],AsyncCallback,Object)
  nameWithType: HttpSimpleClientProtocol.BeginInvoke(String,String,Object[],AsyncCallback,Object)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(String,String,Object[],AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "啟動 XML Web 服務方法的非同步引動過程。"
  remarks: "`methodName`參數用來尋找參數的類型和方法是叫用 BeginInvoke 方法的傳回值。 它也用來尋找可能會加入至方法的自訂屬性。 <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute><xref:System.Web.Services.Protocols.SoapRpcMethodAttribute>，和<xref:System.Xml.Serialization.XmlElementAttribute>衍生方法所需的 HTTP 通訊協定上提供其他資訊。</xref:System.Xml.Serialization.XmlElementAttribute> </xref:System.Web.Services.Protocols.SoapRpcMethodAttribute></xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>       `asyncState`傳遞至`callback`納入<xref:System.IAsyncResult>從 BeginInvoke 方法傳回。</xref:System.IAsyncResult> 它可用於從處理中的非同步結果的非同步呼叫的內容傳遞資訊`callback`。"
  example:
  - "The following code example is an ASP.NET Web Form, which calls an XML Web service named `Math`. Within the `EnterBtn_Click` function, the Web Form starts and completes an asynchronous invocation of the `Add` XML Web service method.  \n  \n [!code-cs[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/add/codesnippet/csharp/610d2bee-8011-4b46-8264-_1.aspx)]\n [!code-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/add/codesnippet/visualbasic/610d2bee-8011-4b46-8264-_1.aspx)]  \n  \n The following code example is a proxy class generated by the Web Services Description Language tool (Wsdl.exe) for the `Math` XML Web service below. Within the `BeginAdd` method of the proxy class, the <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> method starts an asynchronous invocation of the `Add` XML Web service method.  \n  \n [!code-cpp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/add/codesnippet/cpp/610d2bee-8011-4b46-8264-_2.cpp)]\n [!code-cs[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/add/codesnippet/csharp/610d2bee-8011-4b46-8264-_2.cs)]\n [!code-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/add/codesnippet/visualbasic/610d2bee-8011-4b46-8264-_2.vb)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected IAsyncResult BeginInvoke (string methodName, string requestUrl, object[] parameters, AsyncCallback callback, object asyncState);
    parameters:
    - id: methodName
      type: System.String
      description: "XML Web 服務方法的名稱。"
    - id: requestUrl
      type: System.String
      description: "建立<xref:System.Net.WebRequest>.</xref:System.Net.WebRequest>時要使用 URL"
    - id: parameters
      type: System.Object[]
      description: "物件陣列，包含要傳遞給 XML Web 服務方法的參數。 陣列中值的順序對應於呼叫方法的衍生類別中的參數順序。"
    - id: callback
      type: System.AsyncCallback
      description: "非同步方法呼叫完成時要呼叫委派。 如果`callback`是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，不會呼叫的委派。"
    - id: asyncState
      type: System.Object
      description: "用戶端所提供的其他資訊。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>可以傳遞至<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke*>方法，以取得從 XML Web 服務方法的傳回值。</xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke*> </xref:System.IAsyncResult>"
  overload: System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "要求到達伺服器電腦，但並未成功處理。"
  platform:
  - net462
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(System.IAsyncResult)
  id: EndInvoke(System.IAsyncResult)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  langs:
  - csharp
  name: EndInvoke(IAsyncResult)
  nameWithType: HttpSimpleClientProtocol.EndInvoke(IAsyncResult)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(IAsyncResult)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "完成 XML Web 服務方法使用 HTTP 的非同步引動的過程。"
  remarks: ''
  example:
  - "The following code example is an ASP.NET Web Form, which calls an XML Web service named `Math`. Within the `EnterBtn_Click` function, the Web Form starts and completes an asynchronous invocation of the `Add` XML Web service method.  \n  \n [!code-cs[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/add/codesnippet/csharp/df330565-2b74-43bd-92c4-_1.aspx)]\n [!code-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/add/codesnippet/visualbasic/df330565-2b74-43bd-92c4-_1.aspx)]  \n  \n The following code example is a proxy class generated by the Web Services Description Language tool (Wsdl.exe) for the `Math` XML Web service below. Within the `EndAdd` method of the proxy class, the <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> method starts an asynchronous invocation of the `Add` XML Web service method.  \n  \n [!code-cpp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/add/codesnippet/cpp/df330565-2b74-43bd-92c4-_2.cpp)]\n [!code-cs[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/add/codesnippet/csharp/df330565-2b74-43bd-92c4-_2.cs)]\n [!code-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/add/codesnippet/visualbasic/df330565-2b74-43bd-92c4-_2.vb)]  \n  \n The following code example is the `Math` XML Web service, from which the above proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected object EndInvoke (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>從傳回<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke*>方法。</xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke*> </xref:System.IAsyncResult>"
    return:
      type: System.Object
      description: "包含傳回的值，以及任何所參考物件的陣列，或<code> out </code>參數 XML Web 服務方法。"
  overload: System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>不是從傳回的值<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke*>方法。"
  platform:
  - net462
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(System.String,System.String,System.Object[])
  id: Invoke(System.String,System.String,System.Object[])
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  langs:
  - csharp
  name: Invoke(String,String,Object[])
  nameWithType: HttpSimpleClientProtocol.Invoke(String,String,Object[])
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(String,String,Object[])
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "使用 HTTP 的 XML Web 服務方法會叫用。"
  remarks: "`methodName`參數用來尋找參數的類型和方法是叫用的叫用方法的傳回值。 它也用來找出可能已經加入至方法的自訂屬性。 <xref:System.Web.Services.Protocols.HttpMethodAttribute>和<xref:System.Xml.Serialization.XmlElementAttribute>衍生方法所需的 SOAP 通訊協定上提供其他資訊。</xref:System.Xml.Serialization.XmlElementAttribute></xref:System.Web.Services.Protocols.HttpMethodAttribute>"
  example:
  - "The following code example is an ASP.NET Web Form, which calls an XML Web service named `Math`. Within the `EnterBtn_Click` function, the Web Form synchronously invokes the `Add` XML Web service method.  \n  \n [!code-cs[HttpSimpleClientProtocol.Invoke Example#2](~/add/codesnippet/csharp/3a69f415-9422-4839-9833-_1.aspx)]\n [!code-vb[HttpSimpleClientProtocol.Invoke Example#2](~/add/codesnippet/visualbasic/3a69f415-9422-4839-9833-_1.aspx)]  \n  \n The following code example is a proxy class generated by the Web Services Description Language tool (Wsdl.exe) for the `Math` XML Web service below. Within the `Add` method of the proxy class, the Invoke method synchronously invokes the `Add` Web Service method.  \n  \n [!code-vb[HttpSimpleClientProtocol.Invoke Example#1](~/add/codesnippet/visualbasic/3a69f415-9422-4839-9833-_2.vb)]\n [!code-cs[HttpSimpleClientProtocol.Invoke Example#1](~/add/codesnippet/csharp/3a69f415-9422-4839-9833-_2.cs)]\n [!code-cpp[HttpSimpleClientProtocol.Invoke Example#1](~/add/codesnippet/cpp/3a69f415-9422-4839-9833-_2.cpp)]  \n  \n The following code example is the `Math` XML Web service, from which the above proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected object Invoke (string methodName, string requestUrl, object[] parameters);
    parameters:
    - id: methodName
      type: System.String
      description: "XML Web 服務方法會叫用的叫用方法的衍生類別中的名稱。"
    - id: requestUrl
      type: System.String
      description: "XML Web 服務方法，用戶端要求的 URL。"
    - id: parameters
      type: System.Object[]
      description: "物件陣列，包含要傳遞至遠端 XML Web 服務的參數。 陣列中值的順序對應於呼叫方法的衍生類別中的參數順序。"
    return:
      type: System.Object
      description: "包含傳回值，以及任何所參考物件的陣列，或<code> out </code>衍生的類別方法的參數。"
  overload: System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "要求到達伺服器電腦，但並未成功處理。"
  platform:
  - net462
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback)
  id: InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  langs:
  - csharp
  name: InvokeAsync(String,String,Object[],SendOrPostCallback)
  nameWithType: HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "以非同步方式叫用指定的方法。"
  syntax:
    content: protected void InvokeAsync (string methodName, string requestUrl, object[] parameters, System.Threading.SendOrPostCallback callback);
    parameters:
    - id: methodName
      type: System.String
      description: "要叫用方法的名稱。"
    - id: requestUrl
      type: System.String
      description: "叫用的 web 服務的要求 URL。"
    - id: parameters
      type: System.Object[]
      description: "要傳遞至方法的參數。"
    - id: callback
      type: System.Threading.SendOrPostCallback
      description: "方法引動過程完成時呼叫的委派。"
  overload: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  id: InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  langs:
  - csharp
  name: InvokeAsync(String,String,Object[],SendOrPostCallback,Object)
  nameWithType: HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback,Object)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback,Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "維持相關聯的狀態，以非同步方式叫用指定的方法。"
  syntax:
    content: protected void InvokeAsync (string methodName, string requestUrl, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);
    parameters:
    - id: methodName
      type: System.String
      description: "要叫用方法的名稱。"
    - id: requestUrl
      type: System.String
      description: "叫用的 web 服務的要求 URL。"
    - id: parameters
      type: System.Object[]
      description: "要傳遞至方法的參數。"
    - id: callback
      type: System.Threading.SendOrPostCallback
      description: "方法引動過程完成時呼叫的委派。"
    - id: userState
      type: System.Object
      description: "物件，包含相關聯的狀態資訊傳遞給`callback`時已完成之方法的委派。"
  overload: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.Services.Protocols.HttpWebClientProtocol
  isExternal: false
  name: System.Web.Services.Protocols.HttpWebClientProtocol
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.#ctor
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: HttpSimpleClientProtocol()
  nameWithType: HttpSimpleClientProtocol.HttpSimpleClientProtocol()
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.HttpSimpleClientProtocol()
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: BeginInvoke(String,String,Object[],AsyncCallback,Object)
  nameWithType: HttpSimpleClientProtocol.BeginInvoke(String,String,Object[],AsyncCallback,Object)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(String,String,Object[],AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(System.IAsyncResult)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: EndInvoke(IAsyncResult)
  nameWithType: HttpSimpleClientProtocol.EndInvoke(IAsyncResult)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(IAsyncResult)
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(System.String,System.String,System.Object[])
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: Invoke(String,String,Object[])
  nameWithType: HttpSimpleClientProtocol.Invoke(String,String,Object[])
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(String,String,Object[])
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: InvokeAsync(String,String,Object[],SendOrPostCallback)
  nameWithType: HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback)
- uid: System.Threading.SendOrPostCallback
  parent: System.Threading
  isExternal: true
  name: SendOrPostCallback
  nameWithType: SendOrPostCallback
  fullName: System.Threading.SendOrPostCallback
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: InvokeAsync(String,String,Object[],SendOrPostCallback,Object)
  nameWithType: HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback,Object)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback,Object)
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.#ctor*
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: HttpSimpleClientProtocol
  nameWithType: HttpSimpleClientProtocol.HttpSimpleClientProtocol
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke*
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: BeginInvoke
  nameWithType: HttpSimpleClientProtocol.BeginInvoke
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke*
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: EndInvoke
  nameWithType: HttpSimpleClientProtocol.EndInvoke
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke*
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: Invoke
  nameWithType: HttpSimpleClientProtocol.Invoke
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync*
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: InvokeAsync
  nameWithType: HttpSimpleClientProtocol.InvokeAsync
