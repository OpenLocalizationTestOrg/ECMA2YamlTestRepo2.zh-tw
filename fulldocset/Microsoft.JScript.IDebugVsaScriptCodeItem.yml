### YamlMime:ManagedReference
items:
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem
  id: IDebugVsaScriptCodeItem
  children:
  - Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate
  - Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)
  langs:
  - csharp
  name: IDebugVsaScriptCodeItem
  nameWithType: IDebugVsaScriptCodeItem
  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem
  type: Interface
  summary: "定義評估運算式，並剖析字串的方法。 物件，表示程式碼區塊，通常實作這個介面，並在偵錯工具通常會呼叫它。 這個介面提供 IActiveScript 主機所需的額外功能。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      [System.Runtime.InteropServices.Guid("6DFE759A-CB8B-4ca0-A973-1D04E0BF0B53")]

      public interface IDebugVsaScriptCodeItem
  implements: []
  platform:
  - net462
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate
  id: Evaluate
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  langs:
  - csharp
  name: Evaluate()
  nameWithType: IDebugVsaScriptCodeItem.Evaluate()
  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate()
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "類別中實作時，評估區塊、 運算式或陳述式的程式碼項目所代表，並傳回值。 通常會呼叫它的偵錯工具要評估的運算式 （例如監看式視窗）。 針對運算式，此值是運算式的結果。 區塊和陳述式，所產生的運算式會是最後一個區塊或陳述式所計算的運算式。"
  remarks: "請注意，評估方法在功能上等於<xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A>方法。</xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A> 封送處理的屬性不同。 這個版本的介面可讓 unmanaged 偵錯工具，來取得傳回值`IUnknown`指標而不是`VARIANT`。"
  syntax:
    content: public object Evaluate ();
    parameters: []
    return:
      type: System.Object
      description: "傳回值，表示評估陳述式、 運算式或區塊。"
  overload: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)
  id: ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  langs:
  - csharp
  name: ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
  nameWithType: IDebugVsaScriptCodeItem.ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: '類別中實作時，剖析字串，並傳回剖析出資訊。 通常會呼叫這個方法需要剖析資訊表示為中斷點的偵錯工具<xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref>。 偵錯工具可能會有中斷點，在表單中的使用者所輸入*functionname-引數-ILoffset*。 具名的中斷點字串可以有複雜的格式，例如`F.B(C.D[], int, arg : double ) : C.Abc + 123.`參數清單是選擇性的因為 IL 位移。'
  syntax:
    content: public bool ParseNamedBreakPoint (string input, out string functionName, out int nargs, out string arguments, out string returnType, out ulong offset);
    parameters:
    - id: input
      type: System.String
      description: "語式正確命名中斷點的字串，指定函式、 選擇性引數清單和選擇性的 IL 位移。"
    - id: functionName
      type: System.String
      description: "Out 參數傳回的函式名稱剖析從輸入的字串中或空的字串如果輸入的字串的格式不正確。"
    - id: nargs
      type: System.Int32
      description: "Out 參數傳回的選擇性引數清單中的引數數目。 如果沒有任何引數清單，或字串的格式不正確的則傳回零。"
    - id: arguments
      type: System.String
      description: "Out 參數傳回的所有引數的類型名稱以空格分隔的清單中引數清單中或空字串，如果引數清單遺漏，或輸入的字串的格式不正確。"
    - id: returnType
      type: System.String
      description: "Out 參數傳回字串，包含在輸入中，名為函式的傳回型別或空字串，如果傳回型別已遺失或輸入的字串不是正確。"
    - id: offset
      type: System.UInt64
      description: "提供的 IL 位移，從輸入的字串中，則為零，如果沒有 IL 位移或有字串語式不帶正負號的長整數。"
    return:
      type: System.Boolean
      description: "傳回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果成功剖析具名的中斷點， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>否則。"
  overload: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint*
  exceptions: []
  platform:
  - net462
references:
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  isExternal: false
  name: Evaluate()
  nameWithType: IDebugVsaScriptCodeItem.Evaluate()
  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  isExternal: false
  name: ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
  nameWithType: IDebugVsaScriptCodeItem.ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate*
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  isExternal: false
  name: Evaluate
  nameWithType: IDebugVsaScriptCodeItem.Evaluate
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint*
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  isExternal: false
  name: ParseNamedBreakPoint
  nameWithType: IDebugVsaScriptCodeItem.ParseNamedBreakPoint
