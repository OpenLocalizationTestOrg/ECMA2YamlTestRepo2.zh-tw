### YamlMime:ManagedReference
items:
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol
  id: SoapHttpClientProtocol
  children:
  - System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor
  - System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.Discover
  - System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])
  - System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
  langs:
  - csharp
  name: SoapHttpClientProtocol
  nameWithType: SoapHttpClientProtocol
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol
  type: Class
  summary: "指定當使用 SOAP proxy 是衍生自類別用戶端。"
  remarks: "如果您要建立 XML Web 服務用戶端，然後 proxy 類別的間接或衍生直接從<xref:System.Web.Services.Protocols.WebClientProtocol>必須建立 XML Web service。</xref:System.Web.Services.Protocols.WebClientProtocol> 當使用 SOAP 呼叫 XML Web 服務用戶端時，proxy 類別必須衍生自 SoapHttpClientProtocol，衍生自<xref:System.Web.Services.Protocols.HttpWebClientProtocol>.</xref:System.Web.Services.Protocols.HttpWebClientProtocol> <xref:System.Web.Services.Protocols.HttpWebClientProtocol>又，衍生自<xref:System.Web.Services.Protocols.WebClientProtocol>.</xref:System.Web.Services.Protocols.WebClientProtocol></xref:System.Web.Services.Protocols.HttpWebClientProtocol>       若要使用 XML Web 服務通訊，建立 proxy 類別，衍生自的間接或直接<xref:System.Web.Services.Protocols.WebClientProtocol>您想要呼叫 XML Web 服務。</xref:System.Web.Services.Protocols.WebClientProtocol> 而不是手動建立 proxy 類別，使用 Web 服務描述語言工具 (Wsdl.exe) 來建立指定的 XML Web 服務的服務描述的 proxy 類別。 SOAP 通訊協定產生 proxy 類別時，對同步呼叫 XML Web 服務方法會透過<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A>方法，而非同步呼叫會使用<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A>方法和<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A>方法。</xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> </xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> </xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A>"
  example:
  - "The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service. The proxy class derives from SoapHttpClientProtocol, which derives from the abstract <xref:System.Web.Services.Protocols.WebClientProtocol> class.  \n  \n [!code-cs[Classic SoapHttpClientProtocol Example#1](~/add/codesnippet/csharp/t-system.web.services.pr_15_1.cs)]\n [!code-vb[Classic SoapHttpClientProtocol Example#1](~/add/codesnippet/visualbasic/t-system.web.services.pr_15_1.vb)]\n [!code-cpp[Classic SoapHttpClientProtocol Example#1](~/add/codesnippet/cpp/t-system.web.services.pr_15_1.cpp)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was generated.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class SoapHttpClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Web.Services.Protocols.WebClientProtocol
  - System.Web.Services.Protocols.HttpWebClientProtocol
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Web.Services.Protocols.HttpWebClientProtocol.AllowAutoRedirect
  - System.Web.Services.Protocols.HttpWebClientProtocol.CancelAsync(System.Object)
  - System.Web.Services.Protocols.HttpWebClientProtocol.ClientCertificates
  - System.Web.Services.Protocols.HttpWebClientProtocol.CookieContainer
  - System.Web.Services.Protocols.HttpWebClientProtocol.EnableDecompression
  - System.Web.Services.Protocols.HttpWebClientProtocol.GenerateXmlMappings(System.Type,System.Collections.ArrayList)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GenerateXmlMappings(System.Type[],System.Collections.ArrayList)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(System.Net.WebRequest)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)
  - System.Web.Services.Protocols.HttpWebClientProtocol.Proxy
  - System.Web.Services.Protocols.HttpWebClientProtocol.UnsafeAuthenticatedConnectionSharing
  - System.Web.Services.Protocols.HttpWebClientProtocol.UserAgent
  - System.Web.Services.Protocols.WebClientProtocol.Abort
  - System.Web.Services.Protocols.WebClientProtocol.AddToCache(System.Type,System.Object)
  - System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName
  - System.Web.Services.Protocols.WebClientProtocol.Credentials
  - System.Web.Services.Protocols.WebClientProtocol.GetFromCache(System.Type)
  - System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate
  - System.Web.Services.Protocols.WebClientProtocol.RequestEncoding
  - System.Web.Services.Protocols.WebClientProtocol.Timeout
  - System.Web.Services.Protocols.WebClientProtocol.Url
  - System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor
  id: '#ctor'
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: SoapHttpClientProtocol()
  nameWithType: SoapHttpClientProtocol.SoapHttpClientProtocol()
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapHttpClientProtocol()
  type: Constructor
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "初始化的新執行個體<xref href=&quot;System.Web.Services.Protocols.SoapHttpClientProtocol&quot;></xref>類別。"
  syntax:
    content: public SoapHttpClientProtocol ();
    parameters: []
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)
  id: BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: BeginInvoke(String,Object[],AsyncCallback,Object)
  nameWithType: SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "啟動 XML Web 服務方法使用 SOAP 的非同步引動過程。"
  remarks: "一般而言，您會 BeginInvoke 直接呼叫方法，除非您已建立您自己的 XML Web service 的 proxy 類別。       從服務描述 Web 服務描述語言工具 (Wsdl.exe) 所產生的 proxy 類別會公開 XML Web service 方法為衍生自 proxy 類別以同步方式呼叫 XML Web 服務方法的名稱。 若要以非同步方式呼叫 XML Web service 方法，兩個額外的方法加入至每個 XML Web service 方法，其中使用的 proxy 類別`Begin`的 XML Web service 方法，而另一個為名稱加上前置詞`End`加入前置詞。       Proxy 類別呼叫 BeginInvoke 方法，開始呼叫 XML Web 服務方法的非同步引動過程。 例如，如果 XML Web service 公開 （expose） 名為 XML Web 服務方法`Add`，proxy 類別包含名為的方法`BeginAdd`，啟動在引動過程 XML Web 服務方法。 中的程式碼`BeginAdd`BeginInvoke 方法進行呼叫，結果會放入預期的傳回類型為`Add`。       `methodName`用來尋找可能已經加入至方法，例如<xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>.</xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>的自訂屬性 <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>提供有關在衍生方法的 SOAP 通訊協定所需的其他資訊。</xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>       `asyncState`傳遞至`callback`納入<xref:System.IAsyncResult>從 BeginInvoke 方法傳回。</xref:System.IAsyncResult> `asyncState`參數可以用來傳遞內容的非同步呼叫，在指定的資訊`callback`參數，以處理結果的委派。"
  example:
  - "The following code example is a proxy class generated by the Web Services Description Language tool (Wsdl.exe) for the `Math` XML Web service. Within the `BeginAdd` method of the proxy class, the BeginInvoke method is starting an asynchronous invocation to the `Add` XML Web service method.  \n  \n [!code-cpp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/add/codesnippet/cpp/81aca43b-c3a8-42d4-aae1-_1.cpp)]\n [!code-cs[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/add/codesnippet/csharp/81aca43b-c3a8-42d4-aae1-_1.cs)]\n [!code-vb[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/add/codesnippet/visualbasic/81aca43b-c3a8-42d4-aae1-_1.vb)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected IAsyncResult BeginInvoke (string methodName, object[] parameters, AsyncCallback callback, object asyncState);
    parameters:
    - id: methodName
      type: System.String
      description: "XML Web 服務方法叫用 BeginInvoke 方法在衍生類別中的名稱。"
    - id: parameters
      type: System.Object[]
      description: "物件陣列，包含要傳遞到 XML Web 服務的參數。 在衍生類別呼叫方法的參數對應於陣列中值的順序。"
    - id: callback
      type: System.AsyncCallback
      description: "完成非同步叫用時呼叫委派。 如果`callback`是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，不會呼叫的委派。"
    - id: asyncState
      type: System.Object
      description: "呼叫端所提供的額外資訊。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>傳遞至<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*>方法，以取得從遠端方法呼叫傳回的值。</xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*> </xref:System.IAsyncResult>"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*
  exceptions:
  - type: System.Web.Services.Protocols.SoapException
    commentId: T:System.Web.Services.Protocols.SoapException
    description: "要求到達伺服器電腦，但並未成功處理。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "不是有效的物件的目前狀態的要求。"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "存取網路時發生錯誤。"
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover
  id: Discover
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: Discover()
  nameWithType: SoapHttpClientProtocol.Discover()
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover()
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "動態繫結至<xref:System.Web.Services.Protocols.WebClientProtocol.Url*>.</xref:System.Web.Services.Protocols.WebClientProtocol.Url*>探索文件中所描述的 XML Web service"
  remarks: "XML Web 服務用戶端可以動態地繫結至以外使用的探索方法在 proxy 類別中參考 XML Web 服務。 一般而言，<xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>屬性指的是 XML Web 服務的基底位址。</xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> 不過，在之前叫用探索方法，請設定<xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>屬性以探索文件的 URL。</xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> Discover 方法會嘗試在 proxy 類別中定義的繫結的探索文件中尋找相符項目並將動態繫結它。 如果成功，後續的方法呼叫會被導向至 XML Web 服務探索文件中所述。       如果使用 Web 服務描述語言工具 (Wsdl.exe) 來建置 proxy 類別時，proxy 類別會定義 XML Web service 方法，它會叫用使用<xref:System.Web.Services.WebServiceBindingAttribute>.</xref:System.Web.Services.WebServiceBindingAttribute>所實作的繫結 當 XML Web service 實作多個繫結時，Wsdl.exe 建立 proxy 類別，每個繫結。 套用至每個 proxy 類別是<xref:System.Web.Services.WebServiceBindingAttribute>所定義的繫結和它的命名空間名稱。</xref:System.Web.Services.WebServiceBindingAttribute> 您所設定的探索文件<xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>屬性必須包含實作相同的繫結名稱和命名空間、 XML Web 服務的參考，否則會擲回例外狀況。</xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>"
  example:
  - "The following code example is a proxy class generated using the Wsdl.exe utility for the `Math` XML Web service. A <xref:System.Web.Services.WebServiceBindingAttribute> is applied to the `Math` proxy class setting the binding name to `MathSoap` and its namespace to `http://tempuri.org/`.  \n  \n [!code-cs[SoapHttpClientProtocol.Discover Example#1](~/add/codesnippet/csharp/m-system.web.services.pr_8_1.cs)]\n [!code-cpp[SoapHttpClientProtocol.Discover Example#1](~/add/codesnippet/cpp/m-system.web.services.pr_8_1.cpp)]\n [!code-vb[SoapHttpClientProtocol.Discover Example#1](~/add/codesnippet/visualbasic/m-system.web.services.pr_8_1.vb)]  \n  \n The following code example is a Web Service client using the preceding proxy class. Within the `EnterBtn_Click` event of the Web Form, the XML Web service client calls the Discover method attempting to dynamically bind to the URL supplied by the user.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[SoapHttpClientProtocol.Discover Example#2](~/add/codesnippet/csharp/m-system.web.services.pr_8_2.aspx)]\n [!code-vb[SoapHttpClientProtocol.Discover Example#2](~/add/codesnippet/visualbasic/m-system.web.services.pr_8_2.aspx)]"
  syntax:
    content: public void Discover ();
    parameters: []
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Proxy 類別並沒有定義的繫結。"
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)
  id: EndInvoke(System.IAsyncResult)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: EndInvoke(IAsyncResult)
  nameWithType: SoapHttpClientProtocol.EndInvoke(IAsyncResult)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(IAsyncResult)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "結束 XML Web 服務方法使用 SOAP 的非同步引動過程。"
  remarks: "一般而言，您會 EndInvoke 方法直接呼叫，除非您已建立您自己的 XML Web service 的 proxy 類別。       由 XML Web service 的 Web 服務描述語言工具 (Wsdl.exe) 所產生的 proxy 類別會公開 XML Web service 方法，為開 proxy 類別以同步方式呼叫 XML Web 服務方法的名稱。 以非同步方式呼叫 XML Web service 方法，兩個額外的方法加入至每個 XML Web service 方法，一個使用的 proxy 類別`Begin`的 XML Web service 方法，而另一個為名稱加上前置詞`End`加入前置詞。       Proxy 類別呼叫以完成 XML Web service 方法的非同步引動過程呼叫 EndInvoke 方法。 例如，如果 XML Web service 公開 （expose） 名為 XML Web 服務方法`Add`，proxy 類別包含名為的方法`EndAdd`，完成的非同步引動過程的 XML Web 服務方法。 中的程式碼`EndAdd`EndInvoke 方法進行呼叫，然後結果會放入預期的傳回類型為`Add`。"
  example:
  - "The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service. Within the `EndAdd` method of the proxy class, the EndInvoke method completes the asynchronous invocation to the `Add` XML Web service method.  \n  \n [!code-vb[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/add/codesnippet/visualbasic/d0f11dd9-cadb-4640-91aa-_1.vb)]\n [!code-cs[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/add/codesnippet/csharp/d0f11dd9-cadb-4640-91aa-_1.cs)]\n [!code-cpp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/add/codesnippet/cpp/d0f11dd9-cadb-4640-91aa-_1.cpp)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected object[] EndInvoke (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>從傳回<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*>方法。</xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*> </xref:System.IAsyncResult>"
    return:
      type: System.Object[]
      description: "物件的陣列，其中包含傳回值和任何依參考或<xref uid=&quot;langword_csharp_out&quot; name=&quot;out&quot; href=&quot;&quot;></xref>衍生的類別方法的參數。"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>不是從傳回的值<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*>方法。"
  - type: System.Web.Services.Protocols.SoapException
    commentId: T:System.Web.Services.Protocols.SoapException
    description: "要求到達伺服器電腦，但並未成功處理。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "不是有效的物件的目前狀態的要求。"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "存取網路時發生錯誤。"
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  id: GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: GetReaderForMessage(SoapClientMessage,Int32)
  nameWithType: SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "傳回<xref:System.Xml.XmlReader>以初始化<xref:System.Web.Services.Protocols.SoapMessage.Stream*>屬性<xref href=&quot;System.Web.Services.Protocols.SoapClientMessage&quot;></xref>參數。</xref:System.Web.Services.Protocols.SoapMessage.Stream*> </xref:System.Xml.XmlReader>"
  syntax:
    content: protected virtual System.Xml.XmlReader GetReaderForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);
    parameters:
    - id: message
      type: System.Web.Services.Protocols.SoapClientMessage
      description: "A <xref href=&quot;System.Web.Services.Protocols.SoapClientMessage&quot;> </xref>提供所<xref:System.Web.Services.Protocols.SoapMessage.Stream*>要初始化<xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> </xref:System.Web.Services.Protocols.SoapMessage.Stream*>"
    - id: bufferSize
      type: System.Int32
      description: "<xref:System.IO.StreamReader> <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>所使用</xref:System.IO.StreamReader>的初始的緩衝區大小"
    return:
      type: System.Xml.XmlReader
      description: "A<xref:System.Xml.XmlReader>以初始化<xref:System.Web.Services.Protocols.SoapMessage.Stream*>屬性<code> message </code>參數。</xref:System.Web.Services.Protocols.SoapMessage.Stream*> </xref:System.Xml.XmlReader>"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)
  id: GetWebRequest(System.Uri)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: GetWebRequest(Uri)
  nameWithType: SoapHttpClientProtocol.GetWebRequest(Uri)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(Uri)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "建立<xref:System.Net.WebRequest>指定<code> uri </code>。</xref:System.Net.WebRequest>"
  remarks: "這個方法會覆寫自訂<xref:System.Net.WebRequest>之前 XML Web 服務要求。</xref:System.Net.WebRequest> 例如，您無法將自訂標頭加入要求。"
  syntax:
    content: protected override System.Net.WebRequest GetWebRequest (Uri uri);
    parameters:
    - id: uri
      type: System.Uri
      description: "<xref:System.Uri>若要建立<xref:System.Net.WebRequest>.</xref:System.Net.WebRequest>時使用</xref:System.Uri>"
    return:
      type: System.Net.WebRequest
      description: "<xref:System.Net.WebRequest>為指定的 URI。</xref:System.Net.WebRequest>"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <code>uri</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  id: GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: GetWriterForMessage(SoapClientMessage,Int32)
  nameWithType: SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "傳回<xref:System.Xml.XmlWriter>以初始化<xref:System.Web.Services.Protocols.SoapMessage.Stream*>屬性<xref href=&quot;System.Web.Services.Protocols.SoapClientMessage&quot;></xref>參數。</xref:System.Web.Services.Protocols.SoapMessage.Stream*> </xref:System.Xml.XmlWriter>"
  syntax:
    content: protected virtual System.Xml.XmlWriter GetWriterForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);
    parameters:
    - id: message
      type: System.Web.Services.Protocols.SoapClientMessage
      description: "A <xref href=&quot;System.Web.Services.Protocols.SoapClientMessage&quot;> </xref>提供所<xref:System.Web.Services.Protocols.SoapMessage.Stream*>要初始化<xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> </xref:System.Web.Services.Protocols.SoapMessage.Stream*>"
    - id: bufferSize
      type: System.Int32
      description: "<xref:System.IO.StreamWriter> <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>所使用</xref:System.IO.StreamWriter>的初始的緩衝區大小"
    return:
      type: System.Xml.XmlWriter
      description: "A<xref:System.Xml.XmlWriter>以初始化<xref:System.Web.Services.Protocols.SoapMessage.Stream*>屬性<code> message </code>參數。</xref:System.Web.Services.Protocols.SoapMessage.Stream*> </xref:System.Xml.XmlWriter>"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])
  id: Invoke(System.String,System.Object[])
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: Invoke(String,Object[])
  nameWithType: SoapHttpClientProtocol.Invoke(String,Object[])
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String,Object[])
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "叫用 XML Web 服務方法使用 SOAP，以同步方式。"
  remarks: "一般而言，您不要叫用方法直接呼叫，除非您正在建置您自己的 XML Web service 的 proxy 類別。       由 XML Web service 的 Web 服務描述語言工具 (Wsdl.exe) 所產生的 proxy 類別會公開 XML Web service 方法，為開 proxy 類別的名稱。 Proxy 類別會呼叫叫用方法來叫用 XML Web 服務方法呼叫。 例如，如果 XML Web service 公開 （expose） 名為 XML Web 服務方法`Add`，proxy 類別也包含名為的方法`Add`。 中的程式碼`Add`方法中的 proxy 類別，同步呼叫透過 XML Web 服務方法叫用方法，然後結果會放入預期的傳回類型為`Add`。       `methodName`參數用來找出可能已經加入至方法，例如<xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>.</xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>的自訂屬性 <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>在衍生方法所需的 SOAP 通訊協定提供其他資訊。</xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>"
  example:
  - "The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service. Within the `Add` method of the proxy class, the Invoke method is calling the `Add` XML Web service method.  \n  \n [!code-cpp[Classic SoapHttpClientProtocol.Invoke Example#1](~/add/codesnippet/cpp/0fe8d4bc-686d-467a-8cdd-_1.cpp)]\n [!code-cs[Classic SoapHttpClientProtocol.Invoke Example#1](~/add/codesnippet/csharp/0fe8d4bc-686d-467a-8cdd-_1.cs)]\n [!code-vb[Classic SoapHttpClientProtocol.Invoke Example#1](~/add/codesnippet/visualbasic/0fe8d4bc-686d-467a-8cdd-_1.vb)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected object[] Invoke (string methodName, object[] parameters);
    parameters:
    - id: methodName
      type: System.String
      description: "XML Web 服務方法的名稱。"
    - id: parameters
      type: System.Object[]
      description: "物件的陣列，包含要傳遞至 XML Web 服務的參數。 陣列中值的順序對應於呼叫方法的衍生類別中的參數順序。"
    return:
      type: System.Object[]
      description: "物件的陣列，其中包含傳回的值以及任何<xref uid=&quot;langword_csharp_reference&quot; name=&quot;reference&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_out&quot; name=&quot;out&quot; href=&quot;&quot;></xref>衍生的類別方法的參數。"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke*
  exceptions:
  - type: System.Web.Services.Protocols.SoapException
    commentId: T:System.Web.Services.Protocols.SoapException
    description: "要求到達伺服器電腦，但並未成功處理。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "不是有效的物件的目前狀態的要求。"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "存取網路時發生錯誤。"
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)
  id: InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: InvokeAsync(String,Object[],SendOrPostCallback)
  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "以非同步方式叫用指定的方法。"
  syntax:
    content: protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback);
    parameters:
    - id: methodName
      type: System.String
      description: "要叫用方法的名稱。"
    - id: parameters
      type: System.Object[]
      description: "要傳遞至方法的參數。"
    - id: callback
      type: System.Threading.SendOrPostCallback
      description: "方法引動過程完成時呼叫的委派。"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  id: InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: InvokeAsync(String,Object[],SendOrPostCallback,Object)
  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "以非同步方式叫用指定的方法。"
  syntax:
    content: protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);
    parameters:
    - id: methodName
      type: System.String
      description: "要叫用方法的名稱。"
    - id: parameters
      type: System.Object[]
      description: "要傳遞至方法的參數。"
    - id: callback
      type: System.Threading.SendOrPostCallback
      description: "方法引動過程完成時呼叫的委派。"
    - id: userState
      type: System.Object
      description: "用來傳遞到的狀態資訊的物件`callback`委派。"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
  id: SoapVersion
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: SoapVersion
  nameWithType: SoapHttpClientProtocol.SoapVersion
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得或設定用來對 XML Web 服務的 SOAP 要求的 SOAP 通訊協定版本。"
  remarks: "以 Web 服務描述語言工具 (Wsdl.exe) 所產生的 proxy 類別中設定 SoapVersion 屬性<xref:System.Web.Services.Protocols.SoapProtocolVersion>依預設，當 XML Web 服務的 WSDL 文件支援 SOAP 1.1 版。</xref:System.Web.Services.Protocols.SoapProtocolVersion> 不過，當 XML Web 服務只支援 SOAP 1.2，Wsdl.exe 將 SoapVersion 屬性設為<xref:System.Web.Services.Protocols.SoapProtocolVersion>.</xref:System.Web.Services.Protocols.SoapProtocolVersion> 若要產生 proxy 類別，使用 Wsdl.exe 時，請選擇 SOAP 通訊協定版本，請使用`/protocol`參數搭配`SOAP`或`SOAP12`SoapVersion 屬性設定的設定<xref:System.Web.Services.Protocols.SoapProtocolVersion>和<xref:System.Web.Services.Protocols.SoapProtocolVersion>分別。</xref:System.Web.Services.Protocols.SoapProtocolVersion> </xref:System.Web.Services.Protocols.SoapProtocolVersion>"
  example:
  - "The following code example sets the version of the protocol used to communicate with an XML Web service to SOAP 1.2.  \n  \n [!code-cs[SoapHttpClientProtocol.SoapVersion#1](~/add/codesnippet/csharp/p-system.web.services.pr_20_1.aspx)]\n [!code-vb[SoapHttpClientProtocol.SoapVersion#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_20_1.aspx)]"
  syntax:
    content: public System.Web.Services.Protocols.SoapProtocolVersion SoapVersion { get; set; }
    return:
      type: System.Web.Services.Protocols.SoapProtocolVersion
      description: "其中一個<xref href=&quot;System.Web.Services.Protocols.SoapProtocolVersion&quot;></xref>值。 預設值是<xref href=&quot;System.Web.Services.Protocols.SoapProtocolVersion&quot;> </xref>。"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.Services.Protocols.HttpWebClientProtocol
  isExternal: false
  name: System.Web.Services.Protocols.HttpWebClientProtocol
- uid: System.Web.Services.Protocols.SoapException
  parent: System.Web.Services.Protocols
  isExternal: false
  name: SoapException
  nameWithType: SoapException
  fullName: System.Web.Services.Protocols.SoapException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.WebException
  isExternal: true
  name: System.Net.WebException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: SoapHttpClientProtocol()
  nameWithType: SoapHttpClientProtocol.SoapHttpClientProtocol()
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapHttpClientProtocol()
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: BeginInvoke(String,Object[],AsyncCallback,Object)
  nameWithType: SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: Discover()
  nameWithType: SoapHttpClientProtocol.Discover()
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover()
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: EndInvoke(IAsyncResult)
  nameWithType: SoapHttpClientProtocol.EndInvoke(IAsyncResult)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(IAsyncResult)
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetReaderForMessage(SoapClientMessage,Int32)
  nameWithType: SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Web.Services.Protocols.SoapClientMessage
  parent: System.Web.Services.Protocols
  isExternal: false
  name: SoapClientMessage
  nameWithType: SoapClientMessage
  fullName: System.Web.Services.Protocols.SoapClientMessage
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetWebRequest(Uri)
  nameWithType: SoapHttpClientProtocol.GetWebRequest(Uri)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(Uri)
- uid: System.Net.WebRequest
  parent: System.Net
  isExternal: true
  name: WebRequest
  nameWithType: WebRequest
  fullName: System.Net.WebRequest
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetWriterForMessage(SoapClientMessage,Int32)
  nameWithType: SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: Invoke(String,Object[])
  nameWithType: SoapHttpClientProtocol.Invoke(String,Object[])
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String,Object[])
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: InvokeAsync(String,Object[],SendOrPostCallback)
  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)
- uid: System.Threading.SendOrPostCallback
  parent: System.Threading
  isExternal: true
  name: SendOrPostCallback
  nameWithType: SendOrPostCallback
  fullName: System.Threading.SendOrPostCallback
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: InvokeAsync(String,Object[],SendOrPostCallback,Object)
  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: SoapVersion
  nameWithType: SoapHttpClientProtocol.SoapVersion
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
- uid: System.Web.Services.Protocols.SoapProtocolVersion
  parent: System.Web.Services.Protocols
  isExternal: false
  name: SoapProtocolVersion
  nameWithType: SoapProtocolVersion
  fullName: System.Web.Services.Protocols.SoapProtocolVersion
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: SoapHttpClientProtocol
  nameWithType: SoapHttpClientProtocol.SoapHttpClientProtocol
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: BeginInvoke
  nameWithType: SoapHttpClientProtocol.BeginInvoke
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: Discover
  nameWithType: SoapHttpClientProtocol.Discover
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: EndInvoke
  nameWithType: SoapHttpClientProtocol.EndInvoke
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetReaderForMessage
  nameWithType: SoapHttpClientProtocol.GetReaderForMessage
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetWebRequest
  nameWithType: SoapHttpClientProtocol.GetWebRequest
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetWriterForMessage
  nameWithType: SoapHttpClientProtocol.GetWriterForMessage
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: Invoke
  nameWithType: SoapHttpClientProtocol.Invoke
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: InvokeAsync
  nameWithType: SoapHttpClientProtocol.InvokeAsync
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: SoapVersion
  nameWithType: SoapHttpClientProtocol.SoapVersion
