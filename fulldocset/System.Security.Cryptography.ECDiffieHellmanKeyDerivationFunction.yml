### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
  id: ECDiffieHellmanKeyDerivationFunction
  children:
  - System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash
  - System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac
  - System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls
  langs:
  - csharp
  name: ECDiffieHellmanKeyDerivationFunction
  nameWithType: ECDiffieHellmanKeyDerivationFunction
  fullName: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
  type: Enum
  summary: "指定的金鑰衍生函式， <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;> </xref>類別將用來轉換金錀密碼協議。"
  remarks: "ECDiffieHellmanKeyDerivationFunction 列舉會定義將用來轉換成金鑰內容的原始密碼協議的演算法的類型。 密碼協議是從私用金鑰和其他合作對象的公開金鑰，做為金鑰交換的一部分產生的值。 它是所產生的金鑰內容的種子值<xref:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial%2A>方法。</xref:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial%2A>       <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A>屬性會使用這個列舉型別，以取得金鑰衍生函數<xref:System.Security.Cryptography.ECDiffieHellmanCng>類別。</xref:System.Security.Cryptography.ECDiffieHellmanCng> </xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A>"
  syntax:
    content: public enum ECDiffieHellmanKeyDerivationFunction
  inheritance:
  - System.Enum
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash
  id: Hash
  parent: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
  langs:
  - csharp
  name: Hash
  nameWithType: ECDiffieHellmanKeyDerivationFunction.Hash
  fullName: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash
  type: Field
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "雜湊演算法用來產生金鑰材料。 <xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm*>屬性會指定要使用之演算法的名稱。</xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm*> 如果未指定的演算法名稱， <xref href=&quot;System.Security.Cryptography.SHA256&quot;> </xref>做為預設的演算法。"
  remarks: "您也可以指定<xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>和<xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A>屬性，但它們不需要。</xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> </xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>       金鑰產生的資料量相當於指定的演算法的雜湊值的大小。"
  syntax:
    content: Hash
    return:
      type: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac
  id: Hmac
  parent: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
  langs:
  - csharp
  name: Hmac
  nameWithType: ECDiffieHellmanKeyDerivationFunction.Hmac
  fullName: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac
  type: Field
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "雜湊式訊息驗證碼 (HMAC) 演算法用來產生金鑰材料。 <> </> *> 屬性會指定要使用的金鑰。可能是這個屬性必須設定或<> *> 屬性必須設定為<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>，否則<xref href=&quot;System.Security.Cryptography.CryptographicException&quot;></xref>使用 Hmac 時就會擲回。 如果這兩個屬性已設定，密碼協議用做 HMAC 金鑰。"
  remarks: "您也可以指定<xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>和<xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A>屬性，但它們不需要。</xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> </xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>       金鑰產生的資料量相當於 HMAC 值的大小。"
  syntax:
    content: Hmac
    return:
      type: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls
  id: Tls
  parent: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
  langs:
  - csharp
  name: Tls
  nameWithType: ECDiffieHellmanKeyDerivationFunction.Tls
  fullName: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls
  type: Field
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "傳輸層安全性 (TLS) 通訊協定用來產生金鑰材料。 <> </> *> 和<> *> 屬性必須設定，否則<xref href=&quot;System.Security.Cryptography.CryptographicException&quot;></xref>使用 Tls 時，會擲回。"
  remarks: "這個值會產生 160 位元的金鑰內容。"
  syntax:
    content: Tls
    return:
      type: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Enum
  isExternal: false
  name: System.Enum
- uid: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash
  parent: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
  isExternal: false
  name: Hash
  nameWithType: ECDiffieHellmanKeyDerivationFunction.Hash
  fullName: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash
- uid: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellmanKeyDerivationFunction
  nameWithType: ECDiffieHellmanKeyDerivationFunction
  fullName: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
- uid: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac
  parent: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
  isExternal: false
  name: Hmac
  nameWithType: ECDiffieHellmanKeyDerivationFunction.Hmac
  fullName: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac
- uid: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls
  parent: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
  isExternal: false
  name: Tls
  nameWithType: ECDiffieHellmanKeyDerivationFunction.Tls
  fullName: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls
