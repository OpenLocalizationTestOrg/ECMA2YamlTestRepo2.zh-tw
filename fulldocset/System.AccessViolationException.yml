### YamlMime:ManagedReference
items:
- uid: System.AccessViolationException
  id: AccessViolationException
  children:
  - System.AccessViolationException.#ctor
  - System.AccessViolationException.#ctor(System.String)
  - System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.AccessViolationException.#ctor(System.String,System.Exception)
  langs:
  - csharp
  name: AccessViolationException
  nameWithType: AccessViolationException
  fullName: System.AccessViolationException
  type: Class
  summary: "嘗試讀取或寫入時擲回的例外狀況受保護的記憶體。"
  remarks: "An access violation occurs in unmanaged or unsafe code when the code attempts to read or write to memory that has not been allocated, or to which it does not have access. This usually occurs because a pointer has a bad value. Not all reads or writes through bad pointers lead to access violations, so an access violation usually indicates that several reads or writes have occurred through bad pointers, and that memory might be corrupted. Thus, access violations almost always indicate serious programming errors. An AccessViolationException clearly identifies these serious errors.  \n  \n In programs consisting entirely of verifiable managed code, all references are either valid or null, and access violations are impossible. Any operation that attempts to reference a null reference in verifiable code throws a <xref:System.NullReferenceException> exception. An AccessViolationException occurs only when verifiable managed code interacts with unmanaged code or with unsafe managed code.  \n  \n## Troubleshooting AccessViolationException exceptions  \n An AccessViolationException exception can occur only in unsafe managed code or when verifiable managed code interacts with unmanaged code:  \n  \n-   An access violation that occurs in unsafe managed code can be expressed as either a <xref:System.NullReferenceException> exception or an AccessViolationException exception, depending on the platform.  \n  \n-   An access violation in unmanaged code that bubbles up to managed code is always wrapped in an AccessViolationException exception.  \n  \n In either case, you can identify and correct the cause of the AccessViolationException exception as follows:  \n  \n Make sure that the memory that you are attempting to access has been allocated.  \n An AccessViolationException exception is always thrown by an attempt to access protected memory -- that is, to access memory that is not allocated or that is not owned by a process.  \n  \n Automatic memory management is one of the services that the common language runtime provides. If managed code provides the same functionality as your unmanagede code, you may wish to move to managed code to take advantage of this functionality. For more information, see [Automatic Memory Management](~/add/includes/ajax-current-ext-md.md).  \n  \n Make sure that the memory that you are attempting to access has not been corrupted.  \n If several read or write operations have occurred through bad pointers, memory may be corrupted. This typically occurs when reading or writing to addresses outside of a predefined buffer.  \n  \n## AccessViolationException and try/catch blocks  \n Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], AccessViolationException exceptions thrown by the common language runtime are not handled by the `catch` statement in a structured exception handler if the exception occurs outside of the memory reserved by the common language runtime. To handle such an AccessViolationException exception, you should apply the  <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> attribute to the method in which the exception is thrown. This change does not affect AccessViolationException exceptions thrown by user code, which can continue to be caught by a `catch` statement. For code written for previous versions of the .NET Framework that you want to recompile and run without modification on the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], you can add the [\\<legacyCorruptedStateExceptionsPolicy>](../Topic/%3ClegacyCorruptedStateExceptionsPolicy%3E%20Element.md) element to your app's configuration file. Note that you can also receive notification of the exceptions if you have defined a handler for the <xref:System.AppDomain.FirstChanceException?displayProperty=fullName> or <xref:System.AppDomain.UnhandledException?displayProperty=fullName> event.  \n  \n## Version Information  \n This exception is thrown in the .NET Framework 2.0 and later versions. In earlier versions of the .NET Framework, an access violation in unmanaged code or unsafe managed code is represented by a <xref:System.NullReferenceException> in managed code. A <xref:System.NullReferenceException> is also thrown when a null reference is dereferenced in verifiable managed code, an occurrence that does not involve data corruption, and there is no way to distinguish between the two situations in versions 1.0 or 1.1.  \n  \n Administrators can allow selected applications to revert to the behavior of the .NET Framework version 1.1. Place the following line in the [\\&lt;runtime\\&gt; Element](../Topic/%3Cruntime%3E%20Element.md) section of the configuration file for the application:  \n  \n```  \n<legacyNullReferenceExceptionPolicy enabled = \"1\"/>  \n```"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class AccessViolationException : SystemException
  inheritance:
  - System.Exception
  - System.SystemException
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.AccessViolationException.#ctor
  id: '#ctor'
  parent: System.AccessViolationException
  langs:
  - csharp
  name: AccessViolationException()
  nameWithType: AccessViolationException.AccessViolationException()
  fullName: System.AccessViolationException.AccessViolationException()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新執行個體<xref href=&quot;System.AccessViolationException&quot;></xref>以系統提供的訊息描述錯誤的類別。"
  remarks: "這個建構函式初始化<xref:System.Exception.Message%2A>屬性的新執行個體的系統提供的訊息描述錯誤，例如 「 嘗試讀取或寫入受保護的記憶體。</xref:System.Exception.Message%2A> 這是通常表示其他記憶體已損毀。 」 此訊息會考量目前系統文化特性。       下表顯示<xref:System.AccessViolationException>.</xref:System.AccessViolationException>的執行個體的初始屬性值      |屬性 |值 |  |--------------|-----------|  |<xref:System.Exception.InnerException%2A>|`null`.|  |<xref:System.Exception.Message%2A>|當地語系化的錯誤訊息字串。 |</xref:System.Exception.Message%2A> </xref:System.Exception.InnerException%2A>"
  syntax:
    content: public AccessViolationException ();
    parameters: []
  overload: System.AccessViolationException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.AccessViolationException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.AccessViolationException
  langs:
  - csharp
  name: AccessViolationException(String)
  nameWithType: AccessViolationException.AccessViolationException(String)
  fullName: System.AccessViolationException.AccessViolationException(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新執行個體<xref href=&quot;System.AccessViolationException&quot;></xref>具有指定的訊息描述錯誤的類別。"
  remarks: "下表顯示<xref:System.AccessViolationException>.</xref:System.AccessViolationException>的執行個體的初始屬性值      |屬性 |值 |  |--------------|-----------|  |<xref:System.Exception.InnerException%2A>|`null`.|  |<xref:System.Exception.Message%2A>|錯誤訊息字串中指定`message`。 |</xref:System.Exception.Message%2A> </xref:System.Exception.InnerException%2A>"
  syntax:
    content: public AccessViolationException (string message);
    parameters:
    - id: message
      type: System.String
      description: "描述例外狀況訊息。 這個建構函式的呼叫端，才能確保這個字串已經被當地語系化為目前的系統文化特性。"
  overload: System.AccessViolationException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.AccessViolationException
  langs:
  - csharp
  name: AccessViolationException(SerializationInfo,StreamingContext)
  nameWithType: AccessViolationException.AccessViolationException(SerializationInfo,StreamingContext)
  fullName: System.AccessViolationException.AccessViolationException(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新執行個體<xref href=&quot;System.AccessViolationException&quot;></xref>使用序列化資料的類別。"
  remarks: "重新建構所需的資料流上傳輸的例外狀況物件的還原序列化期間呼叫這個建構函式。 如需詳細資訊，請參閱[XML 和 SOAP 序列化](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected AccessViolationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>保存序列化的物件資料。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "<xref:System.Runtime.Serialization.StreamingContext>其中包含關於來源或目的端內容資訊。</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.AccessViolationException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.AccessViolationException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.AccessViolationException
  langs:
  - csharp
  name: AccessViolationException(String,Exception)
  nameWithType: AccessViolationException.AccessViolationException(String,Exception)
  fullName: System.AccessViolationException.AccessViolationException(String,Exception)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新執行個體<xref href=&quot;System.AccessViolationException&quot;></xref>類別指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考。"
  remarks: "做為前一個例外狀況直接結果應該包括在前一個例外狀況的參考就會擲回的例外狀況<xref:System.Exception.InnerException%2A>屬性。</xref:System.Exception.InnerException%2A> <xref:System.Exception.InnerException%2A>屬性會傳回相同的值傳遞到建構函式，或`null`如果<xref:System.Exception.InnerException%2A>屬性沒有提供內部例外值給建構函式。</xref:System.Exception.InnerException%2A> </xref:System.Exception.InnerException%2A>       下表顯示<xref:System.AccessViolationException>.</xref:System.AccessViolationException>的執行個體的初始屬性值      |屬性 |值 |  |--------------|-----------|  |<xref:System.Exception.InnerException%2A>|`null`.|  |<xref:System.Exception.Message%2A>|錯誤訊息字串中指定`message`。 |</xref:System.Exception.Message%2A> </xref:System.Exception.InnerException%2A>"
  syntax:
    content: public AccessViolationException (string message, Exception innerException);
    parameters:
    - id: message
      type: System.String
      description: "描述例外狀況訊息。 這個建構函式的呼叫端，才能確保這個字串已經被當地語系化為目前的系統文化特性。"
    - id: innerException
      type: System.Exception
      description: "造成目前例外狀況的例外狀況。 如果`innerException`參數不是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>中, 引發目前的例外狀況<xref uid=&quot;langword_csharp_catch&quot; name=&quot;catch&quot; href=&quot;&quot;></xref>處理內部例外狀況區塊。"
  overload: System.AccessViolationException.#ctor*
  exceptions: []
  platform:
  - net462
references:
- uid: System.SystemException
  isExternal: false
  name: System.SystemException
- uid: System.AccessViolationException.#ctor
  parent: System.AccessViolationException
  isExternal: false
  name: AccessViolationException()
  nameWithType: AccessViolationException.AccessViolationException()
  fullName: System.AccessViolationException.AccessViolationException()
- uid: System.AccessViolationException.#ctor(System.String)
  parent: System.AccessViolationException
  isExternal: false
  name: AccessViolationException(String)
  nameWithType: AccessViolationException.AccessViolationException(String)
  fullName: System.AccessViolationException.AccessViolationException(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.AccessViolationException
  isExternal: false
  name: AccessViolationException(SerializationInfo,StreamingContext)
  nameWithType: AccessViolationException.AccessViolationException(SerializationInfo,StreamingContext)
  fullName: System.AccessViolationException.AccessViolationException(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.AccessViolationException.#ctor(System.String,System.Exception)
  parent: System.AccessViolationException
  isExternal: false
  name: AccessViolationException(String,Exception)
  nameWithType: AccessViolationException.AccessViolationException(String,Exception)
  fullName: System.AccessViolationException.AccessViolationException(String,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.AccessViolationException.#ctor*
  parent: System.AccessViolationException
  isExternal: false
  name: AccessViolationException
  nameWithType: AccessViolationException.AccessViolationException
