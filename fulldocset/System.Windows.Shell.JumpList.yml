### YamlMime:ManagedReference
items:
- uid: System.Windows.Shell.JumpList
  id: JumpList
  children:
  - System.Windows.Shell.JumpList.#ctor
  - System.Windows.Shell.JumpList.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Shell.JumpItem},System.Boolean,System.Boolean)
  - System.Windows.Shell.JumpList.AddToRecentCategory(System.String)
  - System.Windows.Shell.JumpList.AddToRecentCategory(System.Windows.Shell.JumpPath)
  - System.Windows.Shell.JumpList.AddToRecentCategory(System.Windows.Shell.JumpTask)
  - System.Windows.Shell.JumpList.Apply
  - System.Windows.Shell.JumpList.BeginInit
  - System.Windows.Shell.JumpList.EndInit
  - System.Windows.Shell.JumpList.GetJumpList(System.Windows.Application)
  - System.Windows.Shell.JumpList.JumpItems
  - System.Windows.Shell.JumpList.JumpItemsRejected
  - System.Windows.Shell.JumpList.JumpItemsRemovedByUser
  - System.Windows.Shell.JumpList.SetJumpList(System.Windows.Application,System.Windows.Shell.JumpList)
  - System.Windows.Shell.JumpList.ShowFrequentCategory
  - System.Windows.Shell.JumpList.ShowRecentCategory
  langs:
  - csharp
  name: JumpList
  nameWithType: JumpList
  fullName: System.Windows.Shell.JumpList
  type: Class
  summary: "代表清單項目和工作上顯示為功能表[!INCLUDE[win7](~/add/includes/win7-md.md)]工作列按鈕。"
  remarks: "[!INCLUDE[win7](~/add/includes/win7-md.md)]工作列可提供直接從工作列按鈕啟動程式，使用跳躍清單的增強的功能。 中也會使用跳躍清單[!INCLUDE[win7](~/add/includes/win7-md.md)]開始 功能表。 以滑鼠右鍵按一下工作列按鈕，或按一下 [開始] 功能表中的程式旁的箭號，您可以存取跳躍清單。 如需跳躍清單的詳細資訊，請參閱[工作列](http://go.microsoft.com/fwlink/?LinkId=178478)的 Windows 使用者經驗互動指導方針 > 一節。       JumpList 類別提供 managed 包裝函式中的跳躍清單功能[!INCLUDE[win7](~/add/includes/win7-md.md)]工作列及管理資料傳遞至[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]殼層。 JumpList 類別所公開的功能不適用於新版[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]早於[!INCLUDE[win7](~/add/includes/win7-md.md)]。 使用過 JumpList 類別的應用程式會執行在其他版本的[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]，但是無法使用跳躍清單。 如需有關 Windows shell 和原生跳清單 Api 的詳細資訊，請參閱[工作列延伸](http://go.microsoft.com/fwlink/?LinkId=178479)。       下圖顯示跳躍清單適用於 Windows Media Player 中的項目**工作**和**經常**類別。       ![Windows Media Player 跳躍清單](~/add/media/wpfshell-jumplist.png &quot;Windows Media Player 跳躍清單&quot;)Windows Media Player 跳躍清單 # # 設定跳躍清單跳躍清單可以包含兩種類型的項目，<xref:System.Windows.Shell.JumpTask>和<xref:System.Windows.Shell.JumpPath>。</xref:System.Windows.Shell.JumpPath> </xref:System.Windows.Shell.JumpTask> A<xref:System.Windows.Shell.JumpTask>是程式的連結和<xref:System.Windows.Shell.JumpPath>是檔案的連結。</xref:System.Windows.Shell.JumpPath> </xref:System.Windows.Shell.JumpTask> 您可以建立，以視覺化方式分隔跳躍清單中的項目<xref:System.Windows.Shell.JumpTask>沒有<xref:System.Windows.Shell.JumpTask.Title%2A>和<xref:System.Windows.Shell.JumpItem.CustomCategory%2A>指定。</xref:System.Windows.Shell.JumpItem.CustomCategory%2A> </xref:System.Windows.Shell.JumpTask.Title%2A> </xref:System.Windows.Shell.JumpTask> 這個空白<xref:System.Windows.Shell.JumpTask>將會顯示為水平線跳躍清單中。</xref:System.Windows.Shell.JumpTask>      > [!NOTE] > 中指定之檔案的類型如果<xref:System.Windows.Shell.JumpPath>未向您的應用程式中，檔案不會出現在跳躍清單。</xref:System.Windows.Shell.JumpPath> 例如，如果您加入<xref:System.Windows.Shell.JumpPath>，它會指向.txt 檔案，必須註冊您的應用程式，以處理.txt 檔案。</xref:System.Windows.Shell.JumpPath> 如需詳細資訊，請參閱[簡介檔案關聯](http://go.microsoft.com/fwlink/?LinkId=178480)。       跳躍項目會放入 JumpList 中的類別。 根據預設，<xref:System.Windows.Shell.JumpItem>會顯示在**工作**類別目錄。</xref:System.Windows.Shell.JumpItem> 或者，您可以指定<xref:System.Windows.Shell.JumpItem.CustomCategory%2A><xref:System.Windows.Shell.JumpItem>。</xref:System.Windows.Shell.JumpItem> </xref:System.Windows.Shell.JumpItem.CustomCategory%2A>       您可以指定是否標準**最近**和**經常**類別藉由設定時，會在過 JumpList<xref:System.Windows.Shell.JumpList.ShowRecentCategory%2A>和<xref:System.Windows.Shell.JumpList.ShowFrequentCategory%2A>屬性。</xref:System.Windows.Shell.JumpList.ShowFrequentCategory%2A> </xref:System.Windows.Shell.JumpList.ShowRecentCategory%2A> 這些類別的內容由[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]殼層。 因為這些類別可能包含許多相同的資料，您通常顯示其中一個您 JumpList 但非兩者。 [!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]如果是透過通用檔案對話方塊中開啟或用來開啟應用程式，透過檔案類型關聯，會自動管理最近的項目。 透過跳躍清單存取項目時，您可以通知[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]介面，以便將項目加入**最近**藉由呼叫類別<xref:System.Windows.Shell.JumpList.AddToRecentCategory%2A>方法。</xref:System.Windows.Shell.JumpList.AddToRecentCategory%2A>      ## 將跳躍清單套用至 Windows Shell 您無法直接存取的殼層跳躍清單或其內容讀入 JumpList 類別。 相反地，JumpList 類別提供跳躍清單，您可以使用，並接著將套用至的表示法[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]殼層。 通常您會建立過 JumpList，並將它設定為應用程式第一次執行一次。 不過，您可以修改，或在執行階段取代 JumpList。       當您已經設定過 JumpList 屬性時，您必須套用 JumpList Windows shell 之前其內容會出現在工作列跳躍清單。 這作業時自動完成 JumpList 第一次連接至應用程式，在 XAML 中或在呼叫<xref:System.Windows.Shell.JumpList.SetJumpList%2A>方法。</xref:System.Windows.Shell.JumpList.SetJumpList%2A> 如果您在執行階段修改過 JumpList 的內容，您必須呼叫<xref:System.Windows.Shell.JumpList.Apply%2A>方法，以其目前的內容套用至 Windows shell。</xref:System.Windows.Shell.JumpList.Apply%2A>      ## 在 XAML A JumpList 中設定跳躍清單不會自動附加至<xref:System.Windows.Application>物件。</xref:System.Windows.Application> 附加至 JumpList<xref:System.Windows.Application>物件在 XAML 中使用的附加的屬性的語法。</xref:System.Windows.Application> JumpList 類別會實作<xref:System.ComponentModel.ISupportInitialize>介面來支援 XAML 宣告過 JumpList。</xref:System.ComponentModel.ISupportInitialize> 如果是在 XAML 中宣告過 JumpList，並附加至目前<xref:System.Windows.Application>，自動套用到[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]殼層 JumpList 初始化時。</xref:System.Windows.Application>      ## 設定及修改跳躍清單與您的程式碼中附加至 JumpList<xref:System.Windows.Application>藉由呼叫靜態程式碼中的物件<xref:System.Windows.Shell.JumpList.SetJumpList%2A>方法。</xref:System.Windows.Shell.JumpList.SetJumpList%2A> </xref:System.Windows.Application> 這也適用於以 JumpList[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]殼層。       若要在執行階段修改過 JumpList，您可以呼叫<xref:System.Windows.Shell.JumpList.GetJumpList%2A>方法來取得目前附加至<xref:System.Windows.Application>。</xref:System.Windows.Application> JumpList</xref:System.Windows.Shell.JumpList.GetJumpList%2A> 您已修改過 JumpList 屬性之後，您必須呼叫<xref:System.Windows.Shell.JumpList.Apply%2A>方法，以將變更套用至 Windows shell。</xref:System.Windows.Shell.JumpList.Apply%2A>      > [!NOTE] >，通常會建立一個附加至的 JumpList<xref:System.Windows.Application>並套用至[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]殼層。</xref:System.Windows.Application> 不過，您可以建立多個 JumpList 物件。 一次只能有一個 JumpList 可以套用至[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]殼層，而且只有一個 JumpList 一次可以與<xref:System.Windows.Application>.</xref:System.Windows.Application>產生關聯 .NET Framework 不需要這些是相同的 JumpList。      > [!NOTE] > 這個類別包含在類別層級套用至所有成員的連結要求。 A<xref:System.Security.SecurityException>立即呼叫端沒有完全信任權限時，會擲回。</xref:System.Security.SecurityException> 如需安全性需求的詳細資訊，請參閱[連結要求](~/add/includes/ajax-current-ext-md.md)和[繼承要求](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9)。"
  example:
  - "The following example shows an application with a Jump List. The application has three buttons that enable you to add a task to the current Jump List, clear the contents of the Jump List, and apply a new Jump List to the application.  \n  \n The following example shows how to declare a JumpList in markup. The JumpList contains two <xref:System.Windows.Shell.JumpTask> links and one <xref:System.Windows.Shell.JumpPath>. Applying the <xref:System.Windows.Shell.JumpPath> to the shell will fail if the application is not registered to handle the .txt file name extension.  \n  \n [!code-xml[Shell_JumpListSample#000](~/add/codesnippet/xaml/jumplistsample/app.xaml#000)]  \n  \n The following example shows the code-behind page for `App.xaml`. This code handles the <xref:System.Windows.Shell.JumpList.JumpItemsRejected> and <xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser> events.  \n  \n [!code-cs[Shell_JumpListSample#100](~/add/codesnippet/csharp/jumplistsample/app.xaml.cs#100)]  \n  \n The following example shows the markup used to create the application user interface.  \n  \n [!code-xml[Shell_JumpListSample#300](~/add/codesnippet/xaml/jumplistsample/mainwindow.xaml#300)]  \n  \n The following example shows the code-behind page for `MainWindow.xaml`. This code demonstrates how to modify, clear, and create a JumpList in procedural code. For the new Jump List, the static <xref:System.Windows.Shell.JumpList.SetJumpList%2A> method is called to associate the JumpList with the current application and apply the JumpList to the Windows shell.  \n  \n [!code-cs[Shell_JumpListSample#200](~/add/codesnippet/csharp/jumplistsample/mainwindow.xaml.cs#200)]"
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      [System.Windows.Markup.ContentProperty("JumpItems")]

      public sealed class JumpList : System.ComponentModel.ISupportInitialize
  inheritance:
  - System.Object
  implements:
  - System.ComponentModel.ISupportInitialize
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.#ctor
  id: '#ctor'
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: JumpList()
  nameWithType: JumpList.JumpList()
  fullName: System.Windows.Shell.JumpList.JumpList()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.Shell.JumpList&quot;></xref>類別。"
  syntax:
    content: public JumpList ();
    parameters: []
  overload: System.Windows.Shell.JumpList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Shell.JumpItem},System.Boolean,System.Boolean)
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Windows.Shell.JumpItem},System.Boolean,System.Boolean)'
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: JumpList(IEnumerable<JumpItem>,Boolean,Boolean)
  nameWithType: JumpList.JumpList(IEnumerable<JumpItem>,Boolean,Boolean)
  fullName: System.Windows.Shell.JumpList.JumpList(IEnumerable<JumpItem>,Boolean,Boolean)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.Shell.JumpList&quot;></xref>類別，以指定的參數。"
  remarks: "**最近**和**經常**類別通常有許多相同的跳躍項目。 如此一來，應用程式通常會顯示這兩**最近**或**經常**跳躍清單，但非兩者的類別。"
  syntax:
    content: public JumpList (System.Collections.Generic.IEnumerable<System.Windows.Shell.JumpItem> items, bool showFrequent, bool showRecent);
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{System.Windows.Shell.JumpItem}
      description: "集合<xref href=&quot;System.Windows.Shell.JumpItem&quot;></xref>跳躍清單中顯示的物件。"
    - id: showFrequent
      type: System.Boolean
      description: "值，指出是否經常使用的項目會顯示在跳躍清單。"
    - id: showRecent
      type: System.Boolean
      description: "值，指出是否在跳躍清單顯示最近使用的項目。"
  overload: System.Windows.Shell.JumpList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.AddToRecentCategory(System.String)
  id: AddToRecentCategory(System.String)
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: AddToRecentCategory(String)
  nameWithType: JumpList.AddToRecentCategory(String)
  fullName: System.Windows.Shell.JumpList.AddToRecentCategory(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "將指定的項目路徑**最近**跳躍清單的類別。"
  remarks: "內容**最近**類別由 Windows shell。 若要顯示最近使用過的項目跳躍清單中，設定<xref:System.Windows.Shell.JumpList.ShowRecentCategory%2A>屬性`true`。</xref:System.Windows.Shell.JumpList.ShowRecentCategory%2A>       您可以呼叫來要求 Windows shell 中新增的項目路徑 AddToRecentCategory 方法**最近**項目清單。 如果您的應用程式尚未註冊來處理檔案類型的項目，它不會出現在**最近**清單和 AddToRecentCategory 的呼叫將會以無訊息模式失敗。"
  syntax:
    content: public static void AddToRecentCategory (string itemPath);
    parameters:
    - id: itemPath
      type: System.String
      description: "要加入的跳躍清單的路徑。"
  overload: System.Windows.Shell.JumpList.AddToRecentCategory*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.AddToRecentCategory(System.Windows.Shell.JumpPath)
  id: AddToRecentCategory(System.Windows.Shell.JumpPath)
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: AddToRecentCategory(JumpPath)
  nameWithType: JumpList.AddToRecentCategory(JumpPath)
  fullName: System.Windows.Shell.JumpList.AddToRecentCategory(JumpPath)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "將指定的跳躍路徑**最近**跳躍清單的類別。"
  remarks: "內容**最近**類別由 Windows shell。 若要顯示最近使用過的項目跳躍清單中，設定<xref:System.Windows.Shell.JumpList.ShowRecentCategory%2A>屬性`true`。</xref:System.Windows.Shell.JumpList.ShowRecentCategory%2A>       您可以呼叫來要求 Windows shell 加入指定的跳躍路徑 AddToRecentCategory 方法**最近**項目清單。 如果您的應用程式尚未註冊來處理檔案類型的項目，它不會出現在**最近**清單和 AddToRecentCategory 的呼叫將會以無訊息模式失敗。"
  syntax:
    content: public static void AddToRecentCategory (System.Windows.Shell.JumpPath jumpPath);
    parameters:
    - id: jumpPath
      type: System.Windows.Shell.JumpPath
      description: "<xref href=&quot;System.Windows.Shell.JumpPath&quot;> </xref>加入跳躍清單。"
  overload: System.Windows.Shell.JumpList.AddToRecentCategory*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.AddToRecentCategory(System.Windows.Shell.JumpTask)
  id: AddToRecentCategory(System.Windows.Shell.JumpTask)
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: AddToRecentCategory(JumpTask)
  nameWithType: JumpList.AddToRecentCategory(JumpTask)
  fullName: System.Windows.Shell.JumpList.AddToRecentCategory(JumpTask)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "將指定的跳躍工作**最近**跳躍清單的類別。"
  remarks: "內容**最近**類別由 Windows shell。 若要顯示最近使用過的項目跳躍清單中，設定<xref:System.Windows.Shell.JumpList.ShowRecentCategory%2A>屬性`true`。</xref:System.Windows.Shell.JumpList.ShowRecentCategory%2A>       您可以呼叫來要求 Windows shell 新增指定的跳躍任務 AddToRecentCategory 方法**最近**項目清單。"
  syntax:
    content: public static void AddToRecentCategory (System.Windows.Shell.JumpTask jumpTask);
    parameters:
    - id: jumpTask
      type: System.Windows.Shell.JumpTask
      description: "<xref href=&quot;System.Windows.Shell.JumpTask&quot;> </xref>加入跳躍清單。"
  overload: System.Windows.Shell.JumpList.AddToRecentCategory*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.Apply
  id: Apply
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: Apply()
  nameWithType: JumpList.Apply()
  fullName: System.Windows.Shell.JumpList.Apply()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "傳送<xref href=&quot;System.Windows.Shell.JumpList&quot;> </xref> Windows 殼層處於目前狀態。"
  remarks: "Apply 方法傳送的內容<xref:System.Windows.Shell.JumpList>Windows 殼層處於目前狀態。</xref:System.Windows.Shell.JumpList> 此呼叫完成之後，<xref:System.Windows.Shell.JumpList.JumpItems%2A>屬性修改為包含 Windows shell 已成功新增至其工作列跳躍清單的項目。</xref:System.Windows.Shell.JumpList.JumpItems%2A> 您可以透過事件處理常式存取移除的項目清單<xref:System.Windows.Shell.JumpList.JumpItemsRejected>和<xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser>事件。</xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser> </xref:System.Windows.Shell.JumpList.JumpItemsRejected>"
  example:
  - "The following example shows how to get the current <xref:System.Windows.Shell.JumpList> and clear the contents of the <xref:System.Windows.Shell.JumpList.JumpItems%2A> collection. The Apply method is then called to apply the <xref:System.Windows.Shell.JumpList> changes to the Windows shell. This example is part of a larger example available in the <xref:System.Windows.Shell.JumpList> class overview.  \n  \n [!code-cs[Shell_JumpListSample#230](~/add/codesnippet/csharp/jumplistsample/mainwindow.xaml.cs#230)]"
  syntax:
    content: public void Apply ();
    parameters: []
  overload: System.Windows.Shell.JumpList.Apply*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Windows.Shell.JumpList&quot;> </xref>未完全初始化。"
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.BeginInit
  id: BeginInit
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: BeginInit()
  nameWithType: JumpList.BeginInit()
  fullName: System.Windows.Shell.JumpList.BeginInit()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "表示的開始<xref href=&quot;System.Windows.Shell.JumpList&quot;></xref>初始化。"
  remarks: "<xref:System.Windows.Shell.JumpList>類別會實作<xref:System.ComponentModel.ISupportInitialize>介面，以支援<xref:System.Windows.Shell.JumpList>.</xref:System.Windows.Shell.JumpList> XAML 宣告</xref:System.ComponentModel.ISupportInitialize></xref:System.Windows.Shell.JumpList> BeginInit 方法只會呼叫時<xref:System.Windows.Shell.JumpList>是在 XAML 中宣告，並附加至<xref:System.Windows.Application>使用附加的屬性語法。</xref:System.Windows.Application> </xref:System.Windows.Shell.JumpList> 沒有從您的程式碼呼叫此方法。"
  syntax:
    content: public void BeginInit ();
    parameters: []
  overload: System.Windows.Shell.JumpList.BeginInit*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在先前呼叫 BeginInit 巢狀 BeginInit 呼叫。"
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.EndInit
  id: EndInit
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: EndInit()
  nameWithType: JumpList.EndInit()
  fullName: System.Windows.Shell.JumpList.EndInit()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "表示的結束<xref href=&quot;System.Windows.Shell.JumpList&quot;></xref>初始化。"
  remarks: "<xref:System.Windows.Shell.JumpList>類別會實作<xref:System.ComponentModel.ISupportInitialize>介面，以支援<xref:System.Windows.Shell.JumpList>.</xref:System.Windows.Shell.JumpList> XAML 宣告</xref:System.ComponentModel.ISupportInitialize></xref:System.Windows.Shell.JumpList> EndInit 方法只會呼叫時<xref:System.Windows.Shell.JumpList>是在 XAML 中宣告，並附加至<xref:System.Windows.Application>使用附加的屬性語法。</xref:System.Windows.Application> </xref:System.Windows.Shell.JumpList> 沒有從您的程式碼呼叫此方法。       EndInit 方法具有相同的效果<xref:System.Windows.Shell.JumpList.Apply%2A>方法。</xref:System.Windows.Shell.JumpList.Apply%2A> EndInit 傳送的內容<xref:System.Windows.Shell.JumpList>Windows 殼層處於目前狀態。</xref:System.Windows.Shell.JumpList> 此呼叫完成之後，<xref:System.Windows.Shell.JumpList.JumpItems%2A>屬性修改為包含 Windows shell 成功新增至其跳躍清單的項目。</xref:System.Windows.Shell.JumpList.JumpItems%2A> 您可以透過事件處理常式存取移除的項目清單<xref:System.Windows.Shell.JumpList.JumpItemsRejected>和<xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser>事件。</xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser> </xref:System.Windows.Shell.JumpList.JumpItemsRejected>"
  syntax:
    content: public void EndInit ();
    parameters: []
  overload: System.Windows.Shell.JumpList.EndInit*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "此呼叫 EndInit 不搭配<xref:System.Windows.Shell.JumpList.BeginInit*>.</xref:System.Windows.Shell.JumpList.BeginInit*>呼叫"
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.GetJumpList(System.Windows.Application)
  id: GetJumpList(System.Windows.Application)
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: GetJumpList(Application)
  nameWithType: JumpList.GetJumpList(Application)
  fullName: System.Windows.Shell.JumpList.GetJumpList(Application)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "傳回<xref href=&quot;System.Windows.Shell.JumpList&quot;></xref>應用程式相關聯的物件。"
  remarks: "您可以呼叫以取得<xref:System.Windows.Shell.JumpList>目前<xref:System.Windows.Application>.</xref:System.Windows.Application>與相關聯</xref:System.Windows.Shell.JumpList>的 GetJumpList 方法 .NET Framework 不需要，這是<xref:System.Windows.Shell.JumpList>目前套用至 Windows shell。</xref:System.Windows.Shell.JumpList>"
  example:
  - "The following example shows how to get the <xref:System.Windows.Shell.JumpList> associated with the current application. A <xref:System.Windows.Shell.JumpTask> is added to the <xref:System.Windows.Shell.JumpList.JumpItems%2A> collection and added to the **Recent** category. The <xref:System.Windows.Shell.JumpList.Apply%2A> method is called to apply the updated <xref:System.Windows.Shell.JumpList> to the Windows shell. This example is part of a larger example available in the <xref:System.Windows.Shell.JumpList> class overview.  \n  \n [!code-cs[Shell_JumpListSample#240](~/add/codesnippet/csharp/jumplistsample/mainwindow.xaml.cs#240)]"
  syntax:
    content: public static System.Windows.Shell.JumpList GetJumpList (System.Windows.Application application);
    parameters:
    - id: application
      type: System.Windows.Application
      description: "應用程式相關聯<xref href=&quot;System.Windows.Shell.JumpList&quot;> </xref>。"
    return:
      type: System.Windows.Shell.JumpList
      description: "<xref href=&quot;System.Windows.Shell.JumpList&quot;> </xref>與指定的應用程式相關聯的物件。"
  overload: System.Windows.Shell.JumpList.GetJumpList*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.JumpItems
  id: JumpItems
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: JumpItems
  nameWithType: JumpList.JumpItems
  fullName: System.Windows.Shell.JumpList.JumpItems
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "取得集合<xref href=&quot;System.Windows.Shell.JumpItem&quot;></xref>跳躍清單中顯示的物件。"
  remarks: "跳躍清單可以包含兩種類型的項目，<xref:System.Windows.Shell.JumpTask>和<xref:System.Windows.Shell.JumpPath>。</xref:System.Windows.Shell.JumpPath> </xref:System.Windows.Shell.JumpTask> A<xref:System.Windows.Shell.JumpTask>是程式的連結和<xref:System.Windows.Shell.JumpPath>是檔案的連結。</xref:System.Windows.Shell.JumpPath> </xref:System.Windows.Shell.JumpTask>       當<xref:System.Windows.Shell.JumpList>會建立 JumpItems 集合是空的。</xref:System.Windows.Shell.JumpList> 您可以新增任何<xref:System.Windows.Shell.JumpTask>或<xref:System.Windows.Shell.JumpPath>物件加入集合。</xref:System.Windows.Shell.JumpPath> </xref:System.Windows.Shell.JumpTask> 集合只會包含已加入您的程式項目。 之後<xref:System.Windows.Shell.JumpList>具有已成功呼叫傳遞至 Windows shell<xref:System.Windows.Shell.JumpList.EndInit%2A>或<xref:System.Windows.Shell.JumpList.Apply%2A>方法的 JumpItems 集合會包含已成功新增至工作列跳躍清單的項目。</xref:System.Windows.Shell.JumpList.Apply%2A> </xref:System.Windows.Shell.JumpList.EndInit%2A> </xref:System.Windows.Shell.JumpList> 未成功加入的項目會從 JumpItems 集合中移除。 您可以透過事件處理常式存取移除的項目清單<xref:System.Windows.Shell.JumpList.JumpItemsRejected>和<xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser>事件。</xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser> </xref:System.Windows.Shell.JumpList.JumpItemsRejected>"
  example:
  - "The following example shows how to get the current <xref:System.Windows.Shell.JumpList> and clear the contents of the JumpItems collection. The <xref:System.Windows.Shell.JumpList.Apply%2A> method is then called to apply the <xref:System.Windows.Shell.JumpList> changes to the Windows shell. This example is part of a larger example available in the <xref:System.Windows.Shell.JumpList> class overview.  \n  \n [!code-cs[Shell_JumpListSample#230](~/add/codesnippet/csharp/jumplistsample/mainwindow.xaml.cs#230)]"
  syntax:
    content: public System.Collections.Generic.List<System.Windows.Shell.JumpItem> JumpItems { get; }
    return:
      type: System.Collections.Generic.List{System.Windows.Shell.JumpItem}
      description: "集合<xref href=&quot;System.Windows.Shell.JumpItem&quot;></xref>跳躍清單中顯示的物件。 預設為空集合。"
  overload: System.Windows.Shell.JumpList.JumpItems*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.JumpItemsRejected
  id: JumpItemsRejected
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: JumpItemsRejected
  nameWithType: JumpList.JumpItemsRejected
  fullName: System.Windows.Shell.JumpList.JumpItemsRejected
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "發生於跳躍項目不會成功地新增到跳躍清單 Windows shell。"
  remarks: "內容之後<xref:System.Windows.Shell.JumpList>會套用至 Windows shell，<xref:System.Windows.Shell.JumpList.JumpItems%2A>屬性修改為包含 Windows shell 成功新增至其跳躍清單的項目。</xref:System.Windows.Shell.JumpList.JumpItems%2A> </xref:System.Windows.Shell.JumpList> 您可以透過事件處理常式存取移除的項目清單中，針對 JumpItemsRejected 和<xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser>事件。</xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser>"
  example:
  - "The following example shows how to handle the JumpItemsRejected event to display the rejected items in a message box. This example is part of a larger example available in the <xref:System.Windows.Shell.JumpList> class overview.  \n  \n [!code-cs[Shell_JumpListSample#110](~/add/codesnippet/csharp/jumplistsample/app.xaml.cs#110)]"
  syntax:
    content: public event EventHandler<System.Windows.Shell.JumpItemsRejectedEventArgs> JumpItemsRejected;
    return:
      type: System.EventHandler{System.Windows.Shell.JumpItemsRejectedEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.JumpItemsRemovedByUser
  id: JumpItemsRemovedByUser
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: JumpItemsRemovedByUser
  nameWithType: JumpList.JumpItemsRemovedByUser
  fullName: System.Windows.Shell.JumpList.JumpItemsRemovedByUser
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "發生於使用者從清單移除先前跳躍跳躍清單項目。"
  remarks: "內容之後<xref:System.Windows.Shell.JumpList>會套用至 Windows shell，<xref:System.Windows.Shell.JumpList.JumpItems%2A>屬性修改為包含 Windows shell 成功新增至其跳躍清單的項目。</xref:System.Windows.Shell.JumpList.JumpItems%2A> </xref:System.Windows.Shell.JumpList> 您可以透過事件處理常式存取移除的項目清單<xref:System.Windows.Shell.JumpList.JumpItemsRejected>和 JumpItemsRemovedByUser 事件。</xref:System.Windows.Shell.JumpList.JumpItemsRejected>"
  example:
  - "The following example shows how to handle the JumpItemsRemovedByUser event to display the rejected items in a message box. This example is part of a larger example available in the <xref:System.Windows.Shell.JumpList> class overview.  \n  \n [!code-cs[Shell_JumpListSample#120](~/add/codesnippet/csharp/jumplistsample/app.xaml.cs#120)]"
  syntax:
    content: public event EventHandler<System.Windows.Shell.JumpItemsRemovedEventArgs> JumpItemsRemovedByUser;
    return:
      type: System.EventHandler{System.Windows.Shell.JumpItemsRemovedEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.SetJumpList(System.Windows.Application,System.Windows.Shell.JumpList)
  id: SetJumpList(System.Windows.Application,System.Windows.Shell.JumpList)
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: SetJumpList(Application,JumpList)
  nameWithType: JumpList.SetJumpList(Application,JumpList)
  fullName: System.Windows.Shell.JumpList.SetJumpList(Application,JumpList)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "設定<xref href=&quot;System.Windows.Shell.JumpList&quot;></xref>應用程式相關聯的物件。"
  remarks: "您可以建立多個<xref:System.Windows.Shell.JumpList>物件。</xref:System.Windows.Shell.JumpList> 不過，只有一個<xref:System.Windows.Shell.JumpList>可以關聯<xref:System.Windows.Application>.</xref:System.Windows.Application>一次</xref:System.Windows.Shell.JumpList> 呼叫 SetJumpList 方法來設定<xref:System.Windows.Shell.JumpList>目前<xref:System.Windows.Application>.</xref:System.Windows.Application>與相關聯</xref:System.Windows.Shell.JumpList>的"
  example:
  - "The following example shows how to create a <xref:System.Windows.Shell.JumpList> in code. The static SetJumpList method is called to associate the <xref:System.Windows.Shell.JumpList> with the current application. The <xref:System.Windows.Shell.JumpList> is automatically applied to the Windows shell when it is set. This example is part of a larger example available in the <xref:System.Windows.Shell.JumpList> class overview.  \n  \n [!code-cs[Shell_JumpListSample#210](~/add/codesnippet/csharp/jumplistsample/mainwindow.xaml.cs#210)]"
  syntax:
    content: public static void SetJumpList (System.Windows.Application application, System.Windows.Shell.JumpList value);
    parameters:
    - id: application
      type: System.Windows.Application
      description: "應用程式相關聯<xref href=&quot;System.Windows.Shell.JumpList&quot;> </xref>。"
    - id: value
      type: System.Windows.Shell.JumpList
      description: "<xref href=&quot;System.Windows.Shell.JumpList&quot;> </xref>要與應用程式產生關聯。"
  overload: System.Windows.Shell.JumpList.SetJumpList*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.ShowFrequentCategory
  id: ShowFrequentCategory
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: ShowFrequentCategory
  nameWithType: JumpList.ShowFrequentCategory
  fullName: System.Windows.Shell.JumpList.ShowFrequentCategory
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "取得或設定值，指出是否經常使用的項目會顯示在跳躍清單。"
  remarks: "內容**經常**類別由 Windows shell。 若要在跳躍清單顯示常用的項目，將 ShowFrequentCategory 屬性設定為`true`。       **最近**和**經常**類別通常有許多相同的跳躍項目。 如此一來，應用程式通常會顯示這兩**最近**或**經常**跳躍清單，但非兩者的類別。"
  example:
  - "The following example shows a <xref:System.Windows.Shell.JumpList> configured to show the **Frequent** category. This example is part of a larger example available in the <xref:System.Windows.Shell.JumpList> class overview.  \n  \n [!code-xml[Shell_JumpListSample#001](~/add/codesnippet/xaml/jumplistsample/app.xaml#001)]"
  syntax:
    content: public bool ShowFrequentCategory { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果經常使用的項目會顯示在跳躍清單中。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Shell.JumpList.ShowFrequentCategory*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.ShowRecentCategory
  id: ShowRecentCategory
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: ShowRecentCategory
  nameWithType: JumpList.ShowRecentCategory
  fullName: System.Windows.Shell.JumpList.ShowRecentCategory
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "取得或設定值，指出是否在跳躍清單顯示最近使用的項目。"
  remarks: "內容**最近**類別由 Windows shell。 若要在跳躍清單顯示常用的項目，將 ShowRecentCategory 屬性設定為`true`。       **最近**和**經常**類別通常有許多相同的跳躍項目。 如此一來，應用程式通常會顯示這兩**最近**或**經常**跳躍清單，但非兩者的類別。       您可以呼叫<xref:System.Windows.Shell.JumpList.AddToRecentCategory%2A>方法來要求 Windows shell 將項目加入**最近**項目清單。</xref:System.Windows.Shell.JumpList.AddToRecentCategory%2A> 如果您的應用程式尚未註冊來處理檔案名稱的項目類型，它不會出現在**最近**清單和呼叫<xref:System.Windows.Shell.JumpList.AddToRecentCategory%2A>將會以無訊息模式失敗。</xref:System.Windows.Shell.JumpList.AddToRecentCategory%2A>"
  example:
  - "The following example shows a <xref:System.Windows.Shell.JumpList> configured to show the **Recent** category. This example is part of a larger example available in the <xref:System.Windows.Shell.JumpList> class overview.  \n  \n [!code-xml[Shell_JumpListSample#001](~/add/codesnippet/xaml/jumplistsample/app.xaml#001)]"
  syntax:
    content: public bool ShowRecentCategory { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果最近使用過的項目會顯示在跳躍清單;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Shell.JumpList.ShowRecentCategory*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Windows.Shell.JumpList.#ctor
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: JumpList()
  nameWithType: JumpList.JumpList()
  fullName: System.Windows.Shell.JumpList.JumpList()
- uid: System.Windows.Shell.JumpList.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Shell.JumpItem},System.Boolean,System.Boolean)
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: JumpList(IEnumerable<JumpItem>,Boolean,Boolean)
  nameWithType: JumpList.JumpList(IEnumerable<JumpItem>,Boolean,Boolean)
  fullName: System.Windows.Shell.JumpList.JumpList(IEnumerable<JumpItem>,Boolean,Boolean)
- uid: System.Collections.Generic.IEnumerable{System.Windows.Shell.JumpItem}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<JumpItem>
  nameWithType: IEnumerable<JumpItem>
  fullName: System.Collections.Generic.IEnumerable<System.Windows.Shell.JumpItem>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Windows.Shell.JumpItem>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Shell.JumpItem
    name: JumpItem
    nameWithType: JumpItem
    fullName: JumpItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Shell.JumpList.AddToRecentCategory(System.String)
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: AddToRecentCategory(String)
  nameWithType: JumpList.AddToRecentCategory(String)
  fullName: System.Windows.Shell.JumpList.AddToRecentCategory(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Shell.JumpList.AddToRecentCategory(System.Windows.Shell.JumpPath)
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: AddToRecentCategory(JumpPath)
  nameWithType: JumpList.AddToRecentCategory(JumpPath)
  fullName: System.Windows.Shell.JumpList.AddToRecentCategory(JumpPath)
- uid: System.Windows.Shell.JumpPath
  parent: System.Windows.Shell
  isExternal: false
  name: JumpPath
  nameWithType: JumpPath
  fullName: System.Windows.Shell.JumpPath
- uid: System.Windows.Shell.JumpList.AddToRecentCategory(System.Windows.Shell.JumpTask)
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: AddToRecentCategory(JumpTask)
  nameWithType: JumpList.AddToRecentCategory(JumpTask)
  fullName: System.Windows.Shell.JumpList.AddToRecentCategory(JumpTask)
- uid: System.Windows.Shell.JumpTask
  parent: System.Windows.Shell
  isExternal: false
  name: JumpTask
  nameWithType: JumpTask
  fullName: System.Windows.Shell.JumpTask
- uid: System.Windows.Shell.JumpList.Apply
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: Apply()
  nameWithType: JumpList.Apply()
  fullName: System.Windows.Shell.JumpList.Apply()
- uid: System.Windows.Shell.JumpList.BeginInit
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: BeginInit()
  nameWithType: JumpList.BeginInit()
  fullName: System.Windows.Shell.JumpList.BeginInit()
- uid: System.Windows.Shell.JumpList.EndInit
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: EndInit()
  nameWithType: JumpList.EndInit()
  fullName: System.Windows.Shell.JumpList.EndInit()
- uid: System.Windows.Shell.JumpList.GetJumpList(System.Windows.Application)
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: GetJumpList(Application)
  nameWithType: JumpList.GetJumpList(Application)
  fullName: System.Windows.Shell.JumpList.GetJumpList(Application)
- uid: System.Windows.Shell.JumpList
  parent: System.Windows.Shell
  isExternal: false
  name: JumpList
  nameWithType: JumpList
  fullName: System.Windows.Shell.JumpList
- uid: System.Windows.Application
  parent: System.Windows
  isExternal: false
  name: Application
  nameWithType: Application
  fullName: System.Windows.Application
- uid: System.Windows.Shell.JumpList.JumpItems
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: JumpItems
  nameWithType: JumpList.JumpItems
  fullName: System.Windows.Shell.JumpList.JumpItems
- uid: System.Collections.Generic.List{System.Windows.Shell.JumpItem}
  parent: System.Collections.Generic
  isExternal: true
  name: List<JumpItem>
  nameWithType: List<JumpItem>
  fullName: System.Collections.Generic.List<System.Windows.Shell.JumpItem>
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: List<System.Windows.Shell.JumpItem>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Shell.JumpItem
    name: JumpItem
    nameWithType: JumpItem
    fullName: JumpItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Shell.JumpList.JumpItemsRejected
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: JumpItemsRejected
  nameWithType: JumpList.JumpItemsRejected
  fullName: System.Windows.Shell.JumpList.JumpItemsRejected
- uid: System.EventHandler{System.Windows.Shell.JumpItemsRejectedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<JumpItemsRejectedEventArgs>
  nameWithType: EventHandler<JumpItemsRejectedEventArgs>
  fullName: System.EventHandler<System.Windows.Shell.JumpItemsRejectedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Shell.JumpItemsRejectedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Shell.JumpItemsRejectedEventArgs
    name: JumpItemsRejectedEventArgs
    nameWithType: JumpItemsRejectedEventArgs
    fullName: JumpItemsRejectedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Shell.JumpList.JumpItemsRemovedByUser
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: JumpItemsRemovedByUser
  nameWithType: JumpList.JumpItemsRemovedByUser
  fullName: System.Windows.Shell.JumpList.JumpItemsRemovedByUser
- uid: System.EventHandler{System.Windows.Shell.JumpItemsRemovedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<JumpItemsRemovedEventArgs>
  nameWithType: EventHandler<JumpItemsRemovedEventArgs>
  fullName: System.EventHandler<System.Windows.Shell.JumpItemsRemovedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Shell.JumpItemsRemovedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Shell.JumpItemsRemovedEventArgs
    name: JumpItemsRemovedEventArgs
    nameWithType: JumpItemsRemovedEventArgs
    fullName: JumpItemsRemovedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Shell.JumpList.SetJumpList(System.Windows.Application,System.Windows.Shell.JumpList)
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: SetJumpList(Application,JumpList)
  nameWithType: JumpList.SetJumpList(Application,JumpList)
  fullName: System.Windows.Shell.JumpList.SetJumpList(Application,JumpList)
- uid: System.Windows.Shell.JumpList.ShowFrequentCategory
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: ShowFrequentCategory
  nameWithType: JumpList.ShowFrequentCategory
  fullName: System.Windows.Shell.JumpList.ShowFrequentCategory
- uid: System.Windows.Shell.JumpList.ShowRecentCategory
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: ShowRecentCategory
  nameWithType: JumpList.ShowRecentCategory
  fullName: System.Windows.Shell.JumpList.ShowRecentCategory
- uid: System.Windows.Shell.JumpList.#ctor*
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: JumpList
  nameWithType: JumpList.JumpList
- uid: System.Windows.Shell.JumpList.AddToRecentCategory*
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: AddToRecentCategory
  nameWithType: JumpList.AddToRecentCategory
- uid: System.Windows.Shell.JumpList.Apply*
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: Apply
  nameWithType: JumpList.Apply
- uid: System.Windows.Shell.JumpList.BeginInit*
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: BeginInit
  nameWithType: JumpList.BeginInit
- uid: System.Windows.Shell.JumpList.EndInit*
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: EndInit
  nameWithType: JumpList.EndInit
- uid: System.Windows.Shell.JumpList.GetJumpList*
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: GetJumpList
  nameWithType: JumpList.GetJumpList
- uid: System.Windows.Shell.JumpList.JumpItems*
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: JumpItems
  nameWithType: JumpList.JumpItems
- uid: System.Windows.Shell.JumpList.SetJumpList*
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: SetJumpList
  nameWithType: JumpList.SetJumpList
- uid: System.Windows.Shell.JumpList.ShowFrequentCategory*
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: ShowFrequentCategory
  nameWithType: JumpList.ShowFrequentCategory
- uid: System.Windows.Shell.JumpList.ShowRecentCategory*
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: ShowRecentCategory
  nameWithType: JumpList.ShowRecentCategory
