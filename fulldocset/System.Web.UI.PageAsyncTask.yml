### YamlMime:ManagedReference
items:
- uid: System.Web.UI.PageAsyncTask
  id: PageAsyncTask
  children:
  - System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})
  - System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})
  - System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)
  - System.Web.UI.PageAsyncTask.BeginHandler
  - System.Web.UI.PageAsyncTask.EndHandler
  - System.Web.UI.PageAsyncTask.ExecuteInParallel
  - System.Web.UI.PageAsyncTask.State
  - System.Web.UI.PageAsyncTask.TimeoutHandler
  langs:
  - csharp
  name: PageAsyncTask
  nameWithType: PageAsyncTask
  fullName: System.Web.UI.PageAsyncTask
  type: Class
  summary: "包含註冊到網頁的非同步工作的相關資訊。 這個類別無法被繼承。"
  remarks: "ASP.NET 2.0 版可讓您註冊多個工作的頁面和之前頁面的呈現以非同步方式執行。 您可以指定是否緩慢的程序，而且不想讓其他處理程序執行時，這會因工作會以非同步方式執行。 以平行方式或依序執行的非同步工作。       必須透過網頁註冊 PageAsyncTask 物件<xref:System.Web.UI.Page.RegisterAsyncTask%2A>方法。</xref:System.Web.UI.Page.RegisterAsyncTask%2A> 若要以非同步方式處理執行非同步工作沒有頁面本身。 您可以設定`Async`屬性設為  `true` （如下列程式碼範例所示） 或`false`頁面上指示詞和非同步工作會仍會以非同步方式處理︰`<%@ Page Async=&quot;true&quot; %>`時`Async`屬性設為`false`，執行頁面的執行緒會封鎖，直到所有的非同步工作完成為止。       註冊任何非同步工作，才能<xref:System.Web.UI.Page.PreRenderComplete>事件將會自動由頁面時執行它們已經尚未執行。</xref:System.Web.UI.Page.PreRenderComplete> 這些非同步工作註冊之後<xref:System.Web.UI.Page.PreRenderComplete>必須明確地透過執行事件<xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>方法。</xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> </xref:System.Web.UI.Page.PreRenderComplete> <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>方法也可用來啟動工作，再<xref:System.Web.UI.Page.PreRenderComplete>事件。</xref:System.Web.UI.Page.PreRenderComplete> </xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>方法尚未執行的頁面上執行所有已註冊的非同步工作。</xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>       根據預設，非同步工作會逾時如果未在 45 秒內完成。 您可以在 Web.config 檔或 page 指示詞中指定不同的逾時值。 `<pages>` Web.config 檔案區段包含`asyncTimeout`屬性，如下所示。       `<system.web>`       `<pages asyncTimeout=&quot;30&quot;>`       `</pages>`       `</system.web>`頁面指示詞包含`AsyncTimeout`屬性。       `<%@ Page AsyncTimeout=&quot;30&quot; %>`"
  example:
  - "The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/csharp/t-system.web.ui.pageasyn_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/visualbasic/t-system.web.ui.pageasyn_1.aspx)]  \n  \n [!code-vb[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/visualbasic/t-system.web.ui.pageasyn_2.vb)]\n [!code-cs[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/csharp/t-system.web.ui.pageasyn_2.cs)]"
  syntax:
    content: public sealed class PageAsyncTask
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})
  id: '#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})'
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: PageAsyncTask(Func<CancellationToken,Task>)
  nameWithType: PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "初始化的新執行個體<xref href=&quot;System.Web.UI.PageAsyncTask&quot;></xref>類別使用事件處理常式，可讓要取消工作。"
  remarks: "這個建構函式會包裝<xref:System.Web.CancellableTaskEventHandler>委派以便<xref:System.Web.UI.PageAsyncTask>物件可以整合非同步程式碼 (根據<xref:System.Threading.Tasks.Task>物件) 與現有的 ASP.NET Web Form 非同步頁面功能。</xref:System.Threading.Tasks.Task> </xref:System.Web.UI.PageAsyncTask> </xref:System.Web.CancellableTaskEventHandler> 表示 ASP.NET 將<xref:System.Threading.CancellationToken>傳遞至物件<xref:System.Web.CancellableTaskEventHandler>委派有無取消情形根據<xref:System.Web.UI.Page.AsyncTimeout%2A>屬性中設定`@ Page`網頁指示詞。</xref:System.Web.UI.Page.AsyncTimeout%2A> </xref:System.Web.CancellableTaskEventHandler> </xref:System.Threading.CancellationToken> 當<xref:System.Web.UI.Page.AsyncTimeout%2A>值已達到，<xref:System.Threading.CancellationToken>物件將會收到信號。</xref:System.Threading.CancellationToken> </xref:System.Web.UI.Page.AsyncTimeout%2A> `CancellationToken`參數必須傳遞至您的<xref:System.Web.CancellableTaskEventHandler>類別</xref:System.Web.CancellableTaskEventHandler>實作會呼叫任何非同步 Api"
  syntax:
    content: public PageAsyncTask (Func<System.Threading.CancellationToken,System.Threading.Tasks.Task> handler);
    parameters:
    - id: handler
      type: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task}
      description: "事件處理常式。"
  overload: System.Web.UI.PageAsyncTask.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})
  id: '#ctor(System.Func{System.Threading.Tasks.Task})'
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: PageAsyncTask(Func<Task>)
  nameWithType: PageAsyncTask.PageAsyncTask(Func<Task>)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(Func<Task>)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "初始化的新執行個體<xref href=&quot;System.Web.UI.PageAsyncTask&quot;></xref>類別使用的事件處理常式讓處理工作。"
  syntax:
    content: public PageAsyncTask (Func<System.Threading.Tasks.Task> handler);
    parameters:
    - id: handler
      type: System.Func{System.Threading.Tasks.Task}
      description: "事件處理常式。"
  overload: System.Web.UI.PageAsyncTask.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)
  id: '#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)'
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "初始化的新執行個體<xref href=&quot;System.Web.UI.PageAsyncTask&quot;></xref>類別使用的平行執行的預設值。"
  remarks: "這項實作建構函式設定<xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A>屬性`false`以便與頁面上的其他工作平行處理時，非同步工作。</xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A>"
  syntax:
    content: public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "開始非同步工作時要呼叫處理常式。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "當工作在逾時期限內順利完成時呼叫處理常式。"
    - id: timeoutHandler
      type: System.Web.EndEventHandler
      description: "當工作未順利完成時逾時期間內呼叫處理常式。"
    - id: state
      type: System.Object
      description: "物件，代表工作的狀態。"
  overload: System.Web.UI.PageAsyncTask.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> beginHandler </code>參數或<code> endHandler </code>未指定參數。"
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)
  id: '#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)'
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "初始化的新執行個體<xref href=&quot;System.Web.UI.PageAsyncTask&quot;></xref>類別使用的平行執行指定的值。"
  remarks: "這個建構函式的實作可讓您設定是否會與頁面上的其他工作平行處理非同步工作。"
  example:
  - "The following code example creates three asynchronous tasks that are processed in parallel to each other. This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/csharp/3bf006c1-f830-4b70-9cc2-_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/visualbasic/3bf006c1-f830-4b70-9cc2-_1.aspx)]"
  syntax:
    content: public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "開始非同步工作時要呼叫處理常式。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "當工作在逾時期限內順利完成時呼叫處理常式。"
    - id: timeoutHandler
      type: System.Web.EndEventHandler
      description: "當工作未順利完成時逾時期間內呼叫處理常式。"
    - id: state
      type: System.Object
      description: "物件，代表工作的狀態。"
    - id: executeInParallel
      type: System.Boolean
      description: "值，指出工作是否可以與其他工作平行處理。"
  overload: System.Web.UI.PageAsyncTask.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> beginHandler </code>參數或<code> endHandler </code>未指定參數。"
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.BeginHandler
  id: BeginHandler
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: BeginHandler
  nameWithType: PageAsyncTask.BeginHandler
  fullName: System.Web.UI.PageAsyncTask.BeginHandler
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "取得時要呼叫的方法，開始非同步工作。"
  remarks: "BeginHandler 委派會設定於建構函式。"
  example:
  - "The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds. A BeginHandler delegate is specified for each task.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_2_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_2_1.aspx)]  \n  \n [!code-vb[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_2_2.vb)]\n [!code-cs[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_2_2.cs)]"
  syntax:
    content: public System.Web.BeginEventHandler BeginHandler { get; }
    return:
      type: System.Web.BeginEventHandler
      description: "A <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>委派，表示從非同步工作時要呼叫的方法。"
  overload: System.Web.UI.PageAsyncTask.BeginHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.EndHandler
  id: EndHandler
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: EndHandler
  nameWithType: PageAsyncTask.EndHandler
  fullName: System.Web.UI.PageAsyncTask.EndHandler
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "取得工作逾時期間內成功完成時要呼叫的方法。"
  remarks: "EndHandler 委派會設定於建構函式。"
  example:
  - "The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds. An EndHandler delegate is specified for each task.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_0_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_0_1.aspx)]  \n  \n [!code-vb[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_0_2.vb)]\n [!code-cs[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_0_2.cs)]"
  syntax:
    content: public System.Web.EndEventHandler EndHandler { get; }
    return:
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>委派，表示當工作逾時期間內成功完成時要呼叫的方法。"
  overload: System.Web.UI.PageAsyncTask.EndHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.ExecuteInParallel
  id: ExecuteInParallel
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: ExecuteInParallel
  nameWithType: PageAsyncTask.ExecuteInParallel
  fullName: System.Web.UI.PageAsyncTask.ExecuteInParallel
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "取得值，指出工作是否可以與其他工作平行處理。"
  remarks: "ExecuteInParallel 屬性是設定於建構函式。 當多個工作都登錄在頁面或 ExecuteInParallel 屬性設定為`true`，則會同時處理這些工作。 不過，如果 ExecuteInParallel 屬性設定為`false`，則會依序處理這些工作。 比方說，如果頁面包含兩個非同步工作每 5 秒才能完成，並 ExecuteInParallel 設`true`，這兩項工作將在 5 秒內完成。 如果設為 ExecuteInParallel`false`這些相同的兩個工作，則第一項工作會在 5 秒內完成，而第二個工作完成第一項工作完成後的 5 秒。"
  example:
  - "The following code example defines three asynchronous tasks that are each set to be processed in parallel. This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_3_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_3_1.aspx)]"
  syntax:
    content: public bool ExecuteInParallel { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果工作應該與其他工作; 平行處理否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.PageAsyncTask.ExecuteInParallel*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.State
  id: State
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: State
  nameWithType: PageAsyncTask.State
  fullName: System.Web.UI.PageAsyncTask.State
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "取得物件，代表工作的狀態。"
  remarks: "State 屬性設定在建構函式，並執行非同步工作的期間，無法修改。 您可以藉由指派至其個別的狀態屬性的唯一字串值來區分在網頁中的非同步工作。"
  example:
  - "The following code example creates three asynchronous tasks and gives them unique values for their State properties. This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_4_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_4_1.aspx)]"
  syntax:
    content: public object State { get; }
    return:
      type: System.Object
      description: "<xref:System.Object>，代表工作的狀態。</xref:System.Object>"
  overload: System.Web.UI.PageAsyncTask.State*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.TimeoutHandler
  id: TimeoutHandler
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: TimeoutHandler
  nameWithType: PageAsyncTask.TimeoutHandler
  fullName: System.Web.UI.PageAsyncTask.TimeoutHandler
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "取得逾時期間內的工作未順利完成時要呼叫的方法。"
  remarks: "TimeoutHandler 委派會設定於建構函式。"
  example:
  - "The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds. A TimeoutHandler delegate is specified for each task.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_1_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_1_1.aspx)]  \n  \n [!code-vb[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_1_2.vb)]\n [!code-cs[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_1_2.cs)]"
  syntax:
    content: public System.Web.EndEventHandler TimeoutHandler { get; }
    return:
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>委派，代表逾時期間內的工作未順利完成時要呼叫的方法。"
  overload: System.Web.UI.PageAsyncTask.TimeoutHandler*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask(Func<CancellationToken,Task>)
  nameWithType: PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)
- uid: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task}
  parent: System
  isExternal: true
  name: Func<CancellationToken,Task>
  nameWithType: Func<CancellationToken,Task>
  fullName: System.Func<System.Threading.CancellationToken,System.Threading.Tasks.Task>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Threading.CancellationToken,System.Threading.Tasks.Task>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: Task
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask(Func<Task>)
  nameWithType: PageAsyncTask.PageAsyncTask(Func<Task>)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(Func<Task>)
- uid: System.Func{System.Threading.Tasks.Task}
  parent: System
  isExternal: true
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: System.Func<System.Threading.Tasks.Task>
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: Func<System.Threading.Tasks.Task>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: Task
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
- uid: System.Web.BeginEventHandler
  parent: System.Web
  isExternal: false
  name: BeginEventHandler
  nameWithType: BeginEventHandler
  fullName: System.Web.BeginEventHandler
- uid: System.Web.EndEventHandler
  parent: System.Web
  isExternal: false
  name: EndEventHandler
  nameWithType: EndEventHandler
  fullName: System.Web.EndEventHandler
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.PageAsyncTask.BeginHandler
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: BeginHandler
  nameWithType: PageAsyncTask.BeginHandler
  fullName: System.Web.UI.PageAsyncTask.BeginHandler
- uid: System.Web.UI.PageAsyncTask.EndHandler
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: EndHandler
  nameWithType: PageAsyncTask.EndHandler
  fullName: System.Web.UI.PageAsyncTask.EndHandler
- uid: System.Web.UI.PageAsyncTask.ExecuteInParallel
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: ExecuteInParallel
  nameWithType: PageAsyncTask.ExecuteInParallel
  fullName: System.Web.UI.PageAsyncTask.ExecuteInParallel
- uid: System.Web.UI.PageAsyncTask.State
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: State
  nameWithType: PageAsyncTask.State
  fullName: System.Web.UI.PageAsyncTask.State
- uid: System.Web.UI.PageAsyncTask.TimeoutHandler
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: TimeoutHandler
  nameWithType: PageAsyncTask.TimeoutHandler
  fullName: System.Web.UI.PageAsyncTask.TimeoutHandler
- uid: System.Web.UI.PageAsyncTask.#ctor*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask
  nameWithType: PageAsyncTask.PageAsyncTask
- uid: System.Web.UI.PageAsyncTask.BeginHandler*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: BeginHandler
  nameWithType: PageAsyncTask.BeginHandler
- uid: System.Web.UI.PageAsyncTask.EndHandler*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: EndHandler
  nameWithType: PageAsyncTask.EndHandler
- uid: System.Web.UI.PageAsyncTask.ExecuteInParallel*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: ExecuteInParallel
  nameWithType: PageAsyncTask.ExecuteInParallel
- uid: System.Web.UI.PageAsyncTask.State*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: State
  nameWithType: PageAsyncTask.State
- uid: System.Web.UI.PageAsyncTask.TimeoutHandler*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: TimeoutHandler
  nameWithType: PageAsyncTask.TimeoutHandler
