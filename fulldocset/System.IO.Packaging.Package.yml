### YamlMime:ManagedReference
items:
- uid: System.IO.Packaging.Package
  id: Package
  children:
  - System.IO.Packaging.Package.#ctor(System.IO.FileAccess)
  - System.IO.Packaging.Package.#ctor(System.IO.FileAccess,System.Boolean)
  - System.IO.Packaging.Package.Close
  - System.IO.Packaging.Package.CreatePart(System.Uri,System.String)
  - System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  - System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  - System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)
  - System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)
  - System.IO.Packaging.Package.DeletePart(System.Uri)
  - System.IO.Packaging.Package.DeletePartCore(System.Uri)
  - System.IO.Packaging.Package.DeleteRelationship(System.String)
  - System.IO.Packaging.Package.Dispose(System.Boolean)
  - System.IO.Packaging.Package.FileOpenAccess
  - System.IO.Packaging.Package.Flush
  - System.IO.Packaging.Package.FlushCore
  - System.IO.Packaging.Package.GetPart(System.Uri)
  - System.IO.Packaging.Package.GetPartCore(System.Uri)
  - System.IO.Packaging.Package.GetParts
  - System.IO.Packaging.Package.GetPartsCore
  - System.IO.Packaging.Package.GetRelationship(System.String)
  - System.IO.Packaging.Package.GetRelationships
  - System.IO.Packaging.Package.GetRelationshipsByType(System.String)
  - System.IO.Packaging.Package.Open(System.IO.Stream)
  - System.IO.Packaging.Package.Open(System.String)
  - System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)
  - System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)
  - System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)
  - System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  - System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  - System.IO.Packaging.Package.PackageProperties
  - System.IO.Packaging.Package.PartExists(System.Uri)
  - System.IO.Packaging.Package.RelationshipExists(System.String)
  - System.IO.Packaging.Package.System#IDisposable#Dispose
  langs:
  - csharp
  name: Package
  nameWithType: Package
  fullName: System.IO.Packaging.Package
  type: Class
  summary: "表示可以儲存多個資料物件的容器。"
  remarks: "封裝是抽象類別，可用來將物件組織在單一實體的定義的實體格式，可攜性和能夠有效率地存取。       ZIP 檔是封裝的主要實體的格式。  其他封裝的實作可能會使用其他實體的格式，例如 XML 文件、 資料庫或 Web 服務。       類似檔案系統資料夾和檔案的階層式組織中所參考封裝中包含的項目。       雖然封裝本身是抽象類別，<xref:System.IO.Packaging.ZipPackage>依預設會使用衍生的類別<xref:System.IO.Packaging.Package.Open%2A>方法。</xref:System.IO.Packaging.Package.Open%2A> </xref:System.IO.Packaging.ZipPackage>       A <xref:System.IO.Packaging.PackagePart>（「 部分 」） 是抽象類別，代表儲存在封裝中的物件。</xref:System.IO.Packaging.PackagePart>       A <xref:System.IO.Packaging.PackageRelationship>（「 關係 」） 之間定義關聯的來源封裝或<xref:System.IO.Packaging.PackagePart>和目標物件。</xref:System.IO.Packaging.PackagePart> </xref:System.IO.Packaging.PackageRelationship>  A<xref:System.IO.Packaging.PackageRelationship>可以是下列其中一種，其中每一個都可以有兩種形式:-封裝層級關聯性 (由<xref:System.IO.Packaging.Package.CreateRelationship%2A?displayProperty=fullName>方法) 與封裝相關為:-封裝中的組件作為目標。</xref:System.IO.Packaging.Package.CreateRelationship%2A?displayProperty=fullName> </xref:System.IO.Packaging.PackageRelationship>          的在封裝之外目標資源。      -的組件層級關聯性 (由<xref:System.IO.Packaging.PackagePart.CreateRelationship%2A?displayProperty=fullName>方法) 與來源<xref:System.IO.Packaging.PackagePart>為:-另一個封裝中的組件作為目標。</xref:System.IO.Packaging.PackagePart> </xref:System.IO.Packaging.PackagePart.CreateRelationship%2A?displayProperty=fullName>          的在封裝之外目標資源。       關聯性的來源封裝或來源<xref:System.IO.Packaging.PackagePart>會被視為 「 擁有者 」 的關聯性。</xref:System.IO.Packaging.PackagePart>  刪除來源物件時，會一併刪除來源物件所擁有的所有關聯性。  建立或刪除的關聯性的程序不會實際變更以任何方式的來源或目標物件。       A <xref:System.IO.Packaging.PackageDigitalSignature>（「 數位簽章 」） 是個組件和關係代表包含封裝的數位簽章。</xref:System.IO.Packaging.PackageDigitalSignature>  數位簽章識別建立者，並驗證已簽署組件和封裝中包含的關聯性尚未經過修改。       封裝也支援數位版權管理 (DRM) 可讓內容項目具有特定存取權限授與授權的使用者加密封裝中。       根據封裝架構，<xref:System.Windows.Xps.Packaging.XpsDocument>是針對儲存在開啟文件而設計的封裝類型[XML Paper Specification (XPS)](http://go.microsoft.com/fwlink/?LinkID=65761)。</xref:System.Windows.Xps.Packaging.XpsDocument>       [!INCLUDE[TLA#tla_avalonwinfx](~/add/includes/tlasharptla-avalonwinfx-md.md)]您可以使用封裝來儲存內容、 資源和網頁和文件依預設會使用標準的 ZIP 檔案的關聯性。 任何 ZIP 檔案，您的應用程式可以使用<xref:System.IO.Packaging>類別來儲存並選擇性地保護任何類型或能夠有效率地存取單一容器中的資料檔案數目。</xref:System.IO.Packaging>       如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example shows the basic steps for creating a Package.  In this example, a package is created to contain a document together with a graphic image that is displayed as part of the document.  (This is similar to the case in which an HTML file has an \\<IMG> tag that references an external image file.)  Two <xref:System.IO.Packaging.PackageRelationship> elements are also included in the package.  The first, a \"package-level\" relationship, defines the document part as the package's root element.  A second, \"part-level\" relationship defines the association between the document part (the \"source\" of the part-level relationship) and its use of the image part (the \"target\" of the part-level relationship).  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepackage)]\n [!code-cs[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepackage)]"
  syntax:
    content: 'public abstract class Package : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.#ctor(System.IO.FileAccess)
  id: '#ctor(System.IO.FileAccess)'
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Package(FileAccess)
  nameWithType: Package.Package(FileAccess)
  fullName: System.IO.Packaging.Package.Package(FileAccess)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "初始化的新執行個體<xref href=&quot;System.IO.Packaging.Package&quot;></xref>使用類別指定<xref href=&quot;System.IO.FileAccess&quot;> </xref>。"
  remarks: "封裝是受保護的建構函式的<xref:System.IO.Packaging.Package>抽象基底類別。</xref:System.IO.Packaging.Package> 在衍生類別中呼叫時，封裝建構函式會初始化衍生類別的新執行個體。"
  syntax:
    content: protected Package (System.IO.FileAccess openFileAccess);
    parameters:
    - id: openFileAccess
      type: System.IO.FileAccess
      description: "封裝檔案 IO 權限。"
  overload: System.IO.Packaging.Package.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "值<code> openFileAccess </code>不正確。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.#ctor(System.IO.FileAccess,System.Boolean)
  id: '#ctor(System.IO.FileAccess,System.Boolean)'
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Package(FileAccess,Boolean)
  nameWithType: Package.Package(FileAccess,Boolean)
  fullName: System.IO.Packaging.Package.Package(FileAccess,Boolean)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "初始化的新執行個體<xref href=&quot;System.IO.Packaging.Package&quot;></xref>使用類別指定<xref href=&quot;System.IO.FileAccess&quot;></xref>和串流選項。"
  remarks: "封裝是受保護建構函式的<xref:System.IO.Packaging.Package>抽象基底抽象基底類別。</xref:System.IO.Packaging.Package> 在衍生類別中呼叫時，封裝建構函式會初始化衍生類別的新執行個體。"
  syntax:
    content: protected Package (System.IO.FileAccess openFileAccess, bool streaming);
    parameters:
    - id: openFileAccess
      type: System.IO.FileAccess
      description: "封裝檔案 IO 權限。"
    - id: streaming
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要開啟的封裝串流。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.Packaging.Package.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "值<code> openFileAccess </code>不正確。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Close
  id: Close
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Close()
  nameWithType: Package.Close()
  fullName: System.IO.Packaging.Package.Close()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "儲存並關閉套件，以及所有基礎的部分資料流。"
  remarks: "如<xref:System.IO.Packaging.Package>類別關閉和<xref:System.IO.Packaging.Package.Dispose%2A>執行相同的作業，沒有理由来呼叫<xref:System.IO.Packaging.Package.Dispose%2A>如果您呼叫關閉或反之亦然。</xref:System.IO.Packaging.Package.Dispose%2A> </xref:System.IO.Packaging.Package.Dispose%2A> </xref:System.IO.Packaging.Package>       關閉並<xref:System.IO.Packaging.Package.Dispose%2A>在內部呼叫<xref:System.IO.Packaging.Package.Flush%2A>.</xref:System.IO.Packaging.Package.Flush%2A> </xref:System.IO.Packaging.Package.Dispose%2A>      > [!NOTE] >`using`陳述式 (不同於`using`命名空間指示詞) 是建議的方式關閉和<xref:System.IO.Packaging.Package.Dispose%2A>封裝。</xref:System.IO.Packaging.Package.Dispose%2A>  [寫入封裝範例](http://go.microsoft.com/fwlink/?LinkID=160055)和[讀取封裝範例](http://go.microsoft.com/fwlink/?LinkID=160034)示範如何關閉和處置封裝使用`using`陳述式。"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.IO.Packaging.Package.Close*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.CreatePart(System.Uri,System.String)
  id: CreatePart(System.Uri,System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: CreatePart(Uri,String)
  nameWithType: Package.CreatePart(Uri,String)
  fullName: System.IO.Packaging.Package.CreatePart(Uri,String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "使用指定的 URI 和內容類型建立新的未壓縮組件。"
  remarks: "CreatePart 初始化空<xref:System.IO.Stream>的新組件</xref:System.IO.Stream>  <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=fullName>方法可以用來取得組件相關聯的資料流執行個體的參考</xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=fullName>       <xref:System.IO.Packaging.PackagePart.CompressionOption%2A>為<xref:System.IO.Packaging.CompressionOption?displayProperty=fullName>。</xref:System.IO.Packaging.CompressionOption?displayProperty=fullName></xref:System.IO.Packaging.PackagePart.CompressionOption%2A>的組件       如需有關封裝組件的詳細資訊，請參閱 > 一節 1.1 可供下載開放封裝慣例 (OPC) 規格中的[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example shows how to create a new <xref:System.IO.Packaging.PackagePart> and then store data into the part.  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[PackageWrite#PackageWriteCreatePart](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepart)]\n [!code-cs[PackageWrite#PackageWriteCreatePart](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepart)]"
  syntax:
    content: public System.IO.Packaging.PackagePart CreatePart (Uri partUri, string contentType);
    parameters:
    - id: partUri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]新組件。"
    - id: contentType
      type: System.String
      description: "資料流的內容類型。"
    return:
      type: System.IO.Packaging.PackagePart
      description: "新建立的組件。"
  overload: System.IO.Packaging.Package.CreatePart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>partUri</code>or <code>contentType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>partUri</code>is not a valid <xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref> [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "具有指定的組件<code> partUri </code>已存在於封裝中。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Package 未開啟 (<>*> 或<> *> 已呼叫)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "封裝是唯讀的 （無法加入新的組件）。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  id: CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: CreatePart(Uri,String,CompressionOption)
  nameWithType: Package.CreatePart(Uri,String,CompressionOption)
  fullName: System.IO.Packaging.Package.CreatePart(Uri,String,CompressionOption)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "使用指定的 URI、 內容類型，以及壓縮選項，會建立新的組件。"
  remarks: "預設<xref:System.IO.Packaging.ZipPackage>衍生的類別，CreatePart 方法僅支援兩個`compressionOption`值<xref:System.IO.Packaging.CompressionOption>或<xref:System.IO.Packaging.CompressionOption>壓縮。</xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.ZipPackage>  其他<xref:System.IO.Packaging.CompressionOption>值<xref:System.IO.Packaging.CompressionOption>， <xref:System.IO.Packaging.CompressionOption>，或<xref:System.IO.Packaging.CompressionOption>使用<xref:System.IO.Packaging.CompressionOption>壓縮。</xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.CompressionOption>       CreatePart 建立空<xref:System.IO.Stream>的新組件</xref:System.IO.Stream>  <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=fullName>方法可以用來取得組件相關聯的資料流執行個體的參考</xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=fullName>       如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example shows how to create a new <xref:System.IO.Packaging.PackagePart> and then store data into the part.  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[PackageWrite#PackageWriteCreatePart](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepart)]\n [!code-cs[PackageWrite#PackageWriteCreatePart](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepart)]"
  syntax:
    content: public System.IO.Packaging.PackagePart CreatePart (Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);
    parameters:
    - id: partUri
      type: System.Uri
      description: "[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]新組件。"
    - id: contentType
      type: System.String
      description: "資料流的內容類型。"
    - id: compressionOption
      type: System.IO.Packaging.CompressionOption
      description: "適用於資料流中，指定壓縮選項<xref href=&quot;System.IO.Packaging.CompressionOption&quot;></xref>或<xref href=&quot;System.IO.Packaging.CompressionOption&quot;></xref>壓縮。"
    return:
      type: System.IO.Packaging.PackagePart
      description: "新建立的組件。"
  overload: System.IO.Packaging.Package.CreatePart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>partUri</code>or <code>contentType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>partUri</code>is not a valid <xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref> [!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "具有指定的組件<code> partUri </code>已存在於封裝中。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> compressionOption </code>值無效。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Package 未開啟 (<>*> 或<> *> 已呼叫)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "封裝是唯讀的 （無法加入新的組件）。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  id: CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: CreatePartCore(Uri,String,CompressionOption)
  nameWithType: Package.CreatePartCore(Uri,String,CompressionOption)
  fullName: System.IO.Packaging.Package.CreatePartCore(Uri,String,CompressionOption)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "當在衍生類別中覆寫時，建立新的組件在封裝中。"
  remarks: "在衍生的 CreatePartCore 方法會呼叫的<xref:System.IO.Packaging.Package.CreatePart%2A>衍生類別中實作的方法，以建立組件為基礎的實體格式</xref:System.IO.Packaging.Package.CreatePart%2A>       根據預設，<xref:System.IO.Packaging.ZipPackage>衍生的抽象類別實作<xref:System.IO.Packaging.Package>類別會提供和使用。</xref:System.IO.Packaging.Package> </xref:System.IO.Packaging.ZipPackage>  在預設作業<xref:System.IO.Packaging.Package.CreatePart%2A>從內部呼叫的 CreatePartCore <xref:System.IO.Packaging.ZipPackage>ZIP 檔案中建立新的組件的類別。</xref:System.IO.Packaging.ZipPackage> </xref:System.IO.Packaging.Package.CreatePart%2A>       預設<xref:System.IO.Packaging.ZipPackage>衍生的類別，CreatePartCore 方法僅支援兩個`compressionOption`值<xref:System.IO.Packaging.CompressionOption>或<xref:System.IO.Packaging.CompressionOption>壓縮。</xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.ZipPackage>  其他<xref:System.IO.Packaging.CompressionOption>值<xref:System.IO.Packaging.CompressionOption>， <xref:System.IO.Packaging.CompressionOption>，或<xref:System.IO.Packaging.CompressionOption>使用<xref:System.IO.Packaging.CompressionOption>壓縮。</xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.CompressionOption>       如需封裝模型和封裝組件的詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格的第 1 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: protected abstract System.IO.Packaging.PackagePart CreatePartCore (Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);
    parameters:
    - id: partUri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]正在建立的組件。"
    - id: contentType
      type: System.String
      description: "資料流的內容類型。"
    - id: compressionOption
      type: System.IO.Packaging.CompressionOption
      description: "適用於資料流壓縮選項。"
    return:
      type: System.IO.Packaging.PackagePart
      description: "所建立的組件。"
  overload: System.IO.Packaging.Package.CreatePartCore*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)
  id: CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: CreateRelationship(Uri,TargetMode,String)
  nameWithType: Package.CreateRelationship(Uri,TargetMode,String)
  fullName: System.IO.Packaging.Package.CreateRelationship(Uri,TargetMode,String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "使用指定的 URI、 目標模式和關聯性類型中建立組件封裝層級關聯性。"
  remarks: "封裝層級關聯性定義封裝和相關聯的目標組件或資源之間的關聯。  封裝層級關聯性可以有兩種形式。      -之間<xref:System.IO.Packaging.Package>至封裝中的目標組件。</xref:System.IO.Packaging.Package>      -之間<xref:System.IO.Packaging.Package>於封裝之外的目標資源。</xref:System.IO.Packaging.Package>       封裝關聯性中，封裝會視為 「 擁有者 」 的關聯性。  刪除套件時，會一併刪除封裝所擁有的所有關聯性。       CreateRelationship 不會實際變更的目標組件或以任何方式的資源。       關聯性的目標不能是另一個關聯性。       如果`targetMode`指定為<xref:System.IO.Packaging.TargetMode>，`targetUri`必須是相對 URI，形成根據[RFC 3986](http://tools.ietf.org/html/rfc3986)統一資源識別元 (URI) 的一般語法規格。</xref:System.IO.Packaging.TargetMode>  內部的相對 URI 可以是絕對路徑，開頭為斜線 （&quot;/&quot;） 字元例如&quot;/ page1.xaml&quot;或&quot;/ images/picture4.jpg&quot;，或相對路徑，例如 「.../ imagespicture1.jpg&quot;解析針對封裝根目錄 （&quot;/&quot;） 做為基底 URI。       如果`targetMode`指定為<xref:System.IO.Packaging.TargetMode>，`targetUri`可以是任一個絕對或相對 URI 格式根據[RFC 3986](http://tools.ietf.org/html/rfc3986)統一資源識別元 (URI) 的一般語法規格。</xref:System.IO.Packaging.TargetMode>  「 http://www.microsoft.com/page2.xml 」 是絕對 URI 參照外部的目標資源 」 page2.xml 」 的範例。  「 images/picture1.jpg&quot;是相對 URI，也會參考外部的目標資源 」&1;.jpg&quot;但可解析針對封裝本身的 URI 的範例。       `relationshipType`必須是[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]，形成根據[RFC 3986](http://tools.ietf.org/html/rfc3986)統一資源識別元 (URI) 的一般語法規格。  下表顯示封裝層級`relationshipType`開放封裝慣例 (OPC) 規格所定義的 Uri。      |封裝層級關聯性 |關聯性型別 URI |  |---------------------------------|---------------------------|  |核心屬性 | http://schemas.openxmlformats.org/package/2006/relationships/meta 資料/核心屬性 |  |數位簽章 | http://schemas.openxmlformats.org/package/2006/relationships/digit al-簽章/簽章 |  |數位簽章憑證 | http://schemas.openxmlformats.org/package/2006/relationships/digit al 簽章/憑證 |  |數位簽章來源 | http://schemas.openxmlformats.org/package/2006/relationships/digit al 簽章/原始 |  | 縮圖 | http://schemas.openxmlformats.org/package/2006/relationships/meta 資料縮圖 |      如需封裝和封裝關聯性的詳細資訊，請參閱小節 1.3 開放封裝慣例 (OPC) 規格中可供下載[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example illustrates how to use CreateRelationship to create a <xref:System.IO.Packaging.PackageRelationship> between a <xref:System.IO.Packaging.Package> and a root document part.  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[packagewrite#PackageWriteCreatePackageRelationship](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepackagerelationship)]\n [!code-cs[packagewrite#PackageWriteCreatePackageRelationship](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepackagerelationship)]"
  syntax:
    content: public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType);
    parameters:
    - id: targetUri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]的目標組件。"
    - id: targetMode
      type: System.IO.Packaging.TargetMode
      description: "表示目標組件是否<xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref>或<xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref>至封裝。"
    - id: relationshipType
      type: System.String
      description: "URI，唯一定義關聯性的角色。"
    return:
      type: System.IO.Packaging.PackageRelationship
      description: "指定的組件封裝層級關聯性。"
  overload: System.IO.Packaging.Package.CreateRelationship*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetUri</code>or <code>relationshipType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>targetUri</code> part is a <xref href=&quot;System.IO.Packaging.PackageRelationship&quot;></xref>, or <code>targetMode</code> is <xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref> and <code>targetUri</code> is an absolute URI."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "值<code> targetMode </code>不正確。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Package 未開啟 (<>*> 或<> *> 已呼叫)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "封裝是唯讀的。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)
  id: CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: CreateRelationship(Uri,TargetMode,String,String)
  nameWithType: Package.CreateRelationship(Uri,TargetMode,String,String)
  fullName: System.IO.Packaging.Package.CreateRelationship(Uri,TargetMode,String,String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "建立組件封裝層級關聯性目標模式、 關聯性類型的給定 uri 和[!INCLUDE[TLA#tla_id](~/add/includes/tlasharptla-id-md.md)]。"
  remarks: "封裝層級關聯性定義封裝和相關聯的目標組件或資源之間的關聯。  封裝層級關聯性可以有兩種形式。      -之間<xref:System.IO.Packaging.Package>至封裝中的目標組件。</xref:System.IO.Packaging.Package>      -之間<xref:System.IO.Packaging.Package>於封裝之外的目標資源。</xref:System.IO.Packaging.Package>       封裝關聯性中，封裝會視為 「 擁有者 」 的關聯性。  刪除套件時，會一併刪除封裝所擁有的所有關聯性。       CreateRelationship 不會實際變更的目標組件或以任何方式的資源。       關聯性的目標不能是另一個關聯性。       `id`必須是有效的 XML 識別碼。  `id`型別是 xsd:ID，且必須遵照 XML 結構描述第 2 部分中所指定的命名慣例︰ 資料類型規格 (請參閱[http://www.w3.org/TR/xmlschema-2/#ID](http://www.w3.org/TR/xmlschema-2/))。       如果`id`指定為`null`就會自動產生的唯一識別碼。  `id`指定空字串無效。       如果`targetMode`指定為<xref:System.IO.Packaging.TargetMode>，`targetUri`必須是相對 URI，形成根據[RFC 3986](http://tools.ietf.org/html/rfc3986)統一資源識別元 (URI) 的一般語法規格。</xref:System.IO.Packaging.TargetMode>  內部的相對 URI 可以是絕對路徑，開頭為斜線 （&quot;/&quot;） 字元例如&quot;/ page1.xaml&quot;或&quot;/ images/picture4.jpg&quot;，或相對路徑，例如 「.../ imagespicture1.jpg&quot;解析針對封裝根目錄 （&quot;/&quot;） 做為基底 URI。       如果`targetMode`指定為<xref:System.IO.Packaging.TargetMode>，`targetUri`可以是任一個絕對或相對 URI 格式根據[RFC 3986](http://tools.ietf.org/html/rfc3986)統一資源識別元 (URI) 的一般語法規格。</xref:System.IO.Packaging.TargetMode>  「 http://www.microsoft.com/page2.xml 」 是絕對 URI 參照外部的目標資源 」 page2.xml 」 的範例。  「 images/picture1.jpg&quot;是相對 URI，也會參考外部的目標資源 」&1;.jpg&quot;但可解析針對封裝本身的 URI 的範例。       `relationshipType`必須是根據不正確的 URI [RFC 3986](http://tools.ietf.org/html/rfc3986)統一資源識別元 (URI) 的一般語法規格。  下表顯示封裝層級`relationshipType`開放封裝慣例 (OPC) 規格所定義的 Uri。      |封裝層級關聯性 |關聯性型別 URI |  |---------------------------------|---------------------------|  |核心屬性 | http://schemas.openxmlformats.org/package/2006/relationships/meta 資料/核心屬性 |  |數位簽章 | http://schemas.openxmlformats.org/package/2006/relationships/digit al-簽章/簽章 |  |數位簽章憑證 | http://schemas.openxmlformats.org/package/2006/relationships/digit al 簽章/憑證 |  |數位簽章來源 | http://schemas.openxmlformats.org/package/2006/relationships/digit al 簽章/原始 |  | 縮圖 | http://schemas.openxmlformats.org/package/2006/relationships/meta 資料縮圖 |      如需有關封裝和封裝關聯性的詳細資訊，請參閱小節 1.3 開放封裝慣例 (OPC) 規格中可供下載[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example illustrates how to use <xref:System.IO.Packaging.Package.CreateRelationship%2A> to create a <xref:System.IO.Packaging.PackageRelationship> between a <xref:System.IO.Packaging.Package> and a root document part.  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[packagewrite#PackageWriteCreatePackageRelationship](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepackagerelationship)]\n [!code-cs[packagewrite#PackageWriteCreatePackageRelationship](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepackagerelationship)]"
  syntax:
    content: public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType, string id);
    parameters:
    - id: targetUri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]的目標組件。"
    - id: targetMode
      type: System.IO.Packaging.TargetMode
      description: "表示目標組件是否<xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref>或<xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref>至封裝。"
    - id: relationshipType
      type: System.String
      description: "URI，唯一定義關聯性的角色。"
    - id: id
      type: System.String
      description: "唯一的 XML 識別項。"
    return:
      type: System.IO.Packaging.PackageRelationship
      description: "指定的組件封裝層級關聯性。"
  overload: System.IO.Packaging.Package.CreateRelationship*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetUri</code>or <code>relationshipType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>targetUri</code> part is a <xref href=&quot;System.IO.Packaging.PackageRelationship&quot;></xref>, or <code>targetMode</code> is <xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref> and <code>targetUri</code> is an absolute URI."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "值<code> targetMode </code>不正確。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Package 未開啟 (<>*> 或<> *> 已呼叫)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "封裝是唯讀的。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "<code>id</code>不是有效的 XML 識別碼;具有指定的組件或<code>id</code>已出現在封裝。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.DeletePart(System.Uri)
  id: DeletePart(System.Uri)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: DeletePart(Uri)
  nameWithType: Package.DeletePart(Uri)
  fullName: System.IO.Packaging.Package.DeletePart(Uri)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "從封裝中刪除具有指定之 URI 的組件。"
  remarks: "`partUri`必須是相對 URI 的絕對路徑的開頭為斜線 （&quot;/&quot;） 字元所組成。  絕對路徑會相對於封裝根目錄，而且根據的正確[RFC 3986](http://tools.ietf.org/html/rfc3986)統一資源識別元 (URI) 的一般語法規格。  &quot;/ page1.xaml 」 和 「 / images/picture4.jpg&quot;是有效的組件 Uri 的範例。       如果具有指定的組件，會引發任何例外狀況`partUri`不是在封裝中。  (您可以使用<xref:System.IO.Packaging.Package.PartExists%2A>方法，以判斷是否包含指定的組件`partUri`套件中。)</xref:System.IO.Packaging.Package.PartExists%2A>     如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public void DeletePart (Uri partUri);
    parameters:
    - id: partUri
      type: System.Uri
      description: "[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]来刪除之組件。"
  overload: System.IO.Packaging.Package.DeletePart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>partUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>partUri</code>is not a valid <xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref> [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Package 未開啟 (<>*> 或<> *> 已呼叫)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "封裝是唯讀的。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.DeletePartCore(System.Uri)
  id: DeletePartCore(System.Uri)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: DeletePartCore(Uri)
  nameWithType: Package.DeletePartCore(Uri)
  fullName: System.IO.Packaging.Package.DeletePartCore(Uri)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "當在衍生類別中覆寫時，會刪除具有指定之 URI 的組件。"
  remarks: "根據預設，<xref:System.IO.Packaging.ZipPackage>衍生的抽象類別實作<xref:System.IO.Packaging.Package>類別會提供和使用。</xref:System.IO.Packaging.Package> </xref:System.IO.Packaging.ZipPackage>  在預設作業中，<xref:System.IO.Packaging.Package.DeletePart%2A>會在內部呼叫的<xref:System.IO.Packaging.ZipPackage>衍生類別中實作的類別，以執行實際的刪除作業的實體格式為基礎</xref:System.IO.Packaging.ZipPackage>的 DeletePartCore</xref:System.IO.Packaging.Package.DeletePart%2A>       如需封裝模型和封裝組件的詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格的第 1 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: protected abstract void DeletePartCore (Uri partUri);
    parameters:
    - id: partUri
      type: System.Uri
      description: "<xref:System.IO.Packaging.PackagePart.Uri*>的<xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref>刪除。</xref:System.IO.Packaging.PackagePart.Uri*>"
  overload: System.IO.Packaging.Package.DeletePartCore*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.DeleteRelationship(System.String)
  id: DeleteRelationship(System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: DeleteRelationship(String)
  nameWithType: Package.DeleteRelationship(String)
  fullName: System.IO.Packaging.Package.DeleteRelationship(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "刪除封裝層級關聯性。"
  remarks: "封裝層級關聯性定義封裝和相關聯的目標組件或資源之間的關聯。  封裝層級關聯性可以有兩種形式。      -之間<xref:System.IO.Packaging.Package>至封裝中的目標組件。</xref:System.IO.Packaging.Package>      -之間<xref:System.IO.Packaging.Package>於封裝之外的目標資源。</xref:System.IO.Packaging.Package>       封裝關聯性中，封裝會視為 「 擁有者 」 的關聯性。  刪除套件時，會一併刪除封裝所擁有的所有關聯性。       如果具有指定的關聯性，會引發任何例外狀況`id`不是在封裝中。       DeleteRelationship 實際上不會變更以任何方式目標組件。       如需封裝關聯性的詳細資訊，請參閱小節 1.3 開放封裝慣例 (OPC) 規格中可供下載[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public void DeleteRelationship (string id);
    parameters:
    - id: id
      type: System.String
      description: "<xref:System.IO.Packaging.PackageRelationship.Id*>的<xref href=&quot;System.IO.Packaging.PackageRelationship&quot;></xref>刪除。</xref:System.IO.Packaging.PackageRelationship.Id*>"
  overload: System.IO.Packaging.Package.DeleteRelationship*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>id</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Package 未開啟 (<>*> 或<> *> 已呼叫)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "封裝是唯讀的。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "<code>id</code>不是有效的 XML 識別項。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Package.Dispose(Boolean)
  fullName: System.IO.Packaging.Package.Dispose(Boolean)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "排清和儲存的所有組件和關聯性內容、 關閉封裝，並釋放所有資源。"
  remarks: "若要確定所有變更都會正確都儲存，Dispose 也完成、 排清，並關閉所有的組件和包含在封裝中的關聯性。       如<xref:System.IO.Packaging.Package>類別，Dispose 和<xref:System.IO.Packaging.Package.Close%2A>執行相同的作業-呼叫 Dispose，如果您呼叫沒有理由<xref:System.IO.Packaging.Package.Close%2A>，反之亦然。</xref:System.IO.Packaging.Package.Close%2A> </xref:System.IO.Packaging.Package.Close%2A> </xref:System.IO.Packaging.Package>       <xref:System.IO.Packaging.Package.Close%2A>並處置內部呼叫<xref:System.IO.Packaging.Package.Flush%2A>.</xref:System.IO.Packaging.Package.Flush%2A></xref:System.IO.Packaging.Package.Close%2A>       在衍生的類別，其中配置和管理非記憶體資源應該覆寫此方法以釋放資源呼叫 Dispose 時。 衍生類別覆寫也應該呼叫<xref:System.IO.Packaging.Package.Flush%2A>和基底類別 Dispose 方法，以確定該基底類別清除一律會執行。</xref:System.IO.Packaging.Package.Flush%2A>      > [!NOTE] >`using`陳述式 (不同於`using`命名空間指示詞) 是建議的方式<xref:System.IO.Packaging.Package.Close%2A>和處置封裝。</xref:System.IO.Packaging.Package.Close%2A> [寫入封裝範例](http://go.microsoft.com/fwlink/?LinkID=160055)示範如何關閉和處置封裝使用`using`陳述式。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>表示釋放 managed 和 unmanaged 資源，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>表示只釋放 unmanaged 的資源。"
  overload: System.IO.Packaging.Package.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.FileOpenAccess
  id: FileOpenAccess
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: FileOpenAccess
  nameWithType: Package.FileOpenAccess
  fullName: System.IO.Packaging.Package.FileOpenAccess
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得封裝的檔案存取設定。"
  remarks: "FileOpenAccess 屬性有沒有預設值。  檔案存取設定中指定<xref:System.IO.Packaging.Package.%23ctor%2A>建構函式呼叫，當您建立新的封裝，或在<xref:System.IO.Packaging.Package.Open%2A>開啟現有的封裝時呼叫。</xref:System.IO.Packaging.Package.Open%2A> </xref:System.IO.Packaging.Package.%23ctor%2A>"
  syntax:
    content: public System.IO.FileAccess FileOpenAccess { get; }
    return:
      type: System.IO.FileAccess
      description: 'One of the <xref href=&quot;System.IO.FileAccess&quot;></xref> values: <xref href=&quot;System.IO.FileAccess&quot;></xref>, <xref href=&quot;System.IO.FileAccess&quot;></xref>, or <xref href=&quot;System.IO.FileAccess&quot;></xref>.'
  overload: System.IO.Packaging.Package.FileOpenAccess*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Package 未開啟 (<>*> 或<> *> 已呼叫)。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Flush
  id: Flush
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Flush()
  nameWithType: Package.Flush()
  fullName: System.IO.Packaging.Package.Flush()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "在封裝中儲存的所有組件和關聯性所包含的內容。"
  remarks: "排清會在內部呼叫衍生的類別<xref:System.IO.Packaging.Package.FlushCore%2A>執行實際的特定格式的排清作業的實作。</xref:System.IO.Packaging.Package.FlushCore%2A>  在衍生的類別的<xref:System.IO.Packaging.Package.FlushCore%2A>方法會負責實際儲存特定實體的衍生的類別實作的組件和關聯性內容。</xref:System.IO.Packaging.Package.FlushCore%2A>       根據預設，<xref:System.IO.Packaging.ZipPackage>衍生的抽象實作<xref:System.IO.Packaging.Package>基底類別會提供和使用。</xref:System.IO.Packaging.Package> </xref:System.IO.Packaging.ZipPackage> 預設作業中排清在內部呼叫<xref:System.IO.Packaging.Package.FlushCore%2A>ZIP 檔案封裝中儲存的組件和關聯性。</xref:System.IO.Packaging.Package.FlushCore%2A>       排清就會呼叫自動<xref:System.IO.Packaging.Package.Close%2A>和<xref:System.IO.Packaging.Package.Dispose%2A>方法。</xref:System.IO.Packaging.Package.Dispose%2A> </xref:System.IO.Packaging.Package.Close%2A>  當<xref:System.IO.Packaging.Package.Close%2A>或<xref:System.IO.Packaging.Package.Dispose%2A>呼叫沒有個別呼叫排清。</xref:System.IO.Packaging.Package.Dispose%2A> </xref:System.IO.Packaging.Package.Close%2A>"
  syntax:
    content: public void Flush ();
    parameters: []
  overload: System.IO.Packaging.Package.Flush*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Package 未開啟 (<>*> 或<> *> 已呼叫)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "封裝是唯讀的而且無法修改。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.FlushCore
  id: FlushCore
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: FlushCore()
  nameWithType: Package.FlushCore()
  fullName: System.IO.Packaging.Package.FlushCore()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "在衍生類別中覆寫，將在衍生的類別存放區的所有組件和關聯性內容。"
  remarks: "FlushCore 會呼叫<xref:System.IO.Packaging.Package.Flush%2A>方法，以執行實際的清除作業，根據在衍生類別中實作的實體格式</xref:System.IO.Packaging.Package.Flush%2A>"
  syntax:
    content: protected abstract void FlushCore ();
    parameters: []
  overload: System.IO.Packaging.Package.FlushCore*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.GetPart(System.Uri)
  id: GetPart(System.Uri)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: GetPart(Uri)
  nameWithType: Package.GetPart(Uri)
  fullName: System.IO.Packaging.Package.GetPart(Uri)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "傳回具有指定 URI 的部分。"
  remarks: "<xref:System.InvalidOperationException>如果具有指定的組件，會擲回`partUri`不存在。</xref:System.InvalidOperationException>       <xref:System.IO.Packaging.Package.PartExists%2A>方法可以用來判斷是否`partUri`參考現有的組件</xref:System.IO.Packaging.Package.PartExists%2A>       根據預設，<xref:System.IO.Packaging.ZipPackage>衍生的抽象實作<xref:System.IO.Packaging.Package>基底類別會提供和使用。</xref:System.IO.Packaging.Package> </xref:System.IO.Packaging.ZipPackage>  在預設作業 GetPart 在內部呼叫<xref:System.IO.Packaging.Package.GetPartCore%2A>的<xref:System.IO.Packaging.ZipPackage>類別，以傳回要求的組件從 ZIP 檔案。</xref:System.IO.Packaging.ZipPackage> </xref:System.IO.Packaging.Package.GetPartCore%2A>       如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example shows how to locate, retrieve, and read parts that are contained in a package.  For the complete sample, see [Reading a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160034).  \n  \n [!code-vb[PackageRead#PackageReadUsing](~/add/codesnippet/visualbasic/packageread/packageread.vb#packagereadusing)]\n [!code-cs[PackageRead#PackageReadUsing](~/add/codesnippet/csharp/PackageRead/PackageRead.cs#packagereadusing)]"
  syntax:
    content: public System.IO.Packaging.PackagePart GetPart (Uri partUri);
    parameters:
    - id: partUri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]来傳回之組件。"
    return:
      type: System.IO.Packaging.PackagePart
      description: "使用指定的部分<code> partUri </code>。"
  overload: System.IO.Packaging.Package.GetPart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>partUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>partUri</code>is not a valid <xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref> [!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "具有指定的組件<code> partUri </code>不是在封裝中。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Package 未開啟 (<>*> 或<> *> 已呼叫)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "封裝是唯寫。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.GetPartCore(System.Uri)
  id: GetPartCore(System.Uri)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: GetPartCore(Uri)
  nameWithType: Package.GetPartCore(Uri)
  fullName: System.IO.Packaging.Package.GetPartCore(Uri)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "當在衍生類別中覆寫時，傳回所指定的 URI 定址的組件。"
  remarks: "根據預設，<xref:System.IO.Packaging.ZipPackage>衍生的抽象實作<xref:System.IO.Packaging.Package>類別會提供和使用。</xref:System.IO.Packaging.Package> </xref:System.IO.Packaging.ZipPackage>  在預設作業<xref:System.IO.Packaging.Package.GetPart%2A>從內部呼叫的 GetPartCore<xref:System.IO.Packaging.ZipPackage>類別來擷取從 ZIP 檔案的一部分。</xref:System.IO.Packaging.ZipPackage> </xref:System.IO.Packaging.Package.GetPart%2A>       如需封裝模型和封裝組件的詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格的第 1 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: protected abstract System.IO.Packaging.PackagePart GetPartCore (Uri partUri);
    parameters:
    - id: partUri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]来擷取之組件。"
    return:
      type: System.IO.Packaging.PackagePart
      description: "所要求的組件。或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，如果具有指定的組件<code> partUri </code>不是在封裝中。"
  overload: System.IO.Packaging.Package.GetPartCore*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.GetParts
  id: GetParts
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: GetParts()
  nameWithType: Package.GetParts()
  fullName: System.IO.Packaging.Package.GetParts()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "傳回封裝中的所有組件的集合。"
  remarks: "GetParts 傳回一組所包含的所有組件中封裝包括<xref:System.IO.Packaging.PackageRelationship>組件。</xref:System.IO.Packaging.PackageRelationship>       永遠不會傳回 GetParts `null`; 不過，如果封裝不包含的任何部分，傳回的集合將包含零個元素。       根據預設，<xref:System.IO.Packaging.ZipPackage>衍生的抽象實作<xref:System.IO.Packaging.Package>基底類別會提供和使用。</xref:System.IO.Packaging.Package> </xref:System.IO.Packaging.ZipPackage>  在預設作業呼叫 GetParts<xref:System.IO.Packaging.Package.GetPartsCore%2A>方法<xref:System.IO.Packaging.ZipPackage>類別，以傳回組件從 ZIP 檔案。</xref:System.IO.Packaging.ZipPackage> </xref:System.IO.Packaging.Package.GetPartsCore%2A>       如需封裝和封裝組件的詳細資訊，請參閱 1.1 規格的節開放封裝慣例 (OPC) 可供下載在[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example shows how to use the GetParts method to obtain a collection of the parts that are contained in a <xref:System.IO.Packaging.Package>.  For the complete program source code, see [Creating a Package with a Digital Signature Sample](http://go.microsoft.com/fwlink/?LinkID=159966).  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.IO.Packaging.PackagePartCollection GetParts ();
    parameters: []
    return:
      type: System.IO.Packaging.PackagePartCollection
      description: "所有的集合<xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref>封裝中所包含的項目。"
  overload: System.IO.Packaging.Package.GetParts*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Package 未開啟 (<>*> 或<> *> 已呼叫)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "封裝是唯寫。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.GetPartsCore
  id: GetPartsCore
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: GetPartsCore()
  nameWithType: Package.GetPartsCore()
  fullName: System.IO.Packaging.Package.GetPartsCore()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "當在衍生類別中覆寫時，傳回陣列的所有組件在封裝中。"
  remarks: "在衍生的類別 GetPartsCore 實作會呼叫<xref:System.IO.Packaging.Package.GetParts%2A>衍生類別中實作的方法來存取，並傳回根據實體格式的組件的陣列</xref:System.IO.Packaging.Package.GetParts%2A>       根據預設，<xref:System.IO.Packaging.ZipPackage>衍生的抽象實作<xref:System.IO.Packaging.Package>類別會提供和使用。</xref:System.IO.Packaging.Package> </xref:System.IO.Packaging.ZipPackage>  在預設作業<xref:System.IO.Packaging.Package.GetParts%2A>會在內部呼叫<xref:System.IO.Packaging.Package.GetPartCore%2A>的<xref:System.IO.Packaging.ZipPackage>類別來擷取組件從 ZIP 檔案。</xref:System.IO.Packaging.ZipPackage> </xref:System.IO.Packaging.Package.GetPartCore%2A> </xref:System.IO.Packaging.Package.GetParts%2A>       如需封裝模型和封裝組件的詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格的第 1 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: protected abstract System.IO.Packaging.PackagePart[] GetPartsCore ();
    parameters: []
    return:
      type: System.IO.Packaging.PackagePart[]
      description: "包含在封裝中的所有組件的陣列。"
  overload: System.IO.Packaging.Package.GetPartsCore*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.GetRelationship(System.String)
  id: GetRelationship(System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: GetRelationship(String)
  nameWithType: Package.GetRelationship(String)
  fullName: System.IO.Packaging.Package.GetRelationship(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "傳回具有指定識別碼的封裝層級關聯性。"
  remarks: "`id`必須是有效的 XML 識別碼。  `id`型別是 xsd:ID，且必須遵照 XML 結構描述第 2 部分中所指定的命名慣例︰ 資料類型規格 (請參閱[http://www.w3.org/TR/xmlschema-2/#ID](http://www.w3.org/TR/xmlschema-2/#ID))。       如需有關封裝和封裝關聯性的詳細資訊，請參閱小節 1.3 開放封裝慣例 (OPC) 規格中可供下載[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public System.IO.Packaging.PackageRelationship GetRelationship (string id);
    parameters:
    - id: id
      type: System.String
      description: "<xref:System.IO.Packaging.PackageRelationship.Id*>要傳回之關聯性。</xref:System.IO.Packaging.PackageRelationship.Id*>"
    return:
      type: System.IO.Packaging.PackageRelationship
      description: "使用指定的封裝層級關聯性<code> id </code>。"
  overload: System.IO.Packaging.Package.GetRelationship*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>id</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "<code>id</code>不是有效的 XML 識別項。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "使用指定的關聯性<code> id </code>不是在封裝中。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Package 未開啟 (<>*> 或<> *> 已呼叫)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "封裝是唯寫。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.GetRelationships
  id: GetRelationships
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: GetRelationships()
  nameWithType: Package.GetRelationships()
  fullName: System.IO.Packaging.Package.GetRelationships()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "傳回所有的封裝層級關聯性的集合。"
  remarks: "永遠不會傳回 GetRelationships `null`; 不過，如果封裝不包含封裝層級關聯性，傳回的集合可能包含零個元素。       封裝層級關聯性定義封裝和相關聯的目標組件或資源之間的關聯。  封裝層級關聯性可以有兩種形式。      -之間<xref:System.IO.Packaging.Package>至封裝中的目標組件。</xref:System.IO.Packaging.Package>      -之間<xref:System.IO.Packaging.Package>於封裝之外的目標資源。</xref:System.IO.Packaging.Package>       封裝關聯性中，封裝會視為 「 擁有者 」 的關聯性。  刪除套件時，會一併刪除封裝所擁有的所有關聯性。  建立或刪除的關聯性的程序不會實際變更的目標組件或以任何方式的資源。       如需有關封裝和封裝關聯性的詳細資訊，請參閱小節 1.3 開放封裝慣例 (OPC) 規格中可供下載[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public System.IO.Packaging.PackageRelationshipCollection GetRelationships ();
    parameters: []
    return:
      type: System.IO.Packaging.PackageRelationshipCollection
      description: "包含在封裝中的所有封裝層級關係的集合。"
  overload: System.IO.Packaging.Package.GetRelationships*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Package 未開啟 (<>*> 或<> *> 已呼叫)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "封裝是唯寫。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.GetRelationshipsByType(System.String)
  id: GetRelationshipsByType(System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: GetRelationshipsByType(String)
  nameWithType: Package.GetRelationshipsByType(String)
  fullName: System.IO.Packaging.Package.GetRelationshipsByType(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "傳回所有符合指定的<xref:System.IO.Packaging.PackageRelationship.RelationshipType*>.</xref:System.IO.Packaging.PackageRelationship.RelationshipType*>封裝層級關聯性的集合"
  remarks: "<xref:System.IO.Packaging.Package.GetRelationships%2A>永遠不會傳回`null`; 不過，如果沒有符合指定的封裝層級關聯性，傳回的集合可能包含零個元素`relationshipType`。</xref:System.IO.Packaging.Package.GetRelationships%2A>       下表顯示封裝層級`relationshipType`開放封裝慣例 (OPC) 規格所定義的 Uri。      |封裝層級關聯性 |關聯性型別 URI |  |---------------------------------|---------------------------|  |核心屬性 | http://schemas.openxmlformats.org/package/2006/relationships/meta 資料/核心屬性 |  |數位簽章 | http://schemas.openxmlformats.org/package/2006/relationships/digit al-簽章/簽章 |  |數位簽章憑證 | http://schemas.openxmlformats.org/package/2006/relationships/digit al 簽章/憑證 |  |數位簽章來源 | http://schemas.openxmlformats.org/package/2006/relationships/digit al 簽章/原始 |  | 縮圖 | http://schemas.openxmlformats.org/package/2006/relationships/meta 資料縮圖 |      如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example shows how to retrieve the relationships that have been defined for the package.  For the complete sample, see [Reading a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160034).  \n  \n [!code-vb[PackageRead#PackageReadUsing](~/add/codesnippet/visualbasic/packageread/packageread.vb#packagereadusing)]\n [!code-cs[PackageRead#PackageReadUsing](~/add/codesnippet/csharp/PackageRead/PackageRead.cs#packagereadusing)]"
  syntax:
    content: public System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType (string relationshipType);
    parameters:
    - id: relationshipType
      type: System.String
      description: "<xref:System.IO.Packaging.PackageRelationship.RelationshipType*>來比對，並傳回集合中。</xref:System.IO.Packaging.PackageRelationship.RelationshipType*>"
    return:
      type: System.IO.Packaging.PackageRelationshipCollection
      description: "符合指定的封裝層級關係的集合<code> relationshipType </code>。"
  overload: System.IO.Packaging.Package.GetRelationshipsByType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>relationshipType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>relationshipType</code>為空字串。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Package 未開啟 (<>*> 或<> *> 已呼叫)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "封裝是唯寫。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Open(System.IO.Stream)
  id: Open(System.IO.Stream)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Open(Stream)
  nameWithType: Package.Open(Stream)
  fullName: System.IO.Packaging.Package.Open(Stream)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "開啟指定的 IO 資料流上的套件。"
  remarks: "<xref:System.IO.Packaging.ZipPackage>是開放式的方法使用預設封裝類型。</xref:System.IO.Packaging.ZipPackage>       如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public static System.IO.Packaging.Package Open (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "用來開啟封裝 IO 資料流。"
    return:
      type: System.IO.Packaging.Package
      description: "開啟的封裝。"
  overload: System.IO.Packaging.Package.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "若要開啟此封裝需要讀取或讀取/寫入權限，以及指定<code> stream </code>是唯寫; 或者，若要開啟封裝需要寫入或讀取/寫入權限和指定<code> stream </code>處於唯讀狀態。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Open(System.String)
  id: Open(System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Open(String)
  nameWithType: Package.Open(String)
  fullName: System.IO.Packaging.Package.Open(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "開啟位於指定的路徑和檔案名稱的套件。"
  remarks: "<xref:System.IO.Packaging.ZipPackage>是開放式的方法使用預設封裝類型。</xref:System.IO.Packaging.ZipPackage>       這<xref:System.IO.Packaging.Package.Open%2A>方法會使用預設屬性來開啟封裝<xref:System.IO.FileMode>， <xref:System.IO.FileAccess>，和<xref:System.IO.FileShare>（以指定不同的屬性會使用其中一個其他的 Open 方法多載）。</xref:System.IO.FileShare> </xref:System.IO.FileAccess> </xref:System.IO.FileMode> </xref:System.IO.Packaging.Package.Open%2A>       如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example shows how to create a new <xref:System.IO.Packaging.Package> that incorporates <xref:System.IO.Packaging.PackageRelationship> and <xref:System.IO.Packaging.PackagePart> elements together with stored data.  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepackage)]\n [!code-cs[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepackage)]"
  syntax:
    content: public static System.IO.Packaging.Package Open (string path);
    parameters:
    - id: path
      type: System.String
      description: "封裝的路徑和檔案名稱。"
    return:
      type: System.IO.Packaging.Package
      description: "開啟的封裝。"
  overload: System.IO.Packaging.Package.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)
  id: Open(System.IO.Stream,System.IO.FileMode)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Open(Stream,FileMode)
  nameWithType: Package.Open(Stream,FileMode)
  fullName: System.IO.Packaging.Package.Open(Stream,FileMode)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "使用指定的 IO 資料流和檔案模式中開啟封裝。"
  remarks: "<xref:System.IO.Packaging.ZipPackage>是開放式的方法使用預設封裝類型。</xref:System.IO.Packaging.ZipPackage>       如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public static System.IO.Packaging.Package Open (System.IO.Stream stream, System.IO.FileMode packageMode);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "用來開啟封裝 IO 資料流。"
    - id: packageMode
      type: System.IO.FileMode
      description: "用來開啟封裝檔案模式。"
    return:
      type: System.IO.Packaging.Package
      description: "開啟的封裝。"
  overload: System.IO.Packaging.Package.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>packageMode</code>值不是有效的。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "若要開啟此封裝需要讀取或讀取/寫入權限，以及指定<code> stream </code>是唯寫; 或者，若要開啟封裝需要寫入或讀取/寫入權限和指定<code> stream </code>處於唯讀狀態。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)
  id: Open(System.String,System.IO.FileMode)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Open(String,FileMode)
  nameWithType: Package.Open(String,FileMode)
  fullName: System.IO.Packaging.Package.Open(String,FileMode)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "開啟位於指定路徑，使用指定的檔案模式的套件。"
  remarks: "<xref:System.IO.Packaging.ZipPackage>是開放式的方法使用預設封裝類型。</xref:System.IO.Packaging.ZipPackage>       這個開啟的方法會具有預設屬性來開啟封裝<xref:System.IO.FileAccess>和<xref:System.IO.FileShare>（以指定不同的屬性會使用其中一個其他的 Open 方法多載）。</xref:System.IO.FileShare> </xref:System.IO.FileAccess>       如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example shows how to create a new <xref:System.IO.Packaging.Package> that incorporates <xref:System.IO.Packaging.PackageRelationship> and <xref:System.IO.Packaging.PackagePart> elements together with stored data.  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepackage)]\n [!code-cs[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepackage)]"
  syntax:
    content: public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode);
    parameters:
    - id: path
      type: System.String
      description: "封裝的路徑和檔案名稱。"
    - id: packageMode
      type: System.IO.FileMode
      description: "用來開啟封裝檔案模式。"
    return:
      type: System.IO.Packaging.Package
      description: "開啟的封裝。"
  overload: System.IO.Packaging.Package.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "值<code> packageMode </code>不正確。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)
  id: Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Open(Stream,FileMode,FileAccess)
  nameWithType: Package.Open(Stream,FileMode,FileAccess)
  fullName: System.IO.Packaging.Package.Open(Stream,FileMode,FileAccess)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "使用指定的 IO 資料流、 檔案模式中，以及檔案存取設定中開啟封裝。"
  remarks: "<xref:System.IO.Packaging.ZipPackage>是開放式的方法使用預設封裝類型。</xref:System.IO.Packaging.ZipPackage>       如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public static System.IO.Packaging.Package Open (System.IO.Stream stream, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "用來開啟封裝 IO 資料流。"
    - id: packageMode
      type: System.IO.FileMode
      description: "用來開啟封裝檔案模式。"
    - id: packageAccess
      type: System.IO.FileAccess
      description: "用來開啟封裝的檔案存取權。"
    return:
      type: System.IO.Packaging.Package
      description: "開啟的封裝。"
  overload: System.IO.Packaging.Package.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The value for <code>packageMode</code> or <code>packageAccess</code> is not valid."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "若要開啟此封裝需要讀取或讀取/寫入權限，以及指定<code> stream </code>是唯寫; 或若要開啟封裝需要寫入或讀取/寫入權限和指定<code> stream </code>處於唯讀狀態。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  id: Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Open(String,FileMode,FileAccess)
  nameWithType: Package.Open(String,FileMode,FileAccess)
  fullName: System.IO.Packaging.Package.Open(String,FileMode,FileAccess)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "開啟位於指定路徑，使用指定的檔案模式和檔案存取設定的套件。"
  remarks: "<xref:System.IO.Packaging.ZipPackage>是開放式的方法使用預設封裝類型。</xref:System.IO.Packaging.ZipPackage>       這個開啟的方法，預設值開啟封裝<xref:System.IO.FileShare>屬性 (若要指定不同的屬性使用<xref:System.IO.Packaging.Package.Open%2A>方法多載)。</xref:System.IO.Packaging.Package.Open%2A> </xref:System.IO.FileShare>       如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example shows how to open and read a <xref:System.IO.Packaging.Package> that contains <xref:System.IO.Packaging.PackageRelationship> and <xref:System.IO.Packaging.PackagePart> elements together with stored data.  For the complete sample, see [Reading a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160034).  \n  \n [!code-vb[PackageRead#PackageReadUsing](~/add/codesnippet/visualbasic/packageread/packageread.vb#packagereadusing)]\n [!code-cs[PackageRead#PackageReadUsing](~/add/codesnippet/csharp/PackageRead/PackageRead.cs#packagereadusing)]"
  syntax:
    content: public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess);
    parameters:
    - id: path
      type: System.String
      description: "封裝的路徑和檔案名稱。"
    - id: packageMode
      type: System.IO.FileMode
      description: "用來開啟封裝檔案模式。"
    - id: packageAccess
      type: System.IO.FileAccess
      description: "用來開啟封裝的檔案存取權。"
    return:
      type: System.IO.Packaging.Package
      description: "開啟的封裝。"
  overload: System.IO.Packaging.Package.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Value for <code>packageMode</code> or <code>packageAccess</code> is not valid."
  platform:
  - net462
- uid: System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  id: Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Open(String,FileMode,FileAccess,FileShare)
  nameWithType: Package.Open(String,FileMode,FileAccess,FileShare)
  fullName: System.IO.Packaging.Package.Open(String,FileMode,FileAccess,FileShare)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "開啟位於指定路徑，使用指定的檔案模式、 檔案存取和設定的檔案共用的套件。"
  remarks: "<xref:System.IO.Packaging.ZipPackage>是開放式的方法使用預設封裝類型。</xref:System.IO.Packaging.ZipPackage>       如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example shows how to create a new <xref:System.IO.Packaging.Package> that incorporates <xref:System.IO.Packaging.PackageRelationship> and <xref:System.IO.Packaging.PackagePart> elements together with stored data.  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepackage)]\n [!code-cs[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepackage)]"
  syntax:
    content: public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess, System.IO.FileShare packageShare);
    parameters:
    - id: path
      type: System.String
      description: "封裝的路徑和檔案名稱。"
    - id: packageMode
      type: System.IO.FileMode
      description: "用來開啟封裝檔案模式。"
    - id: packageAccess
      type: System.IO.FileAccess
      description: "用來開啟封裝的檔案存取權。"
    - id: packageShare
      type: System.IO.FileShare
      description: "共用模式來開啟封裝檔案。"
    return:
      type: System.IO.Packaging.Package
      description: "開啟的封裝。"
  overload: System.IO.Packaging.Package.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The value for <code>packageMode</code>, <code>packageAccess</code>, or <code>packageShare</code> is not valid."
  platform:
  - net462
- uid: System.IO.Packaging.Package.PackageProperties
  id: PackageProperties
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: PackageProperties
  nameWithType: Package.PackageProperties
  fullName: System.IO.Packaging.Package.PackageProperties
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得封裝的核心屬性。"
  remarks: "如需有關核心封裝屬性的詳細資訊，請參閱第 3.1 節可供下載開放封裝慣例 (OPC) 規格中的在[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public System.IO.Packaging.PackageProperties PackageProperties { get; }
    return:
      type: System.IO.Packaging.PackageProperties
      description: "封裝的核心屬性。"
  overload: System.IO.Packaging.Package.PackageProperties*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Package 未開啟 (<>*> 或<> *> 已呼叫)。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.PartExists(System.Uri)
  id: PartExists(System.Uri)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: PartExists(Uri)
  nameWithType: Package.PartExists(Uri)
  fullName: System.IO.Packaging.Package.PartExists(Uri)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "表示具有指定之 URI 的組件是否位於封裝中。"
  remarks: "`partUri`開頭應該是正斜線字元&quot;/&quot;，而且是絕對根目錄中的封裝。       如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public virtual bool PartExists (Uri partUri);
    parameters:
    - id: partUri
      type: System.Uri
      description: "<xref:System.Uri>要檢查 for...in 之組件</xref:System.Uri>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果具有指定的組件<code> partUri </code>是封裝中; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.Packaging.Package.PartExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>partUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>partUri</code>is not a valid <xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref> [!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Package 未開啟 (<>*> 或<> *> 已呼叫)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "封裝是唯寫 （無法讀取資訊）。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.RelationshipExists(System.String)
  id: RelationshipExists(System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: RelationshipExists(String)
  nameWithType: Package.RelationshipExists(String)
  fullName: System.IO.Packaging.Package.RelationshipExists(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "指出封裝是否包含具有指定識別碼的封裝層級關聯性。"
  remarks: "如需詳細資訊，請參閱下載開放封裝慣例 (OPC) 規格[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public bool RelationshipExists (string id);
    parameters:
    - id: id
      type: System.String
      description: "<xref:System.IO.Packaging.PackageRelationship.Id*>要檢查 for...in 的關聯性</xref:System.IO.Packaging.PackageRelationship.Id*>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果具有指定的封裝層級關聯性<code> id </code>是封裝中; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.Packaging.Package.RelationshipExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>id</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "<code>id</code>不是有效的 XML 識別項。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Package 未開啟 (<>*> 或<> *> 已呼叫)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "封裝是唯寫。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: System.IDisposable.Dispose()
  nameWithType: Package.System.IDisposable.Dispose()
  fullName: System.IO.Packaging.Package.System.IDisposable.Dispose()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "此成員支援[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]基礎結構而且並非設計供應用程式使用。  使用型別安全<xref:System.IO.Packaging.Package.Dispose*>方法而。</xref:System.IO.Packaging.Package.Dispose*>"
  syntax:
    content: void IDisposable.Dispose ();
    parameters: []
  overload: System.IO.Packaging.Package.System#IDisposable#Dispose*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.IO.Packaging.Package.#ctor(System.IO.FileAccess)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Package(FileAccess)
  nameWithType: Package.Package(FileAccess)
  fullName: System.IO.Packaging.Package.Package(FileAccess)
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  nameWithType: FileAccess
  fullName: System.IO.FileAccess
- uid: System.IO.Packaging.Package.#ctor(System.IO.FileAccess,System.Boolean)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Package(FileAccess,Boolean)
  nameWithType: Package.Package(FileAccess,Boolean)
  fullName: System.IO.Packaging.Package.Package(FileAccess,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Packaging.Package.Close
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Close()
  nameWithType: Package.Close()
  fullName: System.IO.Packaging.Package.Close()
- uid: System.IO.Packaging.Package.CreatePart(System.Uri,System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreatePart(Uri,String)
  nameWithType: Package.CreatePart(Uri,String)
  fullName: System.IO.Packaging.Package.CreatePart(Uri,String)
- uid: System.IO.Packaging.PackagePart
  parent: System.IO.Packaging
  isExternal: false
  name: PackagePart
  nameWithType: PackagePart
  fullName: System.IO.Packaging.PackagePart
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreatePart(Uri,String,CompressionOption)
  nameWithType: Package.CreatePart(Uri,String,CompressionOption)
  fullName: System.IO.Packaging.Package.CreatePart(Uri,String,CompressionOption)
- uid: System.IO.Packaging.CompressionOption
  parent: System.IO.Packaging
  isExternal: false
  name: CompressionOption
  nameWithType: CompressionOption
  fullName: System.IO.Packaging.CompressionOption
- uid: System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreatePartCore(Uri,String,CompressionOption)
  nameWithType: Package.CreatePartCore(Uri,String,CompressionOption)
  fullName: System.IO.Packaging.Package.CreatePartCore(Uri,String,CompressionOption)
- uid: System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreateRelationship(Uri,TargetMode,String)
  nameWithType: Package.CreateRelationship(Uri,TargetMode,String)
  fullName: System.IO.Packaging.Package.CreateRelationship(Uri,TargetMode,String)
- uid: System.IO.Packaging.PackageRelationship
  parent: System.IO.Packaging
  isExternal: false
  name: PackageRelationship
  nameWithType: PackageRelationship
  fullName: System.IO.Packaging.PackageRelationship
- uid: System.IO.Packaging.TargetMode
  parent: System.IO.Packaging
  isExternal: false
  name: TargetMode
  nameWithType: TargetMode
  fullName: System.IO.Packaging.TargetMode
- uid: System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreateRelationship(Uri,TargetMode,String,String)
  nameWithType: Package.CreateRelationship(Uri,TargetMode,String,String)
  fullName: System.IO.Packaging.Package.CreateRelationship(Uri,TargetMode,String,String)
- uid: System.IO.Packaging.Package.DeletePart(System.Uri)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: DeletePart(Uri)
  nameWithType: Package.DeletePart(Uri)
  fullName: System.IO.Packaging.Package.DeletePart(Uri)
- uid: System.IO.Packaging.Package.DeletePartCore(System.Uri)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: DeletePartCore(Uri)
  nameWithType: Package.DeletePartCore(Uri)
  fullName: System.IO.Packaging.Package.DeletePartCore(Uri)
- uid: System.IO.Packaging.Package.DeleteRelationship(System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: DeleteRelationship(String)
  nameWithType: Package.DeleteRelationship(String)
  fullName: System.IO.Packaging.Package.DeleteRelationship(String)
- uid: System.IO.Packaging.Package.Dispose(System.Boolean)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Package.Dispose(Boolean)
  fullName: System.IO.Packaging.Package.Dispose(Boolean)
- uid: System.IO.Packaging.Package.FileOpenAccess
  parent: System.IO.Packaging.Package
  isExternal: false
  name: FileOpenAccess
  nameWithType: Package.FileOpenAccess
  fullName: System.IO.Packaging.Package.FileOpenAccess
- uid: System.IO.Packaging.Package.Flush
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Flush()
  nameWithType: Package.Flush()
  fullName: System.IO.Packaging.Package.Flush()
- uid: System.IO.Packaging.Package.FlushCore
  parent: System.IO.Packaging.Package
  isExternal: false
  name: FlushCore()
  nameWithType: Package.FlushCore()
  fullName: System.IO.Packaging.Package.FlushCore()
- uid: System.IO.Packaging.Package.GetPart(System.Uri)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetPart(Uri)
  nameWithType: Package.GetPart(Uri)
  fullName: System.IO.Packaging.Package.GetPart(Uri)
- uid: System.IO.Packaging.Package.GetPartCore(System.Uri)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetPartCore(Uri)
  nameWithType: Package.GetPartCore(Uri)
  fullName: System.IO.Packaging.Package.GetPartCore(Uri)
- uid: System.IO.Packaging.Package.GetParts
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetParts()
  nameWithType: Package.GetParts()
  fullName: System.IO.Packaging.Package.GetParts()
- uid: System.IO.Packaging.PackagePartCollection
  parent: System.IO.Packaging
  isExternal: false
  name: PackagePartCollection
  nameWithType: PackagePartCollection
  fullName: System.IO.Packaging.PackagePartCollection
- uid: System.IO.Packaging.Package.GetPartsCore
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetPartsCore()
  nameWithType: Package.GetPartsCore()
  fullName: System.IO.Packaging.Package.GetPartsCore()
- uid: System.IO.Packaging.PackagePart[]
  parent: System.IO.Packaging
  isExternal: false
  name: PackagePart
  nameWithType: PackagePart
  fullName: System.IO.Packaging.PackagePart[]
  spec.csharp:
  - uid: System.IO.Packaging.PackagePart
    name: PackagePart
    nameWithType: PackagePart
    fullName: PackagePart[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.Packaging.Package.GetRelationship(System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetRelationship(String)
  nameWithType: Package.GetRelationship(String)
  fullName: System.IO.Packaging.Package.GetRelationship(String)
- uid: System.IO.Packaging.Package.GetRelationships
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetRelationships()
  nameWithType: Package.GetRelationships()
  fullName: System.IO.Packaging.Package.GetRelationships()
- uid: System.IO.Packaging.PackageRelationshipCollection
  parent: System.IO.Packaging
  isExternal: false
  name: PackageRelationshipCollection
  nameWithType: PackageRelationshipCollection
  fullName: System.IO.Packaging.PackageRelationshipCollection
- uid: System.IO.Packaging.Package.GetRelationshipsByType(System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetRelationshipsByType(String)
  nameWithType: Package.GetRelationshipsByType(String)
  fullName: System.IO.Packaging.Package.GetRelationshipsByType(String)
- uid: System.IO.Packaging.Package.Open(System.IO.Stream)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open(Stream)
  nameWithType: Package.Open(Stream)
  fullName: System.IO.Packaging.Package.Open(Stream)
- uid: System.IO.Packaging.Package
  parent: System.IO.Packaging
  isExternal: false
  name: Package
  nameWithType: Package
  fullName: System.IO.Packaging.Package
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO.Packaging.Package.Open(System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open(String)
  nameWithType: Package.Open(String)
  fullName: System.IO.Packaging.Package.Open(String)
- uid: System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open(Stream,FileMode)
  nameWithType: Package.Open(Stream,FileMode)
  fullName: System.IO.Packaging.Package.Open(Stream,FileMode)
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  nameWithType: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open(String,FileMode)
  nameWithType: Package.Open(String,FileMode)
  fullName: System.IO.Packaging.Package.Open(String,FileMode)
- uid: System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open(Stream,FileMode,FileAccess)
  nameWithType: Package.Open(Stream,FileMode,FileAccess)
  fullName: System.IO.Packaging.Package.Open(Stream,FileMode,FileAccess)
- uid: System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open(String,FileMode,FileAccess)
  nameWithType: Package.Open(String,FileMode,FileAccess)
  fullName: System.IO.Packaging.Package.Open(String,FileMode,FileAccess)
- uid: System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open(String,FileMode,FileAccess,FileShare)
  nameWithType: Package.Open(String,FileMode,FileAccess,FileShare)
  fullName: System.IO.Packaging.Package.Open(String,FileMode,FileAccess,FileShare)
- uid: System.IO.FileShare
  parent: System.IO
  isExternal: false
  name: FileShare
  nameWithType: FileShare
  fullName: System.IO.FileShare
- uid: System.IO.Packaging.Package.PackageProperties
  parent: System.IO.Packaging.Package
  isExternal: false
  name: PackageProperties
  nameWithType: Package.PackageProperties
  fullName: System.IO.Packaging.Package.PackageProperties
- uid: System.IO.Packaging.PackageProperties
  parent: System.IO.Packaging
  isExternal: false
  name: PackageProperties
  nameWithType: PackageProperties
  fullName: System.IO.Packaging.PackageProperties
- uid: System.IO.Packaging.Package.PartExists(System.Uri)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: PartExists(Uri)
  nameWithType: Package.PartExists(Uri)
  fullName: System.IO.Packaging.Package.PartExists(Uri)
- uid: System.IO.Packaging.Package.RelationshipExists(System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: RelationshipExists(String)
  nameWithType: Package.RelationshipExists(String)
  fullName: System.IO.Packaging.Package.RelationshipExists(String)
- uid: System.IO.Packaging.Package.System#IDisposable#Dispose
  parent: System.IO.Packaging.Package
  isExternal: false
  name: System.IDisposable.Dispose()
  nameWithType: Package.System.IDisposable.Dispose()
  fullName: System.IO.Packaging.Package.System.IDisposable.Dispose()
- uid: System.IO.Packaging.Package.#ctor*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Package
  nameWithType: Package.Package
- uid: System.IO.Packaging.Package.Close*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Close
  nameWithType: Package.Close
- uid: System.IO.Packaging.Package.CreatePart*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreatePart
  nameWithType: Package.CreatePart
- uid: System.IO.Packaging.Package.CreatePartCore*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreatePartCore
  nameWithType: Package.CreatePartCore
- uid: System.IO.Packaging.Package.CreateRelationship*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreateRelationship
  nameWithType: Package.CreateRelationship
- uid: System.IO.Packaging.Package.DeletePart*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: DeletePart
  nameWithType: Package.DeletePart
- uid: System.IO.Packaging.Package.DeletePartCore*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: DeletePartCore
  nameWithType: Package.DeletePartCore
- uid: System.IO.Packaging.Package.DeleteRelationship*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: DeleteRelationship
  nameWithType: Package.DeleteRelationship
- uid: System.IO.Packaging.Package.Dispose*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Dispose
  nameWithType: Package.Dispose
- uid: System.IO.Packaging.Package.FileOpenAccess*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: FileOpenAccess
  nameWithType: Package.FileOpenAccess
- uid: System.IO.Packaging.Package.Flush*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Flush
  nameWithType: Package.Flush
- uid: System.IO.Packaging.Package.FlushCore*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: FlushCore
  nameWithType: Package.FlushCore
- uid: System.IO.Packaging.Package.GetPart*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetPart
  nameWithType: Package.GetPart
- uid: System.IO.Packaging.Package.GetPartCore*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetPartCore
  nameWithType: Package.GetPartCore
- uid: System.IO.Packaging.Package.GetParts*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetParts
  nameWithType: Package.GetParts
- uid: System.IO.Packaging.Package.GetPartsCore*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetPartsCore
  nameWithType: Package.GetPartsCore
- uid: System.IO.Packaging.Package.GetRelationship*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetRelationship
  nameWithType: Package.GetRelationship
- uid: System.IO.Packaging.Package.GetRelationships*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetRelationships
  nameWithType: Package.GetRelationships
- uid: System.IO.Packaging.Package.GetRelationshipsByType*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetRelationshipsByType
  nameWithType: Package.GetRelationshipsByType
- uid: System.IO.Packaging.Package.Open*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open
  nameWithType: Package.Open
- uid: System.IO.Packaging.Package.PackageProperties*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: PackageProperties
  nameWithType: Package.PackageProperties
- uid: System.IO.Packaging.Package.PartExists*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: PartExists
  nameWithType: Package.PartExists
- uid: System.IO.Packaging.Package.RelationshipExists*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: RelationshipExists
  nameWithType: Package.RelationshipExists
- uid: System.IO.Packaging.Package.System#IDisposable#Dispose*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: System.IDisposable.Dispose
  nameWithType: Package.System.IDisposable.Dispose
