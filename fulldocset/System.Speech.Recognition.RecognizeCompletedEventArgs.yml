### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.RecognizeCompletedEventArgs
  id: RecognizeCompletedEventArgs
  children:
  - System.Speech.Recognition.RecognizeCompletedEventArgs.AudioPosition
  - System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout
  - System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout
  - System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded
  - System.Speech.Recognition.RecognizeCompletedEventArgs.Result
  langs:
  - csharp
  name: RecognizeCompletedEventArgs
  nameWithType: RecognizeCompletedEventArgs
  fullName: System.Speech.Recognition.RecognizeCompletedEventArgs
  type: Class
  summary: "提供資料給<xref uid=&quot;langword_csharp_RecognizeCompleted&quot; name=&quot;RecognizeCompleted&quot; href=&quot;&quot;></xref>引發事件<xref href=&quot;System.Speech.Recognition.SpeechRecognitionEngine&quot;></xref>或<xref href=&quot;System.Speech.Recognition.SpeechRecognizer&quot;></xref>物件。"
  remarks: "執行個體<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>時，會建立<xref:System.Speech.Recognition.SpeechRecognitionEngine>或<xref:System.Speech.Recognition.SpeechRecognizer>物件引發其`SpeechRecognized`事件完成後的`RecognizeAsync`作業。</xref:System.Speech.Recognition.SpeechRecognizer> </xref:System.Speech.Recognition.SpeechRecognitionEngine> </xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> 如需 語音辨識事件的詳細資訊，請參閱[使用語音辨識事件](http://msdn.microsoft.com/en-us/01c598ca-2e0e-4e89-b303-cd1cef9e8482)。"
  example:
  - "The following example performs asynchronous speech recognition on a speech recognition grammar, using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A?displayProperty=fullName> method with the in-process recognizer. The example uses <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects to create the speech recognition grammar before building it into a <xref:System.Speech.Recognition.Grammar> object. A handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted?displayProperty=fullName> event outputs information about the recognition operation to the console.  \n  \n```  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    private static SpeechRecognitionEngine recognizer;  \n    public static void Main(string[] args)  \n    {  \n  \n      // Initialize a SpeechRecognitionEngine object and set its input.  \n      recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo(\"en-US\"));  \n      recognizer.SetInputToDefaultAudioDevice();  \n  \n      // Configure recognition parameters.  \n      recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(5.0);  \n      recognizer.BabbleTimeout = TimeSpan.FromSeconds(3.0);  \n      recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1.0);  \n      recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.0);  \n  \n      // Add a handler for the LoadGrammarCompleted event.  \n      recognizer.LoadGrammarCompleted +=  \n        new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n  \n      // Add a handler for the RecognizeCompleted event.  \n      recognizer.RecognizeCompleted +=   \n        new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  \n  \n      // Create a speech recognition grammar and build it into a Grammar object.  \n      Choices bankingMenu = new Choices(new string[]   \n      { \"Access accounts\", \"Transfer funds\", \"Pay bills\", \"Get loan balance\" });  \n      GrammarBuilder banking = new GrammarBuilder(bankingMenu);  \n      Grammar bankGrammar = new Grammar(banking);  \n      bankGrammar.Name = \"Banking Menu\";  \n  \n      // Load the Grammar objects to the recognizer.  \n      recognizer.LoadGrammarAsync(bankGrammar);  \n  \n      // Start asynchronous, continuous recognition.  \n      recognizer.RecognizeAsync();  \n  \n      // Keep the console window open.  \n      Console.ReadLine();  \n    }  \n  \n    // Handle the RecognizeCompleted event.  \n    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  \n    {  \n      if (e.Error != null)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted, error occurred during recognition: {0}\", e.Error);  \n        return;  \n      }  \n  \n      if (e.InitialSilenceTimeout || e.BabbleTimeout)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted: BabbleTimeout({0}), InitialSilenceTimeout({1}).\",  \n          e.BabbleTimeout, e.InitialSilenceTimeout);  \n        return;  \n      }  \n  \n      if (e.InputStreamEnded)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted: AudioPosition({0}), InputStreamEnded({1}).\",  \n          e.AudioPosition, e.InputStreamEnded);  \n      }  \n  \n      if (e.Result != null)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted: Grammar ({0}), Text ({1}), Confidence ({2}), AudioPosition ({3}).\",  \n          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence, e.AudioPosition);  \n      }  \n  \n      else  \n      {  \n        Console.WriteLine(\"RecognizeCompleted: No result.\");  \n      }   \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Handle the LoadGrammarCompleted event.   \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      string grammarName = e.Grammar.Name;  \n      bool grammarLoaded = e.Grammar.Loaded;  \n      bool grammarEnabled = e.Grammar.Enabled;  \n  \n      if (e.Error != null)  \n      {  \n        Console.WriteLine(\"LoadGrammar for {0} failed with a {1}.\",  \n        grammarName, e.Error.GetType().Name);  \n  \n        // Add exception handling code here.  \n      }  \n  \n      Console.WriteLine(\"Grammar {0} {1} loaded and {2} enabled.\", grammarName,   \n        (grammarLoaded) ? \"is\" : \"is not\", (grammarEnabled) ? \"is\" : \"is not\");  \n    }  \n  }            \n}  \n```"
  syntax:
    content: 'public class RecognizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs'
  inheritance:
  - System.ComponentModel.AsyncCompletedEventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizeCompletedEventArgs.AudioPosition
  id: AudioPosition
  parent: System.Speech.Recognition.RecognizeCompletedEventArgs
  langs:
  - csharp
  name: AudioPosition
  nameWithType: RecognizeCompletedEventArgs.AudioPosition
  fullName: System.Speech.Recognition.RecognizeCompletedEventArgs.AudioPosition
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "取得相關聯的輸入的裝置的音訊資料流中的位置<xref href=&quot;System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted&quot;></xref>事件。"
  remarks: "這個屬性會參考開頭位置的已辨識片語的輸入的裝置產生的音訊資料流中。 相反地，<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>屬性參考中的音訊輸入的辨識器的位置。</xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> 這些位置可能會不同。 如需詳細資訊，請參閱[使用語音辨識事件](http://msdn.microsoft.com/en-us/01c598ca-2e0e-4e89-b303-cd1cef9e8482)。"
  example:
  - "The following example performs asynchronous speech recognition on a speech recognition grammar, using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A?displayProperty=fullName> method with the in-process recognizer. The example uses <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects to create the speech recognition grammar before building it into a <xref:System.Speech.Recognition.Grammar> object. A handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted?displayProperty=fullName> event outputs information about the recognition operation to the console.  \n  \n```  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    private static SpeechRecognitionEngine recognizer;  \n    public static void Main(string[] args)  \n    {  \n  \n      // Initialize a SpeechRecognitionEngine object and set its input.  \n      recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo(\"en-US\"));  \n      recognizer.SetInputToDefaultAudioDevice();  \n  \n      // Configure recognition parameters.  \n      recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(5.0);  \n      recognizer.BabbleTimeout = TimeSpan.FromSeconds(3.0);  \n      recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1.0);  \n      recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.0);  \n  \n      // Add a handler for the LoadGrammarCompleted event.  \n      recognizer.LoadGrammarCompleted +=  \n        new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n  \n      // Add a handler for the RecognizeCompleted event.  \n      recognizer.RecognizeCompleted +=   \n        new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  \n  \n      // Create a speech recognition grammar and build it into a Grammar object.  \n      Choices bankingMenu = new Choices(new string[]   \n      { \"Access accounts\", \"Transfer funds\", \"Pay bills\", \"Get loan balance\" });  \n      GrammarBuilder banking = new GrammarBuilder(bankingMenu);  \n      Grammar bankGrammar = new Grammar(banking);  \n      bankGrammar.Name = \"Banking Menu\";  \n  \n      // Load the Grammar objects to the recognizer.  \n      recognizer.LoadGrammarAsync(bankGrammar);  \n  \n      // Start asynchronous, continuous recognition.  \n      recognizer.RecognizeAsync();  \n  \n      // Keep the console window open.  \n      Console.ReadLine();  \n    }  \n  \n    // Handle the RecognizeCompleted event.  \n    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  \n    {  \n      if (e.Error != null)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted, error occurred during recognition: {0}\", e.Error);  \n        return;  \n      }  \n  \n      if (e.InitialSilenceTimeout || e.BabbleTimeout)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted: BabbleTimeout({0}), InitialSilenceTimeout({1}).\",  \n          e.BabbleTimeout, e.InitialSilenceTimeout);  \n        return;  \n      }  \n  \n      if (e.InputStreamEnded)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted: AudioPosition({0}), InputStreamEnded({1}).\",  \n          e.AudioPosition, e.InputStreamEnded);  \n      }  \n  \n      if (e.Result != null)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted: Grammar ({0}), Text ({1}), Confidence ({2}), AudioPosition ({3}).\",  \n          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence, e.AudioPosition);  \n      }  \n  \n      else  \n      {  \n        Console.WriteLine(\"RecognizeCompleted: No result.\");  \n      }   \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Handle the LoadGrammarCompleted event.   \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      string grammarName = e.Grammar.Name;  \n      bool grammarLoaded = e.Grammar.Loaded;  \n      bool grammarEnabled = e.Grammar.Enabled;  \n  \n      if (e.Error != null)  \n      {  \n        Console.WriteLine(\"LoadGrammar for {0} failed with a {1}.\",  \n        grammarName, e.Error.GetType().Name);  \n  \n        // Add exception handling code here.  \n      }  \n  \n      Console.WriteLine(\"Grammar {0} {1} loaded and {2} enabled.\", grammarName,   \n        (grammarLoaded) ? \"is\" : \"is not\", (grammarEnabled) ? \"is\" : \"is not\");  \n    }  \n  }            \n}  \n  \n```"
  syntax:
    content: public TimeSpan AudioPosition { get; }
    return:
      type: System.TimeSpan
      description: "輸入的裝置的相關聯的音訊資料流中的位置<xref href=&quot;System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted&quot;></xref>事件。"
  overload: System.Speech.Recognition.RecognizeCompletedEventArgs.AudioPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout
  id: BabbleTimeout
  parent: System.Speech.Recognition.RecognizeCompletedEventArgs
  langs:
  - csharp
  name: BabbleTimeout
  nameWithType: RecognizeCompletedEventArgs.BabbleTimeout
  fullName: System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "取得值，指出是否要產生 babble 逾時<xref href=&quot;System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted&quot;></xref>事件。"
  remarks: ''
  example:
  - "The following example performs asynchronous speech recognition on a speech recognition grammar, using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A?displayProperty=fullName> method with the in-process recognizer. The example uses <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects to create the speech recognition grammar before building it into a <xref:System.Speech.Recognition.Grammar> object. A handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted?displayProperty=fullName> event outputs information about the recognition operation to the console.  \n  \n```  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    private static SpeechRecognitionEngine recognizer;  \n    public static void Main(string[] args)  \n    {  \n  \n      // Initialize a SpeechRecognitionEngine object and set its input.  \n      recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo(\"en-US\"));  \n      recognizer.SetInputToDefaultAudioDevice();  \n  \n      // Configure recognition parameters.  \n      recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(5.0);  \n      recognizer.BabbleTimeout = TimeSpan.FromSeconds(3.0);  \n      recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1.0);  \n      recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.0);  \n  \n      // Add a handler for the LoadGrammarCompleted event.  \n      recognizer.LoadGrammarCompleted +=  \n        new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n  \n      // Add a handler for the RecognizeCompleted event.  \n      recognizer.RecognizeCompleted +=   \n        new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  \n  \n      // Create a speech recognition grammar and build it into a Grammar object.  \n      Choices bankingMenu = new Choices(new string[]   \n      { \"Access accounts\", \"Transfer funds\", \"Pay bills\", \"Get loan balance\" });  \n      GrammarBuilder banking = new GrammarBuilder(bankingMenu);  \n      Grammar bankGrammar = new Grammar(banking);  \n      bankGrammar.Name = \"Banking Menu\";  \n  \n      // Load the Grammar objects to the recognizer.  \n      recognizer.LoadGrammarAsync(bankGrammar);  \n  \n      // Start asynchronous, continuous recognition.  \n      recognizer.RecognizeAsync();  \n  \n      // Keep the console window open.  \n      Console.ReadLine();  \n    }  \n  \n    // Handle the RecognizeCompleted event.  \n    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  \n    {  \n      if (e.Error != null)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted, error occurred during recognition: {0}\", e.Error);  \n        return;  \n      }  \n  \n      if (e.InitialSilenceTimeout || e.BabbleTimeout)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted: BabbleTimeout({0}), InitialSilenceTimeout({1}).\",  \n          e.BabbleTimeout, e.InitialSilenceTimeout);  \n        return;  \n      }  \n  \n      if (e.InputStreamEnded)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted: AudioPosition({0}), InputStreamEnded({1}).\",  \n          e.AudioPosition, e.InputStreamEnded);  \n      }  \n  \n      if (e.Result != null)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted: Grammar ({0}), Text ({1}), Confidence ({2}), AudioPosition ({3}).\",  \n          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence, e.AudioPosition);  \n      }  \n  \n      else  \n      {  \n        Console.WriteLine(\"RecognizeCompleted: No result.\");  \n      }   \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Handle the LoadGrammarCompleted event.   \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      string grammarName = e.Grammar.Name;  \n      bool grammarLoaded = e.Grammar.Loaded;  \n      bool grammarEnabled = e.Grammar.Enabled;  \n  \n      if (e.Error != null)  \n      {  \n        Console.WriteLine(\"LoadGrammar for {0} failed with a {1}.\",  \n        grammarName, e.Error.GetType().Name);  \n  \n        // Add exception handling code here.  \n      }  \n  \n      Console.WriteLine(\"Grammar {0} {1} loaded and {2} enabled.\", grammarName,   \n        (grammarLoaded) ? \"is\" : \"is not\", (grammarEnabled) ? \"is\" : \"is not\");  \n    }  \n  }            \n}  \n  \n```"
  syntax:
    content: public bool BabbleTimeout { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Speech.Recognition.SpeechRecognitionEngine&quot;></xref>偵測到的長度超過所指定的唯一背景噪音其<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout*>屬性，否則為<xref uid=&quot;langword_csharp_false.&quot; name=&quot;false.&quot; href=&quot;&quot;> </xref> </xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout*>"
  overload: System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout
  id: InitialSilenceTimeout
  parent: System.Speech.Recognition.RecognizeCompletedEventArgs
  langs:
  - csharp
  name: InitialSilenceTimeout
  nameWithType: RecognizeCompletedEventArgs.InitialSilenceTimeout
  fullName: System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "取得值，指出是否要產生的初始無回應逾時<xref href=&quot;System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted&quot;></xref>事件。"
  remarks: ''
  example:
  - "The following example performs asynchronous speech recognition on a speech recognition grammar, using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A?displayProperty=fullName> method with the in-process recognizer. The example uses <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects to create the speech recognition grammar before building it into a <xref:System.Speech.Recognition.Grammar> object. A handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted?displayProperty=fullName> event outputs information about the recognition operation to the console.  \n  \n```  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    private static SpeechRecognitionEngine recognizer;  \n    public static void Main(string[] args)  \n    {  \n  \n      // Initialize a SpeechRecognitionEngine object and set its input.  \n      recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo(\"en-US\"));  \n      recognizer.SetInputToDefaultAudioDevice();  \n  \n      // Configure recognition parameters.  \n      recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(5.0);  \n      recognizer.BabbleTimeout = TimeSpan.FromSeconds(3.0);  \n      recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1.0);  \n      recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.0);  \n  \n      // Add a handler for the LoadGrammarCompleted event.  \n      recognizer.LoadGrammarCompleted +=  \n        new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n  \n      // Add a handler for the RecognizeCompleted event.  \n      recognizer.RecognizeCompleted +=   \n        new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  \n  \n      // Create a speech recognition grammar and build it into a Grammar object.  \n      Choices bankingMenu = new Choices(new string[]   \n      { \"Access accounts\", \"Transfer funds\", \"Pay bills\", \"Get loan balance\" });  \n      GrammarBuilder banking = new GrammarBuilder(bankingMenu);  \n      Grammar bankGrammar = new Grammar(banking);  \n      bankGrammar.Name = \"Banking Menu\";  \n  \n      // Load the Grammar objects to the recognizer.  \n      recognizer.LoadGrammarAsync(bankGrammar);  \n  \n      // Start asynchronous, continuous recognition.  \n      recognizer.RecognizeAsync();  \n  \n      // Keep the console window open.  \n      Console.ReadLine();  \n    }  \n  \n    // Handle the RecognizeCompleted event.  \n    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  \n    {  \n      if (e.Error != null)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted, error occurred during recognition: {0}\", e.Error);  \n        return;  \n      }  \n  \n      if (e.InitialSilenceTimeout || e.BabbleTimeout)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted: BabbleTimeout({0}), InitialSilenceTimeout({1}).\",  \n          e.BabbleTimeout, e.InitialSilenceTimeout);  \n        return;  \n      }  \n  \n      if (e.InputStreamEnded)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted: AudioPosition({0}), InputStreamEnded({1}).\",  \n          e.AudioPosition, e.InputStreamEnded);  \n      }  \n  \n      if (e.Result != null)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted: Grammar ({0}), Text ({1}), Confidence ({2}), AudioPosition ({3}).\",  \n          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence, e.AudioPosition);  \n      }  \n  \n      else  \n      {  \n        Console.WriteLine(\"RecognizeCompleted: No result.\");  \n      }   \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Handle the LoadGrammarCompleted event.   \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      string grammarName = e.Grammar.Name;  \n      bool grammarLoaded = e.Grammar.Loaded;  \n      bool grammarEnabled = e.Grammar.Enabled;  \n  \n      if (e.Error != null)  \n      {  \n        Console.WriteLine(\"LoadGrammar for {0} failed with a {1}.\",  \n        grammarName, e.Error.GetType().Name);  \n  \n        // Add exception handling code here.  \n      }  \n  \n      Console.WriteLine(\"Grammar {0} {1} loaded and {2} enabled.\", grammarName,   \n        (grammarLoaded) ? \"is\" : \"is not\", (grammarEnabled) ? \"is\" : \"is not\");  \n    }  \n  }            \n}  \n  \n```"
  syntax:
    content: public bool InitialSilenceTimeout { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Speech.Recognition.SpeechRecognitionEngine&quot;></xref>偵測只有無回應的較長的時間期間所指定非其<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout*>屬性，否則為<xref uid=&quot;langword_csharp_false.&quot; name=&quot;false.&quot; href=&quot;&quot;> </xref> </xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout*>"
  overload: System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded
  id: InputStreamEnded
  parent: System.Speech.Recognition.RecognizeCompletedEventArgs
  langs:
  - csharp
  name: InputStreamEnded
  nameWithType: RecognizeCompletedEventArgs.InputStreamEnded
  fullName: System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "取得值，指出輸入資料流是否結束。"
  remarks: "辨識器會將此屬性設定為`true`當檔案提供可用的輸入資料流來辨識器，並在達到檔案結尾。 成功的辨識作業可以符合輸入資料流的結尾。 如需使用檔案與輸入資料流的詳細資訊，請參閱<xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>和<xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>方法。</xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A> </xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>"
  example:
  - "The following example performs asynchronous speech recognition on a speech recognition grammar, using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A?displayProperty=fullName> method with the in-process recognizer. The example uses <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects to create the speech recognition grammar before building it into a <xref:System.Speech.Recognition.Grammar> object. A handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted?displayProperty=fullName> event outputs information about the recognition operation to the console.  \n  \n```  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    private static SpeechRecognitionEngine recognizer;  \n    public static void Main(string[] args)  \n    {  \n  \n      // Initialize a SpeechRecognitionEngine object and set its input.  \n      recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo(\"en-US\"));  \n      recognizer.SetInputToDefaultAudioDevice();  \n  \n      // Configure recognition parameters.  \n      recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(5.0);  \n      recognizer.BabbleTimeout = TimeSpan.FromSeconds(3.0);  \n      recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1.0);  \n      recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.0);  \n  \n      // Add a handler for the LoadGrammarCompleted event.  \n      recognizer.LoadGrammarCompleted +=  \n        new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n  \n      // Add a handler for the RecognizeCompleted event.  \n      recognizer.RecognizeCompleted +=   \n        new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  \n  \n      // Create a speech recognition grammar and build it into a Grammar object.  \n      Choices bankingMenu = new Choices(new string[]   \n      { \"Access accounts\", \"Transfer funds\", \"Pay bills\", \"Get loan balance\" });  \n      GrammarBuilder banking = new GrammarBuilder(bankingMenu);  \n      Grammar bankGrammar = new Grammar(banking);  \n      bankGrammar.Name = \"Banking Menu\";  \n  \n      // Load the Grammar objects to the recognizer.  \n      recognizer.LoadGrammarAsync(bankGrammar);  \n  \n      // Start asynchronous, continuous recognition.  \n      recognizer.RecognizeAsync();  \n  \n      // Keep the console window open.  \n      Console.ReadLine();  \n    }  \n  \n    // Handle the RecognizeCompleted event.  \n    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  \n    {  \n      if (e.Error != null)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted, error occurred during recognition: {0}\", e.Error);  \n        return;  \n      }  \n  \n      if (e.InitialSilenceTimeout || e.BabbleTimeout)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted: BabbleTimeout({0}), InitialSilenceTimeout({1}).\",  \n          e.BabbleTimeout, e.InitialSilenceTimeout);  \n        return;  \n      }  \n  \n      if (e.InputStreamEnded)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted: AudioPosition({0}), InputStreamEnded({1}).\",  \n          e.AudioPosition, e.InputStreamEnded);  \n      }  \n  \n      if (e.Result != null)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted: Grammar ({0}), Text ({1}), Confidence ({2}), AudioPosition ({3}).\",  \n          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence, e.AudioPosition);  \n      }  \n  \n      else  \n      {  \n        Console.WriteLine(\"RecognizeCompleted: No result.\");  \n      }   \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Handle the LoadGrammarCompleted event.   \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      string grammarName = e.Grammar.Name;  \n      bool grammarLoaded = e.Grammar.Loaded;  \n      bool grammarEnabled = e.Grammar.Enabled;  \n  \n      if (e.Error != null)  \n      {  \n        Console.WriteLine(\"LoadGrammar for {0} failed with a {1}.\",  \n        grammarName, e.Error.GetType().Name);  \n  \n        // Add exception handling code here.  \n      }  \n  \n      Console.WriteLine(\"Grammar {0} {1} loaded and {2} enabled.\", grammarName,   \n        (grammarLoaded) ? \"is\" : \"is not\", (grammarEnabled) ? \"is\" : \"is not\");  \n    }  \n  }            \n}  \n  \n```"
  syntax:
    content: public bool InputStreamEnded { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果辨識器不會再音訊的輸入，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizeCompletedEventArgs.Result
  id: Result
  parent: System.Speech.Recognition.RecognizeCompletedEventArgs
  langs:
  - csharp
  name: Result
  nameWithType: RecognizeCompletedEventArgs.Result
  fullName: System.Speech.Recognition.RecognizeCompletedEventArgs.Result
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "取得辨識結果。"
  remarks: "<xref:System.Speech.Recognition.RecognitionResult>物件衍生自<xref:System.Speech.Recognition.RecognizedPhrase>和包含片語辨識作業所傳回的完整資訊。</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognitionResult>"
  example:
  - "The following example performs asynchronous speech recognition on a speech recognition grammar, using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A?displayProperty=fullName> method with the in-process recognizer. The example uses <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects to create the speech recognition grammar before building it into a <xref:System.Speech.Recognition.Grammar> object. A handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted?displayProperty=fullName> event outputs information about the recognition operation to the console.  \n  \n```  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    private static SpeechRecognitionEngine recognizer;  \n    public static void Main(string[] args)  \n    {  \n  \n      // Initialize a SpeechRecognitionEngine object and set its input.  \n      recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo(\"en-US\"));  \n      recognizer.SetInputToDefaultAudioDevice();  \n  \n      // Configure recognition parameters.  \n      recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(5.0);  \n      recognizer.BabbleTimeout = TimeSpan.FromSeconds(3.0);  \n      recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1.0);  \n      recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.0);  \n  \n      // Add a handler for the LoadGrammarCompleted event.  \n      recognizer.LoadGrammarCompleted +=  \n        new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n  \n      // Add a handler for the RecognizeCompleted event.  \n      recognizer.RecognizeCompleted +=   \n        new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  \n  \n      // Create a speech recognition grammar and build it into a Grammar object.  \n      Choices bankingMenu = new Choices(new string[]   \n      { \"Access accounts\", \"Transfer funds\", \"Pay bills\", \"Get loan balance\" });  \n      GrammarBuilder banking = new GrammarBuilder(bankingMenu);  \n      Grammar bankGrammar = new Grammar(banking);  \n      bankGrammar.Name = \"Banking Menu\";  \n  \n      // Load the Grammar objects to the recognizer.  \n      recognizer.LoadGrammarAsync(bankGrammar);  \n  \n      // Start asynchronous, continuous recognition.  \n      recognizer.RecognizeAsync();  \n  \n      // Keep the console window open.  \n      Console.ReadLine();  \n    }  \n  \n    // Handle the RecognizeCompleted event.  \n    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  \n    {  \n      if (e.Error != null)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted, error occurred during recognition: {0}\", e.Error);  \n        return;  \n      }  \n  \n      if (e.InitialSilenceTimeout || e.BabbleTimeout)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted: BabbleTimeout({0}), InitialSilenceTimeout({1}).\",  \n          e.BabbleTimeout, e.InitialSilenceTimeout);  \n        return;  \n      }  \n  \n      if (e.InputStreamEnded)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted: AudioPosition({0}), InputStreamEnded({1}).\",  \n          e.AudioPosition, e.InputStreamEnded);  \n      }  \n  \n      if (e.Result != null)  \n      {  \n        Console.WriteLine(  \n          \"RecognizeCompleted: Grammar ({0}), Text ({1}), Confidence ({2}), AudioPosition ({3}).\",  \n          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence, e.AudioPosition);  \n      }  \n  \n      else  \n      {  \n        Console.WriteLine(\"RecognizeCompleted: No result.\");  \n      }   \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Handle the LoadGrammarCompleted event.   \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      string grammarName = e.Grammar.Name;  \n      bool grammarLoaded = e.Grammar.Loaded;  \n      bool grammarEnabled = e.Grammar.Enabled;  \n  \n      if (e.Error != null)  \n      {  \n        Console.WriteLine(\"LoadGrammar for {0} failed with a {1}.\",  \n        grammarName, e.Error.GetType().Name);  \n  \n        // Add exception handling code here.  \n      }  \n  \n      Console.WriteLine(\"Grammar {0} {1} loaded and {2} enabled.\", grammarName,   \n        (grammarLoaded) ? \"is\" : \"is not\", (grammarEnabled) ? \"is\" : \"is not\");  \n    }  \n  }            \n}  \n  \n```"
  syntax:
    content: public System.Speech.Recognition.RecognitionResult Result { get; }
    return:
      type: System.Speech.Recognition.RecognitionResult
      description: "辨識結果，如果辨識作業執行成功，否則， <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Speech.Recognition.RecognizeCompletedEventArgs.Result*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.AsyncCompletedEventArgs
  isExternal: false
  name: System.ComponentModel.AsyncCompletedEventArgs
- uid: System.Speech.Recognition.RecognizeCompletedEventArgs.AudioPosition
  parent: System.Speech.Recognition.RecognizeCompletedEventArgs
  isExternal: false
  name: AudioPosition
  nameWithType: RecognizeCompletedEventArgs.AudioPosition
  fullName: System.Speech.Recognition.RecognizeCompletedEventArgs.AudioPosition
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout
  parent: System.Speech.Recognition.RecognizeCompletedEventArgs
  isExternal: false
  name: BabbleTimeout
  nameWithType: RecognizeCompletedEventArgs.BabbleTimeout
  fullName: System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout
  parent: System.Speech.Recognition.RecognizeCompletedEventArgs
  isExternal: false
  name: InitialSilenceTimeout
  nameWithType: RecognizeCompletedEventArgs.InitialSilenceTimeout
  fullName: System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout
- uid: System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded
  parent: System.Speech.Recognition.RecognizeCompletedEventArgs
  isExternal: false
  name: InputStreamEnded
  nameWithType: RecognizeCompletedEventArgs.InputStreamEnded
  fullName: System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded
- uid: System.Speech.Recognition.RecognizeCompletedEventArgs.Result
  parent: System.Speech.Recognition.RecognizeCompletedEventArgs
  isExternal: false
  name: Result
  nameWithType: RecognizeCompletedEventArgs.Result
  fullName: System.Speech.Recognition.RecognizeCompletedEventArgs.Result
- uid: System.Speech.Recognition.RecognitionResult
  parent: System.Speech.Recognition
  isExternal: false
  name: RecognitionResult
  nameWithType: RecognitionResult
  fullName: System.Speech.Recognition.RecognitionResult
- uid: System.Speech.Recognition.RecognizeCompletedEventArgs.AudioPosition*
  parent: System.Speech.Recognition.RecognizeCompletedEventArgs
  isExternal: false
  name: AudioPosition
  nameWithType: RecognizeCompletedEventArgs.AudioPosition
- uid: System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout*
  parent: System.Speech.Recognition.RecognizeCompletedEventArgs
  isExternal: false
  name: BabbleTimeout
  nameWithType: RecognizeCompletedEventArgs.BabbleTimeout
- uid: System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout*
  parent: System.Speech.Recognition.RecognizeCompletedEventArgs
  isExternal: false
  name: InitialSilenceTimeout
  nameWithType: RecognizeCompletedEventArgs.InitialSilenceTimeout
- uid: System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded*
  parent: System.Speech.Recognition.RecognizeCompletedEventArgs
  isExternal: false
  name: InputStreamEnded
  nameWithType: RecognizeCompletedEventArgs.InputStreamEnded
- uid: System.Speech.Recognition.RecognizeCompletedEventArgs.Result*
  parent: System.Speech.Recognition.RecognizeCompletedEventArgs
  isExternal: false
  name: Result
  nameWithType: RecognizeCompletedEventArgs.Result
