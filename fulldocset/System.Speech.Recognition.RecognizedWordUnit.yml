### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.RecognizedWordUnit
  id: RecognizedWordUnit
  children:
  - System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)
  - System.Speech.Recognition.RecognizedWordUnit.Confidence
  - System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  - System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  - System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  - System.Speech.Recognition.RecognizedWordUnit.Text
  langs:
  - csharp
  name: RecognizedWordUnit
  nameWithType: RecognizedWordUnit
  fullName: System.Speech.Recognition.RecognizedWordUnit
  type: Class
  summary: "提供辨識語音不可部分完成的單位。"
  remarks: "辨識引擎所傳回的所有結果都是 RecognizedWordUnit 物件的都建構。       RecognizedWordUnit 物件的陣列，是透過任何辨識作業存取<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>屬性<xref:System.Speech.Recognition.RecognizedPhrase>物件。</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>       除了提供辨識確定程度的量值 (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) RecognizedWordUnit 執行個體會提供:-正規化和確切 （或語彙） 辨識的字的文字表示法。</xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> 如需詳細資訊，請參閱<xref:System.Speech.Recognition.ReplacementText>， <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>，和<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>。</xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> </xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> </xref:System.Speech.Recognition.ReplacementText>      -使用支援的注音字母，例如國際音標 (IPA) 或萬用電話設定 (UPS) 中的字元發音資訊。 如需詳細資訊，請參閱<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.</xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>      格式化進行列印。 如需詳細資訊，請參閱<xref:System.Speech.Recognition.DisplayAttributes>類別和其<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>屬性。</xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> </xref:System.Speech.Recognition.DisplayAttributes>"
  example:
  - "The following example shows a utility routine (`stringFromWordArray`) that generates strings. The strings contain lexical output (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized text (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetic characters from the International Phonetic Alphabet (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). Strings are formatted using <xref:System.Speech.Recognition.DisplayAttributes> objects obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of RecognizedWordUnit objects. The RecognizedWordUnit objects are obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(String.Format(\"[0}: is not a valid input\", type));  \n    }  \n    // Use display attribute  \n  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Text: {Text}")]

      public class RecognizedWordUnit
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)
  id: '#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)'
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  nameWithType: RecognizedWordUnit.RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  fullName: System.Speech.Recognition.RecognizedWordUnit.RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新執行個體<xref href=&quot;System.Speech.Recognition.RecognizedWordUnit&quot;></xref>類別。"
  remarks: "如果`text`或`pronunciation`是`null`，&quot;&quot;，或<xref:System.String.Empty>和<xref:System.Speech.Recognition.RecognizedWordUnit>用在辨識作業中，辨識引擎將會產生任何輸出中的適當值<xref:System.Speech.Recognition.RecognizedWordUnit>執行個體。</xref:System.Speech.Recognition.RecognizedWordUnit> </xref:System.Speech.Recognition.RecognizedWordUnit> </xref:System.String.Empty>       <xref:System.Speech.Recognition.RecognizedWordUnit>執行個體通常只有在模擬辨識作業使用<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>的<xref:System.Speech.Recognition.SpeechRecognitionEngine>類別，<xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A>或<xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A>方法的<xref:System.Speech.Recognition.SpeechRecognizer>類別</xref:System.Speech.Recognition.SpeechRecognizer></xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A></xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A></xref:System.Speech.Recognition.SpeechRecognitionEngine>或<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>方法</xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A></xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>時，才使用</xref:System.Speech.Recognition.RecognizedWordUnit>直接建構       實際的應用程式，請不要直接建構<xref:System.Speech.Recognition.RecognizedWordUnit>，而不是取得其傳遞<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>屬性<xref:System.Speech.Recognition.RecognizedPhrase>物件。</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> </xref:System.Speech.Recognition.RecognizedWordUnit>"
  example:
  - "The following example is a somewhat contrived test of emulation, where new words are generated from the input and passed to the emulator, and then verified.  \n  \n```c#  \nprivate void _emulateAndVerify_Click(object sender, EventArgs e)   \n{  \n  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\\t' };  \n  string text = _emulateTextBox.Text;  \n  string[] words = text.Split(delimiterChars);  \n  \n  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  \n  for (int i = 0; i < words.Length; i++)   \n  {  \n    InputWordUnits[i] = new RecognizedWordUnit(  \n        \"\",   \n        0,   \n        \"\",  \n        words[i].ToLower(),   \n        DisplayAttributes.OneTrailingSpace,   \n        new TimeSpan(),   \n        new TimeSpan());  \n  }  \n  \n  RecognitionResult rec = _recognizer.EmulateRecognize(  \n        InputWordUnits,   \n        System.Globalization.CompareOptions.IgnoreCase);  \n  if (rec == null)   \n  {  \n    MessageBox.Show(String.Format(\"Recognition emulation for {0} failed.\\n\", text));  \n  }   \n  else if (InputWordUnits.Length != rec.Words.Count)   \n  {  \n    MessageBox.Show(  \n       String.Format(\"Length mismatch: Input was {0} words, Recognition has {1} words.\\n}\"));  \n  }   \n  else   \n  {  \n    for (int i = 0; i < InputWordUnits.Length; i++)   \n    {  \n  \n      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   \n      {  \n        MessageBox.Show(  \n          String.Format(\"Input word {0} \\\"{1}\\\" not found. Recognition output is {2}\",  \n          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  \n        continue;  \n      }  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);
    parameters:
    - id: text
      type: System.String
      description: "辨識的字正規化的文字。       這個值可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，&quot;&quot;，或<xref:System.String>.</xref:System.String>"
    - id: confidence
      type: System.Single
      description: "A <xref uid=&quot;langword_csharp_float&quot; name=&quot;float&quot; href=&quot;&quot;> </xref>介於 0.0 到 1.0 表示 word 辨識確信之間的值。"
    - id: pronunciation
      type: System.String
      description: "可辨識的單字的注音標示拼字。       這個值可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，&quot;&quot;，或<xref:System.String>.</xref:System.String>"
    - id: lexicalForm
      type: System.String
      description: "可辨識的文字未正規化的文字。       這個引數是必要的而且不能<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，&quot;&quot;，或<xref:System.String>.</xref:System.String>"
    - id: displayAttributes
      type: System.Speech.Recognition.DisplayAttributes
      description: "定義使用泛空白字元顯示辨識的字。"
    - id: audioPosition
      type: System.TimeSpan
      description: "可辨識的字音訊的輸入資料流中的位置。       這個值可以是<xref:System.TimeSpan>.</xref:System.TimeSpan>"
    - id: audioDuration
      type: System.TimeSpan
      description: "音訊輸入對應至已辨識文字的長度。       這個值可以是<xref:System.TimeSpan>.</xref:System.TimeSpan>"
  overload: System.Speech.Recognition.RecognizedWordUnit.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.Confidence
  id: Confidence
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: Confidence
  nameWithType: RecognizedWordUnit.Confidence
  fullName: System.Speech.Recognition.RecognizedWordUnit.Confidence
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "取得值，指派辨識器，表示已辨識的字符合指定之輸入的可能性。"
  remarks: "信心分數並不表示絕對 word 已正確辨識的可能性。 相反地，信心分數會提供機制來比較多個的辨識替代項目為給定的輸入的準確度。 這有助於傳回最精確的辨識結果。 例如，如果辨識的字 0.8 的信心分數，這不表示 word 已輸入正確的比對的 80%的機率。  表示這個字是較有可能比其他結果，確保輸入正確的符合分數小於 0.8。       信心分數本身沒有任何意義，除非您有要比較，從相同的辨識作業，或是從先前 recognitions 相同輸入的替代結果。       傳回值的信心會為每個辨識引擎相對且唯一。 沒有任何定義如何比較兩個不同辨識引擎之間的信賴值，或如何信賴度的個別<xref:System.Speech.Recognition.RecognizedWordUnit>物件定義<xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A>的<xref:System.Speech.Recognition.RecognizedPhrase>。</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> </xref:System.Speech.Recognition.RecognizedWordUnit>       語音辨識引擎可能會基於各種原因，包括背景干擾、 inarticulate 語音，或非預期的單字或單字順序，以指派給語音輸入低信心分數。 如果您的應用程式使用<xref:System.Speech.Recognition.SpeechRecognitionEngine>執行個體，您可以修改信心層級上的語音，輸入已接受或拒絕使用其中一個<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>方法。</xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> </xref:System.Speech.Recognition.SpeechRecognitionEngine> 共用辨識器所管理的信賴閾值<xref:System.Speech.Recognition.SpeechRecognizer>、 相關聯的使用者設定檔和 Windows 登錄中儲存。</xref:System.Speech.Recognition.SpeechRecognizer> 應用程式應該不會寫入登錄的共用辨識器的屬性變更。"
  syntax:
    content: public float Confidence { get; }
    return:
      type: System.Single
      description: "正確辨識的單字的確定性相對量值。 值是從 0.0 到 1.0，低度到高度的信心，分別。"
  overload: System.Speech.Recognition.RecognizedWordUnit.Confidence*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  id: DisplayAttributes
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: DisplayAttributes
  nameWithType: RecognizedWordUnit.DisplayAttributes
  fullName: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "取得格式設定資訊用來建立從目前的文字輸出<xref href=&quot;System.Speech.Recognition.RecognizedWordUnit&quot;></xref>執行個體。"
  remarks: "<xref:System.Speech.Recognition.DisplayAttributes>DisplayAttributes 屬性所傳回的物件會指定用於給定的字詞，開頭和尾端空白，如果有的話。</xref:System.Speech.Recognition.DisplayAttributes>       如需如何使用這些資訊的詳細資訊，請參閱<xref:System.Speech.Recognition.DisplayAttributes>列舉型別。</xref:System.Speech.Recognition.DisplayAttributes>"
  example:
  - "The following example shows a utility routine (`stringFromWordArray`) that generates a string that is formatted in one of three ways: lexically (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetically (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from the DisplayAttributes property on a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on a <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(  \n        ReadOnlyCollection<RecognizedWordUnit> words,   \n        WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }  \n    else if (type == WordType.Pronunciation)   \n    {  \n       wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n         String.Format(\"[0}: is not a valid input\", type));  \n    }  \n  \n    // Use display attribute  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }
    return:
      type: System.Speech.Recognition.DisplayAttributes
      description: "指定的空白字元，若要顯示的內容使用<xref href=&quot;System.Speech.Recognition.RecognizedWordUnit&quot;></xref>物件。"
  overload: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  id: LexicalForm
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: LexicalForm
  nameWithType: RecognizedWordUnit.LexicalForm
  fullName: System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "取得可辨識的字組未正規化的文字。"
  remarks: "在大部分情況下所傳回的值<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>與 LexicalForm 完全相同。</xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> 不過，辨識引擎可能會使用語音正規化，以傳回更方便使用或 colloquial 的文字表示法音訊輸入。       語音正規化是使用特殊建構或符號來表示語音撰寫。 例如，正規化可以取代口語 「 貨幣和&16; 個美分 」&quot;$1.16&quot;輸出文字中。"
  example:
  - "The following example shows a utility routine that generates text in one of three formats: lexical (using LexicalForm), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(  \n         ReadOnlyCollection<RecognizedWordUnit> words,   \n         WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n          String.Format(\"[0}: is not a valid input\", type));  \n    }  \n  \n    // Use display attribute  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  \n    {  \n    wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public string LexicalForm { get; }
    return:
      type: System.String
      description: "傳回<xref:System.String>包含可辨識的文字，沒有任何正規化文字。</xref:System.String>"
  overload: System.Speech.Recognition.RecognizedWordUnit.LexicalForm*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  id: Pronunciation
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: Pronunciation
  nameWithType: RecognizedWordUnit.Pronunciation
  fullName: System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "取得語音辨識的字的拼字。"
  remarks: "發音的內容表示語音辨識引擎用來比對其載入其中一個動作的語音輸入哪些發音<xref:System.Speech.Recognition.Grammar>物件。</xref:System.Speech.Recognition.Grammar> 中的語音辨識引擎內部詞素連結從辨識文法中載入 lexicon 文件中可能會定義發音<xref:System.Speech.Recognition.Grammar>物件，或是內嵌於辨識文法中載入<xref:System.Speech.Recognition.Grammar>物件。</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.Grammar> 語音辨識引擎也可能會建立常見字詞詞素或語音辨識引擎目前擁有的存取權的文法中未定義其發音的發音。       許多 windows Unicode 字型，例如︰ Courier New，支援 IPA 字串的顯示。 如需詳細資訊，請參閱[國際音標](http://go.microsoft.com/fwlink/?LinkId=58363)。"
  example:
  - "The following example shows a utility routine that generates a string with one of three possible formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using Pronunciation). The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(  \n          ReadOnlyCollection<RecognizedWordUnit> words,   \n          WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n          String.Format(\"[0}: is not a valid input\", type));  \n    }  \n    // Use display attribute  \n  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public string Pronunciation { get; }
    return:
      type: System.String
      description: "從支援的語音字母，例如國際音標 (IPA) 或萬用電話設定 (UPS) 字元的字串。"
  overload: System.Speech.Recognition.RecognizedWordUnit.Pronunciation*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.Text
  id: Text
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: Text
  nameWithType: RecognizedWordUnit.Text
  fullName: System.Speech.Recognition.RecognizedWordUnit.Text
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "取得可辨識的字組的正規化的文字。"
  remarks: "在大部分情況下傳回值的文字和<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>會完全相同。</xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> 不過，辨識引擎可能會使用語音正規化，以傳回更方便使用或 colloquial 的文字表示法音訊輸入。       語音正規化是使用特殊建構或符號來表示語音撰寫。 例如，正規化可以取代口語 「 貨幣和&16; 個美分 」&quot;$1.16&quot;輸出文字中。"
  example:
  - "The following example shows a utility routine that generates a string in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using Text), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(  \n          ReadOnlyCollection<RecognizedWordUnit> words,   \n          WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n           String.Format(\"[0}: is not a valid input\", type));  \n    }  \n  \n    // Use display attribute  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public string Text { get; }
    return:
      type: System.String
      description: "字串，包含指定的輸入單字的正規化的文字輸出。"
  overload: System.Speech.Recognition.RecognizedWordUnit.Text*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  nameWithType: RecognizedWordUnit.RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  fullName: System.Speech.Recognition.RecognizedWordUnit.RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Speech.Recognition.DisplayAttributes
  parent: System.Speech.Recognition
  isExternal: false
  name: DisplayAttributes
  nameWithType: DisplayAttributes
  fullName: System.Speech.Recognition.DisplayAttributes
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Speech.Recognition.RecognizedWordUnit.Confidence
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Confidence
  nameWithType: RecognizedWordUnit.Confidence
  fullName: System.Speech.Recognition.RecognizedWordUnit.Confidence
- uid: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: DisplayAttributes
  nameWithType: RecognizedWordUnit.DisplayAttributes
  fullName: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
- uid: System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: LexicalForm
  nameWithType: RecognizedWordUnit.LexicalForm
  fullName: System.Speech.Recognition.RecognizedWordUnit.LexicalForm
- uid: System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Pronunciation
  nameWithType: RecognizedWordUnit.Pronunciation
  fullName: System.Speech.Recognition.RecognizedWordUnit.Pronunciation
- uid: System.Speech.Recognition.RecognizedWordUnit.Text
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Text
  nameWithType: RecognizedWordUnit.Text
  fullName: System.Speech.Recognition.RecognizedWordUnit.Text
- uid: System.Speech.Recognition.RecognizedWordUnit.#ctor*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: RecognizedWordUnit
  nameWithType: RecognizedWordUnit.RecognizedWordUnit
- uid: System.Speech.Recognition.RecognizedWordUnit.Confidence*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Confidence
  nameWithType: RecognizedWordUnit.Confidence
- uid: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: DisplayAttributes
  nameWithType: RecognizedWordUnit.DisplayAttributes
- uid: System.Speech.Recognition.RecognizedWordUnit.LexicalForm*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: LexicalForm
  nameWithType: RecognizedWordUnit.LexicalForm
- uid: System.Speech.Recognition.RecognizedWordUnit.Pronunciation*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Pronunciation
  nameWithType: RecognizedWordUnit.Pronunciation
- uid: System.Speech.Recognition.RecognizedWordUnit.Text*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Text
  nameWithType: RecognizedWordUnit.Text
