### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Strings
  id: Strings
  children:
  - Microsoft.VisualBasic.Strings.Asc(System.Char)
  - Microsoft.VisualBasic.Strings.Asc(System.String)
  - Microsoft.VisualBasic.Strings.AscW(System.Char)
  - Microsoft.VisualBasic.Strings.AscW(System.String)
  - Microsoft.VisualBasic.Strings.Chr(System.Int32)
  - Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  - Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  - Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  - Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  - Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  - Microsoft.VisualBasic.Strings.LCase(System.Char)
  - Microsoft.VisualBasic.Strings.LCase(System.String)
  - Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.Len(System.Boolean)
  - Microsoft.VisualBasic.Strings.Len(System.Byte)
  - Microsoft.VisualBasic.Strings.Len(System.Char)
  - Microsoft.VisualBasic.Strings.Len(System.DateTime)
  - Microsoft.VisualBasic.Strings.Len(System.Decimal)
  - Microsoft.VisualBasic.Strings.Len(System.Double)
  - Microsoft.VisualBasic.Strings.Len(System.Int16)
  - Microsoft.VisualBasic.Strings.Len(System.Int32)
  - Microsoft.VisualBasic.Strings.Len(System.Int64)
  - Microsoft.VisualBasic.Strings.Len(System.Object)
  - Microsoft.VisualBasic.Strings.Len(System.SByte)
  - Microsoft.VisualBasic.Strings.Len(System.Single)
  - Microsoft.VisualBasic.Strings.Len(System.String)
  - Microsoft.VisualBasic.Strings.Len(System.UInt16)
  - Microsoft.VisualBasic.Strings.Len(System.UInt32)
  - Microsoft.VisualBasic.Strings.Len(System.UInt64)
  - Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.LTrim(System.String)
  - Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  - Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.RTrim(System.String)
  - Microsoft.VisualBasic.Strings.Space(System.Int32)
  - Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  - Microsoft.VisualBasic.Strings.StrReverse(System.String)
  - Microsoft.VisualBasic.Strings.Trim(System.String)
  - Microsoft.VisualBasic.Strings.UCase(System.Char)
  - Microsoft.VisualBasic.Strings.UCase(System.String)
  langs:
  - csharp
  name: Strings
  nameWithType: Strings
  fullName: Microsoft.VisualBasic.Strings
  type: Class
  summary: "<xref uid=&quot;langword_csharp_Strings&quot; name=&quot;Strings&quot; href=&quot;&quot;> </xref>模組包含用來執行字串作業的程序。"
  remarks: "這個模組支援的 Visual Basic 語言關鍵字和操作字串的執行階段程式庫成員。"
  example:
  - "The following example demonstrates how to split a string at its spaces.  \n  \n [!code-vb[VbVbalrStrings#13](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._6_1.vb)]"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Strings
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Asc(System.Char)
  id: Asc(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Asc(Char)
  nameWithType: Strings.Asc(Char)
  fullName: Microsoft.VisualBasic.Strings.Asc(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，表示為字元的對應字元碼。"
  remarks: "`Asc`傳回*程式碼點*，或輸入字元的字元碼。 這可以是 0 到 255 的單一位元組字元集 (sbcs) 的值介於-32768 至 32767 之間的雙位元組字元集 (dbcs) 的值。       `AscW`傳回輸入字元的 Unicode 字碼指標。 這可以是 0 到 65535。 傳回的值與目前執行緒的文化特性和字碼頁設定無關。      > [!NOTE] >`AscB`較舊版本的 Visual Basic 的函式傳回一個位元組，而不是一個字元的程式碼。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有的 Visual Basic 2005 字串都位於 Unicode，和`AscB`不再支援。"
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._55_1.vb)]"
  syntax:
    content: public static int Asc (char String);
    parameters:
    - id: String
      type: System.Char
      description: "必要。 任何有效<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。 如果`String`是<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式，字串的第一個字元用於輸入。 如果`String`是<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>或未包含任何字元，<xref:System.ArgumentException>就會發生錯誤。</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，表示為字元的對應字元碼。"
  overload: Microsoft.VisualBasic.Strings.Asc*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Asc(System.String)
  id: Asc(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Asc(String)
  nameWithType: Strings.Asc(String)
  fullName: Microsoft.VisualBasic.Strings.Asc(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，表示為字元的對應字元碼。"
  remarks: "`Asc`傳回*程式碼點*，或輸入字元的字元碼。 這可以是 0 到 255 的單一位元組字元集 (sbcs) 的值介於-32768 至 32767 之間的雙位元組字元集 (dbcs) 的值。       `AscW`傳回輸入字元的 Unicode 字碼指標。 這可以是 0 到 65535。 傳回的值與目前執行緒的文化特性和字碼頁設定無關。      > [!NOTE] >`AscB`較舊版本的 Visual Basic 的函式傳回一個位元組，而不是一個字元的程式碼。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有的 Visual Basic 2005 字串都位於 Unicode，和`AscB`不再支援。"
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._249_1.vb)]"
  syntax:
    content: public static int Asc (string String);
    parameters:
    - id: String
      type: System.String
      description: "必要。 任何有效<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。 如果`String`是<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式，字串的第一個字元用於輸入。 如果`String`是<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>或未包含任何字元，<xref:System.ArgumentException>就會發生錯誤。</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，表示為字元的對應字元碼。"
  overload: Microsoft.VisualBasic.Strings.Asc*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.AscW(System.Char)
  id: AscW(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: AscW(Char)
  nameWithType: Strings.AscW(Char)
  fullName: Microsoft.VisualBasic.Strings.AscW(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，表示為字元的對應字元碼。"
  remarks: "`Asc`傳回*程式碼點*，或輸入字元的字元碼。 這可以是 0 到 255 的單一位元組字元集 (sbcs) 的值介於-32768 至 32767 之間的雙位元組字元集 (dbcs) 的值。       `AscW`傳回輸入字元的 Unicode 字碼指標。 這可以是 0 到 65535。 傳回的值與目前執行緒的文化特性和字碼頁設定無關。      > [!NOTE] >`AscB`較舊版本的 Visual Basic 的函式傳回一個位元組，而不是一個字元的程式碼。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有的 Visual Basic 2005 字串都位於 Unicode，和`AscB`不再支援。"
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._18_1.vb)]"
  syntax:
    content: public static int AscW (char String);
    parameters:
    - id: String
      type: System.Char
      description: "必要。 任何有效<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。 如果`String`是<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式，字串的第一個字元用於輸入。 如果`String`是<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>或未包含任何字元，<xref:System.ArgumentException>就會發生錯誤。</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，表示為字元的對應字元碼。"
  overload: Microsoft.VisualBasic.Strings.AscW*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.AscW(System.String)
  id: AscW(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: AscW(String)
  nameWithType: Strings.AscW(String)
  fullName: Microsoft.VisualBasic.Strings.AscW(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，表示為字元的對應字元碼。"
  remarks: "`Asc`傳回*程式碼點*，或輸入字元的字元碼。 這可以是 0 到 255 的單一位元組字元集 (sbcs) 的值介於-32768 至 32767 之間的雙位元組字元集 (dbcs) 的值。       `AscW`傳回輸入字元的 Unicode 字碼指標。 這可以是 0 到 65535。 傳回的值與目前執行緒的文化特性和字碼頁設定無關。      > [!NOTE] >`AscB`較舊版本的 Visual Basic 的函式傳回一個位元組，而不是一個字元的程式碼。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有的 Visual Basic 2005 字串都位於 Unicode，和`AscB`不再支援。"
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._205_1.vb)]"
  syntax:
    content: public static int AscW (string String);
    parameters:
    - id: String
      type: System.String
      description: "必要。 任何有效<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。 如果`String`是<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式，字串的第一個字元用於輸入。 如果`String`是<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>或未包含任何字元，<xref:System.ArgumentException>就會發生錯誤。</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，表示為字元的對應字元碼。"
  overload: Microsoft.VisualBasic.Strings.AscW*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Chr(System.Int32)
  id: Chr(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Chr(Int32)
  nameWithType: Strings.Chr(Int32)
  fullName: Microsoft.VisualBasic.Strings.Chr(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回與指定的字元碼相關聯的字元。"
  remarks: "非對稱式範圍接受`CharCode`補償儲存體之間的差異`Short`和`Integer`。 比方說，是-29183`Short`但 +36353 `Integer`。 這也有助於與 Visual Basic 6.0 的相容性。       `Chr`使用<xref:System.Text.Encoding>類別<xref:System.Text?displayProperty=fullName>命名空間，以判斷目前的執行緒是否使用單一位元組字元集 (SBCS) 或雙位元組字集 (DBCS)。</xref:System.Text?displayProperty=fullName> </xref:System.Text.Encoding> 接著會`CharCode`為碼指向適當的集合中。 範圍可以是 0 到 255 的 SBCS 字元-32768 到 65535 DBCS 字元。       傳回的值取決於目前的執行緒，包含此程式碼頁<xref:System.Globalization.TextInfo.ANSICodePage%2A>屬性<xref:System.Globalization.TextInfo>類別<xref:System.Globalization>命名空間。</xref:System.Globalization> </xref:System.Globalization.TextInfo> </xref:System.Globalization.TextInfo.ANSICodePage%2A> 您可以取得<xref:System.Globalization.TextInfo.ANSICodePage%2A>藉由指定`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`。</xref:System.Globalization.TextInfo.ANSICodePage%2A>       `ChrW`會採用`CharCode`為 Unicode 程式碼的點。 範圍是與目前執行緒的文化特性和字碼頁設定無關。 從-32768 到-1 的值會視為相同&32768; 到 +&65535; 的範圍中的值。       從 0 到 31 的數字是與標準無法列印的 ASCII 碼相同。 例如，`Chr(10)`傳回換行字元。      > [!NOTE] >`ChrB`在舊版的 Visual Basic 中的函式會傳回單一位元組。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 Visual Basic 和.NET Framework 中的所有字串都都位於 Unicode，和`ChrB`不再支援。"
  example:
  - "The following example uses the `Chr` function to return the character associated with the specified character code.  \n  \n [!code-vb[VbVbalrStrings#7](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._105_1.vb)]"
  syntax:
    content: public static char Chr (int CharCode);
    parameters:
    - id: CharCode
      type: System.Int32
      description: "必要。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>運算式代表`code point`，或字元的字元碼。"
    return:
      type: System.Char
      description: "傳回與指定的字元碼相關聯的字元。"
  overload: Microsoft.VisualBasic.Strings.Chr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>CharCode</code>&lt; 0 or &gt; 255 for <xref uid=&quot;langword_csharp_Chr&quot; name=&quot;Chr&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  id: ChrW(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: ChrW(Int32)
  nameWithType: Strings.ChrW(Int32)
  fullName: Microsoft.VisualBasic.Strings.ChrW(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回與指定的字元碼相關聯的字元。"
  remarks: "非對稱式範圍接受`CharCode`補償儲存體之間的差異`Short`和`Integer`。 比方說，是-29183`Short`但 +36353 `Integer`。 這也有助於與 Visual Basic 6.0 的相容性。       `Chr`使用<xref:System.Text.Encoding>類別<xref:System.Text?displayProperty=fullName>命名空間，以判斷目前的執行緒是否使用單一位元組字元集 (SBCS) 或雙位元組字集 (DBCS)。</xref:System.Text?displayProperty=fullName> </xref:System.Text.Encoding> 接著會`CharCode`為碼指向適當的集合中。 範圍可以是 0 到 255 的 SBCS 字元-32768 到 65535 DBCS 字元。       傳回的值取決於目前的執行緒，包含此程式碼頁<xref:System.Globalization.TextInfo.ANSICodePage%2A>屬性<xref:System.Globalization.TextInfo>類別<xref:System.Globalization>命名空間。</xref:System.Globalization> </xref:System.Globalization.TextInfo> </xref:System.Globalization.TextInfo.ANSICodePage%2A> 您可以取得<xref:System.Globalization.TextInfo.ANSICodePage%2A>藉由指定`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`。</xref:System.Globalization.TextInfo.ANSICodePage%2A>       `ChrW`會採用`CharCode`為 Unicode 程式碼的點。 範圍是與目前執行緒的文化特性和字碼頁設定無關。 從-32768 到-1 的值會視為相同&32768; 到 +&65535; 的範圍中的值。       從 0 到 31 的數字是與標準無法列印的 ASCII 碼相同。 例如，`Chr(10)`傳回換行字元。      > [!NOTE] >`ChrB`在舊版的 Visual Basic 中的函式會傳回單一位元組。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 Visual Basic 和.NET Framework 中的所有字串都都位於 Unicode，和`ChrB`不再支援。"
  example:
  - "The following example uses the `Chr` function to return the character associated with the specified character code.  \n  \n [!code-vb[VbVbalrStrings#7](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._45_1.vb)]"
  syntax:
    content: public static char ChrW (int CharCode);
    parameters:
    - id: CharCode
      type: System.Int32
      description: "必要。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>運算式代表`code point`，或字元的字元碼。"
    return:
      type: System.Char
      description: "傳回與指定的字元碼相關聯的字元。"
  overload: Microsoft.VisualBasic.Strings.ChrW*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>CharCode</code>&lt; -32768 or &gt; 65535 for <xref uid=&quot;langword_csharp_ChrW&quot; name=&quot;ChrW&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  id: Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Filter(Object[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(Object[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(Object[],String,Boolean,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回以零為起始的陣列，包含子集<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>陣列根據指定的篩選準則。"
  remarks: "如果沒有相符的`Match`內找到`Source`、`Filter`函式會傳回空陣列。 如果發生錯誤`Source`設`Nothing`或不是一維陣列。       所傳回的陣列`Filter`函式僅包含足夠項目包含相符的項目數目。       `Compare`引數可以是下列值。      |||  |-|-|  |常數 |描述 |  |`CompareMethod.Binary`|執行二進位比較 |  |`CompareMethod.Text`|執行文字比較 |"
  example:
  - "This example demonstrates the use of the `Filter` function.  \n  \n [!code-vb[VbVbalrStrings#24](~/add/codesnippet/visualbasic/bfb6d7a4-ec2d-49ca-96ad-_1.vb)]"
  syntax:
    content: public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Source
      type: System.Object[]
      description: "必要。 要搜尋的字串一維陣列。"
    - id: Match
      type: System.String
      description: "必要。 要搜尋的字串。"
    - id: Include
      type: System.Boolean
      description: "選擇性。 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，指出是否傳回子字串，包含或排除`Match`。 如果`Include`是<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref>函式會傳回陣列，其中包含子集`Match`子字串。 如果`Include`是<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref>函式會傳回陣列，其中不包含子集`Match`子字串。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "選擇性。 數字的值，表示要使用的字串比較的類型。 值，請參閱 < 設定 >。"
    return:
      type: System.String[]
      description: "傳回以零為起始的陣列，包含子集<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>陣列根據指定的篩選準則。"
  overload: Microsoft.VisualBasic.Strings.Filter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Source</code>是<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>或不是一維陣列。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  id: Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Filter(String[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(String[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(String[],String,Boolean,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回以零為起始的陣列，包含子集<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>陣列根據指定的篩選準則。"
  remarks: "如果沒有相符的`Match`內找到`Source`、`Filter`函式會傳回空陣列。 如果發生錯誤`Source`設`Nothing`或不是一維陣列。       所傳回的陣列`Filter`函式僅包含足夠項目包含相符的項目數目。       `Compare`引數可以是下列值。      |||  |-|-|  |常數 |描述 |  |`CompareMethod.Binary`|執行二進位比較 |  |`CompareMethod.Text`|執行文字比較 |"
  example:
  - "This example demonstrates the use of the `Filter` function.  \n  \n [!code-vb[VbVbalrStrings#24](~/add/codesnippet/visualbasic/a4b278ef-f791-4808-8a23-_1.vb)]"
  syntax:
    content: public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Source
      type: System.String[]
      description: "必要。 要搜尋的字串一維陣列。"
    - id: Match
      type: System.String
      description: "必要。 要搜尋的字串。"
    - id: Include
      type: System.Boolean
      description: "選擇性。 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，指出是否傳回子字串，包含或排除`Match`。 如果`Include`是<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref>函式會傳回陣列，其中包含子集`Match`子字串。 如果`Include`是<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref>函式會傳回陣列，其中不包含子集`Match`子字串。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "選擇性。 數字的值，表示要使用的字串比較的類型。 值，請參閱 < 設定 >。"
    return:
      type: System.String[]
      description: "傳回以零為起始的陣列，包含子集<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>陣列根據指定的篩選準則。"
  overload: Microsoft.VisualBasic.Strings.Filter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Source</code>是<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>或不是一維陣列。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  id: Format(System.Object,System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Format(Object,String)
  nameWithType: Strings.Format(Object,String)
  fullName: Microsoft.VisualBasic.Strings.Format(Object,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回根據格式中所包含的指示格式化字串<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
  remarks: "The <xref:System.String.Format%2A?displayProperty=fullName> method also provides similar functionality.  \n  \n If you are formatting a nonlocalized numeric string, you should use a user-defined numeric format to ensure that you get the look you want.  \n  \n If you try to format a number without specifying `Style`, the `Format` function provides functionality similar to the `Str` function, although it is internationally aware. However, positive numbers formatted as strings using the `Format` function don't include a leading space reserved for the sign of the value; those converted using the `Str` function retain the leading space.  \n  \n## Different Formats for Different Numeric Values  \n A user-defined format expression for numbers can have from one to three sections separated by semicolons. If the `Style` argument of the `Format` function contains one of the predefined numeric formats, only one section is allowed.  \n  \n|||  \n|-|-|  \n|If you use|This is the result|  \n|One section only|The format expression applies to all values.|  \n|Two sections|The first section applies to positive values and zeros; the second applies to negative values.|  \n|Three sections|The first section applies to positive values, the second applies to negative values, and the third applies to zeros.|  \n  \n The following example has two sections: the first defines the format for positive values and zeros; the second section defines the format for negative values. Since the `Style` argument of the `Format` function takes a string, it is enclosed by quotation marks.  \n  \n [!code-vb[VbVbalrStrings#18](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_1.vb)]  \n  \n If you include semicolons with nothing between them, the missing section is printed using the format of the positive value. For example, the following format displays positive and negative values using the format in the first section and displays `Zero` if the value is zero.  \n  \n [!code-vb[VbVbalrStrings#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_2.vb)]  \n  \n## Predefined Numeric Formats  \n The following table identifies the predefined numeric format names. These may be used by name as the `Style` argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Format name|Description|  \n|`General Number`, `G`, or `g`|Displays number with no thousand separator.<br /><br /> For example, `Format(&H3FA, \"g\")` returns `1018`.|  \n|`Currency`, `C`, or `c`|Displays number with thousand separator, if appropriate; displays two digits to the right of the decimal separator. Output is based on system locale settings.<br /><br /> For example, `Format(1234567, \"c\")` returns `$1,234,567.00`.|  \n|`Fixed`, `F`, or `f`|Displays at least one digit to the left and two digits to the right of the decimal separator.<br /><br /> For example, `Format(1234567, \"f\")` returns `1234567.00`.|  \n|`Standard`, `N`, or `n`|Displays number with thousand separator, at least one digit to the left and two digits to the right of the decimal separator.<br /><br /> For example, `Format(1234567, \"n\")` returns `1,234,567.00`.|  \n|`Percent`|Displays number multiplied by 100 with a percent sign (%) appended immediately to the right; always displays two digits to the right of the decimal separator.<br /><br /> For example, `Format(0.4744, \"Percent\")` returns `47.44%`.|  \n|`P`, or `p`|Displays number with thousandths separator multiplied by 100 with a percent sign (%) appended to the right and separated by a single space; always displays two digits to the right of the decimal separator.<br /><br /> For example, `Format(0.80345, \"p\")` returns `80.35 %`.|  \n|`Scientific`|Uses standard scientific notation, providing two significant digits.<br /><br /> For example, `Format(1234567, \"Scientific\")` returns `1.23E+06`.|  \n|`E`, or `e`|Uses standard scientific notation, providing six significant digits.<br /><br /> For example, `Format(1234567, \"e\")` returns `1.234567e+006`.|  \n|`D`, or `d`|Displays number as a string that contains the value of the number in Decimal (base 10) format. This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.<br /><br /> For example, `Format(&H7F, \"d\")` returns `127`.|  \n|`X`, or `x`|Displays number as a string that contains the value of the number in Hexadecimal (base 16) format. This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.<br /><br /> For example, `Format(127, \"x\")` returns `7f`.|  \n|`Yes/No`|Displays `No` if number is 0; otherwise, displays `Yes`.<br /><br /> For example, `Format(0, \"Yes/No\")` returns `No`.|  \n|`True/False`|Displays `False` if number is 0; otherwise, displays `True`.<br /><br /> For example, `Format(1, \"True/False\")` returns `True`.|  \n|`On/Off`|Displays `Off` if number is 0; otherwise, displays `On`.<br /><br /> For example, `Format(1, \"On/Off\")` returns `On`.|  \n  \n### Smart Device Developer Notes  \n The `Yes/No`, `True/False`, and `On/Off` formats are not supported.  \n  \n## User-Defined Numeric Formats  \n The following table identifies characters you can use to create user-defined number formats. These may be used to build the `Style` argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Character|Description|  \n|None|Displays the number with no formatting.|  \n|(`0`)|Digit placeholder. Displays a digit or a zero. If the expression has a digit in the position where the zero appears in the format string, display it; otherwise, displays a zero in that position.<br /><br /> If the number has fewer digits than there are zeros (on either side of the decimal) in the format expression, displays leading or trailing zeros. If the number has more digits to the right of the decimal separator than there are zeros to the right of the decimal separator in the format expression, rounds the number to as many decimal places as there are zeros. If the number has more digits to the left of the decimal separator than there are zeros to the left of the decimal separator in the format expression, displays the extra digits without modification.|  \n|(`#`)|Digit placeholder. Displays a digit or nothing. If the expression has a digit in the position where the `#` character appears in the format string, displays it; otherwise, displays nothing in that position.<br /><br /> This symbol works like the `0` digit placeholder, except that leading and trailing zeros aren't displayed if the number has fewer digits than there are `#` characters on either side of the decimal separator in the format expression.|  \n|(`.`)|Decimal placeholder. The decimal placeholder determines how many digits are displayed to the left and right of the decimal separator. If the format expression contains only `#` characters to the left of this symbol; numbers smaller than 1 begin with a decimal separator. To display a leading zero displayed with fractional numbers, use zero as the first digit placeholder to the left of the decimal separator. In some locales, a comma is used as the decimal separator. The actual character used as a decimal placeholder in the formatted output depends on the number format recognized by your system. Thus, you should use the period as the decimal placeholder in your formats even if you are in a locale that uses a comma as a decimal placeholder. The formatted string will appear in the format correct for the locale.|  \n|(`%`)|Percent placeholder. Multiplies the expression by 100. The percent character (`%`) is inserted in the position where it appears in the format string.|  \n|(`,`)|Thousand separator. The thousand separator separates thousands from hundreds within a number that has four or more places to the left of the decimal separator. Standard use of the thousand separator is specified if the format contains a thousand separator surrounded by digit placeholders (`0` or `#`).<br /><br /> A thousand separator immediately to the left of the decimal separator (whether or not a decimal is specified) or as the rightmost character in the string means \"scale the number by dividing it by 1,000, rounding as needed.\" Numbers smaller than 1,000 but greater or equal to 500 are displayed as `1`, and numbers smaller than 500 are displayed as `0`. Two adjacent thousand separators in this position scale by a factor of 1 million, and an additional factor of 1,000 for each additional separator.<br /><br /> Multiple separators in any position other than immediately to the left of the decimal separator or the rightmost position in the string are treated simply as specifying the use of a thousand separator. In some locales, a period is used as a thousand separator. The actual character used as the thousand separator in the formatted output depends on the Number Format recognized by your system. Thus, you should use the comma as the thousand separator in your formats even if you are in a locale that uses a period as a thousand separator. The formatted string will appear in the format correct for the locale.<br /><br /> For example, consider the three following format strings:<br /><br /> -   `\"#,0.\"`, which uses the thousands separator to format the number 100 million as the string \"100,000,000\".<br />-   `\"#0,.\"`, which uses scaling by a factor of one thousand to format the number 100 million as the string \"100000\".<br />-   `\"#,0,.\"`, which uses the thousands separator and scaling by one thousand to format the number 100 million as the string \"100,000\".|  \n|(`:`)|Time separator. In some locales, other characters may be used to represent the time separator. The time separator separates hours, minutes, and seconds when time values are formatted. The actual character used as the time separator in formatted output is determined by your system settings.|  \n|(`/`)|Date separator. In some locales, other characters may be used to represent the date separator. The date separator separates the day, month, and year when date values are formatted. The actual character used as the date separator in formatted output is determined by your system settings.|  \n|(`E-``E+``e-``e+`)|Scientific format. If the format expression contains at least one digit placeholder (`0` or `#`) to the left of `E-`, `E+`, `e-`, or `e+`, the number is displayed in scientific format and `E` or `e` is inserted between the number and its exponent. The number of digit placeholders to the left determines the number of digits in the exponent. Use `E-` or `e-` to place a minus sign next to negative exponents. Use `E+` or `e+` to place a minus sign next to negative exponents and a plus sign next to positive exponents. You must also include digit placeholders to the right of this symbol to get correct formatting.|  \n|`-` `+` `$` ( )|Literal characters. These characters are displayed exactly as typed in the format string. To display a character other than one of those listed, precede it with a backslash (`\\`) or enclose it in double quotation marks (\" \").|  \n|(`\\`)|Displays the next character in the format string. To display a character that has special meaning as a literal character, precede it with a backslash (`\\`). The backslash itself isn't displayed. Using a backslash is the same as enclosing the next character in double quotation marks. To display a backslash, use two backslashes (`\\\\`).<br /><br /> Examples of characters that can't be displayed as literal characters are the date-formatting and time-formatting characters (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, and `:`), the numeric-formatting characters (`#`, `0`, `%`, `E`, `e`, comma, and period), and the string-formatting characters (`@`, `&`, `<`, `>`, and `!`).|  \n|(`\"``ABC``\"`)|Displays the string inside the double quotation marks (\" \"). To include a string in the style argument from within code, you must use `Chr(34)` to enclose the text (`34` is the character code for a quotation mark (\")).|  \n  \n### Legacy Code Example  \n The following table contains some sample format expressions for numbers. (These examples all assume that your system's locale setting is English-U.S.) The first column contains the format strings for the `Style` argument of the `Format` function; the other columns contain the resulting output if the formatted data has the value given in the column headings.  \n  \n|||||  \n|-|-|-|-|  \n|Format (`Style`)|\"5\" formatted as|\"-5\" formatted as|\"0.5\" formatted as|  \n|`Zero-length string (\"\")`|`5`|`-5`|`0.5`|  \n|`0`|`5`|`-5`|`1`|  \n|`0.00`|`5.00`|`-5.00`|`0.50`|  \n|`#,##0`|`5`|`-5`|`1`|  \n|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  \n|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  \n|`0%`|`500%`|`-500%`|`50%`|  \n|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  \n|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  \n|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  \n  \n## Predefined Date/Time Formats  \n The following table identifies the predefined date and time format names. These may be used by name as the style argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Format Name|Description|  \n|`General Date`, or `G`|Displays a date and/or time. For example, `3/12/2008 11:07:31 AM`. Date display is determined by your application's current culture value.|  \n|`Long Date`, `Medium Date`, or `D`|Displays a date according to your current culture's long date format. For example, `Wednesday, March 12, 2008`.|  \n|`Short Date`, or `d`|Displays a date using your current culture's short date format. For example, `3/12/2008`.<br /><br /> The `d` character displays the day in a user-defined date format.|  \n|`Long Time`, `Medium Time`, or `T`|Displays a time using your current culture's long time format; typically includes hours, minutes, seconds. For example, `11:07:31 AM`.|  \n|`Short Time` or `t`|Displays a time using your current culture's short time format. For example, `11:07 AM`.<br /><br /> The `t` character displays `AM` or `PM` values for locales that use a 12-hour clock in a user-defined time format.|  \n|`f`|Displays the long date and short time according to your current culture's format. For example, `Wednesday, March 12, 2008 11:07 AM`.|  \n|`F`|Displays the long date and long time according to your current culture's format. For example, `Wednesday, March 12, 2008 11:07:31 AM`.|  \n|`g`|Displays the short date and short time according to your current culture's format. For example, `3/12/2008 11:07 AM`.|  \n|`M`, `m`|Displays the month and the day of a date. For example, `March 12`.<br /><br /> The `M` character displays the month in a user-defined date format. The `m` character displays the minutes in a user-defined time format.|  \n|`R`, `r`|Formats the date according to the <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> property. For example, `Wed, 12 Mar 2008 11:07:31 GMT`. The formatted date does not adjust the value of the date and time. You must adjust the Date/Time value to GMT before calling the `Format` function.|  \n|`s`|Formats the date and time as a sortable index. For example, `2008-03-12T11:07:31`.<br /><br /> The `s` character displays the seconds in a user-defined time format.|  \n|`u`|Formats the date and time as a GMT sortable index. For example, `2008-03-12 11:07:31Z`.|  \n|`U`|Formats the date and time with the long date and long time as GMT. For example, `Wednesday, March 12, 2008 6:07:31 PM`.|  \n|`Y`, `y`|Formats the date as the year and month. For example, `March, 2008`.<br /><br /> The `Y` and `y` characters display the year in a user-defined date format.|  \n  \n For more information about the application's current culture information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md).  \n  \n## User-Defined Date/Time Formats  \n The following table shows characters you can use to create user-defined date/time formats. Unlike in earlier versions of [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], these format characters are case-sensitive.  \n  \n|||  \n|-|-|  \n|Character|Description|  \n|(`:`)|Time separator. In some locales, other characters may be used to represent the time separator. The time separator separates hours, minutes, and seconds when time values are formatted. The actual character that is used as the time separator in formatted output is determined by your application's current culture value.|  \n|(`/`)|Date separator. In some locales, other characters may be used to represent the date separator. The date separator separates the day, month, and year when date values are formatted. The actual character that is used as the date separator in formatted output is determined by your application's current culture.|  \n|(`%`)|Used to indicate that the following character should be read as a single-letter format without regard to any trailing letters. Also used to indicate that a single-letter format is read as a user-defined format. See what follows for additional details.|  \n|`d`|Displays the day as a number without a leading zero (for example, `1`). Use `%d` if this is the only character in your user-defined numeric format.|  \n|`dd`|Displays the day as a number with a leading zero (for example, `01`).|  \n|`ddd`|Displays the day as an abbreviation (for example, `Sun`).|  \n|`dddd`|Displays the day as a full name (for example, `Sunday`).|  \n|`M`|Displays the month as a number without a leading zero (for example, January is represented as `1`). Use `%M` if this is the only character in your user-defined numeric format.|  \n|`MM`|Displays the month as a number with a leading zero (for example, `01/12/01`).|  \n|`MMM`|Displays the month as an abbreviation (for example, `Jan`).|  \n|`MMMM`|Displays the month as a full month name (for example, `January`).|  \n|`gg`|Displays the period/era string (for example, `A.D.`).|  \n|`h`|Displays the hour as a number without leading zeros using the 12-hour clock (for example, `1:15:15 PM`). Use `%h` if this is the only character in your user-defined numeric format.|  \n|`hh`|Displays the hour as a number with leading zeros using the 12-hour clock (for example, `01:15:15 PM`).|  \n|`H`|Displays the hour as a number without leading zeros using the 24-hour clock (for example, `1:15:15`). Use `%H` if this is the only character in your user-defined numeric format.|  \n|`HH`|Displays the hour as a number with leading zeros using the 24-hour clock (for example, `01:15:15`).|  \n|`m`|Displays the minute as a number without leading zeros (for example, `12:1:15`). Use `%m` if this is the only character in your user-defined numeric format.|  \n|`mm`|Displays the minute as a number with leading zeros (for example, `12:01:15`).|  \n|`s`|Displays the second as a number without leading zeros (for example, `12:15:5`). Use `%s` if this is the only character in your user-defined numeric format.|  \n|`ss`|Displays the second as a number with leading zeros (for example, `12:15:05`).|  \n|`f`|Displays fractions of seconds. For example `ff` displays hundredths of seconds, whereas `ffff` displays ten-thousandths of seconds. You may use up to seven `f` symbols in your user-defined format. Use `%f` if this is the only character in your user-defined numeric format.|  \n|`t`|Uses the 12-hour clock and displays an uppercase `A` for any hour before noon; displays an uppercase `P` for any hour between noon and 11:59 P.M. Use `%t` if this is the only character in your user-defined numeric format.|  \n|`tt`|For locales that use a 12-hour clock, displays an uppercase `AM` with any hour before noon; displays an uppercase `PM` with any hour between noon and 11:59 P.M.<br /><br /> For locales that use a 24-hour clock, displays nothing.|  \n|`y`|Displays the year number (0-9) without leading zeros. Use `%y` if this is the only character in your user-defined numeric format.|  \n|`yy`|Displays the year in two-digit numeric format with a leading zero, if applicable.|  \n|`yyy`|Displays the year in four-digit numeric format.|  \n|`yyyy`|Displays the year in four-digit numeric format.|  \n|`z`|Displays the timezone offset without a leading zero (for example, `-8`). Use `%z` if this is the only character in your user-defined numeric format.|  \n|`zz`|Displays the timezone offset with a leading zero (for example, `-08`)|  \n|`zzz`|Displays the full timezone offset (for example, `-08:00`)|  \n  \n### Legacy Code Example  \n The following are examples of user-defined date and time formats for `December 7, 1958, 8:50 PM, 35 seconds`:  \n  \n|||  \n|-|-|  \n|Format|Displays|  \n|`M/d/yy`|`12/7/58`|  \n|`d-MMM`|`7-Dec`|  \n|`d-MMMM-yy`|`7-December-58`|  \n|`d MMMM`|`7 December`|  \n|`MMMM yy`|`December 58`|  \n|`hh:mm tt`|`08:50 PM`|  \n|`h:mm:ss t`|`8:50:35 P`|  \n|`H:mm`|`20:50`|  \n|`H:mm:ss`|`20:50:35`|  \n|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  \n  \n### Smart Device Developer Notes  \n The minimum time resolution for a device is determined by the manufacturer of the device. If the time resolution for the device is coarse enough, the `f` format character returns 0 when run on that device."
  example:
  - "This example shows various uses of the `Format` function to format values using both `String` formats and user-defined formats. For the date separator (`/`), time separator (`:`), and the AM/PM indicators (`t` and `tt`), the actual formatted output displayed by your system depends on the locale settings the code is using. When times and dates are displayed in the development environment, the short time format and short date format of the code locale are used.  \n  \n> [!NOTE]\n>  For locales that use a 24-hour clock, the AM/PM indicators (`t` and `tt`) display nothing.  \n  \n [!code-vb[VbVbalrStrings#27](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_3.vb)]"
  syntax:
    content: public static string Format (object Expression, string Style = "");
    parameters:
    - id: Expression
      type: System.Object
      description: "必要。 任何有效運算式。"
    - id: Style
      type: System.String
      description: "選擇性。 有效的具名或使用者定義格式<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回根據格式中所包含的指示格式化字串<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
  overload: Microsoft.VisualBasic.Strings.Format*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatCurrency(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回格式化為使用系統控制台 中定義的貨幣符號的貨幣值的運算式。"
  remarks: "當省略選擇性的一個或多個引數時，會改用電腦相符的地區設定值。       相對於貨幣值的貨幣符號的位置取決於系統的地區設定。      > [!NOTE] > 所有設定資訊是都來自應用程式的地區設定。 根據預設，這會是在控制台中設定的地區設定。 不過，它可能會變更以程式設計方式使用.NET Framework 中，但前置零，來自`Number` 索引標籤。       `IncludeLeadingDigit`， `UseParensForNegativeNumbers`，和`GroupDigits`引數接受下列 Tri-state 列舉值。      |||  |-|-|  |值 |描述 |  |`TriState.True`|True |  |`TriState.False`|False |  |`TriState.UseDefault`|電腦的地區設定 |"
  example:
  - "The following example illustrates the use of the `FormatCurrency` function.  \n  \n [!code-vb[VbVbalrStrings#32](~/add/codesnippet/visualbasic/c6b3af93-c0fc-4dd7-8b87-_1.vb)]"
  syntax:
    content: public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "必要。 要格式化的運算式。"
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "選擇性。 指出顯示右邊的小數位數數字的值。 預設值為 –&1;，表示將使用電腦的地區設定。"
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "選擇性。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>指出顯示小數值的前置零的列舉。 值，請參閱 < 備註 >。"
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "選擇性。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>列舉，指出要將放在括號內的負數值。 值，請參閱 < 備註 >。"
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "選擇性。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>列舉，指出將數字分組使用電腦的地區設定中指定的群組分隔符號。 值，請參閱 < 備註 >。"
    return:
      type: System.String
      description: "傳回格式化為使用系統控制台 中定義的貨幣符號的貨幣值的運算式。"
  overload: Microsoft.VisualBasic.Strings.FormatCurrency*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "小數點後數字的數目大於 99。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "類型不是數字。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  id: FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatDateTime(DateTime,DateFormat)
  nameWithType: Strings.FormatDateTime(DateTime,DateFormat)
  fullName: Microsoft.VisualBasic.Strings.FormatDateTime(DateTime,DateFormat)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回代表日期/時間值的字串運算式。"
  remarks: "`Date`資料類型一定會包含日期和時間資訊。 Visual Basic 型別轉換的目的，請考慮 1/1/1 (1 年的 1 年) 是中性值的日期和 00:00:00 （午夜） 是中性值的時間。 如果您格式化`Date`值為日期/時間字串，`FormatDateTime`中產生的字串不包含中性的值。 例如，如果您要轉換 #1/1/0001 9:30:&#00; 字串時，結果為&quot;9:30:00&quot;;隱藏的日期資訊。 不過，將日期資訊是仍會出現在原始`Date`值，並可以復原與函式例如`DatePart`。      > [!NOTE] > 如果您要傳入`Expression`引數做`String`常值，`FormatDateTime`會解譯根據<xref:System.Globalization.CultureInfo.CurrentCulture%2A>應用程式的設定。</xref:System.Globalization.CultureInfo.CurrentCulture%2A> 不過，如果您將它傳遞為`Date`常值中，使用格式 #mm/dd/yyyy # 因為`FormatDateTime`一律解譯`Date`根據英文 （美國） 文化特性的常值。 這是必要的因為如果應用程式開發時，並使用自動程式化`Date`常值，從某個文化特性，但有不同的文化特性的平台上執行`Date`常值可能不正確剖析。       `NamedFormat`引數必須具有下列設定。      |||  |-|-|  |常數 |描述 |  |`DateFormat.GeneralDate`|顯示日期和/或時間。 顯示簡短日期的日期部分。 如果沒有時間部分，請將它顯示成很長的時間。 如果有的話，這兩個組件會顯示。 |  |`DateFormat.LongDate`|使用電腦的地區設定中指定的完整日期格式顯示日期。 |  |`DateFormat.ShortDate`|使用您電腦的地區設定中指定的簡短日期格式顯示日期。 |  |`DateFormat.LongTime`|使用您電腦的地區設定中指定的時間格式顯示時間。 |  |`DateFormat.ShortTime`|顯示時間使用 24 小時制格式 (hh: mm)。 |"
  example:
  - "This example demonstrates the use of the `FormatDateTime` function.  \n  \n [!code-vb[VbVbalrStrings#3](~/add/codesnippet/visualbasic/12ae27ca-4a0f-4ea2-855e-_1.vb)]"
  syntax:
    content: public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);
    parameters:
    - id: Expression
      type: System.DateTime
      description: "必要。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>要格式化的運算式。"
    - id: NamedFormat
      type: Microsoft.VisualBasic.DateFormat
      description: "選擇性。 數字的值，表示日期/時間格式使用。 如果省略， <xref uid=&quot;langword_csharp_DateFormat.GeneralDate&quot; name=&quot;DateFormat.GeneralDate&quot; href=&quot;&quot;> </xref>用。"
    return:
      type: System.String
      description: "傳回代表日期/時間值的字串運算式。"
  overload: Microsoft.VisualBasic.Strings.FormatDateTime*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>NamedFormat</code>設定不正確。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatNumber(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回格式化的數字的運算式。"
  remarks: "會省略選擇性的一個或多個引數時，省略引數的值可以由地區設定。      > [!NOTE] > 所有設定資訊是都來自應用程式的地區設定。 根據預設，這會是在控制台中設定的地區設定。 但是，它可能會變更以程式設計方式使用.NET Framework。       `IncludeLeadingDigit`， `UseParensForNegativeNumbers`，和`GroupDigits`引數有下列設定。      |||  |-|-|  |常數 |描述 |  |`TriState.True`|True |  |`TriState.False`|False |  |`TriState.UseDefault`|電腦的地區設定 |"
  example:
  - "This example demonstrates the `FormatNumber` function.  \n  \n [!code-vb[VbVbalrStrings#15](~/add/codesnippet/visualbasic/4c7d3c11-69f8-405b-a033-_1.vb)]"
  syntax:
    content: public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "必要。 要格式化的運算式。"
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "選擇性。 指出顯示右邊的小數位數數字的值。 預設值為-1，表示要使用電腦的地區設定。"
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "選擇性。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>指出是否顯示小數值的前置 0 的常數。 值，請參閱 < 設定 >。"
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "選擇性。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>指出是否要將放在括號內的負數值的常數。 值，請參閱 < 設定 >。"
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "選擇性。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>常數，指出將數字分組使用的地區設定中指定的群組分隔符號。 值，請參閱 < 設定 >。"
    return:
      type: System.String
      description: "傳回格式化的數字的運算式。"
  overload: Microsoft.VisualBasic.Strings.FormatNumber*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "類型不是數字。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatPercent(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回格式化成與 %字元 （也就，乘以 100） 的百分比的運算式。"
  remarks: "當省略選擇性的一個或多個引數時，由地區設定提供省略的引數的值。      > [!NOTE] > 所有設定資訊是都來自應用程式的地區設定。 根據預設，這會是在控制台中設定的地區設定。 但是，它可能會變更以程式設計方式使用.NET Framework。       `IncludeLeadingDigit`， `UseParensForNegativeNumbers`，和`GroupDigits`引數有下列設定。      |||  |-|-|  |常數 |描述 |  |`TriState.True`|True |  |`TriState.False`|False |  |`TriState.Default`|電腦的地區設定 |"
  example:
  - "This example illustrates the use of the `FormatPercent` function.  \n  \n [!code-vb[VbVbalrStrings#28](~/add/codesnippet/visualbasic/699b6dbf-5eeb-4a3e-a4b1-_1.vb)]"
  syntax:
    content: public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "必要。 要格式化的運算式。"
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "選擇性。 會顯示數字值，指出多少在小數點右邊位數。 預設值為 –&1;，表示要使用的地區設定。"
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "選擇性。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>指出小數的值顯示前置零的常數。 值，請參閱 < 設定 >。"
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "選擇性。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>指出要將放在括號內的負數值的常數。 值，請參閱 < 設定 >。"
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "選擇性。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>常數，指出將數字分組使用的地區設定中指定的群組分隔符號。 值，請參閱 < 設定 >。"
    return:
      type: System.String
      description: "傳回格式化成與 %字元 （也就，乘以 100） 的百分比的運算式。"
  overload: Microsoft.VisualBasic.Strings.FormatPercent*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "類型不是數字。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  id: GetChar(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: GetChar(String,Int32)
  nameWithType: Strings.GetChar(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.GetChar(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>從指定之索引中提供的字串表示的字元值。"
  remarks: "如果`Index`小於 1 或大於最後一個字元的索引`str`、`ArgumentException`就會擲回。"
  example:
  - "This example shows how to use the `GetChar` function to return a character from a specified index in a `String`.  \n  \n [!code-vb[VbVbalrStrings#23](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._0_1.vb)]"
  syntax:
    content: public static char GetChar (string str, int Index);
    parameters:
    - id: str
      type: System.String
      description: "必要。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    - id: Index
      type: System.Int32
      description: "必要。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>運算式。 （從&1; 開始） 中的字元索引`str`傳回。"
    return:
      type: System.Char
      description: "<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>從指定之索引中提供的字串表示的字元值。"
  overload: Microsoft.VisualBasic.Strings.GetChar*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>str</code>是<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>， <code>Index</code> &lt; 1，或<code>Index</code>大於最後一個字元的索引<code>str</code>。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStr(String,String,CompareMethod)
  nameWithType: Strings.InStr(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回整數，指定一個字串在另一個字串的第一個出現的起始位置。"
  remarks: "一般而言，`InStr`時剖析字串，會使用函式。      > [!NOTE] >`InStrB`在舊版的 Visual Basic 中的函式傳回的位元組，而不是字元位置數目。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有的 Visual Basic 2005 字串都位於 Unicode，和`InStrB`不再支援。       `Compare`引數設定不: | | |  |-|-|-|  |常數 |值 |描述 |  |`Binary`|0|執行二進位比較 |  |`Text`|1|執行文字比較 |"
  example:
  - "This example uses the `InStr` function to return the position of the first occurrence of one string within another.  \n  \n [!code-vb[VbVbalrStrings#8](~/add/codesnippet/visualbasic/f1b47808-d5f4-408b-b1fc-_1.vb)]"
  syntax:
    content: public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: String1
      type: System.String
      description: "必要。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>要搜尋的運算式。"
    - id: String2
      type: System.String
      description: "必要。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>要搜尋的運算式。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "選擇性。 指定字串比較的類型。 如果`Compare`省略，則<xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;></xref>設定會決定的比較類型。"
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> 如果       </td><td> InStr 傳回       </td></tr><tr><td>           <code>String1</code>長度為零或<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 0       </td></tr><tr><td>           <code>String2</code>長度為零或<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 搜尋，預設值為第一個字元位置開始的位置。       </td></tr><tr><td>           <code>String2</code>找不到       </td><td> 0       </td></tr><tr><td>           <code>String2</code>找到內<code>String1</code></td><td> 符合開始的位置       </td></tr><tr><td></td><td></td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStr*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStr(Int32,String,String,CompareMethod)
  nameWithType: Strings.InStr(Int32,String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(Int32,String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回整數，指定一個字串在另一個字串的第一個出現的起始位置。"
  remarks: "一般而言，`InStr`時剖析字串，會使用函式。      > [!NOTE] >`InStrB`在舊版的 Visual Basic 中的函式傳回的位元組，而不是字元位置數目。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有的 Visual Basic 2005 字串都位於 Unicode，和`InStrB`不再支援。       `Compare`引數設定不: | | |  |-|-|-|  |常數 |值 |描述 |  |`Binary`|0|執行二進位比較 |  |`Text`|1|執行文字比較 |"
  example:
  - "This example uses the `InStr` function to return the position of the first occurrence of one string within another.  \n  \n [!code-vb[VbVbalrStrings#8](~/add/codesnippet/visualbasic/087e182b-78be-4d9a-be91-_1.vb)]"
  syntax:
    content: public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Start
      type: System.Int32
      description: "選擇性。 設定每個搜尋的開始位置的數值運算式。 如果省略，則會在第一個字元位置開始搜尋。 起始索引是以 1 為基底。"
    - id: String1
      type: System.String
      description: "必要。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>要搜尋的運算式。"
    - id: String2
      type: System.String
      description: "必要。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>要搜尋的運算式。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "選擇性。 指定字串比較的類型。 如果`Compare`省略，則<xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;></xref>設定會決定的比較類型。"
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> 如果       </td><td> InStr 傳回       </td></tr><tr><td>           <code>String1</code>長度為零或<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 0       </td></tr><tr><td>           <code>String2</code>長度為零或<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td>           <code>start</code>         </td></tr><tr><td>           <code>String2</code>找不到       </td><td> 0       </td></tr><tr><td>           <code>String2</code>找到內<code>String1</code></td><td> 符合開始的位置       </td></tr><tr><td>           <code>Start</code>&gt;的長度<code>String1</code></td><td> 0       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code> &lt; 1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStrRev(String,String,Int32,CompareMethod)
  nameWithType: Strings.InStrRev(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStrRev(String,String,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回一個字串在另一個，從字串右側開始的第一次出現的位置。"
  remarks: "請注意，如語法`InStrRev`函式不是相同的語法`InStr`函式。       `Compare`引數可以是下列值。      |||  |-|-|  |常數 |描述 |  |`Binary`|執行二進位比較。 |  |`Text`|執行文字比較。 |"
  example:
  - "This example demonstrates the use of the `InStrRev` function.  \n  \n [!code-vb[VbVbalrStrings#26](~/add/codesnippet/visualbasic/ee8ba742-f981-4eca-b754-_1.vb)]"
  syntax:
    content: public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: StringCheck
      type: System.String
      description: "必要。 要搜尋的字串運算式。"
    - id: StringMatch
      type: System.String
      description: "必要。 要搜尋的字串運算式。"
    - id: Start
      type: System.Int32
      description: "選擇性。 設定從左邊的字串開始的每個搜尋的以一為起始位置的數值運算式。 如果`Start`會省略，則會使用 –&1;，這表示最後一個字元位置開始搜尋。 從右至左然後進行搜尋。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "選擇性。 數字的值，指出要用於評估子字串的比較類型。 如果省略，則會執行二進位比較。 值，請參閱設定。"
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> 如果       </td><td> InStrRev 傳回       </td></tr><tr><td>           <code>StringCheck</code>長度為零       </td><td> 0       </td></tr><tr><td>           <code>StringMatch</code>長度為零       </td><td>           <code>Start</code>         </td></tr><tr><td>           <code>StringMatch</code>找不到       </td><td> 0       </td></tr><tr><td>           <code>StringMatch</code>找到內<code>StringCheck</code></td><td> 第一個相符，則從字串右側開始的位置。       </td></tr><tr><td>           <code>Start</code>大於的長度<code>StringMatch</code></td><td> 0       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStrRev*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>= 0 or <code>Start</code> &lt; -1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  id: Join(System.Object[],System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Join(Object[],String)
  nameWithType: Strings.Join(Object[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(Object[],String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回建立聯結的子字串陣列中包含的數字的字串。"
  remarks: "是對等之間`Join`和`Split`函式。 `Join`函式接受字串陣列，並結合使用分隔符號字串，以傳回單一字串。 `Split`函式接受字串，並分隔在分隔符號，以傳回字串陣列。 不過，主要差異在於`Join`可以串連字串使用任何分隔符號字串，`Split`只可以分開使用單一字元分隔符號的字串。"
  example:
  - "The following example demonstrates how to use the `Join` function to create a list from several strings.  \n  \n [!code-vb[VbVbalrStrings#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._160_1.vb)]"
  syntax:
    content: public static string Join (object[] SourceArray, string Delimiter = " ");
    parameters:
    - id: SourceArray
      type: System.Object[]
      description: "必要。 一維陣列，包含要聯結的子字串。"
    - id: Delimiter
      type: System.String
      description: "選擇性。 任何用來分隔傳回字串中的子字串。 如果省略，空格字元 (&quot;&quot;) 會使用。 如果`Delimiter`為零長度字串 (&quot;&quot;) 或<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>，清單中的所有項目串連而不使用分隔符號。"
    return:
      type: System.String
      description: "傳回建立聯結的子字串陣列中包含的數字的字串。"
  overload: Microsoft.VisualBasic.Strings.Join*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>SourceArray</code>不是其中一個維度。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  id: Join(System.String[],System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Join(String[],String)
  nameWithType: Strings.Join(String[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(String[],String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回建立聯結的子字串陣列中包含的數字的字串。"
  remarks: "是對等之間`Join`和`Split`函式。 `Join`函式接受字串陣列，並結合使用分隔符號字串，以傳回單一字串。 `Split`函式接受字串，並分隔在分隔符號，以傳回字串陣列。 不過，主要差異在於`Join`可以串連字串使用任何分隔符號字串，`Split`只可以分開使用單一字元分隔符號的字串。"
  example:
  - "The following example demonstrates how to use the `Join` function to create a list from several strings.  \n  \n [!code-vb[VbVbalrStrings#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._124_1.vb)]"
  syntax:
    content: public static string Join (string[] SourceArray, string Delimiter = " ");
    parameters:
    - id: SourceArray
      type: System.String[]
      description: "必要。 一維陣列，包含要聯結的子字串。"
    - id: Delimiter
      type: System.String
      description: "選擇性。 任何用來分隔傳回字串中的子字串。 如果省略，空格字元 (&quot;&quot;) 會使用。 如果`Delimiter`為零長度字串 (&quot;&quot;) 或<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>，清單中的所有項目串連而不使用分隔符號。"
    return:
      type: System.String
      description: "傳回建立聯結的子字串陣列中包含的數字的字串。"
  overload: Microsoft.VisualBasic.Strings.Join*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>SourceArray</code>不是其中一個維度。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LCase(System.Char)
  id: LCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LCase(Char)
  nameWithType: Strings.LCase(Char)
  fullName: Microsoft.VisualBasic.Strings.LCase(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串或字元轉換成小寫。"
  remarks: "只有大寫的字母會轉換成小寫。所有小寫字母和 nonletter 字元都保持不變。       管理字串，以便適當地區設定中使用應用程式的大小寫的變更時，此函數會使用應用程式的文化特性資訊。      > [!IMPORTANT] > 如果您的應用程式進行比較或大小寫變更作業的結果為基礎的安全性決策，則此作業，應該使用<xref:System.String.Compare%2A?displayProperty=fullName>方法，然後傳遞<xref:System.StringComparison>或<xref:System.StringComparison>如`comparisonType`引數。</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> 如需詳細資訊，請參閱[如何文化特性會影響字串在 Visual Basic 中](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "This example uses the `LCase` function to return a lowercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._236_1.vb)]"
  syntax:
    content: public static char LCase (char Value);
    parameters:
    - id: Value
      type: System.Char
      description: "必要。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.Char
      description: "傳回字串或字元轉換成小寫。"
  overload: Microsoft.VisualBasic.Strings.LCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LCase(System.String)
  id: LCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LCase(String)
  nameWithType: Strings.LCase(String)
  fullName: Microsoft.VisualBasic.Strings.LCase(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串或字元轉換成小寫。"
  remarks: "只有大寫的字母會轉換成小寫。所有小寫字母和 nonletter 字元都保持不變。       管理字串，以便適當地區設定中使用應用程式的大小寫的變更時，此函數會使用應用程式的文化特性資訊。      > [!IMPORTANT] > 如果您的應用程式進行比較或大小寫變更作業的結果為基礎的安全性決策，則此作業，應該使用<xref:System.String.Compare%2A?displayProperty=fullName>方法，然後傳遞<xref:System.StringComparison>或<xref:System.StringComparison>如`comparisonType`引數。</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> 如需詳細資訊，請參閱[如何文化特性會影響字串在 Visual Basic 中](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "This example uses the `LCase` function to return a lowercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._214_1.vb)]"
  syntax:
    content: public static string LCase (string Value);
    parameters:
    - id: Value
      type: System.String
      description: "必要。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回字串或字元轉換成小寫。"
  overload: Microsoft.VisualBasic.Strings.LCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  id: Left(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Left(String,Int32)
  nameWithType: Strings.Left(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Left(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串，包含指定的從左邊的字串的字元數。"
  remarks: "若要判斷中的字元數`str`，使用`Len`函式。 如果在 Windows Forms 應用程式或有任何其他類別中使用`Left`屬性，您必須完整限定的函式與`Microsoft.VisualBasic.Left`。      > [!NOTE] >`LeftB`函式在舊版的 Visual Basic 中的位元組，而不是字元傳回的字串。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有目前的 Visual Basic 字串都位於 Unicode，和`LeftB`不再支援。"
  example:
  - "This example demonstrates the use of the `Left` function to return a substring of a given `String`. In a class that has a `Left` property, it may be necessary to fully qualify the `Left` function.  \n  \n [!code-vb[VbVbalrStrings#20](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._139_1.vb)]"
  syntax:
    content: public static string Left (string str, int Length);
    parameters:
    - id: str
      type: System.String
      description: "必要。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>要從中傳回最左邊的字元運算式。"
    - id: Length
      type: System.Int32
      description: "必要。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>運算式。 表示要傳回多少字元的數值運算式。 如果為 0，零長度字串 (&quot;&quot;) 會傳回。 如果大於或等於中的字元數`str`，會傳回整個字串。"
    return:
      type: System.String
      description: "傳回字串，包含指定的從左邊的字串的字元數。"
  overload: Microsoft.VisualBasic.Strings.Left*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Boolean)
  id: Len(System.Boolean)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Boolean)
  nameWithType: Strings.Len(Boolean)
  fullName: Microsoft.VisualBasic.Strings.Len(Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  remarks: "與使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。       `VBFixedString`屬性可以套用至物件，表示字串，以位元組為單位的大小，寫入時的 string 欄位至磁碟。 `Len`函式使用`VBFixedString`屬性，如果有的話，當決定的大小`Object`變數。      > [!NOTE] >`Len`函式可能無法判斷實際儲存可變長度的字串中的使用者定義資料型別搭配使用時所需的位元組數目。      > [!NOTE] >`LenB`函式在舊版的 Visual Basic 中為字串，而不是字元傳回的位元組數目。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有目前的 Visual Basic 字串都位於 Unicode，和`LenB`不再支援。      ## 智慧型裝置開發人員注意事項`Len`函式只接受`String`和`Object`做為參數的變數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數是 NULL`Object`參考，此函數會傳回零。 如果`Object`包含任何其他型別，擲回例外狀況。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._155_1.vb)]"
  syntax:
    content: public static int Len (bool Expression);
    parameters:
    - id: Expression
      type: System.Boolean
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式或變數名稱。 如果`Expression`的型別<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函式傳回的大小，因為它會寫入至檔案<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函式。"
    return:
      type: System.Int32
      description: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Byte)
  id: Len(System.Byte)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Byte)
  nameWithType: Strings.Len(Byte)
  fullName: Microsoft.VisualBasic.Strings.Len(Byte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  remarks: "與使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。       `VBFixedString`屬性可以套用至物件，表示字串，以位元組為單位的大小，寫入時的 string 欄位至磁碟。 `Len`函式使用`VBFixedString`屬性，如果有的話，當決定的大小`Object`變數。      > [!NOTE] >`Len`函式可能無法判斷實際儲存可變長度的字串中的使用者定義資料型別搭配使用時所需的位元組數目。      > [!NOTE] >`LenB`函式在舊版的 Visual Basic 中為字串，而不是字元傳回的位元組數目。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有目前的 Visual Basic 字串都位於 Unicode，和`LenB`不再支援。      ## 智慧型裝置開發人員注意事項`Len`函式只接受`String`和`Object`做為參數的變數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數是 NULL`Object`參考，此函數會傳回零。 如果`Object`包含任何其他型別，擲回例外狀況。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._157_1.vb)]"
  syntax:
    content: public static int Len (byte Expression);
    parameters:
    - id: Expression
      type: System.Byte
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式或變數名稱。 如果`Expression`的型別<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函式傳回的大小，因為它會寫入至檔案<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函式。"
    return:
      type: System.Int32
      description: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Char)
  id: Len(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Char)
  nameWithType: Strings.Len(Char)
  fullName: Microsoft.VisualBasic.Strings.Len(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  remarks: "與使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。       `VBFixedString`屬性可以套用至物件，表示字串，以位元組為單位的大小，寫入時的 string 欄位至磁碟。 `Len`函式使用`VBFixedString`屬性，如果有的話，當決定的大小`Object`變數。      > [!NOTE] >`Len`函式可能無法判斷實際儲存可變長度的字串中的使用者定義資料型別搭配使用時所需的位元組數目。      > [!NOTE] >`LenB`函式在舊版的 Visual Basic 中為字串，而不是字元傳回的位元組數目。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有目前的 Visual Basic 字串都位於 Unicode，和`LenB`不再支援。      ## 智慧型裝置開發人員注意事項`Len`函式只接受`String`和`Object`做為參數的變數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數是 NULL`Object`參考，此函數會傳回零。 如果`Object`包含任何其他型別，擲回例外狀況。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._159_1.vb)]"
  syntax:
    content: public static int Len (char Expression);
    parameters:
    - id: Expression
      type: System.Char
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式或變數名稱。 如果`Expression`的型別<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函式傳回的大小，因為它會寫入至檔案<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函式。"
    return:
      type: System.Int32
      description: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.DateTime)
  id: Len(System.DateTime)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(DateTime)
  nameWithType: Strings.Len(DateTime)
  fullName: Microsoft.VisualBasic.Strings.Len(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  remarks: "與使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。       `VBFixedString`屬性可以套用至物件，表示字串，以位元組為單位的大小，寫入時的 string 欄位至磁碟。 `Len`函式使用`VBFixedString`屬性，如果有的話，當決定的大小`Object`變數。      > [!NOTE] >`Len`函式可能無法判斷實際儲存可變長度的字串中的使用者定義資料型別搭配使用時所需的位元組數目。      > [!NOTE] >`LenB`函式在舊版的 Visual Basic 中為字串，而不是字元傳回的位元組數目。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有目前的 Visual Basic 字串都位於 Unicode，和`LenB`不再支援。      ## 智慧型裝置開發人員注意事項`Len`函式只接受`String`和`Object`做為參數的變數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數是 NULL`Object`參考，此函數會傳回零。 如果`Object`包含任何其他型別，擲回例外狀況。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._5_1.vb)]"
  syntax:
    content: public static int Len (DateTime Expression);
    parameters:
    - id: Expression
      type: System.DateTime
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式或變數名稱。 如果`Expression`的型別<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函式傳回的大小，因為它會寫入至檔案<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函式。"
    return:
      type: System.Int32
      description: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Decimal)
  id: Len(System.Decimal)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Decimal)
  nameWithType: Strings.Len(Decimal)
  fullName: Microsoft.VisualBasic.Strings.Len(Decimal)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  remarks: "與使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。       `VBFixedString`屬性可以套用至物件，表示字串，以位元組為單位的大小，寫入時的 string 欄位至磁碟。 `Len`函式使用`VBFixedString`屬性，如果有的話，當決定的大小`Object`變數。      > [!NOTE] >`Len`函式可能無法判斷實際儲存可變長度的字串中的使用者定義資料型別搭配使用時所需的位元組數目。      > [!NOTE] >`LenB`函式在舊版的 Visual Basic 中為字串，而不是字元傳回的位元組數目。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有目前的 Visual Basic 字串都位於 Unicode，和`LenB`不再支援。      ## 智慧型裝置開發人員注意事項`Len`函式只接受`String`和`Object`做為參數的變數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數是 NULL`Object`參考，此函數會傳回零。 如果`Object`包含任何其他型別，擲回例外狀況。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._30_1.vb)]"
  syntax:
    content: public static int Len (decimal Expression);
    parameters:
    - id: Expression
      type: System.Decimal
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式或變數名稱。 如果`Expression`的型別<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函式傳回的大小，因為它會寫入至檔案<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函式。"
    return:
      type: System.Int32
      description: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Double)
  id: Len(System.Double)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Double)
  nameWithType: Strings.Len(Double)
  fullName: Microsoft.VisualBasic.Strings.Len(Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  remarks: "與使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。       `VBFixedString`屬性可以套用至物件，表示字串，以位元組為單位的大小，寫入時的 string 欄位至磁碟。 `Len`函式使用`VBFixedString`屬性，如果有的話，當決定的大小`Object`變數。      > [!NOTE] >`Len`函式可能無法判斷實際儲存可變長度的字串中的使用者定義資料型別搭配使用時所需的位元組數目。      > [!NOTE] >`LenB`函式在舊版的 Visual Basic 中為字串，而不是字元傳回的位元組數目。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有目前的 Visual Basic 字串都位於 Unicode，和`LenB`不再支援。      ## 智慧型裝置開發人員注意事項`Len`函式只接受`String`和`Object`做為參數的變數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數是 NULL`Object`參考，此函數會傳回零。 如果`Object`包含任何其他型別，擲回例外狀況。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._173_1.vb)]"
  syntax:
    content: public static int Len (double Expression);
    parameters:
    - id: Expression
      type: System.Double
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式或變數名稱。 如果`Expression`的型別<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函式傳回的大小，因為它會寫入至檔案<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函式。"
    return:
      type: System.Int32
      description: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int16)
  id: Len(System.Int16)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int16)
  nameWithType: Strings.Len(Int16)
  fullName: Microsoft.VisualBasic.Strings.Len(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  remarks: "與使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。       `VBFixedString`屬性可以套用至物件，表示字串，以位元組為單位的大小，寫入時的 string 欄位至磁碟。 `Len`函式使用`VBFixedString`屬性，如果有的話，當決定的大小`Object`變數。      > [!NOTE] >`Len`函式可能無法判斷實際儲存可變長度的字串中的使用者定義資料型別搭配使用時所需的位元組數目。      > [!NOTE] >`LenB`函式在舊版的 Visual Basic 中為字串，而不是字元傳回的位元組數目。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有目前的 Visual Basic 字串都位於 Unicode，和`LenB`不再支援。      ## 智慧型裝置開發人員注意事項`Len`函式只接受`String`和`Object`做為參數的變數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數是 NULL`Object`參考，此函數會傳回零。 如果`Object`包含任何其他型別，擲回例外狀況。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._198_1.vb)]"
  syntax:
    content: public static int Len (short Expression);
    parameters:
    - id: Expression
      type: System.Int16
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式或變數名稱。 如果`Expression`的型別<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函式傳回的大小，因為它會寫入至檔案<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函式。"
    return:
      type: System.Int32
      description: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int32)
  id: Len(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int32)
  nameWithType: Strings.Len(Int32)
  fullName: Microsoft.VisualBasic.Strings.Len(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  remarks: "與使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。       `VBFixedString`屬性可以套用至物件，表示字串，以位元組為單位的大小，寫入時的 string 欄位至磁碟。 `Len`函式使用`VBFixedString`屬性，如果有的話，當決定的大小`Object`變數。      > [!NOTE] >`Len`函式可能無法判斷實際儲存可變長度的字串中的使用者定義資料型別搭配使用時所需的位元組數目。      > [!NOTE] >`LenB`函式在舊版的 Visual Basic 中為字串，而不是字元傳回的位元組數目。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有目前的 Visual Basic 字串都位於 Unicode，和`LenB`不再支援。      ## 智慧型裝置開發人員注意事項`Len`函式只接受`String`和`Object`做為參數的變數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數是 NULL`Object`參考，此函數會傳回零。 如果`Object`包含任何其他型別，擲回例外狀況。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._99_1.vb)]"
  syntax:
    content: public static int Len (int Expression);
    parameters:
    - id: Expression
      type: System.Int32
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式或變數名稱。 如果`Expression`的型別<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函式傳回的大小，因為它會寫入至檔案<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函式。"
    return:
      type: System.Int32
      description: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int64)
  id: Len(System.Int64)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int64)
  nameWithType: Strings.Len(Int64)
  fullName: Microsoft.VisualBasic.Strings.Len(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  remarks: "與使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。       `VBFixedString`屬性可以套用至物件，表示字串，以位元組為單位的大小，寫入時的 string 欄位至磁碟。 `Len`函式使用`VBFixedString`屬性，如果有的話，當決定的大小`Object`變數。      > [!NOTE] >`Len`函式可能無法判斷實際儲存可變長度的字串中的使用者定義資料型別搭配使用時所需的位元組數目。      > [!NOTE] >`LenB`函式在舊版的 Visual Basic 中為字串，而不是字元傳回的位元組數目。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有目前的 Visual Basic 字串都位於 Unicode，和`LenB`不再支援。      ## 智慧型裝置開發人員注意事項`Len`函式只接受`String`和`Object`做為參數的變數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數是 NULL`Object`參考，此函數會傳回零。 如果`Object`包含任何其他型別，擲回例外狀況。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._162_1.vb)]"
  syntax:
    content: public static int Len (long Expression);
    parameters:
    - id: Expression
      type: System.Int64
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式或變數名稱。 如果`Expression`的型別<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函式傳回的大小，因為它會寫入至檔案<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函式。"
    return:
      type: System.Int32
      description: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Object)
  id: Len(System.Object)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Object)
  nameWithType: Strings.Len(Object)
  fullName: Microsoft.VisualBasic.Strings.Len(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  remarks: "與使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。       `VBFixedString`屬性可以套用至物件，表示字串，以位元組為單位的大小，寫入時的 string 欄位至磁碟。 `Len`函式使用`VBFixedString`屬性，如果有的話，當決定的大小`Object`變數。      > [!NOTE] >`Len`函式可能無法判斷實際儲存可變長度的字串中的使用者定義資料型別搭配使用時所需的位元組數目。      > [!NOTE] >`LenB`函式在舊版的 Visual Basic 中為字串，而不是字元傳回的位元組數目。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有目前的 Visual Basic 字串都位於 Unicode，和`LenB`不再支援。      ## 智慧型裝置開發人員注意事項`Len`函式只接受`String`和`Object`做為參數的變數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數是 NULL`Object`參考，此函數會傳回零。 如果`Object`包含任何其他型別，擲回例外狀況。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._193_1.vb)]"
  syntax:
    content: public static int Len (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式或變數名稱。 如果`Expression`的型別<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函式傳回的大小，因為它會寫入至檔案<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函式。"
    return:
      type: System.Int32
      description: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.SByte)
  id: Len(System.SByte)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(SByte)
  nameWithType: Strings.Len(SByte)
  fullName: Microsoft.VisualBasic.Strings.Len(SByte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  remarks: "與使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。       `VBFixedString`屬性可以套用至物件，表示字串，以位元組為單位的大小，寫入時的 string 欄位至磁碟。 `Len`函式使用`VBFixedString`屬性，如果有的話，當決定的大小`Object`變數。      > [!NOTE] >`Len`函式可能無法判斷實際儲存可變長度的字串中的使用者定義資料型別搭配使用時所需的位元組數目。      > [!NOTE] >`LenB`函式在舊版的 Visual Basic 中為字串，而不是字元傳回的位元組數目。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有目前的 Visual Basic 字串都位於 Unicode，和`LenB`不再支援。      ## 智慧型裝置開發人員注意事項`Len`函式只接受`String`和`Object`做為參數的變數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數是 NULL`Object`參考，此函數會傳回零。 如果`Object`包含任何其他型別，擲回例外狀況。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._171_1.vb)]"
  syntax:
    content: public static int Len (sbyte Expression);
    parameters:
    - id: Expression
      type: System.SByte
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式或變數名稱。 如果`Expression`的型別<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函式傳回的大小，因為它會寫入至檔案<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函式。"
    return:
      type: System.Int32
      description: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Single)
  id: Len(System.Single)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Single)
  nameWithType: Strings.Len(Single)
  fullName: Microsoft.VisualBasic.Strings.Len(Single)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  remarks: "與使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。       `VBFixedString`屬性可以套用至物件，表示字串，以位元組為單位的大小，寫入時的 string 欄位至磁碟。 `Len`函式使用`VBFixedString`屬性，如果有的話，當決定的大小`Object`變數。      > [!NOTE] >`Len`函式可能無法判斷實際儲存可變長度的字串中的使用者定義資料型別搭配使用時所需的位元組數目。      > [!NOTE] >`LenB`函式在舊版的 Visual Basic 中為字串，而不是字元傳回的位元組數目。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有目前的 Visual Basic 字串都位於 Unicode，和`LenB`不再支援。      ## 智慧型裝置開發人員注意事項`Len`函式只接受`String`和`Object`做為參數的變數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數是 NULL`Object`參考，此函數會傳回零。 如果`Object`包含任何其他型別，擲回例外狀況。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._21_1.vb)]"
  syntax:
    content: public static int Len (float Expression);
    parameters:
    - id: Expression
      type: System.Single
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式或變數名稱。 如果`Expression`的型別<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函式傳回的大小，因為它會寫入至檔案<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函式。"
    return:
      type: System.Int32
      description: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.String)
  id: Len(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(String)
  nameWithType: Strings.Len(String)
  fullName: Microsoft.VisualBasic.Strings.Len(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  remarks: "與使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。       `VBFixedString`屬性可以套用至物件，表示字串，以位元組為單位的大小，寫入時的 string 欄位至磁碟。 `Len`函式使用`VBFixedString`屬性，如果有的話，當決定的大小`Object`變數。      > [!NOTE] >`Len`函式可能無法判斷實際儲存可變長度的字串中的使用者定義資料型別搭配使用時所需的位元組數目。      > [!NOTE] >`LenB`函式在舊版的 Visual Basic 中為字串，而不是字元傳回的位元組數目。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有目前的 Visual Basic 字串都位於 Unicode，和`LenB`不再支援。      ## 智慧型裝置開發人員注意事項`Len`函式只接受`String`和`Object`做為參數的變數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數是 NULL`Object`參考，此函數會傳回零。 如果`Object`包含任何其他型別，擲回例外狀況。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._72_1.vb)]"
  syntax:
    content: public static int Len (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式或變數名稱。 如果`Expression`的型別<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函式傳回的大小，因為它會寫入至檔案<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函式。"
    return:
      type: System.Int32
      description: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt16)
  id: Len(System.UInt16)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt16)
  nameWithType: Strings.Len(UInt16)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  remarks: "與使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。       `VBFixedString`屬性可以套用至物件，表示字串，以位元組為單位的大小，寫入時的 string 欄位至磁碟。 `Len`函式使用`VBFixedString`屬性，如果有的話，當決定的大小`Object`變數。      > [!NOTE] >`Len`函式可能無法判斷實際儲存可變長度的字串中的使用者定義資料型別搭配使用時所需的位元組數目。      > [!NOTE] >`LenB`函式在舊版的 Visual Basic 中為字串，而不是字元傳回的位元組數目。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有目前的 Visual Basic 字串都位於 Unicode，和`LenB`不再支援。      ## 智慧型裝置開發人員注意事項`Len`函式只接受`String`和`Object`做為參數的變數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數是 NULL`Object`參考，此函數會傳回零。 如果`Object`包含任何其他型別，擲回例外狀況。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._211_1.vb)]"
  syntax:
    content: public static int Len (ushort Expression);
    parameters:
    - id: Expression
      type: System.UInt16
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式或變數名稱。 如果`Expression`的型別<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函式傳回的大小，因為它會寫入至檔案<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函式。"
    return:
      type: System.Int32
      description: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt32)
  id: Len(System.UInt32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt32)
  nameWithType: Strings.Len(UInt32)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  remarks: "與使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。       `VBFixedString`屬性可以套用至物件，表示字串，以位元組為單位的大小，寫入時的 string 欄位至磁碟。 `Len`函式使用`VBFixedString`屬性，如果有的話，當決定的大小`Object`變數。      > [!NOTE] >`Len`函式可能無法判斷實際儲存可變長度的字串中的使用者定義資料型別搭配使用時所需的位元組數目。      > [!NOTE] >`LenB`函式在舊版的 Visual Basic 中為字串，而不是字元傳回的位元組數目。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有目前的 Visual Basic 字串都位於 Unicode，和`LenB`不再支援。      ## 智慧型裝置開發人員注意事項`Len`函式只接受`String`和`Object`做為參數的變數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數是 NULL`Object`參考，此函數會傳回零。 如果`Object`包含任何其他型別，擲回例外狀況。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._150_1.vb)]"
  syntax:
    content: public static int Len (uint Expression);
    parameters:
    - id: Expression
      type: System.UInt32
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式或變數名稱。 如果`Expression`的型別<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函式傳回的大小，因為它會寫入至檔案<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函式。"
    return:
      type: System.Int32
      description: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt64)
  id: Len(System.UInt64)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt64)
  nameWithType: Strings.Len(UInt64)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  remarks: "與使用者定義型別和`Object`變數`Len`函式傳回的大小，因為它會寫入至檔案`FilePut`函式。 如果`Object`包含`String`，它會傳回字串的長度。 如果`Object`包含任何其他類型，它會傳回物件的大小，因為它會寫入至檔案`FilePut`函式。       `VBFixedString`屬性可以套用至物件，表示字串，以位元組為單位的大小，寫入時的 string 欄位至磁碟。 `Len`函式使用`VBFixedString`屬性，如果有的話，當決定的大小`Object`變數。      > [!NOTE] >`Len`函式可能無法判斷實際儲存可變長度的字串中的使用者定義資料型別搭配使用時所需的位元組數目。      > [!NOTE] >`LenB`函式在舊版的 Visual Basic 中為字串，而不是字元傳回的位元組數目。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有目前的 Visual Basic 字串都位於 Unicode，和`LenB`不再支援。      ## 智慧型裝置開發人員注意事項`Len`函式只接受`String`和`Object`做為參數的變數。 如果`Object`包含`String`，它會傳回長度`String`。 如果參數是 NULL`Object`參考，此函數會傳回零。 如果`Object`包含任何其他型別，擲回例外狀況。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._37_1.vb)]"
  syntax:
    content: public static int Len (ulong Expression);
    parameters:
    - id: Expression
      type: System.UInt64
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式或變數名稱。 如果`Expression`的型別<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函式傳回的大小，因為它會寫入至檔案<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函式。"
    return:
      type: System.Int32
      description: "傳回包含在字串中的字元數或名義儲存變數所需的位元組數目的整數。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  id: LSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LSet(String,Int32)
  nameWithType: Strings.LSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.LSet(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回靠左對齊的字串，包含調整為指定之長度的指定的字串。"
  remarks: "如果指定的字串長度超過指定的長度，傳回的字串會縮短成指定的長度。 如果指定的字串長度小於指定的長度，以產生適當的長度傳回之字串的右邊加入空格。"
  example:
  - "This example demonstrates the use of the `LSet` function.  \n  \n [!code-vb[VbVbalrStrings#11](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._168_1.vb)]"
  syntax:
    content: public static string LSet (string Source, int Length);
    parameters:
    - id: Source
      type: System.String
      description: "必要。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。 字串變數的名稱。"
    - id: Length
      type: System.Int32
      description: "必要。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>運算式。 傳回字串的長度。"
    return:
      type: System.String
      description: "傳回靠左對齊的字串，包含調整為指定之長度的指定的字串。"
  overload: Microsoft.VisualBasic.Strings.LSet*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LTrim(System.String)
  id: LTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LTrim(String)
  nameWithType: Strings.LTrim(String)
  fullName: Microsoft.VisualBasic.Strings.LTrim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串，包含前置空格的指定字串的複本 (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>)、 沒有尾端空白 (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>)，或任何開頭或尾端空格 (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)。"
  remarks: "`LTrim`， `RTrim`，和`Trim`函數從字串的結尾移除空格。"
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._110_1.vb)]"
  syntax:
    content: public static string LTrim (string str);
    parameters:
    - id: str
      type: System.String
      description: "必要。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回字串，包含前置空格的指定字串的複本 (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>)、 沒有尾端空白 (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>)，或任何開頭或尾端空格 (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)。"
  overload: Microsoft.VisualBasic.Strings.LTrim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  id: Mid(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Mid(String,Int32)
  nameWithType: Strings.Mid(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串，包含從字串中指定位置開始的所有字元。"
  remarks: "若要判斷中的字元數`str`，使用`Len`函式。       Visual Basic 擁有`Mid`函式和`Mid`陳述式。 兩者的指定數目的字元在字串中, 操作這些項目但`Mid`函式會傳回的字元時`Mid`陳述式會取代字元。 如需詳細資訊，請參閱[Mid 陳述式](~/add/includes/ajax-current-ext-md.md)。      > [!NOTE] >`MidB`函式在舊版的 Visual Basic 中的位元組，而不是字元傳回的字串。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有的 Visual Basic 字串都位於 Unicode，和`MidB`不再支援。"
  example:
  - "The last line in this example uses this overload of the `Mid` function to return the fifth and subsequent characters from a string.  \n  \n [!code-vb[VbVbalrStrings#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._67_1.vb)]"
  syntax:
    content: public static string Mid (string str, int Start);
    parameters:
    - id: str
      type: System.String
      description: "必要。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>傳回字元運算式。"
    - id: Start
      type: System.Int32
      description: "必要。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>運算式。 要傳回的字元的開始位置。 如果`Start`中的字元數大於`str`、 <xref uid=&quot;langword_csharp_Mid&quot; name=&quot;Mid&quot; href=&quot;&quot;> </xref>函式會傳回零長度字串 (&quot;&quot;)。 `Start`是以一為基礎。"
    return:
      type: System.String
      description: "字串，包含從字串中指定位置開始的所有字元。"
  overload: Microsoft.VisualBasic.Strings.Mid*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt;= 0 or <code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  id: Mid(System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Mid(String,Int32,Int32)
  nameWithType: Strings.Mid(String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回包含指定的從字串中指定位置開始的字元數的字串。"
  remarks: "若要判斷中的字元數`str`，使用`Len`函式。       Visual Basic 擁有`Mid`函式和`Mid`陳述式。 兩者的指定數目的字元在字串中, 操作這些項目但`Mid`函式會傳回的字元時`Mid`陳述式會取代字元。 如需詳細資訊，請參閱[Mid 陳述式](~/add/includes/ajax-current-ext-md.md)。      > [!NOTE] >`MidB`函式在舊版的 Visual Basic 中的位元組，而不是字元傳回的字串。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有的 Visual Basic 字串都位於 Unicode，和`MidB`不再支援。"
  example:
  - "The first two `Mid` functions in this example return the specified number of characters from a string, starting from the given positions. (The last function illustrates the <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> overload and only specifies the starting point for the string extraction.)  \n  \n [!code-vb[VbVbalrStrings#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._33_1.vb)]"
  syntax:
    content: public static string Mid (string str, int Start, int Length);
    parameters:
    - id: str
      type: System.String
      description: "必要。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>傳回字元運算式。"
    - id: Start
      type: System.Int32
      description: "必要。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>運算式。 要傳回的字元的開始位置。 如果`Start`中的字元數大於`str`、 <xref uid=&quot;langword_csharp_Mid&quot; name=&quot;Mid&quot; href=&quot;&quot;> </xref>函式會傳回零長度字串 (&quot;&quot;)。 `Start`其中一個是以基礎。"
    - id: Length
      type: System.Int32
      description: "選擇性。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>運算式。 要傳回的字元數。 如果省略，或者如果有少於`Length`文字中的字元 (包括位置處的字元`Start`)，會傳回從開始位置到字串結尾的所有字元。"
    return:
      type: System.String
      description: "字串，包含指定的從字串中指定位置開始的字元數。"
  overload: Microsoft.VisualBasic.Strings.Mid*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt;= 0 or <code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Replace(String,String,String,Int32,Int32,CompareMethod)
  nameWithType: Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串中指定的子字串已取代為另一個子字串指定的次數。"
  remarks: "傳回值`Replace`函式是一個字串，所指定的位置開始`Start`，並於結尾的結尾`Expression`所做的替代字串所指定`Find`和`Replace`值。       `Compare`引數可以是下列值。      |||  |-|-|  |常數 |描述 |  |`Binary`|執行二進位比較 |  |`Text`|執行文字比較 |"
  example:
  - "This example demonstrates the `Replace` function.  \n  \n```vb#  \nDim TestString As String = \"Shopping List\"  \n' Returns \"Shipping List\".  \nDim aString As String = Replace(TestString, \"o\", \"i\")  \n```"
  syntax:
    content: public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Expression
      type: System.String
      description: "必要。 含有子字串取代字串運算式。"
    - id: Find
      type: System.String
      description: "必要。 要搜尋的子字串。"
    - id: Replacement
      type: System.String
      description: "必要。 取代子字串。"
    - id: Start
      type: System.Int32
      description: "選擇性。 定位內`Expression`開始用於取代子字串。 傳回值<xref uid=&quot;langword_csharp_Replace&quot; name=&quot;Replace&quot; href=&quot;&quot;></xref>是一個字串，起點`Start`，替代為適當的。 如果省略，則假設為 1。"
    - id: Count
      type: System.Int32
      description: "選擇性。 若要執行的子字串取代的數目。 如果省略，預設值為 –&1;，表示 「 讓所有可能的替代項目 」。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "選擇性。 數字的值，指出要用於評估子字串的比較類型。 值，請參閱設定。"
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_Replace&quot; name=&quot;Replace&quot; href=&quot;&quot;></xref>會傳回下列值。       <table><tbody><tr><td> 如果       </td><td> Replace 會傳回       </td></tr><tr><td><code>Find</code>長度為零或<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 複本<code>Expression</code></td></tr><tr><td><code>Replace</code>長度為零       </td><td> 複製的<code> Expression </code>與未出現<code>Find</code></td></tr><tr><td><code>Expression</code>長度為零或<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>，或<code> Start </code>大於的長度<code>Expression</code></td><td><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td></tr><tr><td><code>Count</code>為 0       </td><td> 複本<code>Expression</code></td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.Replace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Count</code>&lt; -1 or <code>Start</code> &lt;= 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  id: Right(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Right(String,Int32)
  nameWithType: Strings.Right(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Right(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串，包含指定的從字串右側的字元數。"
  remarks: "若要判斷中的字元數`str`，使用`Len`函式。 如果在 Windows Form 或有任何其他類別中使用`Right`屬性，您必須完整限定的函式與`Microsoft.VisualBasic.Strings.Right`。      > [!NOTE] >`RightB`函式在舊版的 Visual Basic 中的位元組，而不是字元傳回的字串。 它是主要用來轉換雙位元組字元集 (DBCS) 應用程式中的字串。 所有目前的 Visual Basic 字串都位於 Unicode，和`RightB`不再支援。"
  example:
  - "This example demonstrates the use of the `Right` function to return a substring of a given `String`. In a class that has a `Right` property, it may be necessary to fully qualify the `Right` function.  \n  \n [!code-vb[VbVbalrStrings#21](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._221_1.vb)]"
  syntax:
    content: public static string Right (string str, int Length);
    parameters:
    - id: str
      type: System.String
      description: "必要。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>要從中傳回最右邊字元運算式。"
    - id: Length
      type: System.Int32
      description: "必要。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. 表示要傳回多少字元的數值運算式。 如果為 0，零長度字串 (&quot;&quot;) 會傳回。 如果大於或等於中的字元數`str`，會傳回整個字串。"
    return:
      type: System.String
      description: "傳回字串，包含指定的從字串右側的字元數。"
  overload: Microsoft.VisualBasic.Strings.Right*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  id: RSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: RSet(String,Int32)
  nameWithType: Strings.RSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.RSet(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回靠右對齊的字串，包含調整為指定之長度的指定的字串。"
  remarks: "如果`Source`超過`Length`，`RSet`將只有最左邊字元，最多的長度`Source`，傳回的字串中。 如果指定的字串長度小於指定的長度，以產生適當的長度字串的左邊加入空格。 如果指定的字串長度超過指定的長度，它會縮短成指定的長度。"
  example:
  - "This example demonstrates the use of the `RSet` function.  \n  \n [!code-vb[VbVbalrStrings#9](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._218_1.vb)]"
  syntax:
    content: public static string RSet (string Source, int Length);
    parameters:
    - id: Source
      type: System.String
      description: "必要。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。 字串變數的名稱。"
    - id: Length
      type: System.Int32
      description: "必要。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>運算式。 傳回字串的長度。"
    return:
      type: System.String
      description: "傳回靠右對齊的字串，包含調整為指定之長度的指定的字串。"
  overload: Microsoft.VisualBasic.Strings.RSet*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.RTrim(System.String)
  id: RTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: RTrim(String)
  nameWithType: Strings.RTrim(String)
  fullName: Microsoft.VisualBasic.Strings.RTrim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串，包含前置空格的指定字串的複本 (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>)、 沒有尾端空白 (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>)，或任何開頭或尾端空格 (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)。"
  remarks: "`LTrim`， `RTrim`，和`Trim`函數從字串的結尾移除空格。"
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._143_1.vb)]"
  syntax:
    content: public static string RTrim (string str);
    parameters:
    - id: str
      type: System.String
      description: "必要。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回字串，包含前置空格的指定字串的複本 (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>)、 沒有尾端空白 (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>)，或任何開頭或尾端空格 (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)。"
  overload: Microsoft.VisualBasic.Strings.RTrim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Space(System.Int32)
  id: Space(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Space(Int32)
  nameWithType: Strings.Space(Int32)
  fullName: Microsoft.VisualBasic.Strings.Space(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串，其中包含指定的空格數目。"
  remarks: "`Space`函式可用於格式化輸出及清除固定長度字串中的資料。"
  example:
  - "This example uses the `Space` function to return a string consisting of a specified number of spaces.  \n  \n [!code-vb[VbVbalrStrings#2](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._154_1.vb)]"
  syntax:
    content: public static string Space (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "必要。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>運算式。 您想要在字串中的空格數目。"
    return:
      type: System.String
      description: "傳回字串，其中包含指定的空格數目。"
  overload: Microsoft.VisualBasic.Strings.Space*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Split(String,String,Int32,CompareMethod)
  nameWithType: Strings.Split(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Split(String,String,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回以零為起始的一維陣列，包含指定的數目的子字串。"
  remarks: "根據預設，或當`Limit`等於-1，`Split`函式上分割輸入的字串，在每次出現的分隔符號字串，並傳回陣列中的子字串。 當`Limit`參數大於零，`Split`函式會分割此字串在第一個`Limit`-1 出現的分隔符號，並傳回產生的子字串陣列。 例如，`Split(&quot;a:b:c&quot;, &quot;:&quot;)`傳回陣列`{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}`，雖然`Split(&quot;a:b:c&quot;, &quot;:&quot;, 2)`傳回陣列`{&quot;a&quot;, &quot;b:c&quot;}`。       當`Split`函式發生兩個分隔符號中的資料列或分隔符號的開頭或結尾的字串，它會將它們解譯為周圍的空字串 (&quot;&quot;)。 例如，`Split(&quot;xx&quot;, &quot;x&quot;)`傳回陣列，包含三個空白的字串︰ 一個介於開頭的字串和第一個&quot;x&quot;，其中兩個&quot;x&quot;字串，頭尾包括在內，另一個頭尾包括在內的最後一個&quot;x&quot;和字串的結尾。       此資料表會示範如何選擇性`Delimiter`， `Limit`，和`Compare`參數可以變更的行為`Split`函式。      |||  |-|-|  |分割呼叫 |傳回值 |  |`Split(&quot;42, 12, 19&quot;)`|{&quot;42&quot;、&quot;12，&quot;、&quot;19&quot;} |  |`Split(&quot;42, 12, 19&quot;, &quot;, &quot;)`|{&quot;42&quot;、&quot;12&quot;、&quot;19&quot;} |  |`Split(&quot;42, 12, 19&quot;, &quot;, &quot;, 2)`|{&quot;42&quot;、&quot;12，19&quot;} |  |`Split(&quot;192.168.0.1&quot;, &quot;.&quot;)`|{&quot;192&quot;、&quot;168&quot;、&quot;0&quot;、&quot;1&quot;} |  |`Split(&quot;Alice and Bob&quot;, &quot; AND &quot;)`|{&quot;Alice 和 Bob&quot;} |  |`Split(&quot;Alice and Bob&quot;, &quot; AND &quot;, ,CompareMethod.Text)`|{&quot;Alice&quot;，&quot;Bob&quot;} |  |`Split(&quot;someone@example.com&quot;, &quot;@&quot;,1)`|{&quot;someone@example.com&quot;}|  |`Split(&quot;someone@example.com&quot;, &quot;@&quot;,2)`|{&quot;someone&quot;，&quot;example.com&quot;}|      `Compare`引數可以是下列值。      ||||  |-|-|-|  |常數 |描述 |值 |  |`CompareMethod.Binary`|執行二進位比較 |&0; |  |`CompareMethod.Text`|執行文字比較 |&1; |"
  example:
  - "The following example demonstrates how to split a string at its spaces.  \n  \n [!code-vb[VbVbalrStrings#13](~/add/codesnippet/visualbasic/6fd442c5-62bb-40f5-92c0-_1.vb)]  \n  \n The following example demonstrates how to split strings with multiple delimiters in a row and filter out the empty strings.  \n  \n [!code-vb[VbVbalrStrings#14](~/add/codesnippet/visualbasic/6fd442c5-62bb-40f5-92c0-_2.vb)]"
  syntax:
    content: public static string[] Split (string Expression, string Delimiter = " ", int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Expression
      type: System.String
      description: "必要。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式，包含子字串和分隔符號。"
    - id: Delimiter
      type: System.String
      description: "選擇性。 用來識別子字串限制任何單一字元。 如果`Delimiter`省略，則空格字元 (&quot;&quot;) 會假設為分隔符號。"
    - id: Limit
      type: System.Int32
      description: "選擇性。 輸入的字串分割到其中的子字串的最大數目。 –&1;，預設值，指出，在每次出現的分割輸入的字串`Delimiter`字串。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "選擇性。 數值，表示要用於評估的比較子字串。 值，請參閱 < 設定 >。"
    return:
      type: System.String[]
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>陣列。 如果<code> Expression </code>為零長度字串 (&quot;&quot;)， <xref uid=&quot;langword_csharp_Split&quot; name=&quot;Split&quot; href=&quot;&quot;> </xref>傳回單一項目陣列，包含零長度字串。 如果<code> Delimiter </code>為零長度字串，或如果沒有出現任何位置中<code> Expression </code>， <xref uid=&quot;langword_csharp_Split&quot; name=&quot;Split&quot; href=&quot;&quot;> </xref>傳回單一項目陣列，包含整個<code> Expression </code>字串。"
  overload: Microsoft.VisualBasic.Strings.Split*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrComp(String,String,CompareMethod)
  nameWithType: Strings.StrComp(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.StrComp(String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "會傳回-1、 0 或 1 會根據字串比較的結果。"
  remarks: "比較字串的開頭為第一個字元的英數字元的排序值。 如進一步二進位比較、 文字的比較和排序順序的詳細資訊，請參閱[選項比較陳述式](~/add/includes/ajax-current-ext-md.md)。       `Compare`引數設定不: | | |  |-|-|  |常數 |描述 |  |`Binary`|執行二進位比較，並根據衍生自內部的二進位表示法的字元的排序次序。 |  |`Text`|文字根據執行比較，取決於您的系統的不區分大小寫文字排序順序`LocaleID`值。 |"
  example:
  - "This example uses the `StrComp` function to return the results of a string comparison.  \n  \n [!code-vb[VbVbalrStrings#22](~/add/codesnippet/visualbasic/40cb6ac0-98a9-4acc-9cbf-_1.vb)]"
  syntax:
    content: public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: String1
      type: System.String
      description: "必要。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    - id: String2
      type: System.String
      description: "必要。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "選擇性。 指定字串比較的類型。 如果`Compare`省略，則<xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;></xref>設定會決定的比較類型。"
    return:
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_StrComp&quot; name=&quot;StrComp&quot; href=&quot;&quot;> </xref>函式具有下列傳回值。       <table><tbody><tr><td> 如果       </td><td> StrComp 傳回       </td></tr><tr><td><code>String1</code>排序之前有<code>String2</code></td><td> -1       </td></tr><tr><td><code>String1</code>等於<code>String2</code></td><td> 0       </td></tr><tr><td><code>String1</code>在之後<code>String2</code></td><td> 1       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.StrComp*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Compare</code>值不是有效的。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  id: StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrConv(String,VbStrConv,Int32)
  nameWithType: Strings.StrConv(String,VbStrConv,Int32)
  fullName: Microsoft.VisualBasic.Strings.StrConv(String,VbStrConv,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回轉換成指定的字串。"
  remarks: "常數`VbStrConv.Wide`， `VbStrConv.Narrow`， `VbStrConv.SimplifiedChinese`， `VbStrConv.TraditionalChinese`， `VbStrConv.Katakana`，和`VbStrConv.Hiragana`可能會導致執行階段錯誤時，它們不會套用，地區設定中使用，但不是一定︰ 常數`VbStrConv.Katakana`和`VbStrConv.Hiragana`可以用於非日文系統與日文語言套件安裝。 此外，使用常數的`VbStrConv.Wide`和`VbStrConv.Narrow`任何系統上安裝為東亞語言支援。       管理字串，以便適當地區設定中使用應用程式的大小寫的變更時，此函數會使用應用程式的文化特性資訊。      > [!IMPORTANT] > 如果您的應用程式進行比較或大小寫變更作業的結果為基礎的安全性決策，則此作業，應該使用<xref:System.String.Compare%2A?displayProperty=fullName>方法，然後傳遞<xref:System.StringComparison>或<xref:System.StringComparison>如`comparisonType`引數。</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> 如需詳細資訊，請參閱[如何文化特性會影響字串在 Visual Basic 中](~/add/includes/ajax-current-ext-md.md)。       `Conversion`引數設定不: | | |  |-|-|  |列舉型別成員 |描述 |  |`VbStrConv.None`|會執行任何轉換 |  |`VbStrConv.LinguisticCasing`|使用語言規則來轉換，而非檔案系統 （預設值）。 適用於`VbStrConv.UpperCase`和`VbStrConv.LowerCase`只。 |  |`VbStrConv.UpperCase`|將字串轉換成大寫字元。 |  |`VbStrConv.LowerCase`|將字串轉換成小寫字元。 |  |`VbStrConv.ProperCase`|將字串中的每個字的第一個字母轉換成大寫。 |  |`VbStrConv.Wide` <sup>*</sup>|將窄 （半形） 字元 （全形） 的寬字元字串中。 |  |`VbStrConv.Narrow` <sup>*</sup>|將寬 （全形） 字元 （半形） 字元在字串中的轉換。 |  |`VbStrConv.Katakana` <sup>**</sup>|將平假名字元在字串中的轉換為片假名字元。 |  |`VbStrConv.Hiragana` <sup>**</sup>|將字串中的片假名字元轉換為平假名字元。 |  |`VbStrConv.SimplifiedChinese` <sup>*</sup>|將繁體中文字元轉換為簡體中文。 |  |`VbStrConv.TraditionalChinese` <sup>*</sup>|將簡體中文字元轉換為繁體中文。 |      <sup> * </sup>適用於亞洲地區設定。     <sup>**</sup>僅適用於 （日文）。      > [!NOTE] > 這些常數會指定.NET Framework common language runtime 中。 如此一來，它們可以用於任何位置的實際值取代程式碼中。 大部分可以結合 (比方說， `UpperCase + Wide`)，除非它們是互為獨佔模式 (例如， `VbStrConv.Wide + VbStrConv.Narrow`)。       以下是有效的文字分隔字元的適當的大小寫︰ Null (`Chr$(0)`)，水平定位字元 (`Chr$(9)`)，換行字元 (`Chr$(10)`)，垂直索引標籤 (`Chr$(11)`)，換頁字元 (`Chr$(12)`)，歸位字元 (`Chr$(13)`)，（單一位元組字元集） 的空間 (`Chr$(32)`)。 可以是全形或半形，空間的實際值會依國家/地區為東亞語言的文化特性而異。"
  example:
  - "This example converts text into all lowercase letters.  \n  \n [!code-vb[VbVbalrStrings#6](~/add/codesnippet/visualbasic/834dd6b9-b57e-4455-8085-_1.vb)]"
  syntax:
    content: public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);
    parameters:
    - id: str
      type: System.String
      description: "必要。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>要轉換的運算式。"
    - id: Conversion
      type: Microsoft.VisualBasic.VbStrConv
      description: "必要。 <xref href=&quot;Microsoft.VisualBasic.VbStrConv&quot;></xref>成員。 列舉值，指定要執行的轉換類型。"
    - id: LocaleID
      type: System.Int32
      description: "選擇性。 <xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;> </xref>值，如果不同於系統<xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;></xref>值。 (系統<xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;></xref>是預設值。)"
    return:
      type: System.String
      description: "傳回轉換成指定的字串。"
  overload: Microsoft.VisualBasic.Strings.StrConv*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "不支援<code> LocaleID </code>， <code> Conversion </code> &lt; 0 或&gt;2048年或不支援指定的地區設定轉換。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  id: StrDup(System.Int32,System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,Char)
  nameWithType: Strings.StrDup(Int32,Char)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串或物件，內含指定的字元重複指定的次數。"
  remarks: "此函數會傳回`String`重複的字元所組成。 構成的字串的字元是中的第一個字元`Character`引數，以及它重複`Number`的次數。"
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._197_1.vb)]"
  syntax:
    content: public static string StrDup (int Number, char Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "必要。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>運算式。 要傳回字串的長度。"
    - id: Character
      type: System.Char
      description: "必要。 Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. 將使用運算式的第一個字元。 如果字元是型別<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>，它必須包含<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;></xref>值。"
    return:
      type: System.String
      description: "傳回字串或物件，內含指定的字元重複指定的次數。"
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>小於 0 或<code>Character</code>類型無效。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  id: StrDup(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,Object)
  nameWithType: Strings.StrDup(Int32,Object)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串或物件，內含指定的字元重複指定的次數。"
  remarks: "此函數會傳回`String`重複的字元所組成。 構成的字串的字元是中的第一個字元`Character`引數，以及它重複`Number`的次數。"
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._63_1.vb)]"
  syntax:
    content: public static object StrDup (int Number, object Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "必要。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>運算式。 要傳回字串的長度。"
    - id: Character
      type: System.Object
      description: "必要。 Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. 將使用運算式的第一個字元。 如果字元是型別<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>，它必須包含<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;></xref>值。"
    return:
      type: System.Object
      description: "傳回字串或物件，內含指定的字元重複指定的次數。"
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>小於 0 或<code>Character</code>類型無效。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  id: StrDup(System.Int32,System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,String)
  nameWithType: Strings.StrDup(Int32,String)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串或物件，內含指定的字元重複指定的次數。"
  remarks: "此函數會傳回`String`重複的字元所組成。 構成的字串的字元是中的第一個字元`Character`引數，以及它重複`Number`的次數。"
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._148_1.vb)]"
  syntax:
    content: public static string StrDup (int Number, string Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "必要。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>運算式。 要傳回字串的長度。"
    - id: Character
      type: System.String
      description: "必要。 Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. 將使用運算式的第一個字元。 如果字元是型別<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>，它必須包含<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;></xref>值。"
    return:
      type: System.String
      description: "傳回字串或物件，內含指定的字元重複指定的次數。"
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>小於 0 或<code>Character</code>類型無效。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrReverse(System.String)
  id: StrReverse(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrReverse(String)
  nameWithType: Strings.StrReverse(String)
  fullName: Microsoft.VisualBasic.Strings.StrReverse(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回指定之字串的字元順序會顛倒的字串。"
  remarks: "`StrReverse`函式會傳回字串，包含相同的字元視為`Expression`，但相反的順序。"
  example:
  - '[!code-vb[VbVbalrStrings#29](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._7_1.vb)]'
  syntax:
    content: public static string StrReverse (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "必要。 反向字元的字串運算式。 如果`Expression`為零長度字串 (&quot;&quot;)，就會傳回零長度字串。"
    return:
      type: System.String
      description: "傳回指定之字串的字元順序會顛倒的字串。"
  overload: Microsoft.VisualBasic.Strings.StrReverse*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Trim(System.String)
  id: Trim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Trim(String)
  nameWithType: Strings.Trim(String)
  fullName: Microsoft.VisualBasic.Strings.Trim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串，包含前置空格的指定字串的複本 (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>)、 沒有尾端空白 (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>)，或任何開頭或尾端空格 (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)。"
  remarks: "`LTrim`， `RTrim`，和`Trim`函數從字串的結尾移除空格。"
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._87_1.vb)]"
  syntax:
    content: public static string Trim (string str);
    parameters:
    - id: str
      type: System.String
      description: "必要。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回字串，包含前置空格的指定字串的複本 (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>)、 沒有尾端空白 (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>)，或任何開頭或尾端空格 (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)。"
  overload: Microsoft.VisualBasic.Strings.Trim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.UCase(System.Char)
  id: UCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: UCase(Char)
  nameWithType: Strings.UCase(Char)
  fullName: Microsoft.VisualBasic.Strings.UCase(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串或包含指定的字串轉換成大寫的字元。"
  remarks: "小寫字母會轉換成大寫。所有的大寫字母和 nonletter 字元保持不變。       管理字串，以便適當地區設定中使用應用程式的大小寫的變更時，此函數會使用應用程式的文化特性資訊。      > [!IMPORTANT] > 如果您的應用程式進行比較或大小寫變更作業的結果為基礎的安全性決策，則此作業，應該使用<xref:System.String.Compare%2A?displayProperty=fullName>方法，然後傳遞<xref:System.StringComparison>或<xref:System.StringComparison>如`comparisonType`引數。</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> 如需詳細資訊，請參閱[如何文化特性會影響字串在 Visual Basic 中](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "This example uses the `UCase` function to return an uppercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#31](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._201_1.vb)]"
  syntax:
    content: public static char UCase (char Value);
    parameters:
    - id: Value
      type: System.Char
      description: "必要。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.Char
      description: "傳回字串或包含指定的字串轉換成大寫的字元。"
  overload: Microsoft.VisualBasic.Strings.UCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.UCase(System.String)
  id: UCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: UCase(String)
  nameWithType: Strings.UCase(String)
  fullName: Microsoft.VisualBasic.Strings.UCase(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串或包含指定的字串轉換成大寫的字元。"
  remarks: "小寫字母會轉換成大寫。所有的大寫字母和 nonletter 字元保持不變。       管理字串，以便適當地區設定中使用應用程式的大小寫的變更時，此函數會使用應用程式的文化特性資訊。      > [!IMPORTANT] > 如果您的應用程式進行比較或大小寫變更作業的結果為基礎的安全性決策，則此作業，應該使用<xref:System.String.Compare%2A?displayProperty=fullName>方法，然後傳遞<xref:System.StringComparison>或<xref:System.StringComparison>如`comparisonType`引數。</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> 如需詳細資訊，請參閱[如何文化特性會影響字串在 Visual Basic 中](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "This example uses the `UCase` function to return an uppercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#31](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._23_1.vb)]"
  syntax:
    content: public static string UCase (string Value);
    parameters:
    - id: Value
      type: System.String
      description: "必要。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回字串或包含指定的字串轉換成大寫的字元。"
  overload: Microsoft.VisualBasic.Strings.UCase*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: Microsoft.VisualBasic.Strings.Asc(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc(Char)
  nameWithType: Strings.Asc(Char)
  fullName: Microsoft.VisualBasic.Strings.Asc(Char)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: Microsoft.VisualBasic.Strings.Asc(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc(String)
  nameWithType: Strings.Asc(String)
  fullName: Microsoft.VisualBasic.Strings.Asc(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Strings.AscW(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW(Char)
  nameWithType: Strings.AscW(Char)
  fullName: Microsoft.VisualBasic.Strings.AscW(Char)
- uid: Microsoft.VisualBasic.Strings.AscW(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW(String)
  nameWithType: Strings.AscW(String)
  fullName: Microsoft.VisualBasic.Strings.AscW(String)
- uid: Microsoft.VisualBasic.Strings.Chr(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Chr(Int32)
  nameWithType: Strings.Chr(Int32)
  fullName: Microsoft.VisualBasic.Strings.Chr(Int32)
- uid: Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: ChrW(Int32)
  nameWithType: Strings.ChrW(Int32)
  fullName: Microsoft.VisualBasic.Strings.ChrW(Int32)
- uid: Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter(Object[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(Object[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(Object[],String,Boolean,CompareMethod)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.CompareMethod
  parent: Microsoft.VisualBasic
  isExternal: false
  name: CompareMethod
  nameWithType: CompareMethod
  fullName: Microsoft.VisualBasic.CompareMethod
- uid: Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter(String[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(String[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(String[],String,Boolean,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Format(Object,String)
  nameWithType: Strings.Format(Object,String)
  fullName: Microsoft.VisualBasic.Strings.Format(Object,String)
- uid: Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatCurrency(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.TriState
  parent: Microsoft.VisualBasic
  isExternal: false
  name: TriState
  nameWithType: TriState
  fullName: Microsoft.VisualBasic.TriState
- uid: Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatDateTime(DateTime,DateFormat)
  nameWithType: Strings.FormatDateTime(DateTime,DateFormat)
  fullName: Microsoft.VisualBasic.Strings.FormatDateTime(DateTime,DateFormat)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.VisualBasic.DateFormat
  parent: Microsoft.VisualBasic
  isExternal: false
  name: DateFormat
  nameWithType: DateFormat
  fullName: Microsoft.VisualBasic.DateFormat
- uid: Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatNumber(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatPercent(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: GetChar(String,Int32)
  nameWithType: Strings.GetChar(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.GetChar(String,Int32)
- uid: Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr(String,String,CompareMethod)
  nameWithType: Strings.InStr(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr(Int32,String,String,CompareMethod)
  nameWithType: Strings.InStr(Int32,String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(Int32,String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStrRev(String,String,Int32,CompareMethod)
  nameWithType: Strings.InStrRev(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStrRev(String,String,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join(Object[],String)
  nameWithType: Strings.Join(Object[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(Object[],String)
- uid: Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join(String[],String)
  nameWithType: Strings.Join(String[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(String[],String)
- uid: Microsoft.VisualBasic.Strings.LCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase(Char)
  nameWithType: Strings.LCase(Char)
  fullName: Microsoft.VisualBasic.Strings.LCase(Char)
- uid: Microsoft.VisualBasic.Strings.LCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase(String)
  nameWithType: Strings.LCase(String)
  fullName: Microsoft.VisualBasic.Strings.LCase(String)
- uid: Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Left(String,Int32)
  nameWithType: Strings.Left(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Left(String,Int32)
- uid: Microsoft.VisualBasic.Strings.Len(System.Boolean)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Boolean)
  nameWithType: Strings.Len(Boolean)
  fullName: Microsoft.VisualBasic.Strings.Len(Boolean)
- uid: Microsoft.VisualBasic.Strings.Len(System.Byte)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Byte)
  nameWithType: Strings.Len(Byte)
  fullName: Microsoft.VisualBasic.Strings.Len(Byte)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Microsoft.VisualBasic.Strings.Len(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Char)
  nameWithType: Strings.Len(Char)
  fullName: Microsoft.VisualBasic.Strings.Len(Char)
- uid: Microsoft.VisualBasic.Strings.Len(System.DateTime)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(DateTime)
  nameWithType: Strings.Len(DateTime)
  fullName: Microsoft.VisualBasic.Strings.Len(DateTime)
- uid: Microsoft.VisualBasic.Strings.Len(System.Decimal)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Decimal)
  nameWithType: Strings.Len(Decimal)
  fullName: Microsoft.VisualBasic.Strings.Len(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: Microsoft.VisualBasic.Strings.Len(System.Double)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Double)
  nameWithType: Strings.Len(Double)
  fullName: Microsoft.VisualBasic.Strings.Len(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.Strings.Len(System.Int16)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int16)
  nameWithType: Strings.Len(Int16)
  fullName: Microsoft.VisualBasic.Strings.Len(Int16)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: Microsoft.VisualBasic.Strings.Len(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int32)
  nameWithType: Strings.Len(Int32)
  fullName: Microsoft.VisualBasic.Strings.Len(Int32)
- uid: Microsoft.VisualBasic.Strings.Len(System.Int64)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int64)
  nameWithType: Strings.Len(Int64)
  fullName: Microsoft.VisualBasic.Strings.Len(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Strings.Len(System.Object)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Object)
  nameWithType: Strings.Len(Object)
  fullName: Microsoft.VisualBasic.Strings.Len(Object)
- uid: Microsoft.VisualBasic.Strings.Len(System.SByte)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(SByte)
  nameWithType: Strings.Len(SByte)
  fullName: Microsoft.VisualBasic.Strings.Len(SByte)
- uid: System.SByte
  parent: System
  isExternal: true
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: Microsoft.VisualBasic.Strings.Len(System.Single)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Single)
  nameWithType: Strings.Len(Single)
  fullName: Microsoft.VisualBasic.Strings.Len(Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.VisualBasic.Strings.Len(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(String)
  nameWithType: Strings.Len(String)
  fullName: Microsoft.VisualBasic.Strings.Len(String)
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt16)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt16)
  nameWithType: Strings.Len(UInt16)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt16)
- uid: System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt32)
  nameWithType: Strings.Len(UInt32)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt64)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt64)
  nameWithType: Strings.Len(UInt64)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt64)
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LSet(String,Int32)
  nameWithType: Strings.LSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.LSet(String,Int32)
- uid: Microsoft.VisualBasic.Strings.LTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LTrim(String)
  nameWithType: Strings.LTrim(String)
  fullName: Microsoft.VisualBasic.Strings.LTrim(String)
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid(String,Int32)
  nameWithType: Strings.Mid(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32)
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid(String,Int32,Int32)
  nameWithType: Strings.Mid(String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32,Int32)
- uid: Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Replace(String,String,String,Int32,Int32,CompareMethod)
  nameWithType: Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Right(String,Int32)
  nameWithType: Strings.Right(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Right(String,Int32)
- uid: Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RSet(String,Int32)
  nameWithType: Strings.RSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.RSet(String,Int32)
- uid: Microsoft.VisualBasic.Strings.RTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RTrim(String)
  nameWithType: Strings.RTrim(String)
  fullName: Microsoft.VisualBasic.Strings.RTrim(String)
- uid: Microsoft.VisualBasic.Strings.Space(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Space(Int32)
  nameWithType: Strings.Space(Int32)
  fullName: Microsoft.VisualBasic.Strings.Space(Int32)
- uid: Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Split(String,String,Int32,CompareMethod)
  nameWithType: Strings.Split(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Split(String,String,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrComp(String,String,CompareMethod)
  nameWithType: Strings.StrComp(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.StrComp(String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrConv(String,VbStrConv,Int32)
  nameWithType: Strings.StrConv(String,VbStrConv,Int32)
  fullName: Microsoft.VisualBasic.Strings.StrConv(String,VbStrConv,Int32)
- uid: Microsoft.VisualBasic.VbStrConv
  parent: Microsoft.VisualBasic
  isExternal: false
  name: VbStrConv
  nameWithType: VbStrConv
  fullName: Microsoft.VisualBasic.VbStrConv
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,Char)
  nameWithType: Strings.StrDup(Int32,Char)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Char)
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,Object)
  nameWithType: Strings.StrDup(Int32,Object)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Object)
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,String)
  nameWithType: Strings.StrDup(Int32,String)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,String)
- uid: Microsoft.VisualBasic.Strings.StrReverse(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrReverse(String)
  nameWithType: Strings.StrReverse(String)
  fullName: Microsoft.VisualBasic.Strings.StrReverse(String)
- uid: Microsoft.VisualBasic.Strings.Trim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Trim(String)
  nameWithType: Strings.Trim(String)
  fullName: Microsoft.VisualBasic.Strings.Trim(String)
- uid: Microsoft.VisualBasic.Strings.UCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase(Char)
  nameWithType: Strings.UCase(Char)
  fullName: Microsoft.VisualBasic.Strings.UCase(Char)
- uid: Microsoft.VisualBasic.Strings.UCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase(String)
  nameWithType: Strings.UCase(String)
  fullName: Microsoft.VisualBasic.Strings.UCase(String)
- uid: Microsoft.VisualBasic.Strings.Asc*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc
  nameWithType: Strings.Asc
- uid: Microsoft.VisualBasic.Strings.AscW*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW
  nameWithType: Strings.AscW
- uid: Microsoft.VisualBasic.Strings.Chr*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Chr
  nameWithType: Strings.Chr
- uid: Microsoft.VisualBasic.Strings.ChrW*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: ChrW
  nameWithType: Strings.ChrW
- uid: Microsoft.VisualBasic.Strings.Filter*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter
  nameWithType: Strings.Filter
- uid: Microsoft.VisualBasic.Strings.Format*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Format
  nameWithType: Strings.Format
- uid: Microsoft.VisualBasic.Strings.FormatCurrency*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatCurrency
  nameWithType: Strings.FormatCurrency
- uid: Microsoft.VisualBasic.Strings.FormatDateTime*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatDateTime
  nameWithType: Strings.FormatDateTime
- uid: Microsoft.VisualBasic.Strings.FormatNumber*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatNumber
  nameWithType: Strings.FormatNumber
- uid: Microsoft.VisualBasic.Strings.FormatPercent*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatPercent
  nameWithType: Strings.FormatPercent
- uid: Microsoft.VisualBasic.Strings.GetChar*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: GetChar
  nameWithType: Strings.GetChar
- uid: Microsoft.VisualBasic.Strings.InStr*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr
  nameWithType: Strings.InStr
- uid: Microsoft.VisualBasic.Strings.InStrRev*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStrRev
  nameWithType: Strings.InStrRev
- uid: Microsoft.VisualBasic.Strings.Join*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join
  nameWithType: Strings.Join
- uid: Microsoft.VisualBasic.Strings.LCase*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase
  nameWithType: Strings.LCase
- uid: Microsoft.VisualBasic.Strings.Left*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Left
  nameWithType: Strings.Left
- uid: Microsoft.VisualBasic.Strings.Len*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len
  nameWithType: Strings.Len
- uid: Microsoft.VisualBasic.Strings.LSet*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LSet
  nameWithType: Strings.LSet
- uid: Microsoft.VisualBasic.Strings.LTrim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LTrim
  nameWithType: Strings.LTrim
- uid: Microsoft.VisualBasic.Strings.Mid*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid
  nameWithType: Strings.Mid
- uid: Microsoft.VisualBasic.Strings.Replace*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Replace
  nameWithType: Strings.Replace
- uid: Microsoft.VisualBasic.Strings.Right*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Right
  nameWithType: Strings.Right
- uid: Microsoft.VisualBasic.Strings.RSet*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RSet
  nameWithType: Strings.RSet
- uid: Microsoft.VisualBasic.Strings.RTrim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RTrim
  nameWithType: Strings.RTrim
- uid: Microsoft.VisualBasic.Strings.Space*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Space
  nameWithType: Strings.Space
- uid: Microsoft.VisualBasic.Strings.Split*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Split
  nameWithType: Strings.Split
- uid: Microsoft.VisualBasic.Strings.StrComp*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrComp
  nameWithType: Strings.StrComp
- uid: Microsoft.VisualBasic.Strings.StrConv*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrConv
  nameWithType: Strings.StrConv
- uid: Microsoft.VisualBasic.Strings.StrDup*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup
  nameWithType: Strings.StrDup
- uid: Microsoft.VisualBasic.Strings.StrReverse*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrReverse
  nameWithType: Strings.StrReverse
- uid: Microsoft.VisualBasic.Strings.Trim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Trim
  nameWithType: Strings.Trim
- uid: Microsoft.VisualBasic.Strings.UCase*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase
  nameWithType: Strings.UCase
