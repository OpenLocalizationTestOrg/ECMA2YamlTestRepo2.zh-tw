### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.DynamicILInfo
  id: DynamicILInfo
  children:
  - System.Reflection.Emit.DynamicILInfo.DynamicMethod
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  langs:
  - csharp
  name: DynamicILInfo
  nameWithType: DynamicILInfo
  fullName: System.Reflection.Emit.DynamicILInfo
  type: Class
  summary: "提供產生 Microsoft intermediate language (MSIL) 的替代方式的支援，以及動態方法，包括建立權杖，以及插入程式碼、 例外狀況處理和區域變數簽章 blob 方法的中繼資料。"
  remarks: "DynamicILInfo 類別可讓開發人員撰寫自己的 MSIL 產生器，而不是使用<xref:System.Reflection.Emit.ILGenerator>.</xref:System.Reflection.Emit.ILGenerator>       若要建立其他類型的執行個體，呼叫方法，以及其他您產生的 MSIL 必須包含語彙基元的這些實體。 DynamicILInfo 類別提供數個多載的<xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A>方法，傳回權杖有效範圍內的目前 DynamicILInfo。</xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> 例如，如果您需要呼叫的多載<xref:System.Console.WriteLine%2A?displayProperty=fullName>方法，您可以取得<xref:System.RuntimeMethodHandle>的多載，並將它傳遞給<xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A>方法，以取得要內嵌在您的 MSIL 的語彙基元。</xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> </xref:System.RuntimeMethodHandle> </xref:System.Console.WriteLine%2A?displayProperty=fullName>       一旦您建立<xref:System.Byte>陣列以進行您的區域變數簽章、 例外狀況，以及程式碼主體，您可以使用<xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>， <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>，和<xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A>方法來插入到<xref:System.Reflection.Emit.DynamicMethod>DynamicILInfo 物件相關聯。</xref:System.Reflection.Emit.DynamicMethod> </xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> </xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A> </xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A> </xref:System.Byte>       產生您自己的中繼資料和 MSIL 必須熟悉的通用語言基礎結構 (CLI) 文件，尤其是 < 磁碟分割第二部分︰ 中繼資料定義和語意 > 以及 < 磁碟分割 iii 部分︰ CIL 指令集 」。 線上; 也提供文件請參閱[ECMA C# 和通用語言基礎結構標準](http://go.microsoft.com/fwlink/?LinkID=99212)msdn 和[標準 ecma-335-通用語言基礎結構 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 網站上。      > [!NOTE] > 請勿使用 DynamicILInfo 來產生程式碼會建立另一個動態方法的委派直接呼叫的委派建構函式。 請改用<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>方法來建立委派。</xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> 委派建構函式來建立委派沒有目標動態方法的參考。 動態方法可能會回收進行回收，委派仍在使用中時。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class DynamicILInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  id: DynamicMethod
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
  fullName: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "取得動態方法的主體由目前的執行個體所產生。"
  remarks: "A<xref:System.Reflection.Emit.DynamicILInfo>物件永遠是動態方法相關聯。</xref:System.Reflection.Emit.DynamicILInfo> <xref:System.Reflection.Emit.DynamicILInfo>類別是要提供另一種插入 MSIL 資料流、 例外狀況處理及執行動態方法，開發人員想要產生 MSIL，而不需使用<xref:System.Reflection.Emit.ILGenerator>類別</xref:System.Reflection.Emit.ILGenerator>的區域變數簽章</xref:System.Reflection.Emit.DynamicILInfo>的目的"
  syntax:
    content: public System.Reflection.Emit.DynamicMethod DynamicMethod { get; }
    return:
      type: System.Reflection.Emit.DynamicMethod
      description: "A<xref:System.Reflection.Emit.DynamicMethod>物件，代表動態方法為其目前<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;></xref>物件已產生程式碼。</xref:System.Reflection.Emit.DynamicMethod>"
  overload: System.Reflection.Emit.DynamicILInfo.DynamicMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  id: GetTokenFor(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(Byte[])
  nameWithType: DynamicILInfo.GetTokenFor(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "取得語彙基元，在目前範圍中有效<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>，代表相關聯的動態方法的簽章。"
  remarks: '簽章的 blob 上的資訊，請參閱 Common Language Infrastructure (CLI) 文件，尤其是 < 磁碟分割 II︰ 中繼資料定義和語意 >。 線上; 也提供文件請參閱[ECMA C# 和通用語言基礎結構標準](http://go.microsoft.com/fwlink/?LinkID=99212)msdn 和[標準 ecma-335-通用語言基礎結構 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 網站上。'
  syntax:
    content: public int GetTokenFor (byte[] signature);
    parameters:
    - id: signature
      type: System.Byte[]
      description: "陣列，包含簽章。"
    return:
      type: System.Int32
      description: "Token，您可以內嵌在中繼資料和相關聯的動態方法的 MSIL 資料流中。"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  id: GetTokenFor(System.Reflection.Emit.DynamicMethod)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(DynamicMethod)
  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(DynamicMethod)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "取得語彙基元，在目前範圍中有效<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>，代表動態方法，從相關聯的方法呼叫。"
  remarks: "這個方法多載所傳回的權杖可讓您從與目前相關聯的動態方法呼叫的動態方法<xref:System.Reflection.Emit.DynamicILInfo>物件。</xref:System.Reflection.Emit.DynamicILInfo> 若要呼叫相關聯的動態方法以遞迴方式，將值傳遞<xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A>屬性。</xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A>"
  syntax:
    content: public int GetTokenFor (System.Reflection.Emit.DynamicMethod method);
    parameters:
    - id: method
      type: System.Reflection.Emit.DynamicMethod
      description: "要呼叫的動態方法。"
    return:
      type: System.Int32
      description: "此語彙基元可以內嵌在相關聯的動態方法的 MSIL 資料流中，做為目標的 MSIL 指令。"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  id: GetTokenFor(System.RuntimeFieldHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeFieldHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "取得語彙基元，在目前範圍中有效<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>，代表要從相關聯的動態方法存取的欄位。"
  remarks: "您必須取得的任何欄位，將目前相關聯的動態方法所存取的語彙基元<xref:System.Reflection.Emit.DynamicILInfo>物件。</xref:System.Reflection.Emit.DynamicILInfo> 使用<xref:System.Type.GetField%2A?displayProperty=fullName>方法來取得<xref:System.Reflection.FieldInfo>您想要存取，則使用<xref:System.Reflection.FieldInfo.FieldHandle%2A>屬性來取得<xref:System.RuntimeFieldHandle>.</xref:System.RuntimeFieldHandle></xref:System.Reflection.FieldInfo.FieldHandle%2A>欄位</xref:System.Reflection.FieldInfo></xref:System.Type.GetField%2A?displayProperty=fullName>"
  syntax:
    content: public int GetTokenFor (RuntimeFieldHandle field);
    parameters:
    - id: field
      type: System.RuntimeFieldHandle
      description: "要存取的欄位。"
    return:
      type: System.Int32
      description: "可用來當做存取欄位，在目前的範圍內的 MSIL 指令的運算元語彙基元<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;></xref>物件。"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  id: GetTokenFor(System.RuntimeMethodHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeMethodHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "取得語彙基元，在目前範圍中有效<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>，代表從相關聯的動態方法存取的方法。"
  remarks: "您必須取得的任何方法，將目前相關聯的動態方法所存取的語彙基元<xref:System.Reflection.Emit.DynamicILInfo>物件。</xref:System.Reflection.Emit.DynamicILInfo> 使用<xref:System.Type.GetMethod%2A?displayProperty=fullName>方法來取得<xref:System.Reflection.MethodInfo>您想要存取，然後使用<xref:System.Reflection.MethodBase.MethodHandle%2A>屬性來取得<xref:System.RuntimeMethodHandle>.</xref:System.RuntimeMethodHandle></xref:System.Reflection.MethodBase.MethodHandle%2A>方法</xref:System.Reflection.MethodInfo></xref:System.Type.GetMethod%2A?displayProperty=fullName>      > [!NOTE] > 方法屬於泛型型別，請使用<xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29>方法多載，並指定<xref:System.RuntimeTypeHandle>泛型型別。</xref:System.RuntimeTypeHandle> </xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29>"
  syntax:
    content: public int GetTokenFor (RuntimeMethodHandle method);
    parameters:
    - id: method
      type: System.RuntimeMethodHandle
      description: "要存取的方法。"
    return:
      type: System.Int32
      description: "可用來當作這類存取方法的 MSIL 指令的運算元語彙基元<xref:System.Reflection.Emit.OpCodes.Call>或<xref:System.Reflection.Emit.OpCodes.Ldtoken>，在目前的範圍內<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;></xref>物件。</xref:System.Reflection.Emit.OpCodes.Ldtoken> </xref:System.Reflection.Emit.OpCodes.Call>"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "取得語彙基元，在目前範圍中有效<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>，代表使用中相關聯的動態方法的型別。"
  remarks: "這個方法多載所傳回的權杖可讓您定義本機變數的類型，並發出在目前相關聯的動態方法中建立類型的執行個體的 MSIL<xref:System.Reflection.Emit.DynamicILInfo>物件。</xref:System.Reflection.Emit.DynamicILInfo>       若要取得<xref:System.RuntimeTypeHandle>代表的類型，使用<xref:System.Type.TypeHandle%2A?displayProperty=fullName>屬性。</xref:System.Type.TypeHandle%2A?displayProperty=fullName> </xref:System.RuntimeTypeHandle>"
  syntax:
    content: public int GetTokenFor (RuntimeTypeHandle type);
    parameters:
    - id: type
      type: System.RuntimeTypeHandle
      description: "要使用的類型。"
    return:
      type: System.Int32
      description: "可用來當作要求型別，在目前的範圍內的 MSIL 指令的運算元語彙基元<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;></xref>物件。"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  id: GetTokenFor(System.String)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(String)
  nameWithType: DynamicILInfo.GetTokenFor(String)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "取得語彙基元，在目前範圍中有效<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>，表示為字串常值，以用於相關聯的動態方法。"
  syntax:
    content: public int GetTokenFor (string literal);
    parameters:
    - id: literal
      type: System.String
      description: "要使用的字串。"
    return:
      type: System.Int32
      description: "可用來當作，必須為字串的目前範圍內的 MSIL 指令的運算元語彙基元<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;></xref>物件。"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "取得語彙基元，在目前範圍中有效<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>，表示欄位相關聯的動態方法，從存取欄位是指定的泛型型別。"
  remarks: "您必須取得的任何欄位，將目前相關聯的動態方法所存取的語彙基元<xref:System.Reflection.Emit.DynamicILInfo>物件。</xref:System.Reflection.Emit.DynamicILInfo> 使用<xref:System.Type.GetField%2A?displayProperty=fullName>方法來取得<xref:System.Reflection.FieldInfo>您想要存取，然後使用<xref:System.Reflection.FieldInfo.FieldHandle%2A>屬性來取得<xref:System.RuntimeFieldHandle>.</xref:System.RuntimeFieldHandle></xref:System.Reflection.FieldInfo.FieldHandle%2A>欄位</xref:System.Reflection.FieldInfo></xref:System.Type.GetField%2A?displayProperty=fullName>"
  syntax:
    content: public int GetTokenFor (RuntimeFieldHandle field, RuntimeTypeHandle contextType);
    parameters:
    - id: field
      type: System.RuntimeFieldHandle
      description: "要存取的欄位。"
    - id: contextType
      type: System.RuntimeTypeHandle
      description: "欄位所屬的泛型型別。"
    return:
      type: System.Int32
      description: "可用來當做存取在目前的範圍內的欄位 MSIL 指令的運算元語彙基元<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;></xref>物件。"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "取得語彙基元，在目前範圍中有效<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>，代表泛型類型上的方法。"
  remarks: "您必須取得與目前相關聯的動態方法會呼叫任何方法的語彙基元<xref:System.Reflection.Emit.DynamicILInfo>物件。</xref:System.Reflection.Emit.DynamicILInfo> 使用<xref:System.Type.GetMethod%2A?displayProperty=fullName>方法來取得<xref:System.Reflection.MethodInfo>您想要呼叫，然後使用<xref:System.Reflection.MethodBase.MethodHandle%2A>屬性來取得<xref:System.RuntimeMethodHandle>.</xref:System.RuntimeMethodHandle></xref:System.Reflection.MethodBase.MethodHandle%2A>方法</xref:System.Reflection.MethodInfo></xref:System.Type.GetMethod%2A?displayProperty=fullName>"
  syntax:
    content: public int GetTokenFor (RuntimeMethodHandle method, RuntimeTypeHandle contextType);
    parameters:
    - id: method
      type: System.RuntimeMethodHandle
      description: "方法。"
    - id: contextType
      type: System.RuntimeTypeHandle
      description: "方法屬於泛型型別。"
    return:
      type: System.Int32
      description: "可用來當作這類存取方法的 MSIL 指令的運算元語彙基元<xref:System.Reflection.Emit.OpCodes.Call>或<xref:System.Reflection.Emit.OpCodes.Ldtoken>，在目前的範圍內<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;></xref>物件。</xref:System.Reflection.Emit.OpCodes.Ldtoken> </xref:System.Reflection.Emit.OpCodes.Call>"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  id: SetCode(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetCode(Byte[],Int32)
  nameWithType: DynamicILInfo.SetCode(Byte[],Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "設定相關聯的動態方法的程式碼主體。"
  remarks: "MSIL 資料流上，會不執行任何有效性檢查。       第二次呼叫這個方法的第二個取代第一個的 MSIL 資料流。       產生您自己的中繼資料和 MSIL 必須熟悉的通用語言基礎結構 (CLI) 文件，尤其是 < 磁碟分割第二部分︰ 中繼資料定義和語意 > 以及 < 磁碟分割 iii 部分︰ CIL 指令集 」。 線上; 也提供文件請參閱[ECMA C# 和通用語言基礎結構標準](http://go.microsoft.com/fwlink/?LinkID=99212)msdn 和[標準 ecma-335-通用語言基礎結構 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 網站上。"
  syntax:
    content: public void SetCode (byte[] code, int maxStackSize);
    parameters:
    - id: code
      type: System.Byte[]
      description: "陣列，其中包含 MSIL 資料流。"
    - id: maxStackSize
      type: System.Int32
      description: "執行此方法時，運算元堆疊上的項目數目上限。"
  overload: System.Reflection.Emit.DynamicILInfo.SetCode*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  id: SetCode(System.Byte*,System.Int32,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetCode(Byte*,Int32,Int32)
  nameWithType: DynamicILInfo.SetCode(Byte*,Int32,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte*,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "設定相關聯的動態方法的程式碼主體。"
  remarks: "MSIL 資料流上，會不執行任何有效性檢查。       第二次呼叫這個方法的第二個取代第一個的 MSIL 資料流。       產生您自己的中繼資料和 MSIL 必須熟悉的通用語言基礎結構 (CLI) 文件，特別是 < II︰ 中繼資料定義和語意 」 和 「 第三部分︰ CIL 指令集。 」 線上; 也提供文件請參閱[ECMA C# 和通用語言基礎結構標準](http://go.microsoft.com/fwlink/?LinkID=99212)msdn 和[標準 ecma-335-通用語言基礎結構 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 網站上。"
  syntax:
    content: public void SetCode (byte* code, int codeSize, int maxStackSize);
    parameters:
    - id: code
      type: System.Byte*
      description: "包含 MSIL 資料流的位元組陣列指標。"
    - id: codeSize
      type: System.Int32
      description: "MSIL 資料流中的位元組數目。"
    - id: maxStackSize
      type: System.Int32
      description: "執行此方法時，運算元堆疊上的項目數目上限。"
  overload: System.Reflection.Emit.DynamicILInfo.SetCode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>code</code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>和<code>codeSize</code>大於 0。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>codeSize</code>小於 0。"
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  id: SetExceptions(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetExceptions(Byte[])
  nameWithType: DynamicILInfo.SetExceptions(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "設定相關聯的動態方法的例外狀況中繼資料。"
  remarks: '方法的例外狀況中繼資料定義的位置和大小的所有`try`， `catch`， `finally`、 篩選和錯誤區塊。 此中繼資料的配置資訊，請參閱 Common Language Infrastructure (CLI) 文件，尤其是 < 磁碟分割 II︰ 中繼資料定義和語意 >。 線上; 也提供文件請參閱[ECMA C# 和通用語言基礎結構標準](http://go.microsoft.com/fwlink/?LinkID=99212)msdn 和[標準 ecma-335-通用語言基礎結構 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 網站上。'
  syntax:
    content: public void SetExceptions (byte[] exceptions);
    parameters:
    - id: exceptions
      type: System.Byte[]
      description: "陣列，包含例外狀況的中繼資料。"
  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  id: SetExceptions(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetExceptions(Byte*,Int32)
  nameWithType: DynamicILInfo.SetExceptions(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "設定相關聯的動態方法的例外狀況中繼資料。"
  remarks: '方法的例外狀況中繼資料定義的位置和大小的所有`try`， `catch`， `finally`、 篩選和錯誤區塊。 此中繼資料的配置資訊，請參閱 Common Language Infrastructure (CLI) 文件，尤其是 < 磁碟分割第二部分︰ 中繼資料定義和語意 > 以及 < 磁碟分割 iii 部分︰ CIL 指令集 」。 線上; 也提供文件請參閱[ECMA C# 和通用語言基礎結構標準](http://go.microsoft.com/fwlink/?LinkID=99212)msdn 和[標準 ecma-335-通用語言基礎結構 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 網站上。'
  syntax:
    content: public void SetExceptions (byte* exceptions, int exceptionsSize);
    parameters:
    - id: exceptions
      type: System.Byte*
      description: "包含例外狀況的中繼資料的位元組陣列指標。"
    - id: exceptionsSize
      type: System.Int32
      description: "例外狀況的中繼資料的位元組數目。"
  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>exceptions</code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>和<code>exceptionSize</code>大於 0。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>exceptionSize</code>小於 0。"
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  id: SetLocalSignature(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetLocalSignature(Byte[])
  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "設定描述的本機變數相關聯的動態方法配置的本機變數簽章。"
  remarks: "區域變數簽章描述方法的本機變數的配置。 若要簡化的區域變數簽章的建構，使用`static`(`Shared`在 Visual Basic 中)<xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>方法來取得<xref:System.Reflection.Emit.SignatureHelper>簽章。</xref:System.Reflection.Emit.SignatureHelper> </xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>       本機變數的簽章的資訊，請參閱 Common Language Infrastructure (CLI) 文件，尤其是 < 磁碟分割 II︰ 中繼資料定義和語意 >。 線上; 也提供文件請參閱[ECMA C# 和通用語言基礎結構標準](http://go.microsoft.com/fwlink/?LinkID=99212)msdn 和[標準 ecma-335-通用語言基礎結構 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 網站上。"
  syntax:
    content: public void SetLocalSignature (byte[] localSignature);
    parameters:
    - id: localSignature
      type: System.Byte[]
      description: "陣列，其中包含相關聯的<xref:System.Reflection.Emit.DynamicMethod>。</xref:System.Reflection.Emit.DynamicMethod>本機變數的配置"
  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  id: SetLocalSignature(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetLocalSignature(Byte*,Int32)
  nameWithType: DynamicILInfo.SetLocalSignature(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "設定描述的本機變數相關聯的動態方法配置的本機變數簽章。"
  remarks: "區域變數簽章描述方法的本機變數的配置。 若要簡化的區域變數簽章的建構，使用`static`(`Shared`在 Visual Basic 中)<xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>方法來取得<xref:System.Reflection.Emit.SignatureHelper>簽章。</xref:System.Reflection.Emit.SignatureHelper> </xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>       本機變數的簽章的資訊，請參閱 Common Language Infrastructure (CLI) 文件，尤其是 < 磁碟分割 II︰ 中繼資料定義和語意 >。 線上; 也提供文件請參閱[ECMA C# 和通用語言基礎結構標準](http://go.microsoft.com/fwlink/?LinkID=99212)msdn 和[標準 ecma-335-通用語言基礎結構 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 網站上。"
  syntax:
    content: public void SetLocalSignature (byte* localSignature, int signatureSize);
    parameters:
    - id: localSignature
      type: System.Byte*
      description: "陣列，其中包含相關聯的<xref:System.Reflection.Emit.DynamicMethod>。</xref:System.Reflection.Emit.DynamicMethod>本機變數的配置"
    - id: signatureSize
      type: System.Int32
      description: "簽章中的位元組數目。"
  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>localSignature</code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>和<code>signatureSize</code>大於 0。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>signatureSize</code>小於 0。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
  fullName: System.Reflection.Emit.DynamicILInfo.DynamicMethod
- uid: System.Reflection.Emit.DynamicMethod
  parent: System.Reflection.Emit
  isExternal: true
  name: DynamicMethod
  nameWithType: DynamicMethod
  fullName: System.Reflection.Emit.DynamicMethod
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(Byte[])
  nameWithType: DynamicILInfo.GetTokenFor(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(Byte[])
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(DynamicMethod)
  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(DynamicMethod)
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeFieldHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
- uid: System.RuntimeFieldHandle
  parent: System
  isExternal: true
  name: RuntimeFieldHandle
  nameWithType: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeMethodHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
- uid: System.RuntimeMethodHandle
  parent: System
  isExternal: true
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: true
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(String)
  nameWithType: DynamicILInfo.GetTokenFor(String)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode(Byte[],Int32)
  nameWithType: DynamicILInfo.SetCode(Byte[],Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte[],Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode(Byte*,Int32,Int32)
  nameWithType: DynamicILInfo.SetCode(Byte*,Int32,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte*,Int32,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions(Byte[])
  nameWithType: DynamicILInfo.SetExceptions(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte[])
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions(Byte*,Int32)
  nameWithType: DynamicILInfo.SetExceptions(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte*,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature(Byte[])
  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte[])
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature(Byte*,Int32)
  nameWithType: DynamicILInfo.SetLocalSignature(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte*,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor
  nameWithType: DynamicILInfo.GetTokenFor
- uid: System.Reflection.Emit.DynamicILInfo.SetCode*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode
  nameWithType: DynamicILInfo.SetCode
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions
  nameWithType: DynamicILInfo.SetExceptions
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature
  nameWithType: DynamicILInfo.SetLocalSignature
