### YamlMime:ManagedReference
items:
- uid: System.Drawing.Imaging.ImageAttributes
  id: ImageAttributes
  children:
  - System.Drawing.Imaging.ImageAttributes.#ctor
  - System.Drawing.Imaging.ImageAttributes.ClearBrushRemapTable
  - System.Drawing.Imaging.ImageAttributes.ClearColorKey
  - System.Drawing.Imaging.ImageAttributes.ClearColorKey(System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.ClearColorMatrix
  - System.Drawing.Imaging.ImageAttributes.ClearColorMatrix(System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.ClearGamma
  - System.Drawing.Imaging.ImageAttributes.ClearGamma(System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.ClearNoOp
  - System.Drawing.Imaging.ImageAttributes.ClearNoOp(System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.ClearOutputChannel
  - System.Drawing.Imaging.ImageAttributes.ClearOutputChannel(System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile
  - System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile(System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.ClearRemapTable
  - System.Drawing.Imaging.ImageAttributes.ClearRemapTable(System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.ClearThreshold
  - System.Drawing.Imaging.ImageAttributes.ClearThreshold(System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.Clone
  - System.Drawing.Imaging.ImageAttributes.Dispose
  - System.Drawing.Imaging.ImageAttributes.Finalize
  - System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette(System.Drawing.Imaging.ColorPalette,System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable(System.Drawing.Imaging.ColorMap[])
  - System.Drawing.Imaging.ImageAttributes.SetColorKey(System.Drawing.Color,System.Drawing.Color)
  - System.Drawing.Imaging.ImageAttributes.SetColorKey(System.Drawing.Color,System.Drawing.Color,System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix)
  - System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)
  - System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix)
  - System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)
  - System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.SetGamma(System.Single)
  - System.Drawing.Imaging.ImageAttributes.SetGamma(System.Single,System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.SetNoOp
  - System.Drawing.Imaging.ImageAttributes.SetNoOp(System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag)
  - System.Drawing.Imaging.ImageAttributes.SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag,System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(System.String)
  - System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(System.String,System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.SetRemapTable(System.Drawing.Imaging.ColorMap[])
  - System.Drawing.Imaging.ImageAttributes.SetRemapTable(System.Drawing.Imaging.ColorMap[],System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.SetThreshold(System.Single)
  - System.Drawing.Imaging.ImageAttributes.SetThreshold(System.Single,System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode)
  - System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color)
  - System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color,System.Boolean)
  langs:
  - csharp
  name: ImageAttributes
  nameWithType: ImageAttributes
  fullName: System.Drawing.Imaging.ImageAttributes
  type: Class
  summary: "包含有關如何會在呈現期間操作點陣圖和中繼檔色彩資訊。"
  remarks: "ImageAttributes 物件維持數個彩色調整設定，包括彩色調整矩陣、 灰階調整矩陣、 gamma 修正值、 色彩對應資料表，以及色彩臨界值。 在呈現期間，色彩可以更正、 調暗、 淡化，並移除。 若要套用這類的操作，來初始化 ImageAttributes 物件，並傳遞該 ImageAttributes 物件的路徑 (路徑以及<xref:System.Drawing.Image>) 至<xref:System.Drawing.Graphics.DrawImage%2A>方法。</xref:System.Drawing.Graphics.DrawImage%2A> </xref:System.Drawing.Image>"
  example:
  - "The following example takes an image that is all one color (0.2, 0.0, 0.4, 1.0) and doubles the red component adds 0.2 to the red, green, and blue components  \n  \n The following illustration shows the original image on the left and the transformed image on the right.  \n  \n ![Colors](~/add/media/colortrans1.png \"Colors\")  \n  \n The code in the following example uses the following steps to perform the recoloring:  \n  \n1.  Initialize a <xref:System.Drawing.Imaging.ColorMatrix> object.  \n  \n2.  Create an ImageAttributes object and pass the <xref:System.Drawing.Imaging.ColorMatrix> object to the <xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A> method of the ImageAttributes object.  \n  \n3.  Pass the ImageAttributes object to the <xref:System.Drawing.Graphics.DrawImage%2A> method of a <xref:System.Drawing.Graphics> object.  \n  \n [!code-vb[System.Drawing.RecoloringImages#21](~/add/codesnippet/visualbasic/t-system.drawing.imaging_5_1.vb)]\n [!code-cs[System.Drawing.RecoloringImages#21](~/add/codesnippet/csharp/t-system.drawing.imaging_5_1.cs)]"
  syntax:
    content: 'public sealed class ImageAttributes : ICloneable, IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.#ctor
  id: '#ctor'
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ImageAttributes()
  nameWithType: ImageAttributes.ImageAttributes()
  fullName: System.Drawing.Imaging.ImageAttributes.ImageAttributes()
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "初始化的新執行個體<xref href=&quot;System.Drawing.Imaging.ImageAttributes&quot;></xref>類別。"
  syntax:
    content: public ImageAttributes ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearBrushRemapTable
  id: ClearBrushRemapTable
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearBrushRemapTable()
  nameWithType: ImageAttributes.ClearBrushRemapTable()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearBrushRemapTable()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除這個筆刷色彩重新對應表<xref href=&quot;System.Drawing.Imaging.ImageAttributes&quot;></xref>物件。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定一個預設分類的色彩重新對應表 [點陣圖] 類別中，不同的色彩重新對應表，仍筆刷分類不同的色彩重新對應表。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 例如，如果您不指定任何筆刷分類的調整設定，預設設定會套用至筆刷分類。       您指定的彩色調整或將某個分類的灰階調整設定，因為預設調整設定不會再套用到該類別。 例如，假設您指定的預設重新對應表轉換為綠色、 紅色，而且您指定預設 1.8 的 gamma 值。 如果您呼叫<xref:System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable%2A>方法，因此預設重新對應表 （紅色綠色） 及預設 gamma 值 (1.8) 不會套用到筆刷。</xref:System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable%2A> 如果您稍後呼叫 ClearBrushRemapTable 方法，筆刷分類不會還原成預設值重新對應表中。相反地，筆刷分類會有任何重新對應表。 同樣地，筆刷分類不會還原成預設的 gamma 值。相反地，筆刷分類會有任何 gamma 值。"
  syntax:
    content: public void ClearBrushRemapTable ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.ClearBrushRemapTable*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearColorKey
  id: ClearColorKey
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearColorKey()
  nameWithType: ImageAttributes.ClearColorKey()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearColorKey()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除預設分類的色鍵 （透明度範圍）。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定一個預設分類的色彩索引鍵、 點陣圖分類，不同的色彩索引鍵和仍然畫筆分類不同的色彩索引鍵。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，預設設定會套用至畫筆分類。"
  syntax:
    content: public void ClearColorKey ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.ClearColorKey*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearColorKey(System.Drawing.Imaging.ColorAdjustType)
  id: ClearColorKey(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearColorKey(ColorAdjustType)
  nameWithType: ImageAttributes.ClearColorKey(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearColorKey(ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除指定分類的色鍵 （透明度範圍）。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定一個預設分類的色彩索引鍵、 點陣圖分類，不同的色彩索引鍵和仍然畫筆分類不同的色彩索引鍵。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，預設設定會套用至畫筆分類。       您指定的彩色調整或將某個分類的灰階調整設定，因為預設調整設定不會再套用到該類別。 例如，假設您指定預設色彩索引鍵，讓紅色元件 200 到 255 之間的任何色彩變成透明，而且您指定預設 1.8 的 gamma 值。 如果您藉由呼叫設定畫筆分類的色彩索引鍵<xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%2A>方法、 預設的色彩索引鍵和預設 gamma 值不會套用到筆。</xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%2A> 如果您稍後藉由呼叫清除的畫筆色彩索引鍵<xref:System.Drawing.Imaging.ImageAttributes.ClearColorKey%2A>方法，畫筆類別不會還原成預設的色彩索引鍵; 相反地，畫筆分類將沒有色彩索引鍵。</xref:System.Drawing.Imaging.ImageAttributes.ClearColorKey%2A> 同樣地，畫筆類別不會還原成預設的 gamma 值。相反地，畫筆分類會有任何 gamma 值。"
  syntax:
    content: public void ClearColorKey (System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定已清除的色彩索引鍵的分類。"
  overload: System.Drawing.Imaging.ImageAttributes.ClearColorKey*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearColorMatrix
  id: ClearColorMatrix
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearColorMatrix()
  nameWithType: ImageAttributes.ClearColorMatrix()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearColorMatrix()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除預設分類的彩色調整矩陣。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的彩色調整矩陣、 「 點陣圖 」 類別目錄的不同彩色調整矩陣和仍然畫筆分類的不同彩色調整矩陣。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，然後預設設定會套用至畫筆分類。"
  syntax:
    content: public void ClearColorMatrix ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.ClearColorMatrix*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearColorMatrix(System.Drawing.Imaging.ColorAdjustType)
  id: ClearColorMatrix(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearColorMatrix(ColorAdjustType)
  nameWithType: ImageAttributes.ClearColorMatrix(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearColorMatrix(ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除指定分類的彩色調整矩陣。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的彩色調整矩陣、 「 點陣圖 」 類別目錄的不同彩色調整矩陣和仍然畫筆分類的不同彩色調整矩陣。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，然後預設設定會套用至畫筆分類。       您指定的彩色調整或將某個分類的灰階調整設定，因為預設調整設定不會再套用到該類別。 例如，假設您指定的彩色調整矩陣和預設分類的 gamma 值。 如果您藉由呼叫設定畫筆分類的彩色調整矩陣<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A>方法，預設的彩色調整矩陣不會套用到筆。</xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A> 如果您稍後清除畫筆彩色調整矩陣藉由呼叫<xref:System.Drawing.Imaging.ImageAttributes.ClearColorMatrix%2A>方法，畫筆類別不會還原成預設調整矩陣; 相反地，畫筆分類會有任何調整矩陣。</xref:System.Drawing.Imaging.ImageAttributes.ClearColorMatrix%2A> 同樣地，畫筆類別不會還原成預設的 gamma 值。相反地，畫筆分類會有任何 gamma 值。"
  syntax:
    content: public void ClearColorMatrix (System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定為其清除彩色調整矩陣的分類。"
  overload: System.Drawing.Imaging.ImageAttributes.ClearColorMatrix*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearGamma
  id: ClearGamma
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearGamma()
  nameWithType: ImageAttributes.ClearGamma()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearGamma()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "停用預設分類的 gamma 修正。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的 gamma 值，不同的 gamma 值點陣圖分類，然後畫筆分類不同的 gamma 值。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，預設設定會套用至畫筆分類。"
  syntax:
    content: public void ClearGamma ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.ClearGamma*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearGamma(System.Drawing.Imaging.ColorAdjustType)
  id: ClearGamma(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearGamma(ColorAdjustType)
  nameWithType: ImageAttributes.ClearGamma(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearGamma(ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "停用指定分類的 gamma 修正。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的 gamma 值，不同的 gamma 值點陣圖分類，然後畫筆分類不同的 gamma 值。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，然後預設設定會套用至畫筆分類。       您指定的彩色調整或將某個分類的灰階調整設定，因為預設調整設定不會再套用到該類別。 例如，假設您指定的 gamma 值和預設分類的彩色調整矩陣。 如果您藉由呼叫設定畫筆分類的 gamma 值<xref:System.Drawing.Imaging.ImageAttributes.SetGamma%2A>方法，預設 gamma 值不會套用到筆。</xref:System.Drawing.Imaging.ImageAttributes.SetGamma%2A> 如果您稍後藉由呼叫清除畫筆 gamma 值<xref:System.Drawing.Imaging.ImageAttributes.ClearGamma%2A>方法，畫筆類別不會還原成預設 gamma 值，而是畫筆分類將沒有 gamma 值。</xref:System.Drawing.Imaging.ImageAttributes.ClearGamma%2A> 同樣地，畫筆類別不會還原成預設的彩色調整矩陣。相反地，畫筆分類會有任何彩色調整矩陣。"
  syntax:
    content: public void ClearGamma (System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定用 gamma 修正已停用的分類。"
  overload: System.Drawing.Imaging.ImageAttributes.ClearGamma*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearNoOp
  id: ClearNoOp
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearNoOp()
  nameWithType: ImageAttributes.ClearNoOp()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearNoOp()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除<xref uid=&quot;langword_csharp_NoOp&quot; name=&quot;NoOp&quot; href=&quot;&quot;></xref>設定預設分類。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的 gamma 值，不同的 gamma 值點陣圖分類，然後畫筆分類不同的 gamma 值。       您可以藉由呼叫停用預設分類的彩色調整<xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>方法。</xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A> 稍後，您可以藉由呼叫恢復預設分類的彩色調整<xref:System.Drawing.Imaging.ImageAttributes.ClearNoOp%2A>方法。</xref:System.Drawing.Imaging.ImageAttributes.ClearNoOp%2A> 色彩調整然後返回功能已備妥<xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>.</xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>的呼叫之前"
  syntax:
    content: public void ClearNoOp ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.ClearNoOp*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearNoOp(System.Drawing.Imaging.ColorAdjustType)
  id: ClearNoOp(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearNoOp(ColorAdjustType)
  nameWithType: ImageAttributes.ClearNoOp(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearNoOp(ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除<xref uid=&quot;langword_csharp_NoOp&quot; name=&quot;NoOp&quot; href=&quot;&quot;></xref>設定指定分類。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的 gamma 值，不同的 gamma 值點陣圖分類，然後畫筆分類不同的 gamma 值。       您可以藉由呼叫停用將某個分類的彩色調整<xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>方法。</xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A> 稍後，您可以藉由呼叫恢復該分類的彩色調整<xref:System.Drawing.Imaging.ImageAttributes.ClearNoOp%2A>方法。</xref:System.Drawing.Imaging.ImageAttributes.ClearNoOp%2A> 色彩調整然後返回功能已備妥<xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>.</xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>的呼叫之前"
  syntax:
    content: public void ClearNoOp (System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，其指定的分類<xref uid=&quot;langword_csharp_NoOp&quot; name=&quot;NoOp&quot; href=&quot;&quot;></xref>已清除設定。"
  overload: System.Drawing.Imaging.ImageAttributes.ClearNoOp*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearOutputChannel
  id: ClearOutputChannel
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearOutputChannel()
  nameWithType: ImageAttributes.ClearOutputChannel()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearOutputChannel()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除預設分類的 CMYK （青色-洋紅-黃色-黑色） 輸出色頻設定。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定在輸出通道的預設分類和點陣圖分類不同的輸出色頻。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何點陣圖分類的調整設定，預設設定會套用至點陣圖分類。"
  syntax:
    content: public void ClearOutputChannel ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.ClearOutputChannel*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearOutputChannel(System.Drawing.Imaging.ColorAdjustType)
  id: ClearOutputChannel(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearOutputChannel(ColorAdjustType)
  nameWithType: ImageAttributes.ClearOutputChannel(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearOutputChannel(ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除指定分類 （青色-洋紅-黃色-黑色） 輸出色頻設定。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定在輸出通道的預設分類和點陣圖分類不同的輸出色頻。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何點陣圖分類的調整設定，預設設定會套用至點陣圖分類。       您指定的彩色調整或將某個分類的灰階調整設定，因為預設調整設定不會再套用到該類別。 例如，假設您指定在輸出通道和預設分類調整矩陣。 如果您藉由呼叫設定輸出色頻點陣圖分類<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>方法，則預設輸出通道不會套用至點陣圖。</xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> 如果您稍後清除點陣圖藉由呼叫的輸出通道<xref:System.Drawing.Imaging.ImageAttributes.ClearOutputChannel%2A>方法中，點陣圖類別不會還原成預設輸出通道，而是點陣圖分類必須沒有輸出色頻設定。</xref:System.Drawing.Imaging.ImageAttributes.ClearOutputChannel%2A> 同樣地，點陣圖類別不會還原成預設的彩色調整矩陣。相反地，點陣圖分類會有任何彩色調整矩陣。"
  syntax:
    content: public void ClearOutputChannel (System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定已清除輸出色頻設定的分類。"
  overload: System.Drawing.Imaging.ImageAttributes.ClearOutputChannel*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile
  id: ClearOutputChannelColorProfile
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearOutputChannelColorProfile()
  nameWithType: ImageAttributes.ClearOutputChannelColorProfile()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除預設分類之輸出色頻色彩設定檔設定。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的輸出通道的設定檔和點陣圖分類不同的輸出通道的設定檔。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何點陣圖分類的調整設定，預設設定會套用至點陣圖分類。"
  syntax:
    content: public void ClearOutputChannelColorProfile ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile(System.Drawing.Imaging.ColorAdjustType)
  id: ClearOutputChannelColorProfile(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearOutputChannelColorProfile(ColorAdjustType)
  nameWithType: ImageAttributes.ClearOutputChannelColorProfile(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile(ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除輸出色頻色彩設定檔設定，指定分類。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的輸出通道的設定檔和點陣圖分類不同的輸出通道的設定檔。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何點陣圖分類的調整設定，預設設定會套用至點陣圖分類。       您指定的彩色調整或將某個分類的灰階調整設定，因為預設調整設定不會再套用到該類別。 例如，假設您指定的輸出通道的設定檔和預設分類調整矩陣。 如果您藉由呼叫設定點陣圖分類的輸出通道設定檔<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>方法，則預設輸出通道的設定檔不會套用至點陣圖。</xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A> 如果您稍後清除點陣圖輸出通道設定檔，藉由呼叫<xref:System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile%2A>方法中，點陣圖類別不會還原成預設輸出通道的設定檔; 相反地，點陣圖分類將任何輸出色頻設定檔設定。</xref:System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile%2A> 同樣地，點陣圖類別不會還原成預設的彩色調整矩陣。相反地，點陣圖分類會有任何彩色調整矩陣。"
  syntax:
    content: public void ClearOutputChannelColorProfile (System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定已清除輸出色頻設定檔設定的分類。"
  overload: System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearRemapTable
  id: ClearRemapTable
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearRemapTable()
  nameWithType: ImageAttributes.ClearRemapTable()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearRemapTable()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除預設分類的色彩重新對應表。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的重新對應表 [點陣圖] 類別中，不同的重新對應表，仍畫筆分類不同的重新對應表。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，預設設定會套用至畫筆分類。"
  syntax:
    content: public void ClearRemapTable ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.ClearRemapTable*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearRemapTable(System.Drawing.Imaging.ColorAdjustType)
  id: ClearRemapTable(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearRemapTable(ColorAdjustType)
  nameWithType: ImageAttributes.ClearRemapTable(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearRemapTable(ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除指定分類的色彩重新對應表。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的重新對應表 [點陣圖] 類別中，不同的重新對應表，仍畫筆分類不同的重新對應表。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，然後預設設定會套用至畫筆分類。       您指定的彩色調整或將某個分類的灰階調整設定，因為預設調整設定不會再套用到該類別。 例如，假設您指定的重新對應表及預設分類的 gamma 值。 如果您藉由呼叫設定畫筆分類的重新對應表<xref:System.Drawing.Imaging.ImageAttributes.SetRemapTable%2A>方法，預設重新對應表不會套用到筆。</xref:System.Drawing.Imaging.ImageAttributes.SetRemapTable%2A> 如果您稍後藉由呼叫清除畫筆重新對應表<xref:System.Drawing.Imaging.ImageAttributes.ClearRemapTable%2A>方法，畫筆類別不會還原成預設值重新對應表; 相反地，畫筆分類會有任何重新對應表。</xref:System.Drawing.Imaging.ImageAttributes.ClearRemapTable%2A> 同樣地，畫筆類別不會還原成預設的 gamma 值。相反地，畫筆分類會有任何 gamma 值。"
  syntax:
    content: public void ClearRemapTable (System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定已清除重新對應表的分類。"
  overload: System.Drawing.Imaging.ImageAttributes.ClearRemapTable*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearThreshold
  id: ClearThreshold
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearThreshold()
  nameWithType: ImageAttributes.ClearThreshold()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearThreshold()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除預設分類的閾值。"
  remarks: "臨界值是從 0 到 1，指定每個色彩元件的截止點的值。 例如，假設臨界值設定為 0.7，並假設您要轉譯色彩的紅色、 綠色和藍色元件 230、 50 和 220，分別是。 紅色元件 (230) 大於 0.7 x 255, 所以紅色元件將會變更到 255 之間 （完整強度）。 綠色元件 (50) 小於 0.7 x 255, 讓綠色元件將會變更為 0。 藍色元件 (220) 大於 0.7 x 255, 所以藍色元件就會變更為 255。       <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的臨界值，不同的臨界值的點陣圖分類，然後畫筆分類的不同臨界值。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，預設設定會套用至畫筆分類。"
  syntax:
    content: public void ClearThreshold ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.ClearThreshold*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearThreshold(System.Drawing.Imaging.ColorAdjustType)
  id: ClearThreshold(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearThreshold(ColorAdjustType)
  nameWithType: ImageAttributes.ClearThreshold(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearThreshold(ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除指定分類的臨界值。"
  remarks: "臨界值是從 0 到 1，指定每個色彩元件的截止點的值。 例如，假設臨界值設定為 0.7，並假設您要轉譯色彩的紅色、 綠色和藍色元件 230、 50 和 220，分別是。 紅色元件 (230) 大於 0.7x55，所以紅色元件將會變更到 255 之間 （完整強度）。 綠色元件 (50) 小於 0.7 x 255, 讓綠色元件將會變更為 0。 藍色元件 (220) 大於 0.7 x 255, 所以藍色元件就會變更為 255。       <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的臨界值，不同的臨界值的點陣圖分類，然後畫筆分類的不同臨界值。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，預設設定會套用至畫筆分類。       您指定的彩色調整或將某個分類的灰階調整設定，因為預設調整設定不會再套用到該類別。 例如，假設您指定的閾值和預設分類的 gamma 值。 如果您藉由呼叫設定畫筆分類的閾值<xref:System.Drawing.Imaging.ImageAttributes.SetThreshold%2A>方法，這個方法的預設閾值不會套用到筆。</xref:System.Drawing.Imaging.ImageAttributes.SetThreshold%2A> 如果您稍後藉由呼叫清除畫筆閾值<xref:System.Drawing.Imaging.ImageAttributes.ClearThreshold%2A>方法，畫筆類別不會還原成預設臨界值; 相反地，畫筆分類會有任何臨界值。</xref:System.Drawing.Imaging.ImageAttributes.ClearThreshold%2A> 同樣地，畫筆類別不會還原成預設的 gamma 值。相反地，畫筆分類會有任何 gamma 值。"
  syntax:
    content: public void ClearThreshold (System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定已清除閾值的分類。"
  overload: System.Drawing.Imaging.ImageAttributes.ClearThreshold*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.Clone
  id: Clone
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: Clone()
  nameWithType: ImageAttributes.Clone()
  fullName: System.Drawing.Imaging.ImageAttributes.Clone()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "建立的完全相同的複本<xref href=&quot;System.Drawing.Imaging.ImageAttributes&quot;></xref>物件。"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "<xref href=&quot;System.Drawing.Imaging.ImageAttributes&quot;> </xref>物件，這個類別會建立，轉換為物件。"
  overload: System.Drawing.Imaging.ImageAttributes.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.Dispose
  id: Dispose
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: Dispose()
  nameWithType: ImageAttributes.Dispose()
  fullName: System.Drawing.Imaging.ImageAttributes.Dispose()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "所使用的資源全部釋出<xref href=&quot;System.Drawing.Imaging.ImageAttributes&quot;></xref>物件。"
  remarks: "當您完成使用<xref:System.Drawing.Imaging.ImageAttributes>.</xref:System.Drawing.Imaging.ImageAttributes>呼叫 Dispose Dispose 方法會使<xref:System.Drawing.Imaging.ImageAttributes>中無法使用的狀態。</xref:System.Drawing.Imaging.ImageAttributes> 在呼叫 Dispose 之後，您必須釋放所有參考<xref:System.Drawing.Imaging.ImageAttributes>讓記憶體回收行程可以回收記憶體的<xref:System.Drawing.Imaging.ImageAttributes>所佔用。</xref:System.Drawing.Imaging.ImageAttributes> </xref:System.Drawing.Imaging.ImageAttributes> 如需詳細資訊，請參閱[清除 Unmanaged 資源上](~/add/includes/ajax-current-ext-md.md)和[實作 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      > [!NOTE] > 永遠呼叫 Dispose 之後，再放開您的最後一個參考至<xref:System.Drawing.Imaging.ImageAttributes>。</xref:System.Drawing.Imaging.ImageAttributes> 否則，它所使用的資源將不會釋放直到記憶體回收行程呼叫<xref:System.Drawing.Imaging.ImageAttributes>物件的`Finalize`方法。</xref:System.Drawing.Imaging.ImageAttributes>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.Finalize
  id: Finalize
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: Finalize()
  nameWithType: ImageAttributes.Finalize()
  fullName: System.Drawing.Imaging.ImageAttributes.Finalize()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "允許物件嘗試釋放資源，並透過記憶體回收開始前執行其他清除作業。"
  syntax:
    content: ~ImageAttributes ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette(System.Drawing.Imaging.ColorPalette,System.Drawing.Imaging.ColorAdjustType)
  id: GetAdjustedPalette(System.Drawing.Imaging.ColorPalette,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: GetAdjustedPalette(ColorPalette,ColorAdjustType)
  nameWithType: ImageAttributes.GetAdjustedPalette(ColorPalette,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette(ColorPalette,ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "調整的調色盤，根據指定分類的調整設定中的色彩。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的色彩重新對應表 [點陣圖] 類別中，不同的色彩重新對應表，仍畫筆分類不同的色彩重新對應表。       當您呼叫 GetAdjustedPalette 方法時，您可以指定用來調整調色盤色彩的調整類別目錄。 例如，如果您傳遞<xref:System.Drawing.Imaging.ColorAdjustType>GetAdjustedPalette 方法中，點陣圖分類的調整設定可用來調整調色盤色彩。</xref:System.Drawing.Imaging.ColorAdjustType>"
  syntax:
    content: public void GetAdjustedPalette (System.Drawing.Imaging.ColorPalette palette, System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: palette
      type: System.Drawing.Imaging.ColorPalette
      description: "A <xref href=&quot;System.Drawing.Imaging.ColorPalette&quot;> </xref>上輸入，其中包含要進行調整的調色盤，並輸出包含調整過的調色盤。"
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定其調整設定將套用至調色盤的分類。"
  overload: System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable(System.Drawing.Imaging.ColorMap[])
  id: SetBrushRemapTable(System.Drawing.Imaging.ColorMap[])
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetBrushRemapTable(ColorMap[])
  nameWithType: ImageAttributes.SetBrushRemapTable(ColorMap[])
  fullName: System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable(ColorMap[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "設定筆刷分類的色彩重新對應表。"
  remarks: "色彩重新對應表是陣列<xref:System.Drawing.Imaging.ColorMap>結構。</xref:System.Drawing.Imaging.ColorMap> 每個<xref:System.Drawing.Imaging.ColorMap>結構有兩個<xref:System.Drawing.Color>物件︰ 其中一個，指定舊的色彩，另一個則指定對應的新色彩。</xref:System.Drawing.Color> </xref:System.Drawing.Imaging.ColorMap> 在呈現期間，符合其中一個舊的色彩重新對應表中的任何色彩變更為對應的新色彩。       呼叫 SetBrushRemapTable 方法已傳遞相同的效果<xref:System.Drawing.Imaging.ColorAdjustType>至<xref:System.Drawing.Imaging.ImageAttributes.SetRemapTable%2A>方法。</xref:System.Drawing.Imaging.ImageAttributes.SetRemapTable%2A> </xref:System.Drawing.Imaging.ColorAdjustType> 指定的重新對應表適用於使用筆刷填滿的中繼檔中的項目。       這個方法僅只用於中繼檔。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n1.  Creates a single-element <xref:System.Drawing.Imaging.ColorMap> array that holds red as the old color and green as the new color.  \n  \n2.  Passes this array to a newly created <xref:System.Drawing.Imaging.ImageAttributes> object.  \n  \n [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#1](~/add/codesnippet/cpp/03cb420b-6413-4b57-9e9e-_1.cpp)]\n [!code-cs[System.Drawing.ClassicImaging.ImageAttributes#1](~/add/codesnippet/csharp/03cb420b-6413-4b57-9e9e-_1.cs)]\n [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#1](~/add/codesnippet/visualbasic/03cb420b-6413-4b57-9e9e-_1.vb)]"
  syntax:
    content: public void SetBrushRemapTable (System.Drawing.Imaging.ColorMap[] map);
    parameters:
    - id: map
      type: System.Drawing.Imaging.ColorMap[]
      description: "陣列<xref href=&quot;System.Drawing.Imaging.ColorMap&quot;></xref>物件。"
  overload: System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetColorKey(System.Drawing.Color,System.Drawing.Color)
  id: SetColorKey(System.Drawing.Color,System.Drawing.Color)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetColorKey(Color,Color)
  nameWithType: ImageAttributes.SetColorKey(Color,Color)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorKey(Color,Color)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "設定預設分類的色彩索引鍵。"
  remarks: "這個方法設定的最高和最低色彩索引鍵的值，使其可以進行透明的色彩範圍。 任何色彩，其三個元件 （紅色、 綠色、 藍色） 之間的對應元件的高低的色彩索引鍵的每個進行透明。       <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的色彩索引鍵、 點陣圖分類，不同的色彩索引鍵和仍然畫筆分類不同的色彩索引鍵。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，預設設定會套用至畫筆分類。"
  example:
  - For a code example, see the <xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%28System.Drawing.Color%2CSystem.Drawing.Color%2CSystem.Drawing.Imaging.ColorAdjustType%29> method.
  syntax:
    content: public void SetColorKey (System.Drawing.Color colorLow, System.Drawing.Color colorHigh);
    parameters:
    - id: colorLow
      type: System.Drawing.Color
      description: "低色鍵值。"
    - id: colorHigh
      type: System.Drawing.Color
      description: "高色鍵值。"
  overload: System.Drawing.Imaging.ImageAttributes.SetColorKey*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetColorKey(System.Drawing.Color,System.Drawing.Color,System.Drawing.Imaging.ColorAdjustType)
  id: SetColorKey(System.Drawing.Color,System.Drawing.Color,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetColorKey(Color,Color,ColorAdjustType)
  nameWithType: ImageAttributes.SetColorKey(Color,Color,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorKey(Color,Color,ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "設定指定分類的色鍵 （透明度範圍）。"
  remarks: "這個方法設定的最高和最低色彩索引鍵的值，使其可以進行透明的色彩範圍。 任何色彩，其三個元件 （紅色、 綠色、 藍色） 之間的對應元件的高低的色彩索引鍵的每個進行透明。       <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的色彩索引鍵、 點陣圖分類，不同的色彩索引鍵和仍然畫筆分類不同的色彩索引鍵。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，預設設定會套用至畫筆分類。       您指定的彩色調整或將某個分類的灰階調整設定，因為預設調整設定不會再套用到該類別。 例如，假設您指定的調整設定預設分類的集合。 如果您藉由傳遞設定畫筆分類的色彩索引鍵<xref:System.Drawing.Imaging.ColorAdjustType>至<xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%2A>方法，沒有預設值的調整設定將套用到畫筆。</xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%2A> </xref:System.Drawing.Imaging.ColorAdjustType>"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n1.  Opens an <xref:System.Drawing.Image> that uses the file Circle.bmp and draws it to the screen.  \n  \n2.  Creates an <xref:System.Drawing.Imaging.ImageAttributes> object and sets its color key by calling the <xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%2A> method.  \n  \n3.  Draws the image to the screen using the color key of the <xref:System.Drawing.Imaging.ImageAttributes> object.  \n  \n [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#2](~/add/codesnippet/cpp/71066d96-794d-4f7b-950a-_1.cpp)]\n [!code-cs[System.Drawing.ClassicImaging.ImageAttributes#2](~/add/codesnippet/csharp/71066d96-794d-4f7b-950a-_1.cs)]\n [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#2](~/add/codesnippet/visualbasic/71066d96-794d-4f7b-950a-_1.vb)]"
  syntax:
    content: public void SetColorKey (System.Drawing.Color colorLow, System.Drawing.Color colorHigh, System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: colorLow
      type: System.Drawing.Color
      description: "低色鍵值。"
    - id: colorHigh
      type: System.Drawing.Color
      description: "高色鍵值。"
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定設定的色彩索引鍵的分類。"
  overload: System.Drawing.Imaging.ImageAttributes.SetColorKey*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix)
  id: SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetColorMatrices(ColorMatrix,ColorMatrix)
  nameWithType: ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "設定彩色調整矩陣和灰階調整矩陣的預設分類。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的調整矩陣、 「 點陣圖 」 類別目錄的不同調整矩陣和畫筆分類不同的調整矩陣。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，預設設定會套用至畫筆分類。       呼叫 SetColorMatrices 方法相當於呼叫<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrices%28System.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrixFlag%29?displayProperty=fullName>方法並傳遞<xref:System.Drawing.Imaging.ColorMatrixFlag?displayProperty=fullName>如`flags`參數。</xref:System.Drawing.Imaging.ColorMatrixFlag?displayProperty=fullName> </xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrices%28System.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrixFlag%29?displayProperty=fullName> <xref:System.Drawing.Imaging.ColorMatrixFlag?displayProperty=fullName>指定會調整的彩色調整矩陣不灰階調整矩陣的所有色彩 （包括灰色）。</xref:System.Drawing.Imaging.ColorMatrixFlag?displayProperty=fullName> 因此，傳遞至這個方法的灰階調整矩陣沒有任何作用。"
  syntax:
    content: public void SetColorMatrices (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrix grayMatrix);
    parameters:
    - id: newColorMatrix
      type: System.Drawing.Imaging.ColorMatrix
      description: "彩色調整矩陣。"
    - id: grayMatrix
      type: System.Drawing.Imaging.ColorMatrix
      description: "灰階調整矩陣。"
  overload: System.Drawing.Imaging.ImageAttributes.SetColorMatrices*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)
  id: SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag)
  nameWithType: ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "設定彩色調整矩陣和灰階調整矩陣的預設分類。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的調整矩陣、 「 點陣圖 」 類別目錄的不同調整矩陣和畫筆分類不同的調整矩陣。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，預設設定會套用至畫筆分類。"
  syntax:
    content: public void SetColorMatrices (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrix grayMatrix, System.Drawing.Imaging.ColorMatrixFlag flags);
    parameters:
    - id: newColorMatrix
      type: System.Drawing.Imaging.ColorMatrix
      description: "彩色調整矩陣。"
    - id: grayMatrix
      type: System.Drawing.Imaging.ColorMatrix
      description: "灰階調整矩陣。"
    - id: flags
      type: System.Drawing.Imaging.ColorMatrixFlag
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorMatrixFlag&quot;></xref>指定的影像和色彩將會受到彩色調整和灰階調整矩陣的型別。"
  overload: System.Drawing.Imaging.ImageAttributes.SetColorMatrices*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)
  id: SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag,ColorAdjustType)
  nameWithType: ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag,ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "設定彩色調整矩陣和灰階調整矩陣指定分類。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的調整矩陣、 「 點陣圖 」 類別目錄的不同調整矩陣和畫筆分類不同的調整矩陣。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，預設設定會套用至畫筆分類。       您指定的彩色調整或將某個分類的灰階調整設定，因為預設調整設定不會再套用到該類別。 例如，假設您指定的調整設定預設分類的集合。 如果您藉由傳遞設定的畫筆分類的彩色調整和灰階調整矩陣<xref:System.Drawing.Imaging.ColorAdjustType>至<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrices%2A>方法，沒有預設值的調整設定將套用到畫筆。</xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrices%2A> </xref:System.Drawing.Imaging.ColorAdjustType>"
  syntax:
    content: public void SetColorMatrices (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrix grayMatrix, System.Drawing.Imaging.ColorMatrixFlag mode, System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: newColorMatrix
      type: System.Drawing.Imaging.ColorMatrix
      description: "彩色調整矩陣。"
    - id: grayMatrix
      type: System.Drawing.Imaging.ColorMatrix
      description: "灰階調整矩陣。"
    - id: mode
      type: System.Drawing.Imaging.ColorMatrixFlag
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorMatrixFlag&quot;></xref>指定的影像和色彩將會受到彩色調整和灰階調整矩陣的型別。"
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定設定的彩色調整和灰階調整矩陣的分類。"
  overload: System.Drawing.Imaging.ImageAttributes.SetColorMatrices*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix)
  id: SetColorMatrix(System.Drawing.Imaging.ColorMatrix)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetColorMatrix(ColorMatrix)
  nameWithType: ImageAttributes.SetColorMatrix(ColorMatrix)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(ColorMatrix)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "設定預設分類的彩色調整矩陣。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的彩色調整矩陣、 「 點陣圖 」 類別目錄的不同彩色調整矩陣和仍然畫筆分類的不同彩色調整矩陣。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，預設設定會套用至畫筆分類。       呼叫 SetColorMatrix 方法相當於呼叫<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%28System.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrixFlag%29?displayProperty=fullName>方法並傳遞<xref:System.Drawing.Imaging.ColorMatrixFlag?displayProperty=fullName>如`flags`參數。</xref:System.Drawing.Imaging.ColorMatrixFlag?displayProperty=fullName> </xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%28System.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrixFlag%29?displayProperty=fullName> <xref:System.Drawing.Imaging.ColorMatrixFlag?displayProperty=fullName>指定彩色調整矩陣調整的所有色彩 （包括灰色）</xref:System.Drawing.Imaging.ColorMatrixFlag?displayProperty=fullName>"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n1.  Creates a rectangle image that has all the color values set to 128, producing a rectangle that is filled with a solid medium-gray color. The code then draws this rectangle image to the screen.  \n  \n2.  Creates a <xref:System.Drawing.Imaging.ColorMatrix> and sets its <xref:System.Drawing.Drawing2D.Matrix> location to 1.75, which emphasizes the red component of the image.  \n  \n3.  Creates an <xref:System.Drawing.Imaging.ImageAttributes> object and calls the <xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A> method.  \n  \n4.  Draws the image (a second rectangle) to the screen using the <xref:System.Drawing.Imaging.ColorMatrix> just set in the <xref:System.Drawing.Imaging.ImageAttributes> object.  \n  \n Note that the second rectangle has the color red emphasized.  \n  \n [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#3](~/add/codesnippet/cpp/177ae5c1-d9d6-4cf6-ac7b-_1.cpp)]\n [!code-cs[System.Drawing.ClassicImaging.ImageAttributes#3](~/add/codesnippet/csharp/177ae5c1-d9d6-4cf6-ac7b-_1.cs)]\n [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#3](~/add/codesnippet/visualbasic/177ae5c1-d9d6-4cf6-ac7b-_1.vb)]"
  syntax:
    content: public void SetColorMatrix (System.Drawing.Imaging.ColorMatrix newColorMatrix);
    parameters:
    - id: newColorMatrix
      type: System.Drawing.Imaging.ColorMatrix
      description: "彩色調整矩陣。"
  overload: System.Drawing.Imaging.ImageAttributes.SetColorMatrix*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)
  id: SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetColorMatrix(ColorMatrix,ColorMatrixFlag)
  nameWithType: ImageAttributes.SetColorMatrix(ColorMatrix,ColorMatrixFlag)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(ColorMatrix,ColorMatrixFlag)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "設定預設分類的彩色調整矩陣。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的彩色調整矩陣、 「 點陣圖 」 類別目錄的不同彩色調整矩陣和仍然畫筆分類的不同彩色調整矩陣。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，預設設定會套用至畫筆分類。"
  example:
  - For a code example, see the <xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%28System.Drawing.Imaging.ColorMatrix%29> method.
  syntax:
    content: public void SetColorMatrix (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrixFlag flags);
    parameters:
    - id: newColorMatrix
      type: System.Drawing.Imaging.ColorMatrix
      description: "彩色調整矩陣。"
    - id: flags
      type: System.Drawing.Imaging.ColorMatrixFlag
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorMatrixFlag&quot;></xref>指定的影像和色彩將會受到彩色調整矩陣的型別。"
  overload: System.Drawing.Imaging.ImageAttributes.SetColorMatrix*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)
  id: SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetColorMatrix(ColorMatrix,ColorMatrixFlag,ColorAdjustType)
  nameWithType: ImageAttributes.SetColorMatrix(ColorMatrix,ColorMatrixFlag,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(ColorMatrix,ColorMatrixFlag,ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "設定指定分類的彩色調整矩陣。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的彩色調整矩陣、 「 點陣圖 」 類別目錄的不同彩色調整矩陣和仍然畫筆分類的不同彩色調整矩陣。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，預設設定會套用至畫筆分類。       您指定的彩色調整或將某個分類的灰階調整設定，因為預設調整設定不會再套用到該類別。 例如，假設您指定的調整設定預設分類的集合。 如果您藉由傳遞設定畫筆分類的彩色調整矩陣<xref:System.Drawing.Imaging.ColorAdjustType>至<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A>方法，沒有預設值的調整設定將套用到畫筆。</xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A> </xref:System.Drawing.Imaging.ColorAdjustType>"
  example:
  - "The following code example demonstrates how to use the SetColorMatrix method. To run this example, paste the code into a Windows Form and call `RotateColors` from the form's <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-vb[System.Drawing.RotateColors#1](~/add/codesnippet/visualbasic/90629bc4-1375-4e58-926d-_1.vb)]\n [!code-cs[System.Drawing.RotateColors#1](~/add/codesnippet/csharp/90629bc4-1375-4e58-926d-_1.cs)]"
  syntax:
    content: public void SetColorMatrix (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrixFlag mode, System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: newColorMatrix
      type: System.Drawing.Imaging.ColorMatrix
      description: "彩色調整矩陣。"
    - id: mode
      type: System.Drawing.Imaging.ColorMatrixFlag
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorMatrixFlag&quot;></xref>指定的影像和色彩將會受到彩色調整矩陣的型別。"
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定設定彩色調整矩陣的分類。"
  overload: System.Drawing.Imaging.ImageAttributes.SetColorMatrix*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetGamma(System.Single)
  id: SetGamma(System.Single)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetGamma(Single)
  nameWithType: ImageAttributes.SetGamma(Single)
  fullName: System.Drawing.Imaging.ImageAttributes.SetGamma(Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "設定預設分類的 gamma 值。"
  remarks: "一般值`gamma`參數會從 1.0 2.2; 不過，從 0.1 到 5.0 的值無法證明在某些情況下很有用。       <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的 gamma 值，不同的 gamma 值點陣圖分類，然後畫筆分類不同的 gamma 值。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，預設設定會套用至畫筆分類。       一般範圍以外的 gamma 值可能是適用於舊的 CRT 監視器或監視器的不尋常的光源的狀況，例如工業環境或視窗會顯示。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. In addition, you need to change the image file path to a path and image name valid on your system. The code performs the following actions:  \n  \n1.  Opens an <xref:System.Drawing.Image> that uses the file Camera.jpg and draws it to the screen using the default value for gamma.  \n  \n2.  Creates an <xref:System.Drawing.Imaging.ImageAttributes> object and sets its gamma to 2.2 by calling the <xref:System.Drawing.Imaging.ImageAttributes.SetGamma%2A> method.  \n  \n3.  Draws the image (a second camera) to the screen using the gamma value just set in the <xref:System.Drawing.Imaging.ImageAttributes> object.  \n  \n [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#4](~/add/codesnippet/cpp/m-system.drawing.imaging_4_1.cpp)]\n [!code-cs[System.Drawing.ClassicImaging.ImageAttributes#4](~/add/codesnippet/csharp/m-system.drawing.imaging_4_1.cs)]\n [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#4](~/add/codesnippet/visualbasic/m-system.drawing.imaging_4_1.vb)]"
  syntax:
    content: public void SetGamma (float gamma);
    parameters:
    - id: gamma
      type: System.Single
      description: "Gamma 修正值。"
  overload: System.Drawing.Imaging.ImageAttributes.SetGamma*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetGamma(System.Single,System.Drawing.Imaging.ColorAdjustType)
  id: SetGamma(System.Single,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetGamma(Single,ColorAdjustType)
  nameWithType: ImageAttributes.SetGamma(Single,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetGamma(Single,ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "設定指定分類的 gamma 值。"
  remarks: "一般值`gamma`參數會從 1.0 2.2; 不過，從 0.1 到 5.0 的值無法證明在某些情況下很有用。       <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的 gamma 值，不同的 gamma 值點陣圖分類，然後畫筆分類不同的 gamma 值。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，預設設定會套用至畫筆分類。       您指定的彩色調整或將某個分類的灰階調整設定，因為預設調整設定不會再套用到該類別。 例如，假設您指定的調整設定預設分類的集合。 如果您藉由傳遞設定畫筆分類的 gamma 值<xref:System.Drawing.Imaging.ColorAdjustType>至<xref:System.Drawing.Imaging.ImageAttributes.SetGamma%2A>方法，沒有預設值的調整設定將套用到畫筆。</xref:System.Drawing.Imaging.ImageAttributes.SetGamma%2A> </xref:System.Drawing.Imaging.ColorAdjustType>       一般範圍以外的 gamma 值可能是適用於舊的 CRT 監視器或監視器的不尋常的光源的狀況，例如工業環境或視窗會顯示。"
  example:
  - For a code example, see the <xref:System.Drawing.Imaging.ImageAttributes.SetGamma%28System.Single%29> method.
  syntax:
    content: public void SetGamma (float gamma, System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: gamma
      type: System.Single
      description: "Gamma 修正值。"
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;></xref>指定類別目錄設定 gamma 值的列舉型別。"
  overload: System.Drawing.Imaging.ImageAttributes.SetGamma*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetNoOp
  id: SetNoOp
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetNoOp()
  nameWithType: ImageAttributes.SetNoOp()
  fullName: System.Drawing.Imaging.ImageAttributes.SetNoOp()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "會關閉預設分類的彩色調整。 您可以呼叫<> *> 方法，以重新啟用之前呼叫的進行中的彩色調整設定<> *> 方法。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的 gamma 值，不同的 gamma 值點陣圖分類，然後畫筆分類不同的 gamma 值。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，預設設定會套用至畫筆分類。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n1.  Opens an <xref:System.Drawing.Image> that uses the file Camera.jpg.  \n  \n2.  Sets the gamma value of the <xref:System.Drawing.Imaging.ImageAttributes> object to 0.25.  \n  \n3.  Draws the image to the screen.  \n  \n4.  Calls the SetNoOp method.  \n  \n5.  Draws the image (a second camera) to the screen; however, because the SetNoOp method was called, the gamma setting defaults to a value of 1.0 and the image is drawn to the screen with the default gamma setting.  \n  \n Note that the image on the left is very washed out (gamma of 0.25) and the image on the right has more contrast (gamma of 1.0).  \n  \n [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#5](~/add/codesnippet/cpp/m-system.drawing.imaging_0_1.cpp)]\n [!code-cs[System.Drawing.ClassicImaging.ImageAttributes#5](~/add/codesnippet/csharp/m-system.drawing.imaging_0_1.cs)]\n [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#5](~/add/codesnippet/visualbasic/m-system.drawing.imaging_0_1.vb)]"
  syntax:
    content: public void SetNoOp ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.SetNoOp*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetNoOp(System.Drawing.Imaging.ColorAdjustType)
  id: SetNoOp(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetNoOp(ColorAdjustType)
  nameWithType: ImageAttributes.SetNoOp(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetNoOp(ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "關閉指定分類的彩色調整。 您可以呼叫<> *> 方法，以重新啟用之前呼叫的進行中的彩色調整設定<> *> 方法。"
  remarks: '<xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的 gamma 值，不同的 gamma 值點陣圖分類，然後畫筆分類不同的 gamma 值。'
  example:
  - For a code example, see the <xref:System.Drawing.Imaging.ImageAttributes.SetNoOp> method.
  syntax:
    content: public void SetNoOp (System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定色彩修正已關閉的分類。"
  overload: System.Drawing.Imaging.ImageAttributes.SetNoOp*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag)
  id: SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetOutputChannel(ColorChannelFlag)
  nameWithType: ImageAttributes.SetOutputChannel(ColorChannelFlag)
  fullName: System.Drawing.Imaging.ImageAttributes.SetOutputChannel(ColorChannelFlag)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "設定預設分類的 CMYK （青色-洋紅-黃色-黑色） 輸出色。"
  remarks: "您可以使用<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>方法將影像轉換成 CMYK 色彩空間，並檢查其中一個 CMYK 色彩頻道的強度。</xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> 例如，假設您建立的<xref:System.Drawing.Imaging.ImageAttributes>物件，並設定至<xref:System.Drawing.Imaging.ColorChannelFlag>。</xref:System.Drawing.Imaging.ColorChannelFlag>其點陣圖輸出通道</xref:System.Drawing.Imaging.ImageAttributes> 如果您要傳入的路徑<xref:System.Drawing.Imaging.ImageAttributes>物件<xref:System.Drawing.Graphics.DrawImage%2A>方法，會計算青色元件的每個像素，而且所呈現影像的每個像素深淺程度的灰色，表示其青色通道的濃度。</xref:System.Drawing.Graphics.DrawImage%2A> </xref:System.Drawing.Imaging.ImageAttributes> 同樣地，您可以呈現影像，以指出洋紅色、 黃色及黑色通道的強度。       <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定在輸出通道的預設分類和點陣圖分類不同的輸出色頻。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何點陣圖分類的調整設定，預設設定會套用至點陣圖分類。"
  example:
  - "The following code example demonstrates how to use the <xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> method. To run this example, paste the following code into a Windows Form. Handle the form's <xref:System.Windows.Forms.Control.Paint> event and call `ShowOutputChannels`, passing `e` as<xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-vb[System.Drawing.Misc3#4](~/add/codesnippet/visualbasic/9ad3adf3-ee86-4369-8698-_1.vb)]\n [!code-cs[System.Drawing.Misc3#4](~/add/codesnippet/csharp/9ad3adf3-ee86-4369-8698-_1.cs)]"
  syntax:
    content: public void SetOutputChannel (System.Drawing.Imaging.ColorChannelFlag flags);
    parameters:
    - id: flags
      type: System.Drawing.Imaging.ColorChannelFlag
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorChannelFlag&quot;> </xref> ，指定輸出色頻。"
  overload: System.Drawing.Imaging.ImageAttributes.SetOutputChannel*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag,System.Drawing.Imaging.ColorAdjustType)
  id: SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetOutputChannel(ColorChannelFlag,ColorAdjustType)
  nameWithType: ImageAttributes.SetOutputChannel(ColorChannelFlag,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetOutputChannel(ColorChannelFlag,ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "設定指定分類的 CMYK （青色-洋紅-黃色-黑色） 輸出色。"
  remarks: "您可以使用<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>方法將影像轉換成 CMYK 色彩空間，並檢查其中一個 CMYK 色彩頻道的強度。</xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> 例如，假設您建立的<xref:System.Drawing.Imaging.ImageAttributes>物件，並設定至<xref:System.Drawing.Imaging.ColorChannelFlag>。</xref:System.Drawing.Imaging.ColorChannelFlag>其點陣圖輸出通道</xref:System.Drawing.Imaging.ImageAttributes> 如果您要傳入的路徑<xref:System.Drawing.Imaging.ImageAttributes>物件<xref:System.Drawing.Graphics.DrawImage%2A>方法，會計算青色元件的每個像素，而且所呈現影像的每個像素深淺程度的灰色，表示其青色通道的濃度。</xref:System.Drawing.Graphics.DrawImage%2A> </xref:System.Drawing.Imaging.ImageAttributes> 同樣地，您可以呈現影像，以指出洋紅色、 黃色及黑色通道的強度。       <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定在輸出通道的預設分類和點陣圖分類不同的輸出色頻。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何點陣圖分類的調整設定，預設設定會套用至點陣圖分類。       您指定的彩色調整或將某個分類的灰階調整設定，因為預設調整設定不會再套用到該類別。 例如，假設您指定的調整設定預設分類的集合。 如果您藉由傳遞設定輸出色頻點陣圖分類<xref:System.Drawing.Imaging.ColorAdjustType>SetOutputChannel 方法中，沒有預設值的調整設定會套用至點陣圖。</xref:System.Drawing.Imaging.ColorAdjustType>"
  example:
  - "The following code example demonstrates how to use the SetOutputChannel method. To run this example, paste the following code into a Windows Form. Handle the form's <xref:System.Windows.Forms.Control.Paint> event and call `ShowOutputChannels`, passing `e` as<xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-vb[System.Drawing.Misc3#4](~/add/codesnippet/visualbasic/980f8f9a-f561-44e4-94f4-_1.vb)]\n [!code-cs[System.Drawing.Misc3#4](~/add/codesnippet/csharp/980f8f9a-f561-44e4-94f4-_1.cs)]"
  syntax:
    content: public void SetOutputChannel (System.Drawing.Imaging.ColorChannelFlag flags, System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: flags
      type: System.Drawing.Imaging.ColorChannelFlag
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorChannelFlag&quot;> </xref> ，指定輸出色頻。"
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定設定輸出色頻的分類。"
  overload: System.Drawing.Imaging.ImageAttributes.SetOutputChannel*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(System.String)
  id: SetOutputChannelColorProfile(System.String)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetOutputChannelColorProfile(String)
  nameWithType: ImageAttributes.SetOutputChannelColorProfile(String)
  fullName: System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(String)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "設定預設分類的輸出色頻色彩設定檔檔案。"
  remarks: "您可以使用<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>和<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>方法將影像轉換成 CMYK （青色-洋紅-黃色-黑色） 色彩空間，並檢查其中一個 CMYK 的強度色彩頻道。</xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A> </xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> 例如，假設您撰寫程式碼會執行下列步驟︰ 1。  建立<xref:System.Drawing.Image>.</xref:System.Drawing.Image>      2.  建立<xref:System.Drawing.Imaging.ImageAttributes>物件。</xref:System.Drawing.Imaging.ImageAttributes>      3.  傳遞<xref:System.Drawing.Imaging.ColorChannelFlag>至<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>方法<xref:System.Drawing.Imaging.ImageAttributes>物件。</xref:System.Drawing.Imaging.ImageAttributes> </xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> </xref:System.Drawing.Imaging.ColorChannelFlag>      4.  傳遞至的色彩設定檔的路徑名稱<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>方法<xref:System.Drawing.Imaging.ImageAttributes>物件。</xref:System.Drawing.Imaging.ImageAttributes> </xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>      5.  傳遞的路徑<xref:System.Drawing.Image>和<xref:System.Drawing.Imaging.ImageAttributes>物件加入至<xref:System.Drawing.Graphics.DrawImage%2A>方法。</xref:System.Drawing.Graphics.DrawImage%2A> </xref:System.Drawing.Imaging.ImageAttributes> </xref:System.Drawing.Image>       [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)]將用來計算青色元件的映像，在每個像素的色彩設定檔，並呈現影像的每個像素會成為陰影灰色，表示其青色通道的濃度。       <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定輸出色頻色彩設定檔案的預設分類和點陣圖分類不同的輸出色頻色彩設定檔檔案。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何點陣圖分類的調整設定，預設設定會套用至點陣圖分類。"
  syntax:
    content: public void SetOutputChannelColorProfile (string colorProfileFilename);
    parameters:
    - id: colorProfileFilename
      type: System.String
      description: "色彩設定檔路徑名稱。 如果色彩設定檔位於 %SystemRoot%\\System32\\Spool\\Drivers\\Color 目錄中，這個參數可以是檔案名稱。 否則，這個參數必須是完整的路徑名稱。"
  overload: System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(System.String,System.Drawing.Imaging.ColorAdjustType)
  id: SetOutputChannelColorProfile(System.String,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetOutputChannelColorProfile(String,ColorAdjustType)
  nameWithType: ImageAttributes.SetOutputChannelColorProfile(String,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(String,ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "設定指定分類的輸出色頻色彩設定檔檔案。"
  remarks: "您可以使用<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>和<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>方法將影像轉換成 CMYK （青色-洋紅-黃色-黑色） 色彩空間，並檢查其中一個 CMYK 的強度色彩頻道。</xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A> </xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> 例如，假設您撰寫程式碼會執行下列步驟︰ 1。  建立<xref:System.Drawing.Image>.</xref:System.Drawing.Image>      2.  建立<xref:System.Drawing.Imaging.ImageAttributes>物件。</xref:System.Drawing.Imaging.ImageAttributes>      3.  傳遞<xref:System.Drawing.Imaging.ColorChannelFlag>至<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>方法<xref:System.Drawing.Imaging.ImageAttributes>物件。</xref:System.Drawing.Imaging.ImageAttributes> </xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> </xref:System.Drawing.Imaging.ColorChannelFlag>      4.  傳遞至的色彩設定檔的路徑名稱<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>方法<xref:System.Drawing.Imaging.ImageAttributes>物件。</xref:System.Drawing.Imaging.ImageAttributes> </xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>      5.  傳遞的路徑<xref:System.Drawing.Image>和<xref:System.Drawing.Imaging.ImageAttributes>物件加入至<xref:System.Drawing.Graphics.DrawImage%2A>方法。</xref:System.Drawing.Graphics.DrawImage%2A> </xref:System.Drawing.Imaging.ImageAttributes> </xref:System.Drawing.Image>       [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)]將用來計算青色元件的映像，在每個像素的色彩設定檔，並呈現影像的每個像素會成為陰影灰色，表示其青色通道的濃度。       <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定輸出色頻色彩設定檔案的預設分類和點陣圖分類不同的輸出色頻色彩設定檔檔案。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您從來沒有指定任何點陣圖分類的調整設定，預設設定會套用至點陣圖分類。       您指定的彩色調整或將某個分類的灰階調整設定，因為預設調整設定不會再套用到該類別。 例如，假設您指定的調整設定預設分類的集合。 如果您藉由傳遞設定輸出色頻色彩設定檔檔案，如點陣圖分類<xref:System.Drawing.Imaging.ColorAdjustType>至<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>方法，沒有預設值的調整設定將套用至點陣圖。</xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A> </xref:System.Drawing.Imaging.ColorAdjustType>"
  syntax:
    content: public void SetOutputChannelColorProfile (string colorProfileFilename, System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: colorProfileFilename
      type: System.String
      description: "色彩設定檔路徑名稱。 如果色彩設定檔位於 %SystemRoot%\\System32\\Spool\\Drivers\\Color 目錄中，這個參數可以是檔案名稱。 否則，這個參數必須是完整的路徑名稱。"
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定要設定輸出色頻色彩設定檔檔案的分類。"
  overload: System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetRemapTable(System.Drawing.Imaging.ColorMap[])
  id: SetRemapTable(System.Drawing.Imaging.ColorMap[])
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetRemapTable(ColorMap[])
  nameWithType: ImageAttributes.SetRemapTable(ColorMap[])
  fullName: System.Drawing.Imaging.ImageAttributes.SetRemapTable(ColorMap[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "設定預設分類的色彩重新對應表。"
  remarks: "色彩重新對應表是陣列<xref:System.Drawing.Imaging.ColorMap>結構。</xref:System.Drawing.Imaging.ColorMap> 每個<xref:System.Drawing.Imaging.ColorMap>結構有兩個<xref:System.Drawing.Color>物件︰ 其中一個，指定舊的色彩，另一個則指定對應的新色彩。</xref:System.Drawing.Color> </xref:System.Drawing.Imaging.ColorMap> 在呈現期間，符合其中一個舊的色彩重新對應表中的任何色彩變更為對應的新色彩。       <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定色彩重新對應預設分類、 [點陣圖] 類別中，色彩重新對應表和仍然畫筆分類不同的色彩重新對應表。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，預設設定會套用至畫筆分類。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n1.  Creates an image (a red circle), saves it as Circle2.jpg, opens that image, and draws it to the screen.  \n  \n2.  Creates a color map that maps the color red to the color green.  \n  \n3.  Draws the image created earlier to the screen again, but this time using the color map.  \n  \n [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#6](~/add/codesnippet/cpp/de604fe6-6d67-4cfb-bb54-_1.cpp)]\n [!code-cs[System.Drawing.ClassicImaging.ImageAttributes#6](~/add/codesnippet/csharp/de604fe6-6d67-4cfb-bb54-_1.cs)]\n [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#6](~/add/codesnippet/visualbasic/de604fe6-6d67-4cfb-bb54-_1.vb)]"
  syntax:
    content: public void SetRemapTable (System.Drawing.Imaging.ColorMap[] map);
    parameters:
    - id: map
      type: System.Drawing.Imaging.ColorMap[]
      description: "型別的色彩配對陣列<xref href=&quot;System.Drawing.Imaging.ColorMap&quot;> </xref>。 每個色彩配對包含現有色彩 （第一個值），它會對應到 （第二個值） 的色彩。"
  overload: System.Drawing.Imaging.ImageAttributes.SetRemapTable*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetRemapTable(System.Drawing.Imaging.ColorMap[],System.Drawing.Imaging.ColorAdjustType)
  id: SetRemapTable(System.Drawing.Imaging.ColorMap[],System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetRemapTable(ColorMap[],ColorAdjustType)
  nameWithType: ImageAttributes.SetRemapTable(ColorMap[],ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetRemapTable(ColorMap[],ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "設定指定分類的色彩重新對應表。"
  remarks: "色彩重新對應表是陣列<xref:System.Drawing.Imaging.ColorMap>結構。</xref:System.Drawing.Imaging.ColorMap> 每個<xref:System.Drawing.Imaging.ColorMap>結構有兩個<xref:System.Drawing.Color>物件︰ 其中一個，指定舊的色彩，另一個則指定對應的新色彩。</xref:System.Drawing.Color> </xref:System.Drawing.Imaging.ColorMap> 在呈現期間，符合其中一個舊的色彩重新對應表中的任何色彩變更為對應的新色彩。       <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定色彩重新對應預設分類、 [點陣圖] 類別中，色彩重新對應表和仍然畫筆分類不同的色彩重新對應表。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，預設設定會套用至畫筆分類。       您指定的彩色調整或將某個分類的灰階調整設定，因為預設調整設定不會再套用到該類別。 例如，假設您指定的調整設定預設分類的集合。 如果您藉由傳遞設定畫筆分類的色彩重新對應表<xref:System.Drawing.Imaging.ColorAdjustType>SetRemapTable 方法中，沒有預設值的調整設定會套用到筆。</xref:System.Drawing.Imaging.ColorAdjustType>"
  example:
  - For a code example, see the [SetRemapTable(ColorMap\[\])](assetId:///M:System.Drawing.Imaging.ImageAttributes.SetRemapTable(System.Drawing.Imaging.ColorMap[])?qualifyHint=False&autoUpgrade=False) method.
  syntax:
    content: public void SetRemapTable (System.Drawing.Imaging.ColorMap[] map, System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: map
      type: System.Drawing.Imaging.ColorMap[]
      description: "型別的色彩配對陣列<xref href=&quot;System.Drawing.Imaging.ColorMap&quot;> </xref>。 每個色彩配對包含現有色彩 （第一個值），它會對應到 （第二個值） 的色彩。"
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定設定的色彩重新對應表的分類。"
  overload: System.Drawing.Imaging.ImageAttributes.SetRemapTable*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetThreshold(System.Single)
  id: SetThreshold(System.Single)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetThreshold(Single)
  nameWithType: ImageAttributes.SetThreshold(Single)
  fullName: System.Drawing.Imaging.ImageAttributes.SetThreshold(Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "設定預設分類的閾值 （透明度範圍）。"
  remarks: "臨界值是從 0 到 1，指定每個色彩元件的截止點的值。 例如，假設臨界值設定為 0.7，並假設您要轉譯色彩的紅色、 綠色和藍色元件 230、 50 和 220，分別是。 紅色元件 (230) 大於 0.7 x 255, 所以紅色元件將會變更到 255 之間 （完整強度）。 綠色元件 (50) 小於 0.7 x 255, 讓綠色元件將會變更為 0。 藍色元件 (220) 大於 0.7 x 255, 所以藍色元件就會變更為 255。       <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的臨界值、 「 點陣圖 」 類別目錄的臨界值和仍然畫筆分類的不同臨界值。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，預設設定會套用至畫筆分類。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n1.  Opens an <xref:System.Drawing.Image> and draws it to the screen.  \n  \n2.  Creates an <xref:System.Drawing.Imaging.ImageAttributes> object and sets its threshold by using the <xref:System.Drawing.Imaging.ImageAttributes.SetThreshold%2A> method.  \n  \n3.  Draws the image to the screen by using the threshold of the <xref:System.Drawing.Imaging.ImageAttributes> object.  \n  \n [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#7](~/add/codesnippet/cpp/m-system.drawing.imaging_1_1.cpp)]\n [!code-cs[System.Drawing.ClassicImaging.ImageAttributes#7](~/add/codesnippet/csharp/m-system.drawing.imaging_1_1.cs)]\n [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#7](~/add/codesnippet/visualbasic/m-system.drawing.imaging_1_1.vb)]"
  syntax:
    content: public void SetThreshold (float threshold);
    parameters:
    - id: threshold
      type: System.Single
      description: "指定的臨界值的實數。"
  overload: System.Drawing.Imaging.ImageAttributes.SetThreshold*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetThreshold(System.Single,System.Drawing.Imaging.ColorAdjustType)
  id: SetThreshold(System.Single,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetThreshold(Single,ColorAdjustType)
  nameWithType: ImageAttributes.SetThreshold(Single,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetThreshold(Single,ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "設定指定分類的閾值 （透明度範圍）。"
  remarks: "臨界值是從 0 到 1，指定每個色彩元件的截止點的值。 例如，假設臨界值設定為 0.7，並假設您要轉譯色彩的紅色、 綠色和藍色元件 230、 50 和 220，分別是。 紅色元件 (230) 大於 0.7 x 255, 所以紅色元件將會變更到 255 之間 （完整強度）。 綠色元件 (50) 小於 0.7 x 255, 讓綠色元件將會變更為 0。 藍色元件 (220) 大於 0.7 x 255, 所以藍色元件就會變更為 255。       <xref:System.Drawing.Imaging.ImageAttributes>物件會維護色彩及灰階五個調整類別設定︰ 預設、 點陣圖、 筆刷、 畫筆、 和文字。</xref:System.Drawing.Imaging.ImageAttributes> 例如，您可以指定預設分類的臨界值、 「 點陣圖 」 類別目錄的臨界值和仍然畫筆分類的不同臨界值。       預設的彩色調整和灰階調整設定套用至沒有自己的調整設定的所有類別。 比方說，如果您不指定任何筆分類的調整設定，預設設定會套用至畫筆分類。       您指定的彩色調整或將某個分類的灰階調整設定，因為預設調整設定不會再套用到該類別。 例如，假設您指定的調整設定預設分類的集合。 如果您藉由傳遞設定畫筆分類的閾值<xref:System.Drawing.Imaging.ColorAdjustType>SetThreshold 方法中，沒有預設值的調整設定會套用到筆。</xref:System.Drawing.Imaging.ColorAdjustType>"
  example:
  - For a code example, see the <xref:System.Drawing.Imaging.ImageAttributes.SetThreshold%28System.Single%29> method.
  syntax:
    content: public void SetThreshold (float threshold, System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: threshold
      type: System.Single
      description: "臨界值，介於 0.0 到 1.0 之間，做為將會對應到最大值或最小值的排序色彩中斷點。"
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "項目<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定要設定色彩閾值的分類。"
  overload: System.Drawing.Imaging.ImageAttributes.SetThreshold*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode)
  id: SetWrapMode(System.Drawing.Drawing2D.WrapMode)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetWrapMode(WrapMode)
  nameWithType: ImageAttributes.SetWrapMode(WrapMode)
  fullName: System.Drawing.Imaging.ImageAttributes.SetWrapMode(WrapMode)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "設定用來決定如何越形狀或在形狀界限並排紋理的環繞模式。 跨圖形來填入，當紋理小於它正在填滿的形狀時，紋理會並排顯示。"
  remarks: "呼叫 SetWrapMode 方法相當於呼叫<xref:System.Drawing.Imaging.ImageAttributes.SetWrapMode%28System.Drawing.Drawing2D.WrapMode%2CSystem.Drawing.Color%29>和傳遞<xref:System.Drawing.Color.Black%2A?displayProperty=fullName>如`color`參數。</xref:System.Drawing.Color.Black%2A?displayProperty=fullName> </xref:System.Drawing.Imaging.ImageAttributes.SetWrapMode%28System.Drawing.Drawing2D.WrapMode%2CSystem.Drawing.Color%29> <xref:System.Drawing.Color.Black%2A?displayProperty=fullName>指定的呈現影像外部的像素的色彩。</xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 此色彩時，會顯示模式參數設定為<xref:System.Drawing.Drawing2D.WrapMode>來源矩形傳遞至<xref:System.Drawing.Graphics.DrawImage%2A>方法大於影像本身。</xref:System.Drawing.Graphics.DrawImage%2A> </xref:System.Drawing.Drawing2D.WrapMode>"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n1.  Opens an <xref:System.Drawing.Image> from the Circle3.jpg file (a small, red-filled circle) and draws it to the screen.  \n  \n2.  Creates an <xref:System.Drawing.Imaging.ImageAttributes> object and sets the <xref:System.Drawing.Drawing2D.WrapMode> enumeration to <xref:System.Drawing.Drawing2D.WrapMode>.  \n  \n3.  Creates a <xref:System.Drawing.TextureBrush> using the image from the Circle3.jpg file.  \n  \n4.  Draws a rectangle to the screen that is filled with the small, red-filled circles.  \n  \n [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#8](~/add/codesnippet/cpp/1dc37210-933f-4e57-8209-_1.cpp)]\n [!code-cs[System.Drawing.ClassicImaging.ImageAttributes#8](~/add/codesnippet/csharp/1dc37210-933f-4e57-8209-_1.cs)]\n [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#8](~/add/codesnippet/visualbasic/1dc37210-933f-4e57-8209-_1.vb)]"
  syntax:
    content: public void SetWrapMode (System.Drawing.Drawing2D.WrapMode mode);
    parameters:
    - id: mode
      type: System.Drawing.Drawing2D.WrapMode
      description: "項目<xref href=&quot;System.Drawing.Drawing2D.WrapMode&quot;> </xref> ，指定如何重複的影像複用於磚的區域。"
  overload: System.Drawing.Imaging.ImageAttributes.SetWrapMode*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color)
  id: SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetWrapMode(WrapMode,Color)
  nameWithType: ImageAttributes.SetWrapMode(WrapMode,Color)
  fullName: System.Drawing.Imaging.ImageAttributes.SetWrapMode(WrapMode,Color)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "設定環繞模式和用來決定如何越形狀或在形狀界限並排紋理的色彩。 跨圖形來填入，當紋理小於它正在填滿的形狀時，紋理會並排顯示。"
  remarks: ''
  example:
  - For a code example, see the <xref:System.Drawing.Imaging.ImageAttributes.SetWrapMode%28System.Drawing.Drawing2D.WrapMode%29> method.
  syntax:
    content: public void SetWrapMode (System.Drawing.Drawing2D.WrapMode mode, System.Drawing.Color color);
    parameters:
    - id: mode
      type: System.Drawing.Drawing2D.WrapMode
      description: "項目<xref href=&quot;System.Drawing.Drawing2D.WrapMode&quot;> </xref> ，指定如何重複的影像複用於磚的區域。"
    - id: color
      type: System.Drawing.Color
      description: "<xref href=&quot;System.Drawing.Imaging.ImageAttributes&quot;> </xref>指定呈現影像外部的像素色彩的物件。 此色彩時，會顯示模式參數設定為<xref href=&quot;System.Drawing.Drawing2D.WrapMode&quot;></xref>來源矩形傳遞至<xref:System.Drawing.Graphics.DrawImage*>大於影像本身。</xref:System.Drawing.Graphics.DrawImage*>"
  overload: System.Drawing.Imaging.ImageAttributes.SetWrapMode*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color,System.Boolean)
  id: SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color,System.Boolean)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetWrapMode(WrapMode,Color,Boolean)
  nameWithType: ImageAttributes.SetWrapMode(WrapMode,Color,Boolean)
  fullName: System.Drawing.Imaging.ImageAttributes.SetWrapMode(WrapMode,Color,Boolean)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "設定環繞模式和用來決定如何越形狀或在形狀界限並排紋理的色彩。 跨圖形來填入，當紋理小於它正在填滿的形狀時，紋理會並排顯示。"
  remarks: ''
  example:
  - For a code example, see the <xref:System.Drawing.Imaging.ImageAttributes.SetWrapMode%28System.Drawing.Drawing2D.WrapMode%29> method.
  syntax:
    content: public void SetWrapMode (System.Drawing.Drawing2D.WrapMode mode, System.Drawing.Color color, bool clamp);
    parameters:
    - id: mode
      type: System.Drawing.Drawing2D.WrapMode
      description: "項目<xref href=&quot;System.Drawing.Drawing2D.WrapMode&quot;> </xref> ，指定如何重複的影像複用於磚的區域。"
    - id: color
      type: System.Drawing.Color
      description: "指定呈現影像外部的像素色彩的色彩物件。 此色彩時，會顯示模式參數設定為<xref href=&quot;System.Drawing.Drawing2D.WrapMode&quot;></xref>來源矩形傳遞至<xref:System.Drawing.Graphics.DrawImage*>大於影像本身。</xref:System.Drawing.Graphics.DrawImage*>"
    - id: clamp
      type: System.Boolean
      description: "這個參數沒有任何作用。 Set it to <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Drawing.Imaging.ImageAttributes.SetWrapMode*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Drawing.Imaging.ImageAttributes.#ctor
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ImageAttributes()
  nameWithType: ImageAttributes.ImageAttributes()
  fullName: System.Drawing.Imaging.ImageAttributes.ImageAttributes()
- uid: System.Drawing.Imaging.ImageAttributes.ClearBrushRemapTable
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearBrushRemapTable()
  nameWithType: ImageAttributes.ClearBrushRemapTable()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearBrushRemapTable()
- uid: System.Drawing.Imaging.ImageAttributes.ClearColorKey
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearColorKey()
  nameWithType: ImageAttributes.ClearColorKey()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearColorKey()
- uid: System.Drawing.Imaging.ImageAttributes.ClearColorKey(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearColorKey(ColorAdjustType)
  nameWithType: ImageAttributes.ClearColorKey(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearColorKey(ColorAdjustType)
- uid: System.Drawing.Imaging.ColorAdjustType
  parent: System.Drawing.Imaging
  isExternal: false
  name: ColorAdjustType
  nameWithType: ColorAdjustType
  fullName: System.Drawing.Imaging.ColorAdjustType
- uid: System.Drawing.Imaging.ImageAttributes.ClearColorMatrix
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearColorMatrix()
  nameWithType: ImageAttributes.ClearColorMatrix()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearColorMatrix()
- uid: System.Drawing.Imaging.ImageAttributes.ClearColorMatrix(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearColorMatrix(ColorAdjustType)
  nameWithType: ImageAttributes.ClearColorMatrix(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearColorMatrix(ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.ClearGamma
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearGamma()
  nameWithType: ImageAttributes.ClearGamma()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearGamma()
- uid: System.Drawing.Imaging.ImageAttributes.ClearGamma(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearGamma(ColorAdjustType)
  nameWithType: ImageAttributes.ClearGamma(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearGamma(ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.ClearNoOp
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearNoOp()
  nameWithType: ImageAttributes.ClearNoOp()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearNoOp()
- uid: System.Drawing.Imaging.ImageAttributes.ClearNoOp(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearNoOp(ColorAdjustType)
  nameWithType: ImageAttributes.ClearNoOp(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearNoOp(ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.ClearOutputChannel
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearOutputChannel()
  nameWithType: ImageAttributes.ClearOutputChannel()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearOutputChannel()
- uid: System.Drawing.Imaging.ImageAttributes.ClearOutputChannel(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearOutputChannel(ColorAdjustType)
  nameWithType: ImageAttributes.ClearOutputChannel(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearOutputChannel(ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearOutputChannelColorProfile()
  nameWithType: ImageAttributes.ClearOutputChannelColorProfile()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile()
- uid: System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearOutputChannelColorProfile(ColorAdjustType)
  nameWithType: ImageAttributes.ClearOutputChannelColorProfile(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile(ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.ClearRemapTable
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearRemapTable()
  nameWithType: ImageAttributes.ClearRemapTable()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearRemapTable()
- uid: System.Drawing.Imaging.ImageAttributes.ClearRemapTable(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearRemapTable(ColorAdjustType)
  nameWithType: ImageAttributes.ClearRemapTable(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearRemapTable(ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.ClearThreshold
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearThreshold()
  nameWithType: ImageAttributes.ClearThreshold()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearThreshold()
- uid: System.Drawing.Imaging.ImageAttributes.ClearThreshold(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearThreshold(ColorAdjustType)
  nameWithType: ImageAttributes.ClearThreshold(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearThreshold(ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.Clone
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: Clone()
  nameWithType: ImageAttributes.Clone()
  fullName: System.Drawing.Imaging.ImageAttributes.Clone()
- uid: System.Drawing.Imaging.ImageAttributes.Dispose
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: Dispose()
  nameWithType: ImageAttributes.Dispose()
  fullName: System.Drawing.Imaging.ImageAttributes.Dispose()
- uid: System.Drawing.Imaging.ImageAttributes.Finalize
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: Finalize()
  nameWithType: ImageAttributes.Finalize()
  fullName: System.Drawing.Imaging.ImageAttributes.Finalize()
- uid: System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette(System.Drawing.Imaging.ColorPalette,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: GetAdjustedPalette(ColorPalette,ColorAdjustType)
  nameWithType: ImageAttributes.GetAdjustedPalette(ColorPalette,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette(ColorPalette,ColorAdjustType)
- uid: System.Drawing.Imaging.ColorPalette
  parent: System.Drawing.Imaging
  isExternal: false
  name: ColorPalette
  nameWithType: ColorPalette
  fullName: System.Drawing.Imaging.ColorPalette
- uid: System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable(System.Drawing.Imaging.ColorMap[])
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetBrushRemapTable(ColorMap[])
  nameWithType: ImageAttributes.SetBrushRemapTable(ColorMap[])
  fullName: System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable(ColorMap[])
- uid: System.Drawing.Imaging.ColorMap[]
  parent: System.Drawing.Imaging
  isExternal: false
  name: ColorMap
  nameWithType: ColorMap
  fullName: System.Drawing.Imaging.ColorMap[]
  spec.csharp:
  - uid: System.Drawing.Imaging.ColorMap
    name: ColorMap
    nameWithType: ColorMap
    fullName: ColorMap[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.Imaging.ImageAttributes.SetColorKey(System.Drawing.Color,System.Drawing.Color)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetColorKey(Color,Color)
  nameWithType: ImageAttributes.SetColorKey(Color,Color)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorKey(Color,Color)
- uid: System.Drawing.Color
  parent: System.Drawing
  isExternal: false
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: System.Drawing.Imaging.ImageAttributes.SetColorKey(System.Drawing.Color,System.Drawing.Color,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetColorKey(Color,Color,ColorAdjustType)
  nameWithType: ImageAttributes.SetColorKey(Color,Color,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorKey(Color,Color,ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetColorMatrices(ColorMatrix,ColorMatrix)
  nameWithType: ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix)
- uid: System.Drawing.Imaging.ColorMatrix
  parent: System.Drawing.Imaging
  isExternal: false
  name: ColorMatrix
  nameWithType: ColorMatrix
  fullName: System.Drawing.Imaging.ColorMatrix
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag)
  nameWithType: ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag)
- uid: System.Drawing.Imaging.ColorMatrixFlag
  parent: System.Drawing.Imaging
  isExternal: false
  name: ColorMatrixFlag
  nameWithType: ColorMatrixFlag
  fullName: System.Drawing.Imaging.ColorMatrixFlag
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag,ColorAdjustType)
  nameWithType: ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag,ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetColorMatrix(ColorMatrix)
  nameWithType: ImageAttributes.SetColorMatrix(ColorMatrix)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(ColorMatrix)
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetColorMatrix(ColorMatrix,ColorMatrixFlag)
  nameWithType: ImageAttributes.SetColorMatrix(ColorMatrix,ColorMatrixFlag)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(ColorMatrix,ColorMatrixFlag)
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetColorMatrix(ColorMatrix,ColorMatrixFlag,ColorAdjustType)
  nameWithType: ImageAttributes.SetColorMatrix(ColorMatrix,ColorMatrixFlag,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(ColorMatrix,ColorMatrixFlag,ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.SetGamma(System.Single)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetGamma(Single)
  nameWithType: ImageAttributes.SetGamma(Single)
  fullName: System.Drawing.Imaging.ImageAttributes.SetGamma(Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Drawing.Imaging.ImageAttributes.SetGamma(System.Single,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetGamma(Single,ColorAdjustType)
  nameWithType: ImageAttributes.SetGamma(Single,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetGamma(Single,ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.SetNoOp
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetNoOp()
  nameWithType: ImageAttributes.SetNoOp()
  fullName: System.Drawing.Imaging.ImageAttributes.SetNoOp()
- uid: System.Drawing.Imaging.ImageAttributes.SetNoOp(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetNoOp(ColorAdjustType)
  nameWithType: ImageAttributes.SetNoOp(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetNoOp(ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetOutputChannel(ColorChannelFlag)
  nameWithType: ImageAttributes.SetOutputChannel(ColorChannelFlag)
  fullName: System.Drawing.Imaging.ImageAttributes.SetOutputChannel(ColorChannelFlag)
- uid: System.Drawing.Imaging.ColorChannelFlag
  parent: System.Drawing.Imaging
  isExternal: false
  name: ColorChannelFlag
  nameWithType: ColorChannelFlag
  fullName: System.Drawing.Imaging.ColorChannelFlag
- uid: System.Drawing.Imaging.ImageAttributes.SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetOutputChannel(ColorChannelFlag,ColorAdjustType)
  nameWithType: ImageAttributes.SetOutputChannel(ColorChannelFlag,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetOutputChannel(ColorChannelFlag,ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(System.String)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetOutputChannelColorProfile(String)
  nameWithType: ImageAttributes.SetOutputChannelColorProfile(String)
  fullName: System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(System.String,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetOutputChannelColorProfile(String,ColorAdjustType)
  nameWithType: ImageAttributes.SetOutputChannelColorProfile(String,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(String,ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.SetRemapTable(System.Drawing.Imaging.ColorMap[])
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetRemapTable(ColorMap[])
  nameWithType: ImageAttributes.SetRemapTable(ColorMap[])
  fullName: System.Drawing.Imaging.ImageAttributes.SetRemapTable(ColorMap[])
- uid: System.Drawing.Imaging.ImageAttributes.SetRemapTable(System.Drawing.Imaging.ColorMap[],System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetRemapTable(ColorMap[],ColorAdjustType)
  nameWithType: ImageAttributes.SetRemapTable(ColorMap[],ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetRemapTable(ColorMap[],ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.SetThreshold(System.Single)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetThreshold(Single)
  nameWithType: ImageAttributes.SetThreshold(Single)
  fullName: System.Drawing.Imaging.ImageAttributes.SetThreshold(Single)
- uid: System.Drawing.Imaging.ImageAttributes.SetThreshold(System.Single,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetThreshold(Single,ColorAdjustType)
  nameWithType: ImageAttributes.SetThreshold(Single,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetThreshold(Single,ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetWrapMode(WrapMode)
  nameWithType: ImageAttributes.SetWrapMode(WrapMode)
  fullName: System.Drawing.Imaging.ImageAttributes.SetWrapMode(WrapMode)
- uid: System.Drawing.Drawing2D.WrapMode
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: WrapMode
  nameWithType: WrapMode
  fullName: System.Drawing.Drawing2D.WrapMode
- uid: System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetWrapMode(WrapMode,Color)
  nameWithType: ImageAttributes.SetWrapMode(WrapMode,Color)
  fullName: System.Drawing.Imaging.ImageAttributes.SetWrapMode(WrapMode,Color)
- uid: System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color,System.Boolean)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetWrapMode(WrapMode,Color,Boolean)
  nameWithType: ImageAttributes.SetWrapMode(WrapMode,Color,Boolean)
  fullName: System.Drawing.Imaging.ImageAttributes.SetWrapMode(WrapMode,Color,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Drawing.Imaging.ImageAttributes.#ctor*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ImageAttributes
  nameWithType: ImageAttributes.ImageAttributes
- uid: System.Drawing.Imaging.ImageAttributes.ClearBrushRemapTable*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearBrushRemapTable
  nameWithType: ImageAttributes.ClearBrushRemapTable
- uid: System.Drawing.Imaging.ImageAttributes.ClearColorKey*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearColorKey
  nameWithType: ImageAttributes.ClearColorKey
- uid: System.Drawing.Imaging.ImageAttributes.ClearColorMatrix*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearColorMatrix
  nameWithType: ImageAttributes.ClearColorMatrix
- uid: System.Drawing.Imaging.ImageAttributes.ClearGamma*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearGamma
  nameWithType: ImageAttributes.ClearGamma
- uid: System.Drawing.Imaging.ImageAttributes.ClearNoOp*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearNoOp
  nameWithType: ImageAttributes.ClearNoOp
- uid: System.Drawing.Imaging.ImageAttributes.ClearOutputChannel*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearOutputChannel
  nameWithType: ImageAttributes.ClearOutputChannel
- uid: System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearOutputChannelColorProfile
  nameWithType: ImageAttributes.ClearOutputChannelColorProfile
- uid: System.Drawing.Imaging.ImageAttributes.ClearRemapTable*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearRemapTable
  nameWithType: ImageAttributes.ClearRemapTable
- uid: System.Drawing.Imaging.ImageAttributes.ClearThreshold*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearThreshold
  nameWithType: ImageAttributes.ClearThreshold
- uid: System.Drawing.Imaging.ImageAttributes.Clone*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: Clone
  nameWithType: ImageAttributes.Clone
- uid: System.Drawing.Imaging.ImageAttributes.Dispose*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: Dispose
  nameWithType: ImageAttributes.Dispose
- uid: System.Drawing.Imaging.ImageAttributes.Finalize*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: Finalize
  nameWithType: ImageAttributes.Finalize
- uid: System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: GetAdjustedPalette
  nameWithType: ImageAttributes.GetAdjustedPalette
- uid: System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetBrushRemapTable
  nameWithType: ImageAttributes.SetBrushRemapTable
- uid: System.Drawing.Imaging.ImageAttributes.SetColorKey*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetColorKey
  nameWithType: ImageAttributes.SetColorKey
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrices*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetColorMatrices
  nameWithType: ImageAttributes.SetColorMatrices
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrix*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetColorMatrix
  nameWithType: ImageAttributes.SetColorMatrix
- uid: System.Drawing.Imaging.ImageAttributes.SetGamma*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetGamma
  nameWithType: ImageAttributes.SetGamma
- uid: System.Drawing.Imaging.ImageAttributes.SetNoOp*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetNoOp
  nameWithType: ImageAttributes.SetNoOp
- uid: System.Drawing.Imaging.ImageAttributes.SetOutputChannel*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetOutputChannel
  nameWithType: ImageAttributes.SetOutputChannel
- uid: System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetOutputChannelColorProfile
  nameWithType: ImageAttributes.SetOutputChannelColorProfile
- uid: System.Drawing.Imaging.ImageAttributes.SetRemapTable*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetRemapTable
  nameWithType: ImageAttributes.SetRemapTable
- uid: System.Drawing.Imaging.ImageAttributes.SetThreshold*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetThreshold
  nameWithType: ImageAttributes.SetThreshold
- uid: System.Drawing.Imaging.ImageAttributes.SetWrapMode*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetWrapMode
  nameWithType: ImageAttributes.SetWrapMode
