### YamlMime:ManagedReference
items:
- uid: System.Security.SecureString
  id: SecureString
  children:
  - System.Security.SecureString.#ctor
  - System.Security.SecureString.#ctor(System.Char*,System.Int32)
  - System.Security.SecureString.AppendChar(System.Char)
  - System.Security.SecureString.Clear
  - System.Security.SecureString.Copy
  - System.Security.SecureString.Dispose
  - System.Security.SecureString.InsertAt(System.Int32,System.Char)
  - System.Security.SecureString.IsReadOnly
  - System.Security.SecureString.Length
  - System.Security.SecureString.MakeReadOnly
  - System.Security.SecureString.RemoveAt(System.Int32)
  - System.Security.SecureString.SetAt(System.Int32,System.Char)
  langs:
  - csharp
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
  type: Class
  summary: "表示文字應該保持機密，例如藉由從不再需要時的電腦記憶體刪除。 這個類別無法被繼承。"
  remarks: "SecureString 是安全性的字串類型，提供考量。 它會嘗試避免以純文字格式的程序記憶體中儲存敏感性字串。  (如限制，不過，請參閱[安全是 SecureString？](#HowSecure) > 一節。)SecureString 執行個體的值會自動施以保護使用初始化執行個體時，基礎的平台所支援的機制，或修改值時。 您的應用程式可以呈現執行個體的不可變，並避免其他修改叫用<xref:System.Security.SecureString.MakeReadOnly%2A>方法。</xref:System.Security.SecureString.MakeReadOnly%2A>       SecureString 執行個體的長度上限為 65,536 個字元。      > [!IMPORTANT] > 這個型別實作<xref:System.IDisposable>介面。</xref:System.IDisposable> 當您完成使用類型的執行個體時，您應該會處置它直接或間接。 若要直接處置的類型，呼叫其<xref:System.IDisposable.Dispose%2A>方法中的`try` / `catch`區塊。</xref:System.IDisposable.Dispose%2A> 若要為其配置間接，使用語言建構例如`using`（C# 中） 或`Using`（在 Visual Basic)。 如需詳細資訊，請參閱中的 「 使用物件的實作 IDisposable 」 一節<xref:System.IDisposable>介面 > 主題。</xref:System.IDisposable>       SecureString 類別和其成員不是為 COM 可見。 如需詳細資訊，請參閱<xref:System.Runtime.InteropServices.ComVisibleAttribute>.</xref:System.Runtime.InteropServices.ComVisibleAttribute>       本章節內容︰ [vs 的字串。SecureString](#vsString)[SecureString 作業](#Ops)[SecureString 和 interop](#interop)[安全是 SecureString 嗎？               ](#HowSecure)      <a name=&quot;vsString&quot;></a># # 字串與 SecureString 的執行個體<xref:System.String?displayProperty=fullName>類別會是不變，而且不再需要時，無法以程式設計方式排定進行記憶體回收; 亦即，執行個體是唯讀後建立，而且不可能預測時的執行個體將會從電腦記憶體刪除。</xref:System.String?displayProperty=fullName> 因為<xref:System.String?displayProperty=fullName>執行個體是不變，看似修改現有的執行個體的作業實際建立一份來操作。</xref:System.String?displayProperty=fullName> 因此，如果<xref:System.String>物件包含密碼、 信用卡號碼或個人資料等機密資訊，因為您的應用程式無法從電腦記憶體刪除資料使用之後，可能會洩漏資訊的風險。</xref:System.String>       SecureString 物件是類似於<xref:System.String>物件，因為它具有文字值。</xref:System.String> 不過，SecureString 物件已釘選在記憶體中，值可能會使用保護機制，例如，可以修改基礎作業系統所提供的加密，直到您的應用程式將它標記為唯讀狀態，以及可以從電腦記憶體刪除是藉由應用程式呼叫<xref:System.Security.SecureString.Dispose%2A>方法或.NET Framework 記憶體回收行程。</xref:System.Security.SecureString.Dispose%2A>       如需 SecureString 類別的限制的討論，請參閱[安全是 SecureString？](#HowSecure) > 一節。       [回到頁首](#top)<a name=&quot;Ops&quot;> </a> # # SecureString operations SecureString 類別包含成員，可讓您執行下列動作︰ SecureString 物件具現化 SecureString 物件呼叫其無參數建構函式來具現化。             加入字元 SecureString 物件您可以一次加入單一字元，SecureString 物件，藉由呼叫其<xref:System.Security.SecureString.AppendChar%2A>或<xref:System.Security.SecureString.InsertAt%2A>方法。</xref:System.Security.SecureString.InsertAt%2A> </xref:System.Security.SecureString.AppendChar%2A>      > [!IMPORTANT] > SecureString 物件永遠不應該建構<xref:System.String>，因為機密資料已經受限於記憶體持續性的後果不可變的<xref:System.String>類別。</xref:System.String> </xref:System.String> 建構 SecureString 物件的最佳方式是從字元-一次 unmanaged 的來源，例如<xref:System.Console.ReadKey%2A?displayProperty=fullName>方法。</xref:System.Console.ReadKey%2A?displayProperty=fullName>       您可以藉由呼叫來取代個別字元的移除字元 SecureString 物件<xref:System.Security.SecureString.SetAt%2A>方法，藉由呼叫移除個別字元<xref:System.Security.SecureString.RemoveAt%2A>方法或移除所有的字元從 SecureString 執行個體呼叫<xref:System.Security.SecureString.Clear%2A>方法。</xref:System.Security.SecureString.Clear%2A> </xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.SetAt%2A>       將 SecureString 物件為唯讀之後您已經定義 SecureString 物件所代表的字串，您會呼叫其<xref:System.Security.SecureString.MakeReadOnly%2A>方法，以讓唯讀的字串。</xref:System.Security.SecureString.MakeReadOnly%2A>       SecureString 物件 SecureString 類別取得的資訊已經提供字串的相關資訊的只有兩個成員︰ 其<xref:System.Security.SecureString.Length%2A>屬性，指出 UTF16 編碼字碼單位的字串; 字串數目而<xref:System.Security.SecureString.IsReadOnly%2A>，方法，指出執行個體是否為唯讀。</xref:System.Security.SecureString.IsReadOnly%2A> </xref:System.Security.SecureString.Length%2A>       釋放的記憶體配置到 SecureString 執行個體因為 SecureString 實作<xref:System.IDisposable>介面，您藉由呼叫釋放其記憶體<xref:System.Security.SecureString.Dispose%2A>方法。</xref:System.Security.SecureString.Dispose%2A> </xref:System.IDisposable>       SecureString 類別具有檢查、 比較或轉換 SecureString 值的任何成員。 如果沒有這類成員可協助防止意外或惡意公開的執行個體的值。 使用的適當成員<xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName>類別，例如<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A>方法，來處理 SecureString 物件的值。</xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> </xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName>       .NET Framework 類別庫通常使用 SecureString 執行個體，以下列方式:-若要透過使用提供的密碼資訊至處理序<xref:System.Diagnostics.ProcessStartInfo>結構，或藉由呼叫的多載<xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName>SecureString 類型參數的方法。</xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName> </xref:System.Diagnostics.ProcessStartInfo>      藉由呼叫提供網路密碼資訊<xref:System.Net.NetworkCredential>類別建構函式具有參數的型別 SecureString，或是使用<xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName>屬性。</xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName> </xref:System.Net.NetworkCredential>      藉由呼叫提供的 SQL Server 驗證密碼資訊<xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName>建構函式或擷取的值<xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName>屬性。</xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName> </xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName>      -若要將字串傳遞至 unmanaged 程式碼。 如需詳細資訊，請參閱[SecureString 和 interop](#interop) > 一節。       [回到頁首](#top)<a name=&quot;interop&quot;> </a> # # SecureString 和 interop 因為作業系統並不直接支援 SecureString，您必須轉換 SecureString 物件的值為必要的字串類型之前將字串傳遞至原生方法。        <xref:System.Runtime.InteropServices.Marshal>類別有五個方法，執行這項操作:-<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>將 SecureString 字串到 COM 所辨識的二進位字串 (BSTR)、</xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal>      -<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>和<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>，這將 SecureString 字串值複製到 unmanaged 記憶體中的 ANSI 字串。</xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>      -<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>和<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>，這將 SecureString 字串值複製到 unmanaged 記憶體中的 Unicode 字串。</xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>       每一種方法在 unmanaged 記憶體中建立純文字字串。 它是開發人員會清空，並釋放該記憶體，只要不再需要的責任。 字串轉換和記憶體配置方法的每個已對應的方法將會清空，並釋放配置的記憶體: |配置和轉換方法 |零，並釋放方法 |  |--------------------------------------|--------------------------|  |<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName>|  |<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName>|  |<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName>|  |<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName>|  |<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName>|      [Back to top](#top)      <a name=&quot;HowSecure&quot;></a>    ## How secure is SecureString?</xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>    SecureString 執行個體正確建立時提供更多的資料保護，比<xref:System.String>.</xref:System.String> 當建立字串字元-一次來源<xref:System.String>而 SecureString 建立只要單一執行個體，在記憶體中，建立多個中繼。</xref:System.String>  記憶體回收<xref:System.String>物件不具決定性。</xref:System.String> 此外，因為其記憶體無法釘選，記憶體回收行程將會產生多份<xref:System.String>值時移動和壓縮記憶體。</xref:System.String> 相較之下，已釘選為 SecureString 物件配置的記憶體，並可以釋放該記憶體，藉由呼叫<xref:System.Security.SecureString.Dispose%2A>方法。</xref:System.Security.SecureString.Dispose%2A>       雖然 SecureString 執行個體中儲存的資料是詳細資料儲存在<xref:System.String>執行個體，有一些重要限制如何安全 SecureString 執行個體依原樣</xref:System.String>比的安全 這些活動包括︰ 平台上的 Windows 作業系統，SecureString 執行個體的內部字元陣列的內容已加密。 不過，是否因為遺漏應用程式開發介面或金鑰管理問題，加密並不適用於所有平台。 因為這個緣故，SecureString 可在桌面上 (僅限 Windows)，而不是在.NET Core。       如果 SecureString 實作是能夠充分利用的加密，指派給執行個體可能會暴露在不同時間 SecureString 的純文字的持續時間偶數:-因為 Windows 不提供的安全字串實作在作業系統層級，這是.NET Framework 仍具有將安全字串值轉換為它的純文字格式表示，才能使用。      -只要安全字串的值修改方法例如<xref:System.Security.SecureString.AppendChar%2A>或<xref:System.Security.SecureString.RemoveAt%2A>，必須解密 （亦即，已轉換的回純文字）、 加以修改，因此再加密一次。</xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.AppendChar%2A>      -如果 interop 呼叫中使用的安全字串，它必須轉換為 ANSI 字串、 Unicode 字串，或二進位字串 (BSTR)。 如需詳細資訊，請參閱[SecureString 和 interop](#interop) > 一節。       SecureString 執行個體的值會公開其時間間隔只會縮短相較於<xref:System.String>類別。</xref:System.String>       與使用方式的儲存體較常見地，SecureString 類別會定義儲存機制應該受保護或保持機密的字串值。 不過，.NET Framework 本身以外沒有使用量機制支援 SecureString。 這表示安全字串，必須轉換成可用的格式 （通常是純文字形式），其目標，可以辨識和解密和轉換必須出現在使用者空間中。       整體來說，SecureString 比<xref:System.String>因為它會限制公開敏感的字串資料。</xref:System.String> 不過，這些字串可能仍然會公開給任何處理程序或具有未經處理的記憶體，例如主機電腦、 處理序傾印或使用者可檢視交換檔上執行的惡意程序的存取權的作業。 除了使用 SecureString 保護的密碼，建議的替代做法是使用儲存認證時，在程序之外的不透明控制代碼。       [回到頁首](#top)"
  example:
  - "The following example demonstrates how to use a SecureString to secure a user’s password for use as a credential to start a new process.  \n  \n [!code-vb[System.Security.SecureString.Ctor#4](~/add/codesnippet/visualbasic/t-system.security.secure_1.vb)]\n [!code-cs[System.Security.SecureString.Ctor#4](~/add/codesnippet/csharp/t-system.security.secure_1.cs)]"
  syntax:
    content: 'public sealed class SecureString : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.SecureString.#ctor
  id: '#ctor'
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SecureString()
  nameWithType: SecureString.SecureString()
  fullName: System.Security.SecureString.SecureString()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "初始化的新執行個體<xref href=&quot;System.Security.SecureString&quot;></xref>類別。"
  remarks: ''
  example:
  - "The following example uses the default (or parameterless) constructor to instantiate a new <xref:System.Security.SecureString> object. It then calls the <xref:System.Security.SecureString.AppendChar%2A> method to add an array of characters to it.  \n  \n [!code-cs[System.Security.SecureString.Ctor#2](~/add/codesnippet/csharp/m-system.security.secure_7_1.cs)]\n [!code-cpp[System.Security.SecureString.Ctor#2](~/add/codesnippet/cpp/m-system.security.secure_7_1.cpp)]\n [!code-vb[System.Security.SecureString.Ctor#2](~/add/codesnippet/visualbasic/m-system.security.secure_7_1.vb)]  \n  \n The following example creates a <xref:System.Security.SecureString> object from the value of a <xref:System.String> object.  \n  \n [!code-vb[System.Security.SecureString.Ctor#3](~/add/codesnippet/visualbasic/m-system.security.secure_7_2.vb)]\n [!code-cpp[System.Security.SecureString.Ctor#3](~/add/codesnippet/cpp/m-system.security.secure_7_2.cpp)]\n [!code-cs[System.Security.SecureString.Ctor#3](~/add/codesnippet/csharp/m-system.security.secure_7_2.cs)]"
  syntax:
    content: public SecureString ();
    parameters: []
  overload: System.Security.SecureString.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "保護或解除保護這個執行個體的值時發生錯誤。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "這個平台上不支援此作業。"
  platform:
  - net462
- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)
  id: '#ctor(System.Char*,System.Int32)'
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SecureString(Char*,Int32)
  nameWithType: SecureString.SecureString(Char*,Int32)
  fullName: System.Security.SecureString.SecureString(Char*,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "初始化的新執行個體<xref href=&quot;System.Security.SecureString&quot;></xref>類別的子陣列&lt;xref:System.Char?displayProperty=fullName&gt;物件。       這個建構函式不符合 CLS 標準。 符合 CLS 標準的替代方式是&lt;xref:System.Security.SecureString.%23ctor?displayProperty=fullName&gt;。"
  remarks: "這個建構函式會初始化新<xref:System.Security.SecureString>物件中的字元數`value`所指定`length`; 執行個體的值會加密。</xref:System.Security.SecureString>       在 C# 中，只在不安全的程式碼內容中定義這個建構函式。"
  example:
  - "The following example instantiates a new <xref:System.Security.SecureString> object by passing its constructor a pointer to a character array.  \n  \n [!code-cpp[System.Security.SecureString.Ctor2#1](~/add/codesnippet/cpp/m-system.security.secure_3_1.cpp)]\n [!code-cs[System.Security.SecureString.Ctor2#1](~/add/codesnippet/csharp/securestringctor/ctor1.cs#1)]"
  syntax:
    content: public SecureString (char* value, int length);
    parameters:
    - id: value
      type: System.Char*
      description: "陣列的指標&lt;xref:System.Char?displayProperty=fullName&gt;物件。"
    - id: length
      type: System.Int32
      description: "元素數`value`来包含在新的執行個體中。"
  overload: System.Security.SecureString.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>length</code>小於零或大於 65,536。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "保護或解除保護這個安全字串的值時發生錯誤。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "這個平台上不支援此作業。"
  platform:
  - net462
- uid: System.Security.SecureString.AppendChar(System.Char)
  id: AppendChar(System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: AppendChar(Char)
  nameWithType: SecureString.AppendChar(Char)
  fullName: System.Security.SecureString.AppendChar(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "將字元附加至目前安全字串的結尾。"
  remarks: "如果實作會使用保護機制，例如加密，如果有的話，這個安全字串的值是未受保護;`c`附加; 然後安全字串的新值並在重新保護。"
  example:
  - "The following example demonstrates how the AppendChar, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_6_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_6_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_6_1.vb)]  \n  \n The following example demonstrates how the AppendChar and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_6_2.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_6_2.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_6_2.cs)]"
  syntax:
    content: public void AppendChar (char c);
    parameters:
    - id: c
      type: System.Char
      description: "要附加至這個安全字串的字元。"
  overload: System.Security.SecureString.AppendChar*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已經處置這個安全字串。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "這個安全字串為唯讀。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "執行此作業會使這個安全字串的長度大於 65,536 個字元。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "保護或解除保護這個安全字串的值時發生錯誤。"
  platform:
  - net462
- uid: System.Security.SecureString.Clear
  id: Clear
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Clear()
  nameWithType: SecureString.Clear()
  fullName: System.Security.SecureString.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "刪除目前安全字串的值。"
  remarks: "電腦記憶體，其中包含這個安全字串的值為&0;，則這個安全字串的值的長度設定為零。"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and Clear methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_5_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_5_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_5_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.SecureString.Clear*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已經處置這個安全字串。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "這個安全字串為唯讀。"
  platform:
  - net462
- uid: System.Security.SecureString.Copy
  id: Copy
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Copy()
  nameWithType: SecureString.Copy()
  fullName: System.Security.SecureString.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "建立目前安全字串的複本。"
  remarks: "如果執行個體<xref:System.Security.SecureString>是標示為唯讀，該執行個體的複本將不處於唯讀模式。</xref:System.Security.SecureString>"
  syntax:
    content: public System.Security.SecureString Copy ();
    parameters: []
    return:
      type: System.Security.SecureString
      description: "這個安全字串的複本。"
  overload: System.Security.SecureString.Copy*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已經處置這個安全字串。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "保護或解除保護這個安全字串的值時發生錯誤。"
  platform:
  - net462
- uid: System.Security.SecureString.Dispose
  id: Dispose
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Dispose()
  nameWithType: SecureString.Dispose()
  fullName: System.Security.SecureString.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "目前所使用的資源全部釋出<xref href=&quot;System.Security.SecureString&quot;></xref>物件。"
  remarks: "Dispose 方法寫入配置的記憶體，其中包含這個值的二進位零<xref:System.Security.SecureString>物件，然後釋放配置的記憶體。</xref:System.Security.SecureString>       如需詳細資訊，請參閱[回收](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.SecureString.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)
  id: InsertAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: InsertAt(Int32,Char)
  nameWithType: SecureString.InsertAt(Int32,Char)
  fullName: System.Security.SecureString.InsertAt(Int32,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "在這個安全字串中位於指定的索引位置插入的字元。"
  remarks: "索引以零為起始。這個安全字串中的第一個字元是在索引位置為零。       如果實作會使用保護機制，例如加密，如果有的話，安全字串的值是未受保護;`c`插入指定的索引位置，則新值並在重新保護。 InsertAt 方法就會產生相同的結果<xref:System.Security.SecureString.AppendChar%2A>方法，這個方法會將安全字串的結尾插入字元，如果`index`InsertAt 的參數設定為這個執行個體的長度。</xref:System.Security.SecureString.AppendChar%2A>"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, InsertAt, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_0_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_0_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_0_1.vb)]"
  syntax:
    content: public void InsertAt (int index, char c);
    parameters:
    - id: index
      type: System.Int32
      description: "索引位置參數`c`插入。"
    - id: c
      type: System.Char
      description: "要插入的字元。"
  overload: System.Security.SecureString.InsertAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已經處置這個安全字串。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "這個安全字串為唯讀。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>小於零或大於這個安全字串的長度。       -或者-執行此作業會使這個安全字串的長度大於 65,536 個字元。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "保護或解除保護這個安全字串的值時發生錯誤。"
  platform:
  - net462
- uid: System.Security.SecureString.IsReadOnly
  id: IsReadOnly
  parent: System.Security.SecureString
  langs:
  - csharp
  name: IsReadOnly()
  nameWithType: SecureString.IsReadOnly()
  fullName: System.Security.SecureString.IsReadOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "指出是否這個安全字串標示為唯讀。"
  remarks: "執行個體<xref:System.Security.SecureString>已標示為唯讀，<xref:System.Security.SecureString.MakeReadOnly%2A>方法中，任何嘗試修改值的執行個體則會擲回<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException></xref:System.Security.SecureString.MakeReadOnly%2A></xref:System.Security.SecureString>之後 使用 IsReadOnly 方法來測試是否<xref:System.Security.SecureString>為唯讀，然後再嘗試將修改它。</xref:System.Security.SecureString>"
  syntax:
    content: public bool IsReadOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個安全字串標示為唯讀。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.SecureString.IsReadOnly*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已經處置這個安全字串。"
  platform:
  - net462
- uid: System.Security.SecureString.Length
  id: Length
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Length
  nameWithType: SecureString.Length
  fullName: System.Security.SecureString.Length
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "取得目前安全字串中的字元數。"
  remarks: "Length 屬性傳回的數目<xref:System.Char>這個執行個體中的物件、 不是 Unicode 字元的數目。</xref:System.Char> Unicode 字元可能會表示由多個<xref:System.Char>物件。</xref:System.Char>       最大長度<xref:System.Security.SecureString>執行個體為 65,536 個字元。</xref:System.Security.SecureString>"
  syntax:
    content: public int Length { get; }
    return:
      type: System.Int32
      description: "數目&lt;xref:System.Char?displayProperty=fullName&gt;物件在這個安全字串。"
  overload: System.Security.SecureString.Length*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已經處置這個安全字串。"
  platform:
  - net462
- uid: System.Security.SecureString.MakeReadOnly
  id: MakeReadOnly
  parent: System.Security.SecureString
  langs:
  - csharp
  name: MakeReadOnly()
  nameWithType: SecureString.MakeReadOnly()
  fullName: System.Security.SecureString.MakeReadOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "使這個安全字串的文字值成為唯讀。"
  remarks: "初始化的執行個體的文字值<xref:System.Security.SecureString>類別<xref:System.Security.SecureString.%23ctor%2A>建構函式，並修改此值與<xref:System.Security.SecureString.Clear%2A>， <xref:System.Security.SecureString.RemoveAt%2A>， <xref:System.Security.SecureString.SetAt%2A>， <xref:System.Security.SecureString.InsertAt%2A>，和<xref:System.Security.SecureString.AppendChar%2A>方法。</xref:System.Security.SecureString.AppendChar%2A> </xref:System.Security.SecureString.InsertAt%2A> </xref:System.Security.SecureString.SetAt%2A> </xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.Clear%2A> </xref:System.Security.SecureString.%23ctor%2A> </xref:System.Security.SecureString>       在進行最後的修改之後，使用 MakeReadOnly 方法讓執行個體的值不可變 （唯讀）。 值會標示為唯讀之後，修改任何進一步嘗試就會擲回<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException>       叫用 MakeReadOnly 的效果是永久性因為<xref:System.Security.SecureString>類別會提供任何方法來執行安全字串可修改，然後再次。</xref:System.Security.SecureString> 使用<xref:System.Security.SecureString.IsReadOnly%2A>方法來測試執行個體是否<xref:System.Security.SecureString>處於唯讀狀態。</xref:System.Security.SecureString> </xref:System.Security.SecureString.IsReadOnly%2A>"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password. After the password is collected, it is made read-only.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_1_1.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_1_1.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_1_1.cs)]"
  syntax:
    content: public void MakeReadOnly ();
    parameters: []
  overload: System.Security.SecureString.MakeReadOnly*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已經處置這個安全字串。"
  platform:
  - net462
- uid: System.Security.SecureString.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SecureString.RemoveAt(Int32)
  fullName: System.Security.SecureString.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "從這個安全字串中移除指定的索引位置處的字元。"
  remarks: "索引以零為起始。這個執行個體中的第一個字元是在索引位置為零。       如果實作會使用保護機制，例如加密，如果有的話，這個安全字串的值是未受保護;已移除指定的索引位置處的字元;然後，新值並在重新保護。"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, RemoveAt, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_2_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_2_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_2_1.vb)]  \n  \n The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and RemoveAt methods can be used to collect the characters in a password.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_2_2.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_2_2.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_2_2.cs)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "這個安全字串中字元的索引位置。"
  overload: System.Security.SecureString.RemoveAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已經處置這個安全字串。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "這個安全字串為唯讀。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>小於零，或大於或等於這個安全字串的長度。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "保護或解除保護這個安全字串的值時發生錯誤。"
  platform:
  - net462
- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)
  id: SetAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SetAt(Int32,Char)
  nameWithType: SecureString.SetAt(Int32,Char)
  fullName: System.Security.SecureString.SetAt(Int32,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "以另一個字元，取代指定的索引位置的現有字元。"
  remarks: "索引以零為起始。這個執行個體中的第一個字元是在索引位置為零。       如果實作會使用保護機制，例如加密，如果有的話，安全字串的值是未受保護;`c`指派給指定的索引位置，則新值並在重新保護。"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, SetAt, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_4_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_4_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_4_1.vb)]"
  syntax:
    content: public void SetAt (int index, char c);
    parameters:
    - id: index
      type: System.Int32
      description: "這個安全字串中的 現有字元的索引位置"
    - id: c
      type: System.Char
      description: "字元會取代現有的字元。"
  overload: System.Security.SecureString.SetAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已經處置這個安全字串。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "這個安全字串為唯讀。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>小於零，或大於或等於這個安全字串的長度。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "保護或解除保護這個安全字串的值時發生錯誤。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.SecureString.#ctor
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString()
  nameWithType: SecureString.SecureString()
  fullName: System.Security.SecureString.SecureString()
- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString(Char*,Int32)
  nameWithType: SecureString.SecureString(Char*,Int32)
  fullName: System.Security.SecureString.SecureString(Char*,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.SecureString.AppendChar(System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: AppendChar(Char)
  nameWithType: SecureString.AppendChar(Char)
  fullName: System.Security.SecureString.AppendChar(Char)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Security.SecureString.Clear
  parent: System.Security.SecureString
  isExternal: false
  name: Clear()
  nameWithType: SecureString.Clear()
  fullName: System.Security.SecureString.Clear()
- uid: System.Security.SecureString.Copy
  parent: System.Security.SecureString
  isExternal: false
  name: Copy()
  nameWithType: SecureString.Copy()
  fullName: System.Security.SecureString.Copy()
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Security.SecureString.Dispose
  parent: System.Security.SecureString
  isExternal: false
  name: Dispose()
  nameWithType: SecureString.Dispose()
  fullName: System.Security.SecureString.Dispose()
- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: InsertAt(Int32,Char)
  nameWithType: SecureString.InsertAt(Int32,Char)
  fullName: System.Security.SecureString.InsertAt(Int32,Char)
- uid: System.Security.SecureString.IsReadOnly
  parent: System.Security.SecureString
  isExternal: false
  name: IsReadOnly()
  nameWithType: SecureString.IsReadOnly()
  fullName: System.Security.SecureString.IsReadOnly()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.SecureString.Length
  parent: System.Security.SecureString
  isExternal: false
  name: Length
  nameWithType: SecureString.Length
  fullName: System.Security.SecureString.Length
- uid: System.Security.SecureString.MakeReadOnly
  parent: System.Security.SecureString
  isExternal: false
  name: MakeReadOnly()
  nameWithType: SecureString.MakeReadOnly()
  fullName: System.Security.SecureString.MakeReadOnly()
- uid: System.Security.SecureString.RemoveAt(System.Int32)
  parent: System.Security.SecureString
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SecureString.RemoveAt(Int32)
  fullName: System.Security.SecureString.RemoveAt(Int32)
- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: SetAt(Int32,Char)
  nameWithType: SecureString.SetAt(Int32,Char)
  fullName: System.Security.SecureString.SetAt(Int32,Char)
- uid: System.Security.SecureString.#ctor*
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString
  nameWithType: SecureString.SecureString
- uid: System.Security.SecureString.AppendChar*
  parent: System.Security.SecureString
  isExternal: false
  name: AppendChar
  nameWithType: SecureString.AppendChar
- uid: System.Security.SecureString.Clear*
  parent: System.Security.SecureString
  isExternal: false
  name: Clear
  nameWithType: SecureString.Clear
- uid: System.Security.SecureString.Copy*
  parent: System.Security.SecureString
  isExternal: false
  name: Copy
  nameWithType: SecureString.Copy
- uid: System.Security.SecureString.Dispose*
  parent: System.Security.SecureString
  isExternal: false
  name: Dispose
  nameWithType: SecureString.Dispose
- uid: System.Security.SecureString.InsertAt*
  parent: System.Security.SecureString
  isExternal: false
  name: InsertAt
  nameWithType: SecureString.InsertAt
- uid: System.Security.SecureString.IsReadOnly*
  parent: System.Security.SecureString
  isExternal: false
  name: IsReadOnly
  nameWithType: SecureString.IsReadOnly
- uid: System.Security.SecureString.Length*
  parent: System.Security.SecureString
  isExternal: false
  name: Length
  nameWithType: SecureString.Length
- uid: System.Security.SecureString.MakeReadOnly*
  parent: System.Security.SecureString
  isExternal: false
  name: MakeReadOnly
  nameWithType: SecureString.MakeReadOnly
- uid: System.Security.SecureString.RemoveAt*
  parent: System.Security.SecureString
  isExternal: false
  name: RemoveAt
  nameWithType: SecureString.RemoveAt
- uid: System.Security.SecureString.SetAt*
  parent: System.Security.SecureString
  isExternal: false
  name: SetAt
  nameWithType: SecureString.SetAt
