### YamlMime:ManagedReference
items:
- uid: System.Windows.LogicalTreeHelper
  id: LogicalTreeHelper
  children:
  - System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)
  - System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)
  - System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)
  - System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)
  - System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)
  - System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)
  langs:
  - csharp
  name: LogicalTreeHelper
  nameWithType: LogicalTreeHelper
  fullName: System.Windows.LogicalTreeHelper
  type: Class
  summary: "提供靜態 helper 方法來查詢邏輯樹狀結構中的物件。"
  remarks: "LogicalTreeHelper 類別提供方法，您可以使用傳回的物件或從子節點的邏輯樹狀結構內的特定物件的子集合。 不過，大部分的通常要執行的物件樹狀目錄作業也會公開類似的方法或屬性上<xref:System.Windows.FrameworkElement>或<xref:System.Windows.FrameworkContentElement>.</xref:System.Windows.FrameworkContentElement> </xref:System.Windows.FrameworkElement> 例如，請嘗試下列:-而不是呼叫靜態<xref:System.Windows.LogicalTreeHelper.GetChildren%2A>方法，傳回的列舉值的邏輯子物件，使用專用的集合，該物件的內容模型中公開。</xref:System.Windows.LogicalTreeHelper.GetChildren%2A> 支援內容模型的幾乎所有物件會都公開一些屬性，其中包含子物件的集合，並在該集合會提供直接集合介面的支援。      -而不是呼叫靜態<xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>方法，以取得所指定名稱︰ 呼叫的子物件<xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName>或<xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName>特定物件上的方法。</xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName> </xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> </xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>       LogicalTreeHelper 是最適合用於分析情況下您向上或向下到多個層級，則邏輯樹狀結構以遞迴方式在出差，想要用於檢查不同的父或子物件一致的方法。 在此情況下，您可能會存取的內容模型，混合，因此使用更多的內容模型特定的應用程式開發介面會太複雜。"
  syntax:
    content: public static class LogicalTreeHelper
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)
  id: BringIntoView(System.Windows.DependencyObject)
  parent: System.Windows.LogicalTreeHelper
  langs:
  - csharp
  name: BringIntoView(DependencyObject)
  nameWithType: LogicalTreeHelper.BringIntoView(DependencyObject)
  fullName: System.Windows.LogicalTreeHelper.BringIntoView(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "嘗試將要求的 UI 項目帶入檢視，並引發<xref href=&quot;System.Windows.FrameworkElement.RequestBringIntoView&quot;></xref>才能報告的結果在目標上的事件。"
  remarks: "呼叫執行個體方法通常較為方便<xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=fullName>或<xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=fullName>而不是此靜態公用程式方法。</xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=fullName> </xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=fullName> 執行個體方法的行為就相當於靜態方法的行為。       即使`current`UI 項目提供<xref:System.Windows.FrameworkContentElement>，產生的事件方法仍然相同<xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName>事件，以起始端<xref:System.Windows.FrameworkContentElement>可識別藉由檢查事件的事件資料。</xref:System.Windows.FrameworkContentElement> </xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName> </xref:System.Windows.FrameworkContentElement>"
  syntax:
    content: public static void BringIntoView (System.Windows.DependencyObject current);
    parameters:
    - id: current
      type: System.Windows.DependencyObject
      description: "使檢視成為 UI 項目。"
  overload: System.Windows.LogicalTreeHelper.BringIntoView*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)
  id: FindLogicalNode(System.Windows.DependencyObject,System.String)
  parent: System.Windows.LogicalTreeHelper
  langs:
  - csharp
  name: FindLogicalNode(DependencyObject,String)
  nameWithType: LogicalTreeHelper.FindLogicalNode(DependencyObject,String)
  fullName: System.Windows.LogicalTreeHelper.FindLogicalNode(DependencyObject,String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "嘗試尋找並傳回具有指定的名稱的物件。 搜尋會從指定的物件，然後持續至邏輯樹狀結構的子節點。"
  remarks: "方法<xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName>和<xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName>表面上類似於 FindLogicalNode，但運作方式為不同的邏輯:-FindLogicalNode 搜尋方向是往 （向下樹狀目錄）; 的子物件的搜尋方向`FindName`方法會向父物件 （向上樹狀目錄）。</xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> </xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName>      -`FindName`方法由 XAML 名稱範圍的概念。 使用`FindName`保證都只有一個該名稱的物件存在，因為 XAML namescopes 強制執行唯一性。 相反地，FindLogicalNode 忽略 XAML 名稱範圍，並可能會跨 XAML 名稱範圍界限，則進行搜尋。 因此，建議您不能保證唯一性的`elementName`名稱一旦越過界限。 如需 XAML 名稱範圍的詳細資訊，請參閱[WPF XAML Namescopes](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static System.Windows.DependencyObject FindLogicalNode (System.Windows.DependencyObject logicalTreeNode, string elementName);
    parameters:
    - id: logicalTreeNode
      type: System.Windows.DependencyObject
      description: "若要開始搜尋的物件。 這個物件必須<xref href=&quot;System.Windows.FrameworkElement&quot;></xref>或<xref href=&quot;System.Windows.FrameworkContentElement&quot;> </xref>。"
    - id: elementName
      type: System.String
      description: "要尋找之物件的名稱。"
    return:
      type: System.Windows.DependencyObject
      description: "找到相符的名稱，如果一個物件傳回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果邏輯樹狀結構中找不到任何相符的名稱。"
  overload: System.Windows.LogicalTreeHelper.FindLogicalNode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)
  id: GetChildren(System.Windows.DependencyObject)
  parent: System.Windows.LogicalTreeHelper
  langs:
  - csharp
  name: GetChildren(DependencyObject)
  nameWithType: LogicalTreeHelper.GetChildren(DependencyObject)
  fullName: System.Windows.LogicalTreeHelper.GetChildren(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "透過處理邏輯樹狀結構傳回指定之物件的立即子物件的集合。"
  remarks: "使用此簽章與協助程式方法主要是當您不確定是否`current`是<xref:System.Windows.FrameworkElement>或<xref:System.Windows.FrameworkContentElement>和也是不確定該物件的類別是否支援它自己的內容模型的集合。</xref:System.Windows.FrameworkContentElement> </xref:System.Windows.FrameworkElement> 如果您可以判斷您要查詢之物件的類型，請檢查您知道的特定內容屬性存在於該型別。 例如，如果您知道物件查詢的是<xref:System.Windows.Controls.ItemsControl>，檢查<xref:System.Windows.Controls.ItemsControl.Items%2A>屬性來取得強類型的集合，其中具有集合介面的支援，而且可能比更清楚的列舉值。</xref:System.Windows.Controls.ItemsControl.Items%2A> </xref:System.Windows.Controls.ItemsControl>"
  syntax:
    content: public static System.Collections.IEnumerable GetChildren (System.Windows.DependencyObject current);
    parameters:
    - id: current
      type: System.Windows.DependencyObject
      description: "要從中開始處理邏輯樹狀結構的物件。 這應該是<xref href=&quot;System.Windows.FrameworkElement&quot;></xref>或<xref href=&quot;System.Windows.FrameworkContentElement&quot;> </xref>。"
    return:
      type: System.Collections.IEnumerable
      description: "從指定之物件的邏輯樹狀結構的立即子物件的可列舉集合。"
  overload: System.Windows.LogicalTreeHelper.GetChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)
  id: GetChildren(System.Windows.FrameworkContentElement)
  parent: System.Windows.LogicalTreeHelper
  langs:
  - csharp
  name: GetChildren(FrameworkContentElement)
  nameWithType: LogicalTreeHelper.GetChildren(FrameworkContentElement)
  fullName: System.Windows.LogicalTreeHelper.GetChildren(FrameworkContentElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "傳回指定的立即子物件的集合<xref href=&quot;System.Windows.FrameworkContentElement&quot;></xref>透過處理邏輯樹狀結構。"
  syntax:
    content: public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkContentElement current);
    parameters:
    - id: current
      type: System.Windows.FrameworkContentElement
      description: "要從中開始處理邏輯樹狀結構的物件。"
    return:
      type: System.Collections.IEnumerable
      description: "從開始的立即子物件的可列舉集合<code> current </code>邏輯樹狀結構中。"
  overload: System.Windows.LogicalTreeHelper.GetChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)
  id: GetChildren(System.Windows.FrameworkElement)
  parent: System.Windows.LogicalTreeHelper
  langs:
  - csharp
  name: GetChildren(FrameworkElement)
  nameWithType: LogicalTreeHelper.GetChildren(FrameworkElement)
  fullName: System.Windows.LogicalTreeHelper.GetChildren(FrameworkElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "傳回指定的立即子物件的集合<xref href=&quot;System.Windows.FrameworkElement&quot;></xref>透過處理邏輯樹狀結構。"
  syntax:
    content: public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkElement current);
    parameters:
    - id: current
      type: System.Windows.FrameworkElement
      description: "要從中開始處理邏輯樹狀結構的物件。"
    return:
      type: System.Collections.IEnumerable
      description: "從開始的立即子物件的可列舉集合<code> current </code>邏輯樹狀結構中。"
  overload: System.Windows.LogicalTreeHelper.GetChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)
  id: GetParent(System.Windows.DependencyObject)
  parent: System.Windows.LogicalTreeHelper
  langs:
  - csharp
  name: GetParent(DependencyObject)
  nameWithType: LogicalTreeHelper.GetParent(DependencyObject)
  fullName: System.Windows.LogicalTreeHelper.GetParent(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "傳回指定之物件的父物件透過處理邏輯樹狀結構。"
  remarks: "這個方法是只包裝函式可取得適當的型別版本 (<xref:System.Windows.FrameworkElement>或<xref:System.Windows.FrameworkContentElement>) 的<xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=fullName>或<xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=fullName>屬性，則為，除非您無法判斷`current`類型，您可以改為檢查個別的執行個體的屬性。</xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=fullName> </xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=fullName> </xref:System.Windows.FrameworkContentElement> </xref:System.Windows.FrameworkElement>"
  syntax:
    content: public static System.Windows.DependencyObject GetParent (System.Windows.DependencyObject current);
    parameters:
    - id: current
      type: System.Windows.DependencyObject
      description: "要尋找的父物件的物件。 這應該是<xref href=&quot;System.Windows.FrameworkElement&quot;></xref>或<xref href=&quot;System.Windows.FrameworkContentElement&quot;> </xref>。"
    return:
      type: System.Windows.DependencyObject
      description: "要求的父物件。"
  overload: System.Windows.LogicalTreeHelper.GetParent*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: BringIntoView(DependencyObject)
  nameWithType: LogicalTreeHelper.BringIntoView(DependencyObject)
  fullName: System.Windows.LogicalTreeHelper.BringIntoView(DependencyObject)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: FindLogicalNode(DependencyObject,String)
  nameWithType: LogicalTreeHelper.FindLogicalNode(DependencyObject,String)
  fullName: System.Windows.LogicalTreeHelper.FindLogicalNode(DependencyObject,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: GetChildren(DependencyObject)
  nameWithType: LogicalTreeHelper.GetChildren(DependencyObject)
  fullName: System.Windows.LogicalTreeHelper.GetChildren(DependencyObject)
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: GetChildren(FrameworkContentElement)
  nameWithType: LogicalTreeHelper.GetChildren(FrameworkContentElement)
  fullName: System.Windows.LogicalTreeHelper.GetChildren(FrameworkContentElement)
- uid: System.Windows.FrameworkContentElement
  parent: System.Windows
  isExternal: false
  name: FrameworkContentElement
  nameWithType: FrameworkContentElement
  fullName: System.Windows.FrameworkContentElement
- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: GetChildren(FrameworkElement)
  nameWithType: LogicalTreeHelper.GetChildren(FrameworkElement)
  fullName: System.Windows.LogicalTreeHelper.GetChildren(FrameworkElement)
- uid: System.Windows.FrameworkElement
  parent: System.Windows
  isExternal: false
  name: FrameworkElement
  nameWithType: FrameworkElement
  fullName: System.Windows.FrameworkElement
- uid: System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: GetParent(DependencyObject)
  nameWithType: LogicalTreeHelper.GetParent(DependencyObject)
  fullName: System.Windows.LogicalTreeHelper.GetParent(DependencyObject)
- uid: System.Windows.LogicalTreeHelper.BringIntoView*
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: BringIntoView
  nameWithType: LogicalTreeHelper.BringIntoView
- uid: System.Windows.LogicalTreeHelper.FindLogicalNode*
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: FindLogicalNode
  nameWithType: LogicalTreeHelper.FindLogicalNode
- uid: System.Windows.LogicalTreeHelper.GetChildren*
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: GetChildren
  nameWithType: LogicalTreeHelper.GetChildren
- uid: System.Windows.LogicalTreeHelper.GetParent*
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: GetParent
  nameWithType: LogicalTreeHelper.GetParent
