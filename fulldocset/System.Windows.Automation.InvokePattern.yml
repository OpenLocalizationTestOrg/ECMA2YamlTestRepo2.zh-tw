### YamlMime:ManagedReference
items:
- uid: System.Windows.Automation.InvokePattern
  id: InvokePattern
  children:
  - System.Windows.Automation.InvokePattern.Invoke
  - System.Windows.Automation.InvokePattern.InvokedEvent
  - System.Windows.Automation.InvokePattern.Pattern
  langs:
  - csharp
  name: InvokePattern
  nameWithType: InvokePattern
  fullName: System.Windows.Automation.InvokePattern
  type: Class
  summary: "表示起始或執行單一明確動作並不會維護狀態啟動時的控制項。"
  remarks: "如果未透過其他控制項模式公開相同的行為，控制項將支援 InvokePattern。 例如，如果<xref:System.Windows.Automation.InvokePattern.Invoke%2A>在控制項上的方法會執行相同的動作<xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A>或<xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A>方法中，控制項將不支援 InvokePattern。</xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> </xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> </xref:System.Windows.Automation.InvokePattern.Invoke%2A>       [!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)]代表控制項，例如核取方塊和選項按鈕，維護狀態，元素可改為支援<xref:System.Windows.Automation.TogglePattern>或<xref:System.Windows.Automation.SelectionItemPattern>.</xref:System.Windows.Automation.SelectionItemPattern> </xref:System.Windows.Automation.TogglePattern>"
  syntax:
    content: 'public class InvokePattern : System.Windows.Automation.BasePattern'
  inheritance:
  - System.Object
  - System.Windows.Automation.BasePattern
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Automation.InvokePattern.Invoke
  id: Invoke
  parent: System.Windows.Automation.InvokePattern
  langs:
  - csharp
  name: Invoke()
  nameWithType: InvokePattern.Invoke()
  fullName: System.Windows.Automation.InvokePattern.Invoke()
  type: Method
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation
  summary: "傳送要求以啟動控制項，並啟始其單一明確的動作。"
  remarks: "使用 invoke 的呼叫應該會立即傳回而不會封鎖。 不過，這種行為完全是依據[!INCLUDE[TLA#tla_uiautomation](~/add/includes/tlasharptla-uiautomation-md.md)]提供者實作。 在案例中，呼叫叫用會導致封鎖的問題 （例如強制回應對話方塊） 個別的協助程式執行緒可能需要呼叫方法。"
  example:
  - "In the following example an <xref:System.Windows.Automation.InvokePattern>control pattern is obtained from a control and the Invoke method is called.  \n  \n [!code-cs[UIAInvokePattern_snip#101](~/add/codesnippet/csharp/UIAInvokePattern_snip/UIAInvokePattern_snippets.cs#101)]\n [!code-vb[UIAInvokePattern_snip#101](~/add/codesnippet/visualbasic/UIAInvokePattern_snip/UIAInvokePattern_snippets.vb#101)]"
  syntax:
    content: public void Invoke ();
    parameters: []
  overload: System.Windows.Automation.InvokePattern.Invoke*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "元素不支援<xref href=&quot;System.Windows.Automation.InvokePattern&quot;></xref>控制項模式，或在隱藏或封鎖。"
  - type: System.Windows.Automation.ElementNotEnabledException
    commentId: T:System.Windows.Automation.ElementNotEnabledException
    description: "未啟用項目。 UI 自動化提供者已實作其自己的處理方式時會引發<xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled*>屬性。</xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled*>"
  platform:
  - net462
- uid: System.Windows.Automation.InvokePattern.InvokedEvent
  id: InvokedEvent
  parent: System.Windows.Automation.InvokePattern
  langs:
  - csharp
  name: InvokedEvent
  nameWithType: InvokePattern.InvokedEvent
  fullName: System.Windows.Automation.InvokePattern.InvokedEvent
  type: Field
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation
  summary: "識別控制項已叫用或啟用時引發的事件。"
  remarks: "使用者介面自動化用戶端應用程式會使用這個識別項。 UI 自動化提供者應該使用<xref:System.Windows.Automation.InvokePatternIdentifiers>。</xref:System.Windows.Automation.InvokePatternIdentifiers>同等的欄位       InvokedEvent 識別碼當做參數傳遞至<xref:System.Windows.Automation.Automation.AddAutomationEventHandler%2A>。</xref:System.Windows.Automation.Automation.AddAutomationEventHandler%2A>"
  example:
  - "In the following example, the event handler identifies the event as an Invoked event by comparing the <xref:System.Windows.Automation.AutomationEventArgs.EventId%2A> in the event arguments with the InvokedEvent identifier field.  \n  \n [!code-vb[UIAClient_snip#101](~/add/codesnippet/visualbasic/UIAClient_snip/ClientForm.vb#101)]\n [!code-cs[UIAClient_snip#101](~/add/codesnippet/csharp/CustomElementClient/ClientForm.cs#101)]"
  syntax:
    content: public static readonly System.Windows.Automation.AutomationEvent InvokedEvent;
    return:
      type: System.Windows.Automation.AutomationEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.InvokePattern.Pattern
  id: Pattern
  parent: System.Windows.Automation.InvokePattern
  langs:
  - csharp
  name: Pattern
  nameWithType: InvokePattern.Pattern
  fullName: System.Windows.Automation.InvokePattern.Pattern
  type: Field
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation
  summary: "識別<xref href=&quot;System.Windows.Automation.InvokePattern&quot;></xref>控制項模式。"
  remarks: "使用者介面自動化用戶端應用程式會使用這個識別項。 UI 自動化提供者應該使用<xref:System.Windows.Automation.InvokePatternIdentifiers>。</xref:System.Windows.Automation.InvokePatternIdentifiers>同等的欄位       模式識別項會傳遞至方法，例如<xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A>擷取控制項模式，從指定<xref:System.Windows.Automation.AutomationElement>.</xref:System.Windows.Automation.AutomationElement>感興趣的</xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A>"
  example:
  - "In the following example an <xref:System.Windows.Automation.InvokePattern> control pattern is obtained from a control and the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method is called.  \n  \n [!code-cs[UIAInvokePattern_snip#101](~/add/codesnippet/csharp/UIAInvokePattern_snip/UIAInvokePattern_snippets.cs#101)]\n [!code-vb[UIAInvokePattern_snip#101](~/add/codesnippet/visualbasic/UIAInvokePattern_snip/UIAInvokePattern_snippets.vb#101)]"
  syntax:
    content: public static readonly System.Windows.Automation.AutomationPattern Pattern;
    return:
      type: System.Windows.Automation.AutomationPattern
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Automation.BasePattern
  isExternal: false
  name: System.Windows.Automation.BasePattern
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Automation.ElementNotEnabledException
  parent: System.Windows.Automation
  isExternal: false
  name: ElementNotEnabledException
  nameWithType: ElementNotEnabledException
  fullName: System.Windows.Automation.ElementNotEnabledException
- uid: System.Windows.Automation.InvokePattern.Invoke
  parent: System.Windows.Automation.InvokePattern
  isExternal: false
  name: Invoke()
  nameWithType: InvokePattern.Invoke()
  fullName: System.Windows.Automation.InvokePattern.Invoke()
- uid: System.Windows.Automation.InvokePattern.InvokedEvent
  parent: System.Windows.Automation.InvokePattern
  isExternal: false
  name: InvokedEvent
  nameWithType: InvokePattern.InvokedEvent
  fullName: System.Windows.Automation.InvokePattern.InvokedEvent
- uid: System.Windows.Automation.AutomationEvent
  parent: System.Windows.Automation
  isExternal: false
  name: AutomationEvent
  nameWithType: AutomationEvent
  fullName: System.Windows.Automation.AutomationEvent
- uid: System.Windows.Automation.InvokePattern.Pattern
  parent: System.Windows.Automation.InvokePattern
  isExternal: false
  name: Pattern
  nameWithType: InvokePattern.Pattern
  fullName: System.Windows.Automation.InvokePattern.Pattern
- uid: System.Windows.Automation.AutomationPattern
  parent: System.Windows.Automation
  isExternal: false
  name: AutomationPattern
  nameWithType: AutomationPattern
  fullName: System.Windows.Automation.AutomationPattern
- uid: System.Windows.Automation.InvokePattern.Invoke*
  parent: System.Windows.Automation.InvokePattern
  isExternal: false
  name: Invoke
  nameWithType: InvokePattern.Invoke
