### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.MD5
  id: MD5
  children:
  - System.Security.Cryptography.MD5.#ctor
  - System.Security.Cryptography.MD5.Create
  - System.Security.Cryptography.MD5.Create(System.String)
  langs:
  - csharp
  name: MD5
  nameWithType: MD5
  fullName: System.Security.Cryptography.MD5
  type: Class
  summary: "代表 MD5 雜湊演算法的所有實作都繼承的抽象類別。"
  remarks: "雜湊函式的二進位字串對應任意長度的固定長度的小型二進位字串。 密碼編譯雜湊函式具有屬性無法進行該雜湊處理至相同的值; 找到兩個不同的輸入也就是說，如果對應的資料也會比對，應該符合兩組資料的雜湊。 對資料進行小變更造成大，無法預期的變更，雜湊。       MD5 演算法的雜湊大小為 128 位元。       <xref:System.Security.Cryptography.HashAlgorithm.ComputeHash%2A>MD5 類別的方法為 16 個位元組的陣列傳回雜湊。</xref:System.Security.Cryptography.HashAlgorithm.ComputeHash%2A>  請注意，某些 MD5 實作會產生 32 個字元的十六進位格式的雜湊。  與這類實作交互操作，傳回值的格式化<xref:System.Security.Cryptography.HashAlgorithm.ComputeHash%2A>為十六進位值的方法。</xref:System.Security.Cryptography.HashAlgorithm.ComputeHash%2A>      > [!NOTE] > 可使用較新的雜湊函數，例如安全雜湊演算法 sha-256 和 sha-512。 請考慮使用<xref:System.Security.Cryptography.SHA256>類別或<xref:System.Security.Cryptography.SHA512>類別，而不是 MD5 類別。</xref:System.Security.Cryptography.SHA512> </xref:System.Security.Cryptography.SHA256> 使用 MD5 只為了與舊版的應用程式和資料的相容性。"
  example:
  - "The following code example computes the MD5 hash value of a string and returns the hash as a 32-character, hexadecimal-formatted string.  The hash string created by this code example is compatible with any MD5 hash function (on any platform) that creates a 32-character, hexadecimal-formatted hash string.  \n  \n [!code-vb[Security.Cryptography.MD5#1](~/add/codesnippet/visualbasic/t-system.security.crypto_105_1.vb)]\n [!code-cs[Security.Cryptography.MD5#1](~/add/codesnippet/csharp/t-system.security.crypto_105_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class MD5 : System.Security.Cryptography.HashAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.HashFinal
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.Initialize
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  platform:
  - net462
- uid: System.Security.Cryptography.MD5.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.MD5
  langs:
  - csharp
  name: MD5()
  nameWithType: MD5.MD5()
  fullName: System.Security.Cryptography.MD5.MD5()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.MD5&quot;> </xref>。"
  remarks: "若要建立的執行個體<xref:System.Security.Cryptography.MD5>類別，請使用<xref:System.Security.Cryptography.MD5.Create%2A>方法。</xref:System.Security.Cryptography.MD5.Create%2A> </xref:System.Security.Cryptography.MD5>"
  syntax:
    content: protected MD5 ();
    parameters: []
  overload: System.Security.Cryptography.MD5.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.MD5.Create
  id: Create
  parent: System.Security.Cryptography.MD5
  langs:
  - csharp
  name: Create()
  nameWithType: MD5.Create()
  fullName: System.Security.Cryptography.MD5.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "建立的預設實作的執行個體<xref href=&quot;System.Security.Cryptography.MD5&quot;></xref>雜湊演算法。"
  syntax:
    content: public static System.Security.Cryptography.MD5 Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.MD5
      description: "新執行個體<xref href=&quot;System.Security.Cryptography.MD5&quot;></xref>雜湊演算法。"
  overload: System.Security.Cryptography.MD5.Create*
  exceptions:
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: "演算法會使用美國聯邦資訊處理標準 (FIPS) 模式中啟用，但未經過 FIPS 相容。"
  platform:
  - net462
- uid: System.Security.Cryptography.MD5.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.MD5
  langs:
  - csharp
  name: Create(String)
  nameWithType: MD5.Create(String)
  fullName: System.Security.Cryptography.MD5.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "建立之指定實作的執行個體<xref href=&quot;System.Security.Cryptography.MD5&quot;></xref>雜湊演算法。"
  remarks: '可能值`algName`是︰ `System.Security.Cryptography.MD5`， `MD5`， `System.Security.Cryptography.MD5CryptoServiceProvider`，和`System.Security.Cryptography.MD5Managed`。'
  syntax:
    content: public static System.Security.Cryptography.MD5 Create (string algName);
    parameters:
    - id: algName
      type: System.String
      description: "名稱的特定實作<xref href=&quot;System.Security.Cryptography.MD5&quot;></xref>使用。"
    return:
      type: System.Security.Cryptography.MD5
      description: "指定實作的新執行個體<xref href=&quot;System.Security.Cryptography.MD5&quot;> </xref>。"
  overload: System.Security.Cryptography.MD5.Create*
  exceptions:
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: "所描述的演算法<code> algName </code>參數已使用美國聯邦資訊處理標準 (FIPS) 模式中啟用，但是未經過 FIPS 相容。"
  platform:
  - net462
references:
- uid: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: System.Security.Cryptography.HashAlgorithm
- uid: System.Reflection.TargetInvocationException
  isExternal: true
  name: System.Reflection.TargetInvocationException
- uid: System.Security.Cryptography.MD5.#ctor
  parent: System.Security.Cryptography.MD5
  isExternal: false
  name: MD5()
  nameWithType: MD5.MD5()
  fullName: System.Security.Cryptography.MD5.MD5()
- uid: System.Security.Cryptography.MD5.Create
  parent: System.Security.Cryptography.MD5
  isExternal: false
  name: Create()
  nameWithType: MD5.Create()
  fullName: System.Security.Cryptography.MD5.Create()
- uid: System.Security.Cryptography.MD5
  parent: System.Security.Cryptography
  isExternal: false
  name: MD5
  nameWithType: MD5
  fullName: System.Security.Cryptography.MD5
- uid: System.Security.Cryptography.MD5.Create(System.String)
  parent: System.Security.Cryptography.MD5
  isExternal: false
  name: Create(String)
  nameWithType: MD5.Create(String)
  fullName: System.Security.Cryptography.MD5.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.MD5.#ctor*
  parent: System.Security.Cryptography.MD5
  isExternal: false
  name: MD5
  nameWithType: MD5.MD5
- uid: System.Security.Cryptography.MD5.Create*
  parent: System.Security.Cryptography.MD5
  isExternal: false
  name: Create
  nameWithType: MD5.Create
