### YamlMime:ManagedReference
items:
- uid: System.Windows.UIElement
  id: UIElement
  children:
  - System.Windows.UIElement.#ctor
  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  - System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.AllowDrop
  - System.Windows.UIElement.AllowDropProperty
  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.UIElement.AreAnyTouchesCaptured
  - System.Windows.UIElement.AreAnyTouchesCapturedProperty
  - System.Windows.UIElement.AreAnyTouchesCapturedWithin
  - System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty
  - System.Windows.UIElement.AreAnyTouchesDirectlyOver
  - System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty
  - System.Windows.UIElement.AreAnyTouchesOver
  - System.Windows.UIElement.AreAnyTouchesOverProperty
  - System.Windows.UIElement.Arrange(System.Windows.Rect)
  - System.Windows.UIElement.ArrangeCore(System.Windows.Rect)
  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.UIElement.BitmapEffect
  - System.Windows.UIElement.BitmapEffectInput
  - System.Windows.UIElement.BitmapEffectInputProperty
  - System.Windows.UIElement.BitmapEffectProperty
  - System.Windows.UIElement.CacheMode
  - System.Windows.UIElement.CacheModeProperty
  - System.Windows.UIElement.CaptureMouse
  - System.Windows.UIElement.CaptureStylus
  - System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)
  - System.Windows.UIElement.Clip
  - System.Windows.UIElement.ClipProperty
  - System.Windows.UIElement.ClipToBounds
  - System.Windows.UIElement.ClipToBoundsProperty
  - System.Windows.UIElement.CommandBindings
  - System.Windows.UIElement.DesiredSize
  - System.Windows.UIElement.DragEnter
  - System.Windows.UIElement.DragEnterEvent
  - System.Windows.UIElement.DragLeave
  - System.Windows.UIElement.DragLeaveEvent
  - System.Windows.UIElement.DragOver
  - System.Windows.UIElement.DragOverEvent
  - System.Windows.UIElement.Drop
  - System.Windows.UIElement.DropEvent
  - System.Windows.UIElement.Effect
  - System.Windows.UIElement.EffectProperty
  - System.Windows.UIElement.Focus
  - System.Windows.UIElement.Focusable
  - System.Windows.UIElement.FocusableChanged
  - System.Windows.UIElement.FocusableProperty
  - System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  - System.Windows.UIElement.GetLayoutClip(System.Windows.Size)
  - System.Windows.UIElement.GetUIParentCore
  - System.Windows.UIElement.GiveFeedback
  - System.Windows.UIElement.GiveFeedbackEvent
  - System.Windows.UIElement.GotFocus
  - System.Windows.UIElement.GotFocusEvent
  - System.Windows.UIElement.GotKeyboardFocus
  - System.Windows.UIElement.GotKeyboardFocusEvent
  - System.Windows.UIElement.GotMouseCapture
  - System.Windows.UIElement.GotMouseCaptureEvent
  - System.Windows.UIElement.GotStylusCapture
  - System.Windows.UIElement.GotStylusCaptureEvent
  - System.Windows.UIElement.GotTouchCapture
  - System.Windows.UIElement.GotTouchCaptureEvent
  - System.Windows.UIElement.HasAnimatedProperties
  - System.Windows.UIElement.HasEffectiveKeyboardFocus
  - System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)
  - System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)
  - System.Windows.UIElement.InputBindings
  - System.Windows.UIElement.InputHitTest(System.Windows.Point)
  - System.Windows.UIElement.InvalidateArrange
  - System.Windows.UIElement.InvalidateMeasure
  - System.Windows.UIElement.InvalidateVisual
  - System.Windows.UIElement.IsArrangeValid
  - System.Windows.UIElement.IsEnabled
  - System.Windows.UIElement.IsEnabledChanged
  - System.Windows.UIElement.IsEnabledCore
  - System.Windows.UIElement.IsEnabledProperty
  - System.Windows.UIElement.IsFocused
  - System.Windows.UIElement.IsFocusedProperty
  - System.Windows.UIElement.IsHitTestVisible
  - System.Windows.UIElement.IsHitTestVisibleChanged
  - System.Windows.UIElement.IsHitTestVisibleProperty
  - System.Windows.UIElement.IsInputMethodEnabled
  - System.Windows.UIElement.IsKeyboardFocused
  - System.Windows.UIElement.IsKeyboardFocusedChanged
  - System.Windows.UIElement.IsKeyboardFocusedProperty
  - System.Windows.UIElement.IsKeyboardFocusWithin
  - System.Windows.UIElement.IsKeyboardFocusWithinChanged
  - System.Windows.UIElement.IsKeyboardFocusWithinProperty
  - System.Windows.UIElement.IsManipulationEnabled
  - System.Windows.UIElement.IsManipulationEnabledProperty
  - System.Windows.UIElement.IsMeasureValid
  - System.Windows.UIElement.IsMouseCaptured
  - System.Windows.UIElement.IsMouseCapturedChanged
  - System.Windows.UIElement.IsMouseCapturedProperty
  - System.Windows.UIElement.IsMouseCaptureWithin
  - System.Windows.UIElement.IsMouseCaptureWithinChanged
  - System.Windows.UIElement.IsMouseCaptureWithinProperty
  - System.Windows.UIElement.IsMouseDirectlyOver
  - System.Windows.UIElement.IsMouseDirectlyOverChanged
  - System.Windows.UIElement.IsMouseDirectlyOverProperty
  - System.Windows.UIElement.IsMouseOver
  - System.Windows.UIElement.IsMouseOverProperty
  - System.Windows.UIElement.IsStylusCaptured
  - System.Windows.UIElement.IsStylusCapturedChanged
  - System.Windows.UIElement.IsStylusCapturedProperty
  - System.Windows.UIElement.IsStylusCaptureWithin
  - System.Windows.UIElement.IsStylusCaptureWithinChanged
  - System.Windows.UIElement.IsStylusCaptureWithinProperty
  - System.Windows.UIElement.IsStylusDirectlyOver
  - System.Windows.UIElement.IsStylusDirectlyOverChanged
  - System.Windows.UIElement.IsStylusDirectlyOverProperty
  - System.Windows.UIElement.IsStylusOver
  - System.Windows.UIElement.IsStylusOverProperty
  - System.Windows.UIElement.IsVisible
  - System.Windows.UIElement.IsVisibleChanged
  - System.Windows.UIElement.IsVisibleProperty
  - System.Windows.UIElement.KeyDown
  - System.Windows.UIElement.KeyDownEvent
  - System.Windows.UIElement.KeyUp
  - System.Windows.UIElement.KeyUpEvent
  - System.Windows.UIElement.LayoutUpdated
  - System.Windows.UIElement.LostFocus
  - System.Windows.UIElement.LostFocusEvent
  - System.Windows.UIElement.LostKeyboardFocus
  - System.Windows.UIElement.LostKeyboardFocusEvent
  - System.Windows.UIElement.LostMouseCapture
  - System.Windows.UIElement.LostMouseCaptureEvent
  - System.Windows.UIElement.LostStylusCapture
  - System.Windows.UIElement.LostStylusCaptureEvent
  - System.Windows.UIElement.LostTouchCapture
  - System.Windows.UIElement.LostTouchCaptureEvent
  - System.Windows.UIElement.ManipulationBoundaryFeedback
  - System.Windows.UIElement.ManipulationBoundaryFeedbackEvent
  - System.Windows.UIElement.ManipulationCompleted
  - System.Windows.UIElement.ManipulationCompletedEvent
  - System.Windows.UIElement.ManipulationDelta
  - System.Windows.UIElement.ManipulationDeltaEvent
  - System.Windows.UIElement.ManipulationInertiaStarting
  - System.Windows.UIElement.ManipulationInertiaStartingEvent
  - System.Windows.UIElement.ManipulationStarted
  - System.Windows.UIElement.ManipulationStartedEvent
  - System.Windows.UIElement.ManipulationStarting
  - System.Windows.UIElement.ManipulationStartingEvent
  - System.Windows.UIElement.Measure(System.Windows.Size)
  - System.Windows.UIElement.MeasureCore(System.Windows.Size)
  - System.Windows.UIElement.MouseDown
  - System.Windows.UIElement.MouseDownEvent
  - System.Windows.UIElement.MouseEnter
  - System.Windows.UIElement.MouseEnterEvent
  - System.Windows.UIElement.MouseLeave
  - System.Windows.UIElement.MouseLeaveEvent
  - System.Windows.UIElement.MouseLeftButtonDown
  - System.Windows.UIElement.MouseLeftButtonDownEvent
  - System.Windows.UIElement.MouseLeftButtonUp
  - System.Windows.UIElement.MouseLeftButtonUpEvent
  - System.Windows.UIElement.MouseMove
  - System.Windows.UIElement.MouseMoveEvent
  - System.Windows.UIElement.MouseRightButtonDown
  - System.Windows.UIElement.MouseRightButtonDownEvent
  - System.Windows.UIElement.MouseRightButtonUp
  - System.Windows.UIElement.MouseRightButtonUpEvent
  - System.Windows.UIElement.MouseUp
  - System.Windows.UIElement.MouseUpEvent
  - System.Windows.UIElement.MouseWheel
  - System.Windows.UIElement.MouseWheelEvent
  - System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)
  - System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  - System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)
  - System.Windows.UIElement.OnCreateAutomationPeer
  - System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  - System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)
  - System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)
  - System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)
  - System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)
  - System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)
  - System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  - System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)
  - System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)
  - System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)
  - System.Windows.UIElement.Opacity
  - System.Windows.UIElement.OpacityMask
  - System.Windows.UIElement.OpacityMaskProperty
  - System.Windows.UIElement.OpacityProperty
  - System.Windows.UIElement.PersistId
  - System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  - System.Windows.UIElement.PreviewDragEnter
  - System.Windows.UIElement.PreviewDragEnterEvent
  - System.Windows.UIElement.PreviewDragLeave
  - System.Windows.UIElement.PreviewDragLeaveEvent
  - System.Windows.UIElement.PreviewDragOver
  - System.Windows.UIElement.PreviewDragOverEvent
  - System.Windows.UIElement.PreviewDrop
  - System.Windows.UIElement.PreviewDropEvent
  - System.Windows.UIElement.PreviewGiveFeedback
  - System.Windows.UIElement.PreviewGiveFeedbackEvent
  - System.Windows.UIElement.PreviewGotKeyboardFocus
  - System.Windows.UIElement.PreviewGotKeyboardFocusEvent
  - System.Windows.UIElement.PreviewKeyDown
  - System.Windows.UIElement.PreviewKeyDownEvent
  - System.Windows.UIElement.PreviewKeyUp
  - System.Windows.UIElement.PreviewKeyUpEvent
  - System.Windows.UIElement.PreviewLostKeyboardFocus
  - System.Windows.UIElement.PreviewLostKeyboardFocusEvent
  - System.Windows.UIElement.PreviewMouseDown
  - System.Windows.UIElement.PreviewMouseDownEvent
  - System.Windows.UIElement.PreviewMouseLeftButtonDown
  - System.Windows.UIElement.PreviewMouseLeftButtonDownEvent
  - System.Windows.UIElement.PreviewMouseLeftButtonUp
  - System.Windows.UIElement.PreviewMouseLeftButtonUpEvent
  - System.Windows.UIElement.PreviewMouseMove
  - System.Windows.UIElement.PreviewMouseMoveEvent
  - System.Windows.UIElement.PreviewMouseRightButtonDown
  - System.Windows.UIElement.PreviewMouseRightButtonDownEvent
  - System.Windows.UIElement.PreviewMouseRightButtonUp
  - System.Windows.UIElement.PreviewMouseRightButtonUpEvent
  - System.Windows.UIElement.PreviewMouseUp
  - System.Windows.UIElement.PreviewMouseUpEvent
  - System.Windows.UIElement.PreviewMouseWheel
  - System.Windows.UIElement.PreviewMouseWheelEvent
  - System.Windows.UIElement.PreviewQueryContinueDrag
  - System.Windows.UIElement.PreviewQueryContinueDragEvent
  - System.Windows.UIElement.PreviewStylusButtonDown
  - System.Windows.UIElement.PreviewStylusButtonDownEvent
  - System.Windows.UIElement.PreviewStylusButtonUp
  - System.Windows.UIElement.PreviewStylusButtonUpEvent
  - System.Windows.UIElement.PreviewStylusDown
  - System.Windows.UIElement.PreviewStylusDownEvent
  - System.Windows.UIElement.PreviewStylusInAirMove
  - System.Windows.UIElement.PreviewStylusInAirMoveEvent
  - System.Windows.UIElement.PreviewStylusInRange
  - System.Windows.UIElement.PreviewStylusInRangeEvent
  - System.Windows.UIElement.PreviewStylusMove
  - System.Windows.UIElement.PreviewStylusMoveEvent
  - System.Windows.UIElement.PreviewStylusOutOfRange
  - System.Windows.UIElement.PreviewStylusOutOfRangeEvent
  - System.Windows.UIElement.PreviewStylusSystemGesture
  - System.Windows.UIElement.PreviewStylusSystemGestureEvent
  - System.Windows.UIElement.PreviewStylusUp
  - System.Windows.UIElement.PreviewStylusUpEvent
  - System.Windows.UIElement.PreviewTextInput
  - System.Windows.UIElement.PreviewTextInputEvent
  - System.Windows.UIElement.PreviewTouchDown
  - System.Windows.UIElement.PreviewTouchDownEvent
  - System.Windows.UIElement.PreviewTouchMove
  - System.Windows.UIElement.PreviewTouchMoveEvent
  - System.Windows.UIElement.PreviewTouchUp
  - System.Windows.UIElement.PreviewTouchUpEvent
  - System.Windows.UIElement.QueryContinueDrag
  - System.Windows.UIElement.QueryContinueDragEvent
  - System.Windows.UIElement.QueryCursor
  - System.Windows.UIElement.QueryCursorEvent
  - System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.ReleaseAllTouchCaptures
  - System.Windows.UIElement.ReleaseMouseCapture
  - System.Windows.UIElement.ReleaseStylusCapture
  - System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  - System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement.RenderSize
  - System.Windows.UIElement.RenderTransform
  - System.Windows.UIElement.RenderTransformOrigin
  - System.Windows.UIElement.RenderTransformOriginProperty
  - System.Windows.UIElement.RenderTransformProperty
  - System.Windows.UIElement.ShouldSerializeCommandBindings
  - System.Windows.UIElement.ShouldSerializeInputBindings
  - System.Windows.UIElement.SnapsToDevicePixels
  - System.Windows.UIElement.SnapsToDevicePixelsProperty
  - System.Windows.UIElement.StylusButtonDown
  - System.Windows.UIElement.StylusButtonDownEvent
  - System.Windows.UIElement.StylusButtonUp
  - System.Windows.UIElement.StylusButtonUpEvent
  - System.Windows.UIElement.StylusDown
  - System.Windows.UIElement.StylusDownEvent
  - System.Windows.UIElement.StylusEnter
  - System.Windows.UIElement.StylusEnterEvent
  - System.Windows.UIElement.StylusInAirMove
  - System.Windows.UIElement.StylusInAirMoveEvent
  - System.Windows.UIElement.StylusInRange
  - System.Windows.UIElement.StylusInRangeEvent
  - System.Windows.UIElement.StylusLeave
  - System.Windows.UIElement.StylusLeaveEvent
  - System.Windows.UIElement.StylusMove
  - System.Windows.UIElement.StylusMoveEvent
  - System.Windows.UIElement.StylusOutOfRange
  - System.Windows.UIElement.StylusOutOfRangeEvent
  - System.Windows.UIElement.StylusPlugIns
  - System.Windows.UIElement.StylusSystemGesture
  - System.Windows.UIElement.StylusSystemGestureEvent
  - System.Windows.UIElement.StylusUp
  - System.Windows.UIElement.StylusUpEvent
  - System.Windows.UIElement.TextInput
  - System.Windows.UIElement.TextInputEvent
  - System.Windows.UIElement.TouchDown
  - System.Windows.UIElement.TouchDownEvent
  - System.Windows.UIElement.TouchEnter
  - System.Windows.UIElement.TouchEnterEvent
  - System.Windows.UIElement.TouchesCaptured
  - System.Windows.UIElement.TouchesCapturedWithin
  - System.Windows.UIElement.TouchesDirectlyOver
  - System.Windows.UIElement.TouchesOver
  - System.Windows.UIElement.TouchLeave
  - System.Windows.UIElement.TouchLeaveEvent
  - System.Windows.UIElement.TouchMove
  - System.Windows.UIElement.TouchMoveEvent
  - System.Windows.UIElement.TouchUp
  - System.Windows.UIElement.TouchUpEvent
  - System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)
  - System.Windows.UIElement.Uid
  - System.Windows.UIElement.UidProperty
  - System.Windows.UIElement.UpdateLayout
  - System.Windows.UIElement.Visibility
  - System.Windows.UIElement.VisibilityProperty
  langs:
  - csharp
  name: UIElement
  nameWithType: UIElement
  fullName: System.Windows.UIElement
  type: Class
  summary: "UIElement 是建置 WPF 核心層級實作的基底類別[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]項目和基本呈現方式特性。"
  remarks: "UIElement 提供項目配置的特性，以及公開虛擬衍生類別的方法可以覆寫時，可能會影響轉譯行為的項目和其子項目配置的起始點。       中的 UIElement 類別也定義許多輸入和通常專注的項目行為。 這包括鍵盤、 滑鼠及手寫筆輸入及相關的狀態屬性的事件。 其中許多事件會路由的事件，以及許多輸入相關的事件都有兩個反昇路由版本，以及通道事件的版本。 這些配對的事件通常是最大控制項作者感興趣的事件。       也包含 UIElement[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]相關的[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]事件模型，包括可以引發的方法所指定路由傳送來自於項目執行個體的事件。       就架構而言，UIElement 可以視為約略相當於視窗控制代碼，以[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]程式設計中或中的項目[!INCLUDE[TLA#tla_dhtml](~/add/includes/tlasharptla-dhtml-md.md)]程式設計。 UIElement 是基底的項目，在 WPF 核心層級。       UIElement 具有下列功能，特別 UIElement 類別所定義:-可以轉譯為子元素 (UIElement 衍生自<xref:System.Windows.Media.Visual>，高的層級圖形類別)-包含用來大小和位置可能的子項目的 UIElement （當版面配置系統來解譯） 的邏輯-可以回應使用者輸入 （包括控制項的位置輸入傳送至其處理的事件路由透過或路由的命令)-可以提高路由的事件的路由邏輯項目樹狀結構-支援動畫系統的某些層面<xref:System.Windows.FrameworkElement>是 WPF 架構層級實作的 UIElement，為基礎，並將特定的 WPF 架構層級互動。</xref:System.Windows.FrameworkElement> </xref:System.Windows.Media.Visual> <xref:System.Windows.FrameworkElement>新增並定義下列功能:-其他特定架構的版面配置特性的支援更豐富的中繼資料屬性-類別的特定實作的特定報告輸入基底類別和其附加的屬性，或附加事件的樣式支援-進一步動畫支援另一個相關的類別是<xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement></xref:System.Windows.FrameworkElement> <xref:System.Windows.ContentElement>類別實作許多相同的成員，如同 UIElement; 並使用其預期將放在整體內容模型中對這兩個類別之間的差異。</xref:System.Windows.ContentElement> UIElement 衍生類別通常會定義相對固定的內容模型，這表示有一些限制哪些項目可能會在標記中的子項目。 可能會有容量，以取得較不嚴格的子內容中的 UIElement，但該容量通常會集中在指定的內容屬性中。 A<xref:System.Windows.ContentElement>衍生的類別通常不是內容，以支援的案例，例如流程格式的文件相關的嚴格。</xref:System.Windows.ContentElement>      > [!IMPORTANT] ><xref:System.Windows.UIElement.Visibility%2A>狀態會影響所有輸入的處理該元素。</xref:System.Windows.UIElement.Visibility%2A> 不會顯示的項目不會參與點擊測試，而不會收到輸入的事件，即使滑鼠經過範圍將項目如果可以看見。"
  syntax:
    content: >-
      [System.Windows.Markup.UidProperty("Uid")]

      public class UIElement : System.Windows.Media.Visual, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Media.Visual
  implements:
  - System.Windows.IInputElement
  - System.Windows.Media.Animation.IAnimatable
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Media.Visual.AddVisualChild(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.FindCommonVisualAncestor(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.GetVisualChild(System.Int32)
  - System.Windows.Media.Visual.IsAncestorOf(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.IsDescendantOf(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  - System.Windows.Media.Visual.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Media.Visual.PointFromScreen(System.Windows.Point)
  - System.Windows.Media.Visual.PointToScreen(System.Windows.Point)
  - System.Windows.Media.Visual.RemoveVisualChild(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Media3D.Visual3D)
  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToDescendant(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToVisual(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.VisualBitmapEffect
  - System.Windows.Media.Visual.VisualBitmapEffectInput
  - System.Windows.Media.Visual.VisualBitmapScalingMode
  - System.Windows.Media.Visual.VisualCacheMode
  - System.Windows.Media.Visual.VisualChildrenCount
  - System.Windows.Media.Visual.VisualClearTypeHint
  - System.Windows.Media.Visual.VisualClip
  - System.Windows.Media.Visual.VisualEdgeMode
  - System.Windows.Media.Visual.VisualEffect
  - System.Windows.Media.Visual.VisualOffset
  - System.Windows.Media.Visual.VisualOpacity
  - System.Windows.Media.Visual.VisualOpacityMask
  - System.Windows.Media.Visual.VisualParent
  - System.Windows.Media.Visual.VisualScrollableAreaClip
  - System.Windows.Media.Visual.VisualTextHintingMode
  - System.Windows.Media.Visual.VisualTextRenderingMode
  - System.Windows.Media.Visual.VisualTransform
  - System.Windows.Media.Visual.VisualXSnappingGuidelines
  - System.Windows.Media.Visual.VisualYSnappingGuidelines
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.UIElement.#ctor
  id: '#ctor'
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: UIElement()
  nameWithType: UIElement.UIElement()
  fullName: System.Windows.UIElement.UIElement()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.UIElement&quot;></xref>類別。"
  remarks: "建立的新執行個體實際上是型別<xref:System.Windows.UIElement>是應用程式程式碼中不常發生因為<xref:System.Windows.UIElement>是基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.UIElement> 請參閱[基底項目概觀](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public UIElement ();
    parameters: []
  overload: System.Windows.UIElement.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  id: AddHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AddHandler(RoutedEvent,Delegate)
  nameWithType: UIElement.AddHandler(RoutedEvent,Delegate)
  fullName: System.Windows.UIElement.AddHandler(RoutedEvent,Delegate)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "加入指定的路由事件，將處理常式加入目前項目的處理常式集合的路由的事件處理常式。"
  remarks: "您可以加入相同的處理常式事件多次，而不會引發例外狀況。 不過，此處理常式實際叫用時處理事件的多次。 因此，請考慮如何這種行為可能會有副作用，都應該在處理常式實作。       您通常使用這個方法來提供的 「 加入 」 存取子的實作[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]事件的自訂路由事件的存取模式。"
  syntax:
    content: public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "要處理之路由事件識別項。"
    - id: handler
      type: System.Delegate
      description: "處理常式實作的參考。"
  overload: System.Windows.UIElement.AddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  id: AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AddHandler(RoutedEvent,Delegate,Boolean)
  nameWithType: UIElement.AddHandler(RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.UIElement.AddHandler(RoutedEvent,Delegate,Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "加入指定的路由事件，將處理常式加入目前項目的處理常式集合的路由的事件處理常式。 指定<code> handledEventsToo </code>為<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>來處理此事件路由上另一個項目已標示的路由事件要叫用提供的處理常式。"
  remarks: "實用的方式處理低階輸入是一個複雜的工作。 許多控制項實作特定事件標示為已處理，而取代為另一個更具直覺性事件的行為。 一般而言，控制項只會將平台輸入的事件，為已處理，如果沒有這麼做一些設計用意。 在某些情況下，這些設計目的不可能的輸入事件的特定處理的需要。 這些案例是該註冊處理常式取代`handledEventsToo`為`true`適合。 但您不應該這麼例行性。 叫用處理常式以回應所有事件，即使處理將會使得您自己的應用程式事件處理邏輯。 如果處理常式邏輯的很大，可能會看到效能降低。 您應該保留附加尚未處理的情況下，您已經發現特定控制項所處理的事件，您仍然想要處理的應用程式邏輯在開發程序的事件處理常式的使用。       避免處理行為的某些事件控制組合類別的另一個技術是使用該事件預覽替代方案。 例如，如果<xref:System.Windows.UIElement.MouseLeftButtonDown>標示為已處理類別處理，您可以加入處理常式<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>改用。</xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> </xref:System.Windows.UIElement.MouseLeftButtonDown>       您可以加入相同的處理常式事件多次，而不會引發例外狀況。 不過，此處理常式實際叫用時處理事件的多次。 因此，請考慮如何這種行為可能會有副作用，都應該在處理常式實作。       您通常使用這個方法來提供的 「 加入 」 存取子的實作[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]事件的自訂路由事件的存取模式。"
  example:
  - "The following example implements a handler invoked on the <xref:System.Windows.FrameworkElement.Initialized> event on a page that attaches a defined handler to one of the named elements on the page using `handledEventsToo` `true`. This handler would be invoked even if another element along the route marked the shared event data as handled before reaching the handling element in the route.  \n  \n [!code-cs[EventOvwSupport#AddHandlerHandledToo](~/add/codesnippet/csharp/EventOvwSupport/page2.xaml.cs#addhandlerhandledtoo)]\n [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/add/codesnippet/visualbasic/eventovwsupport/page2.xaml.vb#addhandlerhandledtoo)]"
  syntax:
    content: public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "要處理之路由事件識別項。"
    - id: handler
      type: System.Delegate
      description: "處理常式實作的參考。"
    - id: handledEventsToo
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>登錄處理常式，使得即使路由的事件被標記為被叫用處理其資料。<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> ，不會將預設條件登錄處理常式叫用 如果路由的事件標示為已處理。       預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。       請勿定期要求重新處理路由的事件。 如需詳細資訊，請參閱 < 備註 >。"
  overload: System.Windows.UIElement.AddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  id: AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AddToEventRoute(EventRoute,RoutedEventArgs)
  nameWithType: UIElement.AddToEventRoute(EventRoute,RoutedEventArgs)
  fullName: System.Windows.UIElement.AddToEventRoute(EventRoute,RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "將處理常式加入指定<xref href=&quot;System.Windows.EventRoute&quot;></xref>目前<xref href=&quot;System.Windows.UIElement&quot;></xref>事件處理常式集合。"
  remarks: "內容主機項目可以使用這個方法 (可能是指實作<xref:System.Windows.IContentHost>或未) 將項目子系的處理常式新增至<xref:System.Windows.EventRoute>.</xref:System.Windows.EventRoute> </xref:System.Windows.IContentHost> 通常，這是不必要的<xref:System.Windows.UIElement>，因為處理常式會自動新增為已完成的邏輯樹狀結構中找到的所有項目。</xref:System.Windows.UIElement> 不過，在某些情況下其中<xref:System.Windows.ContentElement>和<xref:System.Windows.UIElement>樣板化的樹狀結構中, 介來自要新增到路由範本需要的項目中混用。</xref:System.Windows.UIElement> </xref:System.Windows.ContentElement> 同時<xref:System.Windows.ContentElement>和<xref:System.Windows.UIElement>支援這個方法的版本。</xref:System.Windows.UIElement> </xref:System.Windows.ContentElement>"
  syntax:
    content: public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);
    parameters:
    - id: route
      type: System.Windows.EventRoute
      description: "處理常式加入事件路由。"
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "用來加入的處理常式的事件資料。 這個方法會使用<xref:System.Windows.RoutedEventArgs.RoutedEvent*>建立處理常式的事件資料的屬性。</xref:System.Windows.RoutedEventArgs.RoutedEvent*>"
  overload: System.Windows.UIElement.AddToEventRoute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AllowDrop
  id: AllowDrop
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AllowDrop
  nameWithType: UIElement.AllowDrop
  fullName: System.Windows.UIElement.AllowDrop
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定值，這個項目是否可以當做拖放作業的目標。  這是相依性屬性。"
  remarks: "拖放作業依預設，不會啟用，且必須設為 allowdrop 不刻意啟用`true`。 超出此基本設定，拖放行為是完全實作特定，並且未定義<xref:System.Windows.UIElement>或任何其他基底項目類別。</xref:System.Windows.UIElement> 某些控制項，例如<xref:System.Windows.Controls.RichTextBox>，沒有預設行為。</xref:System.Windows.Controls.RichTextBox> 如需拖放的詳細資訊，請參閱[拖曳和卸除概觀](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Windows.FrameworkElement>覆寫這個實作中的相依性屬性的中繼資料。</xref:System.Windows.FrameworkElement> 具體來說，<xref:System.Windows.FrameworkElement>指定這個屬性可讓屬性值繼承 (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>是`true`中繼資料中)。</xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> </xref:System.Windows.FrameworkElement> 在此內容中的屬性值繼承表示，如果有任何其他值作為 allowdrop 不透過本機值或樣式指派具有子元素，最接近的父元素的值與指派 （同樣地，無論是在樣式中，預設值，或為區域數值），此值則會將值從父項目將指派給所有先前未指派的子元素屬性系統。 實際上這表示您可以指定是否要在根項目，允許卸除作業，並將它做為值將會傳播到所有其子項目具有未特別指派`false`。      <a name=&quot;dependencyPropertyInfo_AllowDrop&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.AllowDropProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.AllowDropProperty>"
  example:
  - "The following markup example sets the AllowDrop property `true` using an attribute on a <xref:System.Windows.Controls.TextBox>, as well as setting some other related properties that in aggregate enable that <xref:System.Windows.Controls.TextBox> to be the target of a multiline text data object when it is dragged in. For the complete sample, see [Load a Dropped File Sample](http://msdn.microsoft.com/en-us/be90d645-dd61-4f53-93bb-87902d086ef7).  \n  \n [!code-xml[DragDrop_DropOpenTextFile#UIElementAllowDrop](~/add/codesnippet/xaml/dropopentextfile/window1.xaml#uielementallowdrop)]"
  syntax:
    content: public bool AllowDrop { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個項目可以當做拖放作業; 的目標否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.AllowDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AllowDropProperty
  id: AllowDropProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AllowDropProperty
  nameWithType: UIElement.AllowDropProperty
  fullName: System.Windows.UIElement.AllowDropProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.AllowDrop*>相依性屬性。</xref:System.Windows.UIElement.AllowDrop*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AllowDropProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ApplyAnimationClock(DependencyProperty,AnimationClock)
  nameWithType: UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
  fullName: System.Windows.UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "將動畫套用至這個項目上所指定相依性屬性。 任何現有動畫會停止，並取代為新的動畫。"
  remarks: "若要移除屬性的動畫，指定做為該屬性的識別項`dp`並指定`clock`為`null`。 這會移除動畫和動畫的屬性設定為其基底值。 不過，並不會停止原先相關聯的動畫時鐘。 指派給該時鐘的其他任何動畫會繼續執行。"
  example:
  - "In the following example, a <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle` has a particular timing animation applied to it by calling ApplyAnimationClock .  \n  \n [!code-cs[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/add/codesnippet/csharp/TimingBehavior_csharp/ClockControllerSpeedRatioExample.cs#uielementapplyanimationclock)]\n [!code-vb[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/add/codesnippet/visualbasic/timingbehavior_vb/clockcontrollerspeedratioexample.vb#uielementapplyanimationclock)]"
  syntax:
    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "若要建立動畫屬性的識別項。"
    - id: clock
      type: System.Windows.Media.Animation.AnimationClock
      description: "控制並宣告動畫的動畫時鐘。"
  overload: System.Windows.UIElement.ApplyAnimationClock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  nameWithType: UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  fullName: System.Windows.UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "將動畫套用至這個項目上所指定相依性屬性，讓指定的項目情況屬性已經有執行中的動畫。"
  remarks: "若要移除屬性的動畫，指定做為該屬性的識別項`dp`並指定`clock`為`null`。 這會移除動畫和動畫的屬性設定為其基底值。 不過，並不會停止原先相關聯的動畫時鐘。 指派給該時鐘的其他任何動畫會繼續執行。"
  syntax:
    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "要製作動畫的屬性。"
    - id: clock
      type: System.Windows.Media.Animation.AnimationClock
      description: "控制並宣告動畫的動畫時鐘。"
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "列舉值。 預設值是<xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref>，這將會停止任何現有動畫，並以新的取代。"
  overload: System.Windows.UIElement.ApplyAnimationClock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesCaptured
  id: AreAnyTouchesCaptured
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesCaptured
  nameWithType: UIElement.AreAnyTouchesCaptured
  fullName: System.Windows.UIElement.AreAnyTouchesCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出是否至少一個觸控擷取至這個項目。"
  syntax:
    content: public bool AreAnyTouchesCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果至少一個觸控，擷取至這個項目。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.AreAnyTouchesCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesCapturedProperty
  id: AreAnyTouchesCapturedProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesCapturedProperty
  nameWithType: UIElement.AreAnyTouchesCapturedProperty
  fullName: System.Windows.UIElement.AreAnyTouchesCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.AreAnyTouchesCaptured*>相依性屬性。</xref:System.Windows.UIElement.AreAnyTouchesCaptured*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesCapturedWithin
  id: AreAnyTouchesCapturedWithin
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesCapturedWithin
  nameWithType: UIElement.AreAnyTouchesCapturedWithin
  fullName: System.Windows.UIElement.AreAnyTouchesCapturedWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出是否至少一個觸控擷取至這個項目或其視覺化樹狀中任何子項目。"
  syntax:
    content: public bool AreAnyTouchesCapturedWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果至少一個觸控，擷取至這個項目或其視覺化樹狀結構中; 在任何子項目否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.AreAnyTouchesCapturedWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty
  id: AreAnyTouchesCapturedWithinProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesCapturedWithinProperty
  nameWithType: UIElement.AreAnyTouchesCapturedWithinProperty
  fullName: System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.AreAnyTouchesCapturedWithin*>相依性屬性。</xref:System.Windows.UIElement.AreAnyTouchesCapturedWithin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesDirectlyOver
  id: AreAnyTouchesDirectlyOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesDirectlyOver
  nameWithType: UIElement.AreAnyTouchesDirectlyOver
  fullName: System.Windows.UIElement.AreAnyTouchesDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出是否按下此項目上方的至少一個觸控。"
  syntax:
    content: public bool AreAnyTouchesDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果至少一個觸控上按下此項目。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.AreAnyTouchesDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty
  id: AreAnyTouchesDirectlyOverProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesDirectlyOverProperty
  nameWithType: UIElement.AreAnyTouchesDirectlyOverProperty
  fullName: System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.AreAnyTouchesDirectlyOver*>相依性屬性。</xref:System.Windows.UIElement.AreAnyTouchesDirectlyOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesOver
  id: AreAnyTouchesOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesOver
  nameWithType: UIElement.AreAnyTouchesOver
  fullName: System.Windows.UIElement.AreAnyTouchesOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出至少一個觸控已按下此項目或其視覺化樹狀中的任何子項目。"
  syntax:
    content: public bool AreAnyTouchesOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個項目或其視覺化樹狀結構中; 在任何子項目上按下至少一個觸控否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.AreAnyTouchesOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesOverProperty
  id: AreAnyTouchesOverProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesOverProperty
  nameWithType: UIElement.AreAnyTouchesOverProperty
  fullName: System.Windows.UIElement.AreAnyTouchesOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.AreAnyTouchesOver*>相依性屬性。</xref:System.Windows.UIElement.AreAnyTouchesOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Arrange(System.Windows.Rect)
  id: Arrange(System.Windows.Rect)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Arrange(Rect)
  nameWithType: UIElement.Arrange(Rect)
  fullName: System.Windows.UIElement.Arrange(Rect)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "放置子項目，並決定的大小<xref href=&quot;System.Windows.UIElement&quot;> </xref>。 父項目呼叫這個方法，從其<xref:System.Windows.UIElement.ArrangeCore*>實作 （或 WPF 架構層級對等項目） 以形成遞迴配置更新。</xref:System.Windows.UIElement.ArrangeCore*> 這個方法會構成配置更新的第二個階段。"
  remarks: "對於衍生案例的 WPF 架構層級項目，排列的行為不應該 （而且也無法，除非您陰影） 變更。 相反地，您應該覆寫<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>您類別中實作</xref:System.Windows.FrameworkElement.ArrangeOverride%2A> 您<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>實作會由內部呼叫排列做為預設 WPF 架構層級配置作業的一部分。</xref:System.Windows.FrameworkElement.ArrangeOverride%2A> 您<xref:System.Windows.UIElement.ArrangeCore%2A>實作也應該呼叫<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>上每個子項目，如果它具有子項目。</xref:System.Windows.FrameworkElement.ArrangeOverride%2A> </xref:System.Windows.UIElement.ArrangeCore%2A>       WPF 核心層級項目的衍生情節，排列的行為不應該 （而且也無法，除非您陰影） 變更。 相反地，您應該覆寫，<xref:System.Windows.UIElement.ArrangeCore%2A>在您的類別。</xref:System.Windows.UIElement.ArrangeCore%2A> 您<xref:System.Windows.UIElement.ArrangeCore%2A>實作會由內部呼叫排列做為預設 WPF 架構層級配置作業的一部分。</xref:System.Windows.UIElement.ArrangeCore%2A> 不過，這是假設您使用 WPF 架構層級版面配置和其版面配置系統，情況往往並非如此是如果您特別位於 WPF 核心層級的項目衍生自<xref:System.Windows.UIElement>基底項目類別。</xref:System.Windows.UIElement> 您<xref:System.Windows.UIElement.ArrangeCore%2A>實作也應該呼叫排列在每個子項目，如果它具有子項目。</xref:System.Windows.UIElement.ArrangeCore%2A> 請注意 WPF 核心層級案例意味著您不使用<xref:System.Windows.FrameworkElement>衍生類別，因為<xref:System.Windows.FrameworkElement>標誌<xref:System.Windows.FrameworkElement.ArrangeCore%2A>.</xref:System.Windows.FrameworkElement.ArrangeCore%2A> </xref:System.Windows.FrameworkElement> </xref:System.Windows.FrameworkElement>       計算中的 WPF 架構層級版面配置定位[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]組成<xref:System.Windows.UIElement.Measure%2A>與排列的呼叫。</xref:System.Windows.UIElement.Measure%2A> 期間<xref:System.Windows.UIElement.Measure%2A>呼叫，版面配置系統決定使用提供的項目大小需求<xref:System.Windows.Size>(`availableSize`) 引數。</xref:System.Windows.Size> </xref:System.Windows.UIElement.Measure%2A> 排列通話期間，版面配置系統會終結的大小和項目的週框方塊的位置。  如需詳細資訊，請參閱[配置](~/add/includes/ajax-current-ext-md.md)。       `availableSize`可以是零到無限大之間的數字。 若要配置的項目傳回最小值<xref:System.Windows.Size>它們需要透過`availableSize`參數。</xref:System.Windows.Size>       配置第一次具現化，它一律會接收<xref:System.Windows.UIElement.Measure%2A>排列之前呼叫。</xref:System.Windows.UIElement.Measure%2A> 不過之後第一次的版面配置傳遞，, 它可能會收到排列呼叫但沒有<xref:System.Windows.UIElement.Measure%2A>這種情形時，會影響只有排列的屬性變更 （例如對齊），或當父系收到不含<xref:System.Windows.UIElement.Measure%2A>.</xref:System.Windows.UIElement.Measure%2A>排列;</xref:System.Windows.UIElement.Measure%2A> A<xref:System.Windows.UIElement.Measure%2A>呼叫將會讓排列呼叫自動失效。</xref:System.Windows.UIElement.Measure%2A>       以非同步方式 （在版面配置系統所決定的時間） 通常會進行配置更新。 項目可能不會立即反映屬性會影響項目調整大小的變更 (例如<xref:System.Windows.FrameworkElement.Width%2A>)。</xref:System.Windows.FrameworkElement.Width%2A>      > [!NOTE] > 配置更新可以強制使用<xref:System.Windows.UIElement.UpdateLayout%2A>方法; 不過，呼叫這個函式則不建議，因為它通常不需要而且可能會導致效能不佳。</xref:System.Windows.UIElement.UpdateLayout%2A> 在許多情況下呼叫其中<xref:System.Windows.UIElement.UpdateLayout%2A>可能適合、 版面配置系統可能已經在處理更新。</xref:System.Windows.UIElement.UpdateLayout%2A> 版面配置系統可以處理版面配置變更，可以最佳化做為封裝一部分的所有必要更新的方式。       版面配置系統會保留兩個不同的佇列的無效的版面配置，一個用於<xref:System.Windows.UIElement.Measure%2A>，另一個用於排列。</xref:System.Windows.UIElement.Measure%2A> 配置佇列會根據使用的視覺化樹狀結構中的項目順序來排序。 在樹狀結構中較高的項目是佇列的頂端，以避免多餘的配置，在父系中重複的變更所造成。 從佇列中，會自動移除重複的項目和項目會自動從佇列中移除已有效。       當更新配置，<xref:System.Windows.UIElement.Measure%2A>佇列清空首先，後面接著排列佇列。</xref:System.Windows.UIElement.Measure%2A> 中的項目時，就永遠不會排列排列佇列中的項目<xref:System.Windows.UIElement.Measure%2A>佇列。</xref:System.Windows.UIElement.Measure%2A>"
  syntax:
    content: public void Arrange (System.Windows.Rect finalRect);
    parameters:
    - id: finalRect
      type: System.Windows.Rect
      description: "提供做為子系項目來計算其父代的最終大小<xref href=&quot;System.Windows.Rect&quot;></xref>執行個體。"
  overload: System.Windows.UIElement.Arrange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ArrangeCore(System.Windows.Rect)
  id: ArrangeCore(System.Windows.Rect)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ArrangeCore(Rect)
  nameWithType: UIElement.ArrangeCore(Rect)
  fullName: System.Windows.UIElement.ArrangeCore(Rect)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "定義 WPF 核心層級排列版面配置定義的範本。"
  remarks: >-
    > [!NOTE]

    >  Overriding this method is only appropriate if you are deriving at the WPF core-level, and you are not using the WPF framework-level layout system and <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>. If you are using the WPF framework-level layout system, the appropriate method to override for class-specific layout arrange behavior is <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.
  example:
  - "ArrangeCore implementations should call the base implementation to return a size, then call the <xref:System.Windows.UIElement.Arrange%2A> method of each visible child element, and reconcile the sizes returned by these <xref:System.Windows.UIElement.Arrange%2A> calls with the size of the base implementation. The logic for the reconciliation aspect of a ArrangeCore implementation might vary, depending on the layout characteristics of your element. In the following example template, `VisualChildren` is a hypothetical property that your element might define to help enumerate its content; <xref:System.Windows.UIElement> does not define content collections at this level, the WPF framework-level architecture defers content behavior to derived elements such as specific controls or control base classes.  \n  \n [!code-cs[CorePseudocode#UIElementArrangeOverride](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#uielementarrangeoverride)]\n [!code-vb[CorePseudocode#UIElementArrangeOverride](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#uielementarrangeoverride)]"
  syntax:
    content: protected virtual void ArrangeCore (System.Windows.Rect finalRect);
    parameters:
    - id: finalRect
      type: System.Windows.Rect
      description: "父系內的最終區域該項目應該用來排列本身和其子項目。"
  overload: System.Windows.UIElement.ArrangeCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: BeginAnimation(DependencyProperty,AnimationTimeline)
  nameWithType: UIElement.BeginAnimation(DependencyProperty,AnimationTimeline)
  fullName: System.Windows.UIElement.BeginAnimation(DependencyProperty,AnimationTimeline)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "這個項目上啟動指定的動畫屬性的動畫。"
  remarks: "當您檢查屬性是否動畫效果時，請注意，動畫會開始視為動畫呈現非動畫的起始點的第一個框架時。       如果<xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>如`animation`是`null`，然後移除任何目前的動畫，並保留屬性的目前值。</xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>       如果整個`animation`值是`null`、 從屬性移除所有動畫和屬性值還原成其基底值。 不過，並不會停止原先相關聯的動畫時間軸。 指派給該時間軸中的其他任何動畫會繼續執行。"
  example:
  - "The following example creates an animation, assigns it, and then calls BeginAnimation to start it.  \n  \n [!code-cs[timingbehaviors_procedural_snip#BeginAnimation](~/add/codesnippet/csharp/TimingBehavior_csharp/GetAnimationBaseValueExample.cs#beginanimation)]\n [!code-vb[timingbehaviors_procedural_snip#BeginAnimation](~/add/codesnippet/visualbasic/timingbehavior_vb/getanimationbasevalueexample.vb#beginanimation)]"
  syntax:
    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "要繪製的屬性，指定為相依性屬性的識別項。"
    - id: animation
      type: System.Windows.Media.Animation.AnimationTimeline
      description: "若要啟動的動畫時間軸。"
  overload: System.Windows.UIElement.BeginAnimation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  nameWithType: UIElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  fullName: System.Windows.UIElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "如果屬性已經有執行中的動畫，會發生特定的動畫，指定動畫之屬性上此項目與所指定的選項啟動。"
  remarks: "當您檢查屬性是否動畫效果時，請注意，動畫會開始視為動畫呈現非動畫的起始點的第一個框架時。       如果<xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>如`animation`是`null`，然後移除任何目前的動畫，並保留屬性的目前值。</xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>       如果整個`animation`值是`null`、 從屬性移除所有動畫和屬性值還原成其基底值。 不過，並不會停止原先相關聯的動畫時間軸。 指派給該時間軸中的其他任何動畫會繼續執行。"
  example:
  - "The following example implements a handler that obtains an existing animation from a resource and then calls BeginAnimation with a specified handoff behavior.  \n  \n [!code-cs[BrushesIntroduction#BeginAnimationHandoff](~/add/codesnippet/csharp/BrushesIntroduction.BrushesIntroduction/SampleViewer.xaml.cs#beginanimationhandoff)]\n [!code-vb[BrushesIntroduction#BeginAnimationHandoff](~/add/codesnippet/visualbasic/brushesintroduction/sampleviewer.xaml.vb#beginanimationhandoff)]"
  syntax:
    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "要繪製的屬性，指定為相依性屬性的識別項。"
    - id: animation
      type: System.Windows.Media.Animation.AnimationTimeline
      description: "要套用的動畫時間軸。"
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "指定新動畫如何與已經影響的屬性值的任何目前 （執行） 動畫互動的列舉值。"
  overload: System.Windows.UIElement.BeginAnimation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.BitmapEffect
  id: BitmapEffect
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: BitmapEffect
  nameWithType: UIElement.BitmapEffect
  fullName: System.Windows.UIElement.BitmapEffect
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定直接套用至此元素呈現內容的點陣圖效果。  這是相依性屬性。"
  remarks: "<xref:System.Windows.Media.Effects.BitmapEffect>是抽象類型，因此[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]使用量需要實作的衍生的類別的<xref:System.Windows.Media.Effects.BitmapEffect>，例如<xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>.</xref:System.Windows.Media.Effects.OuterGlowBitmapEffect> </xref:System.Windows.Media.Effects.BitmapEffect></xref:System.Windows.Media.Effects.BitmapEffect> 實作一個衍生類別的附註是集合型別，可讓您指定多個循序<xref:System.Windows.Media.Effects.BitmapEffect>，使用巢狀的標記語法。</xref:System.Windows.Media.Effects.BitmapEffect>       沒有現有的衍生類別<xref:System.Windows.Media.Effects.BitmapEffect>支援的類型轉換器，所以[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]您使用這個屬性的語法通常是屬性項目語法。</xref:System.Windows.Media.Effects.BitmapEffect>      <a name=&quot;dependencyPropertyInfo_BitmapEffect&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.BitmapEffectProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.BitmapEffectProperty>"
  example:
  - "The following example sets a bitmap effect, using <xref:System.Windows.Media.Effects.BlurBitmapEffect>.  \n  \n [!code-cs[EffectsGallery_snip#CodeBehindBlurCodeBehindExampleInline](~/add/codesnippet/csharp/EffectsGallery/blurcodebehindexample.xaml.cs#codebehindblurcodebehindexampleinline)]"
  syntax:
    content: public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get; set; }
    return:
      type: System.Windows.Media.Effects.BitmapEffect
      description: "要套用的點陣圖效果。"
  overload: System.Windows.UIElement.BitmapEffect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.BitmapEffectInput
  id: BitmapEffectInput
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: BitmapEffectInput
  nameWithType: UIElement.BitmapEffectInput
  fullName: System.Windows.UIElement.BitmapEffectInput
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定直接套用至此元素呈現內容的點陣圖效果輸入的來源。  這是相依性屬性。"
  remarks: "<a name=&quot;dependencyPropertyInfo_BitmapEffectInput&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.BitmapEffectInputProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.BitmapEffectInputProperty>"
  syntax:
    content: public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get; set; }
    return:
      type: System.Windows.Media.Effects.BitmapEffectInput
      description: "點陣圖效果的來源。"
  overload: System.Windows.UIElement.BitmapEffectInput*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.BitmapEffectInputProperty
  id: BitmapEffectInputProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: BitmapEffectInputProperty
  nameWithType: UIElement.BitmapEffectInputProperty
  fullName: System.Windows.UIElement.BitmapEffectInputProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.BitmapEffectInput*>相依性屬性。</xref:System.Windows.UIElement.BitmapEffectInput*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.BitmapEffectProperty
  id: BitmapEffectProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: BitmapEffectProperty
  nameWithType: UIElement.BitmapEffectProperty
  fullName: System.Windows.UIElement.BitmapEffectProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.BitmapEffect*>相依性屬性。</xref:System.Windows.UIElement.BitmapEffect*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty BitmapEffectProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.CacheMode
  id: CacheMode
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: CacheMode
  nameWithType: UIElement.CacheMode
  fullName: System.Windows.UIElement.CacheMode
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定快取的表示<xref href=&quot;System.Windows.UIElement&quot;> </xref>。"
  remarks: "當您需要以提高效能，會耗用的時間來呈現的內容時，請將 CacheMode 屬性。 如需詳細資訊，請參閱<xref:System.Windows.Media.BitmapCache>.</xref:System.Windows.Media.BitmapCache>"
  syntax:
    content: public System.Windows.Media.CacheMode CacheMode { get; set; }
    return:
      type: System.Windows.Media.CacheMode
      description: "A <xref href=&quot;System.Windows.Media.CacheMode&quot;> </xref>保存的快取的表示<xref href=&quot;System.Windows.UIElement&quot;> </xref>。"
  overload: System.Windows.UIElement.CacheMode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.CacheModeProperty
  id: CacheModeProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: CacheModeProperty
  nameWithType: UIElement.CacheModeProperty
  fullName: System.Windows.UIElement.CacheModeProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.CacheMode*>相依性屬性。</xref:System.Windows.UIElement.CacheMode*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty CacheModeProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.CaptureMouse
  id: CaptureMouse
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: CaptureMouse()
  nameWithType: UIElement.CaptureMouse()
  fullName: System.Windows.UIElement.CaptureMouse()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "嘗試強制滑鼠擷取至這個項目。"
  remarks: "若要擷取項目都必須啟用。 檢查是否<xref:System.Windows.UIElement.IsEnabled%2A>是`true`之前先呼叫 CaptureMouse。</xref:System.Windows.UIElement.IsEnabled%2A>       如果呼叫 CaptureMouse 傳回`true`，然後<xref:System.Windows.UIElement.IsMouseCaptured%2A>也`true`。</xref:System.Windows.UIElement.IsMouseCaptured%2A>       如果呼叫 CaptureMouse 傳回`true`，然後在<xref:System.Windows.UIElement.GotMouseCapture>和<xref:System.Windows.UIElement.IsMouseCapturedChanged>引發事件，與<xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName>事件中稱為 CaptureMouse 方法的項目為報告資料。</xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName> </xref:System.Windows.UIElement.IsMouseCapturedChanged> </xref:System.Windows.UIElement.GotMouseCapture> 如果您強制擷取時，您可能會干擾現有的擷取 — 尤其是使用與拖放滑鼠相關聯的擷取。       若要清除所有項目從滑鼠擷取，請呼叫<xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName>與`element`提供做為參數`null`。</xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName>"
  example:
  - "The following example implements a pair of handlers for mouse and key input combination that capture (and uncapture) the mouse and enable a special mouse mode for viewing a 3D model.  \n  \n [!code-cs[CubeAnimation#UIElementMouseCapture](~/add/codesnippet/csharp/CubeAnimation_XBAP/Trackball.cs#uielementmousecapture)]\n [!code-vb[CubeAnimation#UIElementMouseCapture](~/add/codesnippet/visualbasic/cubeanimation_xbap/trackball.vb#uielementmousecapture)]"
  syntax:
    content: public bool CaptureMouse ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已成功擷取滑鼠;，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.CaptureMouse*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.CaptureStylus
  id: CaptureStylus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: CaptureStylus()
  nameWithType: UIElement.CaptureStylus()
  fullName: System.Windows.UIElement.CaptureStylus()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "嘗試強制手寫筆擷取至這個項目。"
  remarks: "永遠根據基礎的預設手寫筆裝置的預設實作會傳回`true`。 不過，如果可延伸提供輸入系統的裝置實作的輸入的裝置，則可以替代手寫筆裝置的實作可能會傳回不同的結果，以建立系統。       當項目擷取手寫筆時，即使手寫筆在其範圍外接收手寫筆輸入。 通常只會在拖放作業期間擷取手寫筆。       呼叫這個方法會呼叫基礎的靜態<xref:System.Windows.Input.Stylus>方法<xref:System.Windows.Input.Stylus.Capture%2A>.</xref:System.Windows.Input.Stylus.Capture%2A> </xref:System.Windows.Input.Stylus> 實際擷取行為的實作方法的使用中的手寫筆裝置的實作。       若要擷取項目都必須啟用。 檢查是否<xref:System.Windows.UIElement.IsEnabled%2A>是`true`傳回之前呼叫 CaptureStylus。</xref:System.Windows.UIElement.IsEnabled%2A>       如果呼叫 CaptureStylus 傳回`true`，<xref:System.Windows.UIElement.IsStylusCaptured%2A>也`true`。</xref:System.Windows.UIElement.IsStylusCaptured%2A>"
  syntax:
    content: public bool CaptureStylus ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果成功擷取手寫筆。，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.CaptureStylus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)
  id: CaptureTouch(System.Windows.Input.TouchDevice)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: CaptureTouch(TouchDevice)
  nameWithType: UIElement.CaptureTouch(TouchDevice)
  fullName: System.Windows.UIElement.CaptureTouch(TouchDevice)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "嘗試強制觸控擷取至這個項目。"
  remarks: "會傳回 CaptureTouch`false`如果<xref:System.Windows.Input.TouchDevice>目前擷取另一個項目。</xref:System.Windows.Input.TouchDevice>       如果傳回 CaptureTouch `true`，然後在<xref:System.Windows.UIElement.GotTouchCapture>就會引發事件。</xref:System.Windows.UIElement.GotTouchCapture>       若要釋放擷取的單一觸控從這個項目，使用<xref:System.Windows.UIElement.ReleaseTouchCapture%2A>方法並指定要發行的觸控式裝置。</xref:System.Windows.UIElement.ReleaseTouchCapture%2A> 若要釋放所有的工作，從這個項目，使用<xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A>方法。</xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A>"
  syntax:
    content: public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);
    parameters:
    - id: touchDevice
      type: System.Windows.Input.TouchDevice
      description: "要擷取的裝置。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的觸控擷取至這個項目。，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.CaptureTouch*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>touchDevice</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.UIElement.Clip
  id: Clip
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Clip
  nameWithType: UIElement.Clip
  fullName: System.Windows.UIElement.Clip
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定用來定義的項目內容外框的幾何。  這是相依性屬性。"
  remarks: "呈現的版面配置中，會以視覺化方式裁剪幾何外部的項目。 幾何沒有是矩形。      <a name=&quot;dependencyPropertyInfo_Clip&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.ClipProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.ClipProperty>"
  example:
  - "This example shows how to define a framework element'sClipregion. To define a clip, use a <xref:System.Windows.Media.Geometry> (for example, an <xref:System.Windows.Media.EllipseGeometry>to set the element's Clipproperty. Only the area that is within the region of the geometry will be visible.  \n  \n The following example shows an <xref:System.Windows.Controls.Image>element without a defined clip region. Because no clip region is defined, the entire image is displayed.  \n  \n [!code-xml[ClipPathExample#2](~/add/codesnippet/xaml/ClipPathExample/ClipExample.xaml#2)]  \n  \n ![An object before applying a clip region](~/add/media/mil-task-clip-region-noclip.png \"An object before applying a clip region\")  \nImage with No Clip Region  \n  \n In the next example, an identical Image is created, except that it has a defined clip region. Only the part of the image that is within the area the <xref:System.Windows.Media.EllipseGeometry>will be displayed.  \n  \n [!code-xml[ClipPathExample#4](~/add/codesnippet/xaml/ClipPathExample/ClipExample.xaml#4)]  \n  \n ![A clipped object](~/add/media/mil-task-clip-region-ellispe.PNG \"A clipped object\")  \nImage with an Elliptical Clip Region  \n  \n The following example shows how animate a framework element's Clip region. In this example, an <xref:System.Windows.Media.EllipseGeometry> is used to define an elliptical clip region for an <xref:System.Windows.Controls.Image> element. A <xref:System.Windows.Media.Animation.PointAnimation> animates the ellipse geometry's <xref:System.Windows.Media.EllipseGeometry.Center%2A> property from (0, 0) to (200, 150). The animation starts playing after the image is loaded and repeats indefinitely.  \n  \n [!code-xml[ClipPathExample#5](~/add/codesnippet/xaml/ClipPathExample/ClipExample.xaml#5)]  \n  \n For the full sample, see the [Clip Region Sample](http://msdn.microsoft.com/en-us/83043a0b-f824-445f-9675-103280c5ca67)."
  syntax:
    content: public System.Windows.Media.Geometry Clip { get; set; }
    return:
      type: System.Windows.Media.Geometry
      description: "要用來裁剪區域大小的幾何。 預設值是 null <xref href=&quot;System.Windows.Media.Geometry&quot;> </xref>。"
  overload: System.Windows.UIElement.Clip*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ClipProperty
  id: ClipProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ClipProperty
  nameWithType: UIElement.ClipProperty
  fullName: System.Windows.UIElement.ClipProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.Clip*>相依性屬性。</xref:System.Windows.UIElement.Clip*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ClipProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ClipToBounds
  id: ClipToBounds
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ClipToBounds
  nameWithType: UIElement.ClipToBounds
  fullName: System.Windows.UIElement.ClipToBounds
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定值，指出是否要裁剪的內容，而無法放入包含項目大小的這個項目 （或來自此元素的子元素）。   這是相依性屬性。"
  remarks: "子項目 ClipToBounds 具有不同的效果，根據是否的高度和寬度的父項目由決定配置行為上<xref:System.Windows.FrameworkElement.Height%2A>/<xref:System.Windows.FrameworkElement.Width%2A>或<xref:System.Windows.FrameworkElement.MaxHeight%2A>/ <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</xref:System.Windows.FrameworkElement.MaxWidth%2A> </xref:System.Windows.FrameworkElement.MaxHeight%2A> </xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.FrameworkElement.Height%2A> <xref:System.Windows.FrameworkElement.MaxHeight%2A>/<xref:System.Windows.FrameworkElement.MaxWidth%2A>父代的項目一律採用 ClipToBounds 的值為何，以及有效裁剪一律會裁剪這些最大值為基礎的內容。</xref:System.Windows.FrameworkElement.MaxWidth%2A></xref:System.Windows.FrameworkElement.MaxHeight%2A> 在父系的<xref:System.Windows.FrameworkElement.Height%2A>/ <xref:System.Windows.FrameworkElement.Width%2A>ClipToBounds 時，設定將不裁剪內容`false`，但如果 ClipToBounds 裁剪的內容， `true`。</xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.FrameworkElement.Height%2A>       請注意，預設為`false`<xref:System.Windows.UIElement>類別</xref:System.Windows.UIElement>中實作時的一般行為 您可針對指定的項目衍生自<xref:System.Windows.UIElement>覆寫這個屬性預設為該執行個體中的相依性屬性中繼資料`true`改用。</xref:System.Windows.UIElement> 數個現有的衍生的類別覆寫此中繼資料及/或調整相依性屬性的預設值。       <xref:System.Windows.Controls.InkCanvas><xref:System.Windows.Controls.InkPresenter>，和<xref:System.Windows.Controls.Primitives.Popup>每個覆寫這個預設值為`true`。</xref:System.Windows.Controls.Primitives.Popup> </xref:System.Windows.Controls.InkPresenter></xref:System.Windows.Controls.InkCanvas>       <xref:System.Windows.FrameworkElement>覆寫這個相依性屬性的中繼資料。</xref:System.Windows.FrameworkElement> 具體來說，<xref:System.Windows.FrameworkElement>指定這個屬性可讓屬性值繼承 (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>是`true`中繼資料中)。</xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> </xref:System.Windows.FrameworkElement> 在此內容中的屬性值繼承表示，如果有任何其他值作為 ClipToBounds 透過本機值或樣式指派具有子元素，最接近的父項目的值，這個值就會指派 (同樣地，有兩種樣式，預設值，或在本機值)，然後從父元素的值會指派給所有未指派的子元素屬性系統。 實際上這表示您可以指定是否允許在根項目界限的剪輯，並將它做為值將會傳播到所有其子項目具有未特別指派`false`。      <a name=&quot;dependencyPropertyInfo_ClipToBounds&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.ClipToBoundsProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.ClipToBoundsProperty>"
  syntax:
    content: public bool ClipToBounds { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果應該裁剪內容。，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.ClipToBounds*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ClipToBoundsProperty
  id: ClipToBoundsProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ClipToBoundsProperty
  nameWithType: UIElement.ClipToBoundsProperty
  fullName: System.Windows.UIElement.ClipToBoundsProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.ClipToBounds*>相依性屬性。</xref:System.Windows.UIElement.ClipToBounds*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ClipToBoundsProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.CommandBindings
  id: CommandBindings
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: CommandBindings
  nameWithType: UIElement.CommandBindings
  fullName: System.Windows.UIElement.CommandBindings
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得集合的<xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref>與這個項目相關聯的物件。 A <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref>啟用這個項目的命令處理，並宣告命令、 其事件，以及由這個項目附加的處理常式之間的連結。"
  remarks: "另一種 CommandBindings 集合中填入的典型方式是使用<xref:System.Windows.Input.CommandManager>方法以程式設計的方式。</xref:System.Windows.Input.CommandManager>      <a name=&quot;xamlPropertyElementUsage_CommandBindings&quot;></a># # XAML 屬性項目用法```   <object>     <object.CommandBindings>       oneOrMoreCommandBindings     </object.CommandBindings>   </object>   ``` <a name=&quot;xamlValues_CommandBindings&quot;> </a> # # XAML 值*oneOrMoreCommandBindings*一或多個<xref:System.Windows.Input.CommandBinding>項目。</xref:System.Windows.Input.CommandBinding>       每一個都應該有<xref:System.Windows.Input.CommandBinding.Command%2A>屬性設定為已知的命令，而且屬性設定為<xref:System.Windows.Input.CommandBinding.CanExecute>和<xref:System.Windows.Input.CommandBinding.Executed>處理常式實作。</xref:System.Windows.Input.CommandBinding.Executed> </xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CommandBinding.Command%2A> 如需詳細資訊，請參閱<xref:System.Windows.Input.CommandBinding>.</xref:System.Windows.Input.CommandBinding>"
  example:
  - "The following example adds a <xref:System.Windows.Input.CommandBinding> to a window using markup. Note that in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], the <xref:System.Windows.Input.CommandBindingCollection> is not declared in the markup as an element; the collection object is inferred by the type that the property takes, and you populate the property element with one or more <xref:System.Windows.Input.CommandBinding> elements:  \n  \n [!code-xml[commandWithHandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \n  \n For more information about the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax for collections, see [XAML Syntax In Detail](~/add/includes/ajax-current-ext-md.md).  \n  \n The following example does essentially the same thing in code:  \n  \n [!code-cs[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]"
  syntax:
    content: public System.Windows.Input.CommandBindingCollection CommandBindings { get; }
    return:
      type: System.Windows.Input.CommandBindingCollection
      description: "所有的集合<xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref>物件。"
  overload: System.Windows.UIElement.CommandBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DesiredSize
  id: DesiredSize
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DesiredSize
  nameWithType: UIElement.DesiredSize
  fullName: System.Windows.UIElement.DesiredSize
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得這個項目在版面配置處理序的測量傳遞期間所計算的大小。"
  remarks: "這個屬性所傳回的值才會有效的度量如果的值<xref:System.Windows.UIElement.IsMeasureValid%2A>屬性是`true`。</xref:System.Windows.UIElement.IsMeasureValid%2A>       DesiredSize 通常會檢查，因為其中一個度量因素，當您實作的配置行為的會覆寫這類<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>， <xref:System.Windows.FrameworkElement.MeasureOverride%2A>，或<xref:System.Windows.UIElement.OnRender%2A>(在<xref:System.Windows.UIElement.OnRender%2A>情況下，您可以檢查<xref:System.Windows.UIElement.RenderSize%2A>相反地，但這取決於您的實作)。</xref:System.Windows.UIElement.RenderSize%2A> </xref:System.Windows.UIElement.OnRender%2A> </xref:System.Windows.UIElement.OnRender%2A> </xref:System.Windows.FrameworkElement.MeasureOverride%2A> </xref:System.Windows.FrameworkElement.ArrangeOverride%2A> 根據這種情況，DesiredSize 可能完全代表會實作邏輯、 DesiredSize 的條件約束可能會套用，並且這類條件約束也可能會變更其他特性的父項目或子項目。 例如，支援可捲動區域 （但選擇不是衍生自已經啟用可捲動區域的 WPF 架構層級控制項） 的控制項無法比較 DesiredSize 可用的大小。 控制項無法再設定啟用捲軸中的內部狀態[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]該控制項。 或 DesiredSize 就可能在某些情況下也會忽略。"
  example:
  - "The following example shows DesiredSize as part of a <xref:System.Windows.FrameworkElement.MeasureOverride%2A> implementation. Notice how <xref:System.Windows.UIElement.Measure%2A> is called immediately prior to obtaining DesiredSize. This assures that DesiredSize holds a legitimate value.  \n  \n [!code-cs[PlotPanel#2](~/add/codesnippet/csharp/PlotPanel_csharp/PlotPanel.cs#2)]\n [!code-cpp[PlotPanel#2](~/add/codesnippet/cpp/plotpanel/PlotPanel.cpp#2)]\n [!code-vb[PlotPanel#2](~/add/codesnippet/visualbasic/PlotPanel/PlotPanel.vb#2)]"
  syntax:
    content: public System.Windows.Size DesiredSize { get; }
    return:
      type: System.Windows.Size
      description: "計算的大小，而成為排列傳遞所需的大小。"
  overload: System.Windows.UIElement.DesiredSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DragEnter
  id: DragEnter
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DragEnter
  nameWithType: UIElement.DragEnter
  fullName: System.Windows.UIElement.DragEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "輸入的系統回報以此項目作為拖曳目標的基礎拖曳事件時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName>附加這個類別中，事件，以便 DragEnter 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> 附加至 DragEnter 事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName>      <a name=&quot;routedEventInfo_DragEnter&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.DragEnterEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.DragEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement.PreviewDragEnter>。</xref:System.Windows.UIElement.PreviewDragEnter> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.DragEnterEvent>      -覆寫<xref:System.Windows.UIElement.OnDragEnter%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnDragEnter%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler DragEnter;
    return:
      type: System.Windows.DragEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DragEnterEvent
  id: DragEnterEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DragEnterEvent
  nameWithType: UIElement.DragEnterEvent
  fullName: System.Windows.UIElement.DragEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.DragEnter&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DragLeave
  id: DragLeave
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DragLeave
  nameWithType: UIElement.DragLeave
  fullName: System.Windows.UIElement.DragLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "輸入的系統回報以此項目作為拖曳來源的基礎拖曳事件時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName>附加這個類別的事件，以便 DragLeave 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> 附加至 DragLeave 事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName>      <a name=&quot;routedEventInfo_DragLeave&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.DragLeaveEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.DragEventHandler>|     -對應通道的事件為<xref:System.Windows.DragDrop.PreviewDragLeave>。</xref:System.Windows.DragDrop.PreviewDragLeave> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.DragLeaveEvent>      -覆寫<xref:System.Windows.UIElement.OnDragLeave%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnDragLeave%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler DragLeave;
    return:
      type: System.Windows.DragEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DragLeaveEvent
  id: DragLeaveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DragLeaveEvent
  nameWithType: UIElement.DragLeaveEvent
  fullName: System.Windows.UIElement.DragLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.DragLeave&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DragOver
  id: DragOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DragOver
  nameWithType: UIElement.DragOver
  fullName: System.Windows.UIElement.DragOver
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "輸入的系統回報以此項目作為可能置放目標的基礎拖曳事件時發生。"
  remarks: "即使拖曳來自項目範圍中，就會發生此事件。 如果拖曳啟動界限之外，然後移動到內部，也會引發這個事件，以及<xref:System.Windows.UIElement.DragEnter>和相關的預覽事件。</xref:System.Windows.UIElement.DragEnter>       此事件會建立一個別名<xref:System.Windows.DragDrop.DragOver?displayProperty=fullName>附加這個類別的事件，以便拖曳經過時顯示屬於類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> 附加至拖曳經過時顯示事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.DragOver?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.DragOver?displayProperty=fullName>      <a name=&quot;routedEventInfo_DragOver&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.DragOverEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.DragEventHandler>|     -對應通道的事件為<xref:System.Windows.DragDrop.PreviewDragOver>。</xref:System.Windows.DragDrop.PreviewDragOver> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.DragOverEvent>      -覆寫<xref:System.Windows.UIElement.OnDragOver%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnDragOver%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler DragOver;
    return:
      type: System.Windows.DragEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DragOverEvent
  id: DragOverEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DragOverEvent
  nameWithType: UIElement.DragOverEvent
  fullName: System.Windows.UIElement.DragOverEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.DragOver&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragOverEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Drop
  id: Drop
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Drop
  nameWithType: UIElement.Drop
  fullName: System.Windows.UIElement.Drop
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於輸入的系統報告其下的置放事件與這個項目作為置放目標。"
  remarks: "此事件會建立一個別名<xref:System.Windows.DragDrop.Drop?displayProperty=fullName>附加的事件，這個類別，因此該 Drop 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.Drop?displayProperty=fullName> 附加至卸除事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.Drop?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.Drop?displayProperty=fullName>      <a name=&quot;routedEventInfo_Drop&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.DropEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.DragEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement.PreviewDrop>。</xref:System.Windows.UIElement.PreviewDrop> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.DropEvent>      -覆寫<xref:System.Windows.UIElement.OnDrop%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnDrop%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler Drop;
    return:
      type: System.Windows.DragEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DropEvent
  id: DropEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DropEvent
  nameWithType: UIElement.DropEvent
  fullName: System.Windows.UIElement.DropEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.Drop&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DropEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Effect
  id: Effect
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Effect
  nameWithType: UIElement.Effect
  fullName: System.Windows.UIElement.Effect
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定要套用至點陣圖效果<xref href=&quot;System.Windows.UIElement&quot;> </xref>。 這是相依性屬性。"
  remarks: "若要將點陣圖效果套用至<xref:System.Windows.UIElement>。</xref:System.Windows.UIElement>使用效果屬性      <a name=&quot;dependencyPropertyInfo_Effect&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.EffectProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.EffectProperty>"
  example:
  - "The following XAML shows how to assign a custom <xref:System.Windows.Media.Effects.ShaderEffect> to the Effect property.  \n  \n [!code-xml[System.Windows.Media.Effects.ShaderEffect#1000](~/add/codesnippet/xaml/ShaderEffectDemo/Window1.xaml#1000)]"
  syntax:
    content: public System.Windows.Media.Effects.Effect Effect { get; set; }
    return:
      type: System.Windows.Media.Effects.Effect
      description: "<xref href=&quot;System.Windows.Media.Effects.Effect&quot;> </xref>代表點陣圖效果。"
  overload: System.Windows.UIElement.Effect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.EffectProperty
  id: EffectProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: EffectProperty
  nameWithType: UIElement.EffectProperty
  fullName: System.Windows.UIElement.EffectProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.Effect*>相依性屬性。</xref:System.Windows.UIElement.Effect*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty EffectProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Focus
  id: Focus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Focus()
  nameWithType: UIElement.Focus()
  fullName: System.Windows.UIElement.Focus()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "嘗試將焦點設定至這個項目。"
  remarks: "若要可設定焦點，<xref:System.Windows.UIElement.Focusable%2A>和<xref:System.Windows.UIElement.IsEnabled%2A>兩者都必須是`true`。</xref:System.Windows.UIElement.IsEnabled%2A> </xref:System.Windows.UIElement.Focusable%2A>       即使項目是在特定的樹狀結構中的可設定焦點且已啟用，事件處理，（例如，針對複合控制項） 可能會回應預覽焦點事件藉由禁止焦點，因此這個方法會傳回`false`。       焦點通常由兩個不同的概念︰ 鍵盤焦點和邏輯焦點，並不一定相同。  如需詳細資訊，請參閱[焦點概觀](~/add/includes/ajax-current-ext-md.md)或[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       如果呼叫焦點傳回`true`，<xref:System.Windows.UIElement.IsKeyboardFocused%2A>和<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>也`true`。</xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> </xref:System.Windows.UIElement.IsKeyboardFocused%2A>       如果相關的屬性尚未`true`，當您呼叫焦點，一或多個下列事件會依照下列順序引發︰ <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>， <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>（來源為新的焦點目標） <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>， <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>， <xref:System.Windows.UIElement.LostKeyboardFocus>， <xref:System.Windows.UIElement.GotKeyboardFocus>（來源為新的焦點目標）。</xref:System.Windows.UIElement.GotKeyboardFocus> </xref:System.Windows.UIElement.LostKeyboardFocus> </xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> </xref:System.Windows.UIElement.IsKeyboardFocusedChanged> </xref:System.Windows.UIElement.PreviewGotKeyboardFocus> </xref:System.Windows.UIElement.PreviewLostKeyboardFocus>       為了讓這個呼叫才會成功，應用程式中的某個其他項目需要先前有焦點。"
  example:
  - "The following example sets focus to a <xref:System.Windows.Controls.TextBox> referenced by <xref:System.Windows.FrameworkElement.Name%2A>, and then adjusts the position of the cursor within the <xref:System.Windows.Controls.TextBox>.  \n  \n [!code-cs[TextBox_CursorToEnd#UIElementFocus](~/add/codesnippet/csharp/CursorToEnd/Window1.xaml.cs#uielementfocus)]\n [!code-vb[TextBox_CursorToEnd#UIElementFocus](~/add/codesnippet/visualbasic/CursorToEnd/Window1.xaml.vb#uielementfocus)]"
  syntax:
    content: public bool Focus ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果鍵盤焦點時，邏輯焦點設定至這個項目。<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果只有邏輯焦點設定至這個項目，或是呼叫此方法不未強制變更焦點。"
  overload: System.Windows.UIElement.Focus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Focusable
  id: Focusable
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Focusable
  nameWithType: UIElement.Focusable
  fullName: System.Windows.UIElement.Focusable
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定值，指出元素是否能夠接收焦點。  這是相依性屬性。"
  remarks: "只有已取得焦點的項目收到鍵盤輸入。       可設定焦點是[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]實際上會相依性屬性的屬性存取子。 這個特定的相依性屬性相當常有衍生的項目類別，尤其是在控制項中以不同方式設定其明顯&quot;default&quot;值。 這通常發生在兩種方式之一:-相依性屬性繼承自特定的衍生類別，但該衍生的類別會覆寫之相依性屬性的中繼資料，並變更屬性的預設值。      -樣式或範本套用至項目，以不同的方式設定該相依性屬性的值。       比方說，明顯 「 預設 」 的 Focusable 的<xref:System.Windows.Controls.Button>控制項將會是`true`，即使<xref:System.Windows.Controls.Button>繼承為 Focusable[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]屬性直接從<xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.Controls.Button> </xref:System.Windows.Controls.Button> 這是因為套用的中繼資料值可設定焦點的相依性屬性遭到覆寫的靜態建構函式內<xref:System.Windows.Controls.Control>基底類別，之間平均分攤工作量<xref:System.Windows.Controls.Button>和<xref:System.Windows.UIElement>類別階層架構中。</xref:System.Windows.UIElement> </xref:System.Windows.Controls.Button> </xref:System.Windows.Controls.Control>       當繼承<xref:System.Windows.Controls.Control>或其衍生的類別，<xref:System.Windows.Controls.Control>會重新定義預設值，這個屬性是`true`。</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Control>       當繼承<xref:System.Windows.Controls.Label>(也就是<xref:System.Windows.Controls.Control>衍生的類別)，預設值一次重新定義為`false`。</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Label>      <a name=&quot;dependencyPropertyInfo_Focusable&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.FocusableProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.FocusableProperty>"
  example:
  - "The following example code illustrates a control template for a particular custom control, which sets Focusable `false` on one of the elements within the template.  \n  \n [!code-xml[RichTextBox_NoScrollViewer#_ControlTemplate](~/add/codesnippet/xaml/richtextbox_noscrollviewer/window1.xaml#_controltemplate)]\n [!code-xml[RichTextBox_NoScrollViewer#_ControlTemplate](~/add/codesnippet/xaml/p-system.windows.uieleme_9_1.xaml)]"
  syntax:
    content: public bool Focusable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果項目，則可設定焦點。否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>，但請參閱 < 備註 >。"
  overload: System.Windows.UIElement.Focusable*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.FocusableChanged
  id: FocusableChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: FocusableChanged
  nameWithType: UIElement.FocusableChanged
  fullName: System.Windows.UIElement.FocusableChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref:System.Windows.UIElement.Focusable*>屬性變更。</xref:System.Windows.UIElement.Focusable*>"
  remarks: "這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.FocusableProperty
  id: FocusableProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: FocusableProperty
  nameWithType: UIElement.FocusableProperty
  fullName: System.Windows.UIElement.FocusableProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.Focusable*>相依性屬性。</xref:System.Windows.UIElement.Focusable*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty FocusableProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  id: GetAnimationBaseValue(System.Windows.DependencyProperty)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GetAnimationBaseValue(DependencyProperty)
  nameWithType: UIElement.GetAnimationBaseValue(DependencyProperty)
  fullName: System.Windows.UIElement.GetAnimationBaseValue(DependencyProperty)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "傳回基底屬性值，這個項目，並忽略任何可能上指定屬性動畫執行中的值，或停止動畫。"
  remarks: "如果屬性未不附加任何動畫，則 GetAnimationBaseValue 傳回值一定是相同<xref:System.Windows.DependencyObject.GetValue%2A>傳回值。</xref:System.Windows.DependencyObject.GetValue%2A> 如果附加的動畫，然後所有的可能動畫衍生值包括開始和停止值會被忽略，而且屬性值取決於所有可能的輸入。 如需詳細資訊，請參閱[相依性屬性的值優先順序](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example implements a handler that reports the base value of an animated <xref:System.Windows.FrameworkElement.Width%2A> property on a <xref:System.Windows.Controls.Button>, as well as the base value of a transform.  \n  \n [!code-cs[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/add/codesnippet/csharp/TimingBehavior_csharp/GetAnimationBaseValueExample.cs#getanimationbasevalue)]\n [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/add/codesnippet/visualbasic/timingbehavior_vb/getanimationbasevalueexample.vb#getanimationbasevalue)]"
  syntax:
    content: public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "要檢查的相依性屬性。"
    return:
      type: System.Object
      description: "屬性值，如同指定的相依性屬性未附加任何動畫。"
  overload: System.Windows.UIElement.GetAnimationBaseValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GetLayoutClip(System.Windows.Size)
  id: GetLayoutClip(System.Windows.Size)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GetLayoutClip(Size)
  nameWithType: UIElement.GetLayoutClip(Size)
  fullName: System.Windows.UIElement.GetLayoutClip(Size)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "傳回表示如果要裁剪之區域的替代裁剪幾何<xref:System.Windows.UIElement.ClipToBounds*>會設定為<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.UIElement.ClipToBounds*>"
  remarks: "預設實作會傳回合法的值，但未使用`layoutSlotSize`在其計算中的參數。 而是使用<xref:System.Windows.UIElement.RenderSize%2A>.</xref:System.Windows.UIElement.RenderSize%2A>值       本質上覆寫這個方法由立即衍生<xref:System.Windows.FrameworkElement>類別，而<xref:System.Windows.FrameworkElement>覆寫會產生更複雜的行為，在一般的 WPF 架構層級項目。</xref:System.Windows.FrameworkElement> </xref:System.Windows.FrameworkElement> 如需詳細資訊，請參閱<xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=fullName>.</xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=fullName>"
  syntax:
    content: protected virtual System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);
    parameters:
    - id: layoutSlotSize
      type: System.Windows.Size
      description: "提供項目所使用的大小。"
    return:
      type: System.Windows.Media.Geometry
      description: "可能的裁剪幾何。"
  overload: System.Windows.UIElement.GetLayoutClip*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GetUIParentCore
  id: GetUIParentCore
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GetUIParentCore()
  nameWithType: UIElement.GetUIParentCore()
  fullName: System.Windows.UIElement.GetUIParentCore()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在衍生類別中覆寫，則會傳回替代[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]沒有視覺父代有此項目的父代。"
  remarks: "預設的虛擬實作這個方法會傳回`null`。 <xref:System.Windows.FrameworkElement>提供實際的實作。</xref:System.Windows.FrameworkElement>       替代的父代會用於事件的路由，在其中的項目會建立替代父結構使其事件路由偏離標準模式的視覺化樹狀目錄以標準的父代，路由的方式或在預覽路由策略中向下的情況下。"
  syntax:
    content: protected virtual System.Windows.DependencyObject GetUIParentCore ();
    parameters: []
    return:
      type: System.Windows.DependencyObject
      description: "物件，衍生類別的實作有替代的父代的連接至報表。"
  overload: System.Windows.UIElement.GetUIParentCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GiveFeedback
  id: GiveFeedback
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GiveFeedback
  nameWithType: UIElement.GiveFeedback
  fullName: System.Windows.UIElement.GiveFeedback
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於輸入的系統報告其下的拖放事件，包括這個項目。"
  remarks: "GiveFeedback 事件可讓您修改滑鼠指標外觀，以便將使用者視覺化回應提供拖放作業期間的拖曳事件來源。 視覺回應強調拖放作業正在進行。       此事件會建立一個別名<xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName>附加這個類別的事件，以便 GiveFeedback 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> 附加至 GiveFeedback 事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName>      <a name=&quot;routedEventInfo_GiveFeedback&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.GiveFeedbackEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.GiveFeedbackEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement.PreviewGiveFeedback>。</xref:System.Windows.UIElement.PreviewGiveFeedback> </xref:System.Windows.GiveFeedbackEventHandler> </xref:System.Windows.UIElement.GiveFeedbackEvent>      -覆寫<xref:System.Windows.UIElement.OnGiveFeedback%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnGiveFeedback%2A>"
  syntax:
    content: public event System.Windows.GiveFeedbackEventHandler GiveFeedback;
    return:
      type: System.Windows.GiveFeedbackEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GiveFeedbackEvent
  id: GiveFeedbackEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GiveFeedbackEvent
  nameWithType: UIElement.GiveFeedbackEvent
  fullName: System.Windows.UIElement.GiveFeedbackEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.GiveFeedback&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotFocus
  id: GotFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotFocus
  nameWithType: UIElement.GotFocus
  fullName: System.Windows.UIElement.GotFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素取得邏輯焦點時發生。"
  remarks: "如果使用方法呼叫刻意強制焦點，但上一個鍵盤焦點存在於不同的範圍與鍵盤焦點不同邏輯焦點。 在此案例中，鍵盤焦點會維持其所在和項目位置<xref:System.Windows.UIElement.Focus%2A>方法呼叫仍取得邏輯焦點。</xref:System.Windows.UIElement.Focus%2A>       這個事件的更精確的解釋是它時引發的值<xref:System.Windows.UIElement.IsFocused%2A>屬性路由的項目已從`false`至`true`。</xref:System.Windows.UIElement.IsFocused%2A>       由於這個事件會使用反昇路由，接收焦點的項目可能是子元素，而非項目實際附加事件處理常式。 請檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際取得焦點的項目中。</xref:System.Windows.RoutedEventArgs.Source%2A>      <a name=&quot;routedEventInfo_GotFocus&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.GotFocusEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.RoutedEventHandler>|     -沒有對應通道的事件。</xref:System.Windows.RoutedEventHandler> </xref:System.Windows.UIElement.GotFocusEvent>      -覆寫<xref:System.Windows.UIElement.OnGotFocus%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnGotFocus%2A>"
  syntax:
    content: public event System.Windows.RoutedEventHandler GotFocus;
    return:
      type: System.Windows.RoutedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotFocusEvent
  id: GotFocusEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotFocusEvent
  nameWithType: UIElement.GotFocusEvent
  fullName: System.Windows.UIElement.GotFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.GotFocus&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotKeyboardFocus
  id: GotKeyboardFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotKeyboardFocus
  nameWithType: UIElement.GotKeyboardFocus
  fullName: System.Windows.UIElement.GotKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "鍵盤以此元素為焦點時發生。"
  remarks: "<xref:System.Windows.UIElement.IsKeyboardFocusedChanged>是類似的事件可追蹤之屬性維護的項目; 焦點狀態中的狀態變更GotKeyboardFocus 引發的許多相同的情況。</xref:System.Windows.UIElement.IsKeyboardFocusedChanged>       這個事件會使用反昇路由，因為具有焦點的項目可能是子元素，而非項目實際附加事件處理常式。 請檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際具有焦點的項目中。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件會建立一個別名<xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName>附加這個類別的事件，以便 GotKeyboardFocus 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> 附加至 GotKeyboardFocus 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName>      <a name=&quot;routedEventInfo_GotKeyboardFocus&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.GotKeyboardFocusEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement.PreviewGotKeyboardFocus>。</xref:System.Windows.UIElement.PreviewGotKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.UIElement.GotKeyboardFocusEvent>      -覆寫<xref:System.Windows.UIElement.OnGotKeyboardFocus%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnGotKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotKeyboardFocusEvent
  id: GotKeyboardFocusEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotKeyboardFocusEvent
  nameWithType: UIElement.GotKeyboardFocusEvent
  fullName: System.Windows.UIElement.GotKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.GotKeyboardFocus&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotMouseCapture
  id: GotMouseCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotMouseCapture
  nameWithType: UIElement.GotMouseCapture
  fullName: System.Windows.UIElement.GotMouseCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素擷取滑鼠時發生。"
  remarks: "當項目捕捉到滑鼠時，它收到滑鼠輸入，即使將滑鼠指標位於其範圍外。 滑鼠通常只會在拖放作業期間擷取並且擷取之前拖放作業的拖放動作發生。       這個事件會使用反昇路由，因為已擷取的項目可能是子元素，而非項目實際附加事件處理常式。 請檢查<xref:System.Windows.RoutedEventArgs.Source%2A>在事件資料，以判斷實際項目具有滑鼠擷取。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件會建立一個別名<xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName>附加這個類別的事件，以便 GotMouseCapture 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> 附加至 GotMouseCapture 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName>      <a name=&quot;routedEventInfo_GotMouseCapture&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.GotMouseCaptureEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.MouseEventHandler>|     -沒有定義對應通道的事件。</xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement.GotMouseCaptureEvent>      -覆寫<xref:System.Windows.UIElement.OnGotMouseCapture%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnGotMouseCapture%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler GotMouseCapture;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotMouseCaptureEvent
  id: GotMouseCaptureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotMouseCaptureEvent
  nameWithType: UIElement.GotMouseCaptureEvent
  fullName: System.Windows.UIElement.GotMouseCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.GotMouseCapture&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotStylusCapture
  id: GotStylusCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotStylusCapture
  nameWithType: UIElement.GotStylusCapture
  fullName: System.Windows.UIElement.GotStylusCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素擷取手寫筆時發生。"
  remarks: "當項目擷取手寫筆時，即使指標位於其範圍外接收手寫筆輸入。 手寫筆通常只會在拖放作業期間擷取，並保留擷取，直到拖放作業的拖放動作發生。       這個事件會使用反昇路由，因為已擷取的項目可能是子元素，而非項目實際附加事件處理常式。 請檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷已擷取的實際項目中。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件會建立這個類別的附加事件的別名，以便 GotStylusCapture 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> 附加至 GotStylusCapture 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName>      <a name=&quot;routedEventInfo_GotStylusCapture&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.GotStylusCaptureEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -沒有定義對應通道的事件。</xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.GotStylusCaptureEvent>      -覆寫<xref:System.Windows.UIElement.OnGotStylusCapture%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnGotStylusCapture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler GotStylusCapture;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotStylusCaptureEvent
  id: GotStylusCaptureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotStylusCaptureEvent
  nameWithType: UIElement.GotStylusCaptureEvent
  fullName: System.Windows.UIElement.GotStylusCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.GotStylusCapture&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotTouchCapture
  id: GotTouchCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotTouchCapture
  nameWithType: UIElement.GotTouchCapture
  fullName: System.Windows.UIElement.GotTouchCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於觸控擷取至這個項目。"
  remarks: "<a name=&quot;routedEventInfo_GotTouchCapture&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.GotTouchCaptureEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.EventHandler%601>的型別<xref:System.Windows.Input.TouchEventArgs>。 |     -覆寫<xref:System.Windows.UIElement.OnGotTouchCapture%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnGotTouchCapture%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.GotTouchCaptureEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> GotTouchCapture;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotTouchCaptureEvent
  id: GotTouchCaptureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotTouchCaptureEvent
  nameWithType: UIElement.GotTouchCaptureEvent
  fullName: System.Windows.UIElement.GotTouchCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.GotTouchCapture&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.HasAnimatedProperties
  id: HasAnimatedProperties
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: HasAnimatedProperties
  nameWithType: UIElement.HasAnimatedProperties
  fullName: System.Windows.UIElement.HasAnimatedProperties
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出這個項目是否有任何動畫的屬性。"
  remarks: "這個屬性會傳回`true`的持續性 （unclocked，一律執行） 的動畫，或有特定的時間表的動畫。"
  syntax:
    content: public bool HasAnimatedProperties { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個項目具有動畫附加至其任何屬性。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.HasAnimatedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.HasEffectiveKeyboardFocus
  id: HasEffectiveKeyboardFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: HasEffectiveKeyboardFocus
  nameWithType: UIElement.HasEffectiveKeyboardFocus
  fullName: System.Windows.UIElement.HasEffectiveKeyboardFocus
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出是否<xref href=&quot;System.Windows.UIElement&quot;></xref>具有焦點。"
  remarks: "子類別可以覆寫這個屬性來指定項目具有鍵盤焦點時。  這非常有用時您<xref:System.Windows.UIElement>包含項目具有鍵盤焦點，而且您想有焦點的報表項目。</xref:System.Windows.UIElement>"
  syntax:
    content: protected virtual bool HasEffectiveKeyboardFocus { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Windows.UIElement&quot;></xref>焦點; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.HasEffectiveKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)
  id: HitTestCore(System.Windows.Media.GeometryHitTestParameters)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: HitTestCore(GeometryHitTestParameters)
  nameWithType: UIElement.HitTestCore(GeometryHitTestParameters)
  fullName: System.Windows.UIElement.HitTestCore(GeometryHitTestParameters)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "實作&lt;xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName&gt;以提供基底項目點擊測試行為 (傳回<xref href=&quot;System.Windows.Media.GeometryHitTestResult&quot;> </xref>)。"
  remarks: "請參閱原始虛擬方法<xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName>有關進一步覆寫這個方法在衍生類別。</xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName> 請注意，數個特定的控制項 (<xref:System.Windows.Controls.TextBlock>，例如) 沒有相異的實作，覆寫這一個。</xref:System.Windows.Controls.TextBlock>       這個方法不是從應用程式程式碼呼叫。 這個方法支援 （滑鼠指標是否為某項目，例如），輸入系統的各個層面所公開的內部點擊測試行為。"
  syntax:
    content: protected override System.Windows.Media.GeometryHitTestResult HitTestCore (System.Windows.Media.GeometryHitTestParameters hitTestParameters);
    parameters:
    - id: hitTestParameters
      type: System.Windows.Media.GeometryHitTestParameters
      description: "描述的點擊的測試，若要執行，包括初始點擊的點。"
    return:
      type: System.Windows.Media.GeometryHitTestResult
      description: "結果的測試，包括評估的幾何。"
  overload: System.Windows.UIElement.HitTestCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)
  id: HitTestCore(System.Windows.Media.PointHitTestParameters)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: HitTestCore(PointHitTestParameters)
  nameWithType: UIElement.HitTestCore(PointHitTestParameters)
  fullName: System.Windows.UIElement.HitTestCore(PointHitTestParameters)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "實作<xref:System.Windows.Media.Visual.HitTestCore*>以提供基底項目點擊測試行為 (傳回<xref href=&quot;System.Windows.Media.HitTestResult&quot;> </xref>)。</xref:System.Windows.Media.Visual.HitTestCore*>"
  remarks: "請參閱原始虛擬方法<xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName>有關進一步覆寫這個方法在衍生類別。</xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName> 請注意，數個特定的控制項 (<xref:System.Windows.Controls.TextBlock>，例如) 沒有覆寫 HitTestCore <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>所定義的不同實作</xref:System.Windows.Controls.TextBlock>       這個方法不是從應用程式程式碼呼叫。 這個方法支援 （滑鼠指標是否為某項目，例如），輸入系統的各個層面所公開的內部點擊測試行為。"
  syntax:
    content: protected override System.Windows.Media.HitTestResult HitTestCore (System.Windows.Media.PointHitTestParameters hitTestParameters);
    parameters:
    - id: hitTestParameters
      type: System.Windows.Media.PointHitTestParameters
      description: "描述的點擊的測試，若要執行，包括初始點擊的點。"
    return:
      type: System.Windows.Media.HitTestResult
      description: "結果的測試，包括受評估的點。"
  overload: System.Windows.UIElement.HitTestCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.InputBindings
  id: InputBindings
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: InputBindings
  nameWithType: UIElement.InputBindings
  fullName: System.Windows.UIElement.InputBindings
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得與這個項目相關聯的輸入繫結的集合。"
  remarks: "輸入繫結支援命令與輸入裝置繫的結。 例如，<xref:System.Windows.Input.MouseBinding>實作輸入包含的滑鼠裝置特定內容的繫結。</xref:System.Windows.Input.MouseBinding>       輸入繫結的集合會包含屬於此類型的輸入繫結以及宣告執行個體的輸入繫結。       相關的屬性， <xref:System.Windows.UIElement.CommandBindings%2A>，維持命令繫結的集合。</xref:System.Windows.UIElement.CommandBindings%2A> 這些不同從輸入繫結，因為它們代表的下一個層級的動作會繫結至已知命令的命令處理。      <a name=&quot;xamlPropertyElementUsage_InputBindings&quot;></a># # XAML 屬性項目用法```   <object>     <object.InputBindings>       oneOrMoreInputBindings     </object.InputBindings>   </object>   ``` <a name=&quot;xamlValues_InputBindings&quot;> </a> # # XAML 值*oneOrMoreInputBindings*一或多個<xref:System.Windows.Input.InputBinding>項目 (通常<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>衍生類別)。</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.InputBinding>       每一個都應該要有<xref:System.Windows.Input.InputBinding.Command%2A>和<xref:System.Windows.Input.InputBinding.Gesture%2A>屬性設定。</xref:System.Windows.Input.InputBinding.Gesture%2A> </xref:System.Windows.Input.InputBinding.Command%2A>"
  example:
  - "The following example populates this property on a <xref:System.Windows.Window>, with a single <xref:System.Windows.Input.KeyBinding>.  \n  \n [!code-xml[CommandingOverviewSnippets#CommandingOverviewXAMLKeyBinding](~/add/codesnippet/xaml/CommandingOverviewSnippets/Window1.xaml#commandingoverviewxamlkeybinding)]  \n  \n For more information about the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax for collections, see [XAML Syntax In Detail](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.Input.InputBindingCollection InputBindings { get; }
    return:
      type: System.Windows.Input.InputBindingCollection
      description: "輸入繫結的集合。"
  overload: System.Windows.UIElement.InputBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.InputHitTest(System.Windows.Point)
  id: InputHitTest(System.Windows.Point)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: InputHitTest(Point)
  nameWithType: UIElement.InputHitTest(Point)
  fullName: System.Windows.UIElement.InputHitTest(Point)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "傳回位於指定座標，相對於目前的項目原點的目前項目內的輸入項目。"
  remarks: "<xref:System.Windows.IInputElement>傳回為傳回類型，因為該類型是這兩個<xref:System.Windows.UIElement>和<xref:System.Windows.ContentElement>。</xref:System.Windows.ContentElement></xref:System.Windows.UIElement>的通用介面</xref:System.Windows.IInputElement> 然後可以適當地轉型傳回型別或使用介面的執行個體所定義的特定成員<xref:System.Windows.IInputElement>介面。</xref:System.Windows.IInputElement>       呼叫這個方法通常是無法從應用程式程式碼。 呼叫這個方法僅適用於您想要重新實作大量已出現，例如滑鼠裝置的邏輯重新建立的低階輸入功能。       <xref:System.Windows.IContentHost>合約<xref:System.Windows.IContentHost.InputHitTest%2A>方法相同的簽章，以明確地實作選擇的一些項目。</xref:System.Windows.IContentHost.InputHitTest%2A></xref:System.Windows.IContentHost>"
  syntax:
    content: public System.Windows.IInputElement InputHitTest (System.Windows.Point point);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "此項目內座標位移。"
    return:
      type: System.Windows.IInputElement
      description: "位於指定位置處的項目子系。"
  overload: System.Windows.UIElement.InputHitTest*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.InvalidateArrange
  id: InvalidateArrange
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: InvalidateArrange()
  nameWithType: UIElement.InvalidateArrange()
  fullName: System.Windows.UIElement.InvalidateArrange()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "使項目的排列狀態 （配置） 失效。 之後失效，項目將擁有其配置更新，除非後續<xref:System.Windows.UIElement.UpdateLayout*>。</xref:System.Windows.UIElement.UpdateLayout*>強制，否則會以非同步方式發生"
  remarks: "經常呼叫 InvalidateArrange 或特定的<xref:System.Windows.UIElement.UpdateLayout%2A>有顯著的效能影響。</xref:System.Windows.UIElement.UpdateLayout%2A> 因此，除非絕對需要精確的配置狀態的其他後續呼叫，呼叫這個方法來避免[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]程式碼中。 您可能會在此呼叫 InvalidateArrange 進階的案例是如果您建立<xref:System.Windows.PropertyChangedCallback>不在相依性屬性的<xref:System.Windows.Freezable>或<xref:System.Windows.FrameworkElement>衍生類別，其變更時，仍然會影響版面配置的排列傳遞。</xref:System.Windows.FrameworkElement> </xref:System.Windows.Freezable> </xref:System.Windows.PropertyChangedCallback>"
  syntax:
    content: public void InvalidateArrange ();
    parameters: []
  overload: System.Windows.UIElement.InvalidateArrange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.InvalidateMeasure
  id: InvalidateMeasure
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: InvalidateMeasure()
  nameWithType: UIElement.InvalidateMeasure()
  fullName: System.Windows.UIElement.InvalidateMeasure()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "使項目的測量狀態 （配置） 失效。"
  remarks: "呼叫這個方法也會呼叫<xref:System.Windows.UIElement.InvalidateArrange%2A>就內部而言，不是需要呼叫 InvalidateMeasure 和<xref:System.Windows.UIElement.InvalidateArrange%2A>連續。</xref:System.Windows.UIElement.InvalidateArrange%2A> </xref:System.Windows.UIElement.InvalidateArrange%2A> 之後失效，項目將擁有其配置更新，會以非同步的方式，除非<xref:System.Windows.UIElement.UpdateLayout%2A>呼叫以強制變更同步的配置。</xref:System.Windows.UIElement.UpdateLayout%2A>       WPF 架構層級配置系統會其自己的變更項目的視覺化樹狀結構中處理，並在最常見版面配置失效的情況下版面配置系統會呼叫這個方法只有在必要時對等項目。 如果您要產生完整的版面配置的實作，可直接操作項目樹狀結構中，或類似進階案例，您才應該呼叫這個方法。 這類進階的案例之一是如果您建立<xref:System.Windows.PropertyChangedCallback>不在相依性屬性的<xref:System.Windows.Freezable>或<xref:System.Windows.FrameworkElement>衍生類別，仍然會影響配置的測量行程，當監視變更。</xref:System.Windows.FrameworkElement> </xref:System.Windows.Freezable> </xref:System.Windows.PropertyChangedCallback>       經常呼叫 InvalidateMeasure 或特定的<xref:System.Windows.UIElement.UpdateLayout%2A>有顯著的效能影響。</xref:System.Windows.UIElement.UpdateLayout%2A> 因此，除非絕對需要精確的配置狀態的其他後續呼叫，呼叫這個方法來避免[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]程式碼中。"
  syntax:
    content: public void InvalidateMeasure ();
    parameters: []
  overload: System.Windows.UIElement.InvalidateMeasure*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.InvalidateVisual
  id: InvalidateVisual
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: InvalidateVisual()
  nameWithType: UIElement.InvalidateVisual()
  fullName: System.Windows.UIElement.InvalidateVisual()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "失效的項目，轉譯，並強制全新的配置傳遞。 <xref:System.Windows.UIElement.OnRender*>完成配置循環之後呼叫。</xref:System.Windows.UIElement.OnRender*>"
  remarks: "這個方法會呼叫<xref:System.Windows.UIElement.InvalidateArrange%2A>內部。</xref:System.Windows.UIElement.InvalidateArrange%2A>       從您的應用程式程式碼不通常呼叫這個方法。 WPF 架構層級配置系統沒有自己的變更項目的視覺化樹狀結構中處理，會呼叫這個方法只有在必要時對等項目已經。 僅適用於進階案例，必須呼叫這個方法。 這類進階的案例之一是如果您建立<xref:System.Windows.PropertyChangedCallback>不在相依性屬性的<xref:System.Windows.Freezable>或<xref:System.Windows.FrameworkElement>衍生類別，當監視變更，仍會影響配置。</xref:System.Windows.FrameworkElement> </xref:System.Windows.Freezable> </xref:System.Windows.PropertyChangedCallback>"
  syntax:
    content: public void InvalidateVisual ();
    parameters: []
  overload: System.Windows.UIElement.InvalidateVisual*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsArrangeValid
  id: IsArrangeValid
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsArrangeValid
  nameWithType: UIElement.IsArrangeValid
  fullName: System.Windows.UIElement.IsArrangeValid
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出計算的大小和子元素的位置，這個項目配置中是否有效。"
  remarks: "您可以強制排列方式以透過呼叫失效<xref:System.Windows.UIElement.InvalidateArrange%2A>在這個項目 （或其父代）。</xref:System.Windows.UIElement.InvalidateArrange%2A> 此旗標 at 次例如版面配置系統決定重新編輯畫的配置。 或者，若要立即呼叫<xref:System.Windows.UIElement.UpdateLayout%2A>無法進行，但這應該只有在執行如果確定沒有進一步的失效暫止 （大量不必要地強制更新會影響效能）。</xref:System.Windows.UIElement.UpdateLayout%2A>       不能 IsArrangeValid`true`除非<xref:System.Windows.UIElement.IsMeasureValid%2A>也`true`（版面配置處理序中排列不能有效而不先在 有效的度量）。</xref:System.Windows.UIElement.IsMeasureValid%2A>"
  syntax:
    content: public bool IsArrangeValid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果有效; 的大小和位置的版面配置否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.IsArrangeValid*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsEnabled
  id: IsEnabled
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsEnabled
  nameWithType: UIElement.IsEnabled
  fullName: System.Windows.UIElement.IsEnabled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定值，指出是否啟用這個項目中[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]。  這是相依性屬性。"
  remarks: "請注意這個屬性會受到特定類別的實作<xref:System.Windows.UIElement.IsEnabledCore%2A>特定項目，通常在執行階段。</xref:System.Windows.UIElement.IsEnabledCore%2A> 因此，此處所列的預設值有時不是有效。 比方說，<xref:System.Windows.Controls.Primitives.ScrollBar>為 IsEnabled`false`每當判斷為不需要支援捲軸。</xref:System.Windows.Controls.Primitives.ScrollBar> 嘗試設定此值將也可能會覆寫<xref:System.Windows.UIElement.IsEnabledCore%2A>.</xref:System.Windows.UIElement.IsEnabledCore%2A>所傳回的值       未啟用的項目不會參與點擊測試或焦點，而且不會因此輸入事件的來源。      <a name=&quot;dependencyPropertyInfo_IsEnabled&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.IsEnabledProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.IsEnabledProperty>"
  example:
  - "The following example shows a handler on one button that when executed will set IsEnabled `false` on another named button `b1`.  \n  \n [!code-cs[RoutedEventAddRemoveHandler#Handler](~/add/codesnippet/csharp/RoutedEventAddRemoveHandler/default.xaml.cs#handler)]\n [!code-vb[RoutedEventAddRemoveHandler#Handler](~/add/codesnippet/visualbasic/RoutedEventAddRemoveHandler/default.xaml.vb#handler)]"
  syntax:
    content: public bool IsEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果未啟用項目。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.IsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsEnabledChanged
  id: IsEnabledChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsEnabledChanged
  nameWithType: UIElement.IsEnabledChanged
  fullName: System.Windows.UIElement.IsEnabledChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref:System.Windows.UIElement.IsEnabled*>這個項目變更的屬性。</xref:System.Windows.UIElement.IsEnabled*>"
  remarks: "這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsEnabledCore
  id: IsEnabledCore
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsEnabledCore
  nameWithType: UIElement.IsEnabledCore
  fullName: System.Windows.UIElement.IsEnabledCore
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，這個值就會變得的傳回值<xref:System.Windows.UIElement.IsEnabled*>衍生類別中。</xref:System.Windows.UIElement.IsEnabled*>"
  syntax:
    content: protected virtual bool IsEnabledCore { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果未啟用項目。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.IsEnabledCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsEnabledProperty
  id: IsEnabledProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsEnabledProperty
  nameWithType: UIElement.IsEnabledProperty
  fullName: System.Windows.UIElement.IsEnabledProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.IsEnabled*>相依性屬性。</xref:System.Windows.UIElement.IsEnabled*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsEnabledProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsFocused
  id: IsFocused
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsFocused
  nameWithType: UIElement.IsFocused
  fullName: System.Windows.UIElement.IsFocused
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，決定這個項目是否具有邏輯焦點。  這是相依性屬性。"
  remarks: "如果某個應用程式多個焦點分區，例如功能表內容和應用程式的其餘部分之間，可能會與鍵盤焦點不同邏輯焦點。 在此案例中，應用程式 UI 的一個項目上只能是鍵盤焦點，不過，其他焦點分割中的特定項目可能仍會保留邏輯焦點。 如需有關邏輯焦點的詳細資訊，請參閱[焦點概觀](~/add/includes/ajax-current-ext-md.md)。       您未設定此屬性 （它是唯讀） 設定焦點。 這個屬性的一般用法是使用它做為相依性屬性<xref:System.Windows.Setter>或<xref:System.Windows.EventTrigger>.</xref:System.Windows.EventTrigger> </xref:System.Windows.Setter> 若要以程式設計方式設定焦點，呼叫<xref:System.Windows.UIElement.Focus%2A>.</xref:System.Windows.UIElement.Focus%2A> 藉由使用者動作或控制項實作，其中可能包括滑鼠捕捉行為，也可以設定焦點。      <a name=&quot;dependencyPropertyInfo_IsFocused&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.IsFocusedProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.IsFocusedProperty>"
  example:
  - "The following example is a code handler that changes the background of a control when it is focused.  \n  \n [!code-cs[PopupSimple#IsFocused](~/add/codesnippet/csharp/PopupPropertiesSample/Window1.xaml.cs#isfocused)]  \n  \n Another common way to achieve this same effect is to place a <xref:System.Windows.Trigger> in the <xref:System.Windows.Style> of a control; this approach does not require handling specific events with code-behind and allows designers greater access to the interactive and graphical nature of the [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]. For an example, see [How to: Create an Outer Glow Effect](http://msdn.microsoft.com/en-us/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1)."
  syntax:
    content: public bool IsFocused { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個項目具有邏輯焦點。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.IsFocused*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsFocusedProperty
  id: IsFocusedProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsFocusedProperty
  nameWithType: UIElement.IsFocusedProperty
  fullName: System.Windows.UIElement.IsFocusedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.IsFocused*>相依性屬性。</xref:System.Windows.UIElement.IsFocused*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsFocusedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsHitTestVisible
  id: IsHitTestVisible
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsHitTestVisible
  nameWithType: UIElement.IsHitTestVisible
  fullName: System.Windows.UIElement.IsHitTestVisible
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定值，這個值宣告從其呈現內容的某些部分，這個項目是否可以可能傳回作為點擊的測試結果。 這是相依性屬性。"
  remarks: "這個屬性的有效值會受到點擊測試的項目邏輯樹狀中的相對位置。 比方說，如果某個元素的子元素的項目，不會叫用測試顯示，將會繼續的子系上屬性的有效值`false`，即使嘗試在本機設定該值。 基於這個理由，請務必您沒有設定 IsHitTestVisible`false`複合控制項上，除非您不想要的任何輸入或的點擊測試該控制項。 如需有關點擊測試的詳細資訊，請參閱[點擊測試視覺化的圖層中](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsHitTestVisible&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.IsHitTestVisibleProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.IsHitTestVisibleProperty>"
  syntax:
    content: public bool IsHitTestVisible { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果無法從至少一個點，作為點擊的測試結果傳回這個項目否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.IsHitTestVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsHitTestVisibleChanged
  id: IsHitTestVisibleChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsHitTestVisibleChanged
  nameWithType: UIElement.IsHitTestVisibleChanged
  fullName: System.Windows.UIElement.IsHitTestVisibleChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref:System.Windows.UIElement.IsHitTestVisible*>這個項目上的相依性屬性變更。</xref:System.Windows.UIElement.IsHitTestVisible*>"
  remarks: "這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsHitTestVisibleProperty
  id: IsHitTestVisibleProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsHitTestVisibleProperty
  nameWithType: UIElement.IsHitTestVisibleProperty
  fullName: System.Windows.UIElement.IsHitTestVisibleProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.IsHitTestVisible*>相依性屬性。</xref:System.Windows.UIElement.IsHitTestVisible*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsInputMethodEnabled
  id: IsInputMethodEnabled
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsInputMethodEnabled
  nameWithType: UIElement.IsInputMethodEnabled
  fullName: System.Windows.UIElement.IsInputMethodEnabled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出輸入的法系統，例如[!INCLUDE[TLA#tla_ime](~/add/includes/ajax-current-ext-md.md)]，處理輸入這個項目已啟用。"
  remarks: "這個屬性會傳回附加的屬性所傳回的值<xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName>針對目前啟用輸入法 （鍵盤、 語音、 和其他輸入的裝置）。</xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName>"
  syntax:
    content: public bool IsInputMethodEnabled { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果輸入的法為使用中;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 基礎附加屬性的預設值是<xref uid=&quot;langword_csharp_true;&quot; name=&quot;true;&quot; href=&quot;&quot;></xref>不過，這會受到輸入法在執行階段的實際狀態。"
  overload: System.Windows.UIElement.IsInputMethodEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsKeyboardFocused
  id: IsKeyboardFocused
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsKeyboardFocused
  nameWithType: UIElement.IsKeyboardFocused
  fullName: System.Windows.UIElement.IsKeyboardFocused
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出這個項目是否具有鍵盤焦點。  這是相依性屬性。"
  remarks: "決定的值，這個屬性的變更可能會伴隨焦點相關事件。       IsKeyboardFocused 和<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>常用類別事件處理常式中的其他輸入相關的事件，例如來決定項目已經有鍵盤焦點，或進行決定當滑鼠事件和鍵盤事件一起出現。</xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>      <a name=&quot;dependencyPropertyInfo_IsKeyboardFocused&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.IsKeyboardFocusedProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.IsKeyboardFocusedProperty>"
  syntax:
    content: public bool IsKeyboardFocused { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個項目具有鍵盤焦點。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.IsKeyboardFocused*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsKeyboardFocusedChanged
  id: IsKeyboardFocusedChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsKeyboardFocusedChanged
  nameWithType: UIElement.IsKeyboardFocusedChanged
  fullName: System.Windows.UIElement.IsKeyboardFocusedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref:System.Windows.UIElement.IsKeyboardFocused*>這個項目上的屬性變更。</xref:System.Windows.UIElement.IsKeyboardFocused*>"
  remarks: "這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsKeyboardFocusedProperty
  id: IsKeyboardFocusedProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsKeyboardFocusedProperty
  nameWithType: UIElement.IsKeyboardFocusedProperty
  fullName: System.Windows.UIElement.IsKeyboardFocusedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.IsKeyboardFocused*>相依性屬性。</xref:System.Windows.UIElement.IsKeyboardFocused*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsKeyboardFocusWithin
  id: IsKeyboardFocusWithin
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsKeyboardFocusWithin
  nameWithType: UIElement.IsKeyboardFocusWithin
  fullName: System.Windows.UIElement.IsKeyboardFocusWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出鍵盤焦點是否在項目或其視覺化樹狀結構子項目內的任何位置。  這是相依性屬性。"
  remarks: "對這個屬性的值的變更通常引發<xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>事件，除非在衍生的類別已覆寫<xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A>要隱藏的事件。</xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> </xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>       您未設定這個屬性，但您也可以呼叫的項目設定焦點<xref:System.Windows.UIElement.Focus%2A>，或藉由<xref:System.Windows.UIElement.MoveFocus%2A>要求。</xref:System.Windows.UIElement.MoveFocus%2A> </xref:System.Windows.UIElement.Focus%2A> 這些方法會呼叫其中一項可能會變更這個屬性值。       <xref:System.Windows.UIElement.IsKeyboardFocused%2A>IsKeyboardFocusWithin 通常用於類別的事件處理常式中其他輸入相關的事件，例如，以判斷項目已經有鍵盤焦點，還是可決定當滑鼠事件和鍵盤事件一起出現。</xref:System.Windows.UIElement.IsKeyboardFocused%2A>      <a name=&quot;dependencyPropertyInfo_IsKeyboardFocusWithin&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>"
  syntax:
    content: public bool IsKeyboardFocusWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果鍵盤焦點在項目或其子項目。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.IsKeyboardFocusWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsKeyboardFocusWithinChanged
  id: IsKeyboardFocusWithinChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsKeyboardFocusWithinChanged
  nameWithType: UIElement.IsKeyboardFocusWithinChanged
  fullName: System.Windows.UIElement.IsKeyboardFocusWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素之 IsKeyboardFocusWithinChanged 屬性的值變更時發生。"
  remarks: "這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsKeyboardFocusWithinProperty
  id: IsKeyboardFocusWithinProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsKeyboardFocusWithinProperty
  nameWithType: UIElement.IsKeyboardFocusWithinProperty
  fullName: System.Windows.UIElement.IsKeyboardFocusWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.IsKeyboardFocusWithin*>相依性屬性。</xref:System.Windows.UIElement.IsKeyboardFocusWithin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsManipulationEnabled
  id: IsManipulationEnabled
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsManipulationEnabled
  nameWithType: UIElement.IsManipulationEnabled
  fullName: System.Windows.UIElement.IsManipulationEnabled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定值，指出這是否已啟用操作事件<xref href=&quot;System.Windows.UIElement&quot;> </xref>。"
  remarks: '設定此屬性設定為 true，如果您想<xref:System.Windows.UIElement>接收<xref:System.Windows.UIElement.ManipulationStarting>， <xref:System.Windows.UIElement.ManipulationStarted>， <xref:System.Windows.UIElement.ManipulationDelta>， <xref:System.Windows.UIElement.ManipulationInertiaStarting>， <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>，和<xref:System.Windows.UIElement.ManipulationCompleted>事件。</xref:System.Windows.UIElement.ManipulationCompleted> </xref:System.Windows.UIElement.ManipulationBoundaryFeedback> </xref:System.Windows.UIElement.ManipulationInertiaStarting> </xref:System.Windows.UIElement.ManipulationDelta> </xref:System.Windows.UIElement.ManipulationStarted> </xref:System.Windows.UIElement.ManipulationStarting> </xref:System.Windows.UIElement> 如需操作的詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。  如需操作回應的應用程式的範例，請參閱[逐步解說︰ 建立您第一個接觸的應用程式](~/add/includes/ajax-current-ext-md.md)。'
  example:
  - "The following example creates an application that has a red Rectangle.  The IsManipulationEnabled property of the Rectangle is set to true and the application's window subscribes to the <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationDelta>, and <xref:System.Windows.UIElement.ManipulationInertiaStarting> events. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md).  \n  \n [!code-xml[BasicManipulation#UI](~/add/codesnippet/xaml/basicmanipulation/mainwindow.xaml#ui)]"
  syntax:
    content: public bool IsManipulationEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果啟用此操作事件<xref href=&quot;System.Windows.UIElement&quot;> </xref>，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.IsManipulationEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsManipulationEnabledProperty
  id: IsManipulationEnabledProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsManipulationEnabledProperty
  nameWithType: UIElement.IsManipulationEnabledProperty
  fullName: System.Windows.UIElement.IsManipulationEnabledProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.IsManipulationEnabled*>相依性屬性。</xref:System.Windows.UIElement.IsManipulationEnabled*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsManipulationEnabledProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMeasureValid
  id: IsMeasureValid
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMeasureValid
  nameWithType: UIElement.IsMeasureValid
  fullName: System.Windows.UIElement.IsMeasureValid
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出是否為有效的配置量值所傳回的目前大小。"
  remarks: "您可以強制度量和排列方式以透過呼叫失效<xref:System.Windows.UIElement.InvalidateMeasure%2A>在這個項目 （或視覺化樹狀結構的任何父項目）。</xref:System.Windows.UIElement.InvalidateMeasure%2A> 這會指定配置以重新編輯畫以非同步的方式，取決於版面配置系統一次發生。 或者，您可以進行<xref:System.Windows.UIElement.UpdateLayout%2A>.</xref:System.Windows.UIElement.UpdateLayout%2A>的立即呼叫 不過，您應該只呼叫<xref:System.Windows.UIElement.UpdateLayout%2A>如果很可能沒有進一步的失效暫止 （大量不必要地強制更新會有影響效能）。</xref:System.Windows.UIElement.UpdateLayout%2A>       如果是 IsMeasureValid `false`，<xref:System.Windows.UIElement.IsArrangeValid%2A>也必須是`false`（版面配置處理序，強制執行邏輯，排列方式不能有效而不先在 有效的度量）。</xref:System.Windows.UIElement.IsArrangeValid%2A>"
  syntax:
    content: public bool IsMeasureValid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果量值將傳遞的配置會傳回有效和目前值。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.IsMeasureValid*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseCaptured
  id: IsMouseCaptured
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseCaptured
  nameWithType: UIElement.IsMouseCaptured
  fullName: System.Windows.UIElement.IsMouseCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出是否將滑鼠擷取至這個項目。  這是相依性屬性。"
  remarks: "與處理序中的拖放作業相關的滑鼠捕捉的狀態。      <a name=&quot;dependencyPropertyInfo_IsMouseCaptured&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.IsMouseCapturedProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.IsMouseCapturedProperty>"
  example:
  - "The following example turns the mouse capture state on or off based on whether the mouse is already captured for the element.  \n  \n If mouse capture is elsewhere, the mouse capture is set to that element. If the element had mouse capture, it is cleared by calling <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName> with a null input.  \n  \n [!code-vb[MouseSnippetSample#IsMouseCaptured](~/add/codesnippet/visualbasic/mousesnippetsample/window1.xaml.vb#ismousecaptured)]\n [!code-cs[MouseSnippetSample#IsMouseCaptured](~/add/codesnippet/csharp/MouseSnippetSample/Window1.xaml.cs#ismousecaptured)]"
  syntax:
    content: public bool IsMouseCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果項目具有滑鼠擷取;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.IsMouseCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseCapturedChanged
  id: IsMouseCapturedChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseCapturedChanged
  nameWithType: UIElement.IsMouseCapturedChanged
  fullName: System.Windows.UIElement.IsMouseCapturedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref:System.Windows.UIElement.IsMouseCaptured*>這個項目上的屬性變更。</xref:System.Windows.UIElement.IsMouseCaptured*>"
  remarks: "這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseCapturedProperty
  id: IsMouseCapturedProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseCapturedProperty
  nameWithType: UIElement.IsMouseCapturedProperty
  fullName: System.Windows.UIElement.IsMouseCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.IsMouseCaptured*>相依性屬性。</xref:System.Windows.UIElement.IsMouseCaptured*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseCaptureWithin
  id: IsMouseCaptureWithin
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseCaptureWithin
  nameWithType: UIElement.IsMouseCaptureWithin
  fullName: System.Windows.UIElement.IsMouseCaptureWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，決定滑鼠捕捉是否由這個項目，或其視覺化樹狀中的子項目所保留。 這是相依性屬性。"
  remarks: "<a name=&quot;dependencyPropertyInfo_IsMouseCaptureWithin&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>"
  syntax:
    content: public bool IsMouseCaptureWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個項目或包含的項目具有滑鼠擷取;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.IsMouseCaptureWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseCaptureWithinChanged
  id: IsMouseCaptureWithinChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseCaptureWithinChanged
  nameWithType: UIElement.IsMouseCaptureWithinChanged
  fullName: System.Windows.UIElement.IsMouseCaptureWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref href=&quot;System.Windows.UIElement.IsMouseCaptureWithinProperty&quot;></xref>這個項目上的變更。"
  remarks: "這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseCaptureWithinProperty
  id: IsMouseCaptureWithinProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseCaptureWithinProperty
  nameWithType: UIElement.IsMouseCaptureWithinProperty
  fullName: System.Windows.UIElement.IsMouseCaptureWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.IsMouseCaptureWithin*>相依性屬性。</xref:System.Windows.UIElement.IsMouseCaptureWithin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseDirectlyOver
  id: IsMouseDirectlyOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseDirectlyOver
  nameWithType: UIElement.IsMouseDirectlyOver
  fullName: System.Windows.UIElement.IsMouseDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出滑鼠指標位置是否與點擊測試結果，項目納入考量。  這是相依性屬性。"
  remarks: "不同於<xref:System.Windows.UIElement.IsMouseOver%2A>，這個屬性才`true`如果滑鼠指標常值的項目，因為其適用於點擊測試</xref:System.Windows.UIElement.IsMouseOver%2A> 如果滑鼠指標位於子項目上方，特別是在項目一部分的項目更深入的範本和複合 （compositing），這個屬性會是`false`。 除非您知道控制項的複合 （例如，您使用這個屬性的自訂控制項範本中的控制項，您定義），這個屬性可能會傳回非預期的結果。 大部分的情況下都不製作控制項，使用<xref:System.Windows.UIElement.IsMouseOver%2A>改用。</xref:System.Windows.UIElement.IsMouseOver%2A>       如果將滑鼠擷取由這個項目，而且這個屬性為`true`在擷取時，這個屬性會繼續傳回`true`直到失去滑鼠捕捉但其範圍不是指標。      <a name=&quot;dependencyPropertyInfo_IsMouseDirectlyOver&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>"
  syntax:
    content: public bool IsMouseDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果滑鼠指標位於相同的項目結果與點擊測試。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.IsMouseDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseDirectlyOverChanged
  id: IsMouseDirectlyOverChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseDirectlyOverChanged
  nameWithType: UIElement.IsMouseDirectlyOverChanged
  fullName: System.Windows.UIElement.IsMouseDirectlyOverChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref:System.Windows.UIElement.IsMouseDirectlyOver*>這個項目上的屬性變更。</xref:System.Windows.UIElement.IsMouseDirectlyOver*>"
  remarks: "這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseDirectlyOverProperty
  id: IsMouseDirectlyOverProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseDirectlyOverProperty
  nameWithType: UIElement.IsMouseDirectlyOverProperty
  fullName: System.Windows.UIElement.IsMouseDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.IsMouseDirectlyOver*>相依性屬性。</xref:System.Windows.UIElement.IsMouseDirectlyOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseOver
  id: IsMouseOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseOver
  nameWithType: UIElement.IsMouseOver
  fullName: System.Windows.UIElement.IsMouseOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出滑鼠指標是否位在這個項目 （包括視覺化樹狀結構中的子項目）。  這是相依性屬性。"
  remarks: "一般而言，控制項是複合的控制項 （視覺化樹狀結構） 內的各種項目都會報告包含控制項的滑鼠狀態。 例如，<xref:System.Windows.Controls.ListBox>樣式控制項將會報告為 IsMouseOver`true`如果滑鼠任意處是它的幾何，包括任何<xref:System.Windows.Controls.ListBoxItem>.</xref:System.Windows.Controls.ListBoxItem> </xref:System.Windows.Controls.ListBox>       雖然類似&quot;IsMouseOverChanged 」 事件不存在，便會執行數個類似的事件。 例如，您可以處理<xref:System.Windows.UIElement.MouseEnter>， <xref:System.Windows.UIElement.MouseMove>，和<xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>。</xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> </xref:System.Windows.UIElement.MouseMove> </xref:System.Windows.UIElement.MouseEnter>       如果此元素擷取滑鼠，這個屬性會保留`true`直到已失去滑鼠捕捉滑鼠指標離開項目範圍。       有些控制項刻意捕捉滑鼠上似乎沒有直接牽涉到滑鼠特定動作。 這可能會導致正在 IsMouseOver`true`即使看似沒有移動滑鼠。      <a name=&quot;dependencyPropertyInfo_IsMouseOver&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.IsMouseOverProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.IsMouseOverProperty>"
  example:
  - "The following example references this property as the property type of a <xref:System.Windows.Trigger>, part of a \\<Style.Triggers> block. If the mouse is over the control, the control text turns blue and the cursor becomes a hand.  \n  \n [!code-xml[ListViewCheckBox#Trigger](~/add/codesnippet/xaml/p-system.windows.uieleme_12_1.xaml)]\n [!code-xml[ListViewCheckBox#Trigger](~/add/codesnippet/xaml/p-system.windows.uieleme_12_1.xaml)]"
  syntax:
    content: public bool IsMouseOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果滑鼠指標位在項目或其子項目。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.IsMouseOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseOverProperty
  id: IsMouseOverProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseOverProperty
  nameWithType: UIElement.IsMouseOverProperty
  fullName: System.Windows.UIElement.IsMouseOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.IsMouseOver*>相依性屬性。</xref:System.Windows.UIElement.IsMouseOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusCaptured
  id: IsStylusCaptured
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusCaptured
  nameWithType: UIElement.IsStylusCaptured
  fullName: System.Windows.UIElement.IsStylusCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出是否將手寫筆擷取由這個項目。  這是相依性屬性。"
  remarks: "觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsStylusCaptured&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.IsStylusCapturedProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.IsStylusCapturedProperty>"
  syntax:
    content: public bool IsStylusCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果項目具有手寫筆擷取;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.IsStylusCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusCapturedChanged
  id: IsStylusCapturedChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusCapturedChanged
  nameWithType: UIElement.IsStylusCapturedChanged
  fullName: System.Windows.UIElement.IsStylusCapturedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref:System.Windows.UIElement.IsStylusCaptured*>這個項目上的屬性變更。</xref:System.Windows.UIElement.IsStylusCaptured*>"
  remarks: "這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusCapturedProperty
  id: IsStylusCapturedProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusCapturedProperty
  nameWithType: UIElement.IsStylusCapturedProperty
  fullName: System.Windows.UIElement.IsStylusCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.IsStylusCaptured*>相依性屬性。</xref:System.Windows.UIElement.IsStylusCaptured*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusCaptureWithin
  id: IsStylusCaptureWithin
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusCaptureWithin
  nameWithType: UIElement.IsStylusCaptureWithin
  fullName: System.Windows.UIElement.IsStylusCaptureWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，決定手寫筆擷取是由這個項目或項目範圍及其視覺化樹狀結構中的項目持有。 這是相依性屬性。"
  remarks: "觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://msdn.microsoft.com/en-us/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsStylusCaptureWithin&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>"
  syntax:
    content: public bool IsStylusCaptureWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個項目或包含的項目具有手寫筆擷取;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.IsStylusCaptureWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusCaptureWithinChanged
  id: IsStylusCaptureWithinChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusCaptureWithinChanged
  nameWithType: UIElement.IsStylusCaptureWithinChanged
  fullName: System.Windows.UIElement.IsStylusCaptureWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref:System.Windows.UIElement.IsStylusCaptureWithin*>這個項目上的屬性變更。</xref:System.Windows.UIElement.IsStylusCaptureWithin*>"
  remarks: "這是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusCaptureWithinProperty
  id: IsStylusCaptureWithinProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusCaptureWithinProperty
  nameWithType: UIElement.IsStylusCaptureWithinProperty
  fullName: System.Windows.UIElement.IsStylusCaptureWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.IsStylusCaptureWithin*>相依性屬性。</xref:System.Windows.UIElement.IsStylusCaptureWithin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusDirectlyOver
  id: IsStylusDirectlyOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusDirectlyOver
  nameWithType: UIElement.IsStylusDirectlyOver
  fullName: System.Windows.UIElement.IsStylusDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出手寫筆位置是否與點擊測試結果，項目納入考量對應。  這是相依性屬性。"
  remarks: "不同於<xref:System.Windows.UIElement.IsStylusOver%2A>，這個屬性才`true`如果手寫筆在元素上方。</xref:System.Windows.UIElement.IsStylusOver%2A> 如果手寫筆改為透過子元素或元素的更深入的複合 （視覺化樹狀結構） 的一部分的項目，這個屬性會是`false`。       除非您知道控制項的複合 （例如，您使用這個屬性的自訂控制項範本中的控制項，您定義），這個屬性可能會傳回非預期的結果。 大部分的情況下都不製作控制項，使用<xref:System.Windows.UIElement.IsStylusOver%2A>改用。</xref:System.Windows.UIElement.IsStylusOver%2A>       如果這個項目具有手寫筆擷取，而且這個屬性是`true`在擷取時，這個屬性會保持`true`直到手寫筆擷取遺失，且其範圍不是手寫筆。       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsStylusDirectlyOver&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>"
  syntax:
    content: public bool IsStylusDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果手寫筆指標的相同項目結果與點擊測試。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.IsStylusDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusDirectlyOverChanged
  id: IsStylusDirectlyOverChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusDirectlyOverChanged
  nameWithType: UIElement.IsStylusDirectlyOverChanged
  fullName: System.Windows.UIElement.IsStylusDirectlyOverChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref:System.Windows.UIElement.IsStylusDirectlyOver*>這個項目上的屬性變更。</xref:System.Windows.UIElement.IsStylusDirectlyOver*>"
  remarks: "這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusDirectlyOverProperty
  id: IsStylusDirectlyOverProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusDirectlyOverProperty
  nameWithType: UIElement.IsStylusDirectlyOverProperty
  fullName: System.Windows.UIElement.IsStylusDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.IsStylusDirectlyOver*>相依性屬性。</xref:System.Windows.UIElement.IsStylusDirectlyOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusOver
  id: IsStylusOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusOver
  nameWithType: UIElement.IsStylusOver
  fullName: System.Windows.UIElement.IsStylusOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出手寫筆游標是否位於此項目上方 （包括視覺子項目）。  這是相依性屬性。"
  remarks: "如果這個項目具有手寫筆擷取，這個屬性會繼續傳回`true`直到手寫筆擷取是遺失而且已超出其範圍的指標。       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsStylusOver&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.IsStylusOverProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.IsStylusOverProperty>"
  syntax:
    content: public bool IsStylusOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果手寫筆游標位在項目或其子項目。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.IsStylusOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusOverProperty
  id: IsStylusOverProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusOverProperty
  nameWithType: UIElement.IsStylusOverProperty
  fullName: System.Windows.UIElement.IsStylusOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.IsStylusOver*>相依性屬性。</xref:System.Windows.UIElement.IsStylusOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsVisible
  id: IsVisible
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsVisible
  nameWithType: UIElement.IsVisible
  fullName: System.Windows.UIElement.IsVisible
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，指出這個項目中是否可見[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]。  這是相依性屬性。"
  remarks: "IsVisible 值判斷會考量所有配置的因素。 相反地， <xref:System.Windows.UIElement.Visibility%2A>，這是可設定的屬性，只表示要以程式設計的方式讓項目，可見或不可見。</xref:System.Windows.UIElement.Visibility%2A>       IsVisible 所在位置的項目`false`參與輸入的事件 （或命令），請執行不影響量值或排列傳遞的版面配置，不是可設定焦點、 索引標籤順序而且不會報告在點擊測試。 相較之下，項目位置<xref:System.Windows.UIElement.IsEnabled%2A>是`false`仍會參與事件和命令，以及點擊測試，但是也不是可設定焦點。</xref:System.Windows.UIElement.IsEnabled%2A>      <a name=&quot;dependencyPropertyInfo_IsVisible&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.IsVisibleProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.IsVisibleProperty>"
  syntax:
    content: public bool IsVisible { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果元素是可見的。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.IsVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsVisibleChanged
  id: IsVisibleChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsVisibleChanged
  nameWithType: UIElement.IsVisibleChanged
  fullName: System.Windows.UIElement.IsVisibleChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生時的值<xref:System.Windows.UIElement.IsVisible*>這個項目上的屬性變更。</xref:System.Windows.UIElement.IsVisible*>"
  remarks: "如果項目不呈現的版面配置系統的值以外的原因而不會引發這個事件<xref:System.Windows.UIElement.IsVisible%2A>屬性。</xref:System.Windows.UIElement.IsVisible%2A> 例如，項目可能沒有相關聯的 visual。       這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsVisibleProperty
  id: IsVisibleProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsVisibleProperty
  nameWithType: UIElement.IsVisibleProperty
  fullName: System.Windows.UIElement.IsVisibleProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.IsVisible*>相依性屬性。</xref:System.Windows.UIElement.IsVisible*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsVisibleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.KeyDown
  id: KeyDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: KeyDown
  nameWithType: UIElement.KeyDown
  fullName: System.Windows.UIElement.KeyDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於焦點位於這個項目上時按下按鍵。"
  remarks: "索引鍵處理互動與其他的平台功能，例如命令和撰寫文字。 KeyDown 事件是可能無法如預期般特定控制項的較低層級文字輸入的事件。 這是因為有些控制項會有複合控制項，或提供文字的高階版本的類別處理輸入處理和相關事件。       此事件會建立一個別名<xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>附加這個類別的事件，以便 KeyDown 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> 附加至 KeyDown 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>      <a name=&quot;routedEventInfo_KeyDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.KeyDownEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.KeyEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement.PreviewKeyDown>。</xref:System.Windows.UIElement.PreviewKeyDown> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.UIElement.KeyDownEvent>      -覆寫<xref:System.Windows.UIElement.OnKeyDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnKeyDown%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler KeyDown;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.KeyDownEvent
  id: KeyDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: KeyDownEvent
  nameWithType: UIElement.KeyDownEvent
  fullName: System.Windows.UIElement.KeyDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.KeyDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent KeyDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.KeyUp
  id: KeyUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: KeyUp
  nameWithType: UIElement.KeyUp
  fullName: System.Windows.UIElement.KeyUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於焦點位於這個項目上時，放開按鍵。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>附加這個類別的事件，以便 KeyUp 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> 附加至 KeyUp 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>      <a name=&quot;routedEventInfo_KeyUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.KeyUpEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.KeyEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement.PreviewKeyUp>。</xref:System.Windows.UIElement.PreviewKeyUp> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.UIElement.KeyUpEvent>      -覆寫<xref:System.Windows.UIElement.OnKeyUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnKeyUp%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler KeyUp;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.KeyUpEvent
  id: KeyUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: KeyUpEvent
  nameWithType: UIElement.KeyUpEvent
  fullName: System.Windows.UIElement.KeyUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.KeyUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent KeyUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LayoutUpdated
  id: LayoutUpdated
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LayoutUpdated
  nameWithType: UIElement.LayoutUpdated
  fullName: System.Windows.UIElement.LayoutUpdated
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "與目前相關聯的各種視覺化元素的版面配置時，就會發生<xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref>變更。"
  remarks: "配置更新可能會發生在屬性變更、 視窗調整大小或明確的使用者要求的結果。       這個成員是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件，則不是路由的事件。"
  syntax:
    content: public event EventHandler LayoutUpdated;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostFocus
  id: LostFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostFocus
  nameWithType: UIElement.LostFocus
  fullName: System.Windows.UIElement.LostFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素失去邏輯焦點時發生。"
  remarks: "如果使用方法呼叫刻意強制焦點離開但上一個鍵盤焦點存在於不同範圍中與鍵盤焦點不同邏輯焦點。 在此案例中、 鍵盤焦點會維持為，其所在和項目位置<xref:System.Windows.UIElement.Focus%2A>方法呼叫仍取得邏輯焦點。</xref:System.Windows.UIElement.Focus%2A>       這個事件的更精確的解釋是它時引發的值<xref:System.Windows.UIElement.IsFocused%2A>屬性路由的項目從變更`true`至`false`。</xref:System.Windows.UIElement.IsFocused%2A>       由於這個事件會使用反昇路由，失去焦點的項目可能是子元素，而非項目實際附加事件處理常式。 請檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際取得焦點的項目中。</xref:System.Windows.RoutedEventArgs.Source%2A>      <a name=&quot;routedEventInfo_LostFocus&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.LostFocusEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.RoutedEventHandler>|     -沒有對應通道的事件。</xref:System.Windows.RoutedEventHandler> </xref:System.Windows.UIElement.LostFocusEvent>      -覆寫<xref:System.Windows.UIElement.OnLostFocus%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnLostFocus%2A>"
  syntax:
    content: public event System.Windows.RoutedEventHandler LostFocus;
    return:
      type: System.Windows.RoutedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostFocusEvent
  id: LostFocusEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostFocusEvent
  nameWithType: UIElement.LostFocusEvent
  fullName: System.Windows.UIElement.LostFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.LostFocus&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostKeyboardFocus
  id: LostKeyboardFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostKeyboardFocus
  nameWithType: UIElement.LostKeyboardFocus
  fullName: System.Windows.UIElement.LostKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "鍵盤不再以此項目為焦點時發生。"
  remarks: "由於這個事件會使用反昇路由，失去焦點的項目可能是子元素，而非項目實際附加事件處理常式。 請檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際失去焦點的項目中。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件會建立一個別名<xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName>附加這個類別中，事件，以便 LostKeyboardFocus 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> 附加至 LostKeyboardFocus 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName>      <a name=&quot;routedEventInfo_LostKeyboardFocus&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.LostKeyboardFocusEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement.PreviewLostKeyboardFocus>。</xref:System.Windows.UIElement.PreviewLostKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.UIElement.LostKeyboardFocusEvent>      -覆寫<xref:System.Windows.UIElement.OnLostKeyboardFocus%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnLostKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostKeyboardFocusEvent
  id: LostKeyboardFocusEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostKeyboardFocusEvent
  nameWithType: UIElement.LostKeyboardFocusEvent
  fullName: System.Windows.UIElement.LostKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.LostKeyboardFocus&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostMouseCapture
  id: LostMouseCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostMouseCapture
  nameWithType: UIElement.LostMouseCapture
  fullName: System.Windows.UIElement.LostMouseCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素失去滑鼠擷取時發生。"
  remarks: "當項目捕捉到滑鼠時，它收到滑鼠輸入，即使指標位於其範圍外。 滑鼠通常只會在拖放作業期間擷取。       由於這個事件會使用反昇路由，失去擷取項目可能是子元素，而非項目實際附加事件處理常式。 請檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際遺失擷取的項目中。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件會建立一個別名<xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName>附加這個類別中，事件，以便 LostMouseCapture 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> 附加至 LostMouseCapture 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName>      <a name=&quot;routedEventInfo_LostMouseCapture&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.LostMouseCaptureEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.MouseEventHandler>|     -沒有定義對應通道的事件。</xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement.LostMouseCaptureEvent>      -覆寫<xref:System.Windows.UIElement.OnLostMouseCapture%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnLostMouseCapture%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler LostMouseCapture;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostMouseCaptureEvent
  id: LostMouseCaptureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostMouseCaptureEvent
  nameWithType: UIElement.LostMouseCaptureEvent
  fullName: System.Windows.UIElement.LostMouseCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.LostMouseCapture&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostStylusCapture
  id: LostStylusCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostStylusCapture
  nameWithType: UIElement.LostStylusCapture
  fullName: System.Windows.UIElement.LostStylusCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素失去手寫筆擷取時發生。"
  remarks: "當項目擷取手寫筆時，即使指標位於其範圍外接收手寫筆輸入。 通常只會在拖放作業期間擷取手寫筆。       由於這個事件會使用反昇路由，失去焦點的項目可能是子元素，而非項目實際附加事件處理常式。 請檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際失去焦點的項目中。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件會建立一個別名<xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName>附加這個類別中，事件，以便 LostStylusCapture 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> 附加至 LostStylusCapture 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName>      <a name=&quot;routedEventInfo_LostStylusCapture&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.LostStylusCaptureEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -沒有定義對應通道的事件。</xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.LostStylusCaptureEvent>      -覆寫<xref:System.Windows.UIElement.OnLostStylusCapture%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnLostStylusCapture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler LostStylusCapture;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostStylusCaptureEvent
  id: LostStylusCaptureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostStylusCaptureEvent
  nameWithType: UIElement.LostStylusCaptureEvent
  fullName: System.Windows.UIElement.LostStylusCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.LostStylusCapture&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostTouchCapture
  id: LostTouchCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostTouchCapture
  nameWithType: UIElement.LostTouchCapture
  fullName: System.Windows.UIElement.LostTouchCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素失去觸控擷取時發生。"
  remarks: "<a name=&quot;routedEventInfo_LostTouchCapture&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.LostTouchCaptureEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.EventHandler%601>的型別<xref:System.Windows.Input.TouchEventArgs>。 |     -覆寫<xref:System.Windows.UIElement.OnLostTouchCapture%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnLostTouchCapture%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.LostTouchCaptureEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> LostTouchCapture;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostTouchCaptureEvent
  id: LostTouchCaptureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostTouchCaptureEvent
  nameWithType: UIElement.LostTouchCaptureEvent
  fullName: System.Windows.UIElement.LostTouchCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.LostTouchCapture&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationBoundaryFeedback
  id: ManipulationBoundaryFeedback
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationBoundaryFeedback
  nameWithType: UIElement.ManipulationBoundaryFeedback
  fullName: System.Windows.UIElement.ManipulationBoundaryFeedback
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於操作遇到界限時。"
  remarks: "<a name=&quot;routedEventInfo_ManipulationBoundaryFeedback&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>.|</xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs></xref:System.EventHandler%601></xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> ManipulationBoundaryFeedback;
    return:
      type: System.EventHandler{System.Windows.Input.ManipulationBoundaryFeedbackEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationBoundaryFeedbackEvent
  id: ManipulationBoundaryFeedbackEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationBoundaryFeedbackEvent
  nameWithType: UIElement.ManipulationBoundaryFeedbackEvent
  fullName: System.Windows.UIElement.ManipulationBoundaryFeedbackEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.ManipulationBoundaryFeedback&quot;></xref>事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationCompleted
  id: ManipulationCompleted
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationCompleted
  nameWithType: UIElement.ManipulationCompleted
  fullName: System.Windows.UIElement.ManipulationCompleted
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於操作和慣性上的<xref href=&quot;System.Windows.UIElement&quot;></xref>物件已完成。"
  remarks: "若要取得之操作的相關資訊，完成時，您可以使用此事件。  例如，您可以使用<xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=fullName>屬性來判斷總量操作的位置變更。</xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=fullName>       如需操作的詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。  如需操作回應的應用程式的範例，請參閱[逐步解說︰ 建立您第一個接觸的應用程式](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_ManipulationCompleted&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.ManipulationCompletedEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationCompletedEventArgs>.|</xref:System.Windows.Input.ManipulationCompletedEventArgs></xref:System.EventHandler%601></xref:System.Windows.UIElement.ManipulationCompletedEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> ManipulationCompleted;
    return:
      type: System.EventHandler{System.Windows.Input.ManipulationCompletedEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationCompletedEvent
  id: ManipulationCompletedEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationCompletedEvent
  nameWithType: UIElement.ManipulationCompletedEvent
  fullName: System.Windows.UIElement.ManipulationCompletedEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.ManipulationCompleted&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent ManipulationCompletedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationDelta
  id: ManipulationDelta
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationDelta
  nameWithType: UIElement.ManipulationDelta
  fullName: System.Windows.UIElement.ManipulationDelta
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於輸入的裝置操作期間變更的位置。"
  remarks: "當使用者拖曳手指螢幕操作期間一次發生慣性 ManipulationDelta 事件就會發生多次。  您可以使用<xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A>屬性檢查事件是否發生在慣性。</xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A>       事件發生時就會發生事件的 ManipulationDelta 上的項目不會影響以任何方式。  您必須提供邏輯以可操作的項目。  <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A>和<xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A>屬性，這些型別的屬性<xref:System.Windows.Input.ManipulationDelta>，包含有關如何變更操作的位置資料，而解譯為移動、 調整大小或旋轉的物件。</xref:System.Windows.Input.ManipulationDelta> </xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> </xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A>  您可將該資訊套用至可操作的項目中。       如需操作的詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。  如需操作回應的應用程式的範例，請參閱[逐步解說︰ 建立您第一個接觸的應用程式](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_ManipulationDelta&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.ManipulationDeltaEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationDeltaEventArgs>.|</xref:System.Windows.Input.ManipulationDeltaEventArgs></xref:System.EventHandler%601></xref:System.Windows.UIElement.ManipulationDeltaEvent>"
  example:
  - "The following example shows an event handler for the ManipulationDelta event. The example uses the <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>.  The example also checks whether the ManipulationDelta event occurred during inertia and whether the rectangle is touching the edge of a window.  If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: public event EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> ManipulationDelta;
    return:
      type: System.EventHandler{System.Windows.Input.ManipulationDeltaEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationDeltaEvent
  id: ManipulationDeltaEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationDeltaEvent
  nameWithType: UIElement.ManipulationDeltaEvent
  fullName: System.Windows.UIElement.ManipulationDeltaEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.ManipulationDelta&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent ManipulationDeltaEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationInertiaStarting
  id: ManipulationInertiaStarting
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationInertiaStarting
  nameWithType: UIElement.ManipulationInertiaStarting
  fullName: System.Windows.UIElement.ManipulationInertiaStarting
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於輸入的裝置失去與連絡<xref href=&quot;System.Windows.UIElement&quot;></xref>期間操作和慣性物件開始。"
  remarks: "ManipulationInertiaStarting 事件發生於使用者將取消所有從螢幕的指操作期間。 例如，如果使用者 」 會擲回 」<xref:System.Windows.UIElement>之間的介面，使用者將接觸<xref:System.Windows.UIElement>開始的動作，移動短的距離，螢幕上手指，然後放開<xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement> </xref:System.Windows.UIElement> 當使用者放開項目時，慣性開始，並就會發生 ManipulationInertiaStarting 事件。  <xref:System.Windows.UIElement>會繼續接收<xref:System.Windows.UIElement.ManipulationDelta>事件，以指出正在發生的項目上之慣性。</xref:System.Windows.UIElement.ManipulationDelta> </xref:System.Windows.UIElement>       若要指定慣性的行為，您可以使用此事件。  例如，您可以設定慣性開始時所使用的初始速度。  藉由設定所需的減速或設定所需的位置，您也可以指定慣性數量。  您可以個別設定每一種操作 （轉譯、 擴充或旋轉） 的這些值。  如需詳細資訊，請參閱<xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.</xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>       如需操作的詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。  如需操作回應的應用程式的範例，請參閱[逐步解說︰ 建立您第一個接觸的應用程式](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_ManipulationInertiaStarting&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.|</xref:System.Windows.Input.ManipulationInertiaStartingEventArgs></xref:System.EventHandler%601></xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>"
  example:
  - "The following example shows the ManipulationInertiaStarting event handler and sets the desired deceleration for translation, expansion, and rotation that is used during inertia. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md).  \n  \n [!code-cs[BasicManipulation#ManipulationInertiaStarting](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationinertiastarting)]\n [!code-vb[BasicManipulation#ManipulationInertiaStarting](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationinertiastarting)]"
  syntax:
    content: public event EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> ManipulationInertiaStarting;
    return:
      type: System.EventHandler{System.Windows.Input.ManipulationInertiaStartingEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationInertiaStartingEvent
  id: ManipulationInertiaStartingEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationInertiaStartingEvent
  nameWithType: UIElement.ManipulationInertiaStartingEvent
  fullName: System.Windows.UIElement.ManipulationInertiaStartingEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.ManipulationInertiaStarting&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent ManipulationInertiaStartingEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationStarted
  id: ManipulationStarted
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationStarted
  nameWithType: UIElement.ManipulationStarted
  fullName: System.Windows.UIElement.ManipulationStarted
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於輸入的裝置上開始操作<xref href=&quot;System.Windows.UIElement&quot;></xref>物件。"
  remarks: "之後就會發生 ManipulationStarted 事件<xref:System.Windows.UIElement.ManipulationStarting>事件。</xref:System.Windows.UIElement.ManipulationStarting>  您可以使用下列<xref:System.Windows.Input.ManipulationStartedEventArgs>:-取得操作的位置是相對於使用的項目<xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A>屬性。</xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> </xref:System.Windows.Input.ManipulationStartedEventArgs>      -取得操作的原點使用<xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A>屬性。</xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A>      -藉由呼叫取消操作<xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A>方法。</xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A>       如需操作的詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。  如需操作回應的應用程式的範例，請參閱[逐步解說︰ 建立您第一個接觸的應用程式](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_ManipulationStarted&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.ManipulationStartedEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartedEventArgs>.|</xref:System.Windows.Input.ManipulationStartedEventArgs></xref:System.EventHandler%601></xref:System.Windows.UIElement.ManipulationStartedEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.ManipulationStartedEventArgs> ManipulationStarted;
    return:
      type: System.EventHandler{System.Windows.Input.ManipulationStartedEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationStartedEvent
  id: ManipulationStartedEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationStartedEvent
  nameWithType: UIElement.ManipulationStartedEvent
  fullName: System.Windows.UIElement.ManipulationStartedEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.ManipulationStarted&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent ManipulationStartedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationStarting
  id: ManipulationStarting
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationStarting
  nameWithType: UIElement.ManipulationStarting
  fullName: System.Windows.UIElement.ManipulationStarting
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "操作處理器最初建立時，就會發生。"
  remarks: "上的項目就會發生 ManipulationStarting 事件<xref:System.Windows.UIElement.IsManipulationEnabled%2A>屬性設定為`true`當使用者將手指放在它</xref:System.Windows.UIElement.IsManipulationEnabled%2A> 根據預設，後續的操作事件報告的位置相對於元素具有操作<xref:System.Windows.UIElement.IsManipulationEnabled%2A>設`true`。</xref:System.Windows.UIElement.IsManipulationEnabled%2A>  您可以指定，位置必須是相對於另一個項目，藉由設定<xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A>屬性。</xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> 比方說，您可以進行此操作相對於項目的父代。       您也可以執行 ManipulationStarting 的下列事件處理常式中:-指定使用者是否需要多個執行的操作，藉由設定手指<xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=fullName>屬性。</xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=fullName>      -指定哪些類型的操作會藉由設定啟用<xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=fullName>屬性<xref:System.Windows.Input.ManipulationModes>列舉型別。</xref:System.Windows.Input.ManipulationModes> </xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=fullName>      -指定單指旋轉中心的藉由設定<xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=fullName>屬性。</xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=fullName>      -藉由呼叫取消操作<xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=fullName>方法。</xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=fullName>       如需操作的詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。  如需操作回應的應用程式的範例，請參閱[逐步解說︰ 建立您第一個接觸的應用程式](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_ManipulationStarting&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.ManipulationStartingEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartingEventArgs>.|</xref:System.Windows.Input.ManipulationStartingEventArgs></xref:System.EventHandler%601></xref:System.Windows.UIElement.ManipulationStartingEvent>"
  example:
  - "The following example shows the event handler for the ManipulationStarting event and sets the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> to the parent element that receives the manipulation events so that the coordinates of the manipulation are relative to the parent element.  This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md).  \n  \n [!code-cs[BasicManipulation#ManipulationStarting](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationstarting)]\n [!code-vb[BasicManipulation#ManipulationStarting](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationstarting)]"
  syntax:
    content: public event EventHandler<System.Windows.Input.ManipulationStartingEventArgs> ManipulationStarting;
    return:
      type: System.EventHandler{System.Windows.Input.ManipulationStartingEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationStartingEvent
  id: ManipulationStartingEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationStartingEvent
  nameWithType: UIElement.ManipulationStartingEvent
  fullName: System.Windows.UIElement.ManipulationStartingEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.ManipulationStarting&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent ManipulationStartingEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Measure(System.Windows.Size)
  id: Measure(System.Windows.Size)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Measure(Size)
  nameWithType: UIElement.Measure(Size)
  fullName: System.Windows.UIElement.Measure(Size)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Updates the <>*> of a <xref href=&quot;System.Windows.UIElement&quot;></xref>.父項目會呼叫這個方法從本身<> *> 實作以形成遞迴配置更新。 呼叫這個方法即構成配置更新第一次傳遞 （「 量值 」 傳遞）。"
  remarks: "計算的版面配置定位在[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]所組成的量值呼叫和<xref:System.Windows.UIElement.Arrange%2A>呼叫。</xref:System.Windows.UIElement.Arrange%2A> 在量值的呼叫中，元素會決定其大小需求使用`availableSize`輸入。 期間<xref:System.Windows.UIElement.Arrange%2A>完成呼叫時，項目大小。</xref:System.Windows.UIElement.Arrange%2A>       `availableSize`可為任何介於&0; 到無限。 參與配置的項目應該會傳回最小值<xref:System.Windows.Size>它們需要針對給定`availableSize`。</xref:System.Windows.Size>       配置第一次具現化，它一律會接收量值之前呼叫<xref:System.Windows.UIElement.Arrange%2A>.</xref:System.Windows.UIElement.Arrange%2A> 不過之後第一次的版面配置傳遞，, 它可能會收到<xref:System.Windows.UIElement.Arrange%2A>呼叫未使用的量值; 這種情形只會影響的屬性時<xref:System.Windows.UIElement.Arrange%2A>變更 （例如對齊），或當父系收到<xref:System.Windows.UIElement.Arrange%2A>沒有量值。</xref:System.Windows.UIElement.Arrange%2A> </xref:System.Windows.UIElement.Arrange%2A> </xref:System.Windows.UIElement.Arrange%2A> 量值的呼叫將會自動讓失效<xref:System.Windows.UIElement.Arrange%2A>呼叫。</xref:System.Windows.UIElement.Arrange%2A>       主要執行緒並未等待的每一個可能的版面配置變更，以非同步的方式，會配置更新。 查詢透過程式碼後置檢查的屬性值的項目可能不會立即反映變更互動的調整大小或版面配置特性的屬性 (<xref:System.Windows.FrameworkElement.Width%2A>內容，例如)。</xref:System.Windows.FrameworkElement.Width%2A>      > [!NOTE] > 配置更新可以強制使用<xref:System.Windows.UIElement.UpdateLayout%2A>方法。</xref:System.Windows.UIElement.UpdateLayout%2A> 不過，呼叫這個方法通常不需要而且可能會導致效能不佳。       版面配置系統會保留兩個不同的佇列的無效配置、 一個量值，一個用於<xref:System.Windows.UIElement.Arrange%2A>.</xref:System.Windows.UIElement.Arrange%2A> 配置佇列會根據執行版面配置; 項目的視覺化樹狀結構中項目的順序排序在樹狀結構中較高的項目是在佇列中，以避免多餘的配置，在父系中重複的變更所造成的頂端。 從佇列中，會自動移除重複的項目和項目會自動從佇列中移除已配置驗證。       在更新版面配置時，量值佇列清空首先，後面接著<xref:System.Windows.UIElement.Arrange%2A>佇列。</xref:System.Windows.UIElement.Arrange%2A> 中的項目<xref:System.Windows.UIElement.Arrange%2A>如果量值佇列中沒有項目，就永遠不會排列佇列。</xref:System.Windows.UIElement.Arrange%2A>"
  syntax:
    content: public void Measure (System.Windows.Size availableSize);
    parameters:
    - id: availableSize
      type: System.Windows.Size
      description: "父項目可以配置的子元素的可用空間。 子元素可以要求較大的空間，比可用。如果目前項目的內容模型中可能有捲動，就可能容納提供的大小。"
  overload: System.Windows.UIElement.Measure*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MeasureCore(System.Windows.Size)
  id: MeasureCore(System.Windows.Size)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MeasureCore(Size)
  nameWithType: UIElement.MeasureCore(Size)
  fullName: System.Windows.UIElement.MeasureCore(Size)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在衍生類別中覆寫，可提供度量邏輯正常運作，調整這個項目大小考量的任何子系項目內容的大小。"
  remarks: "更常見原因，<xref:System.Windows.FrameworkElement>而</xref:System.Windows.FrameworkElement>非<xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>衍生項目 如果您衍生自<xref:System.Windows.FrameworkElement>，請注意，覆寫上 MeasureCore<xref:System.Windows.FrameworkElement>密封 MeasureCore 方法。</xref:System.Windows.FrameworkElement> </xref:System.Windows.FrameworkElement> 因此，您只會覆寫 MeasureCore 做為 alter 配置量值的特性，如果您是衍生自<xref:System.Windows.UIElement>透過沒有包含<xref:System.Windows.FrameworkElement>.</xref:System.Windows.FrameworkElement>繼承</xref:System.Windows.UIElement>的方法 如果您嘗試建置您自己的實作，這可能是大小寫[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]核心層級。 否則，如果您衍生自<xref:System.Windows.FrameworkElement>，則量值的行為的實作範本是<xref:System.Windows.FrameworkElement>的實作。<xref:System.Windows.FrameworkElement.MeasureOverride%2A>.</xref:System.Windows.FrameworkElement.MeasureOverride%2A> </xref:System.Windows.FrameworkElement> </xref:System.Windows.FrameworkElement>       父項目具有子元素必須呼叫<xref:System.Windows.UIElement.Measure%2A>上每個子系，否則這些子元素不調整大小或排列，便會有效地在版面配置中消失。</xref:System.Windows.UIElement.Measure%2A>"
  example:
  - "A typical override of MeasureCore follows this approximate pattern (there is not a built-in collection called `VisualChildren`; `VisualChildren` is a  placeholder that represents whatever child collection your element maintains).  \n  \n [!code-cs[CorePseudocode#UIElementMeasureOverride](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#uielementmeasureoverride)]\n [!code-vb[CorePseudocode#UIElementMeasureOverride](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#uielementmeasureoverride)]  \n  \n-   You must call <xref:System.Windows.UIElement.Measure%2A> on each child element.  \n  \n-   Generally, your implementation should cache measurement information between the MeasureCore and <xref:System.Windows.UIElement.ArrangeCore%2A> method calls in the same element.  \n  \n-   Calling base implementations of MeasureCore is not required, but might be appropriate if the base implementation provides a desired layout capability.  \n  \n-   Calls to <xref:System.Windows.UIElement.Measure%2A> on child elements should pass either the same `availableSize` as the parent, or a subset of the area, depending on the type of layout the parent element supports. For example, it would be valid to remove the area for an element-specific border or padding, a scrollbar, or a custom control."
  syntax:
    content: protected virtual System.Windows.Size MeasureCore (System.Windows.Size availableSize);
    parameters:
    - id: availableSize
      type: System.Windows.Size
      description: "父項目可針對子配置可用的大小。"
    return:
      type: System.Windows.Size
      description: "版面配置中此項目所需的大小。"
  overload: System.Windows.UIElement.MeasureCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseDown
  id: MouseDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseDown
  nameWithType: UIElement.MouseDown
  fullName: System.Windows.UIElement.MouseDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於指標位於此項目上方時，按下任何滑鼠按鈕。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>附加這個類別中，事件，以便 MouseDown 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 附加至 MouseDown 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       MouseDown 事件通常就會引發以及 <xref:System.Windows.UIElement.MouseLeftButtonDown>或<xref:System.Windows.UIElement.MouseRightButtonDown>，這對應到其中的兩個標準滑鼠按鈕的按下。</xref:System.Windows.UIElement.MouseRightButtonDown> </xref:System.Windows.UIElement.MouseLeftButtonDown> <xref:System.Windows.UIElement.MouseLeftButtonDown>和<xref:System.Windows.UIElement.MouseRightButtonDown>也是路由的事件，但它們是直接路由的事件，就會引發適當的按鈕特定事件時<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>事件到達事件路由上的這個項目。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.UIElement.MouseRightButtonDown></xref:System.Windows.UIElement.MouseLeftButtonDown> 請參閱備註或<xref:System.Windows.UIElement.MouseLeftButtonDown><xref:System.Windows.UIElement.MouseRightButtonDown>.</xref:System.Windows.UIElement.MouseRightButtonDown> </xref:System.Windows.UIElement.MouseLeftButtonDown>      > [!IMPORTANT] > 某些控制項可能會繼承的類別處理滑鼠按鈕的事件。 滑鼠左鍵按下事件是最有可能有控制項中的類別處理事件。 處理通常類別標示基礎<xref:System.Windows.Input.Mouse>為已處理的類別事件。</xref:System.Windows.Input.Mouse> 一旦處理標記事件，通常無法引發另一個執行個體處理常式附加至該元素。 不通常也會引發任何其他類別或執行個體的處理常式附加到反昇方向朝向 UI 樹狀目錄中的根項目。       您可以解決的問題，上述的重要事項中所述，仍收到 MouseDown 事件，以滑鼠左鍵，往下處理使用其中一個這些方案的類別衍生類別上的事件︰ 為附加的處理常式<xref:System.Windows.UIElement.PreviewMouseDown>未標示為已由控制項所處理的事件。</xref:System.Windows.UIElement.PreviewMouseDown> 請注意，因為這是預覽事件時，路由從根目錄開始，並透過通道傳送到控制項。      -註冊控制項上的處理常式可循序呼叫<xref:System.Windows.UIElement.AddHandler%2A>，然後選擇讓接聽事件，即使它們已標示為已處理路由的事件資料中的處理常式的簽章選項。</xref:System.Windows.UIElement.AddHandler%2A>      <a name=&quot;routedEventInfo_MouseDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.MouseDownEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement.PreviewMouseDown>。</xref:System.Windows.UIElement.PreviewMouseDown> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.MouseDownEvent>      -覆寫<xref:System.Windows.UIElement.OnMouseDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnMouseDown%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseDownEvent
  id: MouseDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseDownEvent
  nameWithType: UIElement.MouseDownEvent
  fullName: System.Windows.UIElement.MouseDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.MouseDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseEnter
  id: MouseEnter
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseEnter
  nameWithType: UIElement.MouseEnter
  fullName: System.Windows.UIElement.MouseEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於滑鼠指標進入此元素的邊界。"
  remarks: "MouseEnter 是會直接處理路由策略的事件。 直接路由的事件不會引發的路由。相反地，它們會在處理相同的項目所引發的位置。 不過，它們會啟用路由的事件的行為，例如事件觸發程序在樣式中的其他層面。       雖然 MouseEnter 會追蹤滑鼠指標進入項目的範圍時，此事件更常值報告的<xref:System.Windows.UIElement.IsMouseOver%2A>屬性值已經從`false`至`true`這個項目上。</xref:System.Windows.UIElement.IsMouseOver%2A>       此事件會建立一個別名<xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName>附加這個類別中，事件，以便 MouseEnter 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> 附加至 MouseEnter 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName>       A <xref:System.Windows.Controls.Button>(或任何<xref:System.Windows.Controls.Primitives.ButtonBase>衍生的類別) 有原生處理<xref:System.Windows.UIElement.KeyDown>事件時按鈕具有焦點，且已按下的索引鍵空間該列</xref:System.Windows.UIElement.KeyDown></xref:System.Windows.Controls.Primitives.ButtonBase></xref:System.Windows.Controls.Button> 原生處理引發<xref:System.Windows.Controls.Primitives.ButtonBase.Click>與做為來源，按鈕的事件，即使似乎移動滑鼠指標，也會擷取滑鼠、。</xref:System.Windows.Controls.Primitives.ButtonBase.Click> 因為滑鼠捕捉，MouseEnter 事件也會做為來源與按鈕引發。 一般情況下，如果項目捕捉滑鼠，則 MouseEnter 引發，以及<xref:System.Windows.UIElement.GotMouseCapture>和可能是其他控制項的特定事件。</xref:System.Windows.UIElement.GotMouseCapture>      <a name=&quot;routedEventInfo_MouseEnter&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.MouseEnterEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.MouseEventHandler>|     -覆寫<xref:System.Windows.UIElement.OnMouseEnter%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnMouseEnter%2A> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement.MouseEnterEvent>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseEnter;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseEnterEvent
  id: MouseEnterEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseEnterEvent
  nameWithType: UIElement.MouseEnterEvent
  fullName: System.Windows.UIElement.MouseEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.MouseEnter&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseLeave
  id: MouseLeave
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseLeave
  nameWithType: UIElement.MouseLeave
  fullName: System.Windows.UIElement.MouseLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於滑鼠指標離開此元素的邊界。"
  remarks: "MouseLeave 是會直接處理路由策略的事件。 直接路由的事件不會引發的路由。相反地，它們會在處理相同的項目所引發的位置。 不過，它們會啟用路由的事件的行為，例如事件觸發程序在樣式中的其他層面。       雖然 MouseLeave 會追蹤滑鼠離開項目時，此事件更常值報告的<xref:System.Windows.UIElement.IsMouseOver%2A>屬性值已經從`true`至`false`這個項目上。</xref:System.Windows.UIElement.IsMouseOver%2A>       此事件會建立一個別名<xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName>附加這個類別中，事件，以便 MouseLeave 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> 附加至 MouseLeave 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName>      <a name=&quot;routedEventInfo_MouseLeave&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.MouseLeaveEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.MouseEventHandler>|     -覆寫<xref:System.Windows.UIElement.OnMouseLeave%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnMouseLeave%2A> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement.MouseLeaveEvent>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseLeave;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseLeaveEvent
  id: MouseLeaveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseLeaveEvent
  nameWithType: UIElement.MouseLeaveEvent
  fullName: System.Windows.UIElement.MouseLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.MouseLeave&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseLeftButtonDown
  id: MouseLeftButtonDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseLeftButtonDown
  nameWithType: UIElement.MouseLeftButtonDown
  fullName: System.Windows.UIElement.MouseLeftButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於滑鼠指標位在這個項目時按下滑鼠左鍵。"
  remarks: "雖然這看起來進行反昇路由處理項目樹狀結構，但實際上是直接的路由的事件的引發，而且每個<xref:System.Windows.UIElement>。</xref:System.Windows.UIElement> reraised 沿著項目樹狀結構       此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>事件，這是附加的事件處理的事件路由上的每個項目。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       這個事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<xref:System.Windows.UIElement.AddHandler%2A>，使用選項來處理已標記為已處理的事件、 事件接聽程式，才能。</xref:System.Windows.UIElement.AddHandler%2A> 如果您要標示 MouseLeftButtonDown 處理，您基本上會標示<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>路由中的所有其他接聽程式處理，而且所有相關事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 這可能包括類別處理常式產生事件，例如<xref:System.Windows.Controls.Control.MouseDoubleClick>.</xref:System.Windows.Controls.Control.MouseDoubleClick>       在概念上，將這個事件 (和其他滑鼠按鈕的事件上<xref:System.Windows.UIElement>) 是滑鼠 「 服務 」 (所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> 這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。 更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]<xref:System.Windows.Input.Mouse>類別而非於<xref:System.Windows.UIElement>。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>      > [!IMPORTANT] > 某些控制項類別可能具有固有的類別處理滑鼠按鈕的事件。 滑鼠左鍵按下事件是最有可能有控制項中的類別處理事件。 處理通常類別標示基礎<xref:System.Windows.Input.Mouse>為已處理的類別事件。</xref:System.Windows.Input.Mouse> 一旦處理標記事件，通常無法引發另一個執行個體處理常式附加至該元素。 不通常也會引發任何其他類別或執行個體的處理常式附加到反昇方向朝向 UI 樹狀目錄中的根項目。       您可以解決的問題，上述的重要事項中所述，仍收到 MouseLeftButtonDown 事件，以滑鼠左鍵，往下處理使用其中一個這些方案的類別衍生類別上的事件︰ 為附加的處理常式<xref:System.Windows.UIElement.PreviewMouseDown>未標示為已由控制項所處理的事件。</xref:System.Windows.UIElement.PreviewMouseDown> 請注意，因為這是預覽事件時，路由從根目錄開始，並透過通道傳送到控制項。      -註冊控制項上的處理常式可循序呼叫<xref:System.Windows.UIElement.AddHandler%2A>，然後選擇讓接聽事件，即使它們已標示為已處理路由的事件資料中的處理常式的簽章選項。</xref:System.Windows.UIElement.AddHandler%2A>      <a name=&quot;routedEventInfo_MouseLeftButtonDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.MouseLeftButtonDownEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -覆寫<xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.MouseLeftButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseLeftButtonDownEvent
  id: MouseLeftButtonDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseLeftButtonDownEvent
  nameWithType: UIElement.MouseLeftButtonDownEvent
  fullName: System.Windows.UIElement.MouseLeftButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.MouseLeftButtonDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseLeftButtonUp
  id: MouseLeftButtonUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseLeftButtonUp
  nameWithType: UIElement.MouseLeftButtonUp
  fullName: System.Windows.UIElement.MouseLeftButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當滑鼠指標位於此元素上方且放開滑鼠左的按鈕時發生。"
  remarks: "雖然這看起來進行反昇路由處理項目樹狀結構，但實際上是直接的路由的事件的引發，而且每個<xref:System.Windows.UIElement>。</xref:System.Windows.UIElement> reraised 沿著項目樹狀結構       此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>事件，這是附加的事件處理的事件路由上的每個項目。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       這個事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> 如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<xref:System.Windows.UIElement.AddHandler%2A>，使用選項來處理已標記為已處理的事件、 事件接聽程式，才能。</xref:System.Windows.UIElement.AddHandler%2A> 如果您要標示 MouseLeftButtonUp 處理，您基本上會標示<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>路由中的所有其他接聽程式處理，而且所有相關事件。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       在概念上，將這個事件 (和其他滑鼠按鈕的事件上<xref:System.Windows.UIElement>) 是滑鼠 「 服務 」 (所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> 這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。 更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]<xref:System.Windows.Input.Mouse>類別而非於<xref:System.Windows.UIElement>。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_MouseLeftButtonUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.MouseLeftButtonUpEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -覆寫<xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.MouseLeftButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseLeftButtonUpEvent
  id: MouseLeftButtonUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseLeftButtonUpEvent
  nameWithType: UIElement.MouseLeftButtonUpEvent
  fullName: System.Windows.UIElement.MouseLeftButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.MouseLeftButtonUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseMove
  id: MouseMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseMove
  nameWithType: UIElement.MouseMove
  fullName: System.Windows.UIElement.MouseMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於滑鼠指標移動此元素上方。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName>附加這個類別中，事件，以便 MouseMove 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> 附加至 MouseMove 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName>      <a name=&quot;routedEventInfo_MouseMove&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.MouseMoveEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.MouseEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement.PreviewMouseMove>。</xref:System.Windows.UIElement.PreviewMouseMove> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement.MouseMoveEvent>      -覆寫<xref:System.Windows.UIElement.OnMouseMove%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnMouseMove%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseMove;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseMoveEvent
  id: MouseMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseMoveEvent
  nameWithType: UIElement.MouseMoveEvent
  fullName: System.Windows.UIElement.MouseMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.MouseMove&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseRightButtonDown
  id: MouseRightButtonDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseRightButtonDown
  nameWithType: UIElement.MouseRightButtonDown
  fullName: System.Windows.UIElement.MouseRightButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當滑鼠指標位於此元素上方時，按下滑鼠右按鈕時發生。"
  remarks: "雖然這看起來進行反昇路由處理項目樹狀結構，但實際上是直接的路由的事件的引發，而且每個<xref:System.Windows.UIElement>。</xref:System.Windows.UIElement> reraised 沿著項目樹狀結構       此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>事件，這是附加的事件處理的事件路由上的每個項目。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       這個事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<xref:System.Windows.UIElement.AddHandler%2A>，使用選項來處理已標記為已處理的事件、 事件接聽程式，才能。</xref:System.Windows.UIElement.AddHandler%2A> 如果您要標示 MouseRightButtonDown 處理，您基本上會標示<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>路由中的所有其他接聽程式處理，而且所有相關事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 這可能包括類別處理常式產生事件，例如<xref:System.Windows.Controls.Control.MouseDoubleClick>.</xref:System.Windows.Controls.Control.MouseDoubleClick>       在概念上，將這個事件 (和其他滑鼠按鈕的事件上<xref:System.Windows.UIElement>) 是滑鼠 「 服務 」 (所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> 這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。 更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]<xref:System.Windows.Input.Mouse>類別而非於<xref:System.Windows.UIElement>。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>       滑鼠右鍵事件中通常會有原生處理應用程式案例。 比方說，向下的滑鼠右按鈕可能會顯示內容功能表。 請參閱[ContextMenu 概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_MouseRightButtonDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.MouseRightButtonDownEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -覆寫<xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.MouseRightButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseRightButtonDownEvent
  id: MouseRightButtonDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseRightButtonDownEvent
  nameWithType: UIElement.MouseRightButtonDownEvent
  fullName: System.Windows.UIElement.MouseRightButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.MouseRightButtonDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseRightButtonUp
  id: MouseRightButtonUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseRightButtonUp
  nameWithType: UIElement.MouseRightButtonUp
  fullName: System.Windows.UIElement.MouseRightButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當滑鼠指標位於此元素上方且放開滑鼠右按鈕時發生。"
  remarks: "雖然這看起來進行反昇路由處理項目樹狀結構，但實際上是直接的路由的事件的引發，而且每個<xref:System.Windows.UIElement>。</xref:System.Windows.UIElement> reraised 沿著項目樹狀結構       此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>事件，這是附加的事件處理的事件路由上的每個項目。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       這個事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> 如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<xref:System.Windows.UIElement.AddHandler%2A>，使用選項來處理已標記為已處理的事件、 事件接聽程式，才能。</xref:System.Windows.UIElement.AddHandler%2A> 如果您要標示 MouseRightButtonUp 處理，您基本上會標示<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>路由中的所有其他接聽程式處理，而且所有相關事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       在概念上，將這個事件 (和其他滑鼠按鈕的事件上<xref:System.Windows.UIElement>) 是滑鼠 「 服務 」 (所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> 這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。 更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]<xref:System.Windows.Input.Mouse>類別而非於<xref:System.Windows.UIElement>。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_MouseRightButtonUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.MouseRightButtonUpEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -覆寫<xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.MouseRightButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseRightButtonUpEvent
  id: MouseRightButtonUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseRightButtonUpEvent
  nameWithType: UIElement.MouseRightButtonUpEvent
  fullName: System.Windows.UIElement.MouseRightButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.MouseRightButtonUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseUp
  id: MouseUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseUp
  nameWithType: UIElement.MouseUp
  fullName: System.Windows.UIElement.MouseUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素上方放開任何滑鼠按鈕時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>附加這個類別中，事件，以便 MouseUp 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> 附加至 MouseUp 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       MouseUp 事件通常就會引發以及 <xref:System.Windows.UIElement.MouseLeftButtonUp>或<xref:System.Windows.UIElement.MouseRightButtonUp>，這對應至其中的兩個標準滑鼠按鈕的版本。</xref:System.Windows.UIElement.MouseRightButtonUp> </xref:System.Windows.UIElement.MouseLeftButtonUp> <xref:System.Windows.UIElement.MouseLeftButtonUp>和<xref:System.Windows.UIElement.MouseRightButtonUp>也是路由的事件，但它們是直接路由的事件，就會引發適當的按鈕特定事件時<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>事件到達事件路由上的這個項目。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.UIElement.MouseRightButtonUp></xref:System.Windows.UIElement.MouseLeftButtonUp> 請參閱備註或<xref:System.Windows.UIElement.MouseLeftButtonUp><xref:System.Windows.UIElement.MouseRightButtonUp>.</xref:System.Windows.UIElement.MouseRightButtonUp> </xref:System.Windows.UIElement.MouseLeftButtonUp>      <a name=&quot;routedEventInfo_MouseUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.MouseUpEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement.PreviewMouseUp>。</xref:System.Windows.UIElement.PreviewMouseUp> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.MouseUpEvent>      -覆寫<xref:System.Windows.UIElement.OnMouseUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnMouseUp%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseUpEvent
  id: MouseUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseUpEvent
  nameWithType: UIElement.MouseUpEvent
  fullName: System.Windows.UIElement.MouseUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.MouseUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseWheel
  id: MouseWheel
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseWheel
  nameWithType: UIElement.MouseWheel
  fullName: System.Windows.UIElement.MouseWheel
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當滑鼠指標位於此元素上方且使用者滾動滑鼠滾輪時發生。"
  remarks: "焦點或滑鼠捕捉優先於滑鼠指標所在位置。因此，如果您收到滑鼠滾輪事件從取得焦點或擷取的項目時，滑鼠指標實際上可能是透過另一個項目。       此事件會建立一個別名<xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName>附加這個類別中，事件，使滑鼠滾輪部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> 附加至滑鼠滾輪事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName>      <a name=&quot;routedEventInfo_MouseWheel&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.MouseWheelEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.MouseWheelEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement.PreviewMouseWheel>。</xref:System.Windows.UIElement.PreviewMouseWheel> </xref:System.Windows.Input.MouseWheelEventHandler> </xref:System.Windows.UIElement.MouseWheelEvent>      -覆寫<xref:System.Windows.UIElement.OnMouseWheel%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnMouseWheel%2A>"
  syntax:
    content: public event System.Windows.Input.MouseWheelEventHandler MouseWheel;
    return:
      type: System.Windows.Input.MouseWheelEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseWheelEvent
  id: MouseWheelEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseWheelEvent
  nameWithType: UIElement.MouseWheelEvent
  fullName: System.Windows.UIElement.MouseWheelEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.MouseWheel&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseWheelEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)
  id: MoveFocus(System.Windows.Input.TraversalRequest)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MoveFocus(TraversalRequest)
  nameWithType: UIElement.MoveFocus(TraversalRequest)
  fullName: System.Windows.UIElement.MoveFocus(TraversalRequest)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "嘗試將焦點從這個項目移至另一個項目。 要移動的方向是由指引方向的會解譯此項目的視覺化父項目組織內指定。"
  remarks: "請確定您檢查此方法的傳回值。 傳回值為`false`如果周遊時碰到的定位點由控制項的組合所定義，並周遊要求未包裝要求可能會傳回。"
  syntax:
    content: public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);
    parameters:
    - id: request
      type: System.Windows.Input.TraversalRequest
      description: "周遊要求，其中包含屬性指出周遊現有定位順序或方向，以視覺化方式移動中的模式。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已執行要求的周遊。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.MoveFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  id: OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnAccessKey(AccessKeyEventArgs)
  nameWithType: UIElement.OnAccessKey(AccessKeyEventArgs)
  fullName: System.Windows.UIElement.OnAccessKey(AccessKeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理此元素的有意義的存取金鑰時叫用。"
  remarks: "在任何實際 AccessKey 事件<xref:System.Windows.UIElement>類別，或其他位置，您可以引發或附加處理常式 for...in</xref:System.Windows.UIElement> 相反地，透過專用的管理員類別，產生事件<xref:System.Windows.Input.AccessKeyManager>，其中進行後置處理所有輸入来搜尋適用於整個輸入模型的存取金鑰。</xref:System.Windows.Input.AccessKeyManager>"
  syntax:
    content: protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.AccessKeyEventArgs
      description: "要便捷鍵事件的事件資料。 事件資料報表，叫用的機碼，並指出是否<xref href=&quot;System.Windows.Input.AccessKeyManager&quot;></xref>控制這些事件的傳送物件也將此存取金鑰引動過程傳送到其他項目。"
  overload: System.Windows.UIElement.OnAccessKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)
  id: OnChildDesiredSizeChanged(System.Windows.UIElement)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnChildDesiredSizeChanged(UIElement)
  nameWithType: UIElement.OnChildDesiredSizeChanged(UIElement)
  fullName: System.Windows.UIElement.OnChildDesiredSizeChanged(UIElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "支援的配置行為，重新調整大小的子元素。"
  remarks: "您的應用程式程式碼通常不呼叫這個方法。 它會公開讓衍生的類別可以進行進一步的項目會檢查其本身可能是無效的配置狀態。 類別也可嘗試最佳化，以將配置傳遞至子元素的大小變更為基礎的處理時間降到最低。 範例衍生項目類別的實作 OnChildDesiredSizeChanged 是<xref:System.Windows.Controls.Grid>控制項。</xref:System.Windows.Controls.Grid>"
  syntax:
    content: protected virtual void OnChildDesiredSizeChanged (System.Windows.UIElement child);
    parameters:
    - id: child
      type: System.Windows.UIElement
      description: "正在調整大小的子元素。"
  overload: System.Windows.UIElement.OnChildDesiredSizeChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnCreateAutomationPeer
  id: OnCreateAutomationPeer
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnCreateAutomationPeer()
  nameWithType: UIElement.OnCreateAutomationPeer()
  fullName: System.Windows.UIElement.OnCreateAutomationPeer()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "傳回類別的特定<xref href=&quot;System.Windows.Automation.Peers.AutomationPeer&quot;></xref>實作[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]基礎結構。"
  syntax:
    content: protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();
    parameters: []
    return:
      type: System.Windows.Automation.Peers.AutomationPeer
      description: "特定型別的<xref href=&quot;System.Windows.Automation.Peers.AutomationPeer&quot;></xref>實作。"
  overload: System.Windows.UIElement.OnCreateAutomationPeer*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)
  id: OnDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnDragEnter(DragEventArgs)
  nameWithType: UIElement.OnDragEnter(DragEventArgs)
  fullName: System.Windows.UIElement.OnDragEnter(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDragEnter (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnDragEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)
  id: OnDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnDragLeave(DragEventArgs)
  nameWithType: UIElement.OnDragLeave(DragEventArgs)
  fullName: System.Windows.UIElement.OnDragLeave(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDragLeave (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnDragLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)
  id: OnDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnDragOver(DragEventArgs)
  nameWithType: UIElement.OnDragOver(DragEventArgs)
  fullName: System.Windows.UIElement.OnDragOver(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDragOver (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnDragOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)
  id: OnDrop(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnDrop(DragEventArgs)
  nameWithType: UIElement.OnDrop(DragEventArgs)
  fullName: System.Windows.UIElement.OnDrop(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDrop (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  id: OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: UIElement.OnGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.UIElement.OnGiveFeedback(GiveFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.GiveFeedbackEventArgs
      description: "<xref href=&quot;System.Windows.GiveFeedbackEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnGiveFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)
  id: OnGotFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnGotFocus(RoutedEventArgs)
  nameWithType: UIElement.OnGotFocus(RoutedEventArgs)
  fullName: System.Windows.UIElement.OnGotFocus(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "引發<xref href=&quot;System.Windows.UIElement.GotFocus&quot;></xref>使用所提供的事件資料的路由的事件。"
  remarks: "This method, although virtual, does have a default implementation that raises the event.  \n  \n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes. The OnGotFocus implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] On\\* implementations, which only provide a convenient way to add class handling for that event."
  syntax:
    content: protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "A <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref>包含事件資料。 此事件資料必須包含的識別項<xref href=&quot;System.Windows.UIElement.GotFocus&quot;></xref>事件。"
  overload: System.Windows.UIElement.OnGotFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnGotKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  id: OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnGotMouseCapture(MouseEventArgs)
  nameWithType: UIElement.OnGotMouseCapture(MouseEventArgs)
  fullName: System.Windows.UIElement.OnGotMouseCapture(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnGotMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  id: OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnGotStylusCapture(StylusEventArgs)
  nameWithType: UIElement.OnGotStylusCapture(StylusEventArgs)
  fullName: System.Windows.UIElement.OnGotStylusCapture(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnGotStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  id: OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnGotTouchCapture(TouchEventArgs)
  nameWithType: UIElement.OnGotTouchCapture(TouchEventArgs)
  fullName: System.Windows.UIElement.OnGotTouchCapture(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理<xref href=&quot;System.Windows.UIElement.GotTouchCapture&quot;></xref>觸控擷取至這個項目時所發生的路由的事件。"
  remarks: "OnGotTouchCapture 方法具有預設的實作。 在處理衍生類別中覆寫 OnGotTouchCapture<xref:System.Windows.UIElement.GotTouchCapture>事件。</xref:System.Windows.UIElement.GotTouchCapture> 請務必呼叫基底類別的 OnGotTouchCapture 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnGotTouchCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement.IsKeyboardFocusedChanged&quot;></xref>這個項目上引發事件。 實作這個方法可為此事件加入類別處理。"
  remarks: "此虛擬方法，就會引發時的值<xref:System.Windows.UIElement.IsKeyboardFocused%2A>相依性屬性變更。</xref:System.Windows.UIElement.IsKeyboardFocused%2A> 虛擬方法會先引發，並可以操作需要的事件資料。 然後在<xref:System.Windows.UIElement.IsKeyboardFocusedChanged>與該相同的事件資料執行個體就會引發事件。</xref:System.Windows.UIElement.IsKeyboardFocusedChanged> 請注意，<xref:System.Windows.UIElement.IsKeyboardFocusedChanged>事件就不會路由的事件。</xref:System.Windows.UIElement.IsKeyboardFocusedChanged> 因此，您無法將它標示為已處理的類別處理常式中。       這個方法會具有預設的實作。 因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。 您可能會呼叫基底之前或之後特殊處理，根據您的需求。"
  syntax:
    content: protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnIsKeyboardFocusedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "前叫用<xref href=&quot;System.Windows.UIElement.IsKeyboardFocusWithinChanged&quot;></xref>由這個項目就會引發事件。 實作這個方法可為此事件加入類別處理。"
  remarks: "此虛擬方法，就會引發時的值<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>相依性屬性變更。</xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> 虛擬方法會先引發，並可以操作需要的事件資料。 然後在<xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>與該相同的事件資料執行個體就會引發事件。</xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> 請注意，<xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>事件就不會路由的事件。</xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> 因此，您無法將它標示為已處理的類別處理常式中。       這個方法會具有預設的實作。 因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。 您可能會呼叫基底之前或之後特殊處理，根據您的需求。"
  syntax:
    content: protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "A <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement.IsMouseCapturedChanged&quot;></xref>這個項目上引發事件。 實作這個方法可為此事件加入類別處理。"
  remarks: "此虛擬方法，就會引發時的值<xref:System.Windows.UIElement.IsMouseCaptured%2A>相依性屬性變更其值。</xref:System.Windows.UIElement.IsMouseCaptured%2A> 虛擬方法會先引發，並可以操作需要的事件資料。 然後在<xref:System.Windows.UIElement.IsMouseCapturedChanged>與該相同的事件資料執行個體就會引發事件。</xref:System.Windows.UIElement.IsMouseCapturedChanged> 請注意，<xref:System.Windows.UIElement.IsMouseCapturedChanged>事件不是路由的事件。因此，您無法將它標示為已處理的類別處理常式中。</xref:System.Windows.UIElement.IsMouseCapturedChanged>       這個方法會具有預設的實作。 因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。 您可能會呼叫基底之前或之後特殊處理，根據您的需求。"
  syntax:
    content: protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnIsMouseCapturedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement.IsMouseCaptureWithinChanged&quot;></xref>這個項目上引發事件。 實作這個方法可為此事件加入類別處理。"
  syntax:
    content: protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "A <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnIsMouseCaptureWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement.IsMouseDirectlyOverChanged&quot;></xref>這個項目上引發事件。 實作這個方法可為此事件加入類別處理。"
  remarks: "此虛擬方法，就會引發時的值<xref:System.Windows.UIElement.IsMouseDirectlyOver%2A>相依性屬性變更其值。</xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> 虛擬方法會先引發，並可以操作需要的事件資料。 然後在<xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>與該相同的事件資料執行個體就會引發事件。</xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> 請注意，<xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>事件就不會路由的事件。</xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> 因此，您無法將它標示為已處理的類別處理常式中。       這個方法會具有預設的實作。 因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。 您可能會呼叫基底之前或之後特殊處理，根據您的需求。"
  syntax:
    content: protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnIsMouseDirectlyOverChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement.IsStylusCapturedChanged&quot;></xref>這個項目上引發事件。 實作這個方法可為此事件加入類別處理。"
  remarks: "此虛擬方法，就會引發時的值<xref:System.Windows.UIElement.IsStylusCaptured%2A>相依性屬性變更其值。</xref:System.Windows.UIElement.IsStylusCaptured%2A> 虛擬方法會先引發，並可以操作需要的事件資料。 然後在<xref:System.Windows.UIElement.IsStylusCapturedChanged>與該相同的事件資料執行個體就會引發事件。</xref:System.Windows.UIElement.IsStylusCapturedChanged> 請注意，事件就不會路由的事件。 因此，您無法將它標示為已處理的類別處理常式中。       這個方法會具有預設的實作。 因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。 您可能會呼叫基底之前或之後特殊處理，根據您的需求。"
  syntax:
    content: protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "A <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnIsStylusCapturedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement.IsStylusCaptureWithinChanged&quot;></xref>這個項目上引發事件。 實作這個方法可為此事件加入類別處理。"
  remarks: "此虛擬方法，就會引發時的值<xref:System.Windows.UIElement.IsStylusCaptureWithin%2A>相依性屬性變更其值。</xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> 虛擬方法會先引發，並可以操作需要的事件資料。 然後在<xref:System.Windows.UIElement.IsStylusCaptureWithinChanged>與該相同的事件資料執行個體就會引發事件。</xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> 請注意，事件就不會路由的事件。 因此，您無法將它標示為已處理的類別處理常式中。       這個方法會具有預設的實作。 因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。 您可能會呼叫基底之前或之後特殊處理，根據您的需求。"
  syntax:
    content: protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnIsStylusCaptureWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement.IsStylusDirectlyOverChanged&quot;></xref>這個項目上引發事件。 實作這個方法可為此事件加入類別處理。"
  remarks: "此虛擬方法，就會引發時的值<xref:System.Windows.UIElement.IsStylusDirectlyOver%2A>相依性屬性變更其值。</xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> 虛擬方法會先引發，並可以操作需要的事件資料。 然後在<xref:System.Windows.UIElement.IsStylusDirectlyOverChanged>與該相同的事件資料執行個體就會引發事件。</xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> 請注意，事件就不會路由的事件。 因此您無法將它標示為已處理的類別處理常式中。       這個方法會具有預設的實作。 因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。 您可能會呼叫基底之前或之後特殊處理，根據您的需求。"
  syntax:
    content: protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnIsStylusDirectlyOverChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  id: OnKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnKeyDown(KeyEventArgs)
  nameWithType: UIElement.OnKeyDown(KeyEventArgs)
  fullName: System.Windows.UIElement.OnKeyDown(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then OnKeyDown is not invoked.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnKeyDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  id: OnKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnKeyUp(KeyEventArgs)
  nameWithType: UIElement.OnKeyUp(KeyEventArgs)
  fullName: System.Windows.UIElement.OnKeyUp(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then OnKeyUp is not invoked.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnKeyUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)
  id: OnLostFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnLostFocus(RoutedEventArgs)
  nameWithType: UIElement.OnLostFocus(RoutedEventArgs)
  fullName: System.Windows.UIElement.OnLostFocus(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "引發<xref href=&quot;System.Windows.UIElement.LostFocus&quot;></xref>使用所提供的事件資料的路由的事件。"
  remarks: "This method, although virtual, does have a default implementation that raises the event.  \n  \n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes. This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] On\\* implementations, which only provide a convenient way to add class handling for that event."
  syntax:
    content: protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "A <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref>包含事件資料。 此事件資料必須包含的識別項<xref href=&quot;System.Windows.UIElement.LostFocus&quot;></xref>事件。"
  overload: System.Windows.UIElement.OnLostFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnLostKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  id: OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnLostMouseCapture(MouseEventArgs)
  nameWithType: UIElement.OnLostMouseCapture(MouseEventArgs)
  fullName: System.Windows.UIElement.OnLostMouseCapture(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnLostMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  id: OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnLostStylusCapture(StylusEventArgs)
  nameWithType: UIElement.OnLostStylusCapture(StylusEventArgs)
  fullName: System.Windows.UIElement.OnLostStylusCapture(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnLostStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  id: OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnLostTouchCapture(TouchEventArgs)
  nameWithType: UIElement.OnLostTouchCapture(TouchEventArgs)
  fullName: System.Windows.UIElement.OnLostTouchCapture(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理<xref href=&quot;System.Windows.UIElement.LostTouchCapture&quot;></xref>此元素失去觸控擷取時所發生的路由的事件。"
  remarks: "OnLostTouchCapture 方法具有預設的實作。 在處理衍生類別中覆寫 OnLostTouchCapture<xref:System.Windows.UIElement.LostTouchCapture>事件。</xref:System.Windows.UIElement.LostTouchCapture> 請務必呼叫基底類別的 OnLostTouchCapture 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnLostTouchCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  id: OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  nameWithType: UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  fullName: System.Windows.UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "時呼叫<xref href=&quot;System.Windows.UIElement.ManipulationBoundaryFeedback&quot;></xref>就會發生事件。"
  remarks: "OnManipulationBoundaryFeedback 方法具有預設的實作。 在處理衍生類別中覆寫 OnManipulationBoundaryFeedback<xref:System.Windows.UIElement.ManipulationBoundaryFeedback>事件。</xref:System.Windows.UIElement.ManipulationBoundaryFeedback> 請確定呼叫基底類別的 OnManipulationBoundaryFeedback 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
      description: "事件資料。"
  overload: System.Windows.UIElement.OnManipulationBoundaryFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)
  id: OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnManipulationCompleted(ManipulationCompletedEventArgs)
  nameWithType: UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs)
  fullName: System.Windows.UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "時呼叫<xref href=&quot;System.Windows.UIElement.ManipulationCompleted&quot;></xref>就會發生事件。"
  remarks: "OnManipulationCompleted 方法具有預設的實作。 在處理衍生類別中覆寫 OnManipulationCompleted<xref:System.Windows.UIElement.ManipulationCompleted>事件。</xref:System.Windows.UIElement.ManipulationCompleted> 請確定呼叫基底類別的 OnManipulationCompleted 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnManipulationCompleted (System.Windows.Input.ManipulationCompletedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationCompletedEventArgs
      description: "事件資料。"
  overload: System.Windows.UIElement.OnManipulationCompleted*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)
  id: OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnManipulationDelta(ManipulationDeltaEventArgs)
  nameWithType: UIElement.OnManipulationDelta(ManipulationDeltaEventArgs)
  fullName: System.Windows.UIElement.OnManipulationDelta(ManipulationDeltaEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "時呼叫<xref href=&quot;System.Windows.UIElement.ManipulationDelta&quot;></xref>就會發生事件。"
  remarks: "OnManipulationDelta 方法具有預設的實作。 在處理衍生類別中覆寫 OnManipulationDelta<xref:System.Windows.UIElement.ManipulationDelta>事件。</xref:System.Windows.UIElement.ManipulationDelta> 請確定呼叫基底類別的 OnManipulationDelta 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnManipulationDelta (System.Windows.Input.ManipulationDeltaEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationDeltaEventArgs
      description: "事件資料。"
  overload: System.Windows.UIElement.OnManipulationDelta*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)
  id: OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)
  nameWithType: UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)
  fullName: System.Windows.UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "時呼叫<xref href=&quot;System.Windows.UIElement.ManipulationInertiaStarting&quot;></xref>就會發生事件。"
  remarks: "OnManipulationInertiaStarting 方法具有預設的實作。 在處理衍生類別中覆寫 OnManipulationInertiaStarting<xref:System.Windows.UIElement.ManipulationInertiaStarting>事件。</xref:System.Windows.UIElement.ManipulationInertiaStarting> 請確定呼叫基底類別的 OnManipulationInertiaStarting 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnManipulationInertiaStarting (System.Windows.Input.ManipulationInertiaStartingEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationInertiaStartingEventArgs
      description: "事件資料。"
  overload: System.Windows.UIElement.OnManipulationInertiaStarting*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)
  id: OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnManipulationStarted(ManipulationStartedEventArgs)
  nameWithType: UIElement.OnManipulationStarted(ManipulationStartedEventArgs)
  fullName: System.Windows.UIElement.OnManipulationStarted(ManipulationStartedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "時呼叫<xref href=&quot;System.Windows.UIElement.ManipulationStarted&quot;></xref>就會發生事件。"
  remarks: "OnManipulationStarted 方法具有預設的實作。 在處理衍生類別中覆寫 OnManipulationStarted<xref:System.Windows.UIElement.ManipulationStarted>事件。</xref:System.Windows.UIElement.ManipulationStarted> 請確定呼叫基底類別的 OnManipulationStarted 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnManipulationStarted (System.Windows.Input.ManipulationStartedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationStartedEventArgs
      description: "事件資料。"
  overload: System.Windows.UIElement.OnManipulationStarted*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)
  id: OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnManipulationStarting(ManipulationStartingEventArgs)
  nameWithType: UIElement.OnManipulationStarting(ManipulationStartingEventArgs)
  fullName: System.Windows.UIElement.OnManipulationStarting(ManipulationStartingEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理<xref href=&quot;System.Windows.UIElement.ManipulationStarting&quot;></xref>建立第一個操作處理器時，就會發生的路由的事件。"
  remarks: "OnManipulationStarting 方法具有預設的實作。 在處理衍生類別中覆寫 OnManipulationStarting<xref:System.Windows.UIElement.ManipulationStarting>事件。</xref:System.Windows.UIElement.ManipulationStarting> 請務必呼叫基底類別的 OnManipulationStarting 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnManipulationStarting (System.Windows.Input.ManipulationStartingEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationStartingEventArgs
      description: "A <xref href=&quot;System.Windows.Input.ManipulationStartingEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnManipulationStarting*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event as handled, OnMouseDown is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnMouseDown, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 此事件資料會報告滑鼠按鈕已按下處理的狀態有關的詳細資訊。"
  overload: System.Windows.UIElement.OnMouseDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  id: OnMouseEnter(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseEnter(MouseEventArgs)
  nameWithType: UIElement.OnMouseEnter(MouseEventArgs)
  fullName: System.Windows.UIElement.OnMouseEnter(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt;這個項目上引發附加的事件。 實作這個方法可為此事件加入類別處理。"
  remarks: "這個方法會具有預設的實作。 因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。 您可能會呼叫基底之前或之後特殊處理，根據您的需求。       這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]事件模式 * 方法︰ 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。 在此情況下，符合的事件是具有直接路由策略的路由的事件。 將事件標示為已處理仍很有用防止一般的執行個體的處理常式 (這些不指定`handledEventsToo`) 叫用。"
  syntax:
    content: protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnMouseEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  id: OnMouseLeave(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseLeave(MouseEventArgs)
  nameWithType: UIElement.OnMouseLeave(MouseEventArgs)
  fullName: System.Windows.UIElement.OnMouseLeave(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt;這個項目上引發附加的事件。 實作這個方法可為此事件加入類別處理。"
  remarks: "這個方法會具有預設的實作。 因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。 您可能會呼叫基底之前或之後特殊處理，根據您的需求。       這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]事件模式 * 方法︰ 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。 在此情況下，符合的事件是具有直接路由策略的路由的事件。 將事件標示為已處理仍很有用防止一般的執行個體的處理常式 (這些不指定`handledEventsToo`) 叫用。"
  syntax:
    content: protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnMouseLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement.MouseLeftButtonDown&quot;></xref>這個項目上引發路由的事件。 實作這個方法可為此事件加入類別處理。"
  remarks: "<xref:System.Windows.UIElement.MouseLeftButtonDown>事件反昇路由會出現但實際上以間接方式傳送。</xref:System.Windows.UIElement.MouseLeftButtonDown> <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>為路由傳送，泡泡圖的基礎事件，並<xref:System.Windows.UIElement>沿著事件路由會使用相同引發直接路由的事件<xref:System.Windows.UIElement.MouseLeftButtonDown>.</xref:System.Windows.UIElement.MouseLeftButtonDown>處理</xref:System.Windows.UIElement>每個</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 雖然您可以將標記<xref:System.Windows.UIElement.MouseLeftButtonDown>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</xref:System.Windows.UIElement.MouseLeftButtonDown> 不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定`handledEventsToo`) 叫用。       一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement>接聽<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>並將它轉換成適當的本機事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.UIElement> 如果您想要覆寫這個邏輯，您必須建立衍生的類別。 在衍生類別的靜態建構函式註冊<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>的替代類別處理常式 您無法變更處理行為的滑鼠<xref:System.Windows.UIElement>藉由覆寫 OnMouseLeftButtonDown。</xref:System.Windows.UIElement>       或者，您可以覆寫這個方法以變更處理特定的滑鼠狀態的事件。 您是否願意呼叫基底實作，取決於您的案例。 無法呼叫基底，就會停用該也預期會叫用 OnMouseLeftButtonDown 的上階類別上的滑鼠事件的預設輸入的處理。 例如，您可以從衍生<xref:System.Windows.Controls.Button>並在您的衍生類別中將 OnMouseLeftButtonDown 覆寫而不需要呼叫基底實作; 不過，停用覆寫。<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件。</xref:System.Windows.Controls.Primitives.ButtonBase.Click> </xref:System.Windows.Controls.Button>"
  syntax:
    content: protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 事件資料會報告滑鼠左鍵已按下。"
  overload: System.Windows.UIElement.OnMouseLeftButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement.MouseLeftButtonUp&quot;></xref>路由的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "<xref:System.Windows.UIElement.MouseLeftButtonUp>事件反昇路由會出現但實際上以間接方式傳送。</xref:System.Windows.UIElement.MouseLeftButtonUp> <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>為路由傳送，泡泡圖的基礎事件，並<xref:System.Windows.UIElement>沿著事件路由會使用相同引發直接路由的事件<xref:System.Windows.UIElement.MouseLeftButtonUp>.</xref:System.Windows.UIElement.MouseLeftButtonUp>處理</xref:System.Windows.UIElement>每個</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> 雖然您可以將標記<xref:System.Windows.UIElement.MouseLeftButtonUp>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</xref:System.Windows.UIElement.MouseLeftButtonUp> 不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定`handledEventsToo`) 叫用。       一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement>接聽<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>並將它轉換成適當的本機事件。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> </xref:System.Windows.UIElement> 如果您想要覆寫這個邏輯，您必須建立衍生的類別。 在衍生類別的靜態建構函式註冊<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>的替代類別處理常式 您無法變更處理行為的滑鼠<xref:System.Windows.UIElement>藉由覆寫 OnMouseLeftButtonUp。</xref:System.Windows.UIElement>"
  syntax:
    content: protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 事件資料會報告已放開滑鼠左的按鈕。"
  overload: System.Windows.UIElement.OnMouseLeftButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  id: OnMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseMove(MouseEventArgs)
  nameWithType: UIElement.OnMouseMove(MouseEventArgs)
  fullName: System.Windows.UIElement.OnMouseMove(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnMouseMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseRightButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement.MouseRightButtonDown&quot;></xref>路由的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "<xref:System.Windows.UIElement.MouseRightButtonDown>事件反昇路由會出現但實際上以間接方式傳送。</xref:System.Windows.UIElement.MouseRightButtonDown> <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>為路由傳送，泡泡圖的基礎事件，並<xref:System.Windows.UIElement>沿著事件路由會使用相同引發直接路由的事件<xref:System.Windows.UIElement.MouseRightButtonDown>.</xref:System.Windows.UIElement.MouseRightButtonDown>處理</xref:System.Windows.UIElement>每個</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 雖然您可以將標記<xref:System.Windows.UIElement.MouseRightButtonDown>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</xref:System.Windows.UIElement.MouseRightButtonDown> 不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定`handledEventsToo`) 叫用。       一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement>接聽<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>並將它轉換成適當的本機事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.UIElement> 如果您想要覆寫這個邏輯，您必須建立衍生的類別。 在衍生類別的靜態建構函式註冊<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>的替代類別處理常式 您無法變更處理行為的滑鼠<xref:System.Windows.UIElement>藉由覆寫 OnMouseRightButtonDown。</xref:System.Windows.UIElement>       或者，您可以覆寫這個方法以變更處理特定的滑鼠狀態的事件。 您是否願意呼叫基底實作，取決於您的案例。 無法呼叫基底，就會停用該也預期會叫用 OnMouseRightButtonDown 的上階類別上的滑鼠事件的預設輸入的處理。 例如，您可以從衍生<xref:System.Windows.Controls.Control>並在您未呼叫基底的衍生類別中覆寫 OnMouseRightButtonDown; 不過，此覆寫停用內容功能表上的服務您的控制項，也就是組件的<xref:System.Windows.Controls.Control>預設行為。</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Control>"
  syntax:
    content: protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 事件資料會報告滑鼠按鈕已按下。"
  overload: System.Windows.UIElement.OnMouseRightButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseRightButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement.MouseRightButtonUp&quot;></xref>路由的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "<xref:System.Windows.UIElement.MouseRightButtonUp>事件反昇路由會出現但實際上以間接方式傳送。</xref:System.Windows.UIElement.MouseRightButtonUp> <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>為路由傳送，泡泡圖的基礎事件，並<xref:System.Windows.UIElement>沿著事件路由會使用相同引發直接路由的事件<xref:System.Windows.UIElement.MouseRightButtonUp>.</xref:System.Windows.UIElement.MouseRightButtonUp>處理</xref:System.Windows.UIElement>每個</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> 雖然您可以將標記<xref:System.Windows.UIElement.MouseRightButtonUp>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</xref:System.Windows.UIElement.MouseRightButtonUp> 不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定`handledEventsToo`) 叫用。       一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement>接聽<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>並將它轉換成適當的本機事件。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> </xref:System.Windows.UIElement> 如果您想要覆寫這個邏輯，您必須建立衍生的類別。 在衍生類別的靜態建構函式註冊<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>的替代類別處理常式 您無法變更處理行為的滑鼠<xref:System.Windows.UIElement>藉由覆寫 OnMouseRightButtonUp。</xref:System.Windows.UIElement>"
  syntax:
    content: protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 事件資料會報告已放開滑鼠按鈕。"
  overload: System.Windows.UIElement.OnMouseRightButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;路由的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event as handled, OnMouseUp is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnMouseUp, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 事件資料會報告已放開滑鼠按鈕。"
  overload: System.Windows.UIElement.OnMouseUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  id: OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseWheel(MouseWheelEventArgs)
  nameWithType: UIElement.OnMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.UIElement.OnMouseWheel(MouseWheelEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseWheelEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseWheelEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnMouseWheel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  id: OnPreviewDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewDragEnter(DragEventArgs)
  nameWithType: UIElement.OnPreviewDragEnter(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDragEnter(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewDragEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  id: OnPreviewDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewDragLeave(DragEventArgs)
  nameWithType: UIElement.OnPreviewDragLeave(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDragLeave(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewDragLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  id: OnPreviewDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewDragOver(DragEventArgs)
  nameWithType: UIElement.OnPreviewDragOver(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDragOver(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewDragOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)
  id: OnPreviewDrop(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewDrop(DragEventArgs)
  nameWithType: UIElement.OnPreviewDrop(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDrop(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  id: OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.GiveFeedbackEventArgs
      description: "<xref href=&quot;System.Windows.GiveFeedbackEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewGiveFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewGotKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  id: OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewKeyDown(KeyEventArgs)
  nameWithType: UIElement.OnPreviewKeyDown(KeyEventArgs)
  fullName: System.Windows.UIElement.OnPreviewKeyDown(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewKeyDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  id: OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewKeyUp(KeyEventArgs)
  nameWithType: UIElement.OnPreviewKeyUp(KeyEventArgs)
  fullName: System.Windows.UIElement.OnPreviewKeyUp(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewKeyUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewLostKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;附加路由的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event as handled, OnPreviewMouseDown is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnPreviewMouseDown, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 事件資料會報告一個或多個滑鼠按鈕已按下。"
  overload: System.Windows.UIElement.OnPreviewMouseDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement.PreviewMouseLeftButtonDown&quot;></xref>路由的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>事件傳輸通道的路由會出現但實際上以間接方式傳送。</xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>為路由傳送，通道的基礎事件，並<xref:System.Windows.UIElement>沿著事件路由會使用相同引發直接路由的事件<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>.</xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>處理</xref:System.Windows.UIElement>每個</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 雖然您可以將標記<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> 不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定`handledEventsToo`) 叫用。       一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement>接聽<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>並將它轉換成適當的本機事件。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> </xref:System.Windows.UIElement> 如果您想要覆寫這個邏輯，您必須建立衍生的類別。 在衍生類別的靜態建構函式註冊<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>的替代類別處理常式 您無法變更處理行為的滑鼠<xref:System.Windows.UIElement>藉由覆寫 OnPreviewMouseLeftButtonDown。</xref:System.Windows.UIElement>       或者，您可以覆寫這個方法以變更處理特定的滑鼠狀態的事件。 您是否願意呼叫基底實作，取決於您的案例。 無法呼叫基底，就會停用該也預期會叫用 OnPreviewMouseLeftButtonDown 的上階類別上的滑鼠事件的預設輸入的處理。 例如，您可以從衍生<xref:System.Windows.Controls.Button>並在您的衍生類別中將 OnPreviewMouseLeftButtonDown 覆寫而不需要呼叫基底實作; 不過，停用覆寫。<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件。</xref:System.Windows.Controls.Primitives.ButtonBase.Click> </xref:System.Windows.Controls.Button>"
  syntax:
    content: protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 事件資料會報告滑鼠左鍵已按下。"
  overload: System.Windows.UIElement.OnPreviewMouseLeftButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement.PreviewMouseLeftButtonUp&quot;></xref>路由的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>事件傳輸通道的路由會出現但實際上以間接方式傳送。</xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>為路由傳送，通道的基礎事件，並<xref:System.Windows.UIElement>沿著事件路由會使用相同引發直接路由的事件<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>.</xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>處理</xref:System.Windows.UIElement>每個</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> 雖然您可以將標記<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> 不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定`handledEventsToo`) 叫用。       一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement>接聽<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>並將它轉換成適當的本機事件。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> </xref:System.Windows.UIElement> 如果您想要覆寫這個邏輯，您必須建立衍生的類別。 在衍生類別的靜態建構函式註冊<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>的替代類別處理常式 您無法變更處理行為的滑鼠<xref:System.Windows.UIElement>藉由覆寫 OnPreviewMouseLeftButtonUp。</xref:System.Windows.UIElement>"
  syntax:
    content: protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 事件資料會報告已放開滑鼠左的按鈕。"
  overload: System.Windows.UIElement.OnPreviewMouseLeftButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  id: OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseMove(MouseEventArgs)
  nameWithType: UIElement.OnPreviewMouseMove(MouseEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseMove(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewMouseMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement.PreviewMouseRightButtonDown&quot;></xref>路由的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>事件傳輸通道的路由會出現但實際上以間接方式傳送。</xref:System.Windows.UIElement.PreviewMouseRightButtonDown> <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>為路由傳送，通道的基礎事件，並<xref:System.Windows.UIElement>沿著事件路由會使用相同引發直接路由的事件<xref:System.Windows.UIElement.MouseRightButtonDown>.</xref:System.Windows.UIElement.MouseRightButtonDown>處理</xref:System.Windows.UIElement>每個</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 雖然您可以將標記<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</xref:System.Windows.UIElement.PreviewMouseRightButtonDown> 不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定`handledEventsToo`) 叫用。       一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement>接聽<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>並將它轉換成適當的本機事件。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> </xref:System.Windows.UIElement> 如果您想要覆寫這個邏輯，您必須建立衍生的類別。 在衍生類別的靜態建構函式註冊<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>的替代類別處理常式 您無法變更處理行為的滑鼠<xref:System.Windows.UIElement>藉由覆寫 OnPreviewMouseRightButtonDown。</xref:System.Windows.UIElement>       或者，您可以覆寫這個方法以變更處理特定的滑鼠狀態的事件。 您是否願意呼叫基底實作，取決於您的案例。 無法呼叫基底，就會停用該也預期會叫用 OnPreviewMouseRightButtonDown 的上階類別上的滑鼠事件的預設輸入的處理。 例如，您可以從衍生<xref:System.Windows.Controls.Control>並在您未呼叫基底的衍生類別中覆寫 OnPreviewMouseRightButtonDown; 不過，此覆寫停用內容功能表上的服務您的控制項，也就是組件的<xref:System.Windows.Controls.Control>預設行為。</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Control>"
  syntax:
    content: protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 事件資料會報告滑鼠按鈕已按下。"
  overload: System.Windows.UIElement.OnPreviewMouseRightButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用<xref href=&quot;System.Windows.UIElement.PreviewMouseRightButtonUp&quot;></xref>路由的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>事件傳輸通道的路由會出現但實際上以間接方式傳送。</xref:System.Windows.UIElement.PreviewMouseRightButtonUp> <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>為路由傳送，通道的基礎事件，並<xref:System.Windows.UIElement>沿著事件路由會使用相同引發直接路由的事件<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</xref:System.Windows.UIElement.PreviewMouseRightButtonUp>處理</xref:System.Windows.UIElement>每個</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> 雖然您可以將標記<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>為基於的這個項目已處理的事件，處理的狀態不保存事件路由上的其他項目。</xref:System.Windows.UIElement.PreviewMouseRightButtonUp> 不過，您可能想要將事件標記為已處理，以避免一般的執行個體處理常式 (即未指定`handledEventsToo`) 叫用。       一般的滑鼠事件處理中的預設實作<xref:System.Windows.UIElement>接聽<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>並將它轉換成適當的本機事件。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> </xref:System.Windows.UIElement> 如果您想要覆寫這個邏輯，您必須建立衍生的類別。 在衍生類別的靜態建構函式註冊<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>的替代類別處理常式 您無法變更處理行為的滑鼠<xref:System.Windows.UIElement>藉由覆寫 OnPreviewMouseRightButtonUp。</xref:System.Windows.UIElement>"
  syntax:
    content: protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 事件資料會報告已放開滑鼠按鈕。"
  overload: System.Windows.UIElement.OnPreviewMouseRightButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event as handled, OnPreviewMouseUp is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnPreviewMouseUp, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件資料。 事件資料會報告一個或多個滑鼠按鈕已釋放。"
  overload: System.Windows.UIElement.OnPreviewMouseUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  id: OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseWheel(MouseWheelEventArgs)
  nameWithType: UIElement.OnPreviewMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseWheel(MouseWheelEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseWheelEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseWheelEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewMouseWheel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  id: OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.QueryContinueDragEventArgs
      description: "<xref href=&quot;System.Windows.QueryContinueDragEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewQueryContinueDrag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  id: OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusButtonDown(StylusButtonEventArgs)
  nameWithType: UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewStylusButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  id: OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusButtonUp(StylusButtonEventArgs)
  nameWithType: UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewStylusButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  id: OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusDown(StylusDownEventArgs)
  nameWithType: UIElement.OnPreviewStylusDown(StylusDownEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusDown(StylusDownEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusDownEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusDownEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewStylusDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusInAirMove(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusInAirMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewStylusInAirMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusInRange(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusInRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusInRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewStylusInRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusMove(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewStylusMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusOutOfRange(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusOutOfRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewStylusOutOfRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  id: OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusSystemGestureEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusSystemGestureEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewStylusSystemGesture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusUp(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusUp(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusUp(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewStylusUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  id: OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewTextInput(TextCompositionEventArgs)
  nameWithType: UIElement.OnPreviewTextInput(TextCompositionEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTextInput(TextCompositionEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TextCompositionEventArgs
      description: "<xref href=&quot;System.Windows.Input.TextCompositionEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewTextInput*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewTouchDown(TouchEventArgs)
  nameWithType: UIElement.OnPreviewTouchDown(TouchEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTouchDown(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理<xref href=&quot;System.Windows.UIElement.PreviewTouchDown&quot;></xref>觸控按這個項目時，就會發生的路由的事件。"
  remarks: "OnPreviewTouchDown 方法具有預設的實作。 在處理衍生類別中覆寫 OnPreviewTouchDown<xref:System.Windows.UIElement.PreviewTouchDown>事件。</xref:System.Windows.UIElement.PreviewTouchDown> 請務必呼叫基底類別的 OnPreviewTouchDown 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewTouchDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewTouchMove(TouchEventArgs)
  nameWithType: UIElement.OnPreviewTouchMove(TouchEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTouchMove(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理<xref href=&quot;System.Windows.UIElement.PreviewTouchMove&quot;></xref>發生於觸控式移動這個項目內的路由的事件。"
  remarks: "OnPreviewTouchMove 方法具有預設的實作。 在處理衍生類別中覆寫 OnPreviewTouchMove<xref:System.Windows.UIElement.PreviewTouchMove>事件。</xref:System.Windows.UIElement.PreviewTouchMove> 請務必呼叫基底類別的 OnPreviewTouchMove 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewTouchMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewTouchUp(TouchEventArgs)
  nameWithType: UIElement.OnPreviewTouchUp(TouchEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTouchUp(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理<xref href=&quot;System.Windows.UIElement.PreviewTouchUp&quot;></xref>觸控發行這個項目內時，就會發生的路由的事件。"
  remarks: "OnPreviewTouchUp 方法具有預設的實作。 在處理衍生類別中覆寫 OnPreviewTouchUp<xref:System.Windows.UIElement.PreviewTouchUp>事件。</xref:System.Windows.UIElement.PreviewTouchUp> 請務必呼叫基底類別的 OnPreviewTouchUp 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnPreviewTouchUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  id: OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.QueryContinueDragEventArgs
      description: "<xref href=&quot;System.Windows.QueryContinueDragEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnQueryContinueDrag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  id: OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnQueryCursor(QueryCursorEventArgs)
  nameWithType: UIElement.OnQueryCursor(QueryCursorEventArgs)
  fullName: System.Windows.UIElement.OnQueryCursor(QueryCursorEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.QueryCursorEventArgs
      description: "<xref href=&quot;System.Windows.Input.QueryCursorEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnQueryCursor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)
  id: OnRender(System.Windows.Media.DrawingContext)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnRender(DrawingContext)
  nameWithType: UIElement.OnRender(DrawingContext)
  fullName: System.Windows.UIElement.OnRender(DrawingContext)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在衍生類別中覆寫，參與由配置系統導向的呈現作業。 這個項目呈現指示不會直接當這個方法會叫用，並會改為保留給稍後非同步使用的配置和繪製。"
  remarks: "這個方法會有預設的實作<xref:System.Windows.UIElement>類別。</xref:System.Windows.UIElement>"
  example:
  - "The following code example shows a possible implementation for a panel derived class.  \n  \n [!code-vb[LightWeightCustomPanel#1](~/add/codesnippet/visualbasic/light_custom_panel_vb/offsetpanel.vb#1)]\n [!code-cs[LightWeightCustomPanel#1](~/add/codesnippet/csharp/Light_Custom_Panel_csharp/OffsetPanel.cs#1)]"
  syntax:
    content: protected virtual void OnRender (System.Windows.Media.DrawingContext drawingContext);
    parameters:
    - id: drawingContext
      type: System.Windows.Media.DrawingContext
      description: "特定項目的繪圖的指示。 此內容會提供給版面配置系統。"
  overload: System.Windows.UIElement.OnRender*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)
  id: OnRenderSizeChanged(System.Windows.SizeChangedInfo)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnRenderSizeChanged(SizeChangedInfo)
  nameWithType: UIElement.OnRenderSizeChanged(SizeChangedInfo)
  fullName: System.Windows.UIElement.OnRenderSizeChanged(SizeChangedInfo)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在衍生類別中覆寫，參與由配置系統導向的呈現作業。 這個方法叫用版面配置更新之後，再呈現，如果項目的<xref:System.Windows.UIElement.RenderSize*>配置更新的結果改變了。</xref:System.Windows.UIElement.RenderSize*>"
  remarks: "這個方法會具有預設的實作。 一般的 WPF 架構層級項目會使用從<xref:System.Windows.FrameworkElement>.</xref:System.Windows.FrameworkElement>覆寫實作 <xref:System.Windows.FrameworkElement>實作失效<xref:System.Windows.FrameworkElement.Width%2A>和<xref:System.Windows.FrameworkElement.Height%2A>屬性，並處理改造版面配置的基本概念。</xref:System.Windows.FrameworkElement.Height%2A> </xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.FrameworkElement> 覆寫在 OnRenderSizeChanged<xref:System.Windows.UIElement>層級意味著，項目實作如果故意不使用的 WPF 架構層級實作，因此您的項目必須處理的配置邏輯更直接，通常透過撰寫取代版面配置系統。</xref:System.Windows.UIElement>"
  syntax:
    content: protected virtual void OnRenderSizeChanged (System.Windows.SizeChangedInfo info);
    parameters:
    - id: info
      type: System.Windows.SizeChangedInfo
      description: "封裝的參數 (<xref href=&quot;System.Windows.SizeChangedInfo&quot;></xref>)，其中包含舊和新的大小，而且其中的維度實際上會變更。"
  overload: System.Windows.UIElement.OnRenderSizeChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  id: OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusButtonDown(StylusButtonEventArgs)
  nameWithType: UIElement.OnStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnStylusButtonDown(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnStylusButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  id: OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusButtonUp(StylusButtonEventArgs)
  nameWithType: UIElement.OnStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnStylusButtonUp(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnStylusButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  id: OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusDown(StylusDownEventArgs)
  nameWithType: UIElement.OnStylusDown(StylusDownEventArgs)
  fullName: System.Windows.UIElement.OnStylusDown(StylusDownEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusDownEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusDownEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnStylusDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  id: OnStylusEnter(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusEnter(StylusEventArgs)
  nameWithType: UIElement.OnStylusEnter(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusEnter(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt;附加引發由這個項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "這個方法會具有預設的實作。 因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。 您可能會呼叫基底之前或之後特殊處理，根據您的需求。       這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]事件模式 * 方法︰ 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。 在此情況下，符合的事件是路由的事件。 將事件標示為已處理仍很有用防止一般的執行個體處理常式 (這些不指定`handledEventsToo`) 叫用。"
  syntax:
    content: protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnStylusEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  id: OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusInAirMove(StylusEventArgs)
  nameWithType: UIElement.OnStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusInAirMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnStylusInAirMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  id: OnStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusInRange(StylusEventArgs)
  nameWithType: UIElement.OnStylusInRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusInRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnStylusInRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  id: OnStylusLeave(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusLeave(StylusEventArgs)
  nameWithType: UIElement.OnStylusLeave(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusLeave(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt;附加引發由這個項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "這個方法會具有預設的實作。 因為中繼類別繼承中的可能會實作這個方法，我們建議您在自己的實作呼叫基底實作。 您可能會呼叫基底之前或之後特殊處理，根據您的需求。       這個方法的目的是類似於[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]事件模式 * 方法︰ 這個方法會提供要藉由建立類別處理常式，而不是執行個體處理常式處理衍生類別的比對事件的方法。 在此情況下，符合的事件是路由的事件。 將事件標示為已處理仍很有用防止一般的執行個體處理常式 (這些不指定`handledEventsToo`) 叫用。"
  syntax:
    content: protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnStylusLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  id: OnStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusMove(StylusEventArgs)
  nameWithType: UIElement.OnStylusMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnStylusMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  id: OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusOutOfRange(StylusEventArgs)
  nameWithType: UIElement.OnStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusOutOfRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnStylusOutOfRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  id: OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusSystemGestureEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusSystemGestureEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnStylusSystemGesture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  id: OnStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusUp(StylusEventArgs)
  nameWithType: UIElement.OnStylusUp(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusUp(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnStylusUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  id: OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnTextInput(TextCompositionEventArgs)
  nameWithType: UIElement.OnTextInput(TextCompositionEventArgs)
  fullName: System.Windows.UIElement.OnTextInput(TextCompositionEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當未處理時叫用&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt;附加的事件到達其路由衍生自此類別的項目。 實作這個方法可為此事件加入類別處理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TextCompositionEventArgs
      description: "<xref href=&quot;System.Windows.Input.TextCompositionEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnTextInput*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  id: OnTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnTouchDown(TouchEventArgs)
  nameWithType: UIElement.OnTouchDown(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchDown(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理<xref href=&quot;System.Windows.UIElement.TouchDown&quot;></xref>觸控按這個項目內時，就會發生的路由的事件。"
  remarks: "OnTouchDown 方法具有預設的實作。 在處理衍生類別中覆寫 OnTouchDown<xref:System.Windows.UIElement.TouchDown>事件。</xref:System.Windows.UIElement.TouchDown> 請務必呼叫基底類別的 OnTouchDown 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnTouchDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  id: OnTouchEnter(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnTouchEnter(TouchEventArgs)
  nameWithType: UIElement.OnTouchEnter(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchEnter(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理<xref href=&quot;System.Windows.UIElement.TouchEnter&quot;></xref>路由從觸控式移動時所發生的事件以這個項目之範圍內的外部。"
  remarks: "TheOnTouchEnter 方法有預設的實作。 在處理衍生類別中覆寫 OnTouchEnter<xref:System.Windows.UIElement.TouchEnter>事件。</xref:System.Windows.UIElement.TouchEnter> 請務必呼叫基底類別的 OnTouchEnter 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnTouchEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  id: OnTouchLeave(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnTouchLeave(TouchEventArgs)
  nameWithType: UIElement.OnTouchLeave(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchLeave(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理<xref href=&quot;System.Windows.UIElement.TouchLeave&quot;></xref>路由從觸控式移動時所發生的事件以這個範圍外的內部<xref href=&quot;System.Windows.UIElement&quot;> </xref>。"
  remarks: "OnTouchLeave 方法具有預設的實作。 在處理衍生類別中覆寫 OnTouchLeave<xref:System.Windows.UIElement.TouchLeave>事件。</xref:System.Windows.UIElement.TouchLeave> 請務必呼叫基底類別的 OnTouchLeave 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnTouchLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  id: OnTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnTouchMove(TouchEventArgs)
  nameWithType: UIElement.OnTouchMove(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchMove(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理<xref href=&quot;System.Windows.UIElement.TouchMove&quot;></xref>發生於觸控式移動這個項目內的路由的事件。"
  remarks: "OnTouchMove 方法具有預設的實作。 在處理衍生類別中覆寫 OnTouchMove<xref:System.Windows.UIElement.TouchMove>事件。</xref:System.Windows.UIElement.TouchMove> 請務必呼叫基底類別的 OnTouchMove 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnTouchMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  id: OnTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnTouchUp(TouchEventArgs)
  nameWithType: UIElement.OnTouchUp(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchUp(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供的類別處理<xref href=&quot;System.Windows.UIElement.TouchUp&quot;></xref>觸控發行這個項目內時，就會發生的路由的事件。"
  remarks: "OnTouchUp 方法具有預設的實作。 在處理衍生類別中覆寫 OnTouchUp<xref:System.Windows.UIElement.TouchUp>事件。</xref:System.Windows.UIElement.TouchUp> 請務必呼叫基底類別的 OnTouchUp 方法，讓基底類別會接收到事件。"
  syntax:
    content: protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件資料。"
  overload: System.Windows.UIElement.OnTouchUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)
  id: OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: UIElement.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.UIElement.OnVisualParentChanged(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "時叫用父項目，這個<xref href=&quot;System.Windows.UIElement&quot;></xref>項變更回報至其基礎視覺化父項目。"
  syntax:
    content: protected override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);
    parameters:
    - id: oldParent
      type: System.Windows.DependencyObject
      description: "先前的父系。 這可能會提供作為<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Windows.DependencyObject&quot;></xref>先前沒有父項目。"
  overload: System.Windows.UIElement.OnVisualParentChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Opacity
  id: Opacity
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Opacity
  nameWithType: UIElement.Opacity
  fullName: System.Windows.UIElement.Opacity
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定套用至整個的不透明度因數<xref href=&quot;System.Windows.UIElement&quot;></xref>中呈現時[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]。  這是相依性屬性。"
  remarks: "1.0 的預設值是提供初始的中繼資料的<xref:System.Windows.UIElement>類別。</xref:System.Windows.UIElement>此相依性屬性的預設值 其他衍生的類別可能可以藉由覆寫其類別建構函式內的中繼資料變更此預設值。       不透明度的值將不會套用至實際的配置，除非項目也會顯示 (<xref:System.Windows.UIElement.IsVisible%2A>是`true`)。</xref:System.Windows.UIElement.IsVisible%2A>       不透明度從上往下項目樹狀結構的父項目套用至子項目，但巢狀的不透明度設定的顯示效果不表示在個別的子元素的屬性值。 比方說，如果清單有 50%(0.5) 的不透明度，其中一個清單項目有自己設定為 20%(0.2) 的不透明度，net 可見的不透明度，清單項目將會轉譯為 10%(0.1)，但清單項目的透明度屬性的屬性值仍然是 0.2 時，會查詢。       即使宣告或評估的不透明度為 0，項目仍參與輸入的事件和命令，並可能可設定焦點。 這方面很有用，例如用於不透明度零之類的物件 （圖形） 遮罩具有透明項目的基礎物件。 不透明度為零的物件，然後可處理所有輸入的事件處理為基礎的區域。 不過，`Background`或`Fill`物件或圖形的應設為值，即使它是<xref:System.Windows.Media.Brushes.Transparent%2A>，否則不啟用點擊測試，並不接收任何事件。</xref:System.Windows.Media.Brushes.Transparent%2A>      <a name=&quot;dependencyPropertyInfo_Opacity&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.OpacityProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.OpacityProperty>"
  syntax:
    content: public double Opacity { get; set; }
    return:
      type: System.Double
      description: "不是透明度因數。 預設不透明度為 1.0。 值必須是介於 0.0 到 1.0 之間。"
  overload: System.Windows.UIElement.Opacity*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OpacityMask
  id: OpacityMask
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OpacityMask
  nameWithType: UIElement.OpacityMask
  fullName: System.Windows.UIElement.OpacityMask
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定不透明度遮罩，做為<xref href=&quot;System.Windows.Media.Brush&quot;></xref>套用至任何 alpha 色板遮罩，這個項目的呈現內容的實作。  這是相依性屬性。"
  remarks: "這個屬性只會使用任何的 alpha 色板值是提供<xref:System.Windows.Media.Brush>.</xref:System.Windows.Media.Brush> 其他頻道的<xref:System.Windows.Media.Brush>的呈現的內容 （紅色、 綠色或藍色） 都會被忽略。</xref:System.Windows.Media.Brush>       最常見<xref:System.Windows.Media.Brush>為此用途<xref:System.Windows.Media.ImageBrush>，可以使用各種不同的遮罩技術，例如插文的相片。</xref:System.Windows.Media.ImageBrush> </xref:System.Windows.Media.Brush> 但定義<xref:System.Windows.Media.Brush>(例如<xref:System.Windows.Media.LinearGradientBrush>) 可用。</xref:System.Windows.Media.LinearGradientBrush> </xref:System.Windows.Media.Brush>       在[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]，這個屬性值可以使用<xref:System.Windows.Media.Brush>抽象類別</xref:System.Windows.Media.Brush>的每個實作特定的內嵌語法 如需詳細資訊，請參閱[使用單色和漸層概觀繪製](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_OpacityMask&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.OpacityMaskProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.OpacityMaskProperty>"
  example:
  - "The following markup example shows an <xref:System.Windows.Media.ImageBrush> opacity mask applied to another <xref:System.Windows.Controls.Image>.  \n  \n [!code-xml[OpacityMasksExample#UIElementOpacityMask](~/add/codesnippet/xaml/p-system.windows.uieleme_6_1.xaml)]\n [!code-xml[OpacityMasksExample#UIElementOpacityMask](~/add/codesnippet/xaml/p-system.windows.uieleme_6_1.xaml)]"
  syntax:
    content: public System.Windows.Media.Brush OpacityMask { get; set; }
    return:
      type: System.Windows.Media.Brush
      description: "若要使用的不透明度遮罩的筆刷。"
  overload: System.Windows.UIElement.OpacityMask*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OpacityMaskProperty
  id: OpacityMaskProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OpacityMaskProperty
  nameWithType: UIElement.OpacityMaskProperty
  fullName: System.Windows.UIElement.OpacityMaskProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.OpacityMask*>相依性屬性。</xref:System.Windows.UIElement.OpacityMask*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty OpacityMaskProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OpacityProperty
  id: OpacityProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OpacityProperty
  nameWithType: UIElement.OpacityProperty
  fullName: System.Windows.UIElement.OpacityProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.Opacity*>相依性屬性。</xref:System.Windows.UIElement.Opacity*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty OpacityProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PersistId
  id: PersistId
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PersistId
  nameWithType: UIElement.PersistId
  fullName: System.Windows.UIElement.PersistId
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得值，可唯一識別這個項目。"
  remarks: "PersistId 可唯一識別每個項目。 項目會保持相同 PersistId 每次相同[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]載入 （包括二進位表示法）。 這個識別碼用於內部載入、 剖析和序列化需求。 它不是可供您的應用程式程式碼。       此屬性沒有任何關聯性<xref:System.Object.GetHashCode%2A>任何給定的執行個體的結果。</xref:System.Object.GetHashCode%2A>"
  syntax:
    content: public int PersistId { get; }
    return:
      type: System.Int32
      description: "這個項目的唯一識別項。"
  overload: System.Windows.UIElement.PersistId*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  id: PredictFocus(System.Windows.Input.FocusNavigationDirection)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PredictFocus(FocusNavigationDirection)
  nameWithType: UIElement.PredictFocus(FocusNavigationDirection)
  fullName: System.Windows.UIElement.PredictFocus(FocusNavigationDirection)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當在衍生類別中覆寫時，傳回的元素，會接收指定的焦點周遊的方向，焦點，而不實際將焦點移至該元素。"
  remarks: "這個類別中，這個方法的預設實作不完整，且一律會傳回`null`。"
  syntax:
    content: public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Input.FocusNavigationDirection
      description: "要求的焦點周遊的方向。"
    return:
      type: System.Windows.DependencyObject
      description: "已收到焦點如果項目<xref:System.Windows.UIElement.MoveFocus*>實際叫用。</xref:System.Windows.UIElement.MoveFocus*>"
  overload: System.Windows.UIElement.PredictFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDragEnter
  id: PreviewDragEnter
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDragEnter
  nameWithType: UIElement.PreviewDragEnter
  fullName: System.Windows.UIElement.PreviewDragEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "輸入的系統回報以此項目作為拖曳目標的基礎拖曳事件時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName>附加這個類別中，事件，以便 PreviewDragEnter 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> 附加至 PreviewDragEnter 事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewDragEnter&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewDragEnterEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.DragEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.DragEnter>。</xref:System.Windows.UIElement.DragEnter> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.PreviewDragEnterEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewDragEnter%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewDragEnter%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragEnter;
    return:
      type: System.Windows.DragEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDragEnterEvent
  id: PreviewDragEnterEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDragEnterEvent
  nameWithType: UIElement.PreviewDragEnterEvent
  fullName: System.Windows.UIElement.PreviewDragEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewDragEnter&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDragLeave
  id: PreviewDragLeave
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDragLeave
  nameWithType: UIElement.PreviewDragLeave
  fullName: System.Windows.UIElement.PreviewDragLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "輸入的系統回報以此項目作為拖曳來源的基礎拖曳事件時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName>附加這個類別中，事件，以便 PreviewDragLeave 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> 附加至 PreviewDragLeave 事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewDragLeave&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewDragLeaveEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.DragEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.DragLeave>。</xref:System.Windows.UIElement.DragLeave> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.PreviewDragLeaveEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewDragLeave%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewDragLeave%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragLeave;
    return:
      type: System.Windows.DragEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDragLeaveEvent
  id: PreviewDragLeaveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDragLeaveEvent
  nameWithType: UIElement.PreviewDragLeaveEvent
  fullName: System.Windows.UIElement.PreviewDragLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewDragLeave&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDragOver
  id: PreviewDragOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDragOver
  nameWithType: UIElement.PreviewDragOver
  fullName: System.Windows.UIElement.PreviewDragOver
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "輸入的系統回報以此項目作為可能置放目標的基礎拖曳事件時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName>附加這個類別中，事件，以便 PreviewDragOver 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> 附加至 PreviewDragOver 事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewDragOver&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewDragOverEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.DragEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.DragOver>。</xref:System.Windows.UIElement.DragOver> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.PreviewDragOverEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewDragOver%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewDragOver%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragOver;
    return:
      type: System.Windows.DragEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDragOverEvent
  id: PreviewDragOverEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDragOverEvent
  nameWithType: UIElement.PreviewDragOverEvent
  fullName: System.Windows.UIElement.PreviewDragOverEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewDragOver&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDrop
  id: PreviewDrop
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDrop
  nameWithType: UIElement.PreviewDrop
  fullName: System.Windows.UIElement.PreviewDrop
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於輸入的系統報告其下的置放事件與這個項目作為置放目標。"
  remarks: "此事件會建立一個別名<xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName>附加這個類別中，事件，以便 PreviewDrop 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> 附加至 PreviewDrop 事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewDrop&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewDropEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.DragEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.Drop>。</xref:System.Windows.UIElement.Drop> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.PreviewDropEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewDrop%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewDrop%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDrop;
    return:
      type: System.Windows.DragEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDropEvent
  id: PreviewDropEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDropEvent
  nameWithType: UIElement.PreviewDropEvent
  fullName: System.Windows.UIElement.PreviewDropEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewDrop&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDropEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewGiveFeedback
  id: PreviewGiveFeedback
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewGiveFeedback
  nameWithType: UIElement.PreviewGiveFeedback
  fullName: System.Windows.UIElement.PreviewGiveFeedback
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "拖放操作開始時發生。"
  remarks: "PreviewGiveFeedback 事件可讓您修改滑鼠指標的外觀，以便將使用者視覺化回應提供拖放作業期間的拖曳事件來源。       此事件會建立一個別名<xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName>附加這個類別中，事件，以便 PreviewGiveFeedback 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> 附加至 PreviewGiveFeedback 事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewGiveFeedback&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.GiveFeedbackEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.GiveFeedback>。</xref:System.Windows.UIElement.GiveFeedback> </xref:System.Windows.GiveFeedbackEventHandler> </xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A>"
  syntax:
    content: public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;
    return:
      type: System.Windows.GiveFeedbackEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewGiveFeedbackEvent
  id: PreviewGiveFeedbackEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewGiveFeedbackEvent
  nameWithType: UIElement.PreviewGiveFeedbackEvent
  fullName: System.Windows.UIElement.PreviewGiveFeedbackEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewGiveFeedback&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewGotKeyboardFocus
  id: PreviewGotKeyboardFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewGotKeyboardFocus
  nameWithType: UIElement.PreviewGotKeyboardFocus
  fullName: System.Windows.UIElement.PreviewGotKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "鍵盤以此元素為焦點時發生。"
  remarks: "這個事件使用通道路由，因為具有焦點的項目可能是子元素，而非項目實際附加事件處理常式。 請檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際具有焦點的項目中。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件會建立一個別名<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName>附加這個類別中，事件，以便 PreviewGotKeyboardFocus 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> 附加至 PreviewGotKeyboardFocus 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewGotKeyboardFocus&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.GotKeyboardFocus>。</xref:System.Windows.UIElement.GotKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewGotKeyboardFocusEvent
  id: PreviewGotKeyboardFocusEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewGotKeyboardFocusEvent
  nameWithType: UIElement.PreviewGotKeyboardFocusEvent
  fullName: System.Windows.UIElement.PreviewGotKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewGotKeyboardFocus&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewKeyDown
  id: PreviewKeyDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewKeyDown
  nameWithType: UIElement.PreviewKeyDown
  fullName: System.Windows.UIElement.PreviewKeyDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於焦點位於這個項目上時按下按鍵。"
  remarks: "索引鍵處理互動與其他的平台功能，例如命令和撰寫文字。 <xref:System.Windows.UIElement.KeyDown>是可能無法如預期般特定控制項的較低層級文字輸入的事件。</xref:System.Windows.UIElement.KeyDown> 這是因為有些控制項會有複合控制項，或提供文字的高階版本的類別處理輸入處理和相關事件。       此事件會建立一個別名<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>附加這個類別中，事件，以便 PreviewKeyDown 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> 附加至 PreviewKeyDown 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewKeyDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewKeyDownEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.KeyEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.KeyDown>。</xref:System.Windows.UIElement.KeyDown> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.UIElement.PreviewKeyDownEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewKeyDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewKeyDown%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler PreviewKeyDown;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewKeyDownEvent
  id: PreviewKeyDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewKeyDownEvent
  nameWithType: UIElement.PreviewKeyDownEvent
  fullName: System.Windows.UIElement.PreviewKeyDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewKeyDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewKeyUp
  id: PreviewKeyUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewKeyUp
  nameWithType: UIElement.PreviewKeyUp
  fullName: System.Windows.UIElement.PreviewKeyUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於焦點位於這個項目上時，放開按鍵。"
  remarks: "索引鍵處理互動與其他的平台功能，例如命令和撰寫文字。 <xref:System.Windows.UIElement.KeyUp>是可能無法如預期般特定控制項的較低層級文字輸入的事件。</xref:System.Windows.UIElement.KeyUp> 這是因為有些控制項會有複合控制項，或提供文字的高階版本的類別處理輸入處理和相關事件。 如需詳細資訊，請檢查個別控制項的文件。       此事件會建立一個別名<xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>附加這個類別中，事件，以便 PreviewKeyUp 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> 附加至 PreviewKeyUp 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewKeyUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewKeyUpEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.KeyEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.KeyUp>。</xref:System.Windows.UIElement.KeyUp> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.UIElement.PreviewKeyUpEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewKeyUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewKeyUp%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler PreviewKeyUp;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewKeyUpEvent
  id: PreviewKeyUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewKeyUpEvent
  nameWithType: UIElement.PreviewKeyUpEvent
  fullName: System.Windows.UIElement.PreviewKeyUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewKeyUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewLostKeyboardFocus
  id: PreviewLostKeyboardFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewLostKeyboardFocus
  nameWithType: UIElement.PreviewLostKeyboardFocus
  fullName: System.Windows.UIElement.PreviewLostKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "鍵盤不再這個項目上為焦點時發生。"
  remarks: "這個事件使用通道路由，因為失去焦點的項目可能是子元素，而非項目實際附加事件處理常式。 請檢查<xref:System.Windows.RoutedEventArgs.Source%2A>事件資料來判斷實際失去焦點的項目中。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件會建立一個別名<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName>附加這個類別中，事件，以便 PreviewLostKeyboardFocus 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> 附加至 PreviewLostKeyboardFocus 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewLostKeyboardFocus&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.LostKeyboardFocus>。</xref:System.Windows.UIElement.LostKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewLostKeyboardFocusEvent
  id: PreviewLostKeyboardFocusEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewLostKeyboardFocusEvent
  nameWithType: UIElement.PreviewLostKeyboardFocusEvent
  fullName: System.Windows.UIElement.PreviewLostKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewLostKeyboardFocus&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseDown
  id: PreviewMouseDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseDown
  nameWithType: UIElement.PreviewMouseDown
  fullName: System.Windows.UIElement.PreviewMouseDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於指標位於此項目上方時，按下任何滑鼠按鈕。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>附加這個類別中，事件，以便 PreviewMouseDown 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 附加至 PreviewMouseDown 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>       PreviewMouseDown 事件通常就會引發以及 <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>或<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>，這對應到其中的兩個標準滑鼠按鈕的按下。</xref:System.Windows.UIElement.PreviewMouseRightButtonDown> </xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>和<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>也是路由的事件，但它們是直接路由的事件，就會引發適當的按鈕特定事件時<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>事件到達事件路由上的這個項目。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewMouseRightButtonDown></xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> 請參閱備註或<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown><xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.</xref:System.Windows.UIElement.PreviewMouseRightButtonDown> </xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>      <a name=&quot;routedEventInfo_PreviewMouseDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewMouseDownEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.MouseDown>。</xref:System.Windows.UIElement.MouseDown> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.PreviewMouseDownEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewMouseDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewMouseDown%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseDownEvent
  id: PreviewMouseDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseDownEvent
  nameWithType: UIElement.PreviewMouseDownEvent
  fullName: System.Windows.UIElement.PreviewMouseDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewMouseDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseLeftButtonDown
  id: PreviewMouseLeftButtonDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonDown
  nameWithType: UIElement.PreviewMouseLeftButtonDown
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於滑鼠指標位在這個項目時按下滑鼠左鍵。"
  remarks: "雖然這看起來要遵循的通道路由處理項目樹狀結構，但實際上是直接的路由的事件的引發，而且每個<xref:System.Windows.UIElement>。</xref:System.Windows.UIElement> reraised 沿著項目樹狀結構       此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>事件，這是附加的事件處理的事件路由上的每個項目。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>       這個事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<xref:System.Windows.UIElement.AddHandler%2A>，使用選項來處理已標記為已處理的事件、 事件接聽程式，才能。</xref:System.Windows.UIElement.AddHandler%2A> 如果您要標示 PreviewMouseLeftButtonDown 處理，您基本上會標示<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>路由中的所有其他接聽程式處理，而且所有相關事件。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 這可能包括類別處理常式產生事件，例如<xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>       在概念上，將這個事件 (和其他滑鼠按鈕的事件上<xref:System.Windows.UIElement>) 是滑鼠 「 服務 」 (所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> 這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。 更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]<xref:System.Windows.Input.Mouse>類別而非於<xref:System.Windows.UIElement>。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_PreviewMouseLeftButtonDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -覆寫<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseLeftButtonDownEvent
  id: PreviewMouseLeftButtonDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonDownEvent
  nameWithType: UIElement.PreviewMouseLeftButtonDownEvent
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewMouseLeftButtonDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseLeftButtonUp
  id: PreviewMouseLeftButtonUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonUp
  nameWithType: UIElement.PreviewMouseLeftButtonUp
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當滑鼠指標位於此元素上方且放開滑鼠左的按鈕時發生。"
  remarks: "雖然這看起來要遵循的通道路由處理項目樹狀結構，但實際上是直接的路由的事件的引發，而且每個<xref:System.Windows.UIElement>。</xref:System.Windows.UIElement> reraised 沿著項目樹狀結構       此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>事件，這是附加的事件處理的事件路由上的每個項目。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       這個事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> 如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<xref:System.Windows.UIElement.AddHandler%2A>，使用選項來處理已標記為已處理的事件、 事件接聽程式，才能。</xref:System.Windows.UIElement.AddHandler%2A> 如果您要標示 PreviewMouseLeftButtonUp 處理，您基本上會標示<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>路由中的所有其他接聽程式處理，而且所有相關事件。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       在概念上，將這個事件 (和其他滑鼠按鈕的事件上<xref:System.Windows.UIElement>) 是滑鼠 「 服務 」 (所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> 這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。 更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]<xref:System.Windows.Input.Mouse>類別而非於<xref:System.Windows.UIElement>。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_PreviewMouseLeftButtonUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -覆寫<xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseLeftButtonUpEvent
  id: PreviewMouseLeftButtonUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonUpEvent
  nameWithType: UIElement.PreviewMouseLeftButtonUpEvent
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewMouseLeftButtonUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseMove
  id: PreviewMouseMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseMove
  nameWithType: UIElement.PreviewMouseMove
  fullName: System.Windows.UIElement.PreviewMouseMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於滑鼠指標移動滑鼠指標位於此元素上方時。"
  remarks: "都會發生這個事件項目界限，第一次進入滑鼠指標時，也會在滑鼠指標移時仍保持項目範圍內。       此事件會建立一個別名<xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName>附加這個類別中，事件，以便 PreviewMouseMove 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> 附加至 PreviewMouseMove 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewMouseMove&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewMouseMoveEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.MouseEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.MouseMove>。</xref:System.Windows.UIElement.MouseMove> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement.PreviewMouseMoveEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewMouseMove%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewMouseMove%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler PreviewMouseMove;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseMoveEvent
  id: PreviewMouseMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseMoveEvent
  nameWithType: UIElement.PreviewMouseMoveEvent
  fullName: System.Windows.UIElement.PreviewMouseMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewMouseMove&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseRightButtonDown
  id: PreviewMouseRightButtonDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseRightButtonDown
  nameWithType: UIElement.PreviewMouseRightButtonDown
  fullName: System.Windows.UIElement.PreviewMouseRightButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當滑鼠指標位於此元素上方時，按下滑鼠右按鈕時發生。"
  remarks: "雖然這看起來要遵循的通道路由處理項目樹狀結構，但實際上是直接的路由的事件的引發，而且每個<xref:System.Windows.UIElement>。</xref:System.Windows.UIElement> reraised 沿著項目樹狀結構       此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>事件，這是附加的事件處理的事件路由上的每個項目。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>       這個事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<xref:System.Windows.UIElement.AddHandler%2A>，使用選項來處理已標記為已處理的事件、 事件接聽程式，才能。</xref:System.Windows.UIElement.AddHandler%2A> 如果您要標示 PreviewMouseRightButtonDown 處理，您基本上會標示<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>路由中的所有其他接聽程式處理，而且所有相關事件。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 這可能包括類別處理常式產生事件，例如<xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>       在概念上，將這個事件 (和其他滑鼠按鈕的事件上<xref:System.Windows.UIElement>) 是滑鼠 「 服務 」 (所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> 這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。 更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]<xref:System.Windows.Input.Mouse>類別而非於<xref:System.Windows.UIElement>。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_PreviewMouseRightButtonDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -覆寫<xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseRightButtonDownEvent
  id: PreviewMouseRightButtonDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseRightButtonDownEvent
  nameWithType: UIElement.PreviewMouseRightButtonDownEvent
  fullName: System.Windows.UIElement.PreviewMouseRightButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewMouseRightButtonDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseRightButtonUp
  id: PreviewMouseRightButtonUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseRightButtonUp
  nameWithType: UIElement.PreviewMouseRightButtonUp
  fullName: System.Windows.UIElement.PreviewMouseRightButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當滑鼠指標位於此元素上方且放開滑鼠右按鈕時發生。"
  remarks: "雖然這看起來要遵循的通道路由處理項目樹狀結構，但實際上是直接的路由的事件的引發，而且每個<xref:System.Windows.UIElement>。</xref:System.Windows.UIElement> reraised 沿著項目樹狀結構       此事件會報告滑鼠按鈕細節的基礎的多個相關事件的其中一個<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>事件，這是附加的事件處理的事件路由上的每個項目。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       這個事件的事件資料會公開事件資料的基礎<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> 如果該事件標示為已處理此事件路由上，仍然會引發滑鼠按鈕的特定事件。不過，必須加入的滑鼠按鈕的特定事件的處理常式藉由明確地呼叫<xref:System.Windows.UIElement.AddHandler%2A>，使用選項來處理已標記為已處理的事件、 事件接聽程式，才能。</xref:System.Windows.UIElement.AddHandler%2A> 如果您要標示 PreviewMouseRightButtonUp 處理，您基本上會標示<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>路由中的所有其他接聽程式處理，而且所有相關事件。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       在概念上，將這個事件 (和其他滑鼠按鈕的事件上<xref:System.Windows.UIElement>) 是滑鼠 「 服務 」 (所提供的服務定義<xref:System.Windows.Input.Mouse>類別)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> 這個事件加入不需檢查原始的滑鼠事件的事件資料中的滑鼠按鈕狀態 （左右，上下按鈕控制項） 的便利性。 更進階的情況下，例如檢查狀態的非標準按鈕，您可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]<xref:System.Windows.Input.Mouse>類別而非於<xref:System.Windows.UIElement>。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_PreviewMouseRightButtonUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -覆寫<xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseRightButtonUpEvent
  id: PreviewMouseRightButtonUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseRightButtonUpEvent
  nameWithType: UIElement.PreviewMouseRightButtonUpEvent
  fullName: System.Windows.UIElement.PreviewMouseRightButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewMouseRightButtonUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseUp
  id: PreviewMouseUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseUp
  nameWithType: UIElement.PreviewMouseUp
  fullName: System.Windows.UIElement.PreviewMouseUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於滑鼠指標位於此元素上方且放開任何滑鼠按鈕。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>附加這個類別中，事件，以便 PreviewMouseUp 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> 附加至 PreviewMouseUp 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       PreviewMouseUp 事件通常就會引發以及 <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>或<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>，這對應到其中的兩個標準滑鼠按鈕的按下。</xref:System.Windows.UIElement.PreviewMouseRightButtonUp> </xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>和<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>也是路由的事件，但它們是直接路由的事件，就會引發適當的按鈕特定事件時<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>事件到達事件路由上的這個項目。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewMouseRightButtonUp></xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> 請參閱備註或<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp><xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</xref:System.Windows.UIElement.PreviewMouseRightButtonUp> </xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>      <a name=&quot;routedEventInfo_PreviewMouseUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewMouseUpEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.MouseUp>。</xref:System.Windows.UIElement.MouseUp> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.PreviewMouseUpEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewMouseUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewMouseUp%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseUpEvent
  id: PreviewMouseUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseUpEvent
  nameWithType: UIElement.PreviewMouseUpEvent
  fullName: System.Windows.UIElement.PreviewMouseUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewMouseUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseWheel
  id: PreviewMouseWheel
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseWheel
  nameWithType: UIElement.PreviewMouseWheel
  fullName: System.Windows.UIElement.PreviewMouseWheel
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當滑鼠指標位於此元素上方且使用者滾動滑鼠滾輪時發生。"
  remarks: "焦點或滑鼠捕捉優先於滑鼠指標所在位置。因此，如果您收到這個事件與已取得焦點或擷取的項目時，滑鼠指標實際上可能是透過另一個項目。       此事件會建立一個別名<xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName>附加事件，這個類別，以便<xref:System.Windows.UIElement.PreviewMouseMove>屬於類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.UIElement.PreviewMouseMove> </xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> 事件處理常式附加至<xref:System.Windows.UIElement.PreviewMouseMove>事件會附加至基礎<xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewMouseMove>      <a name=&quot;routedEventInfo_PreviewMouseWheel&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewMouseWheelEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.MouseWheelEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.MouseWheel>。</xref:System.Windows.UIElement.MouseWheel> </xref:System.Windows.Input.MouseWheelEventHandler> </xref:System.Windows.UIElement.PreviewMouseWheelEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewMouseWheel%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewMouseWheel%2A>"
  syntax:
    content: public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;
    return:
      type: System.Windows.Input.MouseWheelEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseWheelEvent
  id: PreviewMouseWheelEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseWheelEvent
  nameWithType: UIElement.PreviewMouseWheelEvent
  fullName: System.Windows.UIElement.PreviewMouseWheelEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewMouseWheel&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewQueryContinueDrag
  id: PreviewQueryContinueDrag
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewQueryContinueDrag
  nameWithType: UIElement.PreviewQueryContinueDrag
  fullName: System.Windows.UIElement.PreviewQueryContinueDrag
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "拖放作業期間鍵盤或滑鼠按鈕狀態變更時，就會發生。"
  remarks: "PreviewQueryContinueDrag 事件可讓拖曳來源能夠宣告是否應取消拖放作業。       此事件會建立一個別名<xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName>附加這個類別中，事件，以便 PreviewQueryContinueDrag 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> 附加至 PreviewQueryContinueDrag 事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewQueryContinueDrag&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.QueryContinueDragEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.QueryContinueDrag>。</xref:System.Windows.UIElement.QueryContinueDrag> </xref:System.Windows.QueryContinueDragEventHandler> </xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A>"
  syntax:
    content: public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;
    return:
      type: System.Windows.QueryContinueDragEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewQueryContinueDragEvent
  id: PreviewQueryContinueDragEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewQueryContinueDragEvent
  nameWithType: UIElement.PreviewQueryContinueDragEvent
  fullName: System.Windows.UIElement.PreviewQueryContinueDragEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewQueryContinueDrag&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusButtonDown
  id: PreviewStylusButtonDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusButtonDown
  nameWithType: UIElement.PreviewStylusButtonDown
  fullName: System.Windows.UIElement.PreviewStylusButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於指標位於此項目上方時，按下手寫筆按鈕。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName>附加這個類別中，事件，以便 PreviewStylusButtonDown 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> 附加至 PreviewStylusButtonDown 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[觸控輸入支援在 Windows Vista](http://msdn.microsoft.com/en-us/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)和[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusButtonDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.StylusButtonEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.StylusButtonDown>。</xref:System.Windows.UIElement.StylusButtonDown> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusButtonDownEvent
  id: PreviewStylusButtonDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusButtonDownEvent
  nameWithType: UIElement.PreviewStylusButtonDownEvent
  fullName: System.Windows.UIElement.PreviewStylusButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewStylusButtonDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusButtonUp
  id: PreviewStylusButtonUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusButtonUp
  nameWithType: UIElement.PreviewStylusButtonUp
  fullName: System.Windows.UIElement.PreviewStylusButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於指標位於此元素上方且放開手寫筆按鈕。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName>附加這個類別中，事件，以便 PreviewStylusButtonUp 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> 附加至 PreviewStylusButtonUp 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusButtonUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.StylusButtonEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.StylusButtonUp>。</xref:System.Windows.UIElement.StylusButtonUp> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusButtonUpEvent
  id: PreviewStylusButtonUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusButtonUpEvent
  nameWithType: UIElement.PreviewStylusButtonUpEvent
  fullName: System.Windows.UIElement.PreviewStylusButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewStylusButtonUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusDown
  id: PreviewStylusDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusDown
  nameWithType: UIElement.PreviewStylusDown
  fullName: System.Windows.UIElement.PreviewStylusDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "雖然此元素上方且碰觸數位板時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName>附加這個類別中，事件，以便 PreviewStylusDown 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> 附加至 PreviewStylusDown 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewStylusDownEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.StylusDownEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.StylusDown>。</xref:System.Windows.UIElement.StylusDown> </xref:System.Windows.Input.StylusDownEventHandler> </xref:System.Windows.UIElement.PreviewStylusDownEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewStylusDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewStylusDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;
    return:
      type: System.Windows.Input.StylusDownEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusDownEvent
  id: PreviewStylusDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusDownEvent
  nameWithType: UIElement.PreviewStylusDownEvent
  fullName: System.Windows.UIElement.PreviewStylusDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewStylusDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusInAirMove
  id: PreviewStylusInAirMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusInAirMove
  nameWithType: UIElement.PreviewStylusInAirMove
  fullName: System.Windows.UIElement.PreviewStylusInAirMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "手寫筆移動的項目上，但沒有真正碰觸數位板時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName>附加這個類別中，事件，以便 PreviewStylusInAirMove 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> 附加至 PreviewStylusInAirMove 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusInAirMove&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.StylusInAirMove>。</xref:System.Windows.UIElement.StylusInAirMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusInAirMoveEvent
  id: PreviewStylusInAirMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusInAirMoveEvent
  nameWithType: UIElement.PreviewStylusInAirMoveEvent
  fullName: System.Windows.UIElement.PreviewStylusInAirMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewStylusInAirMove&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusInRange
  id: PreviewStylusInRange
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusInRange
  nameWithType: UIElement.PreviewStylusInRange
  fullName: System.Windows.UIElement.PreviewStylusInRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "手寫筆靠近數位板偵測，此元素上方時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName>附加這個類別中，事件，以便 PreviewStylusInRange 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> 附加至 PreviewStylusInRange 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusInRange&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewStylusInRangeEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.StylusInRange>。</xref:System.Windows.UIElement.StylusInRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.PreviewStylusInRangeEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewStylusInRange%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewStylusInRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusInRangeEvent
  id: PreviewStylusInRangeEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusInRangeEvent
  nameWithType: UIElement.PreviewStylusInRangeEvent
  fullName: System.Windows.UIElement.PreviewStylusInRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewStylusInRange&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusMove
  id: PreviewStylusMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusMove
  nameWithType: UIElement.PreviewStylusMove
  fullName: System.Windows.UIElement.PreviewStylusMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "手寫筆在元素上方移動時發生。 手寫筆必須在受到數位板偵測時移動才能引發此事件，否則<xref href=&quot;System.Windows.UIElement.PreviewStylusInAirMove&quot;></xref>會改為引發。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName>附加這個類別中，事件，以便 PreviewStylusMove 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> 附加至 PreviewStylusMove 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusMove&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewStylusMoveEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.StylusMove>。</xref:System.Windows.UIElement.StylusMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.PreviewStylusMoveEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewStylusMove%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewStylusMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusMoveEvent
  id: PreviewStylusMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusMoveEvent
  nameWithType: UIElement.PreviewStylusMoveEvent
  fullName: System.Windows.UIElement.PreviewStylusMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewStylusMove&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusOutOfRange
  id: PreviewStylusOutOfRange
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusOutOfRange
  nameWithType: UIElement.PreviewStylusOutOfRange
  fullName: System.Windows.UIElement.PreviewStylusOutOfRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "手寫筆遠離數位板偵測時，就會發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName>附加這個類別中，事件，以便 PreviewStylusOutOfRange 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> 附加至 PreviewStylusOutOfRange 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusOutOfRange&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.StylusOutOfRange>。</xref:System.Windows.UIElement.StylusOutOfRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusOutOfRangeEvent
  id: PreviewStylusOutOfRangeEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusOutOfRangeEvent
  nameWithType: UIElement.PreviewStylusOutOfRangeEvent
  fullName: System.Windows.UIElement.PreviewStylusOutOfRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewStylusOutOfRange&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusSystemGesture
  id: PreviewStylusSystemGesture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusSystemGesture
  nameWithType: UIElement.PreviewStylusSystemGesture
  fullName: System.Windows.UIElement.PreviewStylusSystemGesture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當使用者執行其中一種手寫筆筆勢時發生。"
  remarks: "手寫筆筆勢的相關資訊，請參閱<xref:System.Windows.Input.SystemGesture>.</xref:System.Windows.Input.SystemGesture>       此事件會建立一個別名<xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName>附加這個類別中，事件，以便 PreviewStylusSystemGesture 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> 附加至 PreviewStylusSystemGesture 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusSystemGesture&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.StylusSystemGestureEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.StylusSystemGesture>。</xref:System.Windows.UIElement.StylusSystemGesture> </xref:System.Windows.Input.StylusSystemGestureEventHandler> </xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;
    return:
      type: System.Windows.Input.StylusSystemGestureEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusSystemGestureEvent
  id: PreviewStylusSystemGestureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusSystemGestureEvent
  nameWithType: UIElement.PreviewStylusSystemGestureEvent
  fullName: System.Windows.UIElement.PreviewStylusSystemGestureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewStylusSystemGesture&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusUp
  id: PreviewStylusUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusUp
  nameWithType: UIElement.PreviewStylusUp
  fullName: System.Windows.UIElement.PreviewStylusUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "且使用者舉起手寫筆在數位板手寫筆在此元素上方時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName>附加事件，這個類別，以便<xref:System.Windows.UIElement.PreviewStylusDown>屬於類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.UIElement.PreviewStylusDown> </xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> 事件處理常式附加至<xref:System.Windows.UIElement.PreviewStylusDown>事件會附加至基礎<xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewStylusDown>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewStylusUpEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.StylusUp>。</xref:System.Windows.UIElement.StylusUp> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.PreviewStylusUpEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewStylusUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewStylusUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusUp;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusUpEvent
  id: PreviewStylusUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusUpEvent
  nameWithType: UIElement.PreviewStylusUpEvent
  fullName: System.Windows.UIElement.PreviewStylusUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewStylusUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTextInput
  id: PreviewTextInput
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTextInput
  nameWithType: UIElement.PreviewTextInput
  fullName: System.Windows.UIElement.PreviewTextInput
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "這個項目與裝置無關的方式取得文字時發生。"
  remarks: "PreviewTextInput 事件可讓元件或應用程式與裝置無關的方式接聽文字輸入。 鍵盤是 PreviewTextInput; 的主要方法但語音、 手寫，以及其他輸入的裝置也可以產生 PreviewTextInput。       因為組合 — 在預設鍵盤或輸入的法編輯器透過 — 多個按鍵事件可能會引發一個文字輸入的事件。       此事件會建立一個別名<xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName>附加這個類別中，事件，以便 PreviewTextInput 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> 附加至 PreviewTextInput 事件的事件處理常式附加至基礎<xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewTextInput&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewTextInputEvent>|  |路由策略 |通道 |  |委派 |<xref:System.Windows.Input.TextCompositionEventHandler>|     -對應反昇事件為<xref:System.Windows.UIElement.TextInput>。</xref:System.Windows.UIElement.TextInput> </xref:System.Windows.Input.TextCompositionEventHandler> </xref:System.Windows.UIElement.PreviewTextInputEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewTextInput%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewTextInput%2A>"
  syntax:
    content: public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;
    return:
      type: System.Windows.Input.TextCompositionEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTextInputEvent
  id: PreviewTextInputEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTextInputEvent
  nameWithType: UIElement.PreviewTextInputEvent
  fullName: System.Windows.UIElement.PreviewTextInputEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewTextInput&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTouchDown
  id: PreviewTouchDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTouchDown
  nameWithType: UIElement.PreviewTouchDown
  fullName: System.Windows.UIElement.PreviewTouchDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於手指接觸到螢幕，此元素上方時。"
  remarks: "根據預設，PreviewTouchDown 和<xref:System.Windows.UIElement.TouchDown>事件手指接觸到螢幕，並移動之前不會發生。</xref:System.Windows.UIElement.TouchDown> 手指在螢幕上按住它不移動的方式會造成按下按住不放的<xref:System.Windows.Input.Stylus>.</xref:System.Windows.Input.Stylus>行為 按住行為相當於按一下滑鼠右鍵。       若要讓 PreviewTouchDown 和<xref:System.Windows.UIElement.TouchDown>手指接觸到螢幕，因為發生事件設定<xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName>附加屬性`false`這個項目的。</xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> </xref:System.Windows.UIElement.TouchDown>      <a name=&quot;routedEventInfo_PreviewTouchDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewTouchDownEvent>|  |路由策略 |通道 |  |委派 |<xref:System.EventHandler%601>的型別<xref:System.Windows.Input.TouchEventArgs>。 |     -對應反昇事件為<xref:System.Windows.UIElement.TouchDown>。</xref:System.Windows.UIElement.TouchDown> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.PreviewTouchDownEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewTouchDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewTouchDown%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchDown;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTouchDownEvent
  id: PreviewTouchDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTouchDownEvent
  nameWithType: UIElement.PreviewTouchDownEvent
  fullName: System.Windows.UIElement.PreviewTouchDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewTouchDown&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTouchMove
  id: PreviewTouchMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTouchMove
  nameWithType: UIElement.PreviewTouchMove
  fullName: System.Windows.UIElement.PreviewTouchMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於手指移動螢幕上，這個項目上方時發生。"
  remarks: "<a name=&quot;routedEventInfo_PreviewTouchMove&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewTouchMoveEvent>|  |路由策略 |通道 |  |委派 |<xref:System.EventHandler%601>的型別<xref:System.Windows.Input.TouchEventArgs>。 |     -對應反昇事件為<xref:System.Windows.UIElement.TouchMove>。</xref:System.Windows.UIElement.TouchMove> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.PreviewTouchMoveEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewTouchMove%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewTouchMove%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchMove;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTouchMoveEvent
  id: PreviewTouchMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTouchMoveEvent
  nameWithType: UIElement.PreviewTouchMoveEvent
  fullName: System.Windows.UIElement.PreviewTouchMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewTouchMove&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTouchUp
  id: PreviewTouchUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTouchUp
  nameWithType: UIElement.PreviewTouchUp
  fullName: System.Windows.UIElement.PreviewTouchUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "這個項目上方時，引發手指不在畫面上時，就會發生。"
  remarks: "<a name=&quot;routedEventInfo_PreviewTouchUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.PreviewTouchUpEvent>|  |路由策略 |通道 |  |委派 |<xref:System.EventHandler%601>的型別<xref:System.Windows.Input.TouchEventArgs>。 |     -對應反昇事件為<xref:System.Windows.UIElement.TouchUp>。</xref:System.Windows.UIElement.TouchUp> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.PreviewTouchUpEvent>      -覆寫<xref:System.Windows.UIElement.OnPreviewTouchUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnPreviewTouchUp%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchUp;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTouchUpEvent
  id: PreviewTouchUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTouchUpEvent
  nameWithType: UIElement.PreviewTouchUpEvent
  fullName: System.Windows.UIElement.PreviewTouchUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.PreviewTouchUp&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.QueryContinueDrag
  id: QueryContinueDrag
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: QueryContinueDrag
  nameWithType: UIElement.QueryContinueDrag
  fullName: System.Windows.UIElement.QueryContinueDrag
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "拖放作業期間鍵盤或滑鼠按鈕狀態變更時，就會發生。"
  remarks: "QueryContinueDrag 事件可讓拖曳來源能夠決定是否應取消拖放作業。       此事件會建立一個別名<xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName>附加這個類別中，事件，以便 QueryContinueDrag 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> 附加至 QueryContinueDrag 事件的事件處理常式附加至基礎<xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName>      <a name=&quot;routedEventInfo_QueryContinueDrag&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.QueryContinueDragEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.QueryContinueDragEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement.PreviewQueryContinueDrag>。</xref:System.Windows.UIElement.PreviewQueryContinueDrag> </xref:System.Windows.QueryContinueDragEventHandler> </xref:System.Windows.UIElement.QueryContinueDragEvent>      -覆寫<xref:System.Windows.UIElement.OnQueryContinueDrag%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnQueryContinueDrag%2A>"
  syntax:
    content: public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;
    return:
      type: System.Windows.QueryContinueDragEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.QueryContinueDragEvent
  id: QueryContinueDragEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: QueryContinueDragEvent
  nameWithType: UIElement.QueryContinueDragEvent
  fullName: System.Windows.UIElement.QueryContinueDragEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.QueryContinueDrag&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.QueryCursor
  id: QueryCursor
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: QueryCursor
  nameWithType: UIElement.QueryCursor
  fullName: System.Windows.UIElement.QueryCursor
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "要求游標顯示時發生。 每當滑鼠指標移到新位置，這表示游標物件可能需要變更根據其新位置時，是項目上引發這個事件。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName>附加這個類別中，事件，以便 QueryCursor 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> 附加至 QueryCursor 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName>       這個事件名稱所參考的資料指標不一定是文字游標 （有時稱為插入點）。 相反地，此內容中的資料指標是宣告畫面的圖形化顯示數個可能的輸入相關裝置或中的概念相關的物件[!INCLUDE[TLA2#tla_win](~/add/includes/tla2sharptla-win-md.md)]程式設計。 該物件由<xref:System.Windows.Input.Cursor>類別[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]。</xref:System.Windows.Input.Cursor> [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]輸入的系統可讓您變更這個資料指標，它代表在螢幕上的滑鼠指標位置時。 您可以使用預先定義的值從<xref:System.Windows.Input.Cursors>列舉型別，或者您可以宣告為影像檔的自訂資料指標。</xref:System.Windows.Input.Cursors>       接聽 QueryCursor 事件不是針對資料指標管理而有效率的技術。 相反地，每個項目應該定義它自己的資料指標行為和<xref:System.Windows.FrameworkContentElement.Cursor%2A><xref:System.Windows.FrameworkContentElement.ForceCursor%2A>.</xref:System.Windows.FrameworkContentElement.ForceCursor%2A> </xref:System.Windows.FrameworkContentElement.Cursor%2A> 您只應依賴 QueryCursor，如果您不想要使用的 WPF 架構層級基底項目，或在異常的情況下，其中定義以每個項目為基礎的資料指標的行為不符合您的需求。 如需有關在 QueryCursor 回應中實作資料指標行為的詳細資訊，請參閱<xref:System.Windows.Input.QueryCursorEventHandler>.</xref:System.Windows.Input.QueryCursorEventHandler>      <a name=&quot;routedEventInfo_QueryCursor&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.QueryCursorEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.QueryCursorEventHandler>|     -沒有定義對應通道的事件。</xref:System.Windows.Input.QueryCursorEventHandler> </xref:System.Windows.UIElement.QueryCursorEvent>      -覆寫<xref:System.Windows.UIElement.OnQueryCursor%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnQueryCursor%2A>"
  syntax:
    content: public event System.Windows.Input.QueryCursorEventHandler QueryCursor;
    return:
      type: System.Windows.Input.QueryCursorEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.QueryCursorEvent
  id: QueryCursorEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: QueryCursorEvent
  nameWithType: UIElement.QueryCursorEvent
  fullName: System.Windows.UIElement.QueryCursorEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.QueryCursor&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent QueryCursorEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)
  id: RaiseEvent(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: RaiseEvent(RoutedEventArgs)
  nameWithType: UIElement.RaiseEvent(RoutedEventArgs)
  fullName: System.Windows.UIElement.RaiseEvent(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "引發特定路由的事件。 <xref href=&quot;System.Windows.RoutedEvent&quot;> </xref>引發識別內<xref href=&quot;System.Windows.RoutedEventArgs&quot;></xref>所提供的執行個體 (做為<xref:System.Windows.RoutedEventArgs.RoutedEvent*>該事件資料的屬性)。</xref:System.Windows.RoutedEventArgs.RoutedEvent*>"
  remarks: "`e`參數的型別做為路由的事件的所有資料的通用基底類型; 不過，應該指定事件資料為最特定的事件資料類型是適用於所引發的事件，因為<xref:System.Windows.RoutedEventArgs>衍生的類別包含適用於特定的事件引發時的實際的特定資料屬性。</xref:System.Windows.RoutedEventArgs>       <xref:System.Windows.RoutedEventArgs>沒有狀態內容事件。它也會識別要引發哪個路由的事件。</xref:System.Windows.RoutedEventArgs> 此事件引發模式且同時與不同的路由的事件資料[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]事件和資料類別，通常只包含與事件相關的屬性。"
  example:
  - "The following example creates event data, appends the event identifier to the data, and then uses the event data instance to raise a custom routed event.  \n  \n [!code-cs[RoutedEventCustom#RaiseEvent](~/add/codesnippet/csharp/RoutedEventCustom/SDKSampleLibrary/class1.cs#raiseevent)]\n [!code-vb[RoutedEventCustom#RaiseEvent](~/add/codesnippet/visualbasic/SDKSampleLibrary/Class1.vb#raiseevent)]"
  syntax:
    content: public void RaiseEvent (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "A <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref> ，包含事件資料，也會識別要引發的事件。"
  overload: System.Windows.UIElement.RaiseEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ReleaseAllTouchCaptures
  id: ReleaseAllTouchCaptures
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ReleaseAllTouchCaptures()
  nameWithType: UIElement.ReleaseAllTouchCaptures()
  fullName: System.Windows.UIElement.ReleaseAllTouchCaptures()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "釋放這個項目中的所有擷取的觸控式裝置。"
  syntax:
    content: public void ReleaseAllTouchCaptures ();
    parameters: []
  overload: System.Windows.UIElement.ReleaseAllTouchCaptures*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ReleaseMouseCapture
  id: ReleaseMouseCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ReleaseMouseCapture()
  nameWithType: UIElement.ReleaseMouseCapture()
  fullName: System.Windows.UIElement.ReleaseMouseCapture()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "如果這個項目持有擷取，請釋放滑鼠捕捉。"
  remarks: "如果這個項目按擷取不放，呼叫這個方法沒有任何作用。 請考慮檢查值<xref:System.Windows.UIElement.IsMouseCaptured%2A>之前先呼叫這個方法。</xref:System.Windows.UIElement.IsMouseCaptured%2A>"
  example:
  - "The following example is the parallel to the example given for <xref:System.Windows.UIElement.CaptureMouse%2A>: it handles mouse button up to release mouse capture and re-enable moving the mouse.  \n  \n [!code-cs[CubeAnimation#UIElementMouseCapture](~/add/codesnippet/csharp/CubeAnimation_XBAP/Trackball.cs#uielementmousecapture)]\n [!code-vb[CubeAnimation#UIElementMouseCapture](~/add/codesnippet/visualbasic/cubeanimation_xbap/trackball.vb#uielementmousecapture)]"
  syntax:
    content: public void ReleaseMouseCapture ();
    parameters: []
  overload: System.Windows.UIElement.ReleaseMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ReleaseStylusCapture
  id: ReleaseStylusCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ReleaseStylusCapture()
  nameWithType: UIElement.ReleaseStylusCapture()
  fullName: System.Windows.UIElement.ReleaseStylusCapture()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "如果這個項目持有擷取，請釋放手寫筆裝置擷取。"
  remarks: "如果這個項目按擷取不放，呼叫這個方法沒有任何作用。 請考慮檢查值<xref:System.Windows.UIElement.IsStylusCaptured%2A>之前先呼叫這個方法。</xref:System.Windows.UIElement.IsStylusCaptured%2A>"
  syntax:
    content: public void ReleaseStylusCapture ();
    parameters: []
  overload: System.Windows.UIElement.ReleaseStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  id: ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ReleaseTouchCapture(TouchDevice)
  nameWithType: UIElement.ReleaseTouchCapture(TouchDevice)
  fullName: System.Windows.UIElement.ReleaseTouchCapture(TouchDevice)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "正在嘗試釋出這個項目從指定的觸控式裝置。"
  syntax:
    content: public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);
    parameters:
    - id: touchDevice
      type: System.Windows.Input.TouchDevice
      description: "要釋放的裝置。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已發行的觸控式裝置。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.ReleaseTouchCapture*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>touchDevice</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  id: RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: RemoveHandler(RoutedEvent,Delegate)
  nameWithType: UIElement.RemoveHandler(RoutedEvent,Delegate)
  fullName: System.Windows.UIElement.RemoveHandler(RoutedEvent,Delegate)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "從這個項目中移除指定的路由的事件處理常式。"
  remarks: "最常見的案例使用這[!INCLUDE[TLA#tla_api](~/add/includes/tlasharptla-api-md.md)]是當您實作[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]自訂路由事件，特別是當您實作在處理常式的 「 移除 」 邏輯時相關聯的 「 包裝函式 」 事件[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]層級。 這會遵循範例 < 備註 > 一節會說明這種情況。       如果沒有任何處理常式註冊以比對方法呼叫的輸入的參數的準則，則呼叫這個方法任何作用。       如果一個以上的處理常式附加事件處理常式存放區會移除比對準則，第一個處理常式。 這個行為會與一致[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]行為`-=`運算子。       既不`routedEvent`也`handler`可能`null`。 嘗試在提供做為任一個值`null`會引發例外狀況。       這個方法會忽略`handledEventsToo`加上參數資訊，如果第一個處理常式提供<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>簽章，可讓已處理事件的處理。</xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 會移除任一類型的處理常式。"
  example:
  - "The following example uses RemoveHandler as part of an event wrapper definition.  \n  \n [!code-cs[RoutedEventCustom#AddRemoveHandler](~/add/codesnippet/csharp/RoutedEventCustom/SDKSampleLibrary/class1.cs#addremovehandler)]\n [!code-vb[RoutedEventCustom#AddRemoveHandler](~/add/codesnippet/visualbasic/SDKSampleLibrary/Class1.vb#addremovehandler)]"
  syntax:
    content: public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "路由事件處理常式附加的識別項。"
    - id: handler
      type: System.Delegate
      description: "要從這個項目上的事件處理常式集合中移除的特定處理常式實作。"
  overload: System.Windows.UIElement.RemoveHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.RenderSize
  id: RenderSize
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: RenderSize
  nameWithType: UIElement.RenderSize
  fullName: System.Windows.UIElement.RenderSize
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得 （或設定，但請參閱 < 備註 >） 這個項目的最終呈現大小。"
  remarks: "> [!IMPORTANT]> 請勿嘗試設定此屬性有兩種[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]或程式碼，如果使用 WPF 架構層級配置系統中。 幾乎所有的一般應用程式案例將會使用這個版面配置系統。 版面配置系統不會直接採用 RenderSize 屬性的大小設定。 RenderSize 屬性宣告可寫入，才能啟用特定 WPF 核心層級橋接刻意規避的一般版面配置通訊協定，例如<xref:System.Windows.Documents.Adorner>類別</xref:System.Windows.Documents.Adorner>支援的案例       這個屬性可以用來檢查版面配置系統中的適用呈現大小會覆寫，例如<xref:System.Windows.UIElement.OnRender%2A>或<xref:System.Windows.UIElement.GetLayoutClip%2A>.</xref:System.Windows.UIElement.GetLayoutClip%2A> </xref:System.Windows.UIElement.OnRender%2A>       更常見的案例處理<xref:System.Windows.FrameworkElement.SizeChanged>事件的類別處理常式覆寫或<xref:System.Windows.UIElement.OnRenderSizeChanged%2A>事件。</xref:System.Windows.UIElement.OnRenderSizeChanged%2A> </xref:System.Windows.FrameworkElement.SizeChanged>      <a name=&quot;xamlTextUsage_RenderSize&quot;></a># # XAML 文字用法"
  example:
  - "The following example shows how a custom adorner uses the RenderSize value in order to create and size the rectangle graphic that defines the adorner, as part of its <xref:System.Windows.UIElement.OnRender%2A>implementation.  \n  \n [!code-vb[AdornersMiscCode#UIElementDesiredSize](~/add/codesnippet/visualbasic/adornersmisccode/window1.xaml.vb#uielementdesiredsize)]\n [!code-cs[AdornersMiscCode#UIElementDesiredSize](~/add/codesnippet/csharp/AdornersMiscCode/Window1.xaml.cs#uielementdesiredsize)]"
  syntax:
    content: public System.Windows.Size RenderSize { get; set; }
    return:
      type: System.Windows.Size
      description: "這個項目的呈現的大小。"
  overload: System.Windows.UIElement.RenderSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.RenderTransform
  id: RenderTransform
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: RenderTransform
  nameWithType: UIElement.RenderTransform
  fullName: System.Windows.UIElement.RenderTransform
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定影響這個項目呈現位置的轉換資訊。  這是相依性屬性。"
  remarks: "呈現轉換不會重新產生配置大小或呈現大小資訊。 呈現轉換通常用動畫顯示或元素套用暫時效果。 已取得焦點或將指標放上方，或可能會在載入該部分以吸引抖動時，此項目，例如可能縮放[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]。      <a name=&quot;dependencyPropertyInfo_RenderTransform&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.RenderTransformProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.RenderTransformProperty>"
  syntax:
    content: public System.Windows.Media.Transform RenderTransform { get; set; }
    return:
      type: System.Windows.Media.Transform
      description: "描述所需的呈現轉換的特性。 預設值是&lt;xref:System.Windows.Media.Transform.Identity%2A?displayProperty=fullName&gt;。"
  overload: System.Windows.UIElement.RenderTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.RenderTransformOrigin
  id: RenderTransformOrigin
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: RenderTransformOrigin
  nameWithType: UIElement.RenderTransformOrigin
  fullName: System.Windows.UIElement.RenderTransformOrigin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定宣告任何可能呈現轉換的中心點<xref:System.Windows.UIElement.RenderTransform*>、 相對於項目的範圍。</xref:System.Windows.UIElement.RenderTransform*>  這是相依性屬性。"
  remarks: "RenderTransformOrigin 有多少非標準方式使用<xref:System.Windows.Point>結構中的值<xref:System.Windows.Point>不代表絕對位置座標系統中的。</xref:System.Windows.Point> </xref:System.Windows.Point> 相反地，介於 0 和 1 之間的值會解譯為目前的項目中每個 x，y 軸的範圍內的因素。 例如，(0.5，0.5) 會造成呈現轉換的元素上置中 (1，1) 會將呈現轉換底端右下角的項目。 <xref:System.Double.NaN>不接受的值。</xref:System.Double.NaN>       0 和 1 以外的值也會接受的並會導致更多的非傳統的轉換效果。 比方說，如果您設定 (5,5)，並接著套用 RenderTransformOrigin <xref:System.Windows.Media.RotateTransform>，項目本身的範圍之外，也會旋轉點。</xref:System.Windows.Media.RotateTransform> 轉換將會微調您的項目是圓形中有大源自右下角之外。 來源可能會在其父項目內的某處，並可能超出框架或檢視表。 負數的點值都是類似，會產生超出左上方的界限。       呈現轉換不會影響配置，以及通常用來建立動畫，或將暫存效果套用至項目。      <a name=&quot;xamlAttributeUsage_RenderTransformOrigin&quot;></a># # XAML 屬性使用方式```   <object RenderTransformOrigin=&quot;xOrigin, yOrigin&quot;/>   ``` <a name=&quot;xamlPropertyElementUsage_RenderTransformOrigin&quot;> </a> # # XAML 屬性項目用法```   <object>     <object.RenderTransformOrigin>       <Point X=&quot; xOrigin &quot; Y=&quot; yOrigin &quot;/>     </object.RenderTransformOrigin>   </object>   ``` <a name=&quot;xamlValues_RenderTransformOrigin&quot;> </a> # # XAML 值*xOrigin*水平原點因素。             這通常是指定為介於 0 和 1 之間的值。 請參閱 < 備註 >。       *yOrigin*垂直原點因數。 這通常是指定為介於 0 和 1 之間的值。 請參閱 < 備註 >。      <a name=&quot;dependencyPropertyInfo_RenderTransformOrigin&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.RenderTransformOriginProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.RenderTransformOriginProperty>"
  example:
  - "The following example builds up elements in code, applies a RenderTransformOrigin, and then applies a  <xref:System.Windows.UIElement.RenderTransform%2A>.  \n  \n [!code-cs[transformanimations_snip#UIElementRenderTransformOrigin](~/add/codesnippet/csharp/transformanimations_snip.project/RotateAboutCenterExample.cs#uielementrendertransformorigin)]\n [!code-vb[transformanimations_snip#UIElementRenderTransformOrigin](~/add/codesnippet/visualbasic/project/rotateaboutcenterexample.vb#uielementrendertransformorigin)]"
  syntax:
    content: public System.Windows.Point RenderTransformOrigin { get; set; }
    return:
      type: System.Windows.Point
      description: "宣告呈現轉換的值。 預設值是<xref href=&quot;System.Windows.Point&quot;></xref>座標為 (0，0)。"
  overload: System.Windows.UIElement.RenderTransformOrigin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.RenderTransformOriginProperty
  id: RenderTransformOriginProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: RenderTransformOriginProperty
  nameWithType: UIElement.RenderTransformOriginProperty
  fullName: System.Windows.UIElement.RenderTransformOriginProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.RenderTransformOrigin*>相依性屬性。</xref:System.Windows.UIElement.RenderTransformOrigin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty RenderTransformOriginProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.RenderTransformProperty
  id: RenderTransformProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: RenderTransformProperty
  nameWithType: UIElement.RenderTransformProperty
  fullName: System.Windows.UIElement.RenderTransformProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.RenderTransform*>相依性屬性。</xref:System.Windows.UIElement.RenderTransform*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty RenderTransformProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ShouldSerializeCommandBindings
  id: ShouldSerializeCommandBindings
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ShouldSerializeCommandBindings()
  nameWithType: UIElement.ShouldSerializeCommandBindings()
  fullName: System.Windows.UIElement.ShouldSerializeCommandBindings()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "傳回序列化程序是否應序列化<xref:System.Windows.UIElement.CommandBindings*>此類別的執行個體上的屬性</xref:System.Windows.UIElement.CommandBindings*>的內容"
  remarks: "這會傳回`true`如果<xref:System.Windows.UIElement.CommandBindings%2A>本機設定。</xref:System.Windows.UIElement.CommandBindings%2A>       這`ShouldSerialize`方法提供，因為<xref:System.Windows.UIElement.CommandBindings%2A>屬性並沒有簡單的預設值。</xref:System.Windows.UIElement.CommandBindings%2A> 這個方法會指出屬性是否已變更其預設值。 當您是開發設計工具，或者開發自己的控制項加入<xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>通常呼叫這個方法       如需詳細資訊，請參閱[定義預設值使用 ShouldSerialize 和重設方法](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public bool ShouldSerializeCommandBindings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Windows.UIElement.CommandBindings*>屬性值應該序列化，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.UIElement.CommandBindings*>"
  overload: System.Windows.UIElement.ShouldSerializeCommandBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ShouldSerializeInputBindings
  id: ShouldSerializeInputBindings
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ShouldSerializeInputBindings()
  nameWithType: UIElement.ShouldSerializeInputBindings()
  fullName: System.Windows.UIElement.ShouldSerializeInputBindings()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "傳回序列化程序是否應序列化<xref:System.Windows.UIElement.InputBindings*>此類別的執行個體上的屬性</xref:System.Windows.UIElement.InputBindings*>的內容"
  remarks: "這會傳回`true`如果<xref:System.Windows.UIElement.InputBindings%2A>本機設定。</xref:System.Windows.UIElement.InputBindings%2A>       這`ShouldSerialize`方法提供，因為<xref:System.Windows.UIElement.InputBindings%2A>屬性並沒有簡單的預設值。</xref:System.Windows.UIElement.InputBindings%2A> 這個方法會指出屬性是否已變更其預設值。 當您是開發設計工具，或者開發自己的控制項加入<xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>通常呼叫這個方法       如需詳細資訊，請參閱[定義預設值使用 ShouldSerialize 和重設方法](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public bool ShouldSerializeInputBindings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Windows.UIElement.InputBindings*>屬性值應該序列化，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.UIElement.InputBindings*>"
  overload: System.Windows.UIElement.ShouldSerializeInputBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.SnapsToDevicePixels
  id: SnapsToDevicePixels
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: SnapsToDevicePixels
  nameWithType: UIElement.SnapsToDevicePixels
  fullName: System.Windows.UIElement.SnapsToDevicePixels
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定值，這個值來決定這個項目的呈現在呈現期間是否使用裝置特定像素的設定。  這是相依性屬性。"
  remarks: "您可以將此屬性設定為`true`在您的根項目，若要啟用像素貼齊呈現整個 UI。 適用於裝置超過 96 [!INCLUDE[TLA#tla_dpi](~/add/includes/ajax-current-ext-md.md)]，像素貼齊呈現可以減少單一單元實線來消除鋸齒視覺成品。       當繼承<xref:System.Windows.FrameworkElement>或任何可能在衍生類別，<xref:System.Windows.FrameworkElement>設定此相依性屬性的中繼資料會覆寫<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>中繼資料屬性來`true`。</xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> </xref:System.Windows.FrameworkElement> </xref:System.Windows.FrameworkElement> 這可達到是只將最外層項目樹狀子目錄中的必須指定為 SnapsToDevicePixels `true`，該子樹狀目的所有子項目然後會報告為 SnapsToDevicePixels `true` ，而且必須 SnapsToDevicePixels 視覺效果。      <a name=&quot;dependencyPropertyInfo_SnapsToDevicePixels&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>"
  syntax:
    content: public bool SnapsToDevicePixels { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此項目應該根據裝置像素為單位; 呈現否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設為宣告上<xref href=&quot;System.Windows.UIElement&quot;></xref>是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement.SnapsToDevicePixels*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.SnapsToDevicePixelsProperty
  id: SnapsToDevicePixelsProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: SnapsToDevicePixelsProperty
  nameWithType: UIElement.SnapsToDevicePixelsProperty
  fullName: System.Windows.UIElement.SnapsToDevicePixelsProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.SnapsToDevicePixels*>相依性屬性。</xref:System.Windows.UIElement.SnapsToDevicePixels*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusButtonDown
  id: StylusButtonDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusButtonDown
  nameWithType: UIElement.StylusButtonDown
  fullName: System.Windows.UIElement.StylusButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於指標位於此項目上方時，按下手寫筆按鈕。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName>附加這個類別中，事件，以便 StylusButtonDown 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> 附加至 StylusButtonDown 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusButtonDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.StylusButtonDownEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.StylusButtonEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement.PreviewStylusButtonDown>。</xref:System.Windows.UIElement.PreviewStylusButtonDown> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.UIElement.StylusButtonDownEvent>      -覆寫<xref:System.Windows.UIElement.OnStylusButtonDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnStylusButtonDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusButtonDownEvent
  id: StylusButtonDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusButtonDownEvent
  nameWithType: UIElement.StylusButtonDownEvent
  fullName: System.Windows.UIElement.StylusButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.StylusButtonDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusButtonUp
  id: StylusButtonUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusButtonUp
  nameWithType: UIElement.StylusButtonUp
  fullName: System.Windows.UIElement.StylusButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於指標位於此元素上方且放開手寫筆按鈕。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName>附加這個類別中，事件，以便 StylusButtonUp 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> 附加至 StylusButtonUp 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusButtonUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.StylusButtonUpEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.StylusButtonEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement.PreviewStylusButtonUp>。</xref:System.Windows.UIElement.PreviewStylusButtonUp> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.UIElement.StylusButtonUpEvent>      -覆寫<xref:System.Windows.UIElement.OnStylusButtonUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnStylusButtonUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusButtonUpEvent
  id: StylusButtonUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusButtonUpEvent
  nameWithType: UIElement.StylusButtonUpEvent
  fullName: System.Windows.UIElement.StylusButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.StylusButtonUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusDown
  id: StylusDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusDown
  nameWithType: UIElement.StylusDown
  fullName: System.Windows.UIElement.StylusDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當手寫筆在此元素上方且碰觸數位板時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName>附加這個類別中，事件，以便 StylusDown 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> 附加至 StylusDown 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.StylusDownEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.StylusDownEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement.PreviewStylusDown>。</xref:System.Windows.UIElement.PreviewStylusDown> </xref:System.Windows.Input.StylusDownEventHandler> </xref:System.Windows.UIElement.StylusDownEvent>      -覆寫<xref:System.Windows.UIElement.OnStylusDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnStylusDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusDownEventHandler StylusDown;
    return:
      type: System.Windows.Input.StylusDownEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusDownEvent
  id: StylusDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusDownEvent
  nameWithType: UIElement.StylusDownEvent
  fullName: System.Windows.UIElement.StylusDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.StylusDown&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusEnter
  id: StylusEnter
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusEnter
  nameWithType: UIElement.StylusEnter
  fullName: System.Windows.UIElement.StylusEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "手寫筆進入此元素的邊界時發生。"
  remarks: "StylusEnter 是會直接處理路由策略的事件。 直接路由的事件不會引發的路由。相反地，它們會在處理相同的項目所引發的位置。 不過，它們會啟用路由的事件的行為，例如事件觸發程序在樣式中的其他層面。       雖然 StylusEnter 會將手寫筆進入項目的界限追蹤，此事件更常值報告的<xref:System.Windows.UIElement.IsStylusOver%2A>屬性值已經從`false`至`true`這個項目上。</xref:System.Windows.UIElement.IsStylusOver%2A>       此事件會建立一個別名<xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName>附加這個類別中，事件，以便 StylusEnter 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> 附加至 StylusEnter 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusEnter&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.StylusEnterEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -覆寫<xref:System.Windows.UIElement.OnStylusEnter%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnStylusEnter%2A> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.StylusEnterEvent>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusEnter;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusEnterEvent
  id: StylusEnterEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusEnterEvent
  nameWithType: UIElement.StylusEnterEvent
  fullName: System.Windows.UIElement.StylusEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.StylusEnter&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusInAirMove
  id: StylusInAirMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusInAirMove
  nameWithType: UIElement.StylusInAirMove
  fullName: System.Windows.UIElement.StylusInAirMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "手寫筆移動的項目上，但沒有真正碰觸數位板時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName>附加這個類別中，事件，以便 StylusInAirMove 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> 附加至 StylusInAirMove 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusInAirMove&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.StylusInAirMoveEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement.PreviewStylusInAirMove>。</xref:System.Windows.UIElement.PreviewStylusInAirMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.StylusInAirMoveEvent>      -覆寫<xref:System.Windows.UIElement.OnStylusInAirMove%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnStylusInAirMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusInAirMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusInAirMoveEvent
  id: StylusInAirMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusInAirMoveEvent
  nameWithType: UIElement.StylusInAirMoveEvent
  fullName: System.Windows.UIElement.StylusInAirMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.StylusInAirMove&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusInRange
  id: StylusInRange
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusInRange
  nameWithType: UIElement.StylusInRange
  fullName: System.Windows.UIElement.StylusInRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "手寫筆靠近數位板偵測，此元素上方時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName>附加這個類別中，事件，以便 StylusInRange 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> 附加至 StylusInRange 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusInRange&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.StylusInRangeEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement.PreviewStylusInRange>。</xref:System.Windows.UIElement.PreviewStylusInRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.StylusInRangeEvent>      -覆寫<xref:System.Windows.UIElement.OnStylusInRange%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnStylusInRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusInRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusInRangeEvent
  id: StylusInRangeEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusInRangeEvent
  nameWithType: UIElement.StylusInRangeEvent
  fullName: System.Windows.UIElement.StylusInRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.StylusInRange&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusInRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusLeave
  id: StylusLeave
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusLeave
  nameWithType: UIElement.StylusLeave
  fullName: System.Windows.UIElement.StylusLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "手寫筆離開元素的邊界時發生。"
  remarks: "StylusLeave 是會直接處理路由策略的事件。 直接路由的事件不會引發的路由。相反地，它們會在處理相同的項目所引發的位置。 不過，它們會啟用路由的事件的行為，例如事件觸發程序在樣式中的其他層面。       雖然 StylusLeave 會追蹤手寫筆離開元素的邊界時，此事件更常值報告的<xref:System.Windows.UIElement.IsStylusOver%2A>屬性值已經從`true`至`false`這個項目上。</xref:System.Windows.UIElement.IsStylusOver%2A>       此事件會建立一個別名<xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName>附加這個類別中，事件，以便 StylusLeave 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> 附加至 StylusLeave 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusLeave&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.StylusLeaveEvent>|  |路由策略 |直接 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -覆寫<xref:System.Windows.UIElement.OnStylusLeave%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnStylusLeave%2A> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.StylusLeaveEvent>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusLeave;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusLeaveEvent
  id: StylusLeaveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusLeaveEvent
  nameWithType: UIElement.StylusLeaveEvent
  fullName: System.Windows.UIElement.StylusLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.StylusLeave&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusMove
  id: StylusMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusMove
  nameWithType: UIElement.StylusMove
  fullName: System.Windows.UIElement.StylusMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素上方移動手寫筆時發生。 手寫筆必須移動才能引發此事件在數位板上。 否則， <xref href=&quot;System.Windows.UIElement.StylusInAirMove&quot;> </xref>會改為引發。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName>附加這個類別中，事件，以便 StylusMove 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> 附加至 StylusMove 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusMove&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.StylusMoveEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement.PreviewStylusMove>。</xref:System.Windows.UIElement.PreviewStylusMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.StylusMoveEvent>      -覆寫<xref:System.Windows.UIElement.OnStylusMove%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnStylusMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusMoveEvent
  id: StylusMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusMoveEvent
  nameWithType: UIElement.StylusMoveEvent
  fullName: System.Windows.UIElement.StylusMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.StylusMove&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusOutOfRange
  id: StylusOutOfRange
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusOutOfRange
  nameWithType: UIElement.StylusOutOfRange
  fullName: System.Windows.UIElement.StylusOutOfRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "手寫筆遠離數位板偵測，此元素上方時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName>附加這個類別中，事件，以便 StylusOutOfRange 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> 附加至 StylusOutOfRange 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusOutOfRange&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.StylusOutOfRangeEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement.PreviewStylusOutOfRange>。</xref:System.Windows.UIElement.PreviewStylusOutOfRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.StylusOutOfRangeEvent>      -覆寫<xref:System.Windows.UIElement.OnStylusOutOfRange%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnStylusOutOfRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusOutOfRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusOutOfRangeEvent
  id: StylusOutOfRangeEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusOutOfRangeEvent
  nameWithType: UIElement.StylusOutOfRangeEvent
  fullName: System.Windows.UIElement.StylusOutOfRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.StylusOutOfRange&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusPlugIns
  id: StylusPlugIns
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusPlugIns
  nameWithType: UIElement.StylusPlugIns
  fullName: System.Windows.UIElement.StylusPlugIns
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得與這個項目相關聯的所有手寫筆外掛程式 （自訂） 物件的集合。"
  remarks: "舉例來說，會填入這個集合是控制項的<xref:System.Windows.Controls.InkCanvas>.</xref:System.Windows.Controls.InkCanvas> <xref:System.Windows.Controls.InkCanvas>新增<xref:System.Windows.Input.StylusPlugIns.DynamicRenderer>做為集合項目，這可讓<xref:System.Windows.Input.StylusPlugIns.DynamicRenderer>互動手寫筆輸入，並產生唯一的呈現方式，以回應驅動事件手寫筆。</xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> </xref:System.Windows.Input.StylusPlugIns.DynamicRenderer></xref:System.Windows.Controls.InkCanvas>       如需有關建立自訂外掛程式可以接收和解譯手寫筆輸入，請參閱[輸入將手寫筆攔截](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example creates a <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> instance and adds it to the StylusPlugIns collection for a custom ink handling control.  \n  \n [!code-vb[StylusPluginSamples#3](~/add/codesnippet/visualbasic/StylusPluginSamples/StylusControl.vb#3)]\n [!code-cs[StylusPluginSamples#3](~/add/codesnippet/csharp/StylusPluginSamples/StylusControl.cs#3)]"
  syntax:
    content: protected System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns { get; }
    return:
      type: System.Windows.Input.StylusPlugIns.StylusPlugInCollection
      description: "集合手寫筆外掛程式，特製化的集合。"
  overload: System.Windows.UIElement.StylusPlugIns*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusSystemGesture
  id: StylusSystemGesture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusSystemGesture
  nameWithType: UIElement.StylusSystemGesture
  fullName: System.Windows.UIElement.StylusSystemGesture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "當使用者執行其中一種手寫筆筆勢時發生。"
  remarks: "手寫筆筆勢的相關資訊的詳細資訊，請參閱<xref:System.Windows.Input.SystemGesture>.</xref:System.Windows.Input.SystemGesture>       此事件會建立一個別名<xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName>附加這個類別中，事件，以便 StylusSystemGesture 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> 附加至 StylusSystemGesture 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusSystemGesture&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.StylusSystemGestureEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.StylusSystemGestureEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement.PreviewStylusSystemGesture>。</xref:System.Windows.UIElement.PreviewStylusSystemGesture> </xref:System.Windows.Input.StylusSystemGestureEventHandler> </xref:System.Windows.UIElement.StylusSystemGestureEvent>      -覆寫<xref:System.Windows.UIElement.OnStylusSystemGesture%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnStylusSystemGesture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;
    return:
      type: System.Windows.Input.StylusSystemGestureEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusSystemGestureEvent
  id: StylusSystemGestureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusSystemGestureEvent
  nameWithType: UIElement.StylusSystemGestureEvent
  fullName: System.Windows.UIElement.StylusSystemGestureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.StylusSystemGesture&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusUp
  id: StylusUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusUp
  nameWithType: UIElement.StylusUp
  fullName: System.Windows.UIElement.StylusUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "且使用者舉起手寫筆在數位板這個項目上方時發生。"
  remarks: "此事件會建立一個別名<xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName>附加這個類別中，事件，以便 StylusUp 是部分類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> 附加至 StylusUp 事件的事件處理常式附加至基礎<xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName>       觸控、 滑鼠及手寫筆輸入存在於特定的關聯性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.StylusUpEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.StylusEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement.PreviewStylusUp>。</xref:System.Windows.UIElement.PreviewStylusUp> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.StylusUpEvent>      -覆寫<xref:System.Windows.UIElement.OnStylusUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnStylusUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusUp;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusUpEvent
  id: StylusUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusUpEvent
  nameWithType: UIElement.StylusUpEvent
  fullName: System.Windows.UIElement.StylusUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.StylusUp&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TextInput
  id: TextInput
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TextInput
  nameWithType: UIElement.TextInput
  fullName: System.Windows.UIElement.TextInput
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "這個項目與裝置無關的方式取得文字時發生。"
  remarks: "> [!IMPORTANT]> 這個事件可能已標示為處理複合控制項的內部實作。 請參閱下方的 「 備註。       輸入事件可能已標示為處理複合控制項的內部實作。 例如，<xref:System.Windows.Controls.TextBox>是複合控制項，其中輸入事件已標示為已處理; 在其複合。</xref:System.Windows.Controls.TextBox> 控制項執行這項操作，因為控制項必須解譯某些類型的輸入，例如方向鍵，該控制項的特別意義。 如果您使用<xref:System.Windows.UIElement.PreviewTextInput>您用來附加文字輸入的處理常式的事件，您可能會收到更好的結果。</xref:System.Windows.UIElement.PreviewTextInput> 這項技術規避大部分的情況下，其中已將這個事件標記為已處理控制項撰寫，而防止接收事件路由上的事件處理常式。       輸入事件可讓元件或應用程式與裝置無關的方式接聽文字輸入。 鍵盤輸入，但是語音、 手寫的主要方法，而且其他輸入的裝置也會遇到輸入。       因為組合 — 在預設鍵盤或輸入的法編輯器透過 — 多個按鍵事件可能會引發一個文字輸入的事件。       此事件會建立一個別名<xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName>附加這個類別中，事件，以便輸入屬於類別的成員 清單時<xref:System.Windows.UIElement>繼承基底的項目。</xref:System.Windows.UIElement> </xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> 附加至輸入事件的事件處理常式附加至基礎<xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName>附加事件和接收相同的事件資料執行個體。</xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName>      <a name=&quot;routedEventInfo_TextInput&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.TextInputEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.Windows.Input.TextCompositionEventHandler>|     -對應通道的事件為<xref:System.Windows.UIElement.PreviewTextInput>。</xref:System.Windows.UIElement.PreviewTextInput> </xref:System.Windows.Input.TextCompositionEventHandler> </xref:System.Windows.UIElement.TextInputEvent>      -覆寫<xref:System.Windows.UIElement.OnTextInput%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnTextInput%2A>"
  syntax:
    content: public event System.Windows.Input.TextCompositionEventHandler TextInput;
    return:
      type: System.Windows.Input.TextCompositionEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TextInputEvent
  id: TextInputEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TextInputEvent
  nameWithType: UIElement.TextInputEvent
  fullName: System.Windows.UIElement.TextInputEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.TextInput&quot;></xref>路由的事件。"
  remarks: "註冊路由的事件時，會建立路由的事件識別項。 這些識別碼包含識別名稱、 擁有者類型、 處理常式類型、 路由策略和公用程式方法新增擁有者的事件。 您可以使用這些識別項來加入類別處理常式。       如需註冊路由的事件的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 如需使用路由的事件識別項來加入類別處理常式的詳細資訊，請參閱<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TextInputEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchDown
  id: TouchDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchDown
  nameWithType: UIElement.TouchDown
  fullName: System.Windows.UIElement.TouchDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於手指接觸到螢幕，此元素上方時。"
  remarks: "根據預設，<xref:System.Windows.UIElement.PreviewTouchDown>而且 TouchDown 事件手指接觸到螢幕，並移動之前不會發生。</xref:System.Windows.UIElement.PreviewTouchDown> 手指在螢幕上按住它不移動的方式會造成按下按住不放的<xref:System.Windows.Input.Stylus>.</xref:System.Windows.Input.Stylus>行為 按住行為相當於按一下滑鼠右鍵。       若要讓<xref:System.Windows.UIElement.PreviewTouchDown>TouchDown 事件發生手指接觸到螢幕，例如設定<xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName>附加屬性`false`這個項目的。</xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewTouchDown>      <a name=&quot;routedEventInfo_TouchDown&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.TouchDownEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.EventHandler%601>的型別<xref:System.Windows.Input.TouchEventArgs>。 |     -對應通道的事件為<xref:System.Windows.UIElement.PreviewTouchDown>。</xref:System.Windows.UIElement.PreviewTouchDown> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.TouchDownEvent>      -覆寫<xref:System.Windows.UIElement.OnTouchDown%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnTouchDown%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchDown;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchDownEvent
  id: TouchDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchDownEvent
  nameWithType: UIElement.TouchDownEvent
  fullName: System.Windows.UIElement.TouchDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.TouchDown&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchEnter
  id: TouchEnter
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchEnter
  nameWithType: UIElement.TouchEnter
  fullName: System.Windows.UIElement.TouchEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於從觸控式移動到這個項目之範圍內的外部。"
  remarks: "一律引發這個事件，不論是否觸控裝置擷取至這個項目。      <a name=&quot;routedEventInfo_TouchEnter&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.TouchEnterEvent>|  |路由策略 |直接 |  |委派 |<xref:System.EventHandler%601>的型別<xref:System.Windows.Input.TouchEventArgs>。 |     -覆寫<xref:System.Windows.UIElement.OnTouchEnter%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnTouchEnter%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.TouchEnterEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchEnter;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchEnterEvent
  id: TouchEnterEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchEnterEvent
  nameWithType: UIElement.TouchEnterEvent
  fullName: System.Windows.UIElement.TouchEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.TouchEnter&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchesCaptured
  id: TouchesCaptured
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchesCaptured
  nameWithType: UIElement.TouchesCaptured
  fullName: System.Windows.UIElement.TouchesCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得所有觸控裝置擷取至這個項目。"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCaptured { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "列舉<xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref>物件擷取至這個項目。"
  overload: System.Windows.UIElement.TouchesCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchesCapturedWithin
  id: TouchesCapturedWithin
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchesCapturedWithin
  nameWithType: UIElement.TouchesCapturedWithin
  fullName: System.Windows.UIElement.TouchesCapturedWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "其視覺化樹狀中取得所有擷取至這個項目的觸控式裝置或任何子項目。"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCapturedWithin { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "列舉<xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref>物件擷取至這個項目或其視覺化樹狀中的任何子項目。"
  overload: System.Windows.UIElement.TouchesCapturedWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchesDirectlyOver
  id: TouchesDirectlyOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchesDirectlyOver
  nameWithType: UIElement.TouchesDirectlyOver
  fullName: System.Windows.UIElement.TouchesDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得所有屬於此元素上方觸控式裝置。"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesDirectlyOver { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "列舉<xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref>此元素上方的物件。"
  overload: System.Windows.UIElement.TouchesDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchesOver
  id: TouchesOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchesOver
  nameWithType: UIElement.TouchesOver
  fullName: System.Windows.UIElement.TouchesOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "其視覺化樹狀中取得所有屬於此元素上方觸控式裝置或任何子項目。"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesOver { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "列舉<xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref>物件在這個項目或其視覺化樹狀中的任何子項目。"
  overload: System.Windows.UIElement.TouchesOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchLeave
  id: TouchLeave
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchLeave
  nameWithType: UIElement.TouchLeave
  fullName: System.Windows.UIElement.TouchLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於從觸控式移動到這個項目之範圍外的內部。"
  remarks: "一律引發這個事件，不論是否觸控裝置擷取至這個項目。      <a name=&quot;routedEventInfo_TouchLeave&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.TouchLeaveEvent>|  |路由策略 |直接 |  |委派 |<xref:System.EventHandler%601>的型別<xref:System.Windows.Input.TouchEventArgs>。 |     -覆寫<xref:System.Windows.UIElement.OnTouchLeave%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnTouchLeave%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.TouchLeaveEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchLeave;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchLeaveEvent
  id: TouchLeaveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchLeaveEvent
  nameWithType: UIElement.TouchLeaveEvent
  fullName: System.Windows.UIElement.TouchLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.TouchLeave&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchMove
  id: TouchMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchMove
  nameWithType: UIElement.TouchMove
  fullName: System.Windows.UIElement.TouchMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "發生於手指移動螢幕上，這個項目上方時發生。"
  remarks: "<a name=&quot;routedEventInfo_TouchMove&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.TouchMoveEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.EventHandler%601>的型別<xref:System.Windows.Input.TouchEventArgs>。 |     -對應通道的事件為<xref:System.Windows.UIElement.PreviewTouchMove>。</xref:System.Windows.UIElement.PreviewTouchMove> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.TouchMoveEvent>      -覆寫<xref:System.Windows.UIElement.OnTouchMove%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnTouchMove%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchMove;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchMoveEvent
  id: TouchMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchMoveEvent
  nameWithType: UIElement.TouchMoveEvent
  fullName: System.Windows.UIElement.TouchMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.TouchMove&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchUp
  id: TouchUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchUp
  nameWithType: UIElement.TouchUp
  fullName: System.Windows.UIElement.TouchUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "這個項目上方時，引發手指不在畫面上時，就會發生。"
  remarks: "<a name=&quot;routedEventInfo_TouchUp&quot;></a># # 路由事件資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.TouchUpEvent>|  |路由策略 |反昇 |  |委派 |<xref:System.EventHandler%601>的型別<xref:System.Windows.Input.TouchEventArgs>。 |     -對應通道的事件為<xref:System.Windows.UIElement.PreviewTouchUp>。</xref:System.Windows.UIElement.PreviewTouchUp> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.TouchUpEvent>      -覆寫<xref:System.Windows.UIElement.OnTouchUp%2A>實作在衍生類別中這個事件的類別處理。</xref:System.Windows.UIElement.OnTouchUp%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchUp;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchUpEvent
  id: TouchUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchUpEvent
  nameWithType: UIElement.TouchUpEvent
  fullName: System.Windows.UIElement.TouchUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref href=&quot;System.Windows.UIElement.TouchUp&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)
  id: TranslatePoint(System.Windows.Point,System.Windows.UIElement)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TranslatePoint(Point,UIElement)
  nameWithType: UIElement.TranslatePoint(Point,UIElement)
  fullName: System.Windows.UIElement.TranslatePoint(Point,UIElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "將轉譯的點，以相對座標相對於指定的項目，這個項目。"
  remarks: "傳遞`null`如`relativeTo`允許，並指出座標應該相對於這個項目所屬之邏輯樹狀結構中的根元素。       這個方法用來轉譯點擊測試點值。 呼叫這個方法是主要相關，如果您正在撰寫的控制項，而且需要處理較低層級的輸入。 如果您使用現有的控制項，您通常可以假設已完成的控制項將報表正確轉譯的點擊的測試結果。"
  syntax:
    content: public System.Windows.Point TranslatePoint (System.Windows.Point point, System.Windows.UIElement relativeTo);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "點值相對於這個項目。"
    - id: relativeTo
      type: System.Windows.UIElement
      description: "要轉換成指定的點的項目。"
    return:
      type: System.Windows.Point
      description: "點值，現在會相對於目標項目，而不是這個來源項目。"
  overload: System.Windows.UIElement.TranslatePoint*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Uid
  id: Uid
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Uid
  nameWithType: UIElement.Uid
  fullName: System.Windows.UIElement.Uid
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定這個項目 （適用於當地語系化） 的唯一識別碼。 這是相依性屬性。"
  remarks: "設計工具用來取得`x:Uid`值 (請參閱[WPF 全球化和當地語系化概觀](~/add/includes/ajax-current-ext-md.md)如需詳細資訊)。      <a name=&quot;dependencyPropertyInfo_WindowWindowStyle&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.UidProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.UidProperty>"
  syntax:
    content: public string Uid { get; set; }
    return:
      type: System.String
      description: "此元素的唯一識別碼字串。"
  overload: System.Windows.UIElement.Uid*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.UidProperty
  id: UidProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: UidProperty
  nameWithType: UIElement.UidProperty
  fullName: System.Windows.UIElement.UidProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.Uid*>相依性屬性。</xref:System.Windows.UIElement.Uid*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty UidProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.UpdateLayout
  id: UpdateLayout
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: UpdateLayout()
  nameWithType: UIElement.UpdateLayout()
  fullName: System.Windows.UIElement.UpdateLayout()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "可確保所有的視覺子項目，這個項目之已正確更新配置。"
  remarks: "當您呼叫此方法中，項目與<xref:System.Windows.UIElement.IsMeasureValid%2A>`false`或<xref:System.Windows.UIElement.IsArrangeValid%2A>`false`會呼叫項目專屬<xref:System.Windows.UIElement.MeasureCore%2A>和<xref:System.Windows.UIElement.ArrangeCore%2A>方法，這會強制版面配置更新，且會驗證所有計算的大小。</xref:System.Windows.UIElement.ArrangeCore%2A> </xref:System.Windows.UIElement.MeasureCore%2A> </xref:System.Windows.UIElement.IsArrangeValid%2A></xref:System.Windows.UIElement.IsMeasureValid%2A>       呼叫這個方法沒有任何作用，如果配置並未變更，或配置的排列方式都度量狀態無效。 不過，如果在任一方面配置無效，UpdateLayout 呼叫將會取消復原整個版面配置。 因此，您應該避免在項目樹狀目錄中的每個增量和次要變更後呼叫 UpdateLayout。 延後的方式，使用的演算法來平衡效能與貨幣，並使用加權策略延遲根目錄的變更，直到所有的子元素都是有效的版面配置系統會執行項目配置。 如果一定需要更新的大小和位置，並且只在您確認之後所有控制項，您可能會影響配置的屬性變更完成都之後，才應該呼叫 UpdateLayout。"
  syntax:
    content: public void UpdateLayout ();
    parameters: []
  overload: System.Windows.UIElement.UpdateLayout*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Visibility
  id: Visibility
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Visibility
  nameWithType: UIElement.Visibility
  fullName: System.Windows.UIElement.Visibility
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得或設定[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]這個項目的可見性。  這是相依性屬性。"
  remarks: "設定這個屬性會影響值<xref:System.Windows.UIElement.IsVisible%2A>，其接著可能會引發<xref:System.Windows.UIElement.IsVisibleChanged>事件。</xref:System.Windows.UIElement.IsVisibleChanged> </xref:System.Windows.UIElement.IsVisible%2A> 不過，<xref:System.Windows.UIElement.IsVisible%2A>有其他因素，包括其執行個體，其中包含它的父代的可見性設定的影響</xref:System.Windows.UIElement.IsVisible%2A>       項目可見性，不是<xref:System.Windows.Visibility>不會參與輸入事件 （或命令）、 不會影響測量或排列傳遞的版面配置、 索引標籤順序及將不會報告在點擊測試。</xref:System.Windows.Visibility>       當<xref:System.Windows.Window>或其衍生的類別，<xref:System.Windows.Window>會重新定義為<xref:System.Windows.Visibility>.</xref:System.Windows.Visibility>這個屬性的預設值</xref:System.Windows.Window></xref:System.Windows.Window>繼承 這是不執行上一開始建立的 版面配置的測量傳遞的效果<xref:System.Windows.Window>，和<xref:System.Windows.UIElement.RenderSize%2A>傳回 (0，0)。</xref:System.Windows.UIElement.RenderSize%2A> </xref:System.Windows.Window> 如需詳細資訊，請參閱<xref:System.Windows.Window>.</xref:System.Windows.Window> <xref:System.Windows.Controls.Primitives.Popup>也會重新定義預設值為<xref:System.Windows.Visibility>，具有類似的結果行為，如<xref:System.Windows.Controls.Primitives.Popup>和其衍生的類別。</xref:System.Windows.Controls.Primitives.Popup> </xref:System.Windows.Visibility></xref:System.Windows.Controls.Primitives.Popup>      <a name=&quot;dependencyPropertyInfo_Visibility&quot;></a># # 相依性屬性資訊 | | |  |-|-|  |識別項欄位 |<xref:System.Windows.UIElement.VisibilityProperty>|  |中繼資料屬性設定為`true`|None |</xref:System.Windows.UIElement.VisibilityProperty>"
  example:
  - "The following example implements a handler that references two different named buttons that are intended to be a mutually exclusive pair in the user interface. Prior to running the actual program logic associated with the button, the button itself is set to be <xref:System.Windows.Visibility?displayProperty=fullName>, and the other button in the pair is set to <xref:System.Windows.Visibility?displayProperty=fullName>.  \n  \n [!code-cs[MediaElement_snip#UIElementVisibility](~/add/codesnippet/csharp/p-system.windows.uieleme_13_1.cs)]\n [!code-vb[MediaElement_snip#UIElementVisibility](~/add/codesnippet/visualbasic/p-system.windows.uieleme_13_1.vb)]"
  syntax:
    content: public System.Windows.Visibility Visibility { get; set; }
    return:
      type: System.Windows.Visibility
      description: "列舉值。 預設值是<xref href=&quot;System.Windows.Visibility&quot;> </xref>。"
  overload: System.Windows.UIElement.Visibility*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.VisibilityProperty
  id: VisibilityProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: VisibilityProperty
  nameWithType: UIElement.VisibilityProperty
  fullName: System.Windows.UIElement.VisibilityProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "識別<xref:System.Windows.UIElement.Visibility*>相依性屬性。</xref:System.Windows.UIElement.Visibility*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty VisibilityProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Media.Visual
  isExternal: false
  name: System.Windows.Media.Visual
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.UIElement.#ctor
  parent: System.Windows.UIElement
  isExternal: false
  name: UIElement()
  nameWithType: UIElement.UIElement()
  fullName: System.Windows.UIElement.UIElement()
- uid: System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.UIElement
  isExternal: false
  name: AddHandler(RoutedEvent,Delegate)
  nameWithType: UIElement.AddHandler(RoutedEvent,Delegate)
  fullName: System.Windows.UIElement.AddHandler(RoutedEvent,Delegate)
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.UIElement
  isExternal: false
  name: AddHandler(RoutedEvent,Delegate,Boolean)
  nameWithType: UIElement.AddHandler(RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.UIElement.AddHandler(RoutedEvent,Delegate,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: AddToEventRoute(EventRoute,RoutedEventArgs)
  nameWithType: UIElement.AddToEventRoute(EventRoute,RoutedEventArgs)
  fullName: System.Windows.UIElement.AddToEventRoute(EventRoute,RoutedEventArgs)
- uid: System.Windows.EventRoute
  parent: System.Windows
  isExternal: false
  name: EventRoute
  nameWithType: EventRoute
  fullName: System.Windows.EventRoute
- uid: System.Windows.RoutedEventArgs
  parent: System.Windows
  isExternal: false
  name: RoutedEventArgs
  nameWithType: RoutedEventArgs
  fullName: System.Windows.RoutedEventArgs
- uid: System.Windows.UIElement.AllowDrop
  parent: System.Windows.UIElement
  isExternal: false
  name: AllowDrop
  nameWithType: UIElement.AllowDrop
  fullName: System.Windows.UIElement.AllowDrop
- uid: System.Windows.UIElement.AllowDropProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: AllowDropProperty
  nameWithType: UIElement.AllowDropProperty
  fullName: System.Windows.UIElement.AllowDropProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  parent: System.Windows.UIElement
  isExternal: false
  name: ApplyAnimationClock(DependencyProperty,AnimationClock)
  nameWithType: UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
  fullName: System.Windows.UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
- uid: System.Windows.Media.Animation.AnimationClock
  parent: System.Windows.Media.Animation
  isExternal: false
  name: AnimationClock
  nameWithType: AnimationClock
  fullName: System.Windows.Media.Animation.AnimationClock
- uid: System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.UIElement
  isExternal: false
  name: ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  nameWithType: UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  fullName: System.Windows.UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
- uid: System.Windows.Media.Animation.HandoffBehavior
  parent: System.Windows.Media.Animation
  isExternal: false
  name: HandoffBehavior
  nameWithType: HandoffBehavior
  fullName: System.Windows.Media.Animation.HandoffBehavior
- uid: System.Windows.UIElement.AreAnyTouchesCaptured
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesCaptured
  nameWithType: UIElement.AreAnyTouchesCaptured
  fullName: System.Windows.UIElement.AreAnyTouchesCaptured
- uid: System.Windows.UIElement.AreAnyTouchesCapturedProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesCapturedProperty
  nameWithType: UIElement.AreAnyTouchesCapturedProperty
  fullName: System.Windows.UIElement.AreAnyTouchesCapturedProperty
- uid: System.Windows.UIElement.AreAnyTouchesCapturedWithin
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesCapturedWithin
  nameWithType: UIElement.AreAnyTouchesCapturedWithin
  fullName: System.Windows.UIElement.AreAnyTouchesCapturedWithin
- uid: System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesCapturedWithinProperty
  nameWithType: UIElement.AreAnyTouchesCapturedWithinProperty
  fullName: System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty
- uid: System.Windows.UIElement.AreAnyTouchesDirectlyOver
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesDirectlyOver
  nameWithType: UIElement.AreAnyTouchesDirectlyOver
  fullName: System.Windows.UIElement.AreAnyTouchesDirectlyOver
- uid: System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesDirectlyOverProperty
  nameWithType: UIElement.AreAnyTouchesDirectlyOverProperty
  fullName: System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty
- uid: System.Windows.UIElement.AreAnyTouchesOver
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesOver
  nameWithType: UIElement.AreAnyTouchesOver
  fullName: System.Windows.UIElement.AreAnyTouchesOver
- uid: System.Windows.UIElement.AreAnyTouchesOverProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesOverProperty
  nameWithType: UIElement.AreAnyTouchesOverProperty
  fullName: System.Windows.UIElement.AreAnyTouchesOverProperty
- uid: System.Windows.UIElement.Arrange(System.Windows.Rect)
  parent: System.Windows.UIElement
  isExternal: false
  name: Arrange(Rect)
  nameWithType: UIElement.Arrange(Rect)
  fullName: System.Windows.UIElement.Arrange(Rect)
- uid: System.Windows.Rect
  parent: System.Windows
  isExternal: false
  name: Rect
  nameWithType: Rect
  fullName: System.Windows.Rect
- uid: System.Windows.UIElement.ArrangeCore(System.Windows.Rect)
  parent: System.Windows.UIElement
  isExternal: false
  name: ArrangeCore(Rect)
  nameWithType: UIElement.ArrangeCore(Rect)
  fullName: System.Windows.UIElement.ArrangeCore(Rect)
- uid: System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  parent: System.Windows.UIElement
  isExternal: false
  name: BeginAnimation(DependencyProperty,AnimationTimeline)
  nameWithType: UIElement.BeginAnimation(DependencyProperty,AnimationTimeline)
  fullName: System.Windows.UIElement.BeginAnimation(DependencyProperty,AnimationTimeline)
- uid: System.Windows.Media.Animation.AnimationTimeline
  parent: System.Windows.Media.Animation
  isExternal: false
  name: AnimationTimeline
  nameWithType: AnimationTimeline
  fullName: System.Windows.Media.Animation.AnimationTimeline
- uid: System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.UIElement
  isExternal: false
  name: BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  nameWithType: UIElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  fullName: System.Windows.UIElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
- uid: System.Windows.UIElement.BitmapEffect
  parent: System.Windows.UIElement
  isExternal: false
  name: BitmapEffect
  nameWithType: UIElement.BitmapEffect
  fullName: System.Windows.UIElement.BitmapEffect
- uid: System.Windows.Media.Effects.BitmapEffect
  parent: System.Windows.Media.Effects
  isExternal: false
  name: BitmapEffect
  nameWithType: BitmapEffect
  fullName: System.Windows.Media.Effects.BitmapEffect
- uid: System.Windows.UIElement.BitmapEffectInput
  parent: System.Windows.UIElement
  isExternal: false
  name: BitmapEffectInput
  nameWithType: UIElement.BitmapEffectInput
  fullName: System.Windows.UIElement.BitmapEffectInput
- uid: System.Windows.Media.Effects.BitmapEffectInput
  parent: System.Windows.Media.Effects
  isExternal: false
  name: BitmapEffectInput
  nameWithType: BitmapEffectInput
  fullName: System.Windows.Media.Effects.BitmapEffectInput
- uid: System.Windows.UIElement.BitmapEffectInputProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: BitmapEffectInputProperty
  nameWithType: UIElement.BitmapEffectInputProperty
  fullName: System.Windows.UIElement.BitmapEffectInputProperty
- uid: System.Windows.UIElement.BitmapEffectProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: BitmapEffectProperty
  nameWithType: UIElement.BitmapEffectProperty
  fullName: System.Windows.UIElement.BitmapEffectProperty
- uid: System.Windows.UIElement.CacheMode
  parent: System.Windows.UIElement
  isExternal: false
  name: CacheMode
  nameWithType: UIElement.CacheMode
  fullName: System.Windows.UIElement.CacheMode
- uid: System.Windows.Media.CacheMode
  parent: System.Windows.Media
  isExternal: false
  name: CacheMode
  nameWithType: CacheMode
  fullName: System.Windows.Media.CacheMode
- uid: System.Windows.UIElement.CacheModeProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: CacheModeProperty
  nameWithType: UIElement.CacheModeProperty
  fullName: System.Windows.UIElement.CacheModeProperty
- uid: System.Windows.UIElement.CaptureMouse
  parent: System.Windows.UIElement
  isExternal: false
  name: CaptureMouse()
  nameWithType: UIElement.CaptureMouse()
  fullName: System.Windows.UIElement.CaptureMouse()
- uid: System.Windows.UIElement.CaptureStylus
  parent: System.Windows.UIElement
  isExternal: false
  name: CaptureStylus()
  nameWithType: UIElement.CaptureStylus()
  fullName: System.Windows.UIElement.CaptureStylus()
- uid: System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)
  parent: System.Windows.UIElement
  isExternal: false
  name: CaptureTouch(TouchDevice)
  nameWithType: UIElement.CaptureTouch(TouchDevice)
  fullName: System.Windows.UIElement.CaptureTouch(TouchDevice)
- uid: System.Windows.Input.TouchDevice
  parent: System.Windows.Input
  isExternal: false
  name: TouchDevice
  nameWithType: TouchDevice
  fullName: System.Windows.Input.TouchDevice
- uid: System.Windows.UIElement.Clip
  parent: System.Windows.UIElement
  isExternal: false
  name: Clip
  nameWithType: UIElement.Clip
  fullName: System.Windows.UIElement.Clip
- uid: System.Windows.Media.Geometry
  parent: System.Windows.Media
  isExternal: false
  name: Geometry
  nameWithType: Geometry
  fullName: System.Windows.Media.Geometry
- uid: System.Windows.UIElement.ClipProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: ClipProperty
  nameWithType: UIElement.ClipProperty
  fullName: System.Windows.UIElement.ClipProperty
- uid: System.Windows.UIElement.ClipToBounds
  parent: System.Windows.UIElement
  isExternal: false
  name: ClipToBounds
  nameWithType: UIElement.ClipToBounds
  fullName: System.Windows.UIElement.ClipToBounds
- uid: System.Windows.UIElement.ClipToBoundsProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: ClipToBoundsProperty
  nameWithType: UIElement.ClipToBoundsProperty
  fullName: System.Windows.UIElement.ClipToBoundsProperty
- uid: System.Windows.UIElement.CommandBindings
  parent: System.Windows.UIElement
  isExternal: false
  name: CommandBindings
  nameWithType: UIElement.CommandBindings
  fullName: System.Windows.UIElement.CommandBindings
- uid: System.Windows.Input.CommandBindingCollection
  parent: System.Windows.Input
  isExternal: false
  name: CommandBindingCollection
  nameWithType: CommandBindingCollection
  fullName: System.Windows.Input.CommandBindingCollection
- uid: System.Windows.UIElement.DesiredSize
  parent: System.Windows.UIElement
  isExternal: false
  name: DesiredSize
  nameWithType: UIElement.DesiredSize
  fullName: System.Windows.UIElement.DesiredSize
- uid: System.Windows.Size
  parent: System.Windows
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: System.Windows.Size
- uid: System.Windows.UIElement.DragEnter
  parent: System.Windows.UIElement
  isExternal: false
  name: DragEnter
  nameWithType: UIElement.DragEnter
  fullName: System.Windows.UIElement.DragEnter
- uid: System.Windows.DragEventHandler
  parent: System.Windows
  isExternal: false
  name: DragEventHandler
  nameWithType: DragEventHandler
  fullName: System.Windows.DragEventHandler
- uid: System.Windows.UIElement.DragEnterEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: DragEnterEvent
  nameWithType: UIElement.DragEnterEvent
  fullName: System.Windows.UIElement.DragEnterEvent
- uid: System.Windows.UIElement.DragLeave
  parent: System.Windows.UIElement
  isExternal: false
  name: DragLeave
  nameWithType: UIElement.DragLeave
  fullName: System.Windows.UIElement.DragLeave
- uid: System.Windows.UIElement.DragLeaveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: DragLeaveEvent
  nameWithType: UIElement.DragLeaveEvent
  fullName: System.Windows.UIElement.DragLeaveEvent
- uid: System.Windows.UIElement.DragOver
  parent: System.Windows.UIElement
  isExternal: false
  name: DragOver
  nameWithType: UIElement.DragOver
  fullName: System.Windows.UIElement.DragOver
- uid: System.Windows.UIElement.DragOverEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: DragOverEvent
  nameWithType: UIElement.DragOverEvent
  fullName: System.Windows.UIElement.DragOverEvent
- uid: System.Windows.UIElement.Drop
  parent: System.Windows.UIElement
  isExternal: false
  name: Drop
  nameWithType: UIElement.Drop
  fullName: System.Windows.UIElement.Drop
- uid: System.Windows.UIElement.DropEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: DropEvent
  nameWithType: UIElement.DropEvent
  fullName: System.Windows.UIElement.DropEvent
- uid: System.Windows.UIElement.Effect
  parent: System.Windows.UIElement
  isExternal: false
  name: Effect
  nameWithType: UIElement.Effect
  fullName: System.Windows.UIElement.Effect
- uid: System.Windows.Media.Effects.Effect
  parent: System.Windows.Media.Effects
  isExternal: false
  name: Effect
  nameWithType: Effect
  fullName: System.Windows.Media.Effects.Effect
- uid: System.Windows.UIElement.EffectProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: EffectProperty
  nameWithType: UIElement.EffectProperty
  fullName: System.Windows.UIElement.EffectProperty
- uid: System.Windows.UIElement.Focus
  parent: System.Windows.UIElement
  isExternal: false
  name: Focus()
  nameWithType: UIElement.Focus()
  fullName: System.Windows.UIElement.Focus()
- uid: System.Windows.UIElement.Focusable
  parent: System.Windows.UIElement
  isExternal: false
  name: Focusable
  nameWithType: UIElement.Focusable
  fullName: System.Windows.UIElement.Focusable
- uid: System.Windows.UIElement.FocusableChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: FocusableChanged
  nameWithType: UIElement.FocusableChanged
  fullName: System.Windows.UIElement.FocusableChanged
- uid: System.Windows.DependencyPropertyChangedEventHandler
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventHandler
  nameWithType: DependencyPropertyChangedEventHandler
  fullName: System.Windows.DependencyPropertyChangedEventHandler
- uid: System.Windows.UIElement.FocusableProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: FocusableProperty
  nameWithType: UIElement.FocusableProperty
  fullName: System.Windows.UIElement.FocusableProperty
- uid: System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  parent: System.Windows.UIElement
  isExternal: false
  name: GetAnimationBaseValue(DependencyProperty)
  nameWithType: UIElement.GetAnimationBaseValue(DependencyProperty)
  fullName: System.Windows.UIElement.GetAnimationBaseValue(DependencyProperty)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.UIElement.GetLayoutClip(System.Windows.Size)
  parent: System.Windows.UIElement
  isExternal: false
  name: GetLayoutClip(Size)
  nameWithType: UIElement.GetLayoutClip(Size)
  fullName: System.Windows.UIElement.GetLayoutClip(Size)
- uid: System.Windows.UIElement.GetUIParentCore
  parent: System.Windows.UIElement
  isExternal: false
  name: GetUIParentCore()
  nameWithType: UIElement.GetUIParentCore()
  fullName: System.Windows.UIElement.GetUIParentCore()
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.UIElement.GiveFeedback
  parent: System.Windows.UIElement
  isExternal: false
  name: GiveFeedback
  nameWithType: UIElement.GiveFeedback
  fullName: System.Windows.UIElement.GiveFeedback
- uid: System.Windows.GiveFeedbackEventHandler
  parent: System.Windows
  isExternal: false
  name: GiveFeedbackEventHandler
  nameWithType: GiveFeedbackEventHandler
  fullName: System.Windows.GiveFeedbackEventHandler
- uid: System.Windows.UIElement.GiveFeedbackEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: GiveFeedbackEvent
  nameWithType: UIElement.GiveFeedbackEvent
  fullName: System.Windows.UIElement.GiveFeedbackEvent
- uid: System.Windows.UIElement.GotFocus
  parent: System.Windows.UIElement
  isExternal: false
  name: GotFocus
  nameWithType: UIElement.GotFocus
  fullName: System.Windows.UIElement.GotFocus
- uid: System.Windows.RoutedEventHandler
  parent: System.Windows
  isExternal: false
  name: RoutedEventHandler
  nameWithType: RoutedEventHandler
  fullName: System.Windows.RoutedEventHandler
- uid: System.Windows.UIElement.GotFocusEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: GotFocusEvent
  nameWithType: UIElement.GotFocusEvent
  fullName: System.Windows.UIElement.GotFocusEvent
- uid: System.Windows.UIElement.GotKeyboardFocus
  parent: System.Windows.UIElement
  isExternal: false
  name: GotKeyboardFocus
  nameWithType: UIElement.GotKeyboardFocus
  fullName: System.Windows.UIElement.GotKeyboardFocus
- uid: System.Windows.Input.KeyboardFocusChangedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: KeyboardFocusChangedEventHandler
  nameWithType: KeyboardFocusChangedEventHandler
  fullName: System.Windows.Input.KeyboardFocusChangedEventHandler
- uid: System.Windows.UIElement.GotKeyboardFocusEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: GotKeyboardFocusEvent
  nameWithType: UIElement.GotKeyboardFocusEvent
  fullName: System.Windows.UIElement.GotKeyboardFocusEvent
- uid: System.Windows.UIElement.GotMouseCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: GotMouseCapture
  nameWithType: UIElement.GotMouseCapture
  fullName: System.Windows.UIElement.GotMouseCapture
- uid: System.Windows.Input.MouseEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseEventHandler
  nameWithType: MouseEventHandler
  fullName: System.Windows.Input.MouseEventHandler
- uid: System.Windows.UIElement.GotMouseCaptureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: GotMouseCaptureEvent
  nameWithType: UIElement.GotMouseCaptureEvent
  fullName: System.Windows.UIElement.GotMouseCaptureEvent
- uid: System.Windows.UIElement.GotStylusCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: GotStylusCapture
  nameWithType: UIElement.GotStylusCapture
  fullName: System.Windows.UIElement.GotStylusCapture
- uid: System.Windows.Input.StylusEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusEventHandler
  nameWithType: StylusEventHandler
  fullName: System.Windows.Input.StylusEventHandler
- uid: System.Windows.UIElement.GotStylusCaptureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: GotStylusCaptureEvent
  nameWithType: UIElement.GotStylusCaptureEvent
  fullName: System.Windows.UIElement.GotStylusCaptureEvent
- uid: System.Windows.UIElement.GotTouchCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: GotTouchCapture
  nameWithType: UIElement.GotTouchCapture
  fullName: System.Windows.UIElement.GotTouchCapture
- uid: System.EventHandler{System.Windows.Input.TouchEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<TouchEventArgs>
  nameWithType: EventHandler<TouchEventArgs>
  fullName: System.EventHandler<System.Windows.Input.TouchEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.TouchEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.TouchEventArgs
    name: TouchEventArgs
    nameWithType: TouchEventArgs
    fullName: TouchEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.GotTouchCaptureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: GotTouchCaptureEvent
  nameWithType: UIElement.GotTouchCaptureEvent
  fullName: System.Windows.UIElement.GotTouchCaptureEvent
- uid: System.Windows.UIElement.HasAnimatedProperties
  parent: System.Windows.UIElement
  isExternal: false
  name: HasAnimatedProperties
  nameWithType: UIElement.HasAnimatedProperties
  fullName: System.Windows.UIElement.HasAnimatedProperties
- uid: System.Windows.UIElement.HasEffectiveKeyboardFocus
  parent: System.Windows.UIElement
  isExternal: false
  name: HasEffectiveKeyboardFocus
  nameWithType: UIElement.HasEffectiveKeyboardFocus
  fullName: System.Windows.UIElement.HasEffectiveKeyboardFocus
- uid: System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)
  parent: System.Windows.UIElement
  isExternal: false
  name: HitTestCore(GeometryHitTestParameters)
  nameWithType: UIElement.HitTestCore(GeometryHitTestParameters)
  fullName: System.Windows.UIElement.HitTestCore(GeometryHitTestParameters)
- uid: System.Windows.Media.GeometryHitTestResult
  parent: System.Windows.Media
  isExternal: false
  name: GeometryHitTestResult
  nameWithType: GeometryHitTestResult
  fullName: System.Windows.Media.GeometryHitTestResult
- uid: System.Windows.Media.GeometryHitTestParameters
  parent: System.Windows.Media
  isExternal: false
  name: GeometryHitTestParameters
  nameWithType: GeometryHitTestParameters
  fullName: System.Windows.Media.GeometryHitTestParameters
- uid: System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)
  parent: System.Windows.UIElement
  isExternal: false
  name: HitTestCore(PointHitTestParameters)
  nameWithType: UIElement.HitTestCore(PointHitTestParameters)
  fullName: System.Windows.UIElement.HitTestCore(PointHitTestParameters)
- uid: System.Windows.Media.HitTestResult
  parent: System.Windows.Media
  isExternal: false
  name: HitTestResult
  nameWithType: HitTestResult
  fullName: System.Windows.Media.HitTestResult
- uid: System.Windows.Media.PointHitTestParameters
  parent: System.Windows.Media
  isExternal: false
  name: PointHitTestParameters
  nameWithType: PointHitTestParameters
  fullName: System.Windows.Media.PointHitTestParameters
- uid: System.Windows.UIElement.InputBindings
  parent: System.Windows.UIElement
  isExternal: false
  name: InputBindings
  nameWithType: UIElement.InputBindings
  fullName: System.Windows.UIElement.InputBindings
- uid: System.Windows.Input.InputBindingCollection
  parent: System.Windows.Input
  isExternal: false
  name: InputBindingCollection
  nameWithType: InputBindingCollection
  fullName: System.Windows.Input.InputBindingCollection
- uid: System.Windows.UIElement.InputHitTest(System.Windows.Point)
  parent: System.Windows.UIElement
  isExternal: false
  name: InputHitTest(Point)
  nameWithType: UIElement.InputHitTest(Point)
  fullName: System.Windows.UIElement.InputHitTest(Point)
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Point
  parent: System.Windows
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Windows.Point
- uid: System.Windows.UIElement.InvalidateArrange
  parent: System.Windows.UIElement
  isExternal: false
  name: InvalidateArrange()
  nameWithType: UIElement.InvalidateArrange()
  fullName: System.Windows.UIElement.InvalidateArrange()
- uid: System.Windows.UIElement.InvalidateMeasure
  parent: System.Windows.UIElement
  isExternal: false
  name: InvalidateMeasure()
  nameWithType: UIElement.InvalidateMeasure()
  fullName: System.Windows.UIElement.InvalidateMeasure()
- uid: System.Windows.UIElement.InvalidateVisual
  parent: System.Windows.UIElement
  isExternal: false
  name: InvalidateVisual()
  nameWithType: UIElement.InvalidateVisual()
  fullName: System.Windows.UIElement.InvalidateVisual()
- uid: System.Windows.UIElement.IsArrangeValid
  parent: System.Windows.UIElement
  isExternal: false
  name: IsArrangeValid
  nameWithType: UIElement.IsArrangeValid
  fullName: System.Windows.UIElement.IsArrangeValid
- uid: System.Windows.UIElement.IsEnabled
  parent: System.Windows.UIElement
  isExternal: false
  name: IsEnabled
  nameWithType: UIElement.IsEnabled
  fullName: System.Windows.UIElement.IsEnabled
- uid: System.Windows.UIElement.IsEnabledChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsEnabledChanged
  nameWithType: UIElement.IsEnabledChanged
  fullName: System.Windows.UIElement.IsEnabledChanged
- uid: System.Windows.UIElement.IsEnabledCore
  parent: System.Windows.UIElement
  isExternal: false
  name: IsEnabledCore
  nameWithType: UIElement.IsEnabledCore
  fullName: System.Windows.UIElement.IsEnabledCore
- uid: System.Windows.UIElement.IsEnabledProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsEnabledProperty
  nameWithType: UIElement.IsEnabledProperty
  fullName: System.Windows.UIElement.IsEnabledProperty
- uid: System.Windows.UIElement.IsFocused
  parent: System.Windows.UIElement
  isExternal: false
  name: IsFocused
  nameWithType: UIElement.IsFocused
  fullName: System.Windows.UIElement.IsFocused
- uid: System.Windows.UIElement.IsFocusedProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsFocusedProperty
  nameWithType: UIElement.IsFocusedProperty
  fullName: System.Windows.UIElement.IsFocusedProperty
- uid: System.Windows.UIElement.IsHitTestVisible
  parent: System.Windows.UIElement
  isExternal: false
  name: IsHitTestVisible
  nameWithType: UIElement.IsHitTestVisible
  fullName: System.Windows.UIElement.IsHitTestVisible
- uid: System.Windows.UIElement.IsHitTestVisibleChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsHitTestVisibleChanged
  nameWithType: UIElement.IsHitTestVisibleChanged
  fullName: System.Windows.UIElement.IsHitTestVisibleChanged
- uid: System.Windows.UIElement.IsHitTestVisibleProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsHitTestVisibleProperty
  nameWithType: UIElement.IsHitTestVisibleProperty
  fullName: System.Windows.UIElement.IsHitTestVisibleProperty
- uid: System.Windows.UIElement.IsInputMethodEnabled
  parent: System.Windows.UIElement
  isExternal: false
  name: IsInputMethodEnabled
  nameWithType: UIElement.IsInputMethodEnabled
  fullName: System.Windows.UIElement.IsInputMethodEnabled
- uid: System.Windows.UIElement.IsKeyboardFocused
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocused
  nameWithType: UIElement.IsKeyboardFocused
  fullName: System.Windows.UIElement.IsKeyboardFocused
- uid: System.Windows.UIElement.IsKeyboardFocusedChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocusedChanged
  nameWithType: UIElement.IsKeyboardFocusedChanged
  fullName: System.Windows.UIElement.IsKeyboardFocusedChanged
- uid: System.Windows.UIElement.IsKeyboardFocusedProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocusedProperty
  nameWithType: UIElement.IsKeyboardFocusedProperty
  fullName: System.Windows.UIElement.IsKeyboardFocusedProperty
- uid: System.Windows.UIElement.IsKeyboardFocusWithin
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocusWithin
  nameWithType: UIElement.IsKeyboardFocusWithin
  fullName: System.Windows.UIElement.IsKeyboardFocusWithin
- uid: System.Windows.UIElement.IsKeyboardFocusWithinChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocusWithinChanged
  nameWithType: UIElement.IsKeyboardFocusWithinChanged
  fullName: System.Windows.UIElement.IsKeyboardFocusWithinChanged
- uid: System.Windows.UIElement.IsKeyboardFocusWithinProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocusWithinProperty
  nameWithType: UIElement.IsKeyboardFocusWithinProperty
  fullName: System.Windows.UIElement.IsKeyboardFocusWithinProperty
- uid: System.Windows.UIElement.IsManipulationEnabled
  parent: System.Windows.UIElement
  isExternal: false
  name: IsManipulationEnabled
  nameWithType: UIElement.IsManipulationEnabled
  fullName: System.Windows.UIElement.IsManipulationEnabled
- uid: System.Windows.UIElement.IsManipulationEnabledProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsManipulationEnabledProperty
  nameWithType: UIElement.IsManipulationEnabledProperty
  fullName: System.Windows.UIElement.IsManipulationEnabledProperty
- uid: System.Windows.UIElement.IsMeasureValid
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMeasureValid
  nameWithType: UIElement.IsMeasureValid
  fullName: System.Windows.UIElement.IsMeasureValid
- uid: System.Windows.UIElement.IsMouseCaptured
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCaptured
  nameWithType: UIElement.IsMouseCaptured
  fullName: System.Windows.UIElement.IsMouseCaptured
- uid: System.Windows.UIElement.IsMouseCapturedChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCapturedChanged
  nameWithType: UIElement.IsMouseCapturedChanged
  fullName: System.Windows.UIElement.IsMouseCapturedChanged
- uid: System.Windows.UIElement.IsMouseCapturedProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCapturedProperty
  nameWithType: UIElement.IsMouseCapturedProperty
  fullName: System.Windows.UIElement.IsMouseCapturedProperty
- uid: System.Windows.UIElement.IsMouseCaptureWithin
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCaptureWithin
  nameWithType: UIElement.IsMouseCaptureWithin
  fullName: System.Windows.UIElement.IsMouseCaptureWithin
- uid: System.Windows.UIElement.IsMouseCaptureWithinChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCaptureWithinChanged
  nameWithType: UIElement.IsMouseCaptureWithinChanged
  fullName: System.Windows.UIElement.IsMouseCaptureWithinChanged
- uid: System.Windows.UIElement.IsMouseCaptureWithinProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCaptureWithinProperty
  nameWithType: UIElement.IsMouseCaptureWithinProperty
  fullName: System.Windows.UIElement.IsMouseCaptureWithinProperty
- uid: System.Windows.UIElement.IsMouseDirectlyOver
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseDirectlyOver
  nameWithType: UIElement.IsMouseDirectlyOver
  fullName: System.Windows.UIElement.IsMouseDirectlyOver
- uid: System.Windows.UIElement.IsMouseDirectlyOverChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseDirectlyOverChanged
  nameWithType: UIElement.IsMouseDirectlyOverChanged
  fullName: System.Windows.UIElement.IsMouseDirectlyOverChanged
- uid: System.Windows.UIElement.IsMouseDirectlyOverProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseDirectlyOverProperty
  nameWithType: UIElement.IsMouseDirectlyOverProperty
  fullName: System.Windows.UIElement.IsMouseDirectlyOverProperty
- uid: System.Windows.UIElement.IsMouseOver
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseOver
  nameWithType: UIElement.IsMouseOver
  fullName: System.Windows.UIElement.IsMouseOver
- uid: System.Windows.UIElement.IsMouseOverProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseOverProperty
  nameWithType: UIElement.IsMouseOverProperty
  fullName: System.Windows.UIElement.IsMouseOverProperty
- uid: System.Windows.UIElement.IsStylusCaptured
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCaptured
  nameWithType: UIElement.IsStylusCaptured
  fullName: System.Windows.UIElement.IsStylusCaptured
- uid: System.Windows.UIElement.IsStylusCapturedChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCapturedChanged
  nameWithType: UIElement.IsStylusCapturedChanged
  fullName: System.Windows.UIElement.IsStylusCapturedChanged
- uid: System.Windows.UIElement.IsStylusCapturedProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCapturedProperty
  nameWithType: UIElement.IsStylusCapturedProperty
  fullName: System.Windows.UIElement.IsStylusCapturedProperty
- uid: System.Windows.UIElement.IsStylusCaptureWithin
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCaptureWithin
  nameWithType: UIElement.IsStylusCaptureWithin
  fullName: System.Windows.UIElement.IsStylusCaptureWithin
- uid: System.Windows.UIElement.IsStylusCaptureWithinChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCaptureWithinChanged
  nameWithType: UIElement.IsStylusCaptureWithinChanged
  fullName: System.Windows.UIElement.IsStylusCaptureWithinChanged
- uid: System.Windows.UIElement.IsStylusCaptureWithinProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCaptureWithinProperty
  nameWithType: UIElement.IsStylusCaptureWithinProperty
  fullName: System.Windows.UIElement.IsStylusCaptureWithinProperty
- uid: System.Windows.UIElement.IsStylusDirectlyOver
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusDirectlyOver
  nameWithType: UIElement.IsStylusDirectlyOver
  fullName: System.Windows.UIElement.IsStylusDirectlyOver
- uid: System.Windows.UIElement.IsStylusDirectlyOverChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusDirectlyOverChanged
  nameWithType: UIElement.IsStylusDirectlyOverChanged
  fullName: System.Windows.UIElement.IsStylusDirectlyOverChanged
- uid: System.Windows.UIElement.IsStylusDirectlyOverProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusDirectlyOverProperty
  nameWithType: UIElement.IsStylusDirectlyOverProperty
  fullName: System.Windows.UIElement.IsStylusDirectlyOverProperty
- uid: System.Windows.UIElement.IsStylusOver
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusOver
  nameWithType: UIElement.IsStylusOver
  fullName: System.Windows.UIElement.IsStylusOver
- uid: System.Windows.UIElement.IsStylusOverProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusOverProperty
  nameWithType: UIElement.IsStylusOverProperty
  fullName: System.Windows.UIElement.IsStylusOverProperty
- uid: System.Windows.UIElement.IsVisible
  parent: System.Windows.UIElement
  isExternal: false
  name: IsVisible
  nameWithType: UIElement.IsVisible
  fullName: System.Windows.UIElement.IsVisible
- uid: System.Windows.UIElement.IsVisibleChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsVisibleChanged
  nameWithType: UIElement.IsVisibleChanged
  fullName: System.Windows.UIElement.IsVisibleChanged
- uid: System.Windows.UIElement.IsVisibleProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsVisibleProperty
  nameWithType: UIElement.IsVisibleProperty
  fullName: System.Windows.UIElement.IsVisibleProperty
- uid: System.Windows.UIElement.KeyDown
  parent: System.Windows.UIElement
  isExternal: false
  name: KeyDown
  nameWithType: UIElement.KeyDown
  fullName: System.Windows.UIElement.KeyDown
- uid: System.Windows.Input.KeyEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: KeyEventHandler
  nameWithType: KeyEventHandler
  fullName: System.Windows.Input.KeyEventHandler
- uid: System.Windows.UIElement.KeyDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: KeyDownEvent
  nameWithType: UIElement.KeyDownEvent
  fullName: System.Windows.UIElement.KeyDownEvent
- uid: System.Windows.UIElement.KeyUp
  parent: System.Windows.UIElement
  isExternal: false
  name: KeyUp
  nameWithType: UIElement.KeyUp
  fullName: System.Windows.UIElement.KeyUp
- uid: System.Windows.UIElement.KeyUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: KeyUpEvent
  nameWithType: UIElement.KeyUpEvent
  fullName: System.Windows.UIElement.KeyUpEvent
- uid: System.Windows.UIElement.LayoutUpdated
  parent: System.Windows.UIElement
  isExternal: false
  name: LayoutUpdated
  nameWithType: UIElement.LayoutUpdated
  fullName: System.Windows.UIElement.LayoutUpdated
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.UIElement.LostFocus
  parent: System.Windows.UIElement
  isExternal: false
  name: LostFocus
  nameWithType: UIElement.LostFocus
  fullName: System.Windows.UIElement.LostFocus
- uid: System.Windows.UIElement.LostFocusEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: LostFocusEvent
  nameWithType: UIElement.LostFocusEvent
  fullName: System.Windows.UIElement.LostFocusEvent
- uid: System.Windows.UIElement.LostKeyboardFocus
  parent: System.Windows.UIElement
  isExternal: false
  name: LostKeyboardFocus
  nameWithType: UIElement.LostKeyboardFocus
  fullName: System.Windows.UIElement.LostKeyboardFocus
- uid: System.Windows.UIElement.LostKeyboardFocusEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: LostKeyboardFocusEvent
  nameWithType: UIElement.LostKeyboardFocusEvent
  fullName: System.Windows.UIElement.LostKeyboardFocusEvent
- uid: System.Windows.UIElement.LostMouseCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: LostMouseCapture
  nameWithType: UIElement.LostMouseCapture
  fullName: System.Windows.UIElement.LostMouseCapture
- uid: System.Windows.UIElement.LostMouseCaptureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: LostMouseCaptureEvent
  nameWithType: UIElement.LostMouseCaptureEvent
  fullName: System.Windows.UIElement.LostMouseCaptureEvent
- uid: System.Windows.UIElement.LostStylusCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: LostStylusCapture
  nameWithType: UIElement.LostStylusCapture
  fullName: System.Windows.UIElement.LostStylusCapture
- uid: System.Windows.UIElement.LostStylusCaptureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: LostStylusCaptureEvent
  nameWithType: UIElement.LostStylusCaptureEvent
  fullName: System.Windows.UIElement.LostStylusCaptureEvent
- uid: System.Windows.UIElement.LostTouchCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: LostTouchCapture
  nameWithType: UIElement.LostTouchCapture
  fullName: System.Windows.UIElement.LostTouchCapture
- uid: System.Windows.UIElement.LostTouchCaptureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: LostTouchCaptureEvent
  nameWithType: UIElement.LostTouchCaptureEvent
  fullName: System.Windows.UIElement.LostTouchCaptureEvent
- uid: System.Windows.UIElement.ManipulationBoundaryFeedback
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationBoundaryFeedback
  nameWithType: UIElement.ManipulationBoundaryFeedback
  fullName: System.Windows.UIElement.ManipulationBoundaryFeedback
- uid: System.EventHandler{System.Windows.Input.ManipulationBoundaryFeedbackEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<ManipulationBoundaryFeedbackEventArgs>
  nameWithType: EventHandler<ManipulationBoundaryFeedbackEventArgs>
  fullName: System.EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
    name: ManipulationBoundaryFeedbackEventArgs
    nameWithType: ManipulationBoundaryFeedbackEventArgs
    fullName: ManipulationBoundaryFeedbackEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.ManipulationBoundaryFeedbackEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationBoundaryFeedbackEvent
  nameWithType: UIElement.ManipulationBoundaryFeedbackEvent
  fullName: System.Windows.UIElement.ManipulationBoundaryFeedbackEvent
- uid: System.Windows.UIElement.ManipulationCompleted
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationCompleted
  nameWithType: UIElement.ManipulationCompleted
  fullName: System.Windows.UIElement.ManipulationCompleted
- uid: System.EventHandler{System.Windows.Input.ManipulationCompletedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<ManipulationCompletedEventArgs>
  nameWithType: EventHandler<ManipulationCompletedEventArgs>
  fullName: System.EventHandler<System.Windows.Input.ManipulationCompletedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.ManipulationCompletedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.ManipulationCompletedEventArgs
    name: ManipulationCompletedEventArgs
    nameWithType: ManipulationCompletedEventArgs
    fullName: ManipulationCompletedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.ManipulationCompletedEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationCompletedEvent
  nameWithType: UIElement.ManipulationCompletedEvent
  fullName: System.Windows.UIElement.ManipulationCompletedEvent
- uid: System.Windows.UIElement.ManipulationDelta
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationDelta
  nameWithType: UIElement.ManipulationDelta
  fullName: System.Windows.UIElement.ManipulationDelta
- uid: System.EventHandler{System.Windows.Input.ManipulationDeltaEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<ManipulationDeltaEventArgs>
  nameWithType: EventHandler<ManipulationDeltaEventArgs>
  fullName: System.EventHandler<System.Windows.Input.ManipulationDeltaEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.ManipulationDeltaEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.ManipulationDeltaEventArgs
    name: ManipulationDeltaEventArgs
    nameWithType: ManipulationDeltaEventArgs
    fullName: ManipulationDeltaEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.ManipulationDeltaEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationDeltaEvent
  nameWithType: UIElement.ManipulationDeltaEvent
  fullName: System.Windows.UIElement.ManipulationDeltaEvent
- uid: System.Windows.UIElement.ManipulationInertiaStarting
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationInertiaStarting
  nameWithType: UIElement.ManipulationInertiaStarting
  fullName: System.Windows.UIElement.ManipulationInertiaStarting
- uid: System.EventHandler{System.Windows.Input.ManipulationInertiaStartingEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<ManipulationInertiaStartingEventArgs>
  nameWithType: EventHandler<ManipulationInertiaStartingEventArgs>
  fullName: System.EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.ManipulationInertiaStartingEventArgs
    name: ManipulationInertiaStartingEventArgs
    nameWithType: ManipulationInertiaStartingEventArgs
    fullName: ManipulationInertiaStartingEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.ManipulationInertiaStartingEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationInertiaStartingEvent
  nameWithType: UIElement.ManipulationInertiaStartingEvent
  fullName: System.Windows.UIElement.ManipulationInertiaStartingEvent
- uid: System.Windows.UIElement.ManipulationStarted
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationStarted
  nameWithType: UIElement.ManipulationStarted
  fullName: System.Windows.UIElement.ManipulationStarted
- uid: System.EventHandler{System.Windows.Input.ManipulationStartedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<ManipulationStartedEventArgs>
  nameWithType: EventHandler<ManipulationStartedEventArgs>
  fullName: System.EventHandler<System.Windows.Input.ManipulationStartedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.ManipulationStartedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.ManipulationStartedEventArgs
    name: ManipulationStartedEventArgs
    nameWithType: ManipulationStartedEventArgs
    fullName: ManipulationStartedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.ManipulationStartedEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationStartedEvent
  nameWithType: UIElement.ManipulationStartedEvent
  fullName: System.Windows.UIElement.ManipulationStartedEvent
- uid: System.Windows.UIElement.ManipulationStarting
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationStarting
  nameWithType: UIElement.ManipulationStarting
  fullName: System.Windows.UIElement.ManipulationStarting
- uid: System.EventHandler{System.Windows.Input.ManipulationStartingEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<ManipulationStartingEventArgs>
  nameWithType: EventHandler<ManipulationStartingEventArgs>
  fullName: System.EventHandler<System.Windows.Input.ManipulationStartingEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.ManipulationStartingEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.ManipulationStartingEventArgs
    name: ManipulationStartingEventArgs
    nameWithType: ManipulationStartingEventArgs
    fullName: ManipulationStartingEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.ManipulationStartingEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationStartingEvent
  nameWithType: UIElement.ManipulationStartingEvent
  fullName: System.Windows.UIElement.ManipulationStartingEvent
- uid: System.Windows.UIElement.Measure(System.Windows.Size)
  parent: System.Windows.UIElement
  isExternal: false
  name: Measure(Size)
  nameWithType: UIElement.Measure(Size)
  fullName: System.Windows.UIElement.Measure(Size)
- uid: System.Windows.UIElement.MeasureCore(System.Windows.Size)
  parent: System.Windows.UIElement
  isExternal: false
  name: MeasureCore(Size)
  nameWithType: UIElement.MeasureCore(Size)
  fullName: System.Windows.UIElement.MeasureCore(Size)
- uid: System.Windows.UIElement.MouseDown
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseDown
  nameWithType: UIElement.MouseDown
  fullName: System.Windows.UIElement.MouseDown
- uid: System.Windows.Input.MouseButtonEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseButtonEventHandler
  nameWithType: MouseButtonEventHandler
  fullName: System.Windows.Input.MouseButtonEventHandler
- uid: System.Windows.UIElement.MouseDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseDownEvent
  nameWithType: UIElement.MouseDownEvent
  fullName: System.Windows.UIElement.MouseDownEvent
- uid: System.Windows.UIElement.MouseEnter
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseEnter
  nameWithType: UIElement.MouseEnter
  fullName: System.Windows.UIElement.MouseEnter
- uid: System.Windows.UIElement.MouseEnterEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseEnterEvent
  nameWithType: UIElement.MouseEnterEvent
  fullName: System.Windows.UIElement.MouseEnterEvent
- uid: System.Windows.UIElement.MouseLeave
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseLeave
  nameWithType: UIElement.MouseLeave
  fullName: System.Windows.UIElement.MouseLeave
- uid: System.Windows.UIElement.MouseLeaveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseLeaveEvent
  nameWithType: UIElement.MouseLeaveEvent
  fullName: System.Windows.UIElement.MouseLeaveEvent
- uid: System.Windows.UIElement.MouseLeftButtonDown
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseLeftButtonDown
  nameWithType: UIElement.MouseLeftButtonDown
  fullName: System.Windows.UIElement.MouseLeftButtonDown
- uid: System.Windows.UIElement.MouseLeftButtonDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseLeftButtonDownEvent
  nameWithType: UIElement.MouseLeftButtonDownEvent
  fullName: System.Windows.UIElement.MouseLeftButtonDownEvent
- uid: System.Windows.UIElement.MouseLeftButtonUp
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseLeftButtonUp
  nameWithType: UIElement.MouseLeftButtonUp
  fullName: System.Windows.UIElement.MouseLeftButtonUp
- uid: System.Windows.UIElement.MouseLeftButtonUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseLeftButtonUpEvent
  nameWithType: UIElement.MouseLeftButtonUpEvent
  fullName: System.Windows.UIElement.MouseLeftButtonUpEvent
- uid: System.Windows.UIElement.MouseMove
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseMove
  nameWithType: UIElement.MouseMove
  fullName: System.Windows.UIElement.MouseMove
- uid: System.Windows.UIElement.MouseMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseMoveEvent
  nameWithType: UIElement.MouseMoveEvent
  fullName: System.Windows.UIElement.MouseMoveEvent
- uid: System.Windows.UIElement.MouseRightButtonDown
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseRightButtonDown
  nameWithType: UIElement.MouseRightButtonDown
  fullName: System.Windows.UIElement.MouseRightButtonDown
- uid: System.Windows.UIElement.MouseRightButtonDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseRightButtonDownEvent
  nameWithType: UIElement.MouseRightButtonDownEvent
  fullName: System.Windows.UIElement.MouseRightButtonDownEvent
- uid: System.Windows.UIElement.MouseRightButtonUp
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseRightButtonUp
  nameWithType: UIElement.MouseRightButtonUp
  fullName: System.Windows.UIElement.MouseRightButtonUp
- uid: System.Windows.UIElement.MouseRightButtonUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseRightButtonUpEvent
  nameWithType: UIElement.MouseRightButtonUpEvent
  fullName: System.Windows.UIElement.MouseRightButtonUpEvent
- uid: System.Windows.UIElement.MouseUp
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseUp
  nameWithType: UIElement.MouseUp
  fullName: System.Windows.UIElement.MouseUp
- uid: System.Windows.UIElement.MouseUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseUpEvent
  nameWithType: UIElement.MouseUpEvent
  fullName: System.Windows.UIElement.MouseUpEvent
- uid: System.Windows.UIElement.MouseWheel
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseWheel
  nameWithType: UIElement.MouseWheel
  fullName: System.Windows.UIElement.MouseWheel
- uid: System.Windows.Input.MouseWheelEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseWheelEventHandler
  nameWithType: MouseWheelEventHandler
  fullName: System.Windows.Input.MouseWheelEventHandler
- uid: System.Windows.UIElement.MouseWheelEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseWheelEvent
  nameWithType: UIElement.MouseWheelEvent
  fullName: System.Windows.UIElement.MouseWheelEvent
- uid: System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)
  parent: System.Windows.UIElement
  isExternal: false
  name: MoveFocus(TraversalRequest)
  nameWithType: UIElement.MoveFocus(TraversalRequest)
  fullName: System.Windows.UIElement.MoveFocus(TraversalRequest)
- uid: System.Windows.Input.TraversalRequest
  parent: System.Windows.Input
  isExternal: false
  name: TraversalRequest
  nameWithType: TraversalRequest
  fullName: System.Windows.Input.TraversalRequest
- uid: System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnAccessKey(AccessKeyEventArgs)
  nameWithType: UIElement.OnAccessKey(AccessKeyEventArgs)
  fullName: System.Windows.UIElement.OnAccessKey(AccessKeyEventArgs)
- uid: System.Windows.Input.AccessKeyEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: AccessKeyEventArgs
  nameWithType: AccessKeyEventArgs
  fullName: System.Windows.Input.AccessKeyEventArgs
- uid: System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnChildDesiredSizeChanged(UIElement)
  nameWithType: UIElement.OnChildDesiredSizeChanged(UIElement)
  fullName: System.Windows.UIElement.OnChildDesiredSizeChanged(UIElement)
- uid: System.Windows.UIElement
  parent: System.Windows
  isExternal: false
  name: UIElement
  nameWithType: UIElement
  fullName: System.Windows.UIElement
- uid: System.Windows.UIElement.OnCreateAutomationPeer
  parent: System.Windows.UIElement
  isExternal: false
  name: OnCreateAutomationPeer()
  nameWithType: UIElement.OnCreateAutomationPeer()
  fullName: System.Windows.UIElement.OnCreateAutomationPeer()
- uid: System.Windows.Automation.Peers.AutomationPeer
  parent: System.Windows.Automation.Peers
  isExternal: false
  name: AutomationPeer
  nameWithType: AutomationPeer
  fullName: System.Windows.Automation.Peers.AutomationPeer
- uid: System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDragEnter(DragEventArgs)
  nameWithType: UIElement.OnDragEnter(DragEventArgs)
  fullName: System.Windows.UIElement.OnDragEnter(DragEventArgs)
- uid: System.Windows.DragEventArgs
  parent: System.Windows
  isExternal: false
  name: DragEventArgs
  nameWithType: DragEventArgs
  fullName: System.Windows.DragEventArgs
- uid: System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDragLeave(DragEventArgs)
  nameWithType: UIElement.OnDragLeave(DragEventArgs)
  fullName: System.Windows.UIElement.OnDragLeave(DragEventArgs)
- uid: System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDragOver(DragEventArgs)
  nameWithType: UIElement.OnDragOver(DragEventArgs)
  fullName: System.Windows.UIElement.OnDragOver(DragEventArgs)
- uid: System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDrop(DragEventArgs)
  nameWithType: UIElement.OnDrop(DragEventArgs)
  fullName: System.Windows.UIElement.OnDrop(DragEventArgs)
- uid: System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: UIElement.OnGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.UIElement.OnGiveFeedback(GiveFeedbackEventArgs)
- uid: System.Windows.GiveFeedbackEventArgs
  parent: System.Windows
  isExternal: false
  name: GiveFeedbackEventArgs
  nameWithType: GiveFeedbackEventArgs
  fullName: System.Windows.GiveFeedbackEventArgs
- uid: System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotFocus(RoutedEventArgs)
  nameWithType: UIElement.OnGotFocus(RoutedEventArgs)
  fullName: System.Windows.UIElement.OnGotFocus(RoutedEventArgs)
- uid: System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.Input.KeyboardFocusChangedEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: KeyboardFocusChangedEventArgs
  nameWithType: KeyboardFocusChangedEventArgs
  fullName: System.Windows.Input.KeyboardFocusChangedEventArgs
- uid: System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotMouseCapture(MouseEventArgs)
  nameWithType: UIElement.OnGotMouseCapture(MouseEventArgs)
  fullName: System.Windows.UIElement.OnGotMouseCapture(MouseEventArgs)
- uid: System.Windows.Input.MouseEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseEventArgs
  nameWithType: MouseEventArgs
  fullName: System.Windows.Input.MouseEventArgs
- uid: System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotStylusCapture(StylusEventArgs)
  nameWithType: UIElement.OnGotStylusCapture(StylusEventArgs)
  fullName: System.Windows.UIElement.OnGotStylusCapture(StylusEventArgs)
- uid: System.Windows.Input.StylusEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusEventArgs
  nameWithType: StylusEventArgs
  fullName: System.Windows.Input.StylusEventArgs
- uid: System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotTouchCapture(TouchEventArgs)
  nameWithType: UIElement.OnGotTouchCapture(TouchEventArgs)
  fullName: System.Windows.UIElement.OnGotTouchCapture(TouchEventArgs)
- uid: System.Windows.Input.TouchEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: TouchEventArgs
  nameWithType: TouchEventArgs
  fullName: System.Windows.Input.TouchEventArgs
- uid: System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.DependencyPropertyChangedEventArgs
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventArgs
  nameWithType: DependencyPropertyChangedEventArgs
  fullName: System.Windows.DependencyPropertyChangedEventArgs
- uid: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnKeyDown(KeyEventArgs)
  nameWithType: UIElement.OnKeyDown(KeyEventArgs)
  fullName: System.Windows.UIElement.OnKeyDown(KeyEventArgs)
- uid: System.Windows.Input.KeyEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: KeyEventArgs
  nameWithType: KeyEventArgs
  fullName: System.Windows.Input.KeyEventArgs
- uid: System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnKeyUp(KeyEventArgs)
  nameWithType: UIElement.OnKeyUp(KeyEventArgs)
  fullName: System.Windows.UIElement.OnKeyUp(KeyEventArgs)
- uid: System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostFocus(RoutedEventArgs)
  nameWithType: UIElement.OnLostFocus(RoutedEventArgs)
  fullName: System.Windows.UIElement.OnLostFocus(RoutedEventArgs)
- uid: System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostMouseCapture(MouseEventArgs)
  nameWithType: UIElement.OnLostMouseCapture(MouseEventArgs)
  fullName: System.Windows.UIElement.OnLostMouseCapture(MouseEventArgs)
- uid: System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostStylusCapture(StylusEventArgs)
  nameWithType: UIElement.OnLostStylusCapture(StylusEventArgs)
  fullName: System.Windows.UIElement.OnLostStylusCapture(StylusEventArgs)
- uid: System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostTouchCapture(TouchEventArgs)
  nameWithType: UIElement.OnLostTouchCapture(TouchEventArgs)
  fullName: System.Windows.UIElement.OnLostTouchCapture(TouchEventArgs)
- uid: System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  nameWithType: UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  fullName: System.Windows.UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
- uid: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationBoundaryFeedbackEventArgs
  nameWithType: ManipulationBoundaryFeedbackEventArgs
  fullName: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
- uid: System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationCompleted(ManipulationCompletedEventArgs)
  nameWithType: UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs)
  fullName: System.Windows.UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs)
- uid: System.Windows.Input.ManipulationCompletedEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationCompletedEventArgs
  nameWithType: ManipulationCompletedEventArgs
  fullName: System.Windows.Input.ManipulationCompletedEventArgs
- uid: System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationDelta(ManipulationDeltaEventArgs)
  nameWithType: UIElement.OnManipulationDelta(ManipulationDeltaEventArgs)
  fullName: System.Windows.UIElement.OnManipulationDelta(ManipulationDeltaEventArgs)
- uid: System.Windows.Input.ManipulationDeltaEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationDeltaEventArgs
  nameWithType: ManipulationDeltaEventArgs
  fullName: System.Windows.Input.ManipulationDeltaEventArgs
- uid: System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)
  nameWithType: UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)
  fullName: System.Windows.UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)
- uid: System.Windows.Input.ManipulationInertiaStartingEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationInertiaStartingEventArgs
  nameWithType: ManipulationInertiaStartingEventArgs
  fullName: System.Windows.Input.ManipulationInertiaStartingEventArgs
- uid: System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationStarted(ManipulationStartedEventArgs)
  nameWithType: UIElement.OnManipulationStarted(ManipulationStartedEventArgs)
  fullName: System.Windows.UIElement.OnManipulationStarted(ManipulationStartedEventArgs)
- uid: System.Windows.Input.ManipulationStartedEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationStartedEventArgs
  nameWithType: ManipulationStartedEventArgs
  fullName: System.Windows.Input.ManipulationStartedEventArgs
- uid: System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationStarting(ManipulationStartingEventArgs)
  nameWithType: UIElement.OnManipulationStarting(ManipulationStartingEventArgs)
  fullName: System.Windows.UIElement.OnManipulationStarting(ManipulationStartingEventArgs)
- uid: System.Windows.Input.ManipulationStartingEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationStartingEventArgs
  nameWithType: ManipulationStartingEventArgs
  fullName: System.Windows.Input.ManipulationStartingEventArgs
- uid: System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseDown(MouseButtonEventArgs)
- uid: System.Windows.Input.MouseButtonEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseButtonEventArgs
  nameWithType: MouseButtonEventArgs
  fullName: System.Windows.Input.MouseButtonEventArgs
- uid: System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseEnter(MouseEventArgs)
  nameWithType: UIElement.OnMouseEnter(MouseEventArgs)
  fullName: System.Windows.UIElement.OnMouseEnter(MouseEventArgs)
- uid: System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseLeave(MouseEventArgs)
  nameWithType: UIElement.OnMouseLeave(MouseEventArgs)
  fullName: System.Windows.UIElement.OnMouseLeave(MouseEventArgs)
- uid: System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseMove(MouseEventArgs)
  nameWithType: UIElement.OnMouseMove(MouseEventArgs)
  fullName: System.Windows.UIElement.OnMouseMove(MouseEventArgs)
- uid: System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseRightButtonDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseRightButtonUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseWheel(MouseWheelEventArgs)
  nameWithType: UIElement.OnMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.UIElement.OnMouseWheel(MouseWheelEventArgs)
- uid: System.Windows.Input.MouseWheelEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseWheelEventArgs
  nameWithType: MouseWheelEventArgs
  fullName: System.Windows.Input.MouseWheelEventArgs
- uid: System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDragEnter(DragEventArgs)
  nameWithType: UIElement.OnPreviewDragEnter(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDragEnter(DragEventArgs)
- uid: System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDragLeave(DragEventArgs)
  nameWithType: UIElement.OnPreviewDragLeave(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDragLeave(DragEventArgs)
- uid: System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDragOver(DragEventArgs)
  nameWithType: UIElement.OnPreviewDragOver(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDragOver(DragEventArgs)
- uid: System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDrop(DragEventArgs)
  nameWithType: UIElement.OnPreviewDrop(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDrop(DragEventArgs)
- uid: System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
- uid: System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewKeyDown(KeyEventArgs)
  nameWithType: UIElement.OnPreviewKeyDown(KeyEventArgs)
  fullName: System.Windows.UIElement.OnPreviewKeyDown(KeyEventArgs)
- uid: System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewKeyUp(KeyEventArgs)
  nameWithType: UIElement.OnPreviewKeyUp(KeyEventArgs)
  fullName: System.Windows.UIElement.OnPreviewKeyUp(KeyEventArgs)
- uid: System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseMove(MouseEventArgs)
  nameWithType: UIElement.OnPreviewMouseMove(MouseEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseMove(MouseEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseWheel(MouseWheelEventArgs)
  nameWithType: UIElement.OnPreviewMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseWheel(MouseWheelEventArgs)
- uid: System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
- uid: System.Windows.QueryContinueDragEventArgs
  parent: System.Windows
  isExternal: false
  name: QueryContinueDragEventArgs
  nameWithType: QueryContinueDragEventArgs
  fullName: System.Windows.QueryContinueDragEventArgs
- uid: System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusButtonDown(StylusButtonEventArgs)
  nameWithType: UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
- uid: System.Windows.Input.StylusButtonEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusButtonEventArgs
  nameWithType: StylusButtonEventArgs
  fullName: System.Windows.Input.StylusButtonEventArgs
- uid: System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusButtonUp(StylusButtonEventArgs)
  nameWithType: UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
- uid: System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusDown(StylusDownEventArgs)
  nameWithType: UIElement.OnPreviewStylusDown(StylusDownEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusDown(StylusDownEventArgs)
- uid: System.Windows.Input.StylusDownEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusDownEventArgs
  nameWithType: StylusDownEventArgs
  fullName: System.Windows.Input.StylusDownEventArgs
- uid: System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusInAirMove(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusInAirMove(StylusEventArgs)
- uid: System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusInRange(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusInRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusInRange(StylusEventArgs)
- uid: System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusMove(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusMove(StylusEventArgs)
- uid: System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusOutOfRange(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusOutOfRange(StylusEventArgs)
- uid: System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
- uid: System.Windows.Input.StylusSystemGestureEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusSystemGestureEventArgs
  nameWithType: StylusSystemGestureEventArgs
  fullName: System.Windows.Input.StylusSystemGestureEventArgs
- uid: System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusUp(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusUp(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusUp(StylusEventArgs)
- uid: System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTextInput(TextCompositionEventArgs)
  nameWithType: UIElement.OnPreviewTextInput(TextCompositionEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTextInput(TextCompositionEventArgs)
- uid: System.Windows.Input.TextCompositionEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: TextCompositionEventArgs
  nameWithType: TextCompositionEventArgs
  fullName: System.Windows.Input.TextCompositionEventArgs
- uid: System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTouchDown(TouchEventArgs)
  nameWithType: UIElement.OnPreviewTouchDown(TouchEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTouchDown(TouchEventArgs)
- uid: System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTouchMove(TouchEventArgs)
  nameWithType: UIElement.OnPreviewTouchMove(TouchEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTouchMove(TouchEventArgs)
- uid: System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTouchUp(TouchEventArgs)
  nameWithType: UIElement.OnPreviewTouchUp(TouchEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTouchUp(TouchEventArgs)
- uid: System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
- uid: System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnQueryCursor(QueryCursorEventArgs)
  nameWithType: UIElement.OnQueryCursor(QueryCursorEventArgs)
  fullName: System.Windows.UIElement.OnQueryCursor(QueryCursorEventArgs)
- uid: System.Windows.Input.QueryCursorEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: QueryCursorEventArgs
  nameWithType: QueryCursorEventArgs
  fullName: System.Windows.Input.QueryCursorEventArgs
- uid: System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnRender(DrawingContext)
  nameWithType: UIElement.OnRender(DrawingContext)
  fullName: System.Windows.UIElement.OnRender(DrawingContext)
- uid: System.Windows.Media.DrawingContext
  parent: System.Windows.Media
  isExternal: false
  name: DrawingContext
  nameWithType: DrawingContext
  fullName: System.Windows.Media.DrawingContext
- uid: System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnRenderSizeChanged(SizeChangedInfo)
  nameWithType: UIElement.OnRenderSizeChanged(SizeChangedInfo)
  fullName: System.Windows.UIElement.OnRenderSizeChanged(SizeChangedInfo)
- uid: System.Windows.SizeChangedInfo
  parent: System.Windows
  isExternal: false
  name: SizeChangedInfo
  nameWithType: SizeChangedInfo
  fullName: System.Windows.SizeChangedInfo
- uid: System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusButtonDown(StylusButtonEventArgs)
  nameWithType: UIElement.OnStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnStylusButtonDown(StylusButtonEventArgs)
- uid: System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusButtonUp(StylusButtonEventArgs)
  nameWithType: UIElement.OnStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnStylusButtonUp(StylusButtonEventArgs)
- uid: System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusDown(StylusDownEventArgs)
  nameWithType: UIElement.OnStylusDown(StylusDownEventArgs)
  fullName: System.Windows.UIElement.OnStylusDown(StylusDownEventArgs)
- uid: System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusEnter(StylusEventArgs)
  nameWithType: UIElement.OnStylusEnter(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusEnter(StylusEventArgs)
- uid: System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusInAirMove(StylusEventArgs)
  nameWithType: UIElement.OnStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusInAirMove(StylusEventArgs)
- uid: System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusInRange(StylusEventArgs)
  nameWithType: UIElement.OnStylusInRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusInRange(StylusEventArgs)
- uid: System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusLeave(StylusEventArgs)
  nameWithType: UIElement.OnStylusLeave(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusLeave(StylusEventArgs)
- uid: System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusMove(StylusEventArgs)
  nameWithType: UIElement.OnStylusMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusMove(StylusEventArgs)
- uid: System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusOutOfRange(StylusEventArgs)
  nameWithType: UIElement.OnStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusOutOfRange(StylusEventArgs)
- uid: System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
- uid: System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusUp(StylusEventArgs)
  nameWithType: UIElement.OnStylusUp(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusUp(StylusEventArgs)
- uid: System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTextInput(TextCompositionEventArgs)
  nameWithType: UIElement.OnTextInput(TextCompositionEventArgs)
  fullName: System.Windows.UIElement.OnTextInput(TextCompositionEventArgs)
- uid: System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchDown(TouchEventArgs)
  nameWithType: UIElement.OnTouchDown(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchDown(TouchEventArgs)
- uid: System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchEnter(TouchEventArgs)
  nameWithType: UIElement.OnTouchEnter(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchEnter(TouchEventArgs)
- uid: System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchLeave(TouchEventArgs)
  nameWithType: UIElement.OnTouchLeave(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchLeave(TouchEventArgs)
- uid: System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchMove(TouchEventArgs)
  nameWithType: UIElement.OnTouchMove(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchMove(TouchEventArgs)
- uid: System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchUp(TouchEventArgs)
  nameWithType: UIElement.OnTouchUp(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchUp(TouchEventArgs)
- uid: System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: UIElement.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.UIElement.OnVisualParentChanged(DependencyObject)
- uid: System.Windows.UIElement.Opacity
  parent: System.Windows.UIElement
  isExternal: false
  name: Opacity
  nameWithType: UIElement.Opacity
  fullName: System.Windows.UIElement.Opacity
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.UIElement.OpacityMask
  parent: System.Windows.UIElement
  isExternal: false
  name: OpacityMask
  nameWithType: UIElement.OpacityMask
  fullName: System.Windows.UIElement.OpacityMask
- uid: System.Windows.Media.Brush
  parent: System.Windows.Media
  isExternal: false
  name: Brush
  nameWithType: Brush
  fullName: System.Windows.Media.Brush
- uid: System.Windows.UIElement.OpacityMaskProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: OpacityMaskProperty
  nameWithType: UIElement.OpacityMaskProperty
  fullName: System.Windows.UIElement.OpacityMaskProperty
- uid: System.Windows.UIElement.OpacityProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: OpacityProperty
  nameWithType: UIElement.OpacityProperty
  fullName: System.Windows.UIElement.OpacityProperty
- uid: System.Windows.UIElement.PersistId
  parent: System.Windows.UIElement
  isExternal: false
  name: PersistId
  nameWithType: UIElement.PersistId
  fullName: System.Windows.UIElement.PersistId
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  parent: System.Windows.UIElement
  isExternal: false
  name: PredictFocus(FocusNavigationDirection)
  nameWithType: UIElement.PredictFocus(FocusNavigationDirection)
  fullName: System.Windows.UIElement.PredictFocus(FocusNavigationDirection)
- uid: System.Windows.Input.FocusNavigationDirection
  parent: System.Windows.Input
  isExternal: false
  name: FocusNavigationDirection
  nameWithType: FocusNavigationDirection
  fullName: System.Windows.Input.FocusNavigationDirection
- uid: System.Windows.UIElement.PreviewDragEnter
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDragEnter
  nameWithType: UIElement.PreviewDragEnter
  fullName: System.Windows.UIElement.PreviewDragEnter
- uid: System.Windows.UIElement.PreviewDragEnterEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDragEnterEvent
  nameWithType: UIElement.PreviewDragEnterEvent
  fullName: System.Windows.UIElement.PreviewDragEnterEvent
- uid: System.Windows.UIElement.PreviewDragLeave
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDragLeave
  nameWithType: UIElement.PreviewDragLeave
  fullName: System.Windows.UIElement.PreviewDragLeave
- uid: System.Windows.UIElement.PreviewDragLeaveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDragLeaveEvent
  nameWithType: UIElement.PreviewDragLeaveEvent
  fullName: System.Windows.UIElement.PreviewDragLeaveEvent
- uid: System.Windows.UIElement.PreviewDragOver
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDragOver
  nameWithType: UIElement.PreviewDragOver
  fullName: System.Windows.UIElement.PreviewDragOver
- uid: System.Windows.UIElement.PreviewDragOverEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDragOverEvent
  nameWithType: UIElement.PreviewDragOverEvent
  fullName: System.Windows.UIElement.PreviewDragOverEvent
- uid: System.Windows.UIElement.PreviewDrop
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDrop
  nameWithType: UIElement.PreviewDrop
  fullName: System.Windows.UIElement.PreviewDrop
- uid: System.Windows.UIElement.PreviewDropEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDropEvent
  nameWithType: UIElement.PreviewDropEvent
  fullName: System.Windows.UIElement.PreviewDropEvent
- uid: System.Windows.UIElement.PreviewGiveFeedback
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewGiveFeedback
  nameWithType: UIElement.PreviewGiveFeedback
  fullName: System.Windows.UIElement.PreviewGiveFeedback
- uid: System.Windows.UIElement.PreviewGiveFeedbackEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewGiveFeedbackEvent
  nameWithType: UIElement.PreviewGiveFeedbackEvent
  fullName: System.Windows.UIElement.PreviewGiveFeedbackEvent
- uid: System.Windows.UIElement.PreviewGotKeyboardFocus
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewGotKeyboardFocus
  nameWithType: UIElement.PreviewGotKeyboardFocus
  fullName: System.Windows.UIElement.PreviewGotKeyboardFocus
- uid: System.Windows.UIElement.PreviewGotKeyboardFocusEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewGotKeyboardFocusEvent
  nameWithType: UIElement.PreviewGotKeyboardFocusEvent
  fullName: System.Windows.UIElement.PreviewGotKeyboardFocusEvent
- uid: System.Windows.UIElement.PreviewKeyDown
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewKeyDown
  nameWithType: UIElement.PreviewKeyDown
  fullName: System.Windows.UIElement.PreviewKeyDown
- uid: System.Windows.UIElement.PreviewKeyDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewKeyDownEvent
  nameWithType: UIElement.PreviewKeyDownEvent
  fullName: System.Windows.UIElement.PreviewKeyDownEvent
- uid: System.Windows.UIElement.PreviewKeyUp
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewKeyUp
  nameWithType: UIElement.PreviewKeyUp
  fullName: System.Windows.UIElement.PreviewKeyUp
- uid: System.Windows.UIElement.PreviewKeyUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewKeyUpEvent
  nameWithType: UIElement.PreviewKeyUpEvent
  fullName: System.Windows.UIElement.PreviewKeyUpEvent
- uid: System.Windows.UIElement.PreviewLostKeyboardFocus
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewLostKeyboardFocus
  nameWithType: UIElement.PreviewLostKeyboardFocus
  fullName: System.Windows.UIElement.PreviewLostKeyboardFocus
- uid: System.Windows.UIElement.PreviewLostKeyboardFocusEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewLostKeyboardFocusEvent
  nameWithType: UIElement.PreviewLostKeyboardFocusEvent
  fullName: System.Windows.UIElement.PreviewLostKeyboardFocusEvent
- uid: System.Windows.UIElement.PreviewMouseDown
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseDown
  nameWithType: UIElement.PreviewMouseDown
  fullName: System.Windows.UIElement.PreviewMouseDown
- uid: System.Windows.UIElement.PreviewMouseDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseDownEvent
  nameWithType: UIElement.PreviewMouseDownEvent
  fullName: System.Windows.UIElement.PreviewMouseDownEvent
- uid: System.Windows.UIElement.PreviewMouseLeftButtonDown
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseLeftButtonDown
  nameWithType: UIElement.PreviewMouseLeftButtonDown
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonDown
- uid: System.Windows.UIElement.PreviewMouseLeftButtonDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseLeftButtonDownEvent
  nameWithType: UIElement.PreviewMouseLeftButtonDownEvent
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonDownEvent
- uid: System.Windows.UIElement.PreviewMouseLeftButtonUp
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseLeftButtonUp
  nameWithType: UIElement.PreviewMouseLeftButtonUp
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonUp
- uid: System.Windows.UIElement.PreviewMouseLeftButtonUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseLeftButtonUpEvent
  nameWithType: UIElement.PreviewMouseLeftButtonUpEvent
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonUpEvent
- uid: System.Windows.UIElement.PreviewMouseMove
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseMove
  nameWithType: UIElement.PreviewMouseMove
  fullName: System.Windows.UIElement.PreviewMouseMove
- uid: System.Windows.UIElement.PreviewMouseMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseMoveEvent
  nameWithType: UIElement.PreviewMouseMoveEvent
  fullName: System.Windows.UIElement.PreviewMouseMoveEvent
- uid: System.Windows.UIElement.PreviewMouseRightButtonDown
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseRightButtonDown
  nameWithType: UIElement.PreviewMouseRightButtonDown
  fullName: System.Windows.UIElement.PreviewMouseRightButtonDown
- uid: System.Windows.UIElement.PreviewMouseRightButtonDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseRightButtonDownEvent
  nameWithType: UIElement.PreviewMouseRightButtonDownEvent
  fullName: System.Windows.UIElement.PreviewMouseRightButtonDownEvent
- uid: System.Windows.UIElement.PreviewMouseRightButtonUp
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseRightButtonUp
  nameWithType: UIElement.PreviewMouseRightButtonUp
  fullName: System.Windows.UIElement.PreviewMouseRightButtonUp
- uid: System.Windows.UIElement.PreviewMouseRightButtonUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseRightButtonUpEvent
  nameWithType: UIElement.PreviewMouseRightButtonUpEvent
  fullName: System.Windows.UIElement.PreviewMouseRightButtonUpEvent
- uid: System.Windows.UIElement.PreviewMouseUp
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseUp
  nameWithType: UIElement.PreviewMouseUp
  fullName: System.Windows.UIElement.PreviewMouseUp
- uid: System.Windows.UIElement.PreviewMouseUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseUpEvent
  nameWithType: UIElement.PreviewMouseUpEvent
  fullName: System.Windows.UIElement.PreviewMouseUpEvent
- uid: System.Windows.UIElement.PreviewMouseWheel
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseWheel
  nameWithType: UIElement.PreviewMouseWheel
  fullName: System.Windows.UIElement.PreviewMouseWheel
- uid: System.Windows.UIElement.PreviewMouseWheelEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseWheelEvent
  nameWithType: UIElement.PreviewMouseWheelEvent
  fullName: System.Windows.UIElement.PreviewMouseWheelEvent
- uid: System.Windows.UIElement.PreviewQueryContinueDrag
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewQueryContinueDrag
  nameWithType: UIElement.PreviewQueryContinueDrag
  fullName: System.Windows.UIElement.PreviewQueryContinueDrag
- uid: System.Windows.QueryContinueDragEventHandler
  parent: System.Windows
  isExternal: false
  name: QueryContinueDragEventHandler
  nameWithType: QueryContinueDragEventHandler
  fullName: System.Windows.QueryContinueDragEventHandler
- uid: System.Windows.UIElement.PreviewQueryContinueDragEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewQueryContinueDragEvent
  nameWithType: UIElement.PreviewQueryContinueDragEvent
  fullName: System.Windows.UIElement.PreviewQueryContinueDragEvent
- uid: System.Windows.UIElement.PreviewStylusButtonDown
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusButtonDown
  nameWithType: UIElement.PreviewStylusButtonDown
  fullName: System.Windows.UIElement.PreviewStylusButtonDown
- uid: System.Windows.Input.StylusButtonEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusButtonEventHandler
  nameWithType: StylusButtonEventHandler
  fullName: System.Windows.Input.StylusButtonEventHandler
- uid: System.Windows.UIElement.PreviewStylusButtonDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusButtonDownEvent
  nameWithType: UIElement.PreviewStylusButtonDownEvent
  fullName: System.Windows.UIElement.PreviewStylusButtonDownEvent
- uid: System.Windows.UIElement.PreviewStylusButtonUp
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusButtonUp
  nameWithType: UIElement.PreviewStylusButtonUp
  fullName: System.Windows.UIElement.PreviewStylusButtonUp
- uid: System.Windows.UIElement.PreviewStylusButtonUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusButtonUpEvent
  nameWithType: UIElement.PreviewStylusButtonUpEvent
  fullName: System.Windows.UIElement.PreviewStylusButtonUpEvent
- uid: System.Windows.UIElement.PreviewStylusDown
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusDown
  nameWithType: UIElement.PreviewStylusDown
  fullName: System.Windows.UIElement.PreviewStylusDown
- uid: System.Windows.Input.StylusDownEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusDownEventHandler
  nameWithType: StylusDownEventHandler
  fullName: System.Windows.Input.StylusDownEventHandler
- uid: System.Windows.UIElement.PreviewStylusDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusDownEvent
  nameWithType: UIElement.PreviewStylusDownEvent
  fullName: System.Windows.UIElement.PreviewStylusDownEvent
- uid: System.Windows.UIElement.PreviewStylusInAirMove
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusInAirMove
  nameWithType: UIElement.PreviewStylusInAirMove
  fullName: System.Windows.UIElement.PreviewStylusInAirMove
- uid: System.Windows.UIElement.PreviewStylusInAirMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusInAirMoveEvent
  nameWithType: UIElement.PreviewStylusInAirMoveEvent
  fullName: System.Windows.UIElement.PreviewStylusInAirMoveEvent
- uid: System.Windows.UIElement.PreviewStylusInRange
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusInRange
  nameWithType: UIElement.PreviewStylusInRange
  fullName: System.Windows.UIElement.PreviewStylusInRange
- uid: System.Windows.UIElement.PreviewStylusInRangeEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusInRangeEvent
  nameWithType: UIElement.PreviewStylusInRangeEvent
  fullName: System.Windows.UIElement.PreviewStylusInRangeEvent
- uid: System.Windows.UIElement.PreviewStylusMove
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusMove
  nameWithType: UIElement.PreviewStylusMove
  fullName: System.Windows.UIElement.PreviewStylusMove
- uid: System.Windows.UIElement.PreviewStylusMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusMoveEvent
  nameWithType: UIElement.PreviewStylusMoveEvent
  fullName: System.Windows.UIElement.PreviewStylusMoveEvent
- uid: System.Windows.UIElement.PreviewStylusOutOfRange
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusOutOfRange
  nameWithType: UIElement.PreviewStylusOutOfRange
  fullName: System.Windows.UIElement.PreviewStylusOutOfRange
- uid: System.Windows.UIElement.PreviewStylusOutOfRangeEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusOutOfRangeEvent
  nameWithType: UIElement.PreviewStylusOutOfRangeEvent
  fullName: System.Windows.UIElement.PreviewStylusOutOfRangeEvent
- uid: System.Windows.UIElement.PreviewStylusSystemGesture
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusSystemGesture
  nameWithType: UIElement.PreviewStylusSystemGesture
  fullName: System.Windows.UIElement.PreviewStylusSystemGesture
- uid: System.Windows.Input.StylusSystemGestureEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusSystemGestureEventHandler
  nameWithType: StylusSystemGestureEventHandler
  fullName: System.Windows.Input.StylusSystemGestureEventHandler
- uid: System.Windows.UIElement.PreviewStylusSystemGestureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusSystemGestureEvent
  nameWithType: UIElement.PreviewStylusSystemGestureEvent
  fullName: System.Windows.UIElement.PreviewStylusSystemGestureEvent
- uid: System.Windows.UIElement.PreviewStylusUp
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusUp
  nameWithType: UIElement.PreviewStylusUp
  fullName: System.Windows.UIElement.PreviewStylusUp
- uid: System.Windows.UIElement.PreviewStylusUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusUpEvent
  nameWithType: UIElement.PreviewStylusUpEvent
  fullName: System.Windows.UIElement.PreviewStylusUpEvent
- uid: System.Windows.UIElement.PreviewTextInput
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTextInput
  nameWithType: UIElement.PreviewTextInput
  fullName: System.Windows.UIElement.PreviewTextInput
- uid: System.Windows.Input.TextCompositionEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: TextCompositionEventHandler
  nameWithType: TextCompositionEventHandler
  fullName: System.Windows.Input.TextCompositionEventHandler
- uid: System.Windows.UIElement.PreviewTextInputEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTextInputEvent
  nameWithType: UIElement.PreviewTextInputEvent
  fullName: System.Windows.UIElement.PreviewTextInputEvent
- uid: System.Windows.UIElement.PreviewTouchDown
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTouchDown
  nameWithType: UIElement.PreviewTouchDown
  fullName: System.Windows.UIElement.PreviewTouchDown
- uid: System.Windows.UIElement.PreviewTouchDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTouchDownEvent
  nameWithType: UIElement.PreviewTouchDownEvent
  fullName: System.Windows.UIElement.PreviewTouchDownEvent
- uid: System.Windows.UIElement.PreviewTouchMove
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTouchMove
  nameWithType: UIElement.PreviewTouchMove
  fullName: System.Windows.UIElement.PreviewTouchMove
- uid: System.Windows.UIElement.PreviewTouchMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTouchMoveEvent
  nameWithType: UIElement.PreviewTouchMoveEvent
  fullName: System.Windows.UIElement.PreviewTouchMoveEvent
- uid: System.Windows.UIElement.PreviewTouchUp
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTouchUp
  nameWithType: UIElement.PreviewTouchUp
  fullName: System.Windows.UIElement.PreviewTouchUp
- uid: System.Windows.UIElement.PreviewTouchUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTouchUpEvent
  nameWithType: UIElement.PreviewTouchUpEvent
  fullName: System.Windows.UIElement.PreviewTouchUpEvent
- uid: System.Windows.UIElement.QueryContinueDrag
  parent: System.Windows.UIElement
  isExternal: false
  name: QueryContinueDrag
  nameWithType: UIElement.QueryContinueDrag
  fullName: System.Windows.UIElement.QueryContinueDrag
- uid: System.Windows.UIElement.QueryContinueDragEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: QueryContinueDragEvent
  nameWithType: UIElement.QueryContinueDragEvent
  fullName: System.Windows.UIElement.QueryContinueDragEvent
- uid: System.Windows.UIElement.QueryCursor
  parent: System.Windows.UIElement
  isExternal: false
  name: QueryCursor
  nameWithType: UIElement.QueryCursor
  fullName: System.Windows.UIElement.QueryCursor
- uid: System.Windows.Input.QueryCursorEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: QueryCursorEventHandler
  nameWithType: QueryCursorEventHandler
  fullName: System.Windows.Input.QueryCursorEventHandler
- uid: System.Windows.UIElement.QueryCursorEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: QueryCursorEvent
  nameWithType: UIElement.QueryCursorEvent
  fullName: System.Windows.UIElement.QueryCursorEvent
- uid: System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: RaiseEvent(RoutedEventArgs)
  nameWithType: UIElement.RaiseEvent(RoutedEventArgs)
  fullName: System.Windows.UIElement.RaiseEvent(RoutedEventArgs)
- uid: System.Windows.UIElement.ReleaseAllTouchCaptures
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseAllTouchCaptures()
  nameWithType: UIElement.ReleaseAllTouchCaptures()
  fullName: System.Windows.UIElement.ReleaseAllTouchCaptures()
- uid: System.Windows.UIElement.ReleaseMouseCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseMouseCapture()
  nameWithType: UIElement.ReleaseMouseCapture()
  fullName: System.Windows.UIElement.ReleaseMouseCapture()
- uid: System.Windows.UIElement.ReleaseStylusCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseStylusCapture()
  nameWithType: UIElement.ReleaseStylusCapture()
  fullName: System.Windows.UIElement.ReleaseStylusCapture()
- uid: System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseTouchCapture(TouchDevice)
  nameWithType: UIElement.ReleaseTouchCapture(TouchDevice)
  fullName: System.Windows.UIElement.ReleaseTouchCapture(TouchDevice)
- uid: System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.UIElement
  isExternal: false
  name: RemoveHandler(RoutedEvent,Delegate)
  nameWithType: UIElement.RemoveHandler(RoutedEvent,Delegate)
  fullName: System.Windows.UIElement.RemoveHandler(RoutedEvent,Delegate)
- uid: System.Windows.UIElement.RenderSize
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderSize
  nameWithType: UIElement.RenderSize
  fullName: System.Windows.UIElement.RenderSize
- uid: System.Windows.UIElement.RenderTransform
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderTransform
  nameWithType: UIElement.RenderTransform
  fullName: System.Windows.UIElement.RenderTransform
- uid: System.Windows.Media.Transform
  parent: System.Windows.Media
  isExternal: false
  name: Transform
  nameWithType: Transform
  fullName: System.Windows.Media.Transform
- uid: System.Windows.UIElement.RenderTransformOrigin
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderTransformOrigin
  nameWithType: UIElement.RenderTransformOrigin
  fullName: System.Windows.UIElement.RenderTransformOrigin
- uid: System.Windows.UIElement.RenderTransformOriginProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderTransformOriginProperty
  nameWithType: UIElement.RenderTransformOriginProperty
  fullName: System.Windows.UIElement.RenderTransformOriginProperty
- uid: System.Windows.UIElement.RenderTransformProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderTransformProperty
  nameWithType: UIElement.RenderTransformProperty
  fullName: System.Windows.UIElement.RenderTransformProperty
- uid: System.Windows.UIElement.ShouldSerializeCommandBindings
  parent: System.Windows.UIElement
  isExternal: false
  name: ShouldSerializeCommandBindings()
  nameWithType: UIElement.ShouldSerializeCommandBindings()
  fullName: System.Windows.UIElement.ShouldSerializeCommandBindings()
- uid: System.Windows.UIElement.ShouldSerializeInputBindings
  parent: System.Windows.UIElement
  isExternal: false
  name: ShouldSerializeInputBindings()
  nameWithType: UIElement.ShouldSerializeInputBindings()
  fullName: System.Windows.UIElement.ShouldSerializeInputBindings()
- uid: System.Windows.UIElement.SnapsToDevicePixels
  parent: System.Windows.UIElement
  isExternal: false
  name: SnapsToDevicePixels
  nameWithType: UIElement.SnapsToDevicePixels
  fullName: System.Windows.UIElement.SnapsToDevicePixels
- uid: System.Windows.UIElement.SnapsToDevicePixelsProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: SnapsToDevicePixelsProperty
  nameWithType: UIElement.SnapsToDevicePixelsProperty
  fullName: System.Windows.UIElement.SnapsToDevicePixelsProperty
- uid: System.Windows.UIElement.StylusButtonDown
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusButtonDown
  nameWithType: UIElement.StylusButtonDown
  fullName: System.Windows.UIElement.StylusButtonDown
- uid: System.Windows.UIElement.StylusButtonDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusButtonDownEvent
  nameWithType: UIElement.StylusButtonDownEvent
  fullName: System.Windows.UIElement.StylusButtonDownEvent
- uid: System.Windows.UIElement.StylusButtonUp
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusButtonUp
  nameWithType: UIElement.StylusButtonUp
  fullName: System.Windows.UIElement.StylusButtonUp
- uid: System.Windows.UIElement.StylusButtonUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusButtonUpEvent
  nameWithType: UIElement.StylusButtonUpEvent
  fullName: System.Windows.UIElement.StylusButtonUpEvent
- uid: System.Windows.UIElement.StylusDown
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusDown
  nameWithType: UIElement.StylusDown
  fullName: System.Windows.UIElement.StylusDown
- uid: System.Windows.UIElement.StylusDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusDownEvent
  nameWithType: UIElement.StylusDownEvent
  fullName: System.Windows.UIElement.StylusDownEvent
- uid: System.Windows.UIElement.StylusEnter
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusEnter
  nameWithType: UIElement.StylusEnter
  fullName: System.Windows.UIElement.StylusEnter
- uid: System.Windows.UIElement.StylusEnterEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusEnterEvent
  nameWithType: UIElement.StylusEnterEvent
  fullName: System.Windows.UIElement.StylusEnterEvent
- uid: System.Windows.UIElement.StylusInAirMove
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusInAirMove
  nameWithType: UIElement.StylusInAirMove
  fullName: System.Windows.UIElement.StylusInAirMove
- uid: System.Windows.UIElement.StylusInAirMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusInAirMoveEvent
  nameWithType: UIElement.StylusInAirMoveEvent
  fullName: System.Windows.UIElement.StylusInAirMoveEvent
- uid: System.Windows.UIElement.StylusInRange
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusInRange
  nameWithType: UIElement.StylusInRange
  fullName: System.Windows.UIElement.StylusInRange
- uid: System.Windows.UIElement.StylusInRangeEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusInRangeEvent
  nameWithType: UIElement.StylusInRangeEvent
  fullName: System.Windows.UIElement.StylusInRangeEvent
- uid: System.Windows.UIElement.StylusLeave
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusLeave
  nameWithType: UIElement.StylusLeave
  fullName: System.Windows.UIElement.StylusLeave
- uid: System.Windows.UIElement.StylusLeaveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusLeaveEvent
  nameWithType: UIElement.StylusLeaveEvent
  fullName: System.Windows.UIElement.StylusLeaveEvent
- uid: System.Windows.UIElement.StylusMove
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusMove
  nameWithType: UIElement.StylusMove
  fullName: System.Windows.UIElement.StylusMove
- uid: System.Windows.UIElement.StylusMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusMoveEvent
  nameWithType: UIElement.StylusMoveEvent
  fullName: System.Windows.UIElement.StylusMoveEvent
- uid: System.Windows.UIElement.StylusOutOfRange
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusOutOfRange
  nameWithType: UIElement.StylusOutOfRange
  fullName: System.Windows.UIElement.StylusOutOfRange
- uid: System.Windows.UIElement.StylusOutOfRangeEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusOutOfRangeEvent
  nameWithType: UIElement.StylusOutOfRangeEvent
  fullName: System.Windows.UIElement.StylusOutOfRangeEvent
- uid: System.Windows.UIElement.StylusPlugIns
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusPlugIns
  nameWithType: UIElement.StylusPlugIns
  fullName: System.Windows.UIElement.StylusPlugIns
- uid: System.Windows.Input.StylusPlugIns.StylusPlugInCollection
  parent: System.Windows.Input.StylusPlugIns
  isExternal: false
  name: StylusPlugInCollection
  nameWithType: StylusPlugInCollection
  fullName: System.Windows.Input.StylusPlugIns.StylusPlugInCollection
- uid: System.Windows.UIElement.StylusSystemGesture
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusSystemGesture
  nameWithType: UIElement.StylusSystemGesture
  fullName: System.Windows.UIElement.StylusSystemGesture
- uid: System.Windows.UIElement.StylusSystemGestureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusSystemGestureEvent
  nameWithType: UIElement.StylusSystemGestureEvent
  fullName: System.Windows.UIElement.StylusSystemGestureEvent
- uid: System.Windows.UIElement.StylusUp
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusUp
  nameWithType: UIElement.StylusUp
  fullName: System.Windows.UIElement.StylusUp
- uid: System.Windows.UIElement.StylusUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusUpEvent
  nameWithType: UIElement.StylusUpEvent
  fullName: System.Windows.UIElement.StylusUpEvent
- uid: System.Windows.UIElement.TextInput
  parent: System.Windows.UIElement
  isExternal: false
  name: TextInput
  nameWithType: UIElement.TextInput
  fullName: System.Windows.UIElement.TextInput
- uid: System.Windows.UIElement.TextInputEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: TextInputEvent
  nameWithType: UIElement.TextInputEvent
  fullName: System.Windows.UIElement.TextInputEvent
- uid: System.Windows.UIElement.TouchDown
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchDown
  nameWithType: UIElement.TouchDown
  fullName: System.Windows.UIElement.TouchDown
- uid: System.Windows.UIElement.TouchDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchDownEvent
  nameWithType: UIElement.TouchDownEvent
  fullName: System.Windows.UIElement.TouchDownEvent
- uid: System.Windows.UIElement.TouchEnter
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchEnter
  nameWithType: UIElement.TouchEnter
  fullName: System.Windows.UIElement.TouchEnter
- uid: System.Windows.UIElement.TouchEnterEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchEnterEvent
  nameWithType: UIElement.TouchEnterEvent
  fullName: System.Windows.UIElement.TouchEnterEvent
- uid: System.Windows.UIElement.TouchesCaptured
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesCaptured
  nameWithType: UIElement.TouchesCaptured
  fullName: System.Windows.UIElement.TouchesCaptured
- uid: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<TouchDevice>
  nameWithType: IEnumerable<TouchDevice>
  fullName: System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Windows.Input.TouchDevice>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.TouchDevice
    name: TouchDevice
    nameWithType: TouchDevice
    fullName: TouchDevice
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.TouchesCapturedWithin
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesCapturedWithin
  nameWithType: UIElement.TouchesCapturedWithin
  fullName: System.Windows.UIElement.TouchesCapturedWithin
- uid: System.Windows.UIElement.TouchesDirectlyOver
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesDirectlyOver
  nameWithType: UIElement.TouchesDirectlyOver
  fullName: System.Windows.UIElement.TouchesDirectlyOver
- uid: System.Windows.UIElement.TouchesOver
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesOver
  nameWithType: UIElement.TouchesOver
  fullName: System.Windows.UIElement.TouchesOver
- uid: System.Windows.UIElement.TouchLeave
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchLeave
  nameWithType: UIElement.TouchLeave
  fullName: System.Windows.UIElement.TouchLeave
- uid: System.Windows.UIElement.TouchLeaveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchLeaveEvent
  nameWithType: UIElement.TouchLeaveEvent
  fullName: System.Windows.UIElement.TouchLeaveEvent
- uid: System.Windows.UIElement.TouchMove
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchMove
  nameWithType: UIElement.TouchMove
  fullName: System.Windows.UIElement.TouchMove
- uid: System.Windows.UIElement.TouchMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchMoveEvent
  nameWithType: UIElement.TouchMoveEvent
  fullName: System.Windows.UIElement.TouchMoveEvent
- uid: System.Windows.UIElement.TouchUp
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchUp
  nameWithType: UIElement.TouchUp
  fullName: System.Windows.UIElement.TouchUp
- uid: System.Windows.UIElement.TouchUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchUpEvent
  nameWithType: UIElement.TouchUpEvent
  fullName: System.Windows.UIElement.TouchUpEvent
- uid: System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)
  parent: System.Windows.UIElement
  isExternal: false
  name: TranslatePoint(Point,UIElement)
  nameWithType: UIElement.TranslatePoint(Point,UIElement)
  fullName: System.Windows.UIElement.TranslatePoint(Point,UIElement)
- uid: System.Windows.UIElement.Uid
  parent: System.Windows.UIElement
  isExternal: false
  name: Uid
  nameWithType: UIElement.Uid
  fullName: System.Windows.UIElement.Uid
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.UIElement.UidProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: UidProperty
  nameWithType: UIElement.UidProperty
  fullName: System.Windows.UIElement.UidProperty
- uid: System.Windows.UIElement.UpdateLayout
  parent: System.Windows.UIElement
  isExternal: false
  name: UpdateLayout()
  nameWithType: UIElement.UpdateLayout()
  fullName: System.Windows.UIElement.UpdateLayout()
- uid: System.Windows.UIElement.Visibility
  parent: System.Windows.UIElement
  isExternal: false
  name: Visibility
  nameWithType: UIElement.Visibility
  fullName: System.Windows.UIElement.Visibility
- uid: System.Windows.Visibility
  parent: System.Windows
  isExternal: false
  name: Visibility
  nameWithType: Visibility
  fullName: System.Windows.Visibility
- uid: System.Windows.UIElement.VisibilityProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: VisibilityProperty
  nameWithType: UIElement.VisibilityProperty
  fullName: System.Windows.UIElement.VisibilityProperty
- uid: System.Windows.UIElement.#ctor*
  parent: System.Windows.UIElement
  isExternal: false
  name: UIElement
  nameWithType: UIElement.UIElement
- uid: System.Windows.UIElement.AddHandler*
  parent: System.Windows.UIElement
  isExternal: false
  name: AddHandler
  nameWithType: UIElement.AddHandler
- uid: System.Windows.UIElement.AddToEventRoute*
  parent: System.Windows.UIElement
  isExternal: false
  name: AddToEventRoute
  nameWithType: UIElement.AddToEventRoute
- uid: System.Windows.UIElement.AllowDrop*
  parent: System.Windows.UIElement
  isExternal: false
  name: AllowDrop
  nameWithType: UIElement.AllowDrop
- uid: System.Windows.UIElement.ApplyAnimationClock*
  parent: System.Windows.UIElement
  isExternal: false
  name: ApplyAnimationClock
  nameWithType: UIElement.ApplyAnimationClock
- uid: System.Windows.UIElement.AreAnyTouchesCaptured*
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesCaptured
  nameWithType: UIElement.AreAnyTouchesCaptured
- uid: System.Windows.UIElement.AreAnyTouchesCapturedWithin*
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesCapturedWithin
  nameWithType: UIElement.AreAnyTouchesCapturedWithin
- uid: System.Windows.UIElement.AreAnyTouchesDirectlyOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesDirectlyOver
  nameWithType: UIElement.AreAnyTouchesDirectlyOver
- uid: System.Windows.UIElement.AreAnyTouchesOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesOver
  nameWithType: UIElement.AreAnyTouchesOver
- uid: System.Windows.UIElement.Arrange*
  parent: System.Windows.UIElement
  isExternal: false
  name: Arrange
  nameWithType: UIElement.Arrange
- uid: System.Windows.UIElement.ArrangeCore*
  parent: System.Windows.UIElement
  isExternal: false
  name: ArrangeCore
  nameWithType: UIElement.ArrangeCore
- uid: System.Windows.UIElement.BeginAnimation*
  parent: System.Windows.UIElement
  isExternal: false
  name: BeginAnimation
  nameWithType: UIElement.BeginAnimation
- uid: System.Windows.UIElement.BitmapEffect*
  parent: System.Windows.UIElement
  isExternal: false
  name: BitmapEffect
  nameWithType: UIElement.BitmapEffect
- uid: System.Windows.UIElement.BitmapEffectInput*
  parent: System.Windows.UIElement
  isExternal: false
  name: BitmapEffectInput
  nameWithType: UIElement.BitmapEffectInput
- uid: System.Windows.UIElement.CacheMode*
  parent: System.Windows.UIElement
  isExternal: false
  name: CacheMode
  nameWithType: UIElement.CacheMode
- uid: System.Windows.UIElement.CaptureMouse*
  parent: System.Windows.UIElement
  isExternal: false
  name: CaptureMouse
  nameWithType: UIElement.CaptureMouse
- uid: System.Windows.UIElement.CaptureStylus*
  parent: System.Windows.UIElement
  isExternal: false
  name: CaptureStylus
  nameWithType: UIElement.CaptureStylus
- uid: System.Windows.UIElement.CaptureTouch*
  parent: System.Windows.UIElement
  isExternal: false
  name: CaptureTouch
  nameWithType: UIElement.CaptureTouch
- uid: System.Windows.UIElement.Clip*
  parent: System.Windows.UIElement
  isExternal: false
  name: Clip
  nameWithType: UIElement.Clip
- uid: System.Windows.UIElement.ClipToBounds*
  parent: System.Windows.UIElement
  isExternal: false
  name: ClipToBounds
  nameWithType: UIElement.ClipToBounds
- uid: System.Windows.UIElement.CommandBindings*
  parent: System.Windows.UIElement
  isExternal: false
  name: CommandBindings
  nameWithType: UIElement.CommandBindings
- uid: System.Windows.UIElement.DesiredSize*
  parent: System.Windows.UIElement
  isExternal: false
  name: DesiredSize
  nameWithType: UIElement.DesiredSize
- uid: System.Windows.UIElement.Effect*
  parent: System.Windows.UIElement
  isExternal: false
  name: Effect
  nameWithType: UIElement.Effect
- uid: System.Windows.UIElement.Focus*
  parent: System.Windows.UIElement
  isExternal: false
  name: Focus
  nameWithType: UIElement.Focus
- uid: System.Windows.UIElement.Focusable*
  parent: System.Windows.UIElement
  isExternal: false
  name: Focusable
  nameWithType: UIElement.Focusable
- uid: System.Windows.UIElement.GetAnimationBaseValue*
  parent: System.Windows.UIElement
  isExternal: false
  name: GetAnimationBaseValue
  nameWithType: UIElement.GetAnimationBaseValue
- uid: System.Windows.UIElement.GetLayoutClip*
  parent: System.Windows.UIElement
  isExternal: false
  name: GetLayoutClip
  nameWithType: UIElement.GetLayoutClip
- uid: System.Windows.UIElement.GetUIParentCore*
  parent: System.Windows.UIElement
  isExternal: false
  name: GetUIParentCore
  nameWithType: UIElement.GetUIParentCore
- uid: System.Windows.UIElement.HasAnimatedProperties*
  parent: System.Windows.UIElement
  isExternal: false
  name: HasAnimatedProperties
  nameWithType: UIElement.HasAnimatedProperties
- uid: System.Windows.UIElement.HasEffectiveKeyboardFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: HasEffectiveKeyboardFocus
  nameWithType: UIElement.HasEffectiveKeyboardFocus
- uid: System.Windows.UIElement.HitTestCore*
  parent: System.Windows.UIElement
  isExternal: false
  name: HitTestCore
  nameWithType: UIElement.HitTestCore
- uid: System.Windows.UIElement.InputBindings*
  parent: System.Windows.UIElement
  isExternal: false
  name: InputBindings
  nameWithType: UIElement.InputBindings
- uid: System.Windows.UIElement.InputHitTest*
  parent: System.Windows.UIElement
  isExternal: false
  name: InputHitTest
  nameWithType: UIElement.InputHitTest
- uid: System.Windows.UIElement.InvalidateArrange*
  parent: System.Windows.UIElement
  isExternal: false
  name: InvalidateArrange
  nameWithType: UIElement.InvalidateArrange
- uid: System.Windows.UIElement.InvalidateMeasure*
  parent: System.Windows.UIElement
  isExternal: false
  name: InvalidateMeasure
  nameWithType: UIElement.InvalidateMeasure
- uid: System.Windows.UIElement.InvalidateVisual*
  parent: System.Windows.UIElement
  isExternal: false
  name: InvalidateVisual
  nameWithType: UIElement.InvalidateVisual
- uid: System.Windows.UIElement.IsArrangeValid*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsArrangeValid
  nameWithType: UIElement.IsArrangeValid
- uid: System.Windows.UIElement.IsEnabled*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsEnabled
  nameWithType: UIElement.IsEnabled
- uid: System.Windows.UIElement.IsEnabledCore*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsEnabledCore
  nameWithType: UIElement.IsEnabledCore
- uid: System.Windows.UIElement.IsFocused*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsFocused
  nameWithType: UIElement.IsFocused
- uid: System.Windows.UIElement.IsHitTestVisible*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsHitTestVisible
  nameWithType: UIElement.IsHitTestVisible
- uid: System.Windows.UIElement.IsInputMethodEnabled*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsInputMethodEnabled
  nameWithType: UIElement.IsInputMethodEnabled
- uid: System.Windows.UIElement.IsKeyboardFocused*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocused
  nameWithType: UIElement.IsKeyboardFocused
- uid: System.Windows.UIElement.IsKeyboardFocusWithin*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocusWithin
  nameWithType: UIElement.IsKeyboardFocusWithin
- uid: System.Windows.UIElement.IsManipulationEnabled*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsManipulationEnabled
  nameWithType: UIElement.IsManipulationEnabled
- uid: System.Windows.UIElement.IsMeasureValid*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMeasureValid
  nameWithType: UIElement.IsMeasureValid
- uid: System.Windows.UIElement.IsMouseCaptured*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCaptured
  nameWithType: UIElement.IsMouseCaptured
- uid: System.Windows.UIElement.IsMouseCaptureWithin*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCaptureWithin
  nameWithType: UIElement.IsMouseCaptureWithin
- uid: System.Windows.UIElement.IsMouseDirectlyOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseDirectlyOver
  nameWithType: UIElement.IsMouseDirectlyOver
- uid: System.Windows.UIElement.IsMouseOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseOver
  nameWithType: UIElement.IsMouseOver
- uid: System.Windows.UIElement.IsStylusCaptured*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCaptured
  nameWithType: UIElement.IsStylusCaptured
- uid: System.Windows.UIElement.IsStylusCaptureWithin*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCaptureWithin
  nameWithType: UIElement.IsStylusCaptureWithin
- uid: System.Windows.UIElement.IsStylusDirectlyOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusDirectlyOver
  nameWithType: UIElement.IsStylusDirectlyOver
- uid: System.Windows.UIElement.IsStylusOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusOver
  nameWithType: UIElement.IsStylusOver
- uid: System.Windows.UIElement.IsVisible*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsVisible
  nameWithType: UIElement.IsVisible
- uid: System.Windows.UIElement.Measure*
  parent: System.Windows.UIElement
  isExternal: false
  name: Measure
  nameWithType: UIElement.Measure
- uid: System.Windows.UIElement.MeasureCore*
  parent: System.Windows.UIElement
  isExternal: false
  name: MeasureCore
  nameWithType: UIElement.MeasureCore
- uid: System.Windows.UIElement.MoveFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: MoveFocus
  nameWithType: UIElement.MoveFocus
- uid: System.Windows.UIElement.OnAccessKey*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnAccessKey
  nameWithType: UIElement.OnAccessKey
- uid: System.Windows.UIElement.OnChildDesiredSizeChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnChildDesiredSizeChanged
  nameWithType: UIElement.OnChildDesiredSizeChanged
- uid: System.Windows.UIElement.OnCreateAutomationPeer*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnCreateAutomationPeer
  nameWithType: UIElement.OnCreateAutomationPeer
- uid: System.Windows.UIElement.OnDragEnter*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDragEnter
  nameWithType: UIElement.OnDragEnter
- uid: System.Windows.UIElement.OnDragLeave*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDragLeave
  nameWithType: UIElement.OnDragLeave
- uid: System.Windows.UIElement.OnDragOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDragOver
  nameWithType: UIElement.OnDragOver
- uid: System.Windows.UIElement.OnDrop*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDrop
  nameWithType: UIElement.OnDrop
- uid: System.Windows.UIElement.OnGiveFeedback*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGiveFeedback
  nameWithType: UIElement.OnGiveFeedback
- uid: System.Windows.UIElement.OnGotFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotFocus
  nameWithType: UIElement.OnGotFocus
- uid: System.Windows.UIElement.OnGotKeyboardFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotKeyboardFocus
  nameWithType: UIElement.OnGotKeyboardFocus
- uid: System.Windows.UIElement.OnGotMouseCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotMouseCapture
  nameWithType: UIElement.OnGotMouseCapture
- uid: System.Windows.UIElement.OnGotStylusCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotStylusCapture
  nameWithType: UIElement.OnGotStylusCapture
- uid: System.Windows.UIElement.OnGotTouchCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotTouchCapture
  nameWithType: UIElement.OnGotTouchCapture
- uid: System.Windows.UIElement.OnIsKeyboardFocusedChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsKeyboardFocusedChanged
  nameWithType: UIElement.OnIsKeyboardFocusedChanged
- uid: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsKeyboardFocusWithinChanged
  nameWithType: UIElement.OnIsKeyboardFocusWithinChanged
- uid: System.Windows.UIElement.OnIsMouseCapturedChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsMouseCapturedChanged
  nameWithType: UIElement.OnIsMouseCapturedChanged
- uid: System.Windows.UIElement.OnIsMouseCaptureWithinChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsMouseCaptureWithinChanged
  nameWithType: UIElement.OnIsMouseCaptureWithinChanged
- uid: System.Windows.UIElement.OnIsMouseDirectlyOverChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsMouseDirectlyOverChanged
  nameWithType: UIElement.OnIsMouseDirectlyOverChanged
- uid: System.Windows.UIElement.OnIsStylusCapturedChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsStylusCapturedChanged
  nameWithType: UIElement.OnIsStylusCapturedChanged
- uid: System.Windows.UIElement.OnIsStylusCaptureWithinChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsStylusCaptureWithinChanged
  nameWithType: UIElement.OnIsStylusCaptureWithinChanged
- uid: System.Windows.UIElement.OnIsStylusDirectlyOverChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsStylusDirectlyOverChanged
  nameWithType: UIElement.OnIsStylusDirectlyOverChanged
- uid: System.Windows.UIElement.OnKeyDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnKeyDown
  nameWithType: UIElement.OnKeyDown
- uid: System.Windows.UIElement.OnKeyUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnKeyUp
  nameWithType: UIElement.OnKeyUp
- uid: System.Windows.UIElement.OnLostFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostFocus
  nameWithType: UIElement.OnLostFocus
- uid: System.Windows.UIElement.OnLostKeyboardFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostKeyboardFocus
  nameWithType: UIElement.OnLostKeyboardFocus
- uid: System.Windows.UIElement.OnLostMouseCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostMouseCapture
  nameWithType: UIElement.OnLostMouseCapture
- uid: System.Windows.UIElement.OnLostStylusCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostStylusCapture
  nameWithType: UIElement.OnLostStylusCapture
- uid: System.Windows.UIElement.OnLostTouchCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostTouchCapture
  nameWithType: UIElement.OnLostTouchCapture
- uid: System.Windows.UIElement.OnManipulationBoundaryFeedback*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationBoundaryFeedback
  nameWithType: UIElement.OnManipulationBoundaryFeedback
- uid: System.Windows.UIElement.OnManipulationCompleted*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationCompleted
  nameWithType: UIElement.OnManipulationCompleted
- uid: System.Windows.UIElement.OnManipulationDelta*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationDelta
  nameWithType: UIElement.OnManipulationDelta
- uid: System.Windows.UIElement.OnManipulationInertiaStarting*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationInertiaStarting
  nameWithType: UIElement.OnManipulationInertiaStarting
- uid: System.Windows.UIElement.OnManipulationStarted*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationStarted
  nameWithType: UIElement.OnManipulationStarted
- uid: System.Windows.UIElement.OnManipulationStarting*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationStarting
  nameWithType: UIElement.OnManipulationStarting
- uid: System.Windows.UIElement.OnMouseDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseDown
  nameWithType: UIElement.OnMouseDown
- uid: System.Windows.UIElement.OnMouseEnter*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseEnter
  nameWithType: UIElement.OnMouseEnter
- uid: System.Windows.UIElement.OnMouseLeave*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseLeave
  nameWithType: UIElement.OnMouseLeave
- uid: System.Windows.UIElement.OnMouseLeftButtonDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseLeftButtonDown
  nameWithType: UIElement.OnMouseLeftButtonDown
- uid: System.Windows.UIElement.OnMouseLeftButtonUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseLeftButtonUp
  nameWithType: UIElement.OnMouseLeftButtonUp
- uid: System.Windows.UIElement.OnMouseMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseMove
  nameWithType: UIElement.OnMouseMove
- uid: System.Windows.UIElement.OnMouseRightButtonDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseRightButtonDown
  nameWithType: UIElement.OnMouseRightButtonDown
- uid: System.Windows.UIElement.OnMouseRightButtonUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseRightButtonUp
  nameWithType: UIElement.OnMouseRightButtonUp
- uid: System.Windows.UIElement.OnMouseUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseUp
  nameWithType: UIElement.OnMouseUp
- uid: System.Windows.UIElement.OnMouseWheel*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseWheel
  nameWithType: UIElement.OnMouseWheel
- uid: System.Windows.UIElement.OnPreviewDragEnter*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDragEnter
  nameWithType: UIElement.OnPreviewDragEnter
- uid: System.Windows.UIElement.OnPreviewDragLeave*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDragLeave
  nameWithType: UIElement.OnPreviewDragLeave
- uid: System.Windows.UIElement.OnPreviewDragOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDragOver
  nameWithType: UIElement.OnPreviewDragOver
- uid: System.Windows.UIElement.OnPreviewDrop*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDrop
  nameWithType: UIElement.OnPreviewDrop
- uid: System.Windows.UIElement.OnPreviewGiveFeedback*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewGiveFeedback
  nameWithType: UIElement.OnPreviewGiveFeedback
- uid: System.Windows.UIElement.OnPreviewGotKeyboardFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewGotKeyboardFocus
  nameWithType: UIElement.OnPreviewGotKeyboardFocus
- uid: System.Windows.UIElement.OnPreviewKeyDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewKeyDown
  nameWithType: UIElement.OnPreviewKeyDown
- uid: System.Windows.UIElement.OnPreviewKeyUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewKeyUp
  nameWithType: UIElement.OnPreviewKeyUp
- uid: System.Windows.UIElement.OnPreviewLostKeyboardFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewLostKeyboardFocus
  nameWithType: UIElement.OnPreviewLostKeyboardFocus
- uid: System.Windows.UIElement.OnPreviewMouseDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseDown
  nameWithType: UIElement.OnPreviewMouseDown
- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseLeftButtonDown
  nameWithType: UIElement.OnPreviewMouseLeftButtonDown
- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseLeftButtonUp
  nameWithType: UIElement.OnPreviewMouseLeftButtonUp
- uid: System.Windows.UIElement.OnPreviewMouseMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseMove
  nameWithType: UIElement.OnPreviewMouseMove
- uid: System.Windows.UIElement.OnPreviewMouseRightButtonDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseRightButtonDown
  nameWithType: UIElement.OnPreviewMouseRightButtonDown
- uid: System.Windows.UIElement.OnPreviewMouseRightButtonUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseRightButtonUp
  nameWithType: UIElement.OnPreviewMouseRightButtonUp
- uid: System.Windows.UIElement.OnPreviewMouseUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseUp
  nameWithType: UIElement.OnPreviewMouseUp
- uid: System.Windows.UIElement.OnPreviewMouseWheel*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseWheel
  nameWithType: UIElement.OnPreviewMouseWheel
- uid: System.Windows.UIElement.OnPreviewQueryContinueDrag*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewQueryContinueDrag
  nameWithType: UIElement.OnPreviewQueryContinueDrag
- uid: System.Windows.UIElement.OnPreviewStylusButtonDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusButtonDown
  nameWithType: UIElement.OnPreviewStylusButtonDown
- uid: System.Windows.UIElement.OnPreviewStylusButtonUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusButtonUp
  nameWithType: UIElement.OnPreviewStylusButtonUp
- uid: System.Windows.UIElement.OnPreviewStylusDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusDown
  nameWithType: UIElement.OnPreviewStylusDown
- uid: System.Windows.UIElement.OnPreviewStylusInAirMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusInAirMove
  nameWithType: UIElement.OnPreviewStylusInAirMove
- uid: System.Windows.UIElement.OnPreviewStylusInRange*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusInRange
  nameWithType: UIElement.OnPreviewStylusInRange
- uid: System.Windows.UIElement.OnPreviewStylusMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusMove
  nameWithType: UIElement.OnPreviewStylusMove
- uid: System.Windows.UIElement.OnPreviewStylusOutOfRange*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusOutOfRange
  nameWithType: UIElement.OnPreviewStylusOutOfRange
- uid: System.Windows.UIElement.OnPreviewStylusSystemGesture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusSystemGesture
  nameWithType: UIElement.OnPreviewStylusSystemGesture
- uid: System.Windows.UIElement.OnPreviewStylusUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusUp
  nameWithType: UIElement.OnPreviewStylusUp
- uid: System.Windows.UIElement.OnPreviewTextInput*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTextInput
  nameWithType: UIElement.OnPreviewTextInput
- uid: System.Windows.UIElement.OnPreviewTouchDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTouchDown
  nameWithType: UIElement.OnPreviewTouchDown
- uid: System.Windows.UIElement.OnPreviewTouchMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTouchMove
  nameWithType: UIElement.OnPreviewTouchMove
- uid: System.Windows.UIElement.OnPreviewTouchUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTouchUp
  nameWithType: UIElement.OnPreviewTouchUp
- uid: System.Windows.UIElement.OnQueryContinueDrag*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnQueryContinueDrag
  nameWithType: UIElement.OnQueryContinueDrag
- uid: System.Windows.UIElement.OnQueryCursor*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnQueryCursor
  nameWithType: UIElement.OnQueryCursor
- uid: System.Windows.UIElement.OnRender*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnRender
  nameWithType: UIElement.OnRender
- uid: System.Windows.UIElement.OnRenderSizeChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnRenderSizeChanged
  nameWithType: UIElement.OnRenderSizeChanged
- uid: System.Windows.UIElement.OnStylusButtonDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusButtonDown
  nameWithType: UIElement.OnStylusButtonDown
- uid: System.Windows.UIElement.OnStylusButtonUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusButtonUp
  nameWithType: UIElement.OnStylusButtonUp
- uid: System.Windows.UIElement.OnStylusDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusDown
  nameWithType: UIElement.OnStylusDown
- uid: System.Windows.UIElement.OnStylusEnter*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusEnter
  nameWithType: UIElement.OnStylusEnter
- uid: System.Windows.UIElement.OnStylusInAirMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusInAirMove
  nameWithType: UIElement.OnStylusInAirMove
- uid: System.Windows.UIElement.OnStylusInRange*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusInRange
  nameWithType: UIElement.OnStylusInRange
- uid: System.Windows.UIElement.OnStylusLeave*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusLeave
  nameWithType: UIElement.OnStylusLeave
- uid: System.Windows.UIElement.OnStylusMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusMove
  nameWithType: UIElement.OnStylusMove
- uid: System.Windows.UIElement.OnStylusOutOfRange*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusOutOfRange
  nameWithType: UIElement.OnStylusOutOfRange
- uid: System.Windows.UIElement.OnStylusSystemGesture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusSystemGesture
  nameWithType: UIElement.OnStylusSystemGesture
- uid: System.Windows.UIElement.OnStylusUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusUp
  nameWithType: UIElement.OnStylusUp
- uid: System.Windows.UIElement.OnTextInput*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTextInput
  nameWithType: UIElement.OnTextInput
- uid: System.Windows.UIElement.OnTouchDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchDown
  nameWithType: UIElement.OnTouchDown
- uid: System.Windows.UIElement.OnTouchEnter*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchEnter
  nameWithType: UIElement.OnTouchEnter
- uid: System.Windows.UIElement.OnTouchLeave*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchLeave
  nameWithType: UIElement.OnTouchLeave
- uid: System.Windows.UIElement.OnTouchMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchMove
  nameWithType: UIElement.OnTouchMove
- uid: System.Windows.UIElement.OnTouchUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchUp
  nameWithType: UIElement.OnTouchUp
- uid: System.Windows.UIElement.OnVisualParentChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnVisualParentChanged
  nameWithType: UIElement.OnVisualParentChanged
- uid: System.Windows.UIElement.Opacity*
  parent: System.Windows.UIElement
  isExternal: false
  name: Opacity
  nameWithType: UIElement.Opacity
- uid: System.Windows.UIElement.OpacityMask*
  parent: System.Windows.UIElement
  isExternal: false
  name: OpacityMask
  nameWithType: UIElement.OpacityMask
- uid: System.Windows.UIElement.PersistId*
  parent: System.Windows.UIElement
  isExternal: false
  name: PersistId
  nameWithType: UIElement.PersistId
- uid: System.Windows.UIElement.PredictFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: PredictFocus
  nameWithType: UIElement.PredictFocus
- uid: System.Windows.UIElement.RaiseEvent*
  parent: System.Windows.UIElement
  isExternal: false
  name: RaiseEvent
  nameWithType: UIElement.RaiseEvent
- uid: System.Windows.UIElement.ReleaseAllTouchCaptures*
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseAllTouchCaptures
  nameWithType: UIElement.ReleaseAllTouchCaptures
- uid: System.Windows.UIElement.ReleaseMouseCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseMouseCapture
  nameWithType: UIElement.ReleaseMouseCapture
- uid: System.Windows.UIElement.ReleaseStylusCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseStylusCapture
  nameWithType: UIElement.ReleaseStylusCapture
- uid: System.Windows.UIElement.ReleaseTouchCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseTouchCapture
  nameWithType: UIElement.ReleaseTouchCapture
- uid: System.Windows.UIElement.RemoveHandler*
  parent: System.Windows.UIElement
  isExternal: false
  name: RemoveHandler
  nameWithType: UIElement.RemoveHandler
- uid: System.Windows.UIElement.RenderSize*
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderSize
  nameWithType: UIElement.RenderSize
- uid: System.Windows.UIElement.RenderTransform*
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderTransform
  nameWithType: UIElement.RenderTransform
- uid: System.Windows.UIElement.RenderTransformOrigin*
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderTransformOrigin
  nameWithType: UIElement.RenderTransformOrigin
- uid: System.Windows.UIElement.ShouldSerializeCommandBindings*
  parent: System.Windows.UIElement
  isExternal: false
  name: ShouldSerializeCommandBindings
  nameWithType: UIElement.ShouldSerializeCommandBindings
- uid: System.Windows.UIElement.ShouldSerializeInputBindings*
  parent: System.Windows.UIElement
  isExternal: false
  name: ShouldSerializeInputBindings
  nameWithType: UIElement.ShouldSerializeInputBindings
- uid: System.Windows.UIElement.SnapsToDevicePixels*
  parent: System.Windows.UIElement
  isExternal: false
  name: SnapsToDevicePixels
  nameWithType: UIElement.SnapsToDevicePixels
- uid: System.Windows.UIElement.StylusPlugIns*
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusPlugIns
  nameWithType: UIElement.StylusPlugIns
- uid: System.Windows.UIElement.TouchesCaptured*
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesCaptured
  nameWithType: UIElement.TouchesCaptured
- uid: System.Windows.UIElement.TouchesCapturedWithin*
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesCapturedWithin
  nameWithType: UIElement.TouchesCapturedWithin
- uid: System.Windows.UIElement.TouchesDirectlyOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesDirectlyOver
  nameWithType: UIElement.TouchesDirectlyOver
- uid: System.Windows.UIElement.TouchesOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesOver
  nameWithType: UIElement.TouchesOver
- uid: System.Windows.UIElement.TranslatePoint*
  parent: System.Windows.UIElement
  isExternal: false
  name: TranslatePoint
  nameWithType: UIElement.TranslatePoint
- uid: System.Windows.UIElement.Uid*
  parent: System.Windows.UIElement
  isExternal: false
  name: Uid
  nameWithType: UIElement.Uid
- uid: System.Windows.UIElement.UpdateLayout*
  parent: System.Windows.UIElement
  isExternal: false
  name: UpdateLayout
  nameWithType: UIElement.UpdateLayout
- uid: System.Windows.UIElement.Visibility*
  parent: System.Windows.UIElement
  isExternal: false
  name: Visibility
  nameWithType: UIElement.Visibility
