### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.ICommandSource
  id: ICommandSource
  children:
  - System.Windows.Input.ICommandSource.Command
  - System.Windows.Input.ICommandSource.CommandParameter
  - System.Windows.Input.ICommandSource.CommandTarget
  langs:
  - csharp
  name: ICommandSource
  nameWithType: ICommandSource
  fullName: System.Windows.Input.ICommandSource
  type: Interface
  summary: "定義知道如何叫用命令的物件。"
  remarks: "命令來源定義命令如何叫用該特定物件。  例如，如果<xref:System.Windows.Controls.Button>相關聯的命令，此命令時叫用<xref:System.Windows.Controls.Button>按下。</xref:System.Windows.Controls.Button> </xref:System.Windows.Controls.Button>       命令來源通常如果會停用本身相關聯的命令無法在目前命令目標上執行。  例如，<xref:System.Windows.Controls.MenuItem>聯<xref:System.Windows.Input.ApplicationCommands.Paste%2A>命令都變成灰色本身時<xref:System.Windows.Input.ApplicationCommands.Paste%2A>命令無法在目前命令目標上執行。</xref:System.Windows.Input.ApplicationCommands.Paste%2A> </xref:System.Windows.Input.ApplicationCommands.Paste%2A> </xref:System.Windows.Controls.MenuItem>       一般來說，將接聽命令來源<xref:System.Windows.Input.ICommand.CanExecuteChanged>命令上的事件。</xref:System.Windows.Input.ICommand.CanExecuteChanged>  這會通知命令來源，例如失去鍵盤焦點的命令目標上的條件變更時。  命令來源然後查詢命令使用<xref:System.Windows.Input.ICommand.CanExecute%2A>方法。</xref:System.Windows.Input.ICommand.CanExecute%2A>       部分類別中[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]ICommandSource 是的可實作︰ <xref:System.Windows.Controls.Primitives.ButtonBase>， <xref:System.Windows.Controls.MenuItem>，和<xref:System.Windows.Documents.Hyperlink>。</xref:System.Windows.Documents.Hyperlink> </xref:System.Windows.Controls.MenuItem> </xref:System.Windows.Controls.Primitives.ButtonBase>       在[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]指揮系統， <xref:System.Windows.Input.InputBinding.CommandTarget%2A>ICommandSource 屬性時，才適用<xref:System.Windows.Input.ICommand>為<xref:System.Windows.Input.RoutedCommand>。</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.InputBinding.CommandTarget%2A>  如果<xref:System.Windows.Input.InputBinding.CommandTarget%2A>ICommandSource 上設定並不是對應的命令<xref:System.Windows.Input.RoutedCommand>，則會忽略命令目標。</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.InputBinding.CommandTarget%2A>"
  syntax:
    content: public interface ICommandSource
  implements: []
  platform:
  - net462
- uid: System.Windows.Input.ICommandSource.Command
  id: Command
  parent: System.Windows.Input.ICommandSource
  langs:
  - csharp
  name: Command
  nameWithType: ICommandSource.Command
  fullName: System.Windows.Input.ICommandSource.Command
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得將在叫用命令來源時執行的命令。"
  syntax:
    content: public System.Windows.Input.ICommand Command { get; }
    return:
      type: System.Windows.Input.ICommand
      description: "叫用命令來源時，會執行命令。"
  overload: System.Windows.Input.ICommandSource.Command*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ICommandSource.CommandParameter
  id: CommandParameter
  parent: System.Windows.Input.ICommandSource
  langs:
  - csharp
  name: CommandParameter
  nameWithType: ICommandSource.CommandParameter
  fullName: System.Windows.Input.ICommandSource.CommandParameter
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "代表使用者定義的資料值，可以在執行時傳遞至命令。"
  remarks: "通常，CommandParameter 用來執行時傳遞給命令的特定資訊。  命令所定義的資料類型。"
  syntax:
    content: public object CommandParameter { get; }
    return:
      type: System.Object
      description: "命令的特定資料。"
  overload: System.Windows.Input.ICommandSource.CommandParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ICommandSource.CommandTarget
  id: CommandTarget
  parent: System.Windows.Input.ICommandSource
  langs:
  - csharp
  name: CommandTarget
  nameWithType: ICommandSource.CommandTarget
  fullName: System.Windows.Input.ICommandSource.CommandTarget
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "正在其執行的命令物件。"
  remarks: "在[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]指揮系統，<xref:System.Windows.Input.InputBinding.CommandTarget%2A>屬性<xref:System.Windows.Input.ICommandSource>適用時才<xref:System.Windows.Input.ICommand>為<xref:System.Windows.Input.RoutedCommand>。</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.ICommandSource> </xref:System.Windows.Input.InputBinding.CommandTarget%2A>  如果<xref:System.Windows.Input.InputBinding.CommandTarget%2A>上設定<xref:System.Windows.Input.ICommandSource>和對應的命令不是<xref:System.Windows.Input.RoutedCommand>，則會忽略命令目標。</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommandSource> </xref:System.Windows.Input.InputBinding.CommandTarget%2A>       當搭配<xref:System.Windows.Input.RoutedCommand>，命令目標會在其上的物件<xref:System.Windows.Input.CommandManager.Executed>和<xref:System.Windows.Input.CommandManager.CanExecute>引發事件。</xref:System.Windows.Input.CommandManager.CanExecute> </xref:System.Windows.Input.CommandManager.Executed> </xref:System.Windows.Input.RoutedCommand> 如果未設定 CommandTarget 屬性，具有鍵盤焦點的項目會用做為目標。"
  syntax:
    content: public System.Windows.IInputElement CommandTarget { get; }
    return:
      type: System.Windows.IInputElement
      description: "正在其執行的命令物件。"
  overload: System.Windows.Input.ICommandSource.CommandTarget*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.ICommandSource.Command
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: Command
  nameWithType: ICommandSource.Command
  fullName: System.Windows.Input.ICommandSource.Command
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.ICommandSource.CommandParameter
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: CommandParameter
  nameWithType: ICommandSource.CommandParameter
  fullName: System.Windows.Input.ICommandSource.CommandParameter
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.ICommandSource.CommandTarget
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: CommandTarget
  nameWithType: ICommandSource.CommandTarget
  fullName: System.Windows.Input.ICommandSource.CommandTarget
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.ICommandSource.Command*
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: Command
  nameWithType: ICommandSource.Command
- uid: System.Windows.Input.ICommandSource.CommandParameter*
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: CommandParameter
  nameWithType: ICommandSource.CommandParameter
- uid: System.Windows.Input.ICommandSource.CommandTarget*
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: CommandTarget
  nameWithType: ICommandSource.CommandTarget
