### YamlMime:ManagedReference
items:
- uid: System.EnterpriseServices.Internal.IComSoapPublisher
  id: IComSoapPublisher
  children:
  - System.EnterpriseServices.Internal.IComSoapPublisher.CreateMailBox(System.String,System.String,System.String@,System.String@,System.String@,System.String@)
  - System.EnterpriseServices.Internal.IComSoapPublisher.CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)
  - System.EnterpriseServices.Internal.IComSoapPublisher.DeleteMailBox(System.String,System.String,System.String@)
  - System.EnterpriseServices.Internal.IComSoapPublisher.DeleteVirtualRoot(System.String,System.String,System.String@)
  - System.EnterpriseServices.Internal.IComSoapPublisher.GacInstall(System.String)
  - System.EnterpriseServices.Internal.IComSoapPublisher.GacRemove(System.String)
  - System.EnterpriseServices.Internal.IComSoapPublisher.GetAssemblyNameForCache(System.String,System.String@)
  - System.EnterpriseServices.Internal.IComSoapPublisher.GetTypeNameFromProgId(System.String,System.String)
  - System.EnterpriseServices.Internal.IComSoapPublisher.ProcessClientTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)
  - System.EnterpriseServices.Internal.IComSoapPublisher.ProcessServerTlb(System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)
  - System.EnterpriseServices.Internal.IComSoapPublisher.RegisterAssembly(System.String)
  - System.EnterpriseServices.Internal.IComSoapPublisher.UnRegisterAssembly(System.String)
  langs:
  - csharp
  name: IComSoapPublisher
  nameWithType: IComSoapPublisher
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher
  type: Interface
  summary: "發行已啟用 SOAP 的 COM + 應用程式的 COM 介面。"
  remarks: "實作 IComSoapPublisher <xref:System.EnterpriseServices.Internal.Publish>; 請參閱該主題取得詳細資訊。</xref:System.EnterpriseServices.Internal.Publish>       .NET Framework IComSoapPublisher 會在內部使用。 您不需要在您的程式碼中直接使用它。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.Guid("d8013eee-730b-45e2-ba24-874b7242c425")]

      public interface IComSoapPublisher
  implements: []
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.CreateMailBox(System.String,System.String,System.String@,System.String@,System.String@,System.String@)
  id: CreateMailBox(System.String,System.String,System.String@,System.String@,System.String@,System.String@)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  langs:
  - csharp
  name: CreateMailBox(String,String,String,String,String,String)
  nameWithType: IComSoapPublisher.CreateMailBox(String,String,String,String,String,String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.CreateMailBox(String,String,String,String,String,String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "在指定的 URL 建立 SOAP 啟用 COM + 應用程式信箱。 未完全實作。"
  remarks: "未完整實作。目前，不會建立信箱。 傳回的錯誤訊息 「 COM + SOAP 服務不支援 SMTP 發行集 」。"
  syntax:
    content: public void CreateMailBox (string RootMailServer, string MailBox, out string SmtpName, out string Domain, out string PhysicalPath, out string Error);
    parameters:
    - id: RootMailServer
      type: System.String
      description: "根郵件伺服器的 URL。"
    - id: MailBox
      type: System.String
      description: "若要建立信箱。"
    - id: SmtpName
      type: System.String
      description: "此方法傳回時，此參數會包含包含信箱的 Simple Mail Transfer Protocol (SMTP) 伺服器的名稱。"
    - id: Domain
      type: System.String
      description: "此方法傳回時，此參數會包含 SMTP 伺服器的網域。"
    - id: PhysicalPath
      type: System.String
      description: "此方法傳回時，此參數會包含信箱的檔案系統路徑。"
    - id: Error
      type: System.String
      description: "此方法傳回時，此參數會包含錯誤訊息，如果遇到問題。"
  overload: System.EnterpriseServices.Internal.IComSoapPublisher.CreateMailBox*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫鏈結中的呼叫端沒有存取 unmanaged 程式碼的權限。"
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)
  id: CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  langs:
  - csharp
  name: CreateVirtualRoot(String,String,String,String,String,String)
  nameWithType: IComSoapPublisher.CreateVirtualRoot(String,String,String,String,String,String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.CreateVirtualRoot(String,String,String,String,String,String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "建立 SOAP 啟用 COM + 應用程式虛擬根目錄。"
  remarks: "建議<xref:System.EnterpriseServices.Internal.ISoapServerVRoot.CreateVirtualRootEx%2A>代替 CreateVirtualRoot。</xref:System.EnterpriseServices.Internal.ISoapServerVRoot.CreateVirtualRootEx%2A>"
  syntax:
    content: public void CreateVirtualRoot (string Operation, string FullUrl, out string BaseUrl, out string VirtualRoot, out string PhysicalPath, out string Error);
    parameters:
    - id: Operation
      type: System.String
      description: "要執行的作業。"
    - id: FullUrl
      type: System.String
      description: "完整的 URL 位址的虛擬根目錄。"
    - id: BaseUrl
      type: System.String
      description: "此方法傳回時，此參數會包含基底 URL 位址。"
    - id: VirtualRoot
      type: System.String
      description: "此方法傳回時，此參數會包含虛擬根目錄的名稱。"
    - id: PhysicalPath
      type: System.String
      description: "此方法傳回時，此參數會包含為虛擬根目錄的檔案路徑。"
    - id: Error
      type: System.String
      description: "此方法傳回時，此參數會包含錯誤訊息，如果遇到問題。"
  overload: System.EnterpriseServices.Internal.IComSoapPublisher.CreateVirtualRoot*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫鏈結中的呼叫端沒有存取 unmanaged 程式碼的權限。       -或者-呼叫端沒有存取網域名稱系統 (DNS) 資訊的權限。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>FullUrl</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "本機主機名稱解析時，發生錯誤。"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>FullUrl</code>是空的。       -中指定的配置<code>FullUrl</code>無效。       -或-<code>FullUrl</code>包含兩個以上的連續斜線。       -中指定的密碼<code>FullUrl</code>無效。       -或-中指定的主機名稱<code>FullUrl</code>無效。       -或-檔案名稱中指定<code>FullUrl</code>無效。"
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.DeleteMailBox(System.String,System.String,System.String@)
  id: DeleteMailBox(System.String,System.String,System.String@)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  langs:
  - csharp
  name: DeleteMailBox(String,String,String)
  nameWithType: IComSoapPublisher.DeleteMailBox(String,String,String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.DeleteMailBox(String,String,String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "刪除在指定的 URL 啟用 SOAP 的 COM + 應用程式信箱。 未完全實作。"
  remarks: "未完整實作。不會刪除信箱。 傳回的錯誤訊息 「 COM + SOAP 服務不支援 SMTP 發行集 」。"
  syntax:
    content: public void DeleteMailBox (string RootMailServer, string MailBox, out string Error);
    parameters:
    - id: RootMailServer
      type: System.String
      description: "根郵件伺服器的 URL。"
    - id: MailBox
      type: System.String
      description: "要刪除的信箱。"
    - id: Error
      type: System.String
      description: "此方法傳回時，此參數會包含錯誤訊息，如果遇到問題。"
  overload: System.EnterpriseServices.Internal.IComSoapPublisher.DeleteMailBox*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫鏈結中的呼叫端沒有存取 unmanaged 程式碼的權限。"
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.DeleteVirtualRoot(System.String,System.String,System.String@)
  id: DeleteVirtualRoot(System.String,System.String,System.String@)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  langs:
  - csharp
  name: DeleteVirtualRoot(String,String,String)
  nameWithType: IComSoapPublisher.DeleteVirtualRoot(String,String,String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.DeleteVirtualRoot(String,String,String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "刪除已啟用 SOAP 的 COM + 應用程式虛擬根目錄。 未完全實作。"
  remarks: "功能<xref:System.EnterpriseServices.Internal.Publish.DeleteVirtualRoot%2A>尚無法使用。</xref:System.EnterpriseServices.Internal.Publish.DeleteVirtualRoot%2A>      > [!CAUTION] > 方法不會產生錯誤，目前會傳回但不是會刪除虛擬根目錄。       當功能就會變成可用時，建議使用這個方法會<xref:System.EnterpriseServices.Internal.SoapServerVRoot.DeleteVirtualRootEx%2A>.</xref:System.EnterpriseServices.Internal.SoapServerVRoot.DeleteVirtualRootEx%2A>"
  syntax:
    content: public void DeleteVirtualRoot (string RootWebServer, string FullUrl, out string Error);
    parameters:
    - id: RootWebServer
      type: System.String
      description: "根 Web 伺服器。"
    - id: FullUrl
      type: System.String
      description: "完整的 URL 位址的虛擬根目錄。"
    - id: Error
      type: System.String
      description: "此方法傳回時，此參數會包含錯誤訊息，如果遇到問題。"
  overload: System.EnterpriseServices.Internal.IComSoapPublisher.DeleteVirtualRoot*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫鏈結中的呼叫端沒有存取 unmanaged 程式碼的權限。"
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.GacInstall(System.String)
  id: GacInstall(System.String)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  langs:
  - csharp
  name: GacInstall(String)
  nameWithType: IComSoapPublisher.GacInstall(String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.GacInstall(String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "組件安裝在全域組件快取中。"
  syntax:
    content: public void GacInstall (string AssemblyPath);
    parameters:
    - id: AssemblyPath
      type: System.String
      description: "組件之檔案系統路徑。"
  overload: System.EnterpriseServices.Internal.IComSoapPublisher.GacInstall*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫鏈結中的呼叫端沒有存取 unmanaged 程式碼的權限。"
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.GacRemove(System.String)
  id: GacRemove(System.String)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  langs:
  - csharp
  name: GacRemove(String)
  nameWithType: IComSoapPublisher.GacRemove(String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.GacRemove(String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "從全域組件快取中移除組件。"
  syntax:
    content: public void GacRemove (string AssemblyPath);
    parameters:
    - id: AssemblyPath
      type: System.String
      description: "組件之檔案系統路徑。"
  overload: System.EnterpriseServices.Internal.IComSoapPublisher.GacRemove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>AssemblyPath</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>AssemblyPath</code>是空的。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<code>AssemblyPath</code>找不到。"
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "兩次使用兩個不同的辨識項載入組件或模組。"
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>AssemblyPath</code>不是有效的組件。"
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.GetAssemblyNameForCache(System.String,System.String@)
  id: GetAssemblyNameForCache(System.String,System.String@)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  langs:
  - csharp
  name: GetAssemblyNameForCache(String,String)
  nameWithType: IComSoapPublisher.GetAssemblyNameForCache(String,String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.GetAssemblyNameForCache(String,String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "傳回強式名稱簽署產生的組件 SoapCache 目錄中的完整路徑。"
  remarks: "Unmanaged COM + 元件已發佈，透過 SOAP 端點的.NET 遠端處理，必須可讓.NET Framework 中使用的 unmanaged 的元件會產生 proxy。 這樣做，以程式設計方式執行相同的步驟，做為類型程式庫匯入工具 (Tlbimp.exe)，[!INCLUDE[winsdklong](~/add/includes/winsdklong-md.md)]工具，用於 proxy 的中繼資料組件轉換成 unmanaged 的 COM + 型別程式庫。 不過，對於透過成功的 SOAP 用戶端啟用，用戶端和伺服器電腦必須共用相同的強式名稱簽章的中繼資料 proxy。 基於這個理由，受管理的 proxy 組件時產生的 unmanaged COM + 元件，強式名稱金鑰也產生並用於登入 proxy 的組件。"
  syntax:
    content: public void GetAssemblyNameForCache (string TypeLibPath, out string CachePath);
    parameters:
    - id: TypeLibPath
      type: System.String
      description: "包含型別程式庫檔案的路徑。"
    - id: CachePath
      type: System.String
      description: "此方法傳回時，此參數會包含 proxy 中的組件 SoapCache 目錄的完整路徑。"
  overload: System.EnterpriseServices.Internal.IComSoapPublisher.GetAssemblyNameForCache*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>TypeLibPath</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "檔案名稱是空的、 只包含空格，或包含無效的字元。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "若要存取<code> TypeLibPath </code>遭到拒絕。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定的路徑、 檔案名稱，或兩者都超出系統定義的長度上限。 例如，windows 平台上，路徑必須少於 248 個字元，和檔案名稱必須少於 260 個字元。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>TypeLibPath</code>包含字串的中間的冒號 （:）。"
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.GetTypeNameFromProgId(System.String,System.String)
  id: GetTypeNameFromProgId(System.String,System.String)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  langs:
  - csharp
  name: GetTypeNameFromProgId(String,String)
  nameWithType: IComSoapPublisher.GetTypeNameFromProgId(String,String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.GetTypeNameFromProgId(String,String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "會透過組件反映，並傳回符合 ProgID 的類型名稱。"
  syntax:
    content: public string GetTypeNameFromProgId (string AssemblyPath, string ProgId);
    parameters:
    - id: AssemblyPath
      type: System.String
      description: "組件之檔案系統路徑。"
    - id: ProgId
      type: System.String
      description: "類別的程式設計識別項。"
    return:
      type: System.String
      description: "符合 ProgID 的類型名稱。"
  overload: System.EnterpriseServices.Internal.IComSoapPublisher.GetTypeNameFromProgId*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫鏈結中的呼叫端沒有存取 unmanaged 程式碼的權限。"
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.ProcessClientTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)
  id: ProcessClientTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  langs:
  - csharp
  name: ProcessClientTlb(String,String,String,String,String,String,String,String,String,String)
  nameWithType: IComSoapPublisher.ProcessClientTlb(String,String,String,String,String,String,String,String,String,String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.ProcessClientTlb(String,String,String,String,String,String,String,String,String,String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "處理用戶端型別程式庫，建立用戶端上的組態檔。"
  remarks: "這個方法在用戶端 proxy 匯入用於產生遠端組態檔。       在實作中，如果`Mode`參數為&quot;wellknownobject&quot;或空字串 (&quot;&quot;)，會假設已知的物件。否則，會假設用戶端啟用。       建議<xref:System.EnterpriseServices.Internal.ISoapClientImport.ProcessClientTlbEx%2A>代替 ProcessClientTlb。</xref:System.EnterpriseServices.Internal.ISoapClientImport.ProcessClientTlbEx%2A>"
  syntax:
    content: public void ProcessClientTlb (string ProgId, string SrcTlbPath, string PhysicalPath, string VRoot, string BaseUrl, string Mode, string Transport, out string AssemblyName, out string TypeName, out string Error);
    parameters:
    - id: ProgId
      type: System.String
      description: "類別的程式設計識別項。"
    - id: SrcTlbPath
      type: System.String
      description: "包含型別程式庫檔案的路徑。"
    - id: PhysicalPath
      type: System.String
      description: "Web 應用程式目錄中。"
    - id: VRoot
      type: System.String
      description: "虛擬根目錄的名稱。"
    - id: BaseUrl
      type: System.String
      description: "基底 URL，其中包含虛擬根目錄。"
    - id: Mode
      type: System.String
      description: "啟動模式。"
    - id: Transport
      type: System.String
      description: "未使用。 指定<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>這個參數。"
    - id: AssemblyName
      type: System.String
      description: "此方法傳回時，此參數會包含組件的顯示名稱。"
    - id: TypeName
      type: System.String
      description: "此方法傳回時，此參數會包含組件的完整限定類型名稱。"
    - id: Error
      type: System.String
      description: "此方法傳回時，此參數會包含錯誤訊息，如果遇到問題。"
  overload: System.EnterpriseServices.Internal.IComSoapPublisher.ProcessClientTlb*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫鏈結中的呼叫端沒有存取 unmanaged 程式碼的權限。"
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.ProcessServerTlb(System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)
  id: ProcessServerTlb(System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  langs:
  - csharp
  name: ProcessServerTlb(String,String,String,String,String,String,String)
  nameWithType: IComSoapPublisher.ProcessServerTlb(String,String,String,String,String,String,String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.ProcessServerTlb(String,String,String,String,String,String,String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "處理伺服器類型程式庫，透過加入或刪除元件 Web.config 和 Default.disco 檔案的項目。 如有必要，產生的 proxy。"
  remarks: "會產生 COM + 元件的 Web.config 和 Default.disco 檔案項目。 如有必要，產生的 proxy。       建議<xref:System.EnterpriseServices.Internal.ISoapServerTlb.AddServerTlb%2A>和<xref:System.EnterpriseServices.Internal.ISoapServerTlb.DeleteServerTlb%2A>代替 ProcessServerTlb。</xref:System.EnterpriseServices.Internal.ISoapServerTlb.DeleteServerTlb%2A> </xref:System.EnterpriseServices.Internal.ISoapServerTlb.AddServerTlb%2A>"
  syntax:
    content: public void ProcessServerTlb (string ProgId, string SrcTlbPath, string PhysicalPath, string Operation, out string AssemblyName, out string TypeName, out string Error);
    parameters:
    - id: ProgId
      type: System.String
      description: "類別的程式設計識別項。"
    - id: SrcTlbPath
      type: System.String
      description: "包含型別程式庫檔案的路徑。"
    - id: PhysicalPath
      type: System.String
      description: "Web 應用程式目錄中。"
    - id: Operation
      type: System.String
      description: "要執行的作業。"
    - id: AssemblyName
      type: System.String
      description: "此方法傳回時，此參數會包含組件的顯示名稱。"
    - id: TypeName
      type: System.String
      description: "此方法傳回時，此參數會包含組件的完整限定類型名稱。"
    - id: Error
      type: System.String
      description: "此方法傳回時，此參數會包含錯誤訊息，如果遇到問題。"
  overload: System.EnterpriseServices.Internal.IComSoapPublisher.ProcessServerTlb*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫鏈結中的呼叫端沒有存取 unmanaged 程式碼的權限。"
  - type: System.EnterpriseServices.ServicedComponentException
    commentId: T:System.EnterpriseServices.ServicedComponentException
    description: "<code> SrcTlbPath </code>參數參照 scrobj.dll; 因此，不支援指令碼元件的 SOAP 發行。"
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.RegisterAssembly(System.String)
  id: RegisterAssembly(System.String)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  langs:
  - csharp
  name: RegisterAssembly(String)
  nameWithType: IComSoapPublisher.RegisterAssembly(String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.RegisterAssembly(String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "註冊 COM interop 組件。"
  remarks: "RegisterAssembly 實作會使用組件註冊工具 (Regasm.exe) 來註冊組件中可建立的類別。 如需詳細資訊，請參閱[Regasm.exe （組件登錄工具）](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void RegisterAssembly (string AssemblyPath);
    parameters:
    - id: AssemblyPath
      type: System.String
      description: "組件之檔案系統路徑。"
  overload: System.EnterpriseServices.Internal.IComSoapPublisher.RegisterAssembly*
  exceptions:
  - type: System.EnterpriseServices.RegistrationException
    commentId: T:System.EnterpriseServices.RegistrationException
    description: "輸入組件沒有強式名稱。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫鏈結中的呼叫端沒有存取 unmanaged 程式碼的權限。       -或-指定的 codebase 不是以&quot;file:// 開頭，且沒有必要<xref href=&quot;System.Net.WebPermission&quot;> </xref>。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>AssemblyPath</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<code>AssemblyPath</code>找不到，或未指定檔案的副檔名。"
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>AssemblyPath</code>不是有效的組件。"
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "組件或模組兩次使用兩個不同的辨識項載入組件名稱長度超過 MAX_PATH 字元數。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "以標記方法<xref href=&quot;System.Runtime.InteropServices.ComUnregisterFunctionAttribute&quot;></xref>不<xref uid=&quot;langword_csharp_static&quot; name=&quot;static&quot; href=&quot;&quot;> </xref>。       -或-沒有標記為一個以上方法<xref href=&quot;System.Runtime.InteropServices.ComUnregisterFunctionAttribute&quot;></xref>給定層級的階層。       -或-加上方法的簽章<xref href=&quot;System.Runtime.InteropServices.ComUnregisterFunctionAttribute&quot;></xref>不正確。"
  platform:
  - net462
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.UnRegisterAssembly(System.String)
  id: UnRegisterAssembly(System.String)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  langs:
  - csharp
  name: UnRegisterAssembly(String)
  nameWithType: IComSoapPublisher.UnRegisterAssembly(String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.UnRegisterAssembly(String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices.Internal
  summary: "取消註冊 COM interop 組件。"
  remarks: "UnRegisterAssembly 的實作會使用 Regasm.exe 來取消登錄組件中可建立的類別。 如需詳細資訊，請參閱[Regasm.exe （組件登錄工具）](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void UnRegisterAssembly (string AssemblyPath);
    parameters:
    - id: AssemblyPath
      type: System.String
      description: "組件之檔案系統路徑。"
  overload: System.EnterpriseServices.Internal.IComSoapPublisher.UnRegisterAssembly*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫鏈結中的呼叫端沒有存取 unmanaged 程式碼的權限。       -或-指定的 codebase 不是以&quot;file:// 開頭，且沒有必要<xref href=&quot;System.Net.WebPermission&quot;> </xref>。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>AssemblyPath</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<code>AssemblyPath</code>找不到，或未指定檔案的副檔名。"
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>AssemblyPath</code>不是有效的組件。"
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "組件或模組兩次使用兩個不同的辨識項載入組件名稱長度超過 MAX_PATH 字元數。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "以標記方法<xref href=&quot;System.Runtime.InteropServices.ComUnregisterFunctionAttribute&quot;></xref>不<xref uid=&quot;langword_csharp_static&quot; name=&quot;static&quot; href=&quot;&quot;> </xref>。       -或-沒有標記為一個以上方法<xref href=&quot;System.Runtime.InteropServices.ComUnregisterFunctionAttribute&quot;></xref>給定層級的階層。       -或-加上方法的簽章<xref href=&quot;System.Runtime.InteropServices.ComUnregisterFunctionAttribute&quot;></xref>不正確。"
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.Sockets.SocketException
  isExternal: true
  name: System.Net.Sockets.SocketException
- uid: System.UriFormatException
  isExternal: true
  name: System.UriFormatException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.IO.FileLoadException
  isExternal: true
  name: System.IO.FileLoadException
- uid: System.BadImageFormatException
  isExternal: true
  name: System.BadImageFormatException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.EnterpriseServices.ServicedComponentException
  parent: System.EnterpriseServices
  isExternal: false
  name: ServicedComponentException
  nameWithType: ServicedComponentException
  fullName: System.EnterpriseServices.ServicedComponentException
- uid: System.EnterpriseServices.RegistrationException
  parent: System.EnterpriseServices
  isExternal: false
  name: RegistrationException
  nameWithType: RegistrationException
  fullName: System.EnterpriseServices.RegistrationException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.CreateMailBox(System.String,System.String,System.String@,System.String@,System.String@,System.String@)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: CreateMailBox(String,String,String,String,String,String)
  nameWithType: IComSoapPublisher.CreateMailBox(String,String,String,String,String,String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.CreateMailBox(String,String,String,String,String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: CreateVirtualRoot(String,String,String,String,String,String)
  nameWithType: IComSoapPublisher.CreateVirtualRoot(String,String,String,String,String,String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.CreateVirtualRoot(String,String,String,String,String,String)
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.DeleteMailBox(System.String,System.String,System.String@)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: DeleteMailBox(String,String,String)
  nameWithType: IComSoapPublisher.DeleteMailBox(String,String,String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.DeleteMailBox(String,String,String)
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.DeleteVirtualRoot(System.String,System.String,System.String@)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: DeleteVirtualRoot(String,String,String)
  nameWithType: IComSoapPublisher.DeleteVirtualRoot(String,String,String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.DeleteVirtualRoot(String,String,String)
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.GacInstall(System.String)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: GacInstall(String)
  nameWithType: IComSoapPublisher.GacInstall(String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.GacInstall(String)
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.GacRemove(System.String)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: GacRemove(String)
  nameWithType: IComSoapPublisher.GacRemove(String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.GacRemove(String)
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.GetAssemblyNameForCache(System.String,System.String@)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: GetAssemblyNameForCache(String,String)
  nameWithType: IComSoapPublisher.GetAssemblyNameForCache(String,String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.GetAssemblyNameForCache(String,String)
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.GetTypeNameFromProgId(System.String,System.String)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: GetTypeNameFromProgId(String,String)
  nameWithType: IComSoapPublisher.GetTypeNameFromProgId(String,String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.GetTypeNameFromProgId(String,String)
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.ProcessClientTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: ProcessClientTlb(String,String,String,String,String,String,String,String,String,String)
  nameWithType: IComSoapPublisher.ProcessClientTlb(String,String,String,String,String,String,String,String,String,String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.ProcessClientTlb(String,String,String,String,String,String,String,String,String,String)
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.ProcessServerTlb(System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: ProcessServerTlb(String,String,String,String,String,String,String)
  nameWithType: IComSoapPublisher.ProcessServerTlb(String,String,String,String,String,String,String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.ProcessServerTlb(String,String,String,String,String,String,String)
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.RegisterAssembly(System.String)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: RegisterAssembly(String)
  nameWithType: IComSoapPublisher.RegisterAssembly(String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.RegisterAssembly(String)
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.UnRegisterAssembly(System.String)
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: UnRegisterAssembly(String)
  nameWithType: IComSoapPublisher.UnRegisterAssembly(String)
  fullName: System.EnterpriseServices.Internal.IComSoapPublisher.UnRegisterAssembly(String)
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.CreateMailBox*
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: CreateMailBox
  nameWithType: IComSoapPublisher.CreateMailBox
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.CreateVirtualRoot*
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: CreateVirtualRoot
  nameWithType: IComSoapPublisher.CreateVirtualRoot
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.DeleteMailBox*
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: DeleteMailBox
  nameWithType: IComSoapPublisher.DeleteMailBox
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.DeleteVirtualRoot*
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: DeleteVirtualRoot
  nameWithType: IComSoapPublisher.DeleteVirtualRoot
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.GacInstall*
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: GacInstall
  nameWithType: IComSoapPublisher.GacInstall
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.GacRemove*
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: GacRemove
  nameWithType: IComSoapPublisher.GacRemove
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.GetAssemblyNameForCache*
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: GetAssemblyNameForCache
  nameWithType: IComSoapPublisher.GetAssemblyNameForCache
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.GetTypeNameFromProgId*
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: GetTypeNameFromProgId
  nameWithType: IComSoapPublisher.GetTypeNameFromProgId
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.ProcessClientTlb*
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: ProcessClientTlb
  nameWithType: IComSoapPublisher.ProcessClientTlb
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.ProcessServerTlb*
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: ProcessServerTlb
  nameWithType: IComSoapPublisher.ProcessServerTlb
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.RegisterAssembly*
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: RegisterAssembly
  nameWithType: IComSoapPublisher.RegisterAssembly
- uid: System.EnterpriseServices.Internal.IComSoapPublisher.UnRegisterAssembly*
  parent: System.EnterpriseServices.Internal.IComSoapPublisher
  isExternal: false
  name: UnRegisterAssembly
  nameWithType: IComSoapPublisher.UnRegisterAssembly
