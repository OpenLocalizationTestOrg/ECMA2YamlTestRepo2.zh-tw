### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HMAC
  id: HMAC
  children:
  - System.Security.Cryptography.HMAC.#ctor
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.HashFinal
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.HMAC.Initialize
  - System.Security.Cryptography.HMAC.Key
  langs:
  - csharp
  name: HMAC
  nameWithType: HMAC
  fullName: System.Security.Cryptography.HMAC
  type: Class
  summary: "表示所有的雜湊式訊息驗證碼 (HMAC） 實作必須從它衍生的抽象類別。"
  remarks: "雜湊式訊息驗證碼 (HMAC) 可用來判斷透過不安全的通道傳送的訊息是否遭竄改的寄件者和收件者共用秘密金鑰。 寄件者會計算原始資料的雜湊值，並將原始資料和 HMAC 傳送當成單一訊息。 收件者會重新計算已接收的訊息上的雜湊值，然後檢查計算的雜湊值相符的傳送的雜湊值。       HMAC 可以搭配任何反覆進行的密碼編譯雜湊函式，例如 MD5 或 SHA-1，共用秘密金鑰搭配使用。 HMAC 密碼編譯強度取決於基礎的雜湊函數的屬性。       資料或雜湊值的任何變更會導致不相符，因為知識祕密金鑰，才能變更訊息及重新產生正確的雜湊值。 因此，如果原始和計算的雜湊值相符，驗證訊息。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class HMAC : System.Security.Cryptography.KeyedHashAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: HMAC()
  nameWithType: HMAC.HMAC()
  fullName: System.Security.Cryptography.HMAC.HMAC()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.HMAC&quot;></xref>類別。"
  syntax:
    content: protected HMAC ();
    parameters: []
  overload: System.Security.Cryptography.HMAC.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.BlockSizeValue
  id: BlockSizeValue
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: BlockSizeValue
  nameWithType: HMAC.BlockSizeValue
  fullName: System.Security.Cryptography.HMAC.BlockSizeValue
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得或設定要使用於雜湊值的區塊大小。"
  remarks: "雜湊式訊息驗證碼 (HMAC) 會使用雜湊函式會逐一查看的資料區塊中的基本壓縮函式雜湊資料。 BlockSizeValue 是這類區塊的位元組大小。 其值為 64 個位元組。"
  syntax:
    content: protected int BlockSizeValue { get; set; }
    return:
      type: System.Int32
      description: "要使用於雜湊值的區塊大小。"
  overload: System.Security.Cryptography.HMAC.BlockSizeValue*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.Create
  id: Create
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: Create()
  nameWithType: HMAC.Create()
  fullName: System.Security.Cryptography.HMAC.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "建立執行個體的預設實作的雜湊式訊息驗證碼 (HMAC)。"
  remarks: "根據預設，這個多載會使用 sha-1 HMAC 實作。 如果您想要指定不同的實作，使用<xref:System.Security.Cryptography.HMAC.Create%28System.String%29>多載，可讓您指定的演算法名稱，改為。</xref:System.Security.Cryptography.HMAC.Create%28System.String%29>"
  syntax:
    content: public static System.Security.Cryptography.HMAC Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.HMAC
      description: "新的 sha-1 執行個體，除非預設設定已變更使用[ &lt;cryptoClass&gt;元素](../Topic/%3CcryptoClass%3E%20Element.md)。"
  overload: System.Security.Cryptography.HMAC.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: Create(String)
  nameWithType: HMAC.Create(String)
  fullName: System.Security.Cryptography.HMAC.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "建立執行個體的雜湊式訊息驗證碼 (HMAC) 之指定實作。"
  remarks: "HMAC 支援雜湊演算法包括 MD5，sha-1、 sha-256，與 RIPEMD160 的數的字。 如需完整清單，請參閱支援的值`algorithmName`參數。"
  syntax:
    content: public static System.Security.Cryptography.HMAC Create (string algorithmName);
    parameters:
    - id: algorithmName
      type: System.String
      description: "要使用的 HMAC 實作。 下表顯示有效的值`algorithmName`參數以及它們所對應的演算法。       <table><thead><tr><th> 參數值       </th><th> 實作       </th></tr></thead><tbody><tr><td> System.Security.Cryptography.HMAC       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> System.Security.Cryptography.KeyedHashAlgorithm       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> HMACMD5       </td><td><xref href=&quot;System.Security.Cryptography.HMACMD5&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACMD5       </td><td><xref href=&quot;System.Security.Cryptography.HMACMD5&quot;></xref></td></tr><tr><td> HMACRIPEMD160       </td><td><xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACRIPEMD160       </td><td><xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;></xref></td></tr><tr><td> HMACSHA1       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA1       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> HMACSHA256       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA256       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;></xref></td></tr><tr><td> HMACSHA384       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA384&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA384       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA384&quot;></xref></td></tr><tr><td> HMACSHA512       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA512&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA512       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA512&quot;></xref></td></tr><tr><td> MACTripleDES       </td><td><xref href=&quot;System.Security.Cryptography.MACTripleDES&quot;></xref></td></tr><tr><td> System.Security.Cryptography.MACTripleDES       </td><td><xref href=&quot;System.Security.Cryptography.MACTripleDES&quot;></xref></td></tr></tbody></table>"
    return:
      type: System.Security.Cryptography.HMAC
      description: "指定 HMAC 實作的新執行個體。"
  overload: System.Security.Cryptography.HMAC.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HMAC.Dispose(Boolean)
  fullName: System.Security.Cryptography.HMAC.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "所使用的 unmanaged 的資源釋出<xref href=&quot;System.Security.Cryptography.HMAC&quot;></xref>類別時，金鑰變更是合法，並選擇性釋放 managed 的資源。"
  remarks: "這個方法會呼叫公用`Dispose()`方法和`Finalize`方法。 `Dispose()`叫用受保護`Dispose(Boolean)`方法`disposing`參數設定為`true`。 `Finalize`叫用`Dispose`與`disposing`設`false`。       當`disposing`參數是`true`，這個方法的任何 managed 物件所持有的資源全部釋出這個<xref:System.Security.Cryptography.HMAC>參考。</xref:System.Security.Cryptography.HMAC> 這個方法會叫用`Dispose()`每個參考物件的方法。"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>表示釋放 managed 和 unmanaged 資源，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>表示只釋放 unmanaged 的資源。"
  overload: System.Security.Cryptography.HMAC.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  id: HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: HashCore(Byte[],Int32,Int32)
  nameWithType: HMAC.HashCore(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.HMAC.HashCore(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "在衍生類別中覆寫，將資料物件轉遞預設<xref href=&quot;System.Security.Cryptography.HMAC&quot;></xref>雜湊演算法來計算雜湊值。"
  remarks: "應用程式碼，不會呼叫這個方法。       此抽象方法會執行雜湊計算。 每次寫入至密碼編譯資料流物件會將資料傳遞到這個方法。 對於每個資料區塊，這個方法會更新雜湊物件的狀態，以便在資料流結尾傳回正確的雜湊值。"
  syntax:
    content: protected override void HashCore (byte[] rgb, int ib, int cb);
    parameters:
    - id: rgb
      type: System.Byte[]
      description: "輸入的資料。"
    - id: ib
      type: System.Int32
      description: "中要開始使用資料的位元組陣列的位移。"
    - id: cb
      type: System.Int32
      description: "陣列中要用作資料的位元組數目。"
  overload: System.Security.Cryptography.HMAC.HashCore*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.HashFinal
  id: HashFinal
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: HashFinal()
  nameWithType: HMAC.HashFinal()
  fullName: System.Security.Cryptography.HMAC.HashFinal()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "在衍生類別中覆寫，對雜湊計算做最後密碼編譯資料流物件處理最後一個資料之後。"
  remarks: "應用程式碼，不會呼叫這個方法。 這個方法會完成任何部分的計算，並傳回資料流的正確雜湊值。"
  syntax:
    content: protected override byte[] HashFinal ();
    parameters: []
    return:
      type: System.Byte[]
      description: "位元組陣列中計算的雜湊碼。"
  overload: System.Security.Cryptography.HMAC.HashFinal*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.HashName
  id: HashName
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: HashName
  nameWithType: HMAC.HashName
  fullName: System.Security.Cryptography.HMAC.HashName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得或設定用於雜湊的雜湊演算法名稱。"
  syntax:
    content: public string HashName { get; set; }
    return:
      type: System.String
      description: "雜湊演算法的名稱。"
  overload: System.Security.Cryptography.HMAC.HashName*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "無法變更目前的雜湊演算法。"
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.Initialize
  id: Initialize
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: Initialize()
  nameWithType: HMAC.Initialize()
  fullName: System.Security.Cryptography.HMAC.Initialize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的預設實作的執行個體<xref href=&quot;System.Security.Cryptography.HMAC&quot;> </xref>。"
  remarks: "雜湊式訊息驗證碼 (HMAC) 可用來判斷透過不安全的通道傳送的訊息是否遭竄改的寄件者和收件者共用秘密金鑰。 寄件者會計算原始資料的雜湊值，並將原始資料和 HMAC 傳送當成單一訊息。 收件者會重新計算已接收的訊息上的雜湊值，然後檢查計算的雜湊值相符的傳送的雜湊值。       HMAC 可以搭配任何反覆進行的密碼編譯雜湊函式，例如 MD5 或 SHA-1，共用秘密金鑰搭配使用。 HMAC 密碼編譯強度取決於基礎的雜湊函數的屬性。       資料或雜湊值的任何變更會導致不相符，因為知識祕密金鑰，才能變更訊息及重新產生正確的雜湊值。 因此，如果原始和計算的雜湊值相符，驗證訊息。"
  syntax:
    content: public override void Initialize ();
    parameters: []
  overload: System.Security.Cryptography.HMAC.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.Key
  id: Key
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: Key
  nameWithType: HMAC.Key
  fullName: System.Security.Cryptography.HMAC.Key
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得或設定要使用於雜湊演算法的金鑰。"
  remarks: "這個屬性是索引鍵的雜湊演算法的金鑰。       雜湊式訊息驗證碼 (HMAC) 可用來判斷透過不安全的通道傳送的訊息是否遭竄改的寄件者和收件者共用秘密金鑰。 寄件者會計算原始資料的雜湊值，並將原始資料和 HMAC 傳送當成單一訊息。 收件者會重新計算已接收的訊息上的雜湊值，然後檢查計算的雜湊值相符的傳送的雜湊值。       HMAC 可以搭配任何反覆進行的密碼編譯雜湊函式，例如 MD5 或 SHA-1，共用秘密金鑰搭配使用。 HMAC 密碼編譯強度取決於基礎的雜湊函數的屬性。       資料或雜湊值的任何變更會導致不相符，因為知識祕密金鑰，才能變更訊息及重新產生正確的雜湊值。 因此，如果原始和計算的雜湊值相符，驗證訊息。"
  syntax:
    content: public override byte[] Key { get; set; }
    return:
      type: System.Byte[]
      description: "要用於雜湊演算法的金鑰。"
  overload: System.Security.Cryptography.HMAC.Key*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "嘗試變更雜湊開始之後的索引鍵內容。"
  platform:
  - net462
references:
- uid: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: System.Security.Cryptography.KeyedHashAlgorithm
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.HMAC.#ctor
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HMAC()
  nameWithType: HMAC.HMAC()
  fullName: System.Security.Cryptography.HMAC.HMAC()
- uid: System.Security.Cryptography.HMAC.BlockSizeValue
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: BlockSizeValue
  nameWithType: HMAC.BlockSizeValue
  fullName: System.Security.Cryptography.HMAC.BlockSizeValue
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.HMAC.Create
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Create()
  nameWithType: HMAC.Create()
  fullName: System.Security.Cryptography.HMAC.Create()
- uid: System.Security.Cryptography.HMAC
  parent: System.Security.Cryptography
  isExternal: false
  name: HMAC
  nameWithType: HMAC
  fullName: System.Security.Cryptography.HMAC
- uid: System.Security.Cryptography.HMAC.Create(System.String)
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Create(String)
  nameWithType: HMAC.Create(String)
  fullName: System.Security.Cryptography.HMAC.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HMAC.Dispose(Boolean)
  fullName: System.Security.Cryptography.HMAC.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashCore(Byte[],Int32,Int32)
  nameWithType: HMAC.HashCore(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.HMAC.HashCore(Byte[],Int32,Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HMAC.HashFinal
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashFinal()
  nameWithType: HMAC.HashFinal()
  fullName: System.Security.Cryptography.HMAC.HashFinal()
- uid: System.Security.Cryptography.HMAC.HashName
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashName
  nameWithType: HMAC.HashName
  fullName: System.Security.Cryptography.HMAC.HashName
- uid: System.Security.Cryptography.HMAC.Initialize
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Initialize()
  nameWithType: HMAC.Initialize()
  fullName: System.Security.Cryptography.HMAC.Initialize()
- uid: System.Security.Cryptography.HMAC.Key
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Key
  nameWithType: HMAC.Key
  fullName: System.Security.Cryptography.HMAC.Key
- uid: System.Security.Cryptography.HMAC.#ctor*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HMAC
  nameWithType: HMAC.HMAC
- uid: System.Security.Cryptography.HMAC.BlockSizeValue*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: BlockSizeValue
  nameWithType: HMAC.BlockSizeValue
- uid: System.Security.Cryptography.HMAC.Create*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Create
  nameWithType: HMAC.Create
- uid: System.Security.Cryptography.HMAC.Dispose*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Dispose
  nameWithType: HMAC.Dispose
- uid: System.Security.Cryptography.HMAC.HashCore*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashCore
  nameWithType: HMAC.HashCore
- uid: System.Security.Cryptography.HMAC.HashFinal*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashFinal
  nameWithType: HMAC.HashFinal
- uid: System.Security.Cryptography.HMAC.HashName*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashName
  nameWithType: HMAC.HashName
- uid: System.Security.Cryptography.HMAC.Initialize*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Initialize
  nameWithType: HMAC.Initialize
- uid: System.Security.Cryptography.HMAC.Key*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Key
  nameWithType: HMAC.Key
