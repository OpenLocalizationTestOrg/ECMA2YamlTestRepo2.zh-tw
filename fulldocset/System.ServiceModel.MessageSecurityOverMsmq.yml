### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.MessageSecurityOverMsmq
  id: MessageSecurityOverMsmq
  children:
  - System.ServiceModel.MessageSecurityOverMsmq.#ctor
  - System.ServiceModel.MessageSecurityOverMsmq.AlgorithmSuite
  - System.ServiceModel.MessageSecurityOverMsmq.ClientCredentialType
  langs:
  - csharp
  name: MessageSecurityOverMsmq
  nameWithType: MessageSecurityOverMsmq
  fullName: System.ServiceModel.MessageSecurityOverMsmq
  type: Class
  summary: "可讓上設定訊息層級安全性屬性<xref href=&quot;System.ServiceModel.NetMsmqBinding&quot;></xref>繫結。"
  remarks: "從藉由繫結存取這個物件<xref:System.ServiceModel.NetMsmqBinding.Security%2A>屬性，它會傳回<xref:System.ServiceModel.NetMsmqSecurity>物件。</xref:System.ServiceModel.NetMsmqSecurity> </xref:System.ServiceModel.NetMsmqBinding.Security%2A> 此物件具有<xref:System.ServiceModel.NetMsmqSecurity.Message%2A>提供 MessageSecurityOverMsmq 物件的參考屬性。</xref:System.ServiceModel.NetMsmqSecurity.Message%2A>"
  example:
  - >-
    [!code-vb[UEMessageSecurityOverMsmq#1](~/add/codesnippet/visualbasic/t-system.servicemodel.me_1_1.vb)]
     [!code-cs[UEMessageSecurityOverMsmq#1](~/add/codesnippet/csharp/t-system.servicemodel.me_1_1.cs)]
  syntax:
    content: public sealed class MessageSecurityOverMsmq
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.MessageSecurityOverMsmq.#ctor
  id: '#ctor'
  parent: System.ServiceModel.MessageSecurityOverMsmq
  langs:
  - csharp
  name: MessageSecurityOverMsmq()
  nameWithType: MessageSecurityOverMsmq.MessageSecurityOverMsmq()
  fullName: System.ServiceModel.MessageSecurityOverMsmq.MessageSecurityOverMsmq()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "初始化的新執行個體<xref href=&quot;System.ServiceModel.MessageSecurityOverMsmq&quot;></xref>類別。"
  syntax:
    content: public MessageSecurityOverMsmq ();
    parameters: []
  overload: System.ServiceModel.MessageSecurityOverMsmq.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.MessageSecurityOverMsmq.AlgorithmSuite
  id: AlgorithmSuite
  parent: System.ServiceModel.MessageSecurityOverMsmq
  langs:
  - csharp
  name: AlgorithmSuite
  nameWithType: MessageSecurityOverMsmq.AlgorithmSuite
  fullName: System.ServiceModel.MessageSecurityOverMsmq.AlgorithmSuite
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "指定用於 SOAP 層級之安全性訊息的演算法套件。"
  remarks: "<xref:System.ServiceModel.Security.SecurityAlgorithmSuite>定義各種不同的演算法，例如標準化、 摘要式、 KeyWrap、 簽章、 加密和 KeyDerivation 演算法。</xref:System.ServiceModel.Security.SecurityAlgorithmSuite> 使用平台是利用一組和預設值不同的演算法時，這個屬性就非常重要。 在修改這個屬性時，您應該了解相關演算法的優缺點。"
  example:
  - >-
    [!code-vb[UEMessageSecurityOverMsmq#2](~/add/codesnippet/visualbasic/p-system.servicemodel.me_1_1.vb)]
     [!code-cs[UEMessageSecurityOverMsmq#2](~/add/codesnippet/csharp/p-system.servicemodel.me_1_1.cs)]
  syntax:
    content: public System.ServiceModel.Security.SecurityAlgorithmSuite AlgorithmSuite { get; set; }
    return:
      type: System.ServiceModel.Security.SecurityAlgorithmSuite
      description: "<xref href=&quot;System.ServiceModel.Security.SecurityAlgorithmSuite&quot;> </xref>透過傳送的訊息設定<xref href=&quot;System.ServiceModel.NetMsmqBinding&quot;></xref>繫結。"
  overload: System.ServiceModel.MessageSecurityOverMsmq.AlgorithmSuite*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.MessageSecurityOverMsmq.ClientCredentialType
  id: ClientCredentialType
  parent: System.ServiceModel.MessageSecurityOverMsmq
  langs:
  - csharp
  name: ClientCredentialType
  nameWithType: MessageSecurityOverMsmq.ClientCredentialType
  fullName: System.ServiceModel.MessageSecurityOverMsmq.ClientCredentialType
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "取得或設定<xref:System.ServiceModel.MessageCredentialType>透過 MSMQ 傳輸傳送之訊息的安全性設定。</xref:System.ServiceModel.MessageCredentialType>"
  remarks: "這個屬性可以設定為下列值之一:-**無**︰ 這會允許服務與匿名用戶端互動。 服務和用戶端都不需要認證。      - **Windows**︰ 這可讓 SOAP 交換加入 Windows 認證的已驗證的內容。 如此一定會執行 Kerberos 驗證。      - **UserName**︰ 這可讓服務要求用戶端會使用 UserName 認證進行驗證。 必須指定此認證，使用<xref:System.ServiceModel.Description.ClientCredentials>類別。</xref:System.ServiceModel.Description.ClientCredentials>      > [!NOTE]  >   [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]不支援傳送密碼摘要，或是衍生的金鑰使用的密碼，甚至對訊息安全性使用該金鑰。 因此，[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]會強制使用 UserName 認證時，保護交換。 此模式需要使用用戶端上指定服務憑證`ClientCredential`行為和`serviceCertificate`:- `Certificate`︰ 這可讓服務要求用戶端使用憑證來驗證。 用戶端認證在此情況下必須指定使用<xref:System.ServiceModel.Description.ClientCredentials>類別或`ClientCredentials`行為。</xref:System.ServiceModel.Description.ClientCredentials> 服務認證在此情況下必須指定使用<xref:System.ServiceModel.Description.ClientCredentials>類別或`ClientCredentials`行為藉由指定`serviceCertificate`。</xref:System.ServiceModel.Description.ClientCredentials>      - `InfoCard`︰ 這可讓服務要求的用戶端使用 infocard 來進行驗證。 `serviceCertificate`中必須提供`ClientCredential`行為。      -的 Certificate 認證`MessageSecurityOverMsmq`無關只有當安全性模式設定為`Both`或`Message`。"
  example:
  - >-
    [!code-vb[UEMessageSecurityOverMsmq#3](~/add/codesnippet/visualbasic/p-system.servicemodel.me_4_1.vb)]
     [!code-cs[UEMessageSecurityOverMsmq#3](~/add/codesnippet/csharp/p-system.servicemodel.me_4_1.cs)]
  syntax:
    content: public System.ServiceModel.MessageCredentialType ClientCredentialType { get; set; }
    return:
      type: System.ServiceModel.MessageCredentialType
      description: "<xref:System.ServiceModel.MessageCredentialType>透過 MSMQ 傳輸傳送之訊息的安全性設定。</xref:System.ServiceModel.MessageCredentialType>"
  overload: System.ServiceModel.MessageSecurityOverMsmq.ClientCredentialType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ServiceModel.MessageSecurityOverMsmq.#ctor
  parent: System.ServiceModel.MessageSecurityOverMsmq
  isExternal: false
  name: MessageSecurityOverMsmq()
  nameWithType: MessageSecurityOverMsmq.MessageSecurityOverMsmq()
  fullName: System.ServiceModel.MessageSecurityOverMsmq.MessageSecurityOverMsmq()
- uid: System.ServiceModel.MessageSecurityOverMsmq.AlgorithmSuite
  parent: System.ServiceModel.MessageSecurityOverMsmq
  isExternal: false
  name: AlgorithmSuite
  nameWithType: MessageSecurityOverMsmq.AlgorithmSuite
  fullName: System.ServiceModel.MessageSecurityOverMsmq.AlgorithmSuite
- uid: System.ServiceModel.Security.SecurityAlgorithmSuite
  parent: System.ServiceModel.Security
  isExternal: false
  name: SecurityAlgorithmSuite
  nameWithType: SecurityAlgorithmSuite
  fullName: System.ServiceModel.Security.SecurityAlgorithmSuite
- uid: System.ServiceModel.MessageSecurityOverMsmq.ClientCredentialType
  parent: System.ServiceModel.MessageSecurityOverMsmq
  isExternal: false
  name: ClientCredentialType
  nameWithType: MessageSecurityOverMsmq.ClientCredentialType
  fullName: System.ServiceModel.MessageSecurityOverMsmq.ClientCredentialType
- uid: System.ServiceModel.MessageCredentialType
  parent: System.ServiceModel
  isExternal: true
  name: MessageCredentialType
  nameWithType: MessageCredentialType
  fullName: System.ServiceModel.MessageCredentialType
- uid: System.ServiceModel.MessageSecurityOverMsmq.#ctor*
  parent: System.ServiceModel.MessageSecurityOverMsmq
  isExternal: false
  name: MessageSecurityOverMsmq
  nameWithType: MessageSecurityOverMsmq.MessageSecurityOverMsmq
- uid: System.ServiceModel.MessageSecurityOverMsmq.AlgorithmSuite*
  parent: System.ServiceModel.MessageSecurityOverMsmq
  isExternal: false
  name: AlgorithmSuite
  nameWithType: MessageSecurityOverMsmq.AlgorithmSuite
- uid: System.ServiceModel.MessageSecurityOverMsmq.ClientCredentialType*
  parent: System.ServiceModel.MessageSecurityOverMsmq
  isExternal: false
  name: ClientCredentialType
  nameWithType: MessageSecurityOverMsmq.ClientCredentialType
