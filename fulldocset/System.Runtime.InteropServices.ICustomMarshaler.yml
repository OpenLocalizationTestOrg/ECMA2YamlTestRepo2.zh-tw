### YamlMime:ManagedReference
items:
- uid: System.Runtime.InteropServices.ICustomMarshaler
  id: ICustomMarshaler
  children:
  - System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)
  - System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)
  - System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize
  - System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)
  - System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)
  langs:
  - csharp
  name: ICustomMarshaler
  nameWithType: ICustomMarshaler
  fullName: System.Runtime.InteropServices.ICustomMarshaler
  type: Interface
  summary: "提供用於處理方法呼叫的自訂包裝函式。"
  remarks: "封送處理器會提供舊的功能與新的介面之間的橋樑。 自訂封送處理具有下列優點:-它可讓用戶端應用程式，才能使用舊介面也與實作新介面伺服器搭配使用所設計。      -它可讓用戶端建置的應用程式使用新的介面，以使用實作舊介面的伺服器。       如果您有所導入了不同的封送處理行為，或不同的方式公開元件物件模型 (COM) 的介面，您可以設計自訂的封送處理器，而不是使用 interop 封送處理器。 藉由使用自訂封送處理器，您可以減少新.NET Framework 元件與現有的 COM 元件之間的差異。       例如，假設您正在開發在受管理的介面稱為`INew`。 當此介面會公開至 COM，透過標準 COM 可呼叫包裝函式 (CCW) 時，它會有相同的方法可作為受管理的介面，並使用 interop 封送處理器內建的封送處理規則。 現在，假設是已知的 COM 介面呼叫`IOld`已經提供的相同功能與`INew`介面。 您可以藉由設計自訂封送處理器，提供 unmanaged 的實作`IOld`的委派呼叫的 managed 實作`INew`介面。 因此，自訂封送處理器會做為 managed 和 unmanaged 介面之間的橋樑。      > [!NOTE] > 自訂封送處理器不會叫用時呼叫，從 managed 程式碼僅分派介面上的 unmanaged 程式碼。      ## 定義封送處理類型之前您可以建立自訂封送處理器，您必須定義要封送處理 managed 和 unmanaged 介面。 這些介面通常會執行相同的功能，但是以不同的方式公開給 managed 和 unmanaged 物件。       Managed 的編譯器會產生 managed 的介面從中繼資料，並產生介面看起來像任何其他受管理的介面。 下列範例示範典型的介面。       [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#1](~/add/codesnippet/cpp/t-system.runtime.interop_8_1.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#1](~/add/codesnippet/csharp/t-system.runtime.interop_8_1.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#1](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_1.vb) ]您介面定義語言 (IDL) 中定義 unmanaged 的類型，並使用 Microsoft 介面定義語言 (MIDL) 編譯器進行編譯。     定義在程式庫陳述式中的介面，並將它指派介面識別碼與通用唯一識別碼 (UUID) 屬性，如下列範例所示。      ```    [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library OldLib {        [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]        interface IOld : IUnknown            HRESULT OldMethod();   }   ```MIDL 編譯器會產生多個輸出檔案。 如果 Old.idl 中定義的介面時，輸出檔 Old_i.c 定義`const`變數與介面識別項 (IID) 的介面，如下列範例所示。      ```   const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};   ```Old.h 檔案也會由 MIDL 產生的。 它包含 c + + 定義可以包含在您的 c + + 程式碼的介面。      ## 實作 ICustomMarshaler 介面您的自訂封送處理器必須實作 ICustomMarshaler 介面，以提供適當的包裝函式以執行階段。       下列 C# 程式碼會顯示所有的自訂封送處理器必須實作的基底介面。       [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#2](~/add/codesnippet/cpp/t-system.runtime.interop_8_2.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#2](~/add/codesnippet/csharp/t-system.runtime.interop_8_2.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#2](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_2.vb) ] ICustomMarshaler 介面包括方法，可提供轉換支援、 清除支援，以及要封送處理資料的相關資訊。          |類型的作業 |ICustomMarshaler 方法 |描述 |  |-----------------------|-----------------------------|-----------------|  |轉換 （從 managed 程式碼的原生） |<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>|將封送處理成受管理物件的原生資料的指標。</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> 這個方法傳回的自訂執行階段可呼叫包裝函式 (RCW) 可以封送處理會傳遞做為引數的 unmanaged 的介面。 封送處理器應傳回自訂 RCW 該類型的執行個體。 |  |轉換 （從 managed 為原生程式碼） |<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>|成原生資料的指標將 managed 的物件封送處理。</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> 這個方法傳回的自訂 COM 可呼叫包裝函式 (CCW) 可以封送處理 managed 的介面做為引數傳遞。 封送處理器應傳回的自訂 CCW，該型別的執行個體。 |  |清除 （的原生程式碼） |<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A>|可讓清除<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>方法所傳回之原生資料 (CCW) 封送處理器。 |  |清除 （的 managed 程式碼） |<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A>|可讓清除<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>方法所傳回的 managed 資料 (RCW) 封送處理器。 |  |（原生程式碼的資訊） |<xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A>|傳回 unmanaged 封送處理資料的大小。 |     # # # 轉換<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=fullName>之間封送處理成 managed 物件的原生資料指標。</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A> 這個方法傳回的自訂執行階段可呼叫包裝函式 (RCW) 可以封送處理會傳遞做為引數的 unmanaged 的介面。 封送處理器應傳回自訂 RCW 該類型的執行個體。       <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=fullName>將 managed 的物件成原生資料的指標。</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=fullName> 這個方法傳回的自訂 COM 可呼叫包裝函式 (CCW) 可以封送處理 managed 的介面做為引數傳遞。 封送處理器應傳回自訂 CCW，該型別的執行的個體。      ### 清除<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=fullName>啟用清除的原生資料 (CCW) 傳回的封送處理器<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>方法。</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=fullName>       <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=fullName>可讓以清除所傳回的 managed 資料 (RCW) 封送處理器<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>方法。</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A></xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=fullName>      ### 調整大小資訊<xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=fullName>傳回 unmanaged 封送處理資料的大小。</xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=fullName>      ## 實作 GetInstance 方法，除了實作 ICustomMarshaler 介面之外，自訂封送處理器必須實作`static`方法呼叫`GetInstance`接受<xref:System.String>做為參數和傳回 ICustomMarshaler 的型別。</xref:System.String> 這`static`方法由 common language runtime 的 COM interop 層級來具現化的自訂封送處理器執行個體呼叫。 傳遞至字串`GetInstance`cookie，方法可以用來自訂傳回的自訂封送處理器。      ```   static ICustomMarshaler *GetInstance(String *pstrCookie);   ```# # 套用 MarshalAsAttribute 若要使用自訂封送處理器，您必須先套用<xref:System.Runtime.InteropServices.MarshalAsAttribute>屬性的參數或已封送處理的欄位。</xref:System.Runtime.InteropServices.MarshalAsAttribute>       您還必須傳遞<xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>列舉值，以<xref:System.Runtime.InteropServices.MarshalAsAttribute>建構函式。</xref:System.Runtime.InteropServices.MarshalAsAttribute> </xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName> 此外，您必須指定<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>欄位與具名參數的下列其中一種:- <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>（必要）︰ 自訂封送處理器的組件限定名稱。</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> </xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> 此名稱應該包含的命名空間和類別的自訂封送處理器。 如果自訂封送處理器未定義中使用組件中時，您必須指定定義所在的組件的名稱。          > [!NOTE] > 您可以使用<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef>欄位而非<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>欄位。</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> </xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef>會更輕鬆地指定類型。</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef>      - <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie>（選擇性）︰ cookie 傳遞至自訂封送處理器。</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> 您可以使用 cookie 來提供其他資訊給封送處理器。 例如，如果相同的封送處理器用來提供的包裝函式的數字，cookie 會識別特定的包裝函式。 Cookie 傳遞至`GetInstance`方法封送處理器。       <xref:System.Runtime.InteropServices.MarshalAsAttribute>屬性會識別自訂封送處理器，因此它可以啟動適當的包裝函式。</xref:System.Runtime.InteropServices.MarshalAsAttribute> Common language runtime 的 interop 服務然後會檢查屬性和自訂封送處理器第一次會建立要封送處理引數 （參數或欄位） 的需求。       執行階段接著會呼叫<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>和<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>啟動正確的包裝函式來處理呼叫自訂封送處理器上的方法。</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>      ## 使用自訂的封送處理器時自訂封送處理器已完成，使用的自訂包裝函式的特定型別。 下列範例顯示定義`IUserData`managed 的介面︰ [!code-cpp [System.Runtime.InteropServices.ICustomMarshaler#3](~/add/codesnippet/cpp/t-system.runtime.interop_8_3.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#3](~/add/codesnippet/csharp/t-system.runtime.interop_8_3.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#3](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_3.vb) ]在下列範例中，`IUserData`介面使用`NewOldMarshaler`自訂封送處理器，讓未受管理的用戶端應用程式傳遞`IOld`介面`DoSomeStuff`方法。     受管理的描述`DoSomeStuff`方法會採用`INew`介面，如先前範例中所示，而未受管理的版本`DoSomeStuff`採用`IOld`的介面指標，如下列範例所示。      ```   [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library UserLib {        [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]        interface IUserData : IUnknown            HRESULT DoSomeStuff(IUnknown* pIOld);   }   ```類型程式庫所匯出的 managed 的定義產生`IUserData`會產生未受管理的定義，而不是標準定義這個範例所示。 <xref:System.Runtime.InteropServices.MarshalAsAttribute>屬性套用至`INew`引數中的 managed 定義`DoSomeStuff`方法表示的引數使用自訂封送處理器，如下列範例所示。</xref:System.Runtime.InteropServices.MarshalAsAttribute>       [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#4](~/add/codesnippet/cpp/t-system.runtime.interop_8_4.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#4](~/add/codesnippet/csharp/t-system.runtime.interop_8_4.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#4](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_4.vb)][!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#5](~/add/codesnippet/cpp/t-system.runtime.interop_8_5.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#5](~/add/codesnippet/csharp/t-system.runtime.interop_8_5.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#5](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_5.vb) ]在前一個範例中，第一個參數提供給<xref:System.Runtime.InteropServices.MarshalAsAttribute>屬性是<xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>列舉值`UnmanagedType.CustomMarshaler`。</xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName> </xref:System.Runtime.InteropServices.MarshalAsAttribute>                      第二個參數是<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>欄位，提供自訂封送處理器的組件限定名稱。</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> 此名稱包含命名空間和類別的自訂封送處理器 (`MarshalType=&quot;MyCompany.NewOldMarshaler&quot;`)。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface ICustomMarshaler
  implements: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)
  id: CleanUpManagedData(System.Object)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: CleanUpManagedData(Object)
  nameWithType: ICustomMarshaler.CleanUpManagedData(Object)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "不再需要時，會執行必要的清除的受管理的資料。"
  syntax:
    content: public void CleanUpManagedData (object ManagedObj);
    parameters:
    - id: ManagedObj
      type: System.Object
      description: "要終結 managed 的物件。"
  overload: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)
  id: CleanUpNativeData(System.IntPtr)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: CleanUpNativeData(IntPtr)
  nameWithType: ICustomMarshaler.CleanUpNativeData(IntPtr)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "不再需要時，會執行必要的清除的未受管理的資料。"
  syntax:
    content: public void CleanUpNativeData (IntPtr pNativeData);
    parameters:
    - id: pNativeData
      type: System.IntPtr
      description: "未受管理的資料也將被銷毀的指標。"
  overload: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize
  id: GetNativeDataSize
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: GetNativeDataSize()
  nameWithType: ICustomMarshaler.GetNativeDataSize()
  fullName: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "傳回要封送處理的原生資料的大小。"
  syntax:
    content: public int GetNativeDataSize ();
    parameters: []
    return:
      type: System.Int32
      description: "以位元組為單位，原生資料的大小。"
  overload: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)
  id: MarshalManagedToNative(System.Object)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: MarshalManagedToNative(Object)
  nameWithType: ICustomMarshaler.MarshalManagedToNative(Object)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "將受管理的資料轉換成未受管理的資料。"
  syntax:
    content: public IntPtr MarshalManagedToNative (object ManagedObj);
    parameters:
    - id: ManagedObj
      type: System.Object
      description: "要轉換的 managed 的物件。"
    return:
      type: System.IntPtr
      description: "COM 檢視受管理物件的指標。"
  overload: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)
  id: MarshalNativeToManaged(System.IntPtr)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: MarshalNativeToManaged(IntPtr)
  nameWithType: ICustomMarshaler.MarshalNativeToManaged(IntPtr)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "將 unmanaged 的資料轉換成受管理的資料。"
  syntax:
    content: public object MarshalNativeToManaged (IntPtr pNativeData);
    parameters:
    - id: pNativeData
      type: System.IntPtr
      description: "要包裝的 unmanaged 資料指標。"
    return:
      type: System.Object
      description: "表示 COM 資料的 managed 的檢視的物件。"
  overload: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: CleanUpManagedData(Object)
  nameWithType: ICustomMarshaler.CleanUpManagedData(Object)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: CleanUpNativeData(IntPtr)
  nameWithType: ICustomMarshaler.CleanUpNativeData(IntPtr)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: GetNativeDataSize()
  nameWithType: ICustomMarshaler.GetNativeDataSize()
  fullName: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: MarshalManagedToNative(Object)
  nameWithType: ICustomMarshaler.MarshalManagedToNative(Object)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(Object)
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: MarshalNativeToManaged(IntPtr)
  nameWithType: ICustomMarshaler.MarshalNativeToManaged(IntPtr)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(IntPtr)
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: CleanUpManagedData
  nameWithType: ICustomMarshaler.CleanUpManagedData
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: CleanUpNativeData
  nameWithType: ICustomMarshaler.CleanUpNativeData
- uid: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: GetNativeDataSize
  nameWithType: ICustomMarshaler.GetNativeDataSize
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: MarshalManagedToNative
  nameWithType: ICustomMarshaler.MarshalManagedToNative
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: MarshalNativeToManaged
  nameWithType: ICustomMarshaler.MarshalNativeToManaged
