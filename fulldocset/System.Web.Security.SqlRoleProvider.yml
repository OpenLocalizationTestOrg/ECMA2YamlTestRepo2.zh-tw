### YamlMime:ManagedReference
items:
- uid: System.Web.Security.SqlRoleProvider
  id: SqlRoleProvider
  children:
  - System.Web.Security.SqlRoleProvider.#ctor
  - System.Web.Security.SqlRoleProvider.AddUsersToRoles(System.String[],System.String[])
  - System.Web.Security.SqlRoleProvider.ApplicationName
  - System.Web.Security.SqlRoleProvider.CreateRole(System.String)
  - System.Web.Security.SqlRoleProvider.DeleteRole(System.String,System.Boolean)
  - System.Web.Security.SqlRoleProvider.FindUsersInRole(System.String,System.String)
  - System.Web.Security.SqlRoleProvider.GetAllRoles
  - System.Web.Security.SqlRoleProvider.GetRolesForUser(System.String)
  - System.Web.Security.SqlRoleProvider.GetUsersInRole(System.String)
  - System.Web.Security.SqlRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  - System.Web.Security.SqlRoleProvider.IsUserInRole(System.String,System.String)
  - System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])
  - System.Web.Security.SqlRoleProvider.RoleExists(System.String)
  langs:
  - csharp
  name: SqlRoleProvider
  nameWithType: SqlRoleProvider
  fullName: System.Web.Security.SqlRoleProvider
  type: Class
  summary: "管理儲存體的 SQL Server 資料庫中的 ASP.NET 應用程式的角色成員資格資訊。"
  remarks: "This class is used by the <xref:System.Web.Security.Roles> and <xref:System.Web.Security.RolePrincipal> classes to provide role-management services for an ASP.NET application using a SQL Server database. You can use role management to specify different levels of authorization for your application.  \n  \n To use the SqlRoleProvider class, you must first create the SQL Server database used by the SqlRoleProvider. To create the database used by the SqlRoleProvider class, run the `aspnet_regsql.exe` executable found in the C:\\WINDOWS\\Microsoft.NET\\Framework\\ `versionNumber` folder and specify the `-Ar` option (for example, `aspnet_regsql.exe -Ar`). The database created is called Aspnetdb. Alternatively, run aspnet_regsql.exe to pull up the GUI configuration mode and choose to configure all ASP.NET features.  \n  \n If the role provider is configured with a connection string that uses integrated security, the process account of the ASP.NET application must have rights to connect to the SQL Server database.  \n  \n The Machine.config file is configured with a SqlRoleProvider instance named AspNetSqlProvider that connects to the SQL Server on the local machine. You can use this instance of the provider, or specify your own in the Web.config file for your ASP.NET application. To use the AspNetSqlProvider instance, specify AspNetSqlProvider as the `defaultProvider` in your  configuration.  \n  \n You can configure the SqlRoleProvider to use the same database and user information as the <xref:System.Web.Security.SqlMembershipProvider> in order to use a single database for authentication and authorization information. To use the same database for membership and role information, run the aspnet_regsql.exe executable and install the membership feature. Then, specify the same connection string in your configuration for both your SqlRoleProvider and <xref:System.Web.Security.SqlMembershipProvider> instances. Also ensure that both provider instances are configured with the same <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>."
  example:
  - "The following example shows the Web.config file for an ASP.NET application configured to use a SqlRoleProvider object and the <xref:System.Web.Security.SqlMembershipProvider>. The  element is configured to only allow access to authenticated users in the Administrators role.  \n  \n```  \n<configuration>  \n  <connectionStrings>  \n    <add name=\"SqlServices\" connectionString=\"Data Source=localhost;Integrated Security=SSPI;Initial Catalog=aspnetdb;\" />  \n  </connectionStrings>  \n  <system.web>  \n    <authentication mode=\"Forms\" >  \n      <forms loginUrl=\"logincs.aspx\"  \n      name=\".ASPXFORMSAUTH\" />  \n    </authentication>  \n    <authorization>  \n      <deny users=\"?\" />  \n         <allow roles=\"Administrators\" />  \n         <deny users=\"*\" />  \n    </authorization>  \n    <membership defaultProvider=\"SqlProvider\" userIsOnlineTimeWindow=\"15\">  \n      <providers>  \n        <add   \n          name=\"SqlProvider\"   \n          type=\"System.Web.Security.SqlMembershipProvider\"   \n          connectionStringName=\"SqlServices\"  \n          enablePasswordRetrieval=\"false\"  \n          enablePasswordReset=\"false\"  \n          requiresQuestionAndAnswer=\"false\"   \n          passwordFormat=\"Hashed\"   \n          applicationName=\"SampleApplication\" />  \n      </providers>  \n    </membership>  \n    <roleManager defaultProvider=\"SqlProvider\"   \n      enabled=\"true\"  \n      cacheRolesInCookie=\"true\"  \n      cookieName=\".ASPROLES\"  \n      cookieTimeout=\"30\"  \n      cookiePath=\"/\"  \n      cookieRequireSSL=\"true\"  \n      cookieSlidingExpiration=\"true\"  \n      cookieProtection=\"All\" >  \n      <providers>  \n        <add  \n          name=\"SqlProvider\"  \n          type=\"System.Web.Security.SqlRoleProvider\"  \n          connectionStringName=\"SqlServices\"   \n          applicationName=\"SampleApplication\" />  \n      </providers>  \n    </roleManager>  \n  </system.web>  \n</configuration>  \n```"
  syntax:
    content: 'public class SqlRoleProvider : System.Web.Security.RoleProvider'
  inheritance:
  - System.Web.Security.RoleProvider
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.#ctor
  id: '#ctor'
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: SqlRoleProvider()
  nameWithType: SqlRoleProvider.SqlRoleProvider()
  fullName: System.Web.Security.SqlRoleProvider.SqlRoleProvider()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "建立的執行個體<xref href=&quot;System.Web.Security.SqlRoleProvider&quot;></xref>類別。"
  remarks: "SqlRoleProvider 建構函式由 ASP.NET 呼叫來建立的執行個體<xref:System.Web.Security.SqlRoleProvider>類別做為應用程式的組態中指定。</xref:System.Web.Security.SqlRoleProvider> 這個建構函式不是從您的程式碼使用。"
  syntax:
    content: public SqlRoleProvider ();
    parameters: []
  overload: System.Web.Security.SqlRoleProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.AddUsersToRoles(System.String[],System.String[])
  id: AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: AddUsersToRoles(String[],String[])
  nameWithType: SqlRoleProvider.AddUsersToRoles(String[],String[])
  fullName: System.Web.Security.SqlRoleProvider.AddUsersToRoles(String[],String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "將指定的使用者名稱加入至每個指定的角色。"
  remarks: "AddUsersToRoles 方法由呼叫<xref:System.Web.Security.Roles>一或多個使用者與 ASP.NET 應用程式組態檔 (Web.config) 中指定的 SQL Server 資料庫中的一個或多個角色建立關聯的類別。</xref:System.Web.Security.Roles> 這個方法會呼叫<xref:System.Web.Security.Roles.AddUserToRole%2A>， <xref:System.Web.Security.Roles.AddUserToRoles%2A>，<xref:System.Web.Security.Roles.AddUsersToRole%2A>的<xref:System.Web.Security.Roles>類別</xref:System.Web.Security.Roles>和<xref:System.Web.Security.Roles.AddUsersToRoles%2A>方法</xref:System.Web.Security.Roles.AddUsersToRoles%2A></xref:System.Web.Security.Roles.AddUsersToRole%2A></xref:System.Web.Security.Roles.AddUserToRoles%2A></xref:System.Web.Security.Roles.AddUserToRole%2A>       在交易內進行 AddUsersToRoles 方法呼叫期間執行資料庫更新。 如果發生錯誤，例如使用者名稱已在指定的角色，會回復交易，會執行任何更新。       如果<xref:System.Web.Security.SqlRoleProvider>搭配使用<xref:System.Web.Security.SqlMembershipProvider>，而且其中一個指定的使用者名稱不存在資料庫中，使用者名稱將會自動加入到資料庫。</xref:System.Web.Security.SqlMembershipProvider> </xref:System.Web.Security.SqlRoleProvider>       使用者名稱和角色名稱不能包含逗號。"
  example:
  - "The following code example adds one or more users to a role or removes a user from a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.SqlRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/1f379f8c-79a9-40dc-ab92-_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/1f379f8c-79a9-40dc-ab92-_1.aspx)]"
  syntax:
    content: public override void AddUsersToRoles (string[] usernames, string[] roleNames);
    parameters:
    - id: usernames
      type: System.String[]
      description: "要加入至指定的角色的使用者名稱的字串陣列。"
    - id: roleNames
      type: System.String[]
      description: "要加入指定的使用者名稱的角色名稱的字串陣列。"
  overload: System.Web.Security.SqlRoleProvider.AddUsersToRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles in <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       One of the users in <code>usernames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "其中一個在角色<code> roleNames </code>為空字串，或包含逗號。       -在使用者的其中一個<code> usernames </code>為空字串，或包含逗號。       -其中一個在角色<code> roleNames </code>長度超過 256 個字元。       -在使用者的其中一個<code> usernames </code>長度超過 256 個字元。       - <code> roleNames </code>包含重複的項目。       - <code> usernames </code>包含重複的項目。"
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "找不到一或多個指定的角色名稱。       -或者-找不到一或多個指定的使用者名稱。       -或者-一或多個指定的使用者名稱已與一或多個指定的角色名稱相關聯。       -或者-與資料庫通訊時發生未知的錯誤。"
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.ApplicationName
  id: ApplicationName
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: ApplicationName
  nameWithType: SqlRoleProvider.ApplicationName
  fullName: System.Web.Security.SqlRoleProvider.ApplicationName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "取得或設定用來儲存及擷取角色資訊的應用程式的名稱。"
  remarks: "使用 ApplicationName<xref:System.Web.Security.SqlRoleProvider>與不同的應用程式的使用者和角色。</xref:System.Web.Security.SqlRoleProvider> 這可讓多個應用程式使用相同的資料庫來儲存使用者和角色資訊而不重複的使用者名稱或角色名稱之間發生衝突。 多個 ASP.NET 應用程式可以使用相同的資料庫，藉由 ApplicationName 屬性中指定相同的值。 ApplicationName 屬性可以透過程式設計的方式，設定或它可以是以宣告方式設定 Web 應用程式使用的組態檔中`applicationName`屬性。       如果未指定值`applicationName`Web 應用程式組態檔中的屬性則<xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName>目前屬性值<xref:System.Web.HttpContext.Request%2A?displayProperty=fullName>物件使用。</xref:System.Web.HttpContext.Request%2A?displayProperty=fullName> </xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName>      > [!CAUTION] > 因為所有由提供服務的要求會使用單一預設角色提供者執行個體<xref:System.Web.HttpApplication>物件，您可以有多個要求同時執行，而且嘗試設定 ApplicationName 屬性值。</xref:System.Web.HttpApplication> ApplicationName 屬性不是執行緒安全的多個寫入時，並將變更 ApplicationName 屬性值會導致非預期的行為，應用程式的多個使用者。 建議您避免撰寫程式碼，可讓使用者設定 ApplicationName 屬性，除非您必須。 舉例來說，ApplicationName 屬性設定，可能需要的應用程式是系統管理的應用程式管理角色的多個應用程式的資料。 這類應用程式應該在單一使用者應用程式並不是 Web 應用程式。"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies the application's <xref:System.Web.Security.SqlRoleProvider> instance and sets the ApplicationName property to `MyApplication`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public override string ApplicationName { get; set; }
    return:
      type: System.String
      description: "用來儲存及擷取角色資訊的應用程式名稱。 預設值是&lt;xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName&gt;目前屬性值&lt;xref:System.Web.HttpContext.Request%2A?displayProperty=fullName&gt;。"
  overload: System.Web.Security.SqlRoleProvider.ApplicationName*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "嘗試設定 ApplicationName 屬性由呼叫端沒有<xref href=&quot;System.Web.AspNetHostingPermissionLevel&quot;> </xref> ASP.NET 裝載的權限。"
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "嘗試設定應用程式名稱長度超過 256 個字元的字串。"
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.CreateRole(System.String)
  id: CreateRole(System.String)
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: CreateRole(String)
  nameWithType: SqlRoleProvider.CreateRole(String)
  fullName: System.Web.Security.SqlRoleProvider.CreateRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "將新角色加入至角色的資料庫。"
  remarks: "CreateRole 方法由呼叫<xref:System.Web.Security.Roles>類別來建立 ASP.NET 應用程式組態檔 (Web.config) 中指定的 SQL Server 資料庫中的角色。</xref:System.Web.Security.Roles>       角色名稱的最大長度為 256 個字元。 角色名稱不區分大小寫。 角色名稱中不允許逗號。"
  example:
  - "The following code example creates a new role in the database. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.SqlRoleProvider>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.sq_6_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.sq_6_1.aspx)]"
  syntax:
    content: public override void CreateRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "若要建立角色的名稱。"
  overload: System.Web.Security.SqlRoleProvider.CreateRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>為空字串，或包含逗號。       -或-<code>roleName</code>長度超過 256 個字元。"
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>roleName</code>已經存在資料庫中。       -或者-與資料庫通訊時發生未知的錯誤。"
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.DeleteRole(System.String,System.Boolean)
  id: DeleteRole(System.String,System.Boolean)
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: DeleteRole(String,Boolean)
  nameWithType: SqlRoleProvider.DeleteRole(String,Boolean)
  fullName: System.Web.Security.SqlRoleProvider.DeleteRole(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "從資料庫角色中移除角色。"
  remarks: "DeleteRole 方法會呼叫<xref:System.Web.Security.Roles>刪除從 ASP.NET 應用程式組態檔 (Web.config) 中指定的 SQL Server 資料庫角色的類別。</xref:System.Web.Security.Roles> 刪除角色時，也會從資料庫刪除與該角色相關聯的使用者清單。 不會影響資料庫中的使用者資訊。       如果`throwOnPopulatedRole`是`true`則會擲回例外狀況，角色將不會刪除，如果角色由`roleName`參數有一個或多個成員。 如果`throwOnPopulatedRole`是`false`，則它是空的或不會刪除該角色。"
  example:
  - "The following example deletes a role from the database. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.SqlRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/csharp/m-system.web.security.sq_0_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/visualbasic/m-system.web.security.sq_0_1.aspx)]"
  syntax:
    content: public override bool DeleteRole (string roleName, bool throwOnPopulatedRole);
    parameters:
    - id: roleName
      type: System.String
      description: "要刪除的角色名稱。"
    - id: throwOnPopulatedRole
      type: System.Boolean
      description: "如果<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>，擲回例外狀況，如果`roleName`具有一或多個成員。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已成功刪除角色。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.Security.SqlRoleProvider.DeleteRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>為空字串，或包含逗號。       -或-<code>roleName</code>長度超過 256 個字元。"
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>roleName</code>有一或多個成員和<code>throwOnPopulatedRole</code>是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。       -或者-與資料庫通訊時發生未知的錯誤。"
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.FindUsersInRole(System.String,System.String)
  id: FindUsersInRole(System.String,System.String)
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: FindUsersInRole(String,String)
  nameWithType: SqlRoleProvider.FindUsersInRole(String,String)
  fullName: System.Web.Security.SqlRoleProvider.FindUsersInRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "取得使用者名稱的陣列中的使用者名稱包含要符合的指定的使用者名稱的其中一個角色。"
  remarks: "FindUsersInRole 方法由呼叫<xref:System.Web.Security.Roles>類別，並傳回在角色中的使用者清單，其中使用者名稱包含相符項目提供`usernameToMatch`設定`applicationName`。</xref:System.Web.Security.Roles> <xref:System.Web.Security.SqlRoleProvider>符合使用者名稱搜尋`usernameToMatch`參數值使用 LIKE 關鍵字，並支援 SQL Server 萬用字元。</xref:System.Web.Security.SqlRoleProvider> 例如，如果`usernameToMatch`參數設定為&quot;user1&quot;，則會傳回具有使用者名稱的使用者稱為&quot;user1&quot;的成員資格資訊，如果存在的話。 如果`usernameToMatch`參數設定為&quot;user %&quot;，則會傳回成員資格資訊的使用者使用的使用者名稱為&quot;user1&quot;、&quot;user2&quot;、&quot;user_admin&quot;，依此類推。"
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.FindUsersInRole%2A> method to display role membership based on user input. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.Roles#11](~/add/codesnippet/csharp/995e27e2-08d0-46c4-866e-_1.aspx)]\n [!code-vb[System.Web.Security.Roles#11](~/add/codesnippet/visualbasic/995e27e2-08d0-46c4-866e-_1.aspx)]"
  syntax:
    content: public override string[] FindUsersInRole (string roleName, string usernameToMatch);
    parameters:
    - id: roleName
      type: System.String
      description: "要搜尋的角色。"
    - id: usernameToMatch
      type: System.String
      description: "要搜尋的使用者名稱。"
    return:
      type: System.String[]
      description: "字串陣列，包含其中的使用者名稱必須符合的所有使用者的名稱<code> usernameToMatch </code> ，而且使用者是指定之角色的成員。"
  overload: System.Web.Security.SqlRoleProvider.FindUsersInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic).       -or-       <code>usernameToMatch</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>為空字串，或包含逗號。       -或-<code>usernameToMatch</code>為空字串。       -或-<code>roleName</code>長度超過 256 個字元。       -或-<code>usernameToMatch</code>長度超過 256 個字元。"
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>roleName</code>找不在資料庫中。       -或者-與資料庫通訊時發生未知的錯誤。"
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.GetAllRoles
  id: GetAllRoles
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: GetAllRoles()
  nameWithType: SqlRoleProvider.GetAllRoles()
  fullName: System.Web.Security.SqlRoleProvider.GetAllRoles()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "取得應用程式所有角色的清單。"
  remarks: "GetAllRoles 方法由呼叫<xref:System.Web.Security.Roles>類別來擷取在 ASP.NET 應用程式組態檔 (Web.config) 中指定的 SQL Server 資料庫中的所有角色的清單。</xref:System.Web.Security.Roles>"
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.GetAllRoles%2A> method to get the list of roles for an application and bind the results to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.SqlRoleProvider>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.sq_8_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.sq_8_1.aspx)]"
  syntax:
    content: public override string[] GetAllRoles ();
    parameters: []
    return:
      type: System.String[]
      description: "字串陣列，其中包含儲存在特定應用程式資料庫中的所有角色的名稱。"
  overload: System.Web.Security.SqlRoleProvider.GetAllRoles*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "與資料庫通訊時發生未知的錯誤。"
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.GetRolesForUser(System.String)
  id: GetRolesForUser(System.String)
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: GetRolesForUser(String)
  nameWithType: SqlRoleProvider.GetRolesForUser(String)
  fullName: System.Web.Security.SqlRoleProvider.GetRolesForUser(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "取得使用者所屬角色的清單。"
  remarks: "GetRolesForUser 方法由呼叫<xref:System.Web.Security.Roles>類別來擷取指定的使用者角色的清單，從 ASP.NET 應用程式組態檔 (Web.config) 中指定的 SQL Server 資料庫。</xref:System.Web.Security.Roles>"
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.GetRolesForUser%2A> method to retrieve a list of roles for a specified user and binds them to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.SqlRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/csharp/m-system.web.security.sq_5_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/visualbasic/m-system.web.security.sq_5_1.aspx)]"
  syntax:
    content: public override string[] GetRolesForUser (string username);
    parameters:
    - id: username
      type: System.String
      description: "要傳回角色清單的使用者。"
    return:
      type: System.String[]
      description: "字串陣列，其中包含指定的使用者所屬的所有角色的名稱。"
  overload: System.Web.Security.SqlRoleProvider.GetRolesForUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>username</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>username</code>包含逗號。       -或-<code>username</code>長度超過 256 個字元。"
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "與資料庫通訊時發生未知的錯誤。"
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.GetUsersInRole(System.String)
  id: GetUsersInRole(System.String)
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: GetUsersInRole(String)
  nameWithType: SqlRoleProvider.GetUsersInRole(String)
  fullName: System.Web.Security.SqlRoleProvider.GetUsersInRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "取得指定角色的使用者清單。"
  remarks: "GetUsersInRole 方法由呼叫<xref:System.Web.Security.Roles>類別來擷取與 ASP.NET 應用程式組態檔 (Web.config) 中指定的 SQL Server 資料庫中的指定角色相關聯的使用者清單。</xref:System.Web.Security.Roles>"
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.GetUsersInRole%2A> method to get a list of the users in a particular role and bind the results to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.SqlRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/m-system.web.security.sq_4_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/m-system.web.security.sq_4_1.aspx)]"
  syntax:
    content: public override string[] GetUsersInRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "要取得使用者清單的角色名稱。"
    return:
      type: System.String[]
      description: "字串陣列，其中包含指定之角色的成員之所有使用者的名稱。"
  overload: System.Web.Security.SqlRoleProvider.GetUsersInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>為空字串，或包含逗號。       -或-<code>roleName</code>長度超過 256 個字元。"
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>rolename</code>找不在資料庫中。       -或者-與資料庫通訊時發生未知的錯誤。"
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  id: Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: Initialize(String,NameValueCollection)
  nameWithType: SqlRoleProvider.Initialize(String,NameValueCollection)
  fullName: System.Web.Security.SqlRoleProvider.Initialize(String,NameValueCollection)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "使用 ASP.NET 應用程式組態檔中指定的屬性值，初始化 SQL Server 角色提供者。 這個方法不是直接從您的程式碼使用。"
  remarks: "這個方法會初始化<xref:System.Web.Security.SqlRoleProvider>屬性指定值 ASP.NET 應用程式組態檔 (Web.config) 中，而且不是直接從您的程式碼使用。</xref:System.Web.Security.SqlRoleProvider>"
  syntax:
    content: public override void Initialize (string name, System.Collections.Specialized.NameValueCollection config);
    parameters:
    - id: name
      type: System.String
      description: "名稱<xref href=&quot;System.Web.Security.SqlRoleProvider&quot;></xref>初始化執行個體。"
    - id: config
      type: System.Collections.Specialized.NameValueCollection
      description: "A <xref href=&quot;System.Collections.Specialized.NameValueCollection&quot;> </xref> ，其中包含的名稱和角色提供者的組態選項的值。"
  overload: System.Web.Security.SqlRoleProvider.Initialize*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "ASP.NET 應用程式沒有在執行<xref href=&quot;System.Web.AspNetHostingPermissionLevel&quot;></xref>信任或更高版本。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>config</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<xref uid=&quot;langword_csharp_connectionStringName&quot; name=&quot;connectionStringName&quot; href=&quot;&quot;> </xref>屬性是空的或不存在應用程式組態檔中這個<xref href=&quot;System.Web.Security.SqlRoleProvider&quot;></xref>執行個體。       -或- <xref uid=&quot;langword_csharp_applicationName&quot; name=&quot;applicationName&quot; href=&quot;&quot;> </xref>屬性超過 256 個字元。       -應用程式組態檔，這個<xref href=&quot;System.Web.Security.SqlRoleProvider&quot;></xref>執行個體會包含無法辨識的屬性。"
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.IsUserInRole(System.String,System.String)
  id: IsUserInRole(System.String,System.String)
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: IsUserInRole(String,String)
  nameWithType: SqlRoleProvider.IsUserInRole(String,String)
  fullName: System.Web.Security.SqlRoleProvider.IsUserInRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "取得值，指出指定的使用者是否在指定的角色。"
  remarks: "IsUserInRole 方法由呼叫<xref:System.Web.Security.Roles>類別和<xref:System.Security.Principal.IPrincipal.IsInRole%2A>方法<xref:System.Web.UI.Page.User%2A?displayProperty=fullName>屬性來決定使用者是否為 ASP.NET 應用程式組態檔 (Web.config) 中指定的 SQL Server 資料庫中的角色相關聯。</xref:System.Web.UI.Page.User%2A?displayProperty=fullName> </xref:System.Security.Principal.IPrincipal.IsInRole%2A> </xref:System.Web.Security.Roles>"
  example:
  - "The following code example programmatically checks to see whether the logged-on user is in the Administrators role before allowing the user to view user roles. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.SqlRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/csharp/m-system.web.security.sq_9_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/visualbasic/m-system.web.security.sq_9_1.aspx)]"
  syntax:
    content: public override bool IsUserInRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: "要搜尋的使用者名稱。"
    - id: roleName
      type: System.String
      description: "要搜尋的角色。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的使用者名稱是在指定的角色。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.Security.SqlRoleProvider.IsUserInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>為空字串，或包含逗號。       -或-<code>username</code>是包含逗號。       -或-<code>roleName</code>長度超過 256 個字元。       -或-<code>username</code>長度超過 256 個字元。"
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "與資料庫通訊時發生未知的錯誤。"
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])
  id: RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: RemoveUsersFromRoles(String[],String[])
  nameWithType: SqlRoleProvider.RemoveUsersFromRoles(String[],String[])
  fullName: System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles(String[],String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "從指定的角色移除指定的使用者名稱。"
  remarks: "RemoveUsersFromRoles 方法由呼叫<xref:System.Web.Security.Roles>從 ASP.NET 應用程式組態檔 (Web.config) 中指定的 SQL Server 資料庫中的一個或多個角色移除一或多個使用者的類別。</xref:System.Web.Security.Roles> 這個方法會呼叫<xref:System.Web.Security.Roles.RemoveUserFromRole%2A>， <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A>，<xref:System.Web.Security.Roles.RemoveUsersFromRole%2A>的<xref:System.Web.Security.Roles>類別</xref:System.Web.Security.Roles>和<xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A>方法</xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A></xref:System.Web.Security.Roles.RemoveUsersFromRole%2A></xref:System.Web.Security.Roles.RemoveUserFromRoles%2A></xref:System.Web.Security.Roles.RemoveUserFromRole%2A>       在交易內進行 RemoveUsersFromRoles 呼叫期間執行資料庫更新。 如果發生錯誤，例如不存在的使用者名稱或使用者名稱已在指定的角色，則會復原交易，會執行任何更新。       使用者名稱和角色名稱不能包含逗號。"
  example:
  - "The following code example adds one or more users to a role or removes a user from a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.SqlRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/b95e86c3-c05c-486e-96fd-_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/b95e86c3-c05c-486e-96fd-_1.aspx)]"
  syntax:
    content: public override void RemoveUsersFromRoles (string[] usernames, string[] roleNames);
    parameters:
    - id: usernames
      type: System.String[]
      description: "從指定的角色中移除的使用者名稱的字串陣列。"
    - id: roleNames
      type: System.String[]
      description: "若要移除指定之使用者名稱的角色名稱的字串陣列。"
  overload: System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles in <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       One of the users in <code>usernames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "其中一個在角色<code> roleNames </code>為空字串，或包含逗號。       -在使用者的其中一個<code> usernames </code>為空字串，或包含逗號。       -其中一個在角色<code> roleNames </code>長度超過 256 個字元。       -在使用者的其中一個<code> usernames </code>長度超過 256 個字元。       - <code> roleNames </code>包含重複的項目。       - <code> usernames </code>包含重複的項目。"
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "找不到一或多個指定的使用者名稱。       -或者-找不到一或多個指定的角色名稱。       -或者-一或多個指定的使用者名稱所關聯的一或多個指定的角色名稱。       -或者-與資料庫通訊時發生未知的錯誤。"
  platform:
  - net462
- uid: System.Web.Security.SqlRoleProvider.RoleExists(System.String)
  id: RoleExists(System.String)
  parent: System.Web.Security.SqlRoleProvider
  langs:
  - csharp
  name: RoleExists(String)
  nameWithType: SqlRoleProvider.RoleExists(String)
  fullName: System.Web.Security.SqlRoleProvider.RoleExists(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "取得值，指出指定的角色名稱是否已存在於資料庫角色中。"
  remarks: "RoleExists 方法由呼叫<xref:System.Web.Security.Roles>類別以決定在 ASP.NET 應用程式組態檔 (Web.config) 中指定的 SQL Server 資料庫中角色名稱是否存在。</xref:System.Web.Security.Roles>"
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.RoleExists%2A> method to determine whether a role name already exists before creating the role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.SqlRoleProvider>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.sq_1_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.sq_1_1.aspx)]"
  syntax:
    content: public override bool RoleExists (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "要在資料庫中搜尋的角色名稱。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果角色名稱已存在於資料庫中。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.Security.SqlRoleProvider.RoleExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>為空字串，或包含逗號。       -或-<code>roleName</code>長度超過 256 個字元。"
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "與資料庫通訊時發生未知的錯誤。"
  platform:
  - net462
references:
- uid: System.Web.Security.RoleProvider
  isExternal: false
  name: System.Web.Security.RoleProvider
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Configuration.Provider.ProviderException
  parent: System.Configuration.Provider
  isExternal: false
  name: ProviderException
  nameWithType: ProviderException
  fullName: System.Configuration.Provider.ProviderException
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.Web.Security.SqlRoleProvider.#ctor
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: SqlRoleProvider()
  nameWithType: SqlRoleProvider.SqlRoleProvider()
  fullName: System.Web.Security.SqlRoleProvider.SqlRoleProvider()
- uid: System.Web.Security.SqlRoleProvider.AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: AddUsersToRoles(String[],String[])
  nameWithType: SqlRoleProvider.AddUsersToRoles(String[],String[])
  fullName: System.Web.Security.SqlRoleProvider.AddUsersToRoles(String[],String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.Security.SqlRoleProvider.ApplicationName
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: ApplicationName
  nameWithType: SqlRoleProvider.ApplicationName
  fullName: System.Web.Security.SqlRoleProvider.ApplicationName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Security.SqlRoleProvider.CreateRole(System.String)
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: CreateRole(String)
  nameWithType: SqlRoleProvider.CreateRole(String)
  fullName: System.Web.Security.SqlRoleProvider.CreateRole(String)
- uid: System.Web.Security.SqlRoleProvider.DeleteRole(System.String,System.Boolean)
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: DeleteRole(String,Boolean)
  nameWithType: SqlRoleProvider.DeleteRole(String,Boolean)
  fullName: System.Web.Security.SqlRoleProvider.DeleteRole(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Security.SqlRoleProvider.FindUsersInRole(System.String,System.String)
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: FindUsersInRole(String,String)
  nameWithType: SqlRoleProvider.FindUsersInRole(String,String)
  fullName: System.Web.Security.SqlRoleProvider.FindUsersInRole(String,String)
- uid: System.Web.Security.SqlRoleProvider.GetAllRoles
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: GetAllRoles()
  nameWithType: SqlRoleProvider.GetAllRoles()
  fullName: System.Web.Security.SqlRoleProvider.GetAllRoles()
- uid: System.Web.Security.SqlRoleProvider.GetRolesForUser(System.String)
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: GetRolesForUser(String)
  nameWithType: SqlRoleProvider.GetRolesForUser(String)
  fullName: System.Web.Security.SqlRoleProvider.GetRolesForUser(String)
- uid: System.Web.Security.SqlRoleProvider.GetUsersInRole(System.String)
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: GetUsersInRole(String)
  nameWithType: SqlRoleProvider.GetUsersInRole(String)
  fullName: System.Web.Security.SqlRoleProvider.GetUsersInRole(String)
- uid: System.Web.Security.SqlRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: Initialize(String,NameValueCollection)
  nameWithType: SqlRoleProvider.Initialize(String,NameValueCollection)
  fullName: System.Web.Security.SqlRoleProvider.Initialize(String,NameValueCollection)
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Web.Security.SqlRoleProvider.IsUserInRole(System.String,System.String)
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: IsUserInRole(String,String)
  nameWithType: SqlRoleProvider.IsUserInRole(String,String)
  fullName: System.Web.Security.SqlRoleProvider.IsUserInRole(String,String)
- uid: System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: RemoveUsersFromRoles(String[],String[])
  nameWithType: SqlRoleProvider.RemoveUsersFromRoles(String[],String[])
  fullName: System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles(String[],String[])
- uid: System.Web.Security.SqlRoleProvider.RoleExists(System.String)
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: RoleExists(String)
  nameWithType: SqlRoleProvider.RoleExists(String)
  fullName: System.Web.Security.SqlRoleProvider.RoleExists(String)
- uid: System.Web.Security.SqlRoleProvider.#ctor*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: SqlRoleProvider
  nameWithType: SqlRoleProvider.SqlRoleProvider
- uid: System.Web.Security.SqlRoleProvider.AddUsersToRoles*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: AddUsersToRoles
  nameWithType: SqlRoleProvider.AddUsersToRoles
- uid: System.Web.Security.SqlRoleProvider.ApplicationName*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: ApplicationName
  nameWithType: SqlRoleProvider.ApplicationName
- uid: System.Web.Security.SqlRoleProvider.CreateRole*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: CreateRole
  nameWithType: SqlRoleProvider.CreateRole
- uid: System.Web.Security.SqlRoleProvider.DeleteRole*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: DeleteRole
  nameWithType: SqlRoleProvider.DeleteRole
- uid: System.Web.Security.SqlRoleProvider.FindUsersInRole*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: FindUsersInRole
  nameWithType: SqlRoleProvider.FindUsersInRole
- uid: System.Web.Security.SqlRoleProvider.GetAllRoles*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: GetAllRoles
  nameWithType: SqlRoleProvider.GetAllRoles
- uid: System.Web.Security.SqlRoleProvider.GetRolesForUser*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: GetRolesForUser
  nameWithType: SqlRoleProvider.GetRolesForUser
- uid: System.Web.Security.SqlRoleProvider.GetUsersInRole*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: GetUsersInRole
  nameWithType: SqlRoleProvider.GetUsersInRole
- uid: System.Web.Security.SqlRoleProvider.Initialize*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: Initialize
  nameWithType: SqlRoleProvider.Initialize
- uid: System.Web.Security.SqlRoleProvider.IsUserInRole*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: IsUserInRole
  nameWithType: SqlRoleProvider.IsUserInRole
- uid: System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: RemoveUsersFromRoles
  nameWithType: SqlRoleProvider.RemoveUsersFromRoles
- uid: System.Web.Security.SqlRoleProvider.RoleExists*
  parent: System.Web.Security.SqlRoleProvider
  isExternal: false
  name: RoleExists
  nameWithType: SqlRoleProvider.RoleExists
