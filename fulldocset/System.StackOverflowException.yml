### YamlMime:ManagedReference
items:
- uid: System.StackOverflowException
  id: StackOverflowException
  children:
  - System.StackOverflowException.#ctor
  - System.StackOverflowException.#ctor(System.String)
  - System.StackOverflowException.#ctor(System.String,System.Exception)
  langs:
  - csharp
  name: StackOverflowException
  nameWithType: StackOverflowException
  fullName: System.StackOverflowException
  type: Class
  summary: "執行堆疊溢位，因為它包含太多巢狀的方法呼叫時擲回例外狀況。 這個類別無法被繼承。"
  remarks: "StackOverflowException 會執行堆疊溢位錯誤，通常會發生的非常深或未繫結遞迴函式擲回。       StackOverflowException 會使用 HRESULT COR_E_STACKOVERFLOW，0x800703E9 的值。 <xref:System.Reflection.Emit.OpCodes.Localloc>Intermediate language (IL) 指令會擲回 StackOverflowException。</xref:System.Reflection.Emit.OpCodes.Localloc> 如需 StackOverflowException 物件的初始屬性值的清單，請參閱<xref:System.StackOverflowException.%23ctor%2A>建構函式。</xref:System.StackOverflowException.%23ctor%2A>      ## 在.NET Framework 1.0 和 1.1 版考量，您可以攔截 StackOverflowException 物件 （例如，若要從無限遞迴復原）。 從.NET Framework 2.0 開始，您不能攔截 StackOverflowException 物件`try` / `catch`區塊，以及對應的處理序會以預設為結尾。 因此，您應該撰寫程式碼來偵測並防止堆疊溢位。 例如，如果您的應用程式相依於遞迴，使用計數器或狀態條件來終止遞迴迴圈。 下列範例會使用 計數器來確認遞迴數目呼叫`Execute`方法不能超過 MAX_RECURSIVE_CALLS 常數所定義的最大值。       [!code-vb[System.StackOverflowException.Class#1](~/add/codesnippet/visualbasic/t-system.stackoverflowex_1.vb)][!code-cs[System.StackOverflowException.Class#1](~/add/codesnippet/csharp/t-system.stackoverflowex_1.cs) ]       >  [!NOTE] > 套用<xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute>方法會擲回 StackOverflowException 屬性沒有任何作用。</xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute>   您仍然無法處理來自使用者程式碼的例外狀況。       如果您的應用程式裝載 common language runtime (CLR)，它可以指定 CLR 應該卸載應用程式定義域堆疊溢位例外狀況，就會發生的位置，並讓對應的程序繼續執行。 如需詳細資訊，請參閱[ICLRPolicyManager 介面](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class StackOverflowException : SystemException
  inheritance:
  - System.Exception
  - System.SystemException
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.StackOverflowException.#ctor
  id: '#ctor'
  parent: System.StackOverflowException
  langs:
  - csharp
  name: StackOverflowException()
  nameWithType: StackOverflowException.StackOverflowException()
  fullName: System.StackOverflowException.StackOverflowException()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新執行個體<xref href=&quot;System.StackOverflowException&quot;></xref>類別，設定<xref:System.Exception.Message*>屬性的新執行個體，系統提供的訊息，描述錯誤，例如 「 要求的作業造成堆疊溢位 」。</xref:System.Exception.Message*> 此訊息會考量目前系統文化特性。"
  remarks: "下表顯示<xref:System.StackOverflowException>.</xref:System.StackOverflowException>的執行個體的初始屬性值      |屬性 |值 |  |--------------|-----------|  |<xref:System.Exception.InnerException%2A>|`null`.|  |<xref:System.Exception.Message%2A>|當地語系化的錯誤訊息字串。 |</xref:System.Exception.Message%2A> </xref:System.Exception.InnerException%2A>"
  syntax:
    content: public StackOverflowException ();
    parameters: []
  overload: System.StackOverflowException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.StackOverflowException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.StackOverflowException
  langs:
  - csharp
  name: StackOverflowException(String)
  nameWithType: StackOverflowException.StackOverflowException(String)
  fullName: System.StackOverflowException.StackOverflowException(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新執行個體<xref href=&quot;System.StackOverflowException&quot;></xref>類別指定的錯誤訊息。"
  remarks: "下表顯示<xref:System.StackOverflowException>.</xref:System.StackOverflowException>的執行個體的初始屬性值      |屬性 |值 |  |--------------|-----------|  |<xref:System.Exception.InnerException%2A>|Null 參考 (`Nothing`在 Visual Basic 中)。 |  |<xref:System.Exception.Message%2A>|錯誤訊息字串。 |</xref:System.Exception.Message%2A> </xref:System.Exception.InnerException%2A>"
  syntax:
    content: public StackOverflowException (string message);
    parameters:
    - id: message
      type: System.String
      description: "A<xref:System.String>描述錯誤。</xref:System.String> 訊息的內容被為了能讓人瞭解。 這個建構函式的呼叫端，才能確保這個字串已經被當地語系化為目前的系統文化特性。"
  overload: System.StackOverflowException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.StackOverflowException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.StackOverflowException
  langs:
  - csharp
  name: StackOverflowException(String,Exception)
  nameWithType: StackOverflowException.StackOverflowException(String,Exception)
  fullName: System.StackOverflowException.StackOverflowException(String,Exception)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新執行個體<xref href=&quot;System.StackOverflowException&quot;></xref>類別指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考。"
  remarks: "如前一個例外狀況直接結果可以包含在前一個例外狀況的參考就會擲回的例外狀況<xref:System.Exception.InnerException%2A>屬性。</xref:System.Exception.InnerException%2A> <xref:System.Exception.InnerException%2A>屬性會傳回相同的值傳遞到建構函式，則為 null 參考 (`Nothing`在 Visual Basic 中) 如果<xref:System.Exception.InnerException%2A>屬性沒有提供內部例外值給建構函式。</xref:System.Exception.InnerException%2A> </xref:System.Exception.InnerException%2A>       下表顯示<xref:System.StackOverflowException>.</xref:System.StackOverflowException>的執行個體的初始屬性值      |屬性 |值 |  |--------------|-----------|  |<xref:System.Exception.InnerException%2A>|內部例外狀況參考。 |  |<xref:System.Exception.Message%2A>|錯誤訊息字串。 |</xref:System.Exception.Message%2A> </xref:System.Exception.InnerException%2A>"
  syntax:
    content: public StackOverflowException (string message, Exception innerException);
    parameters:
    - id: message
      type: System.String
      description: "解釋例外狀況的原因的錯誤訊息。"
    - id: innerException
      type: System.Exception
      description: "造成目前例外狀況的例外狀況。 如果`innerException`參數不是 null 參考 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>在 Visual Basic 中)，目前的例外狀況會在引發<xref uid=&quot;langword_csharp_catch&quot; name=&quot;catch&quot; href=&quot;&quot;></xref>處理內部例外狀況區塊。"
  overload: System.StackOverflowException.#ctor*
  exceptions: []
  platform:
  - net462
references:
- uid: System.SystemException
  isExternal: false
  name: System.SystemException
- uid: System.StackOverflowException.#ctor
  parent: System.StackOverflowException
  isExternal: false
  name: StackOverflowException()
  nameWithType: StackOverflowException.StackOverflowException()
  fullName: System.StackOverflowException.StackOverflowException()
- uid: System.StackOverflowException.#ctor(System.String)
  parent: System.StackOverflowException
  isExternal: false
  name: StackOverflowException(String)
  nameWithType: StackOverflowException.StackOverflowException(String)
  fullName: System.StackOverflowException.StackOverflowException(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.StackOverflowException.#ctor(System.String,System.Exception)
  parent: System.StackOverflowException
  isExternal: false
  name: StackOverflowException(String,Exception)
  nameWithType: StackOverflowException.StackOverflowException(String,Exception)
  fullName: System.StackOverflowException.StackOverflowException(String,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.StackOverflowException.#ctor*
  parent: System.StackOverflowException
  isExternal: false
  name: StackOverflowException
  nameWithType: StackOverflowException.StackOverflowException
