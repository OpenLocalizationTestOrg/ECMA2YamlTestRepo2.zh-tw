### YamlMime:ManagedReference
items:
- uid: System.Xml.Xsl.XslTransform
  id: XslTransform
  children:
  - System.Xml.Xsl.XslTransform.#ctor
  - System.Xml.Xsl.XslTransform.Load(System.String)
  - System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)
  - System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)
  - System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)
  - System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)
  - System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)
  - System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)
  - System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)
  - System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver,System.Security.Policy.Evidence)
  - System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver,System.Security.Policy.Evidence)
  - System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver,System.Security.Policy.Evidence)
  - System.Xml.Xsl.XslTransform.Transform(System.String,System.String)
  - System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)
  - System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)
  - System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)
  - System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  - System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  - System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)
  - System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  - System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  - System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  - System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)
  - System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  - System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)
  - System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)
  - System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  - System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)
  - System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)
  - System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  - System.Xml.Xsl.XslTransform.XmlResolver
  langs:
  - csharp
  name: XslTransform
  nameWithType: XslTransform
  fullName: System.Xml.Xsl.XslTransform
  type: Class
  summary: "轉換使用可延伸樣式表語言轉換 (XSLT) 樣式表的 XML 資料。"
  remarks: "> [!NOTE]> XslTransform 類別是 Microsoft.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       XslTransform 支援 XSLT 1.0 語法。 XSLT 樣式表必須使用命名空間`http://www.w3.org/1999/XSL/Transform`。       其他引數也可以加入至樣式表使用<xref:System.Xml.Xsl.XsltArgumentList>類別。</xref:System.Xml.Xsl.XsltArgumentList> 這個類別包含可從樣式表呼叫的樣式表和擴充物件的輸入的參數。       將 XML 資料轉換︰ 1。  建立 XslTransform 物件。      2.  使用<xref:System.Xml.Xsl.XslTransform.Load%2A>方法來載入樣式表的轉換。</xref:System.Xml.Xsl.XslTransform.Load%2A> 此方法有數個多載，可以載入樣式表使用<xref:System.Xml.XmlReader>， <xref:System.Xml.XPath.XPathNavigator>， <xref:System.Xml.XPath.IXPathNavigable>，或使用檔案的位置的 URL。</xref:System.Xml.XPath.IXPathNavigable> </xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XmlReader>      3.  使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>來轉換 XML 資料的方法。</xref:System.Xml.Xsl.XslTransform.Transform%2A> 這個方法有數個多載，而且可以處理不同類型的輸入和輸出。 您也可以指定<xref:System.Xml.Xsl.XsltArgumentList>包含要在轉換期間使用做為輸入的其他引數。</xref:System.Xml.Xsl.XsltArgumentList>       **安全性考量**時建立的應用程式，會使用 XslTransform 類別，您應該留意下列項目及其含意:-依預設會啟用擴充物件。 如果<xref:System.Xml.Xsl.XsltArgumentList>包含擴充物件的物件會傳遞至<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法，則會加以利用。</xref:System.Xml.Xsl.XslTransform.Transform%2A> </xref:System.Xml.Xsl.XsltArgumentList>      -XSLT 樣式表可以包含其他檔案及內嵌指令碼區塊的參考。 惡意使用者可以利用這一點，藉由提供您資料或樣式表執行時將會導致您的系統處理，直到電腦資源不足。      的在混合的信任環境中執行 XSLT 應用程式會導致詐騙的樣式表。 例如，惡意使用者可以載入含有害樣式表的物件和遞交給另一個使用者隨後會呼叫<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法並執行轉換。</xref:System.Xml.Xsl.XslTransform.Transform%2A>       不接受 XslTransform 物件、 XSLT 樣式表或來自不受信任來源的 XML 來源資料，可以減輕這些安全性問題。       **指令碼支援**這個類別支援使用內嵌指令碼`msxsl:script`項目。       在 1.1 版的.NET framework，樣式表的辨識項會決定哪些權限會指派給 內嵌指令碼。      -如果樣式表載入從統一資源識別元 (URI)，URI 用來建立辨識項。 此辨識項會包含 URI 以及與其網站和區域。      -如果使用其他來源載入樣式表時，您可以藉由傳遞提供辨識項<xref:System.Security.Policy.Evidence?displayProperty=fullName>物件<xref:System.Xml.Xsl.XslTransform.Load%2A>方法。</xref:System.Xml.Xsl.XslTransform.Load%2A> </xref:System.Security.Policy.Evidence?displayProperty=fullName> 否則，指令碼組件具有完全信任。       非完全信任呼叫端︰`UnmanagedCode`權限，才能編譯內嵌指令碼。 `ControlEvidence`權限，才能提供<xref:System.Security.Policy.Evidence>至<xref:System.Xml.Xsl.XslTransform.Load%2A>方法。</xref:System.Xml.Xsl.XslTransform.Load%2A> </xref:System.Security.Policy.Evidence> A<xref:System.Security.SecurityException>如果呼叫端沒有必要的權限，會擲回。</xref:System.Security.SecurityException> 請參閱<xref:System.Security.Permissions.SecurityPermission?displayProperty=fullName>和<xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>如需詳細資訊。</xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> </xref:System.Security.Permissions.SecurityPermission?displayProperty=fullName>       `msxsl:script`項目具有下列需求:-`msxsl:script`元素屬於`urn:schemas-microsoft-com:xslt`命名空間。 樣式表必須包含命名空間宣告`xmlns:msxsl=urn:schemas-microsoft-com:xslt`。      -`msxsl:script`元素可以包含`language`屬性來指定要使用的指令碼語言。 值`language`屬性必須是下列其中之一︰ C#、 CSharp、 VB、 VisualBasic、 JScript、 或 JavaScript。 語言名稱不區分大小寫，因為 JavaScript 和 javascript 都有效。 如果`language`未指定屬性，則預設為 JScript。      -`msxsl:script`元素必須包含`implements-prefix`屬性，其中包含代表指令碼區塊相關聯的命名空間的前置詞。 此命名空間必須定義樣式表中。 樣式表可以包含多個命名空間所分組的指令碼區塊。 您不能有相同的命名空間內的多種語言的指令碼區塊。 提供指令碼區塊會位於相同的命名空間，指令碼區塊可以呼叫另一個的指令碼區塊中定義的函式。 根據規則和語法的指令碼語言來剖析的指令碼區塊的內容 (由提供`language`屬性)。 例如，如果您在 C# 指令碼區塊，註解會加上`//`字元。 註解必須是有效的 XML 內容。       `Note`建議您將指令碼區塊包裝在 CDATA 區段。      ```   <msxsl:script implements-prefix=&quot;xy&quot; language=&quot;C#&quot;>     <![CDATA[     // Add code here.     ]]>   </msxsl:script>   ```函式可以宣告內`msxsl:script`項目。 下表顯示根據預設所支援的命名空間。      |支援的命名空間 |描述 |  |--------------------------|-----------------|  |`System`|系統類別。 |  |`System.Collection`|集合類別。 |  |`System.Text`|處理類別的文字。 |  |`System.Xml`|核心 XML 類別。 |  |`System.Xml.Xsl`|XSLT 類別。 |  |`System.Xml.XPath`|XML 路徑語言 (XPath) 類別。 |      提供的引數和傳回指令碼函式所定義的值必須是其中一個下面所列的 World Wide Web Consortium (W3C) 型別。 下表詳細說明 W3C 型別、 XPath 或 XSLT 之間的對應和對應的.NET Framework 類別。      |W3C 型別 |對等的.NET 類別 |  |--------------|---------------------------|  |字串 (XPath) |`System.String`|  |布林值 (XPath) |`System.Boolean`|  |數字 (XPath) |`System.Double`|  |結果樹狀片段 (XSLT) |`System.Xml.XPath.XPathNavigator`|  |節點設定 (XPath) |`System.Xml.XPath.XPathNodeIterator`|      如果指令碼函式會利用其中下列數字型別︰ Int16、 UInt16、 Int32、 UInt32、 Int64、 UInt64、 單一、 或 Decimal，這些類型會強制轉成 Double，其對應至 W3C XPath 型別數值。       擲回例外狀況時呼叫的函式不能將引數結果轉換成其中一個必要的型別。      > [!NOTE]  >   `msxsl:script`和`msxsl:node-list`都是唯一的函式，從`urn:schemas-microsoft-com:xslt`XslTransform 類別所支援的命名空間。       XslTransform 能夠利用 common language runtime (CLR) 程式碼，做為副檔名的機制。 這會透過將類別的執行個體傳遞至 XslTransform 類別，以及呼叫它的 XSLT 樣式表中的公用方法。 方法所定義的`params`關鍵字，以允許未指定要傳遞的參數數目，無法在此案例中正常運作。 請參閱[params](~/add/includes/ajax-current-ext-md.md)如需詳細資訊。       如需詳細資訊，請參閱[使用 XslTransform 類別進行 XSLT 轉換](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example transforms the specified XML document and outputs the result to the console.  \n  \n [!code-vb[Classic WebData XslTransform Example#1](~/add/codesnippet/visualbasic/t-system.xml.xsl.xsltran_1.vb)]\n [!code-cs[Classic WebData XslTransform Example#1](~/add/codesnippet/csharp/t-system.xml.xsl.xsltran_1.cs)]"
  syntax:
    content: >-
      [System.Obsolete("This class has been deprecated. Please use System.Xml.Xsl.XslCompiledTransform instead. http://go.microsoft.com/fwlink/?linkid=14202")]

      public sealed class XslTransform
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.#ctor
  id: '#ctor'
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: XslTransform()
  nameWithType: XslTransform.XslTransform()
  fullName: System.Xml.Xsl.XslTransform.XslTransform()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "初始化的新執行個體<xref href=&quot;System.Xml.Xsl.XslTransform&quot;></xref>類別。"
  syntax:
    content: public XslTransform ();
    parameters: []
  overload: System.Xml.Xsl.XslTransform.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Load(System.String)
  id: Load(System.String)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Load(String)
  nameWithType: XslTransform.Load(String)
  fullName: System.Xml.Xsl.XslTransform.Load(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "載入由 URL 指定的 XSLT 樣式表。"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl=``http://www.w3.org/1999/XSL/Transform`。       這個方法會載入 XSLT 樣式表，包括任何參考中的樣式表`xsl:include`和`xsl:import`項目。 使用解析外部資源<xref:System.Xml.XmlUrlResolver>不具使用者認證。</xref:System.Xml.XmlUrlResolver> 如果樣式表位於需要驗證的網路資源，使用的多載，<xref:System.Xml.XmlResolver>做為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>       如果樣式表包含內嵌指令碼，指令碼會編譯至組件。 樣式表的 URI 用來建立套用至組件辨識項。 與相關的問題<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和樣式表，內嵌指令碼，請參閱 Q316755 在 Microsoft 知識庫文件在 http://support.microsoft.com。</xref:System.Xml.Xsl.XslTransform.Load%2A>      > [!NOTE] > 如果呼叫端沒有`UnmanagedCode`權限，內嵌指令碼不會編譯和<xref:System.Security.SecurityException>就會擲回。</xref:System.Security.SecurityException> 請參閱<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>如需詳細資訊。</xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> </xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "The following example transforms an XML document into an HTML document. It displays the ISBN, title, and price for each book in a table.  \n  \n [!code-cs[Classic WebData XslTransform.Transform7 Example#1](~/add/codesnippet/csharp/m-system.xml.xsl.xsltran_0_1.cs)]\n [!code-cpp[Classic WebData XslTransform.Transform7 Example#1](~/add/codesnippet/cpp/m-system.xml.xsl.xsltran_0_1.cpp)]\n [!code-vb[Classic WebData XslTransform.Transform7 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xsl.xsltran_0_1.vb)]  \n  \n The sample uses the following two input files.  \n  \n `books.xml`  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/add/codesnippet/xml/m-system.xml.xsl.xsltran_0_2.xml)]  \n  \n `output.xsl`  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/add/codesnippet/xml/m-system.xml.xsl.xsltran_0_3.xsl)]"
  syntax:
    content: public void Load (string url);
    parameters:
    - id: url
      type: System.String
      description: "指定要載入的 XSLT 樣式表的 URL。"
  overload: System.Xml.Xsl.XslTransform.Load*
  exceptions:
  - type: System.Xml.Xsl.XsltCompileException
    commentId: T:System.Xml.Xsl.XsltCompileException
    description: "載入的資源不是有效的樣式表。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "樣式表包含內嵌的指令碼，而且呼叫端沒有<xref uid=&quot;langword_csharp_UnmanagedCode&quot; name=&quot;UnmanagedCode&quot; href=&quot;&quot;></xref>權限。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)
  id: Load(System.Xml.XmlReader)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Load(XmlReader)
  nameWithType: XslTransform.Load(XmlReader)
  fullName: System.Xml.Xsl.XslTransform.Load(XmlReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "載入 XSLT 樣式表包含在<xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。       這個方法會載入 XSLT 樣式表，包括任何參考中的樣式表`xsl:include`和`xsl:import`項目。 使用解析外部資源<xref:System.Xml.XmlUrlResolver>不具使用者認證。</xref:System.Xml.XmlUrlResolver> 如果樣式表位於需要驗證的網路資源，使用的多載，<xref:System.Xml.XmlResolver>做為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>       從目前節點載入樣式表<xref:System.Xml.XmlReader>透過所有子系。</xref:System.Xml.XmlReader> 這可讓您使用做為樣式表的文件的一部分。 之後<xref:System.Xml.Xsl.XslTransform.Load%2A>方法傳回時，<xref:System.Xml.XmlReader>位於樣式表結尾之後的下一個節點。</xref:System.Xml.XmlReader> </xref:System.Xml.Xsl.XslTransform.Load%2A> 如果到達文件結尾，<xref:System.Xml.XmlReader>會定位於檔案結尾 (EOF)。</xref:System.Xml.XmlReader>       如果樣式表包含實體，您應該指定<xref:System.Xml.XmlReader>，可以解析實體 (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=fullName>傳回`true`)。</xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=fullName> </xref:System.Xml.XmlReader> 在此情況下，<xref:System.Xml.XmlValidatingReader>可用。</xref:System.Xml.XmlValidatingReader>       如果樣式表包含內嵌指令碼，指令碼會編譯至組件。 組件具有完全信任。 建議的作法是要提供辨識項使用<xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>方法。</xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> 與相關的問題<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和樣式表，內嵌指令碼，請參閱 Q316755 在 Microsoft 知識庫文件在 http://support.microsoft.com。</xref:System.Xml.Xsl.XslTransform.Load%2A>      > [!NOTE] > 如果呼叫端沒有`UnmanagedCode`權限，內嵌指令碼不會編譯和<xref:System.Security.SecurityException>就會擲回。</xref:System.Security.SecurityException> 請參閱<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>如需詳細資訊。</xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> </xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "The following example transforms an XML file sorting all the books by title.  \n  \n [!code-cs[XslTransform.Load3#1](~/add/codesnippet/csharp/m-system.xml.xsl.xsltran_1_1.cs)]\n [!code-cpp[XslTransform.Load3#1](~/add/codesnippet/cpp/m-system.xml.xsl.xsltran_1_1.cpp)]\n [!code-vb[XslTransform.Load3#1](~/add/codesnippet/visualbasic/m-system.xml.xsl.xsltran_1_1.vb)]  \n  \n The example uses the following data files as input.  \n  \n `books.xml`  \n  \n [!code-xml[XslTransform.Load3#2](~/add/codesnippet/xml/m-system.xml.xsl.xsltran_1_2.xml)]  \n  \n `titles.xsl`  \n  \n [!code-xml[XslTransform.Load3#3](~/add/codesnippet/xml/m-system.xml.xsl.xsltran_1_3.xsl)]"
  syntax:
    content: public void Load (System.Xml.XmlReader stylesheet);
    parameters:
    - id: stylesheet
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>物件，其中包含 XSLT 樣式表。</xref:System.Xml.XmlReader>"
  overload: System.Xml.Xsl.XslTransform.Load*
  exceptions:
  - type: System.Xml.Xsl.XsltCompileException
    commentId: T:System.Xml.Xsl.XsltCompileException
    description: "目前節點不符合有效的樣式表。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "樣式表包含內嵌的指令碼，而且呼叫端沒有<xref uid=&quot;langword_csharp_UnmanagedCode&quot; name=&quot;UnmanagedCode&quot; href=&quot;&quot;></xref>權限。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)
  id: Load(System.Xml.XPath.IXPathNavigable)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Load(IXPathNavigable)
  nameWithType: XslTransform.Load(IXPathNavigable)
  fullName: System.Xml.Xsl.XslTransform.Load(IXPathNavigable)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "載入 XSLT 樣式表中包含<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;> </xref>。"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。       這個方法會載入 XSLT 樣式表，包括任何參考中的樣式表`xsl:include`和`xsl:import`項目。 使用解析外部資源<xref:System.Xml.XmlUrlResolver>不具使用者認證。</xref:System.Xml.XmlUrlResolver> 如果樣式表位於需要驗證的網路資源，使用的多載，<xref:System.Xml.XmlResolver>做為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>       如果樣式表包含內嵌指令碼，指令碼會編譯至組件。 組件具有完全信任。 建議的作法是要提供辨識項使用<xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.IXPathNavigable%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>方法。</xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.IXPathNavigable%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> 與相關的問題<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和樣式表，內嵌指令碼，請參閱 Q316755 在 Microsoft 知識庫文件在 http://support.microsoft.com。</xref:System.Xml.Xsl.XslTransform.Load%2A>      > [!NOTE] > 如果呼叫端沒有`UnmanagedCode`權限，內嵌指令碼不會編譯和<xref:System.Security.SecurityException>就會擲回。</xref:System.Security.SecurityException> 請參閱<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>如需詳細資訊。</xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> </xref:System.Security.Permissions.SecurityPermission>"
  syntax:
    content: public void Load (System.Xml.XPath.IXPathNavigable stylesheet);
    parameters:
    - id: stylesheet
      type: System.Xml.XPath.IXPathNavigable
      description: "實作<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>介面。 在.NET Framework 中，這可以是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含 XSLT 樣式表。"
  overload: System.Xml.Xsl.XslTransform.Load*
  exceptions:
  - type: System.Xml.Xsl.XsltCompileException
    commentId: T:System.Xml.Xsl.XsltCompileException
    description: "載入的資源不是有效的樣式表。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "樣式表包含內嵌的指令碼，而且呼叫端沒有<xref uid=&quot;langword_csharp_UnmanagedCode&quot; name=&quot;UnmanagedCode&quot; href=&quot;&quot;></xref>權限。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)
  id: Load(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Load(XPathNavigator)
  nameWithType: XslTransform.Load(XPathNavigator)
  fullName: System.Xml.Xsl.XslTransform.Load(XPathNavigator)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "載入 XSLT 樣式表中包含<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>。"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。       這個方法會載入 XSLT 樣式表，包括任何參考中的樣式表`xsl:include`和`xsl:import`項目。 使用解析外部資源<xref:System.Xml.XmlUrlResolver>不具使用者認證。</xref:System.Xml.XmlUrlResolver> 如果樣式表位於需要驗證的網路資源，使用的多載，<xref:System.Xml.XmlResolver>做為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>       從目前位置的<xref:System.Xml.XPath.XPathNavigator>。</xref:System.Xml.XPath.XPathNavigator>載入樣式表 若要載入之文件部分為樣式表，瀏覽至樣式表的開頭對應的節點。 Load 方法傳回之後，<xref:System.Xml.XPath.XPathNavigator>定位於樣式表的開頭 (上`xsl:style sheet`節點)。</xref:System.Xml.XPath.XPathNavigator>       如果樣式表包含內嵌指令碼，指令碼會編譯至組件。 組件具有完全信任。 建議的作法是要提供辨識項使用<xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.XPathNavigator%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>方法。</xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.XPathNavigator%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> 與相關的問題<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和樣式表，內嵌指令碼，請參閱 Q316755 在 Microsoft 知識庫文件在 http://support.microsoft.com。</xref:System.Xml.Xsl.XslTransform.Load%2A>      > [!NOTE] > 如果呼叫端沒有`UnmanagedCode`權限，內嵌指令碼不會編譯和<xref:System.Security.SecurityException>就會擲回。</xref:System.Security.SecurityException> 請參閱<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>如需詳細資訊。</xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> </xref:System.Security.Permissions.SecurityPermission>"
  syntax:
    content: public void Load (System.Xml.XPath.XPathNavigator stylesheet);
    parameters:
    - id: stylesheet
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>包含 XSLT 樣式表的物件。"
  overload: System.Xml.Xsl.XslTransform.Load*
  exceptions:
  - type: System.Xml.Xsl.XsltCompileException
    commentId: T:System.Xml.Xsl.XsltCompileException
    description: "目前節點不符合有效的樣式表。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "樣式表包含內嵌的指令碼，而且呼叫端沒有<xref uid=&quot;langword_csharp_UnmanagedCode&quot; name=&quot;UnmanagedCode&quot; href=&quot;&quot;></xref>權限。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)
  id: Load(System.String,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Load(String,XmlResolver)
  nameWithType: XslTransform.Load(String,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Load(String,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "載入由 URL 指定的 XSLT 樣式表。"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。       如果樣式表包含內嵌指令碼，指令碼會編譯至組件。 樣式表的 URI 用來建立套用至組件辨識項。 與相關的問題<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和樣式表，內嵌指令碼，請參閱 Q316755 在 Microsoft 知識庫文件在 http://support.microsoft.com。</xref:System.Xml.Xsl.XslTransform.Load%2A>      > [!NOTE] > 如果呼叫端沒有`UnmanagedCode`權限，內嵌指令碼不會編譯和<xref:System.Security.SecurityException>就會擲回。</xref:System.Security.SecurityException> 請參閱<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>如需詳細資訊。</xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> </xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "The following example transforms an XML document into an HTML document. The example loads an XSLT style sheet which contains an `xsl:include` element referencing another style sheet. An <xref:System.Xml.XmlUrlResolver> is passed to the Load method which sets the credentials necessary to access the network resource for the included style sheet.  \n  \n [!code-vb[XslTransform.Load2#1](~/add/codesnippet/visualbasic/m-system.xml.xsl.xsltran_3_1.vb)]\n [!code-cs[XslTransform.Load2#1](~/add/codesnippet/csharp/m-system.xml.xsl.xsltran_3_1.cs)]  \n  \n The example uses the following data files as input.  \n  \n `books.xml`  \n  \n [!code-xml[XslTransform.Load2#2](~/add/codesnippet/xml/m-system.xml.xsl.xsltran_3_2.xml)]  \n  \n `sort.xsl`  \n  \n [!code-xml[XslTransform.Load2#3](~/add/codesnippet/xml/m-system.xml.xsl.xsltran_3_3.xsl)]  \n  \n `includefile.xsl`  \n  \n [!code-xml[XslTransform.Load2#4](~/add/codesnippet/xml/m-system.xml.xsl.xsltran_3_4.xsl)]"
  syntax:
    content: public void Load (string url, System.Xml.XmlResolver resolver);
    parameters:
    - id: url
      type: System.String
      description: "指定要載入的 XSLT 樣式表的 URL。"
    - id: resolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>要用來載入樣式表，以及中所參考的任何樣式表`xsl:import`和`xsl:include`項目。       如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，預設值<xref href=&quot;System.Xml.XmlUrlResolver&quot;></xref>沒有使用者認證用來開啟樣式表。 預設值<xref href=&quot;System.Xml.XmlUrlResolver&quot;></xref>不會用來解析樣式表中的任何外部資源，因此`xsl:import`和`xsl:include`就不會解析項目。       <xref href=&quot;System.Xml.XmlResolver&quot;> </xref> Load 方法完成之後不會快取。"
  overload: System.Xml.Xsl.XslTransform.Load*
  exceptions:
  - type: System.Xml.Xsl.XsltCompileException
    commentId: T:System.Xml.Xsl.XsltCompileException
    description: "載入的資源不是有效的樣式表。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "樣式表包含內嵌的指令碼，而且呼叫端沒有<xref uid=&quot;langword_csharp_UnmanagedCode&quot; name=&quot;UnmanagedCode&quot; href=&quot;&quot;></xref>權限。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)
  id: Load(System.Xml.XmlReader,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Load(XmlReader,XmlResolver)
  nameWithType: XslTransform.Load(XmlReader,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Load(XmlReader,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "載入 XSLT 樣式表包含在<xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。       這個方法會載入 XSLT 樣式表，包括任何參考中的樣式表`xsl:include`和`xsl:import`項目。 從目前節點載入樣式表<xref:System.Xml.XmlReader>透過所有子系。</xref:System.Xml.XmlReader> 這可讓您使用做為樣式表的文件的一部分。       Load 方法傳回之後，<xref:System.Xml.XmlReader>位於樣式表結尾之後的下一個節點。</xref:System.Xml.XmlReader> 如果到達文件結尾，<xref:System.Xml.XmlReader>會定位於檔案結尾 (EOF)。</xref:System.Xml.XmlReader>       如果樣式表包含實體，您應該指定<xref:System.Xml.XmlReader>，可以解析實體 (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=fullName>傳回`true`)。</xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=fullName> </xref:System.Xml.XmlReader> 在此情況下，<xref:System.Xml.XmlValidatingReader>可用。</xref:System.Xml.XmlValidatingReader>       如果樣式表包含內嵌指令碼，指令碼會編譯至組件。 組件具有完全信任。 建議的作法是要提供辨識項使用<xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>方法。</xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> 與相關的問題<xref:System.Xml.Xsl.XslTransform.Load%2A>內嵌指令碼的方法與樣式表，請參閱 Q316755 在 Microsoft 知識庫文件在 http://support.microsoft.com。</xref:System.Xml.Xsl.XslTransform.Load%2A>      > [!NOTE] > 如果呼叫端沒有`UnmanagedCode`權限，內嵌指令碼不會編譯和<xref:System.Security.SecurityException>就會擲回。</xref:System.Security.SecurityException> 請參閱<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>如需詳細資訊。</xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> </xref:System.Security.Permissions.SecurityPermission>"
  syntax:
    content: public void Load (System.Xml.XmlReader stylesheet, System.Xml.XmlResolver resolver);
    parameters:
    - id: stylesheet
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>物件，其中包含 XSLT 樣式表。</xref:System.Xml.XmlReader>"
    - id: resolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用來載入樣式表中所參考`xsl:import`和`xsl:include`項目。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，就不會解析外部資源。       <xref href=&quot;System.Xml.XmlResolver&quot;> </xref> Load 方法完成之後不會快取。"
  overload: System.Xml.Xsl.XslTransform.Load*
  exceptions:
  - type: System.Xml.Xsl.XsltCompileException
    commentId: T:System.Xml.Xsl.XsltCompileException
    description: "目前節點不符合有效的樣式表。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "樣式表包含內嵌的指令碼，而且呼叫端沒有<xref uid=&quot;langword_csharp_UnmanagedCode&quot; name=&quot;UnmanagedCode&quot; href=&quot;&quot;></xref>權限。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)
  id: Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Load(IXPathNavigable,XmlResolver)
  nameWithType: XslTransform.Load(IXPathNavigable,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Load(IXPathNavigable,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "載入 XSLT 樣式表中包含<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;> </xref>。"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。       如果樣式表包含內嵌指令碼，指令碼會編譯至組件。 組件具有完全信任。 建議的作法是要提供辨識項使用<xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.IXPathNavigable%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>方法。</xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.IXPathNavigable%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> 與相關的問題<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和樣式表，內嵌指令碼，請參閱 Q316755 在 Microsoft 知識庫文件在 http://support.microsoft.com。</xref:System.Xml.Xsl.XslTransform.Load%2A>      > [!NOTE] > 如果呼叫端沒有`UnmanagedCode`權限，內嵌指令碼不會編譯和<xref:System.Security.SecurityException>就會擲回。</xref:System.Security.SecurityException> 請參閱<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>如需詳細資訊。</xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> </xref:System.Security.Permissions.SecurityPermission>"
  syntax:
    content: public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.XmlResolver resolver);
    parameters:
    - id: stylesheet
      type: System.Xml.XPath.IXPathNavigable
      description: "實作<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>介面。 在.NET Framework 中，這可以是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含 XSLT 樣式表。"
    - id: resolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用來載入樣式表中所參考`xsl:import`和`xsl:include`項目。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，就不會解析外部資源。       <xref href=&quot;System.Xml.XmlResolver&quot;> </xref>不會快取之後<xref:System.Xml.Xsl.XslTransform.Load*>方法完成。</xref:System.Xml.Xsl.XslTransform.Load*>"
  overload: System.Xml.Xsl.XslTransform.Load*
  exceptions:
  - type: System.Xml.Xsl.XsltCompileException
    commentId: T:System.Xml.Xsl.XsltCompileException
    description: "載入的資源不是有效的樣式表。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "樣式表包含內嵌的指令碼，而且呼叫端沒有<xref uid=&quot;langword_csharp_UnmanagedCode&quot; name=&quot;UnmanagedCode&quot; href=&quot;&quot;></xref>權限。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)
  id: Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Load(XPathNavigator,XmlResolver)
  nameWithType: XslTransform.Load(XPathNavigator,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Load(XPathNavigator,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "載入 XSLT 樣式表中包含<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>。"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。       從目前位置的<xref:System.Xml.XPath.XPathNavigator>。</xref:System.Xml.XPath.XPathNavigator>載入樣式表 若要載入之文件的部分為樣式表，瀏覽至樣式表的開頭對應的節點。 Load 方法傳回之後，<xref:System.Xml.XPath.XPathNavigator>定位於樣式表的開頭 (上`xsl:style sheet`節點)。</xref:System.Xml.XPath.XPathNavigator>       如果樣式表包含內嵌指令碼，指令碼會編譯至組件。 組件具有完全信任。 建議的作法是提供使用<xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.XPathNavigator%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>.</xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.XPathNavigator%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>的辨識項 與相關的問題<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和樣式表，內嵌指令碼，請參閱 Q316755 在 Microsoft 知識庫文件在 http://support.microsoft.com。</xref:System.Xml.Xsl.XslTransform.Load%2A>      > [!NOTE] > 如果呼叫端沒有`UnmanagedCode`權限，內嵌指令碼不會編譯和<xref:System.Security.SecurityException>就會擲回。</xref:System.Security.SecurityException> 請參閱<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>如需詳細資訊。</xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> </xref:System.Security.Permissions.SecurityPermission>"
  syntax:
    content: public void Load (System.Xml.XPath.XPathNavigator stylesheet, System.Xml.XmlResolver resolver);
    parameters:
    - id: stylesheet
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>包含 XSLT 樣式表的物件。"
    - id: resolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用來載入樣式表中所參考`xsl:import`和`xsl:include`項目。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，就不會解析外部資源。       <xref href=&quot;System.Xml.XmlResolver&quot;> </xref>不會快取之後<xref:System.Xml.Xsl.XslTransform.Load*>方法完成。</xref:System.Xml.Xsl.XslTransform.Load*>"
  overload: System.Xml.Xsl.XslTransform.Load*
  exceptions:
  - type: System.Xml.Xsl.XsltCompileException
    commentId: T:System.Xml.Xsl.XsltCompileException
    description: "目前節點不符合有效的樣式表。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "樣式表包含內嵌的指令碼，而且呼叫端沒有<xref uid=&quot;langword_csharp_UnmanagedCode&quot; name=&quot;UnmanagedCode&quot; href=&quot;&quot;></xref>權限。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver,System.Security.Policy.Evidence)
  id: Load(System.Xml.XmlReader,System.Xml.XmlResolver,System.Security.Policy.Evidence)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Load(XmlReader,XmlResolver,Evidence)
  nameWithType: XslTransform.Load(XmlReader,XmlResolver,Evidence)
  fullName: System.Xml.Xsl.XslTransform.Load(XmlReader,XmlResolver,Evidence)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "載入 XSLT 樣式表包含在<xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> 這個方法可讓您藉由指定辨識項限制的樣式表的權限。"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。       這個方法會載入 XSLT 樣式表，包括任何參考中的樣式表`xsl:include`和`xsl:import`項目。 從目前節點載入樣式表<xref:System.Xml.XmlReader>透過所有子系。</xref:System.Xml.XmlReader> 這可讓您使用做為樣式表的文件的一部分。       Load 方法傳回之後，<xref:System.Xml.XmlReader>位於樣式表結尾之後的下一個節點。</xref:System.Xml.XmlReader> 如果到達文件結尾，<xref:System.Xml.XmlReader>會定位於檔案結尾 (EOF)。</xref:System.Xml.XmlReader>       如果樣式表包含實體，您應該指定<xref:System.Xml.XmlReader>，可以解析實體 (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=fullName>傳回`true`)。</xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=fullName> </xref:System.Xml.XmlReader> 在此情況下，<xref:System.Xml.XmlValidatingReader>可用。</xref:System.Xml.XmlValidatingReader>       與相關的問題<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和樣式表，內嵌指令碼，請參閱 Q316755 在 Microsoft 知識庫文件在 http://support.microsoft.com。</xref:System.Xml.Xsl.XslTransform.Load%2A>       有不同的方式提供的辨識項。 下表描述何種辨識項，以便提供一般使用者案例。"
  example:
  - "The following example performs an XSLT transformation where `xsltReader` is an <xref:System.Xml.XmlReader> containing a style sheet and `secureURL` is a trusted URL that can be used to create <xref:System.Security.Policy.Evidence>. The <xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%2A?displayProperty=fullName> method is used to create <xref:System.Security.Policy.Evidence> which is applied to the style sheet.  \n  \n [!code-vb[XslTransform.Load4#1](~/add/codesnippet/visualbasic/a033551f-1c0f-4994-8153-_1.vb)]\n [!code-cs[XslTransform.Load4#1](~/add/codesnippet/csharp/a033551f-1c0f-4994-8153-_1.cs)]\n [!code-cpp[XslTransform.Load4#1](~/add/codesnippet/cpp/a033551f-1c0f-4994-8153-_1.cpp)]"
  syntax:
    content: public void Load (System.Xml.XmlReader stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);
    parameters:
    - id: stylesheet
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>物件，其中包含要載入的樣式表。</xref:System.Xml.XmlReader>"
    - id: resolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用來載入樣式表中所參考`xsl:import`和`xsl:include`項目。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，就不會解析外部資源。       <xref href=&quot;System.Xml.XmlResolver&quot;> </xref>不會快取之後<xref:System.Xml.Xsl.XslTransform.Load*>方法完成。</xref:System.Xml.Xsl.XslTransform.Load*>"
    - id: evidence
      type: System.Security.Policy.Evidence
      description: "<xref href=&quot;System.Security.Policy.Evidence&quot;> </xref> XSLT 樣式表中的指令碼區塊產生的組件上設定。       如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，指令碼區塊並不僅處理，XSLT`document()`函式不支援，且不允許使用授權的擴充物件。       呼叫端必須具有<xref uid=&quot;langword_csharp_ControlEvidence&quot; name=&quot;ControlEvidence&quot; href=&quot;&quot;></xref>權限，才能提供指令碼組件的辨識項。 非完全信任呼叫端可以將此參數設定為<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.Xsl.XslTransform.Load*
  exceptions:
  - type: System.Xml.Xsl.XsltCompileException
    commentId: T:System.Xml.Xsl.XsltCompileException
    description: "目前節點不符合有效的樣式表。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "參考的樣式表需要提供的辨識項不允許的功能。       呼叫端嘗試提供辨識項，而且沒有<xref uid=&quot;langword_csharp_ControlEvidence&quot; name=&quot;ControlEvidence&quot; href=&quot;&quot;></xref>權限。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver,System.Security.Policy.Evidence)
  id: Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver,System.Security.Policy.Evidence)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Load(IXPathNavigable,XmlResolver,Evidence)
  nameWithType: XslTransform.Load(IXPathNavigable,XmlResolver,Evidence)
  fullName: System.Xml.Xsl.XslTransform.Load(IXPathNavigable,XmlResolver,Evidence)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "載入 XSLT 樣式表中包含<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;> </xref>。 這個方法可讓您藉由指定辨識項限制的樣式表的權限。"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。       與相關的問題<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和樣式表，內嵌指令碼，請參閱 Q316755 在 Microsoft 知識庫文件在 http://support.microsoft.com。</xref:System.Xml.Xsl.XslTransform.Load%2A>       有不同的方式提供的辨識項。 下表描述何種辨識項，以便提供一般使用者案例。"
  syntax:
    content: public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);
    parameters:
    - id: stylesheet
      type: System.Xml.XPath.IXPathNavigable
      description: "實作<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>介面。 在.NET Framework 中，這可以是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含 XSLT 樣式表。"
    - id: resolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用來載入樣式表中所參考`xsl:import`和`xsl:include`項目。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，就不會解析外部資源。       <xref href=&quot;System.Xml.XmlResolver&quot;> </xref>不會快取之後<xref:System.Xml.Xsl.XslTransform.Load*>方法完成。</xref:System.Xml.Xsl.XslTransform.Load*>"
    - id: evidence
      type: System.Security.Policy.Evidence
      description: "<xref href=&quot;System.Security.Policy.Evidence&quot;> </xref> XSLT 樣式表中的指令碼區塊產生的組件上設定。       如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，指令碼區塊並不僅處理，XSLT`document()`函式不支援，且不允許使用授權的擴充物件。       呼叫端必須具有<xref uid=&quot;langword_csharp_ControlEvidence&quot; name=&quot;ControlEvidence&quot; href=&quot;&quot;></xref>權限，才能提供指令碼組件的辨識項。 非完全信任呼叫端可以將此參數設定為<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.Xsl.XslTransform.Load*
  exceptions:
  - type: System.Xml.Xsl.XsltCompileException
    commentId: T:System.Xml.Xsl.XsltCompileException
    description: "載入的資源不是有效的樣式表。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "參考的樣式表需要提供的辨識項不允許的功能。       呼叫端嘗試提供辨識項，而且沒有<xref uid=&quot;langword_csharp_ControlEvidence&quot; name=&quot;ControlEvidence&quot; href=&quot;&quot;></xref>權限。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver,System.Security.Policy.Evidence)
  id: Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver,System.Security.Policy.Evidence)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Load(XPathNavigator,XmlResolver,Evidence)
  nameWithType: XslTransform.Load(XPathNavigator,XmlResolver,Evidence)
  fullName: System.Xml.Xsl.XslTransform.Load(XPathNavigator,XmlResolver,Evidence)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "載入 XSLT 樣式表中包含<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>。 這個方法可讓您藉由指定辨識項限制的樣式表的權限。"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。       從目前位置的<xref:System.Xml.XPath.XPathNavigator>。</xref:System.Xml.XPath.XPathNavigator>載入樣式表 若要載入之文件的部分為樣式表，瀏覽至樣式表的開頭對應的節點。 Load 方法傳回之後，<xref:System.Xml.XPath.XPathNavigator>定位於樣式表的開頭 (上`xsl:style sheet`節點)。</xref:System.Xml.XPath.XPathNavigator>       與相關的問題<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和樣式表，內嵌指令碼，請參閱 Q316755 在 Microsoft 知識庫文件在 http://support.microsoft.com。</xref:System.Xml.Xsl.XslTransform.Load%2A>       有不同的方式提供的辨識項。 下表描述何種辨識項，以便提供一般使用者案例。"
  example:
  - "The following example performs an XSLT transformation using a style sheet from an outside source. Because the style sheet comes from an untrusted source, the `resolver` and `evidence` parameters are set to `null`.  \n  \n [!code-cs[XslTransform.Load5#1](~/add/codesnippet/csharp/3ff68c6b-cad3-409a-909a-_1.cs)]\n [!code-vb[XslTransform.Load5#1](~/add/codesnippet/visualbasic/3ff68c6b-cad3-409a-909a-_1.vb)]"
  syntax:
    content: public void Load (System.Xml.XPath.XPathNavigator stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);
    parameters:
    - id: stylesheet
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>物件，其中包含要載入的樣式表。"
    - id: resolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用來載入樣式表中所參考`xsl:import`和`xsl:include`項目。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，就不會解析外部資源。       <xref href=&quot;System.Xml.XmlResolver&quot;> </xref>不會快取之後<xref:System.Xml.Xsl.XslTransform.Load*>方法完成。</xref:System.Xml.Xsl.XslTransform.Load*>"
    - id: evidence
      type: System.Security.Policy.Evidence
      description: "<xref href=&quot;System.Security.Policy.Evidence&quot;> </xref> XSLT 樣式表中的指令碼區塊產生的組件上設定。       如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，指令碼區塊並不僅處理，XSLT`document()`函式不支援，且不允許使用授權的擴充物件。       呼叫端必須具有<xref uid=&quot;langword_csharp_ControlEvidence&quot; name=&quot;ControlEvidence&quot; href=&quot;&quot;></xref>權限，才能提供指令碼組件的辨識項。 非完全信任呼叫端可以將此參數設定為<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.Xsl.XslTransform.Load*
  exceptions:
  - type: System.Xml.Xsl.XsltCompileException
    commentId: T:System.Xml.Xsl.XsltCompileException
    description: "目前節點不符合有效的樣式表。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "參考的樣式表需要提供的辨識項不允許的功能。       呼叫端嘗試提供辨識項，而且沒有<xref uid=&quot;langword_csharp_ControlEvidence&quot; name=&quot;ControlEvidence&quot; href=&quot;&quot;></xref>權限。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Transform(System.String,System.String)
  id: Transform(System.String,System.String)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Transform(String,String)
  nameWithType: XslTransform.Transform(String,String)
  fullName: System.Xml.Xsl.XslTransform.Transform(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "轉換的輸入檔中的 XML 資料，並將結果輸出至輸出檔。"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。      > [!NOTE] > 這個方法的.NET framework 1.1 版中已過時。 設定<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>屬性會決定如何 XSLT`document()`函式已解決。</xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> 建議的作法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法會採用<xref:System.Xml.XmlResolver>物件做為其中一個引數。</xref:System.Xml.XmlResolver> </xref:System.Xml.Xsl.XslTransform.Transform%2A>"
  example:
  - "The following example transforms the `books.xml` file using the `output.xsl` style sheet and outputs the results to the `books.html` file.  \n  \n [!code-cs[XslTransform.Transform3#1](~/add/codesnippet/csharp/m-system.xml.xsl.xsltran_2_1.cs)]\n [!code-cpp[XslTransform.Transform3#1](~/add/codesnippet/cpp/m-system.xml.xsl.xsltran_2_1.cpp)]\n [!code-vb[XslTransform.Transform3#1](~/add/codesnippet/visualbasic/m-system.xml.xsl.xsltran_2_1.vb)]  \n  \n The sample uses the following two input files:  \n  \n `books.xml`  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/add/codesnippet/xml/m-system.xml.xsl.xsltran_2_2.xml)]  \n  \n `output.xsl`  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/add/codesnippet/xml/m-system.xml.xsl.xsltran_2_3.xsl)]"
  syntax:
    content: public void Transform (string inputfile, string outputfile);
    parameters:
    - id: inputfile
      type: System.String
      description: "要轉換的來源文件 URL。"
    - id: outputfile
      type: System.String
      description: "輸出檔的 URL。"
  overload: System.Xml.Xsl.XslTransform.Transform*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)
  id: Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Transform(IXPathNavigable,XsltArgumentList)
  nameWithType: XslTransform.Transform(IXPathNavigable,XsltArgumentList)
  fullName: System.Xml.Xsl.XslTransform.Transform(IXPathNavigable,XsltArgumentList)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "轉換 XML 資料中的<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>使用指定<code> args </code>並輸出至<xref:System.Xml.XmlReader>。</xref:System.Xml.XmlReader>結果"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。      > [!NOTE] > 此方法現在已過時。 設定<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>屬性會決定如何 XSLT`document()`函式已解決。</xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> 建議的作法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法會採用<xref:System.Xml.XmlResolver>物件做為其中一個引數。</xref:System.Xml.XmlResolver> </xref:System.Xml.Xsl.XslTransform.Transform%2A>       `args`與進行比對`xsl:param`樣式表中定義的項目。 `xsl:output`輸出至時，不支援項目<xref:System.Xml.XmlReader>(`xsl:output`便會忽略元素)。</xref:System.Xml.XmlReader> 請參閱[XslTransform 的輸出](~/add/includes/ajax-current-ext-md.md)如需詳細資訊。       這個方法可讓您執行非同步轉換的來源文件。       轉換是整個套用至文件。 換句話說，如果您要傳入的節點不是文件根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立<xref:System.Xml.XmlDocument>包含僅節點片段，並將其傳遞<xref:System.Xml.XmlDocument>轉換方法。</xref:System.Xml.XmlDocument> </xref:System.Xml.XmlDocument>       下列範例會執行轉換節點片段。      ```   XslTransform xslt = new XslTransform();        xslt.Load(&quot;print_root.xsl&quot;);   XmlDocument doc = new XmlDocument();   doc.Load(&quot;library.xml&quot;);   // Create a new document containing just the node fragment.   XmlNode testNode = doc.DocumentElement.FirstChild;    XmlDocument tmpDoc = new XmlDocument();    tmpDoc.LoadXml(testNode.OuterXml);   // Pass the document containing the node fragment    // to the Transform method.   Console.WriteLine(&quot;Passing &quot; + tmpDoc.OuterXml + &quot; to print_root.xsl&quot;);   xslt.Transform(tmpDoc, null, Console.Out);   ```此範例會使用`library.xml`和`print_root.xsl`檔案做為輸入，並輸出至主控台。      ```   Passing <book genre=&quot;novel&quot; ISBN=&quot;1-861001-57-5&quot;><title>Pride And Prejudice</title></book> to print_root.xsl    Root node is book.   ```       `library.xml`      ```   <library>     <book genre=&quot;novel&quot; ISBN=&quot;1-861001-57-5&quot;>        <title>Pride And Prejudice</title>     </book>     <book genre=&quot;novel&quot; ISBN=&quot;1-81920-21-2&quot;>        <title>Hook</title>     </book>   </library>   ```       `print_root.xsl`      ```   <style sheet version=&quot;1.0&quot; xmlns=&quot;http://www.w3.org/1999/XSL/Transform&quot; >     <output method=&quot;text&quot; />      <template match=&quot;/&quot;>        Root node is  <value-of select=&quot;local-name(//*[position() = 1])&quot; />      </template>   </style sheet>   ```"
  syntax:
    content: public System.Xml.XmlReader Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args);
    parameters:
    - id: input
      type: System.Xml.XPath.IXPathNavigable
      description: "實作<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>介面。 在.NET Framework 中，這可以是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含要轉換的資料。"
    - id: args
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。"
    return:
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>包含轉換的結果。</xref:System.Xml.XmlReader>"
  overload: System.Xml.Xsl.XslTransform.Transform*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)
  id: Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Transform(XPathNavigator,XsltArgumentList)
  nameWithType: XslTransform.Transform(XPathNavigator,XsltArgumentList)
  fullName: System.Xml.Xsl.XslTransform.Transform(XPathNavigator,XsltArgumentList)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "轉換 XML 資料中的<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>使用指定<code> args </code>並輸出至<xref:System.Xml.XmlReader>。</xref:System.Xml.XmlReader>結果"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。       `args`與進行比對`xsl:param`樣式表中定義的項目。 整體套用至文件轉換範圍。 換句話說，如果目前節點不是文件根節點的節點樹狀結構上設定，則不會阻止轉換程序取得已載入文件中的所有節點。 在執行轉換之後，<xref:System.Xml.XPath.XPathNavigator>會保留在其原始狀態。</xref:System.Xml.XPath.XPathNavigator> 這表示呼叫轉換方法之後的節點，這是目前轉換程序之前，會保留目前的節點。       因為<xref:System.Xml.XmlReader>提供唯讀的輸出，`xsl:output`項目會被忽略。</xref:System.Xml.XmlReader> 請參閱[XslTransform 的輸出](~/add/includes/ajax-current-ext-md.md)如需詳細資訊。       這個方法可讓您執行非同步轉換的來源文件。      > [!NOTE] > 這個方法已過時。 設定<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>屬性會決定如何 XSLT document （） 函式已解決。</xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> 建議的作法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法會採用<xref:System.Xml.XmlResolver>物件做為其中一個引數。</xref:System.Xml.XmlResolver> </xref:System.Xml.Xsl.XslTransform.Transform%2A>"
  syntax:
    content: public System.Xml.XmlReader Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args);
    parameters:
    - id: input
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>包含要轉換的資料。"
    - id: args
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。"
    return:
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>包含轉換的結果。</xref:System.Xml.XmlReader>"
  overload: System.Xml.Xsl.XslTransform.Transform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "處理 XSLT 轉換時發生錯誤。       注意︰ 這是從舊版的行為變更。 <xref href=&quot;System.Xml.Xsl.XsltException&quot;> </xref>如果您使用 Microsoft.NET Framework 1.1 版或更早版本，會擲回。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)
  id: Transform(System.String,System.String,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Transform(String,String,XmlResolver)
  nameWithType: XslTransform.Transform(String,String,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Transform(String,String,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "轉換的輸入檔中的 XML 資料，並將結果輸出至輸出檔。"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。"
  example:
  - "The following example performs an XSLT transformation and outputs to a file. An <xref:System.Xml.XmlUrlResolver> with default credentials is used resolve an external resources. See <xref:System.Net.CredentialCache.DefaultCredentials%2A> for details.  \n  \n [!code-cs[XslTransform.Transform7#1](~/add/codesnippet/csharp/86f1726f-f5ec-4750-8359-_1.cs)]\n [!code-vb[XslTransform.Transform7#1](~/add/codesnippet/visualbasic/86f1726f-f5ec-4750-8359-_1.vb)]\n [!code-cpp[XslTransform.Transform7#1](~/add/codesnippet/cpp/86f1726f-f5ec-4750-8359-_1.cpp)]"
  syntax:
    content: public void Transform (string inputfile, string outputfile, System.Xml.XmlResolver resolver);
    parameters:
    - id: inputfile
      type: System.String
      description: "要轉換的來源文件 URL。"
    - id: outputfile
      type: System.String
      description: "輸出檔的 URL。"
    - id: resolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用來解析 XSLT`document()`函式。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、`document()`函式仍未解決。       <xref href=&quot;System.Xml.XmlResolver&quot;> </xref>不會快取之後<xref:System.Xml.Xsl.XslTransform.Transform*>方法完成。</xref:System.Xml.Xsl.XslTransform.Transform*>"
  overload: System.Xml.Xsl.XslTransform.Transform*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  id: Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Transform(IXPathNavigable,XsltArgumentList,Stream)
  nameWithType: XslTransform.Transform(IXPathNavigable,XsltArgumentList,Stream)
  fullName: System.Xml.Xsl.XslTransform.Transform(IXPathNavigable,XsltArgumentList,Stream)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "轉換 XML 資料中的<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>使用指定<code> args </code>並輸出至<xref:System.IO.Stream>。</xref:System.IO.Stream>結果"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。      > [!NOTE] > 此方法現在已過時。 設定<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>屬性會決定如何 XSLT`document()`函式已解決。</xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> 建議的作法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法會採用<xref:System.Xml.XmlResolver>物件做為其中一個引數。</xref:System.Xml.XmlResolver> </xref:System.Xml.Xsl.XslTransform.Transform%2A>       `args`與進行比對`xsl:param`樣式表中定義的項目。       轉換是整個套用至文件。 換句話說，如果您要傳入的節點不是文件根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立<xref:System.Xml.XmlDocument>包含僅節點片段，並將其傳遞<xref:System.Xml.XmlDocument>轉換方法。</xref:System.Xml.XmlDocument> </xref:System.Xml.XmlDocument>       下列範例會執行轉換節點片段。      ```   XslTransform xslt = new XslTransform();        xslt.Load(&quot;print_root.xsl&quot;);   XmlDocument doc = new XmlDocument();   doc.Load(&quot;library.xml&quot;);   // Create a new document containing just the node fragment.   XmlNode testNode = doc.DocumentElement.FirstChild;    XmlDocument tmpDoc = new XmlDocument();    tmpDoc.LoadXml(testNode.OuterXml);   // Pass the document containing the node fragment    // to the Transform method.   Console.WriteLine(&quot;Passing &quot; + tmpDoc.OuterXml + &quot; to print_root.xsl&quot;);   xslt.Transform(tmpDoc, null, Console.Out);   ```此範例會使用`library.xml`和`print_root.xsl`檔案做為輸入，並輸出至主控台。      ```   Passing <book genre=&quot;novel&quot; ISBN=&quot;1-861001-57-5&quot;><title>Pride And Prejudice</title></book> to print_root.xsl    Root node is book.   ```       `library.xml`      ```   <library>     <book genre=&quot;novel&quot; ISBN=&quot;1-861001-57-5&quot;>        <title>Pride And Prejudice</title>     </book>     <book genre=&quot;novel&quot; ISBN=&quot;1-81920-21-2&quot;>        <title>Hook</title>     </book>   </library>   ```       `print_root.xsl`      ```   <style sheet version=&quot;1.0&quot; xmlns=&quot;http://www.w3.org/1999/XSL/Transform&quot; >     <output method=&quot;text&quot; />      <template match=&quot;/&quot;>        Root node is  <value-of select=&quot;local-name(//*[position() = 1])&quot; />      </template>   </style sheet>   ```"
  syntax:
    content: public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output);
    parameters:
    - id: input
      type: System.Xml.XPath.IXPathNavigable
      description: "實作<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>介面。 在.NET Framework 中，這可以是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含要轉換的資料。"
    - id: args
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。"
    - id: output
      type: System.IO.Stream
      description: "您要輸出資料流。"
  overload: System.Xml.Xsl.XslTransform.Transform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "處理 XSLT 轉換時發生錯誤。       注意︰ 這是從舊版的行為變更。 <xref href=&quot;System.Xml.Xsl.XsltException&quot;> </xref>如果您使用 Microsoft.NET Framework 1.1 版或更早版本，會擲回。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  id: Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Transform(IXPathNavigable,XsltArgumentList,TextWriter)
  nameWithType: XslTransform.Transform(IXPathNavigable,XsltArgumentList,TextWriter)
  fullName: System.Xml.Xsl.XslTransform.Transform(IXPathNavigable,XsltArgumentList,TextWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "轉換 XML 資料中的<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>使用指定<code> args </code>並輸出至<xref:System.IO.TextWriter>。</xref:System.IO.TextWriter>結果"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。      > [!NOTE] > 此方法現在已過時。 設定<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>屬性會決定如何 XSLT`document()`函式已解決。</xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> 建議的作法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法會採用<xref:System.Xml.XmlResolver>物件做為其中一個引數。</xref:System.Xml.XmlResolver> </xref:System.Xml.Xsl.XslTransform.Transform%2A>       `args`與進行比對`xsl:param`樣式表中定義的項目。       上的編碼屬性`xsl:output`輸出至<xref:System.IO.TextWriter>。</xref:System.IO.TextWriter>時不支援項目 請參閱[XslTransform 的輸出](~/add/includes/ajax-current-ext-md.md)針對所在特性`xsl:output`支援屬性。       轉換是整個套用至文件。 換句話說，如果您要傳入的節點不是文件根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立<xref:System.Xml.XmlDocument>包含僅節點片段，並將其傳遞<xref:System.Xml.XmlDocument>轉換方法。</xref:System.Xml.XmlDocument> </xref:System.Xml.XmlDocument>       下列範例會執行轉換節點片段。      ```   XslTransform xslt = new XslTransform();        xslt.Load(&quot;print_root.xsl&quot;);   XmlDocument doc = new XmlDocument();   doc.Load(&quot;library.xml&quot;);   // Create a new document containing just the node fragment.   XmlNode testNode = doc.DocumentElement.FirstChild;    XmlDocument tmpDoc = new XmlDocument();    tmpDoc.LoadXml(testNode.OuterXml);   // Pass the document containing the node fragment    // to the Transform method.   Console.WriteLine(&quot;Passing &quot; + tmpDoc.OuterXml + &quot; to print_root.xsl&quot;);   xslt.Transform(tmpDoc, null, Console.Out);   ```此範例會使用`library.xml`和`print_root.xsl`檔案做為輸入，並輸出至主控台。      ```   Passing <book genre=&quot;novel&quot; ISBN=&quot;1-861001-57-5&quot;><title>Pride And Prejudice</title></book> to print_root.xsl    Root node is book.   ```       `library.xml`      ```   <library>     <book genre=&quot;novel&quot; ISBN=&quot;1-861001-57-5&quot;>        <title>Pride And Prejudice</title>     </book>     <book genre=&quot;novel&quot; ISBN=&quot;1-81920-21-2&quot;>        <title>Hook</title>     </book>   </library>   ```       `print_root.xsl`      ```   <style sheet version=&quot;1.0&quot; xmlns=&quot;http://www.w3.org/1999/XSL/Transform&quot; >     <output method=&quot;text&quot; />      <template match=&quot;/&quot;>        Root node is  <value-of select=&quot;local-name(//*[position() = 1])&quot; />      </template>   </style sheet>   ```"
  syntax:
    content: public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output);
    parameters:
    - id: input
      type: System.Xml.XPath.IXPathNavigable
      description: "實作<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>介面。 在.NET Framework 中，這可以是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含要轉換的資料。"
    - id: args
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。"
    - id: output
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>至您想要輸出。</xref:System.IO.TextWriter>"
  overload: System.Xml.Xsl.XslTransform.Transform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "處理 XSLT 轉換時發生錯誤。       注意︰ 這是從舊版的行為變更。 <xref href=&quot;System.Xml.Xsl.XsltException&quot;> </xref>如果您使用 Microsoft.NET Framework 1.1 版或更早版本，會擲回。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)
  id: Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Transform(IXPathNavigable,XsltArgumentList,XmlResolver)
  nameWithType: XslTransform.Transform(IXPathNavigable,XsltArgumentList,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Transform(IXPathNavigable,XsltArgumentList,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "轉換 XML 資料中的<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>使用指定<code> args </code>並輸出至<xref:System.Xml.XmlReader>。</xref:System.Xml.XmlReader>結果"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。       `args`與進行比對`xsl:param`樣式表中定義的項目。 `xsl:output`輸出至時，不支援項目<xref:System.Xml.XmlReader>(`xsl:output`便會忽略元素)。</xref:System.Xml.XmlReader> 請參閱[XslTransform 的輸出](~/add/includes/ajax-current-ext-md.md)如需詳細資訊。       這個方法可讓您執行非同步轉換的來源文件。       轉換是整個套用至文件。 換句話說，如果您要傳入的節點不是文件根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立<xref:System.Xml.XmlDocument>包含僅節點片段，並將其傳遞<xref:System.Xml.XmlDocument>轉換方法。</xref:System.Xml.XmlDocument> </xref:System.Xml.XmlDocument>       下列範例會執行轉換節點片段。      ```   XslTransform xslt = new XslTransform();        xslt.Load(&quot;print_root.xsl&quot;);   XmlDocument doc = new XmlDocument();   doc.Load(&quot;library.xml&quot;);   // Create a new document containing just the node fragment.   XmlNode testNode = doc.DocumentElement.FirstChild;    XmlDocument tmpDoc = new XmlDocument();    tmpDoc.LoadXml(testNode.OuterXml);   // Pass the document containing the node fragment    // to the Transform method.   Console.WriteLine(&quot;Passing &quot; + tmpDoc.OuterXml + &quot; to print_root.xsl&quot;);   xslt.Transform(tmpDoc, null, Console.Out, null);   ```此範例會使用`library.xml`和`print_root.xsl`檔案做為輸入，並輸出至主控台。      ```   Passing <book genre=&quot;novel&quot; ISBN=&quot;1-861001-57-5&quot;><title>Pride And Prejudice</title></book> to print_root.xsl    Root node is book.   ```       `library.xml`      ```   <library>     <book genre=&quot;novel&quot; ISBN=&quot;1-861001-57-5&quot;>        <title>Pride And Prejudice</title>     </book>     <book genre=&quot;novel&quot; ISBN=&quot;1-81920-21-2&quot;>        <title>Hook</title>     </book>   </library>   ```       `print_root.xsl`      ```   <style sheet version=&quot;1.0&quot; xmlns=&quot;http://www.w3.org/1999/XSL/Transform&quot; >     <output method=&quot;text&quot; />      <template match=&quot;/&quot;>        Root node is  <value-of select=&quot;local-name(//*[position() = 1])&quot; />      </template>   </style sheet>   ```"
  example:
  - "The following example transforms an XML document and outputs the results to an `XmlReader`. An <xref:System.Xml.XmlUrlResolver> with the necessary credentials is used to process any XSLT `document()` functions.  \n  \n [!code-cpp[XslTransform.Transform4#1](~/add/codesnippet/cpp/33389ef1-3a26-4334-acdd-_1.cpp)]\n [!code-cs[XslTransform.Transform4#1](~/add/codesnippet/csharp/33389ef1-3a26-4334-acdd-_1.cs)]\n [!code-vb[XslTransform.Transform4#1](~/add/codesnippet/visualbasic/33389ef1-3a26-4334-acdd-_1.vb)]"
  syntax:
    content: public System.Xml.XmlReader Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlResolver resolver);
    parameters:
    - id: input
      type: System.Xml.XPath.IXPathNavigable
      description: "實作<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>介面。 在.NET Framework 中，這可以是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含要轉換的資料。"
    - id: args
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。"
    - id: resolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用來解析 XSLT`document()`函式。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、`document()`函式仍未解決。       <xref href=&quot;System.Xml.XmlResolver&quot;> </xref>轉換方法完成之後不會快取。"
    return:
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>包含轉換的結果。</xref:System.Xml.XmlReader>"
  overload: System.Xml.Xsl.XslTransform.Transform*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  id: Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Transform(IXPathNavigable,XsltArgumentList,XmlWriter)
  nameWithType: XslTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter)
  fullName: System.Xml.Xsl.XslTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "轉換 XML 資料中的<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>使用指定<code> args </code>並輸出至<xref:System.Xml.XmlWriter>。</xref:System.Xml.XmlWriter>結果"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。      > [!NOTE] > 此方法現在已過時。 設定<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>屬性會決定如何 XSLT`document()`函式已解決。</xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> 建議的作法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法會採用<xref:System.Xml.XmlResolver>物件做為其中一個引數。</xref:System.Xml.XmlResolver> </xref:System.Xml.Xsl.XslTransform.Transform%2A>       `args`與進行比對`xsl:param`樣式表中定義的項目。 `xsl:output`輸出至時，不支援項目<xref:System.Xml.XmlWriter>(`xsl:output`會被忽略)。</xref:System.Xml.XmlWriter> 請參閱[XslTransform 的輸出](~/add/includes/ajax-current-ext-md.md)如需詳細資訊。       轉換是整個套用至文件。 換句話說，如果您要傳入的節點不是文件根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立<xref:System.Xml.XmlDocument>包含僅節點片段，並將其傳遞<xref:System.Xml.XmlDocument>轉換方法。</xref:System.Xml.XmlDocument> </xref:System.Xml.XmlDocument>       下列範例會執行轉換節點片段。      ```   XslTransform xslt = new XslTransform();        xslt.Load(&quot;print_root.xsl&quot;);   XmlDocument doc = new XmlDocument();   doc.Load(&quot;library.xml&quot;);   // Create a new document containing just the node fragment.   XmlNode testNode = doc.DocumentElement.FirstChild;    XmlDocument tmpDoc = new XmlDocument();    tmpDoc.LoadXml(testNode.OuterXml);   // Pass the document containing the node fragment    // to the Transform method.   Console.WriteLine(&quot;Passing &quot; + tmpDoc.OuterXml + &quot; to print_root.xsl&quot;);   xslt.Transform(tmpDoc, null, Console.Out);   ```此範例會使用`library.xml`和`print_root.xsl`檔案做為輸入，並輸出至主控台。      ```   Passing <book genre=&quot;novel&quot; ISBN=&quot;1-861001-57-5&quot;><title>Pride And Prejudice</title></book> to print_root.xsl    Root node is book.   ```       `library.xml`      ```   <library>     <book genre=&quot;novel&quot; ISBN=&quot;1-861001-57-5&quot;>        <title>Pride And Prejudice</title>     </book>     <book genre=&quot;novel&quot; ISBN=&quot;1-81920-21-2&quot;>        <title>Hook</title>     </book>   </library>   ```       `print_root.xsl`      ```   <style sheet version=&quot;1.0&quot; xmlns=&quot;http://www.w3.org/1999/XSL/Transform&quot; >     <output method=&quot;text&quot; />     <template match=&quot;/&quot;>     Root node is  <value-of select=&quot;local-name(//*[position() = 1])&quot; />      </template>   </style sheet>   ```"
  syntax:
    content: public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output);
    parameters:
    - id: input
      type: System.Xml.XPath.IXPathNavigable
      description: "實作<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>介面。 在.NET Framework 中，這可以是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含要轉換的資料。"
    - id: args
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。"
    - id: output
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>至您想要輸出。</xref:System.Xml.XmlWriter>"
  overload: System.Xml.Xsl.XslTransform.Transform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "處理 XSLT 轉換時發生錯誤。       注意︰ 這是從舊版的行為變更。 <xref href=&quot;System.Xml.Xsl.XsltException&quot;> </xref>如果您使用 Microsoft.NET Framework 1.1 版或更早版本，會擲回。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  id: Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Transform(XPathNavigator,XsltArgumentList,Stream)
  nameWithType: XslTransform.Transform(XPathNavigator,XsltArgumentList,Stream)
  fullName: System.Xml.Xsl.XslTransform.Transform(XPathNavigator,XsltArgumentList,Stream)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "轉換 XML 資料中的<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>使用指定<code> args </code>並輸出至<xref:System.IO.Stream>。</xref:System.IO.Stream>結果"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。       `args`與進行比對`xsl:param`樣式表中定義的項目。 整體套用至文件轉換範圍。 換句話說，如果目前節點不是文件根節點的節點樹狀結構上設定，則不會阻止轉換程序取得已載入文件中的所有節點。 在執行轉換之後，<xref:System.Xml.XPath.XPathNavigator>會保留在其原始狀態。</xref:System.Xml.XPath.XPathNavigator> 這表示呼叫轉換方法之後的節點，這是目前轉換程序之前，會保留目前的節點。       請參閱[XslTransform 的輸出](~/add/includes/ajax-current-ext-md.md)針對所在特性`xsl:output`支援屬性。      > [!NOTE] > 此方法現在已過時。 設定<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>屬性會決定如何 XSLT`document()`函式已解決。</xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> 建議的作法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法會採用<xref:System.Xml.XmlResolver>物件做為其中一個引數。</xref:System.Xml.XmlResolver> </xref:System.Xml.Xsl.XslTransform.Transform%2A>"
  syntax:
    content: public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output);
    parameters:
    - id: input
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>包含要轉換的資料。"
    - id: args
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。"
    - id: output
      type: System.IO.Stream
      description: "您要輸出資料流。"
  overload: System.Xml.Xsl.XslTransform.Transform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "處理 XSLT 轉換時發生錯誤。       注意︰ 這是從舊版的行為變更。 <xref href=&quot;System.Xml.Xsl.XsltException&quot;> </xref>如果您使用 Microsoft.NET Framework 1.1 版或更早版本，會擲回。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  id: Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Transform(XPathNavigator,XsltArgumentList,TextWriter)
  nameWithType: XslTransform.Transform(XPathNavigator,XsltArgumentList,TextWriter)
  fullName: System.Xml.Xsl.XslTransform.Transform(XPathNavigator,XsltArgumentList,TextWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "轉換 XML 資料中的<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>使用指定<code> args </code>並輸出至<xref:System.IO.TextWriter>。</xref:System.IO.TextWriter>結果"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。       `args`與進行比對`xsl:param`樣式表中定義的項目。 整體套用至文件轉換範圍。 換句話說，如果目前節點不是文件根節點的節點樹狀結構上設定，則不會阻止轉換程序取得已載入文件中的所有節點。 在執行轉換之後，<xref:System.Xml.XPath.XPathNavigator>會保留在其原始狀態。</xref:System.Xml.XPath.XPathNavigator> 這表示呼叫轉換方法之後的節點，這是目前轉換程序之前，會保留目前的節點。       上的編碼屬性`xsl:output`輸出至<xref:System.IO.TextWriter>。</xref:System.IO.TextWriter>時不支援項目 請參閱[XslTransform 的輸出](~/add/includes/ajax-current-ext-md.md)針對所在特性`xsl:output`支援屬性。      > [!NOTE] > 此方法現在已過時。 設定<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>屬性會決定如何 XSLT`document()`函式已解決。</xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> 建議的作法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法會採用<xref:System.Xml.XmlResolver>物件做為其中一個引數。</xref:System.Xml.XmlResolver> </xref:System.Xml.Xsl.XslTransform.Transform%2A>"
  syntax:
    content: public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output);
    parameters:
    - id: input
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>包含要轉換的資料。"
    - id: args
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。"
    - id: output
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>至您想要輸出。</xref:System.IO.TextWriter>"
  overload: System.Xml.Xsl.XslTransform.Transform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "處理 XSLT 轉換時發生錯誤。       注意︰ 這是從舊版的行為變更。 <xref href=&quot;System.Xml.Xsl.XsltException&quot;> </xref>如果您使用 Microsoft.NET Framework 1.1 版或更早版本，會擲回。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)
  id: Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Transform(XPathNavigator,XsltArgumentList,XmlResolver)
  nameWithType: XslTransform.Transform(XPathNavigator,XsltArgumentList,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Transform(XPathNavigator,XsltArgumentList,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "轉換 XML 資料中的<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>使用指定<code> args </code>並輸出至<xref:System.Xml.XmlReader>。</xref:System.Xml.XmlReader>結果"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。       `args`與進行比對`xsl:param`樣式表中定義的項目。 整體套用至文件轉換範圍。 換句話說，如果目前節點不是文件根節點的節點樹狀結構上設定，則不會阻止轉換程序取得已載入文件中的所有節點。 在執行轉換之後，<xref:System.Xml.XPath.XPathNavigator>會保留在其原始狀態。</xref:System.Xml.XPath.XPathNavigator> 這表示呼叫轉換方法之後的節點，這是目前轉換程序之前，會保留目前的節點。       因為<xref:System.Xml.XmlReader>提供唯讀的輸出，`xsl:output`項目會被忽略。</xref:System.Xml.XmlReader> 請參閱[XslTransform 的輸出](~/add/includes/ajax-current-ext-md.md)如需詳細資訊。       這個方法可讓您執行非同步轉換的來源文件。"
  syntax:
    content: public System.Xml.XmlReader Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlResolver resolver);
    parameters:
    - id: input
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>包含要轉換的資料。"
    - id: args
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。"
    - id: resolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用來解析 XSLT`document()`函式。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、`document()`函式仍未解決。       <xref href=&quot;System.Xml.XmlResolver&quot;> </xref>轉換方法完成之後不會快取。"
    return:
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>包含轉換的結果。</xref:System.Xml.XmlReader>"
  overload: System.Xml.Xsl.XslTransform.Transform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "處理 XSLT 轉換時發生錯誤。       注意︰ 這是從舊版的行為變更。 <xref href=&quot;System.Xml.Xsl.XsltException&quot;> </xref>如果您使用 Microsoft.NET Framework 1.1 版或更早版本，會擲回。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  id: Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Transform(XPathNavigator,XsltArgumentList,XmlWriter)
  nameWithType: XslTransform.Transform(XPathNavigator,XsltArgumentList,XmlWriter)
  fullName: System.Xml.Xsl.XslTransform.Transform(XPathNavigator,XsltArgumentList,XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "轉換 XML 資料中的<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>使用指定的引數，並將結果輸出至<xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。       `args`與進行比對`xsl:param`樣式表中定義的項目。 整體套用至文件轉換範圍。 換句話說，如果目前節點不是文件根節點的節點樹狀結構上設定，則不會阻止轉換程序取得已載入文件中的所有節點。 在執行轉換之後，<xref:System.Xml.XPath.XPathNavigator>會保留在其原始狀態。</xref:System.Xml.XPath.XPathNavigator> 這表示呼叫轉換方法之後的節點是最新的轉換程序之前，會保留目前的節點。       `xsl:output`輸出至時，不支援項目<xref:System.Xml.XmlWriter>(`xsl:output`會被忽略)。</xref:System.Xml.XmlWriter> 請參閱[XslTransform 的輸出](~/add/includes/ajax-current-ext-md.md)如需詳細資訊。      > [!NOTE] > 此方法現在已過時。 設定<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>屬性會決定如何 XSLT`document()`函式已解決。</xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> 建議的作法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法會採用<xref:System.Xml.XmlResolver>物件做為其中一個引數。</xref:System.Xml.XmlResolver> </xref:System.Xml.Xsl.XslTransform.Transform%2A>"
  syntax:
    content: public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output);
    parameters:
    - id: input
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>包含要轉換的資料。"
    - id: args
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。"
    - id: output
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>至您想要輸出。</xref:System.Xml.XmlWriter>"
  overload: System.Xml.Xsl.XslTransform.Transform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "處理 XSLT 轉換時發生錯誤。       注意︰ 這是從舊版的行為變更。 <xref href=&quot;System.Xml.Xsl.XsltException&quot;> </xref>如果您使用 Microsoft.NET Framework 1.1 版或更早版本，會擲回。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)
  id: Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Transform(IXPathNavigable,XsltArgumentList,Stream,XmlResolver)
  nameWithType: XslTransform.Transform(IXPathNavigable,XsltArgumentList,Stream,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Transform(IXPathNavigable,XsltArgumentList,Stream,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "轉換 XML 資料中的<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>使用指定<code> args </code>並輸出至<xref:System.IO.Stream>。</xref:System.IO.Stream>結果"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。       `args`與進行比對`xsl:param`樣式表中定義的項目。       轉換是整個套用至文件。 換句話說，如果您要傳入的節點不是文件根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立<xref:System.Xml.XmlDocument>包含僅節點片段，並將其傳遞<xref:System.Xml.XmlDocument>轉換方法。</xref:System.Xml.XmlDocument> </xref:System.Xml.XmlDocument>       下列範例會執行轉換節點片段。      ```   XslTransform xslt = new XslTransform();        xslt.Load(&quot;print_root.xsl&quot;);   XmlDocument doc = new XmlDocument();   doc.Load(&quot;library.xml&quot;);   // Create a new document containing just the node fragment.   XmlNode testNode = doc.DocumentElement.FirstChild;    XmlDocument tmpDoc = new XmlDocument();    tmpDoc.LoadXml(testNode.OuterXml);   // Pass the document containing the node fragment    // to the Transform method.   Console.WriteLine(&quot;Passing &quot; + tmpDoc.OuterXml + &quot; to print_root.xsl&quot;);   xslt.Transform(tmpDoc, null, Console.Out, null);   ```此範例會使用`library.xml`和`print_root.xsl`檔案做為輸入，並輸出至主控台。      ```   Passing <book genre=&quot;novel&quot; ISBN=&quot;1-861001-57-5&quot;><title>Pride And Prejudice</title></book> to print_root.xsl    Root node is book.   ```       `library.xml`      ```   <library>     <book genre=&quot;novel&quot; ISBN=&quot;1-861001-57-5&quot;>        <title>Pride And Prejudice</title>     </book>     <book genre=&quot;novel&quot; ISBN=&quot;1-81920-21-2&quot;>        <title>Hook</title>     </book>   </library>   ```       `print_root.xsl`      ```   <style sheet version=&quot;1.0&quot; xmlns=&quot;http://www.w3.org/1999/XSL/Transform&quot; >     <output method=&quot;text&quot; />      <template match=&quot;/&quot;>        Root node is  <value-of select=&quot;local-name(//*[position() = 1])&quot; />      </template>   </style sheet>   ```"
  example:
  - "The following example performs a transformation within an ASP.NET page.  \n  \n [!code-vb[XslTransform.Transform5#1](~/add/codesnippet/visualbasic/0aececb0-8968-432a-8b61-_1.aspx)]\n [!code-cs[XslTransform.Transform5#1](~/add/codesnippet/csharp/0aececb0-8968-432a-8b61-_1.aspx)]"
  syntax:
    content: public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output, System.Xml.XmlResolver resolver);
    parameters:
    - id: input
      type: System.Xml.XPath.IXPathNavigable
      description: "實作<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>介面。 在.NET Framework 中，這可以是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含要轉換的資料。"
    - id: args
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。"
    - id: output
      type: System.IO.Stream
      description: "您要輸出資料流。"
    - id: resolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用來解析 XSLT`document()`函式。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、`document()`函式仍未解決。       <xref href=&quot;System.Xml.XmlResolver&quot;> </xref>不會快取之後<xref:System.Xml.Xsl.XslTransform.Transform*>方法完成。</xref:System.Xml.Xsl.XslTransform.Transform*>"
  overload: System.Xml.Xsl.XslTransform.Transform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "處理 XSLT 轉換時發生錯誤。       注意︰ 這是從舊版的行為變更。 <xref href=&quot;System.Xml.Xsl.XsltException&quot;> </xref>如果您使用 Microsoft.NET Framework 1.1 版或更早版本，會擲回。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)
  id: Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Transform(IXPathNavigable,XsltArgumentList,TextWriter,XmlResolver)
  nameWithType: XslTransform.Transform(IXPathNavigable,XsltArgumentList,TextWriter,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Transform(IXPathNavigable,XsltArgumentList,TextWriter,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "轉換 XML 資料中的<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>使用指定<code> args </code>並輸出至<xref:System.IO.TextWriter>。</xref:System.IO.TextWriter>結果"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。       `args`與進行比對`xsl:param`樣式表中定義的項目。       上的編碼屬性`xsl:output`輸出至<xref:System.IO.TextWriter>。</xref:System.IO.TextWriter>時不支援項目 請參閱[XslTransform 的輸出](~/add/includes/ajax-current-ext-md.md)針對所在特性`xsl:output`支援屬性。       轉換是整個套用至文件。 換句話說，如果您要傳入的節點不是文件根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立<xref:System.Xml.XmlDocument>包含僅節點片段，並將其傳遞<xref:System.Xml.XmlDocument>轉換方法。</xref:System.Xml.XmlDocument> </xref:System.Xml.XmlDocument>       下列範例會執行轉換節點片段。      ```   XslTransform xslt = new XslTransform();        xslt.Load(&quot;print_root.xsl&quot;);   XmlDocument doc = new XmlDocument();   doc.Load(&quot;library.xml&quot;);   // Create a new document containing just the node fragment.   XmlNode testNode = doc.DocumentElement.FirstChild;    XmlDocument tmpDoc = new XmlDocument();    tmpDoc.LoadXml(testNode.OuterXml);   // Pass the document containing the node fragment    // to the Transform method.   Console.WriteLine(&quot;Passing &quot; + tmpDoc.OuterXml + &quot; to print_root.xsl&quot;);   xslt.Transform(tmpDoc, null, Console.Out, null);   ```此範例會使用`library.xml`和`print_root.xsl`檔案做為輸入，並輸出至主控台。      ```   Passing <book genre=&quot;novel&quot; ISBN=&quot;1-861001-57-5&quot;><title>Pride And Prejudice</title></book> to print_root.xsl    Root node is book.   ```       `library.xml`      ```   <library>     <book genre=&quot;novel&quot; ISBN=&quot;1-861001-57-5&quot;>        <title>Pride And Prejudice</title>     </book>     <book genre=&quot;novel&quot; ISBN=&quot;1-81920-21-2&quot;>        <title>Hook</title>     </book>   </library>   ```       `print_root.xsl`      ```   <style sheet version=&quot;1.0&quot; xmlns=&quot;http://www.w3.org/1999/XSL/Transform&quot; >     <output method=&quot;text&quot; />      <template match=&quot;/&quot;>        Root node is  <value-of select=&quot;local-name(//*[position() = 1])&quot; />      </template>   </style sheet>   ```"
  example:
  - "The following example transforms an XML file and outputs an HTML string. The <xref:System.IO.StringReader> and <xref:System.IO.StringWriter> classes are used to read and write the strings.  \n  \n [!code-vb[XslTransform.Transform6#1](~/add/codesnippet/visualbasic/f37e0493-6ab0-43d9-9439-_1.vb)]\n [!code-cs[XslTransform.Transform6#1](~/add/codesnippet/csharp/f37e0493-6ab0-43d9-9439-_1.cs)]  \n  \n The example uses the `books.xml` file as input.  \n  \n [!code-xml[XslTransform.Transform6#2](~/add/codesnippet/xml/f37e0493-6ab0-43d9-9439-_2.xml)]"
  syntax:
    content: public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output, System.Xml.XmlResolver resolver);
    parameters:
    - id: input
      type: System.Xml.XPath.IXPathNavigable
      description: "實作<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>介面。 在.NET Framework 中，這可以是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含要轉換的資料。"
    - id: args
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。"
    - id: output
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>至您想要輸出。</xref:System.IO.TextWriter>"
    - id: resolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用來解析 XSLT`document()`函式。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、`document()`函式仍未解決。       <xref href=&quot;System.Xml.XmlResolver&quot;> </xref>轉換方法完成之後不會快取。"
  overload: System.Xml.Xsl.XslTransform.Transform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "處理 XSLT 轉換時發生錯誤。       注意︰ 這是從舊版的行為變更。 <xref href=&quot;System.Xml.Xsl.XsltException&quot;> </xref>如果您使用 Microsoft.NET Framework 1.1 版或更早版本，會擲回。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  id: Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Transform(IXPathNavigable,XsltArgumentList,XmlWriter,XmlResolver)
  nameWithType: XslTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "轉換 XML 資料中的<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>使用指定<code> args </code>並輸出至<xref:System.Xml.XmlWriter>。</xref:System.Xml.XmlWriter>結果"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。       `args`與進行比對`xsl:param`樣式表中定義的項目。 `xsl:output`輸出至時，不支援項目<xref:System.Xml.XmlWriter>(`xsl:output`會被忽略)。</xref:System.Xml.XmlWriter> 請參閱[XslTransform 的輸出](~/add/includes/ajax-current-ext-md.md)如需詳細資訊。       轉換是整個套用至文件。 換句話說，如果您要傳入的節點不是文件根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立<xref:System.Xml.XmlDocument>包含僅節點片段，並將其傳遞<xref:System.Xml.XmlDocument>轉換方法。</xref:System.Xml.XmlDocument> </xref:System.Xml.XmlDocument>       下列範例會執行轉換節點片段。      ```   XslTransform xslt = new XslTransform();        xslt.Load(&quot;print_root.xsl&quot;);   XmlDocument doc = new XmlDocument();   doc.Load(&quot;library.xml&quot;);   // Create a new document containing just the node fragment.   XmlNode testNode = doc.DocumentElement.FirstChild;    XmlDocument tmpDoc = new XmlDocument();    tmpDoc.LoadXml(testNode.OuterXml);   // Pass the document containing the node fragment    // to the Transform method.   Console.WriteLine(&quot;Passing &quot; + tmpDoc.OuterXml + &quot; to print_root.xsl&quot;);   xslt.Transform(tmpDoc, null, Console.Out, null);   ```此範例會使用`library.xml`和`print_root.xsl`檔案做為輸入，並輸出至主控台。      ```   Passing <book genre=&quot;novel&quot; ISBN=&quot;1-861001-57-5&quot;><title>Pride And Prejudice</title></book> to print_root.xsl    Root node is book.   ```       `library.xml`      ```   <library>     <book genre=&quot;novel&quot; ISBN=&quot;1-861001-57-5&quot;>        <title>Pride And Prejudice</title>     </book>     <book genre=&quot;novel&quot; ISBN=&quot;1-81920-21-2&quot;>        <title>Hook</title>     </book>   </library>   ```       `print_root.xsl`      ```   <style sheet version=&quot;1.0&quot; xmlns=&quot;http://www.w3.org/1999/XSL/Transform&quot; >     <output method=&quot;text&quot; />     <template match=&quot;/&quot;>     Root node is  <value-of select=&quot;local-name(//*[position() = 1])&quot; />      </template>   </style sheet>   ```"
  example:
  - "The following example transforms an XML document into an HTML document. It displays the ISBN, title, and price for each book in a table.  \n  \n [!code-cs[Classic WebData XslTransform.Transform7 Example#1](~/add/codesnippet/csharp/e2f436c8-72f8-4045-80f0-_1.cs)]\n [!code-cpp[Classic WebData XslTransform.Transform7 Example#1](~/add/codesnippet/cpp/e2f436c8-72f8-4045-80f0-_1.cpp)]\n [!code-vb[Classic WebData XslTransform.Transform7 Example#1](~/add/codesnippet/visualbasic/e2f436c8-72f8-4045-80f0-_1.vb)]  \n  \n The sample uses the following two input files.  \n  \n `books.xml`  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/add/codesnippet/xml/e2f436c8-72f8-4045-80f0-_2.xml)]  \n  \n `output.xsl`  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/add/codesnippet/xml/e2f436c8-72f8-4045-80f0-_3.xsl)]"
  syntax:
    content: public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output, System.Xml.XmlResolver resolver);
    parameters:
    - id: input
      type: System.Xml.XPath.IXPathNavigable
      description: "實作<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>介面。 在.NET Framework 中，這可以是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含要轉換的資料。"
    - id: args
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。"
    - id: output
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>至您想要輸出。</xref:System.Xml.XmlWriter>"
    - id: resolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用來解析 XSLT`document()`函式。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、`document()`函式仍未解決。       <xref href=&quot;System.Xml.XmlResolver&quot;> </xref>轉換方法完成之後不會快取。"
  overload: System.Xml.Xsl.XslTransform.Transform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "處理 XSLT 轉換時發生錯誤。       注意︰ 這是從舊版的行為變更。 <xref href=&quot;System.Xml.Xsl.XsltException&quot;> </xref>如果您使用 Microsoft.NET Framework 1.1 版或更早版本，會擲回。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)
  id: Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Transform(XPathNavigator,XsltArgumentList,Stream,XmlResolver)
  nameWithType: XslTransform.Transform(XPathNavigator,XsltArgumentList,Stream,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Transform(XPathNavigator,XsltArgumentList,Stream,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "轉換 XML 資料中的<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>使用指定<code> args </code>並輸出至<xref:System.IO.Stream>。</xref:System.IO.Stream>結果"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。       `args`與進行比對`xsl:param`樣式表中定義的項目。 整體套用至文件轉換範圍。 換句話說，如果目前節點不是文件根節點的節點樹狀結構上設定，則不會阻止轉換程序取得已載入文件中的所有節點。 在執行轉換之後，<xref:System.Xml.XPath.XPathNavigator>會保留在其原始狀態。</xref:System.Xml.XPath.XPathNavigator> 這表示呼叫轉換方法之後的節點，這是目前轉換程序之前，會保留目前的節點。       請參閱[XslTransform 的輸出](~/add/includes/ajax-current-ext-md.md)針對所在特性`xsl:output`支援屬性。"
  example:
  - "The following example loads a customer table into an <xref:System.Xml.XmlDataDocument> and performs an XSLT transformation to pull the customer data into an HTML table. The example uses the Microsoft SQL Server 2000 Northwind database.  \n  \n [!code-cs[XmlDataDocument.CreateNavigator#1](~/add/codesnippet/csharp/cf85a737-72d0-4c28-b81d-_1.cs)]\n [!code-vb[XmlDataDocument.CreateNavigator#1](~/add/codesnippet/visualbasic/cf85a737-72d0-4c28-b81d-_1.vb)]  \n  \n The example uses the `customers.xsl` file as input.  \n  \n [!code-xml[XmlDataDocument.CreateNavigator#2](~/add/codesnippet/xml/cf85a737-72d0-4c28-b81d-_2.xsl)]"
  syntax:
    content: public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output, System.Xml.XmlResolver resolver);
    parameters:
    - id: input
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>包含要轉換的資料。"
    - id: args
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。"
    - id: output
      type: System.IO.Stream
      description: "您要輸出資料流。"
    - id: resolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用來解析 XSLT`document()`函式。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、`document()`函式仍未解決。       <xref href=&quot;System.Xml.XmlResolver&quot;> </xref>轉換方法完成之後不會快取。"
  overload: System.Xml.Xsl.XslTransform.Transform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "處理 XSLT 轉換時發生錯誤。       注意︰ 這是從舊版的行為變更。 <xref href=&quot;System.Xml.Xsl.XsltException&quot;> </xref>如果您使用 Microsoft.NET Framework 1.1 版或更早版本，會擲回。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)
  id: Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Transform(XPathNavigator,XsltArgumentList,TextWriter,XmlResolver)
  nameWithType: XslTransform.Transform(XPathNavigator,XsltArgumentList,TextWriter,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Transform(XPathNavigator,XsltArgumentList,TextWriter,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "轉換 XML 資料中的<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>使用指定<code> args </code>並輸出至<xref:System.IO.TextWriter>。</xref:System.IO.TextWriter>結果"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。       `args`與進行比對`xsl:param`樣式表中定義的項目。 整體套用至文件轉換範圍。 換句話說，如果目前節點不是文件根節點的節點樹狀結構上設定，則不會阻止轉換程序取得已載入文件中的所有節點。 在執行轉換之後，<xref:System.Xml.XPath.XPathNavigator>會保留在其原始狀態。</xref:System.Xml.XPath.XPathNavigator> 這表示呼叫轉換方法之後的節點，這是目前轉換程序之前，會保留目前的節點。       上的編碼屬性`xsl:output`輸出至<xref:System.IO.TextWriter>。</xref:System.IO.TextWriter>時不支援項目 請參閱[XslTransform 的輸出](~/add/includes/ajax-current-ext-md.md)針對所在特性`xsl:output`支援屬性。"
  syntax:
    content: public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output, System.Xml.XmlResolver resolver);
    parameters:
    - id: input
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>包含要轉換的資料。"
    - id: args
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。"
    - id: output
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>至您想要輸出。</xref:System.IO.TextWriter>"
    - id: resolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用來解析 XSLT`document()`函式。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、`document()`函式仍未解決。       <xref href=&quot;System.Xml.XmlResolver&quot;> </xref>轉換方法完成之後不會快取。"
  overload: System.Xml.Xsl.XslTransform.Transform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "處理 XSLT 轉換時發生錯誤。       注意︰ 這是從舊版的行為變更。 <xref href=&quot;System.Xml.Xsl.XsltException&quot;> </xref>如果您使用 Microsoft.NET Framework 1.1 版或更早版本，會擲回。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  id: Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: Transform(XPathNavigator,XsltArgumentList,XmlWriter,XmlResolver)
  nameWithType: XslTransform.Transform(XPathNavigator,XsltArgumentList,XmlWriter,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Transform(XPathNavigator,XsltArgumentList,XmlWriter,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "轉換 XML 資料中的<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>使用指定的引數，並將結果輸出至<xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Xml.Xsl.XslTransform>支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslTransform> XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。       `args`與進行比對`xsl:param`樣式表中定義的項目。 整體套用至文件轉換範圍。 換句話說，如果目前節點不是文件根節點的節點樹狀結構上設定，則不會阻止轉換程序取得已載入文件中的所有節點。 在執行轉換之後，<xref:System.Xml.XPath.XPathNavigator>會保留在其原始狀態。</xref:System.Xml.XPath.XPathNavigator> 這表示呼叫轉換方法之後的節點是最新的轉換程序之前，會保留目前的節點。       `xsl:output`輸出至時，不支援項目<xref:System.Xml.XmlWriter>(`xsl:output`會被忽略)。</xref:System.Xml.XmlWriter> 請參閱[XslTransform 的輸出](~/add/includes/ajax-current-ext-md.md)如需詳細資訊。"
  example:
  - "The following example loads and edits an XML document before performing an XSLT transform.  \n  \n [!code-vb[XslTransform.Transform2#1](~/add/codesnippet/visualbasic/3e32b237-2708-4620-b957-_1.vb)]\n [!code-cs[XslTransform.Transform2#1](~/add/codesnippet/csharp/3e32b237-2708-4620-b957-_1.cs)]\n [!code-cpp[XslTransform.Transform2#1](~/add/codesnippet/cpp/3e32b237-2708-4620-b957-_1.cpp)]"
  syntax:
    content: public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output, System.Xml.XmlResolver resolver);
    parameters:
    - id: input
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>包含要轉換的資料。"
    - id: args
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。"
    - id: output
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>至您想要輸出。</xref:System.Xml.XmlWriter>"
    - id: resolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用來解析 XSLT`document()`函式。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、`document()`函式仍未解決。       <xref href=&quot;System.Xml.XmlResolver&quot;> </xref>轉換方法完成之後不會快取。"
  overload: System.Xml.Xsl.XslTransform.Transform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "處理 XSLT 轉換時發生錯誤。       注意︰ 這是從舊版的行為變更。 <xref href=&quot;System.Xml.Xsl.XsltException&quot;> </xref>如果您使用 Microsoft.NET Framework 1.1 版或更早版本，會擲回。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslTransform.XmlResolver
  id: XmlResolver
  parent: System.Xml.Xsl.XslTransform
  langs:
  - csharp
  name: XmlResolver
  nameWithType: XslTransform.XmlResolver
  fullName: System.Xml.Xsl.XslTransform.XmlResolver
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "設定<xref href=&quot;System.Xml.XmlResolver&quot;></xref>用來解析外部資源時<xref:System.Xml.Xsl.XslTransform.Transform*>方法呼叫。</xref:System.Xml.Xsl.XslTransform.Transform*>"
  remarks: "> [!NOTE]><xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。</xref:System.Xml.Xsl.XslCompiledTransform> 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。       在 1.1 版的.NET framework，應用程式的信任層級決定的預設行為︰`Fully trusted code:`預設<xref:System.Xml.XmlUrlResolver>沒有使用者認證用來解析`document()`函式。</xref:System.Xml.XmlUrlResolver> 如果需要驗證存取外部資源，使用這個屬性來指定<xref:System.Xml.XmlResolver>具有必要認證。</xref:System.Xml.XmlResolver>       `Semi-trusted code:`屬性設定為`null`，這表示`document()`函式仍未解決。 由於完全信任，才能指定<xref:System.Xml.XmlResolver>，這個屬性也無法設定。</xref:System.Xml.XmlResolver>       使用這個解析程式時 XSLT`document()`函式會叫用。 它不用來解析`xsl:import`和`xsl:include`樣式表中所參考的項目。 若要指定<xref:System.Xml.XmlResolver>要用來解析`xsl:import`和`xsl:include`樣式表中所參考的項目使用<xref:System.Xml.Xsl.XslTransform.Load%2A>多載，這個方法會接受<xref:System.Xml.XmlResolver>做為其中一個引數。</xref:System.Xml.XmlResolver> </xref:System.Xml.Xsl.XslTransform.Load%2A> </xref:System.Xml.XmlResolver>      > [!NOTE] > 這個屬性是.NET Framework 1.1 版中已過時。 指定<xref:System.Xml.XmlResolver>使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法是建議的做法。</xref:System.Xml.Xsl.XslTransform.Transform%2A> </xref:System.Xml.XmlResolver> 在此情況下，<xref:System.Xml.XmlResolver>不會快取之後<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法完成。</xref:System.Xml.Xsl.XslTransform.Transform%2A> </xref:System.Xml.XmlResolver>"
  syntax:
    content: public System.Xml.XmlResolver XmlResolver { set; }
    return:
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>在轉換期間使用。 如果設定為<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，XSLT`document()`函式仍未解決。"
  overload: System.Xml.Xsl.XslTransform.XmlResolver*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Xml.Xsl.XsltCompileException
  parent: System.Xml.Xsl
  isExternal: false
  name: XsltCompileException
  nameWithType: XsltCompileException
  fullName: System.Xml.Xsl.XsltCompileException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Xml.Xsl.XslTransform.#ctor
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: XslTransform()
  nameWithType: XslTransform.XslTransform()
  fullName: System.Xml.Xsl.XslTransform.XslTransform()
- uid: System.Xml.Xsl.XslTransform.Load(System.String)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Load(String)
  nameWithType: XslTransform.Load(String)
  fullName: System.Xml.Xsl.XslTransform.Load(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Load(XmlReader)
  nameWithType: XslTransform.Load(XmlReader)
  fullName: System.Xml.Xsl.XslTransform.Load(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Load(IXPathNavigable)
  nameWithType: XslTransform.Load(IXPathNavigable)
  fullName: System.Xml.Xsl.XslTransform.Load(IXPathNavigable)
- uid: System.Xml.XPath.IXPathNavigable
  parent: System.Xml.XPath
  isExternal: false
  name: IXPathNavigable
  nameWithType: IXPathNavigable
  fullName: System.Xml.XPath.IXPathNavigable
- uid: System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Load(XPathNavigator)
  nameWithType: XslTransform.Load(XPathNavigator)
  fullName: System.Xml.Xsl.XslTransform.Load(XPathNavigator)
- uid: System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: false
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Load(String,XmlResolver)
  nameWithType: XslTransform.Load(String,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Load(String,XmlResolver)
- uid: System.Xml.XmlResolver
  parent: System.Xml
  isExternal: false
  name: XmlResolver
  nameWithType: XmlResolver
  fullName: System.Xml.XmlResolver
- uid: System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Load(XmlReader,XmlResolver)
  nameWithType: XslTransform.Load(XmlReader,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Load(XmlReader,XmlResolver)
- uid: System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Load(IXPathNavigable,XmlResolver)
  nameWithType: XslTransform.Load(IXPathNavigable,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Load(IXPathNavigable,XmlResolver)
- uid: System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Load(XPathNavigator,XmlResolver)
  nameWithType: XslTransform.Load(XPathNavigator,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Load(XPathNavigator,XmlResolver)
- uid: System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver,System.Security.Policy.Evidence)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Load(XmlReader,XmlResolver,Evidence)
  nameWithType: XslTransform.Load(XmlReader,XmlResolver,Evidence)
  fullName: System.Xml.Xsl.XslTransform.Load(XmlReader,XmlResolver,Evidence)
- uid: System.Security.Policy.Evidence
  parent: System.Security.Policy
  isExternal: false
  name: Evidence
  nameWithType: Evidence
  fullName: System.Security.Policy.Evidence
- uid: System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver,System.Security.Policy.Evidence)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Load(IXPathNavigable,XmlResolver,Evidence)
  nameWithType: XslTransform.Load(IXPathNavigable,XmlResolver,Evidence)
  fullName: System.Xml.Xsl.XslTransform.Load(IXPathNavigable,XmlResolver,Evidence)
- uid: System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver,System.Security.Policy.Evidence)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Load(XPathNavigator,XmlResolver,Evidence)
  nameWithType: XslTransform.Load(XPathNavigator,XmlResolver,Evidence)
  fullName: System.Xml.Xsl.XslTransform.Load(XPathNavigator,XmlResolver,Evidence)
- uid: System.Xml.Xsl.XslTransform.Transform(System.String,System.String)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Transform(String,String)
  nameWithType: XslTransform.Transform(String,String)
  fullName: System.Xml.Xsl.XslTransform.Transform(String,String)
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Transform(IXPathNavigable,XsltArgumentList)
  nameWithType: XslTransform.Transform(IXPathNavigable,XsltArgumentList)
  fullName: System.Xml.Xsl.XslTransform.Transform(IXPathNavigable,XsltArgumentList)
- uid: System.Xml.Xsl.XsltArgumentList
  parent: System.Xml.Xsl
  isExternal: false
  name: XsltArgumentList
  nameWithType: XsltArgumentList
  fullName: System.Xml.Xsl.XsltArgumentList
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Transform(XPathNavigator,XsltArgumentList)
  nameWithType: XslTransform.Transform(XPathNavigator,XsltArgumentList)
  fullName: System.Xml.Xsl.XslTransform.Transform(XPathNavigator,XsltArgumentList)
- uid: System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Transform(String,String,XmlResolver)
  nameWithType: XslTransform.Transform(String,String,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Transform(String,String,XmlResolver)
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Transform(IXPathNavigable,XsltArgumentList,Stream)
  nameWithType: XslTransform.Transform(IXPathNavigable,XsltArgumentList,Stream)
  fullName: System.Xml.Xsl.XslTransform.Transform(IXPathNavigable,XsltArgumentList,Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Transform(IXPathNavigable,XsltArgumentList,TextWriter)
  nameWithType: XslTransform.Transform(IXPathNavigable,XsltArgumentList,TextWriter)
  fullName: System.Xml.Xsl.XslTransform.Transform(IXPathNavigable,XsltArgumentList,TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Transform(IXPathNavigable,XsltArgumentList,XmlResolver)
  nameWithType: XslTransform.Transform(IXPathNavigable,XsltArgumentList,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Transform(IXPathNavigable,XsltArgumentList,XmlResolver)
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Transform(IXPathNavigable,XsltArgumentList,XmlWriter)
  nameWithType: XslTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter)
  fullName: System.Xml.Xsl.XslTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Transform(XPathNavigator,XsltArgumentList,Stream)
  nameWithType: XslTransform.Transform(XPathNavigator,XsltArgumentList,Stream)
  fullName: System.Xml.Xsl.XslTransform.Transform(XPathNavigator,XsltArgumentList,Stream)
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Transform(XPathNavigator,XsltArgumentList,TextWriter)
  nameWithType: XslTransform.Transform(XPathNavigator,XsltArgumentList,TextWriter)
  fullName: System.Xml.Xsl.XslTransform.Transform(XPathNavigator,XsltArgumentList,TextWriter)
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Transform(XPathNavigator,XsltArgumentList,XmlResolver)
  nameWithType: XslTransform.Transform(XPathNavigator,XsltArgumentList,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Transform(XPathNavigator,XsltArgumentList,XmlResolver)
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Transform(XPathNavigator,XsltArgumentList,XmlWriter)
  nameWithType: XslTransform.Transform(XPathNavigator,XsltArgumentList,XmlWriter)
  fullName: System.Xml.Xsl.XslTransform.Transform(XPathNavigator,XsltArgumentList,XmlWriter)
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Transform(IXPathNavigable,XsltArgumentList,Stream,XmlResolver)
  nameWithType: XslTransform.Transform(IXPathNavigable,XsltArgumentList,Stream,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Transform(IXPathNavigable,XsltArgumentList,Stream,XmlResolver)
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Transform(IXPathNavigable,XsltArgumentList,TextWriter,XmlResolver)
  nameWithType: XslTransform.Transform(IXPathNavigable,XsltArgumentList,TextWriter,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Transform(IXPathNavigable,XsltArgumentList,TextWriter,XmlResolver)
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Transform(IXPathNavigable,XsltArgumentList,XmlWriter,XmlResolver)
  nameWithType: XslTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter,XmlResolver)
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Transform(XPathNavigator,XsltArgumentList,Stream,XmlResolver)
  nameWithType: XslTransform.Transform(XPathNavigator,XsltArgumentList,Stream,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Transform(XPathNavigator,XsltArgumentList,Stream,XmlResolver)
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Transform(XPathNavigator,XsltArgumentList,TextWriter,XmlResolver)
  nameWithType: XslTransform.Transform(XPathNavigator,XsltArgumentList,TextWriter,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Transform(XPathNavigator,XsltArgumentList,TextWriter,XmlResolver)
- uid: System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Transform(XPathNavigator,XsltArgumentList,XmlWriter,XmlResolver)
  nameWithType: XslTransform.Transform(XPathNavigator,XsltArgumentList,XmlWriter,XmlResolver)
  fullName: System.Xml.Xsl.XslTransform.Transform(XPathNavigator,XsltArgumentList,XmlWriter,XmlResolver)
- uid: System.Xml.Xsl.XslTransform.XmlResolver
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: XmlResolver
  nameWithType: XslTransform.XmlResolver
  fullName: System.Xml.Xsl.XslTransform.XmlResolver
- uid: System.Xml.Xsl.XslTransform.#ctor*
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: XslTransform
  nameWithType: XslTransform.XslTransform
- uid: System.Xml.Xsl.XslTransform.Load*
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Load
  nameWithType: XslTransform.Load
- uid: System.Xml.Xsl.XslTransform.Transform*
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: Transform
  nameWithType: XslTransform.Transform
- uid: System.Xml.Xsl.XslTransform.XmlResolver*
  parent: System.Xml.Xsl.XslTransform
  isExternal: false
  name: XmlResolver
  nameWithType: XslTransform.XmlResolver
