### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.TouchDevice
  id: TouchDevice
  children:
  - System.Windows.Input.TouchDevice.#ctor(System.Int32)
  - System.Windows.Input.TouchDevice.Activate
  - System.Windows.Input.TouchDevice.Activated
  - System.Windows.Input.TouchDevice.ActiveSource
  - System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)
  - System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)
  - System.Windows.Input.TouchDevice.Captured
  - System.Windows.Input.TouchDevice.CaptureMode
  - System.Windows.Input.TouchDevice.Deactivate
  - System.Windows.Input.TouchDevice.Deactivated
  - System.Windows.Input.TouchDevice.DirectlyOver
  - System.Windows.Input.TouchDevice.GetIntermediateTouchPoints(System.Windows.IInputElement)
  - System.Windows.Input.TouchDevice.GetTouchPoint(System.Windows.IInputElement)
  - System.Windows.Input.TouchDevice.Id
  - System.Windows.Input.TouchDevice.IsActive
  - System.Windows.Input.TouchDevice.OnCapture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)
  - System.Windows.Input.TouchDevice.OnManipulationEnded(System.Boolean)
  - System.Windows.Input.TouchDevice.OnManipulationStarted
  - System.Windows.Input.TouchDevice.ReportDown
  - System.Windows.Input.TouchDevice.ReportMove
  - System.Windows.Input.TouchDevice.ReportUp
  - System.Windows.Input.TouchDevice.SetActiveSource(System.Windows.PresentationSource)
  - System.Windows.Input.TouchDevice.Synchronize
  - System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#GetPosition(System.Windows.IInputElement)
  - System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#Id
  - System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#ManipulationEnded(System.Boolean)
  - System.Windows.Input.TouchDevice.Target
  - System.Windows.Input.TouchDevice.Updated
  langs:
  - csharp
  name: TouchDevice
  nameWithType: TouchDevice
  fullName: System.Windows.Input.TouchDevice
  type: Class
  summary: "表示的單一觸控觸控螢幕上手指所產生的輸入。"
  remarks: "您通常可以使用存取 TouchDevice<xref:System.Windows.Input.TouchEventArgs.TouchDevice%2A?displayProperty=fullName>屬性。</xref:System.Windows.Input.TouchEventArgs.TouchDevice%2A?displayProperty=fullName> TouchDevice 代表單一的觸控式螢幕上。 如果有多個工作，請使用<xref:System.Windows.Input.TouchDevice.Id%2A>屬性來加以區分。</xref:System.Windows.Input.TouchDevice.Id%2A>      > [!NOTE] > 這個類別包含在類別層級套用至所有成員的繼承要求。 A<xref:System.Security.SecurityException>衍生的類別並沒有完全信任權限時，會擲回。</xref:System.Security.SecurityException> 如需安全性需求的詳細資訊，請參閱[連結要求](~/add/includes/ajax-current-ext-md.md)和[繼承要求](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9)。"
  example:
  - "The following example enables you to create simple patterns on a <xref:System.Windows.Controls.Canvas> by dragging two fingers on a touchscreen. Each touch is represented by a TouchDevice in the <xref:System.Windows.Input.TouchEventArgs>. The pattern is created by drawing a line between the touch points that are provided by the touches. This example requires a Windows Touch–compatible screen.  \n  \n The following markup creates the user interface, which consists of a <xref:System.Windows.Controls.Canvas> that is centered in a grid, and attaches the event handlers for the touch events.  \n  \n [!code-xml[TouchEventsSample#000](~/add/codesnippet/xaml/wpftoucheventssample/mainwindow.xaml#000)]  \n  \n The following code handles the touch events. When a touch is pressed on the <xref:System.Windows.Controls.Canvas>, the TouchDevice is captured to the <xref:System.Windows.Controls.Canvas>. When the touch is lifted, the TouchDevice is released. When a touch moves on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice.Id%2A> is checked. If the move came from the first touch, its location is recorded. If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.  \n  \n [!code-vb[TouchEventsSample#100](~/add/codesnippet/visualbasic/wpftoucheventssample/mainwindow.xaml.vb#100)]\n [!code-cs[TouchEventsSample#100](~/add/codesnippet/csharp/wpftoucheventssample/mainwindow.xaml.cs#100)]"
  syntax:
    content: 'public abstract class TouchDevice : System.Windows.Input.InputDevice, System.Windows.Input.IManipulator'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.Input.InputDevice
  implements:
  - System.Windows.Input.IManipulator
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: TouchDevice(Int32)
  nameWithType: TouchDevice.TouchDevice(Int32)
  fullName: System.Windows.Input.TouchDevice.TouchDevice(Int32)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "從建構函式以初始化衍生類別中呼叫<xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref>類別。"
  syntax:
    content: protected TouchDevice (int deviceId);
    parameters:
    - id: deviceId
      type: System.Int32
      description: "觸控裝置的唯一識別碼。"
  overload: System.Windows.Input.TouchDevice.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.Activate
  id: Activate
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: Activate()
  nameWithType: TouchDevice.Activate()
  fullName: System.Windows.Input.TouchDevice.Activate()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "新增<xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref>傳訊系統的輸入。"
  remarks: "類別繼承自<xref:System.Windows.Input.TouchDevice>應該呼叫這個方法，以啟動目前的裝置。</xref:System.Windows.Input.TouchDevice>"
  syntax:
    content: protected void Activate ();
    parameters: []
  overload: System.Windows.Input.TouchDevice.Activate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已啟用裝置。"
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.Activated
  id: Activated
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: Activated
  nameWithType: TouchDevice.Activated
  fullName: System.Windows.Input.TouchDevice.Activated
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "發生時<xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref>加入至輸入郵件系統。"
  syntax:
    content: public event EventHandler Activated;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.ActiveSource
  id: ActiveSource
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: ActiveSource
  nameWithType: TouchDevice.ActiveSource
  fullName: System.Windows.Input.TouchDevice.ActiveSource
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得<xref href=&quot;System.Windows.PresentationSource&quot;></xref>報告此裝置的輸入。"
  syntax:
    content: public override sealed System.Windows.PresentationSource ActiveSource { get; }
    return:
      type: System.Windows.PresentationSource
      description: "報告這個裝置的輸入來源。"
  overload: System.Windows.Input.TouchDevice.ActiveSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)
  id: Capture(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: Capture(IInputElement)
  nameWithType: TouchDevice.Capture(IInputElement)
  fullName: System.Windows.Input.TouchDevice.Capture(IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "藉由擷取指定的項目觸控<xref href=&quot;System.Windows.Input.CaptureMode&quot;></xref>擷取模式。"
  remarks: "A<xref:System.Windows.Input.TouchDevice>無法擷取的項目中，如果已擷取到另一個項目。</xref:System.Windows.Input.TouchDevice>"
  example:
  - "The following example handles the <xref:System.Windows.UIElement.TouchDown> events that occur on a <xref:System.Windows.Controls.Canvas>. When a touch is pressed on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice> is captured to the <xref:System.Windows.Controls.Canvas>.  \n  \n This example is part of a larger example that is available in the <xref:System.Windows.Input.TouchDevice> class overview.  \n  \n [!code-vb[TouchEventsSample#110](~/add/codesnippet/visualbasic/wpftoucheventssample/mainwindow.xaml.vb#110)]\n [!code-cs[TouchEventsSample#110](~/add/codesnippet/csharp/wpftoucheventssample/mainwindow.xaml.cs#110)]"
  syntax:
    content: public bool Capture (System.Windows.IInputElement element);
    parameters:
    - id: element
      type: System.Windows.IInputElement
      description: "擷取觸控輸入項目。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果項目可以捕捉觸控;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.TouchDevice.Capture*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>element</code>is not a <xref href=&quot;System.Windows.UIElement&quot;></xref>, <xref href=&quot;System.Windows.UIElement3D&quot;></xref>, or <xref href=&quot;System.Windows.ContentElement&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)
  id: Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: Capture(IInputElement,CaptureMode)
  nameWithType: TouchDevice.Capture(IInputElement,CaptureMode)
  fullName: System.Windows.Input.TouchDevice.Capture(IInputElement,CaptureMode)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "使用指定的擷取指定的項目觸控<xref href=&quot;System.Windows.Input.CaptureMode&quot;> </xref>。"
  remarks: "A<xref:System.Windows.Input.TouchDevice>無法擷取的項目中，如果已擷取到另一個項目。</xref:System.Windows.Input.TouchDevice>"
  syntax:
    content: public bool Capture (System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode);
    parameters:
    - id: element
      type: System.Windows.IInputElement
      description: "擷取觸控的項目。"
    - id: captureMode
      type: System.Windows.Input.CaptureMode
      description: "要使用的擷取原則。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果項目可以捕捉觸控;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.TouchDevice.Capture*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>element</code>is not a <xref href=&quot;System.Windows.UIElement&quot;></xref>, <xref href=&quot;System.Windows.UIElement3D&quot;></xref>, or <xref href=&quot;System.Windows.ContentElement&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.Captured
  id: Captured
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: Captured
  nameWithType: TouchDevice.Captured
  fullName: System.Windows.Input.TouchDevice.Captured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得所擷取的項目<xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref>。"
  remarks: ''
  example:
  - "The following example handles the <xref:System.Windows.UIElement.TouchUp> events that occur on a <xref:System.Windows.Controls.Canvas>. It checks the Captured property to verify that the device that raised the event is captured to the <xref:System.Windows.Controls.Canvas>. If it is, the <xref:System.Windows.Input.TouchDevice> is released.  \n  \n This example is part of a larger example that is available in the <xref:System.Windows.Input.TouchDevice> class overview.  \n  \n [!code-vb[TouchEventsSample#130](~/add/codesnippet/visualbasic/wpftoucheventssample/mainwindow.xaml.vb#130)]\n [!code-cs[TouchEventsSample#130](~/add/codesnippet/csharp/wpftoucheventssample/mainwindow.xaml.cs#130)]"
  syntax:
    content: public System.Windows.IInputElement Captured { get; }
    return:
      type: System.Windows.IInputElement
      description: "擷取的項目<xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref>。"
  overload: System.Windows.Input.TouchDevice.Captured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.CaptureMode
  id: CaptureMode
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: CaptureMode
  nameWithType: TouchDevice.CaptureMode
  fullName: System.Windows.Input.TouchDevice.CaptureMode
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得的捕捉原則<xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref>。"
  syntax:
    content: public System.Windows.Input.CaptureMode CaptureMode { get; }
    return:
      type: System.Windows.Input.CaptureMode
      description: "擷取原則的<xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref>。"
  overload: System.Windows.Input.TouchDevice.CaptureMode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.Deactivate
  id: Deactivate
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: Deactivate()
  nameWithType: TouchDevice.Deactivate()
  fullName: System.Windows.Input.TouchDevice.Deactivate()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "移除<xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref>從傳訊系統的輸入。"
  remarks: "類別繼承自<xref:System.Windows.Input.TouchDevice>應該呼叫這個方法，以停用目前的裝置。</xref:System.Windows.Input.TouchDevice>       A<xref:System.Windows.UIElement.TouchLeave>就會引發事件，而不對應<xref:System.Windows.UIElement.TouchUp>事件。</xref:System.Windows.UIElement.TouchUp> </xref:System.Windows.UIElement.TouchLeave>"
  syntax:
    content: protected void Deactivate ();
    parameters: []
  overload: System.Windows.Input.TouchDevice.Deactivate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "裝置不會啟動。"
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.Deactivated
  id: Deactivated
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: Deactivated
  nameWithType: TouchDevice.Deactivated
  fullName: System.Windows.Input.TouchDevice.Deactivated
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "發生時<xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref>移除從傳訊系統的輸入。"
  syntax:
    content: public event EventHandler Deactivated;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.DirectlyOver
  id: DirectlyOver
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: DirectlyOver
  nameWithType: TouchDevice.DirectlyOver
  fullName: System.Windows.Input.TouchDevice.DirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得觸控連絡點位於其正上方的項目。"
  syntax:
    content: public System.Windows.IInputElement DirectlyOver { get; }
    return:
      type: System.Windows.IInputElement
      description: "觸控連絡點位於其正上方的項目。"
  overload: System.Windows.Input.TouchDevice.DirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.GetIntermediateTouchPoints(System.Windows.IInputElement)
  id: GetIntermediateTouchPoints(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: GetIntermediateTouchPoints(IInputElement)
  nameWithType: TouchDevice.GetIntermediateTouchPoints(IInputElement)
  fullName: System.Windows.Input.TouchDevice.GetIntermediateTouchPoints(IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "當在衍生類別中覆寫時，會傳回所有都觸控點之間的最新和先前所收集的都觸控事件。"
  syntax:
    content: public abstract System.Windows.Input.TouchPointCollection GetIntermediateTouchPoints (System.Windows.IInputElement relativeTo);
    parameters:
    - id: relativeTo
      type: System.Windows.IInputElement
      description: "定義之座標空間的項目。"
    return:
      type: System.Windows.Input.TouchPointCollection
      description: "之間的最新和先前所收集的所有都觸控點都觸控事件。"
  overload: System.Windows.Input.TouchDevice.GetIntermediateTouchPoints*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.GetTouchPoint(System.Windows.IInputElement)
  id: GetTouchPoint(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: GetTouchPoint(IInputElement)
  nameWithType: TouchDevice.GetTouchPoint(IInputElement)
  fullName: System.Windows.Input.TouchDevice.GetTouchPoint(IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "傳回目前的觸控式裝置相對於指定項目的位置。"
  syntax:
    content: public abstract System.Windows.Input.TouchPoint GetTouchPoint (System.Windows.IInputElement relativeTo);
    parameters:
    - id: relativeTo
      type: System.Windows.IInputElement
      description: "定義之座標空間的項目。"
    return:
      type: System.Windows.Input.TouchPoint
      description: "相對於指定項目的觸控裝置的目前位置。"
  overload: System.Windows.Input.TouchDevice.GetTouchPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.Id
  id: Id
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: Id
  nameWithType: TouchDevice.Id
  fullName: System.Windows.Input.TouchDevice.Id
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得唯一識別項<xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref>，如作業系統所提供。"
  remarks: "A<xref:System.Windows.Input.TouchDevice>代表單一的觸控式螢幕上。</xref:System.Windows.Input.TouchDevice> 如果有多個工作，可用於 [識別碼] 屬性加以區分。"
  example:
  - "The following example handles the <xref:System.Windows.UIElement.TouchMove> events that occur on a <xref:System.Windows.Controls.Canvas>. When a touch moves on the <xref:System.Windows.Controls.Canvas>, the Id is checked. If the move came from the first touch, its location is recorded. If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.  \n  \n This example is part of a larger example available in the <xref:System.Windows.Input.TouchDevice> class overview.  \n  \n [!code-vb[TouchEventsSample#120](~/add/codesnippet/visualbasic/wpftoucheventssample/mainwindow.xaml.vb#120)]\n [!code-cs[TouchEventsSample#120](~/add/codesnippet/csharp/wpftoucheventssample/mainwindow.xaml.cs#120)]"
  syntax:
    content: public int Id { get; }
    return:
      type: System.Int32
      description: "唯一識別碼<xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref>。"
  overload: System.Windows.Input.TouchDevice.Id*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.IsActive
  id: IsActive
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: IsActive
  nameWithType: TouchDevice.IsActive
  fullName: System.Windows.Input.TouchDevice.IsActive
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得值，指出裝置是否為作用中。"
  syntax:
    content: public bool IsActive { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果裝置為作用中。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.TouchDevice.IsActive*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.OnCapture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)
  id: OnCapture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: OnCapture(IInputElement,CaptureMode)
  nameWithType: TouchDevice.OnCapture(IInputElement,CaptureMode)
  fullName: System.Windows.Input.TouchDevice.OnCapture(IInputElement,CaptureMode)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "觸控擷取的項目時呼叫。"
  remarks: "OnCapture 方法具有預設的實作。 您可以執行擷取觸控輸入時，不需要任何動作的衍生類別中覆寫。"
  syntax:
    content: protected virtual void OnCapture (System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode);
    parameters:
    - id: element
      type: System.Windows.IInputElement
      description: "擷取觸控輸入項目。"
    - id: captureMode
      type: System.Windows.Input.CaptureMode
      description: "擷取原則。"
  overload: System.Windows.Input.TouchDevice.OnCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.OnManipulationEnded(System.Boolean)
  id: OnManipulationEnded(System.Boolean)
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: OnManipulationEnded(Boolean)
  nameWithType: TouchDevice.OnManipulationEnded(Boolean)
  fullName: System.Windows.Input.TouchDevice.OnManipulationEnded(Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "操作已結束時呼叫。"
  syntax:
    content: protected virtual void OnManipulationEnded (bool cancel);
    parameters:
    - id: cancel
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要取消動作。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.TouchDevice.OnManipulationEnded*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.OnManipulationStarted
  id: OnManipulationStarted
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: OnManipulationStarted()
  nameWithType: TouchDevice.OnManipulationStarted()
  fullName: System.Windows.Input.TouchDevice.OnManipulationStarted()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "操作開始時呼叫。"
  remarks: "OnManipulationStarted 方法具有預設的實作。 您可以在執行時啟動觸控操作時，不需要任何動作的衍生類別中覆寫。"
  syntax:
    content: protected virtual void OnManipulationStarted ();
    parameters: []
  overload: System.Windows.Input.TouchDevice.OnManipulationStarted*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.ReportDown
  id: ReportDown
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: ReportDown()
  nameWithType: TouchDevice.ReportDown()
  fullName: System.Windows.Input.TouchDevice.ReportDown()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "觸控已按下的項目上的報表。"
  remarks: "類別繼承自<xref:System.Windows.Input.TouchDevice>應該呼叫這個方法，引發<xref:System.Windows.UIElement.TouchDown>事件。</xref:System.Windows.UIElement.TouchDown> </xref:System.Windows.Input.TouchDevice> A<xref:System.Windows.UIElement.TouchEnter>之前引發事件<xref:System.Windows.UIElement.TouchDown>事件。</xref:System.Windows.UIElement.TouchDown> </xref:System.Windows.UIElement.TouchEnter>"
  syntax:
    content: protected bool ReportDown ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Windows.UIElement.TouchDown&quot;></xref>事件的處理，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.TouchDevice.ReportDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.ReportMove
  id: ReportMove
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: ReportMove()
  nameWithType: TouchDevice.ReportMove()
  fullName: System.Windows.Input.TouchDevice.ReportMove()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "觸控式移動項目之間的報表。"
  remarks: "類別繼承自<xref:System.Windows.Input.TouchDevice>應該呼叫這個方法，引發<xref:System.Windows.UIElement.TouchMove>事件。</xref:System.Windows.UIElement.TouchMove> </xref:System.Windows.Input.TouchDevice>"
  syntax:
    content: protected bool ReportMove ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Windows.UIElement.TouchMove&quot;></xref>事件的處理，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.TouchDevice.ReportMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.ReportUp
  id: ReportUp
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: ReportUp()
  nameWithType: TouchDevice.ReportUp()
  fullName: System.Windows.Input.TouchDevice.ReportUp()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "報告觸控已消除從項目。"
  remarks: "類別繼承自<xref:System.Windows.Input.TouchDevice>應該呼叫這個方法，引發<xref:System.Windows.UIElement.TouchUp>事件。</xref:System.Windows.UIElement.TouchUp> </xref:System.Windows.Input.TouchDevice> A<xref:System.Windows.UIElement.TouchLeave>之後引發事件<xref:System.Windows.UIElement.TouchUp>事件。</xref:System.Windows.UIElement.TouchUp> </xref:System.Windows.UIElement.TouchLeave>"
  syntax:
    content: protected bool ReportUp ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Windows.UIElement.TouchUp&quot;></xref>事件的處理，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.TouchDevice.ReportUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.SetActiveSource(System.Windows.PresentationSource)
  id: SetActiveSource(System.Windows.PresentationSource)
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: SetActiveSource(PresentationSource)
  nameWithType: TouchDevice.SetActiveSource(PresentationSource)
  fullName: System.Windows.Input.TouchDevice.SetActiveSource(PresentationSource)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "設定<xref href=&quot;System.Windows.PresentationSource&quot;></xref>報告此裝置的輸入。"
  syntax:
    content: protected void SetActiveSource (System.Windows.PresentationSource activeSource);
    parameters:
    - id: activeSource
      type: System.Windows.PresentationSource
      description: "來源會報告此裝置的輸入。"
  overload: System.Windows.Input.TouchDevice.SetActiveSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.Synchronize
  id: Synchronize
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: Synchronize()
  nameWithType: TouchDevice.Synchronize()
  fullName: System.Windows.Input.TouchDevice.Synchronize()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "強制<xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref>來同步處理使用者介面與基礎觸控點。"
  remarks: "使用基礎觸控位置同步處理使用者介面可能會導致<xref:System.Windows.UIElement.TouchMove>引發的事件。</xref:System.Windows.UIElement.TouchMove>"
  syntax:
    content: public void Synchronize ();
    parameters: []
  overload: System.Windows.Input.TouchDevice.Synchronize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#GetPosition(System.Windows.IInputElement)
  id: System#Windows#Input#IManipulator#GetPosition(System.Windows.IInputElement)
  isEii: true
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: System.Windows.Input.IManipulator.GetPosition(IInputElement)
  nameWithType: TouchDevice.System.Windows.Input.IManipulator.GetPosition(IInputElement)
  fullName: System.Windows.Input.TouchDevice.System.Windows.Input.IManipulator.GetPosition(IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "傳回的位置<xref href=&quot;System.Windows.Input.IManipulator&quot;></xref>物件。"
  remarks: "這個成員是明確介面成員實作。 它可用時，才<xref:System.Windows.Input.TouchDevice>執行個體轉換成<xref:System.Windows.Input.IManipulator>介面。</xref:System.Windows.Input.IManipulator> </xref:System.Windows.Input.TouchDevice>"
  syntax:
    content: System.Windows.Point IManipulator.GetPosition (System.Windows.IInputElement relativeTo);
    parameters:
    - id: relativeTo
      type: System.Windows.IInputElement
      description: "要作為參考框架計算的位置的項目<xref href=&quot;System.Windows.Input.IManipulator&quot;> </xref>。"
    return:
      type: System.Windows.Point
      description: "位置<xref href=&quot;System.Windows.Input.IManipulator&quot;></xref>物件。"
  overload: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#GetPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#Id
  id: System#Windows#Input#IManipulator#Id
  isEii: true
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: System.Windows.Input.IManipulator.Id
  nameWithType: TouchDevice.System.Windows.Input.IManipulator.Id
  fullName: System.Windows.Input.TouchDevice.System.Windows.Input.IManipulator.Id
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得唯一識別項<xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref>作業系統所提供。"
  remarks: "這個成員是明確介面成員實作。 它可用時，才<xref:System.Windows.Input.TouchDevice>執行個體轉換成<xref:System.Windows.Input.IManipulator>介面。</xref:System.Windows.Input.IManipulator> </xref:System.Windows.Input.TouchDevice>"
  syntax:
    content: int System.Windows.Input.IManipulator.Id { get; }
    return:
      type: System.Int32
      description: "唯一識別碼<xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref>。"
  overload: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#Id*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#ManipulationEnded(System.Boolean)
  id: System#Windows#Input#IManipulator#ManipulationEnded(System.Boolean)
  isEii: true
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: System.Windows.Input.IManipulator.ManipulationEnded(Boolean)
  nameWithType: TouchDevice.System.Windows.Input.IManipulator.ManipulationEnded(Boolean)
  fullName: System.Windows.Input.TouchDevice.System.Windows.Input.IManipulator.ManipulationEnded(Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "發生於已結束操作。"
  remarks: "這個成員是明確介面成員實作。 它可用時，才<xref:System.Windows.Input.TouchDevice>執行個體轉換成<xref:System.Windows.Input.IManipulator>介面。</xref:System.Windows.Input.IManipulator> </xref:System.Windows.Input.TouchDevice>"
  syntax:
    content: void IManipulator.ManipulationEnded (bool cancel);
    parameters:
    - id: cancel
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要取消動作。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#ManipulationEnded*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.Target
  id: Target
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: Target
  nameWithType: TouchDevice.Target
  fullName: System.Windows.Input.TouchDevice.Target
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得收到輸入的項目<xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref>。"
  syntax:
    content: public override sealed System.Windows.IInputElement Target { get; }
    return:
      type: System.Windows.IInputElement
      description: "接收來自輸入的項目<xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref>。"
  overload: System.Windows.Input.TouchDevice.Target*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchDevice.Updated
  id: Updated
  parent: System.Windows.Input.TouchDevice
  langs:
  - csharp
  name: Updated
  nameWithType: TouchDevice.Updated
  fullName: System.Windows.Input.TouchDevice.Updated
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "觸控訊息傳送時，就會發生。"
  syntax:
    content: public event EventHandler Updated;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.InputDevice
  isExternal: false
  name: System.Windows.Input.InputDevice
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Input.TouchDevice.#ctor(System.Int32)
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: TouchDevice(Int32)
  nameWithType: TouchDevice.TouchDevice(Int32)
  fullName: System.Windows.Input.TouchDevice.TouchDevice(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Input.TouchDevice.Activate
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Activate()
  nameWithType: TouchDevice.Activate()
  fullName: System.Windows.Input.TouchDevice.Activate()
- uid: System.Windows.Input.TouchDevice.Activated
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Activated
  nameWithType: TouchDevice.Activated
  fullName: System.Windows.Input.TouchDevice.Activated
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Input.TouchDevice.ActiveSource
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: ActiveSource
  nameWithType: TouchDevice.ActiveSource
  fullName: System.Windows.Input.TouchDevice.ActiveSource
- uid: System.Windows.PresentationSource
  parent: System.Windows
  isExternal: false
  name: PresentationSource
  nameWithType: PresentationSource
  fullName: System.Windows.PresentationSource
- uid: System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Capture(IInputElement)
  nameWithType: TouchDevice.Capture(IInputElement)
  fullName: System.Windows.Input.TouchDevice.Capture(IInputElement)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Capture(IInputElement,CaptureMode)
  nameWithType: TouchDevice.Capture(IInputElement,CaptureMode)
  fullName: System.Windows.Input.TouchDevice.Capture(IInputElement,CaptureMode)
- uid: System.Windows.Input.CaptureMode
  parent: System.Windows.Input
  isExternal: false
  name: CaptureMode
  nameWithType: CaptureMode
  fullName: System.Windows.Input.CaptureMode
- uid: System.Windows.Input.TouchDevice.Captured
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Captured
  nameWithType: TouchDevice.Captured
  fullName: System.Windows.Input.TouchDevice.Captured
- uid: System.Windows.Input.TouchDevice.CaptureMode
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: CaptureMode
  nameWithType: TouchDevice.CaptureMode
  fullName: System.Windows.Input.TouchDevice.CaptureMode
- uid: System.Windows.Input.TouchDevice.Deactivate
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Deactivate()
  nameWithType: TouchDevice.Deactivate()
  fullName: System.Windows.Input.TouchDevice.Deactivate()
- uid: System.Windows.Input.TouchDevice.Deactivated
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Deactivated
  nameWithType: TouchDevice.Deactivated
  fullName: System.Windows.Input.TouchDevice.Deactivated
- uid: System.Windows.Input.TouchDevice.DirectlyOver
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: DirectlyOver
  nameWithType: TouchDevice.DirectlyOver
  fullName: System.Windows.Input.TouchDevice.DirectlyOver
- uid: System.Windows.Input.TouchDevice.GetIntermediateTouchPoints(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: GetIntermediateTouchPoints(IInputElement)
  nameWithType: TouchDevice.GetIntermediateTouchPoints(IInputElement)
  fullName: System.Windows.Input.TouchDevice.GetIntermediateTouchPoints(IInputElement)
- uid: System.Windows.Input.TouchPointCollection
  parent: System.Windows.Input
  isExternal: false
  name: TouchPointCollection
  nameWithType: TouchPointCollection
  fullName: System.Windows.Input.TouchPointCollection
- uid: System.Windows.Input.TouchDevice.GetTouchPoint(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: GetTouchPoint(IInputElement)
  nameWithType: TouchDevice.GetTouchPoint(IInputElement)
  fullName: System.Windows.Input.TouchDevice.GetTouchPoint(IInputElement)
- uid: System.Windows.Input.TouchPoint
  parent: System.Windows.Input
  isExternal: false
  name: TouchPoint
  nameWithType: TouchPoint
  fullName: System.Windows.Input.TouchPoint
- uid: System.Windows.Input.TouchDevice.Id
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Id
  nameWithType: TouchDevice.Id
  fullName: System.Windows.Input.TouchDevice.Id
- uid: System.Windows.Input.TouchDevice.IsActive
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: IsActive
  nameWithType: TouchDevice.IsActive
  fullName: System.Windows.Input.TouchDevice.IsActive
- uid: System.Windows.Input.TouchDevice.OnCapture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: OnCapture(IInputElement,CaptureMode)
  nameWithType: TouchDevice.OnCapture(IInputElement,CaptureMode)
  fullName: System.Windows.Input.TouchDevice.OnCapture(IInputElement,CaptureMode)
- uid: System.Windows.Input.TouchDevice.OnManipulationEnded(System.Boolean)
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: OnManipulationEnded(Boolean)
  nameWithType: TouchDevice.OnManipulationEnded(Boolean)
  fullName: System.Windows.Input.TouchDevice.OnManipulationEnded(Boolean)
- uid: System.Windows.Input.TouchDevice.OnManipulationStarted
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: OnManipulationStarted()
  nameWithType: TouchDevice.OnManipulationStarted()
  fullName: System.Windows.Input.TouchDevice.OnManipulationStarted()
- uid: System.Windows.Input.TouchDevice.ReportDown
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: ReportDown()
  nameWithType: TouchDevice.ReportDown()
  fullName: System.Windows.Input.TouchDevice.ReportDown()
- uid: System.Windows.Input.TouchDevice.ReportMove
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: ReportMove()
  nameWithType: TouchDevice.ReportMove()
  fullName: System.Windows.Input.TouchDevice.ReportMove()
- uid: System.Windows.Input.TouchDevice.ReportUp
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: ReportUp()
  nameWithType: TouchDevice.ReportUp()
  fullName: System.Windows.Input.TouchDevice.ReportUp()
- uid: System.Windows.Input.TouchDevice.SetActiveSource(System.Windows.PresentationSource)
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: SetActiveSource(PresentationSource)
  nameWithType: TouchDevice.SetActiveSource(PresentationSource)
  fullName: System.Windows.Input.TouchDevice.SetActiveSource(PresentationSource)
- uid: System.Windows.Input.TouchDevice.Synchronize
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Synchronize()
  nameWithType: TouchDevice.Synchronize()
  fullName: System.Windows.Input.TouchDevice.Synchronize()
- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#GetPosition(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: System.Windows.Input.IManipulator.GetPosition(IInputElement)
  nameWithType: TouchDevice.System.Windows.Input.IManipulator.GetPosition(IInputElement)
  fullName: System.Windows.Input.TouchDevice.System.Windows.Input.IManipulator.GetPosition(IInputElement)
- uid: System.Windows.Point
  parent: System.Windows
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Windows.Point
- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#Id
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: System.Windows.Input.IManipulator.Id
  nameWithType: TouchDevice.System.Windows.Input.IManipulator.Id
  fullName: System.Windows.Input.TouchDevice.System.Windows.Input.IManipulator.Id
- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#ManipulationEnded(System.Boolean)
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: System.Windows.Input.IManipulator.ManipulationEnded(Boolean)
  nameWithType: TouchDevice.System.Windows.Input.IManipulator.ManipulationEnded(Boolean)
  fullName: System.Windows.Input.TouchDevice.System.Windows.Input.IManipulator.ManipulationEnded(Boolean)
- uid: System.Windows.Input.TouchDevice.Target
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Target
  nameWithType: TouchDevice.Target
  fullName: System.Windows.Input.TouchDevice.Target
- uid: System.Windows.Input.TouchDevice.Updated
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Updated
  nameWithType: TouchDevice.Updated
  fullName: System.Windows.Input.TouchDevice.Updated
- uid: System.Windows.Input.TouchDevice.#ctor*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: TouchDevice
  nameWithType: TouchDevice.TouchDevice
- uid: System.Windows.Input.TouchDevice.Activate*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Activate
  nameWithType: TouchDevice.Activate
- uid: System.Windows.Input.TouchDevice.ActiveSource*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: ActiveSource
  nameWithType: TouchDevice.ActiveSource
- uid: System.Windows.Input.TouchDevice.Capture*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Capture
  nameWithType: TouchDevice.Capture
- uid: System.Windows.Input.TouchDevice.Captured*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Captured
  nameWithType: TouchDevice.Captured
- uid: System.Windows.Input.TouchDevice.CaptureMode*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: CaptureMode
  nameWithType: TouchDevice.CaptureMode
- uid: System.Windows.Input.TouchDevice.Deactivate*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Deactivate
  nameWithType: TouchDevice.Deactivate
- uid: System.Windows.Input.TouchDevice.DirectlyOver*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: DirectlyOver
  nameWithType: TouchDevice.DirectlyOver
- uid: System.Windows.Input.TouchDevice.GetIntermediateTouchPoints*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: GetIntermediateTouchPoints
  nameWithType: TouchDevice.GetIntermediateTouchPoints
- uid: System.Windows.Input.TouchDevice.GetTouchPoint*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: GetTouchPoint
  nameWithType: TouchDevice.GetTouchPoint
- uid: System.Windows.Input.TouchDevice.Id*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Id
  nameWithType: TouchDevice.Id
- uid: System.Windows.Input.TouchDevice.IsActive*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: IsActive
  nameWithType: TouchDevice.IsActive
- uid: System.Windows.Input.TouchDevice.OnCapture*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: OnCapture
  nameWithType: TouchDevice.OnCapture
- uid: System.Windows.Input.TouchDevice.OnManipulationEnded*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: OnManipulationEnded
  nameWithType: TouchDevice.OnManipulationEnded
- uid: System.Windows.Input.TouchDevice.OnManipulationStarted*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: OnManipulationStarted
  nameWithType: TouchDevice.OnManipulationStarted
- uid: System.Windows.Input.TouchDevice.ReportDown*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: ReportDown
  nameWithType: TouchDevice.ReportDown
- uid: System.Windows.Input.TouchDevice.ReportMove*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: ReportMove
  nameWithType: TouchDevice.ReportMove
- uid: System.Windows.Input.TouchDevice.ReportUp*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: ReportUp
  nameWithType: TouchDevice.ReportUp
- uid: System.Windows.Input.TouchDevice.SetActiveSource*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: SetActiveSource
  nameWithType: TouchDevice.SetActiveSource
- uid: System.Windows.Input.TouchDevice.Synchronize*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Synchronize
  nameWithType: TouchDevice.Synchronize
- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#GetPosition*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: System.Windows.Input.IManipulator.GetPosition
  nameWithType: TouchDevice.System.Windows.Input.IManipulator.GetPosition
- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#Id*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: System.Windows.Input.IManipulator.Id
  nameWithType: TouchDevice.System.Windows.Input.IManipulator.Id
- uid: System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#ManipulationEnded*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: System.Windows.Input.IManipulator.ManipulationEnded
  nameWithType: TouchDevice.System.Windows.Input.IManipulator.ManipulationEnded
- uid: System.Windows.Input.TouchDevice.Target*
  parent: System.Windows.Input.TouchDevice
  isExternal: false
  name: Target
  nameWithType: TouchDevice.Target
