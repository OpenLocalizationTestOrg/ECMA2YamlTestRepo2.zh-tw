### YamlMime:ManagedReference
items:
- uid: System.Runtime.Hosting.ApplicationActivator
  id: ApplicationActivator
  children:
  - System.Runtime.Hosting.ApplicationActivator.#ctor
  - System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)
  - System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])
  - System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)
  langs:
  - csharp
  name: ApplicationActivator
  nameWithType: ApplicationActivator
  fullName: System.Runtime.Hosting.ApplicationActivator
  type: Class
  summary: "啟動時的資訊清單為主的組件提供基底類別。"
  remarks: "沒有單一的指定執行個體中每個 ApplicationActivator 類別的<xref:System.AppDomain>呼叫路由傳送至所有啟用。</xref:System.AppDomain> <xref:System.AppDomainManager>目前<xref:System.AppDomain>可以針對此用途提供它自己的自訂 ApplicationActivator。</xref:System.AppDomain> </xref:System.AppDomainManager> 如果未提供自訂 ApplicationActivator 的預設執行個體 ApplicationActivator 會建立。       下列步驟說明的預設行為<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A>方法實作︰ 1。</xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A>  如果會檢查<xref:System.ActivationContext>增益集是已啟用的相符項目<xref:System.ActivationContext>目前的網域; 如果不是，繼續進行步驟 2。</xref:System.ActivationContext> </xref:System.ActivationContext> 否則，執行的組件，並傳回結果中的物件控制代碼包裝。      2.  啟動新的<xref:System.AppDomain>。</xref:System.AppDomain>增益集 若要初始化新<xref:System.AppDomain><xref:System.Runtime.Hosting.ActivationArguments>的增益集。</xref:System.Runtime.Hosting.ActivationArguments>使用</xref:System.AppDomain>的是採取下列步驟          1.  建立新<xref:System.AppDomainSetup>的<xref:System.Runtime.Hosting.ActivationArguments>增益集的啟動內容物件，其包含</xref:System.Runtime.Hosting.ActivationArguments>的物件使用</xref:System.AppDomainSetup>的          2.  呼叫<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>方法來建立新的網域使用<xref:System.AppDomainSetup>物件。</xref:System.AppDomainSetup> </xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>          3.  <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>方法會呼叫<xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=fullName>方法，以取得<xref:System.Security.Policy.ApplicationTrust>物件的增益集。</xref:System.Security.Policy.ApplicationTrust> </xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=fullName> </xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> 如果<xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A>屬性會傳回`true`，執行增益集。</xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A> 如果沒有，<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>會擲回<xref:System.Security.Policy.PolicyException>指出無法取得執行權限。</xref:System.Security.Policy.PolicyException> </xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>          4.  如果增益集就會信任執行，則新<xref:System.AppDomain>會建立並設定<xref:System.ActivationContext>增益集，以及增益集載入並執行。</xref:System.ActivationContext> </xref:System.AppDomain>          5.  會傳回結果的增益集啟動，包裝在物件控制代碼。       自訂啟動項可以量身訂作增益集以一組特定的情況下的啟動。 例如，自訂 activator 無法尋找現有<xref:System.AppDomain>啟動這個增益集而不是每次建立新的網域。</xref:System.AppDomain>       下列步驟描述的行為就會啟動增益集的現有自訂 ApplicationActivator <xref:System.AppDomain>: 1。</xref:System.AppDomain>  自訂啟動程式會尋找具有相同的網域<xref:System.ActivationContext>做為 正在啟用增益集。</xref:System.ActivationContext>      2.  如果<xref:System.ActivationContext>從未發生過之前在此程序，自訂啟動項新建立<xref:System.AppDomain>這個<xref:System.ActivationContext>呼叫的<xref:System.AppDomain.CreateDomain%2A>直接的方法或委派此活動可<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>在基底類別。</xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> </xref:System.AppDomain.CreateDomain%2A> </xref:System.ActivationContext> </xref:System.AppDomain> </xref:System.ActivationContext>      3.  如果沒有現有的網域具有相同<xref:System.ActivationContext>，然後啟動項可以委派<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A>方法呼叫的目標網域 ApplicationActivator。</xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A> </xref:System.ActivationContext> 請注意，這會是位於目標<xref:System.AppDomain>.</xref:System.AppDomain> ApplicationActivator 跨網域呼叫"
  example:
  - "The following code example shows how to obtain an ApplicationActivator object from the current <xref:System.AppDomain.DomainManager%2A> for a manifest-based application.  \n  \n [!code-vb[System.Runtime.Hosting.ApplicationActivator#1](~/add/codesnippet/visualbasic/t-system.runtime.hosting_0_1.vb)]\n [!code-cs[System.Runtime.Hosting.ApplicationActivator#1](~/add/codesnippet/csharp/t-system.runtime.hosting_0_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class ApplicationActivator
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.#ctor
  id: '#ctor'
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: ApplicationActivator()
  nameWithType: ApplicationActivator.ApplicationActivator()
  fullName: System.Runtime.Hosting.ApplicationActivator.ApplicationActivator()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "初始化的新執行個體<xref href=&quot;System.Runtime.Hosting.ApplicationActivator&quot;></xref>類別。"
  syntax:
    content: public ApplicationActivator ();
    parameters: []
  overload: System.Runtime.Hosting.ApplicationActivator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)
  id: CreateInstance(System.ActivationContext)
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: CreateInstance(ActivationContext)
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "建立要啟用應用程式的執行個體使用指定的啟動內容。"
  remarks: "這個方法僅供資訊清單型啟用的應用程式。"
  syntax:
    content: public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext);
    parameters:
    - id: activationContext
      type: System.ActivationContext
      description: "<xref href=&quot;System.ActivationContext&quot;> </xref>可識別要啟動應用程式。"
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: "<xref href=&quot;System.Runtime.Remoting.ObjectHandle&quot;> </xref>也就是應用程式執行的傳回值包裝函式。 傳回值必須解除包裝以存取實際物件。"
  overload: System.Runtime.Hosting.ApplicationActivator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>activationContext</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])
  id: CreateInstance(System.ActivationContext,System.String[])
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: CreateInstance(ActivationContext,String[])
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext,String[])
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "建立要啟用應用程式的執行個體使用指定的啟動內容和自訂啟動資料。"
  remarks: "這個方法僅供資訊清單型啟用的應用程式。 啟用資料包含的資訊，例如 URL 查詢字串部分。"
  syntax:
    content: public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext, string[] activationCustomData);
    parameters:
    - id: activationContext
      type: System.ActivationContext
      description: "<xref href=&quot;System.ActivationContext&quot;> </xref>可識別要啟動應用程式。"
    - id: activationCustomData
      type: System.String[]
      description: "自訂啟動資料。"
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: "<xref href=&quot;System.Runtime.Remoting.ObjectHandle&quot;> </xref>也就是應用程式執行的傳回值包裝函式。 傳回值必須解除包裝以存取實際物件。"
  overload: System.Runtime.Hosting.ApplicationActivator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>activationContext</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)
  id: CreateInstanceHelper(System.AppDomainSetup)
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: CreateInstanceHelper(AppDomainSetup)
  nameWithType: ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "建立使用指定的應用程式的執行個體<xref href=&quot;System.AppDomainSetup&quot;></xref>物件。"
  remarks: "這個方法僅供資訊清單型啟用的應用程式。"
  syntax:
    content: protected static System.Runtime.Remoting.ObjectHandle CreateInstanceHelper (AppDomainSetup adSetup);
    parameters:
    - id: adSetup
      type: System.AppDomainSetup
      description: "<xref href=&quot;System.AppDomainSetup&quot;> </xref>物件，其<xref:System.AppDomainSetup.ActivationArguments*>屬性會識別要啟動應用程式。</xref:System.AppDomainSetup.ActivationArguments*>"
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: "<xref href=&quot;System.Runtime.Remoting.ObjectHandle&quot;> </xref>也就是應用程式執行的傳回值包裝函式。 傳回值必須解除包裝以存取實際物件。"
  overload: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.AppDomainSetup.ActivationArguments*> property of <code>adSetup </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.</xref:System.AppDomainSetup.ActivationArguments*>"
  - type: System.Security.Policy.PolicyException
    commentId: T:System.Security.Policy.PolicyException
    description: "應用程式執行個體無法執行，因為目前的應用程式定義域上的原則設定不會提供執行此應用程式的權限。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Policy.PolicyException
  parent: System.Security.Policy
  isExternal: false
  name: PolicyException
  nameWithType: PolicyException
  fullName: System.Security.Policy.PolicyException
- uid: System.Runtime.Hosting.ApplicationActivator.#ctor
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: ApplicationActivator()
  nameWithType: ApplicationActivator.ApplicationActivator()
  fullName: System.Runtime.Hosting.ApplicationActivator.ApplicationActivator()
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstance(ActivationContext)
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext)
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.ActivationContext
  parent: System
  isExternal: false
  name: ActivationContext
  nameWithType: ActivationContext
  fullName: System.ActivationContext
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstance(ActivationContext,String[])
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext,String[])
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstanceHelper(AppDomainSetup)
  nameWithType: ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
- uid: System.AppDomainSetup
  parent: System
  isExternal: false
  name: AppDomainSetup
  nameWithType: AppDomainSetup
  fullName: System.AppDomainSetup
- uid: System.Runtime.Hosting.ApplicationActivator.#ctor*
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: ApplicationActivator
  nameWithType: ApplicationActivator.ApplicationActivator
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance*
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstance
  nameWithType: ApplicationActivator.CreateInstance
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper*
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstanceHelper
  nameWithType: ApplicationActivator.CreateInstanceHelper
