### YamlMime:ManagedReference
items:
- uid: System.TimeZone
  id: TimeZone
  children:
  - System.TimeZone.#ctor
  - System.TimeZone.CurrentTimeZone
  - System.TimeZone.DaylightName
  - System.TimeZone.GetDaylightChanges(System.Int32)
  - System.TimeZone.GetUtcOffset(System.DateTime)
  - System.TimeZone.IsDaylightSavingTime(System.DateTime)
  - System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)
  - System.TimeZone.StandardName
  - System.TimeZone.ToLocalTime(System.DateTime)
  - System.TimeZone.ToUniversalTime(System.DateTime)
  langs:
  - csharp
  name: TimeZone
  nameWithType: TimeZone
  fullName: System.TimeZone
  type: Class
  summary: "表示時區。"
  remarks: "時區是地理區域中使用相同的標準時間。      > [!IMPORTANT] > 的話，請使用<xref:System.TimeZoneInfo>類別，而不是時區類別。</xref:System.TimeZoneInfo>       您可以使用時區類別，擷取目前的時區的相關資訊，以及轉換時間從本地時間為國際標準時間 (UTC)，反之亦然。 不過，您無法使用的時區類別來代表本機區域以外的時區或處理日期和時間轉換從一個時區到另一個。 基於此目的，使用<xref:System.TimeZoneInfo>類別。</xref:System.TimeZoneInfo> 您可以使用這個類別來擷取在本機系統上，建立自訂時區，並將時間從一個時區轉換成另一個定義任何時區資訊。       時區類別支援只有單一日光節約時間調整規則的當地時區。 如此一來，時區類別可以精確地報告日光節約時間資訊，或只針對最新的調整規則的作用中期間 UTC 與本地時間之間進行轉換。 相反地，<xref:System.TimeZoneInfo>類別支援多個調整規則，這可讓使用歷程記錄的時區資料。</xref:System.TimeZoneInfo>"
  example:
  - "The following example references and displays selected `TimeZone` class elements.  \n  \n [!code-cpp[System.TimeZone.Class#1](~/add/codesnippet/cpp/t-system.timezone_1.cpp)]\n [!code-vb[System.TimeZone.Class#1](~/add/codesnippet/visualbasic/t-system.timezone_1.vb)]\n [!code-cs[System.TimeZone.Class#1](~/add/codesnippet/csharp/t-system.timezone_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class TimeZone
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.TimeZone.#ctor
  id: '#ctor'
  parent: System.TimeZone
  langs:
  - csharp
  name: TimeZone()
  nameWithType: TimeZone.TimeZone()
  fullName: System.TimeZone.TimeZone()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新執行個體<xref href=&quot;System.TimeZone&quot;></xref>類別。"
  syntax:
    content: protected TimeZone ();
    parameters: []
  overload: System.TimeZone.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.CurrentTimeZone
  id: CurrentTimeZone
  parent: System.TimeZone
  langs:
  - csharp
  name: CurrentTimeZone
  nameWithType: TimeZone.CurrentTimeZone
  fullName: System.TimeZone.CurrentTimeZone
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得目前電腦的時區。"
  remarks: "CurrentTimeZone 屬性會對應至<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>屬性。</xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName> 您應該盡可能使用<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>屬性。</xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>"
  example:
  - "The following example references the `CurrentTimeZone` property and displays the names for standard time and daylight saving time for the local time zone.  \n  \n [!code-cpp[System.TimeZone.Class#1](~/add/codesnippet/cpp/p-system.timezone.curren_1.cpp)]\n [!code-vb[System.TimeZone.Class#1](~/add/codesnippet/visualbasic/p-system.timezone.curren_1.vb)]\n [!code-cs[System.TimeZone.Class#1](~/add/codesnippet/csharp/p-system.timezone.curren_1.cs)]"
  syntax:
    content: public static TimeZone CurrentTimeZone { get; }
    return:
      type: System.TimeZone
      description: "A <xref href=&quot;System.TimeZone&quot;> </xref>物件，代表目前的當地時區。"
  overload: System.TimeZone.CurrentTimeZone*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.DaylightName
  id: DaylightName
  parent: System.TimeZone
  langs:
  - csharp
  name: DaylightName
  nameWithType: TimeZone.DaylightName
  fullName: System.TimeZone.DaylightName
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得的日光節約時間的區域名稱。"
  remarks: "如果日光節約時間不是以時區為準，空字串 (&quot;&quot;) 會傳回。       DaylightName 屬性會對應至<xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=fullName>屬性。</xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=fullName> 您應該盡可能使用<xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=fullName>屬性。</xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=fullName>"
  example:
  - "The following example references and displays the `DaylightName` property of the current time zone.  \n  \n [!code-cpp[System.TimeZone.Class#1](~/add/codesnippet/cpp/p-system.timezone.daylig_1.cpp)]\n [!code-vb[System.TimeZone.Class#1](~/add/codesnippet/visualbasic/p-system.timezone.daylig_1.vb)]\n [!code-cs[System.TimeZone.Class#1](~/add/codesnippet/csharp/p-system.timezone.daylig_1.cs)]"
  syntax:
    content: public abstract string DaylightName { get; }
    return:
      type: System.String
      description: "日光節約時間的區域名稱。"
  overload: System.TimeZone.DaylightName*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.GetDaylightChanges(System.Int32)
  id: GetDaylightChanges(System.Int32)
  parent: System.TimeZone
  langs:
  - csharp
  name: GetDaylightChanges(Int32)
  nameWithType: TimeZone.GetDaylightChanges(Int32)
  fullName: System.TimeZone.GetDaylightChanges(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "傳回特定年度的日光節約時間週期。"
  remarks: "支援只有一個每年的日光節約時間週期。       如果未在目前的時區使用日光節約時間，傳回值是<xref:System.Globalization.DaylightTime>物件，其中的值<xref:System.Globalization.DaylightTime.Start%2A>和<xref:System.Globalization.DaylightTime.End%2A>是<xref:System.DateTime.MinValue?displayProperty=fullName>，和值<xref:System.Globalization.DaylightTime.Delta%2A?displayProperty=fullName>是<xref:System.TimeSpan>初始化為 0 刻度。</xref:System.TimeSpan> </xref:System.Globalization.DaylightTime.Delta%2A?displayProperty=fullName> </xref:System.DateTime.MinValue?displayProperty=fullName> </xref:System.Globalization.DaylightTime.End%2A> </xref:System.Globalization.DaylightTime.Start%2A> </xref:System.Globalization.DaylightTime>"
  syntax:
    content: public abstract System.Globalization.DaylightTime GetDaylightChanges (int year);
    parameters:
    - id: year
      type: System.Int32
      description: "若要套用日光節約時間週期的年份。"
    return:
      type: System.Globalization.DaylightTime
      description: "A <xref href=&quot;System.Globalization.DaylightTime&quot;> </xref>物件，其中包含在日光節約時間的開始和結束日期<code> year </code>。"
  overload: System.TimeZone.GetDaylightChanges*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>小於 1 或大於 9999。"
  platform:
  - net462
- uid: System.TimeZone.GetUtcOffset(System.DateTime)
  id: GetUtcOffset(System.DateTime)
  parent: System.TimeZone
  langs:
  - csharp
  name: GetUtcOffset(DateTime)
  nameWithType: TimeZone.GetUtcOffset(DateTime)
  fullName: System.TimeZone.GetUtcOffset(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "傳回指定的本地時間的國際標準時間 (UTC) 位移。"
  remarks: "這個方法會傳回位移或差異，之間`time`參數與國際標準時間 (UTC)。 也就是︰ `time` = UTC + 方法會將解譯的時區位移`time`根據其<xref:System.DateTime.Kind%2A>屬性。</xref:System.DateTime.Kind%2A> 如果值<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind?displayProperty=fullName>或<xref:System.DateTimeKind?displayProperty=fullName>，方法會傳回的當地時區位移。</xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTime.Kind%2A> 如果<xref:System.DateTime.Kind%2A>屬性是<xref:System.DateTimeKind?displayProperty=fullName>，此方法會傳回等於<xref:System.TimeSpan.Zero?displayProperty=fullName>.</xref:System.TimeSpan.Zero?displayProperty=fullName>位移</xref:System.DateTimeKind?displayProperty=fullName></xref:System.DateTime.Kind%2A>的值       GetUtcOffset 當地時區會遵守日光節約時間，如果套用至目前的調整規則`time`時決定的當地時區位移。 也就是說，會反映 GetUtcOffset 所傳回的位移是否`time`落在時區標準時間或日光節約時間。      > [!NOTE] > GetUtcOffset 方法能夠辨識只有目前日光節約時間調整規則的當地時區。 如此一來，這樣會保證正確傳回本地時間的 UTC 位移，只有最新的調整規則生效的期間。 它可能會傳回不正確的結果，如果`time`是歷程記錄的日期和時間值，受限於先前的調整規則。       GetUtcOffset 方法對應於<xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=fullName>方法。</xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=fullName> 您應該盡可能使用<xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=fullName>方法。</xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=fullName>       因為所代表的日期和時間值`time`此值與 UTC 相差的並未緊密，本機或未指定的日期和時間值可以傳回不同的位移的值時，在不同電腦上執行，或在不同時區的同一部電腦上執行時。 如果不想要這項行為，請使用<xref:System.DateTimeOffset>改為值。</xref:System.DateTimeOffset> <xref:System.DateTimeOffset>資料型別緊密結合的日期和時間值，其位移與 utc 之間。</xref:System.DateTimeOffset>"
  syntax:
    content: public abstract TimeSpan GetUtcOffset (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "日期和時間值。"
    return:
      type: System.TimeSpan
      description: "國際標準時間 (UTC) 時差<code> time </code>。"
  overload: System.TimeZone.GetUtcOffset*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.IsDaylightSavingTime(System.DateTime)
  id: IsDaylightSavingTime(System.DateTime)
  parent: System.TimeZone
  langs:
  - csharp
  name: IsDaylightSavingTime(DateTime)
  nameWithType: TimeZone.IsDaylightSavingTime(DateTime)
  fullName: System.TimeZone.IsDaylightSavingTime(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "傳回值，指出指定的日期和時間是否在日光節約時間期間內。"
  remarks: "要套用日光節約時間週期的年份衍生自`time`參數。       因為<xref:System.TimeZone>類別支援單一日光節約時間調整規則，不論調整規則是否作用中在該日期的任何日期 IsDaylightSavingTime 方法適用於目前的調整規則。</xref:System.TimeZone> 假設作業系統本身具有精確歷史日光節約時間資料，更精確的結果是可使用<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>方法。</xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName> 您應該盡可能使用<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>方法。</xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>"
  syntax:
    content: public virtual bool IsDaylightSavingTime (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "日期和時間。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> time </code>處於日光節約時間週期，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.TimeZone.IsDaylightSavingTime*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)
  id: IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)
  parent: System.TimeZone
  langs:
  - csharp
  name: IsDaylightSavingTime(DateTime,DaylightTime)
  nameWithType: TimeZone.IsDaylightSavingTime(DateTime,DaylightTime)
  fullName: System.TimeZone.IsDaylightSavingTime(DateTime,DaylightTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "傳回值，指出指定的日期和時間是否在指定的日光節約時間期間內。"
  remarks: "<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>方法提供 IsDaylightSavingTime 方法的這個多載相同的功能。</xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName> 您應該盡可能使用<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>方法。</xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>"
  syntax:
    content: public static bool IsDaylightSavingTime (DateTime time, System.Globalization.DaylightTime daylightTimes);
    parameters:
    - id: time
      type: System.DateTime
      description: "日期和時間。"
    - id: daylightTimes
      type: System.Globalization.DaylightTime
      description: "即將加入。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>time</code> is in <code>daylightTimes</code>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.TimeZone.IsDaylightSavingTime*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>daylightTimes</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.TimeZone.StandardName
  id: StandardName
  parent: System.TimeZone
  langs:
  - csharp
  name: StandardName
  nameWithType: TimeZone.StandardName
  fullName: System.TimeZone.StandardName
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得標準時區名稱。"
  remarks: "StandardName 屬性會對應至<xref:System.TimeZoneInfo.StandardName%2A?displayProperty=fullName>屬性。</xref:System.TimeZoneInfo.StandardName%2A?displayProperty=fullName> 您應該盡可能使用<xref:System.TimeZoneInfo.StandardName%2A?displayProperty=fullName>屬性。</xref:System.TimeZoneInfo.StandardName%2A?displayProperty=fullName>"
  example:
  - "The following example references and displays the `StandardName` property of the current time zone.  \n  \n [!code-cpp[System.TimeZone.Class#1](~/add/codesnippet/cpp/p-system.timezone.standa_1.cpp)]\n [!code-vb[System.TimeZone.Class#1](~/add/codesnippet/visualbasic/p-system.timezone.standa_1.vb)]\n [!code-cs[System.TimeZone.Class#1](~/add/codesnippet/csharp/p-system.timezone.standa_1.cs)]"
  syntax:
    content: public abstract string StandardName { get; }
    return:
      type: System.String
      description: "標準時間區域名稱。"
  overload: System.TimeZone.StandardName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "嘗試將此屬性設定為<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.TimeZone.ToLocalTime(System.DateTime)
  id: ToLocalTime(System.DateTime)
  parent: System.TimeZone
  langs:
  - csharp
  name: ToLocalTime(DateTime)
  nameWithType: TimeZone.ToLocalTime(DateTime)
  fullName: System.TimeZone.ToLocalTime(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "傳回指定的日期和時間值對應的本機時間。"
  remarks: "下表顯示之間的關聯性`time`參數和<xref:System.DateTime>這個方法所傳回的值。</xref:System.DateTime>      |`time`參數 |行為 |傳回值 |  |----------------------|--------------|------------------|  |國際標準時間 (UTC) 時間 (<xref:System.DateTimeKind?displayProperty=fullName>)。 |將與 utc 之間的時間轉換為本地時間。 |<xref:System.DateTime>物件，其值為本地時間對應至`time`。 |  |本地時間 (<xref:System.DateTimeKind?displayProperty=fullName>)。 |不需要轉換。 |所表示的相同<xref:System.DateTime>值`time`參數。 |  |未指定的時間 (<xref:System.DateTimeKind?displayProperty=fullName>)。 |假設時間為 UTC，並將它轉換從 UTC 到本地時間。 |<xref:System.DateTime>物件，其值為本地時間對應至`time`。 |      由當地時區會遵守日光節約時間，如果套用至目前的調整規則`time`執行轉換時。</xref:System.DateTime> </xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTime> </xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTime> </xref:System.DateTimeKind?displayProperty=fullName>      > [!NOTE] > 由方法能夠辨識只有目前日光節約時間調整規則的當地時區。 如此一來，這樣會保證正確傳回本地時間對應到特定的 UTC 時間，只有最新的調整規則生效的期間。 它可能會傳回不正確的結果，如果`time`是歷程記錄的日期和時間值，受限於先前的調整規則。       由方法對應於<xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=fullName>方法及其`destinationTimeZone`參數設定為<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>.</xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName> </xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=fullName> 您應該盡可能使用<xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=fullName>方法。</xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=fullName>"
  syntax:
    content: public virtual DateTime ToLocalTime (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "國際標準時間 (UTC) 時間。"
    return:
      type: System.DateTime
      description: "A<xref:System.DateTime>物件，其值為本地時間對應至<code> time </code>。</xref:System.DateTime>"
  overload: System.TimeZone.ToLocalTime*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.ToUniversalTime(System.DateTime)
  id: ToUniversalTime(System.DateTime)
  parent: System.TimeZone
  langs:
  - csharp
  name: ToUniversalTime(DateTime)
  nameWithType: TimeZone.ToUniversalTime(DateTime)
  fullName: System.TimeZone.ToUniversalTime(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "傳回指定的時間對應的國際標準時間 (UTC)。"
  remarks: "ToUniversalTime 當地時區會遵守日光節約時間，如果套用至目前的調整規則`time`參數執行轉換時。      > [!NOTE] > ToUniversalTime 方法能夠辨識只有目前日光節約時間調整規則的當地時區。 如此一來，這樣會保證正確傳回 Coordinated Universal Time (UTC) 對應到特定的本機時間，只有最新的調整規則生效的期間。 它可能會傳回不正確的結果，如果`time`是歷程記錄的日期和時間值，受限於先前的調整規則。       如果`time`參數是模稜兩可的時間，方法會假設它是標準時間。 （模稜兩可的時間是指可以對應至標準時間或本地時區的日光節約時間。）如果`time`是無效的時間，該方法只會減去本地時間的本地時區的 UTC 位移傳回 UTC。 （不正確的時間是指因為日光節約時間調整規則的應用程式不存在。）     因為`time`解譯根據目前時區目前系統上，這個方法所傳回的時間與日期可以不同的應用程式會執行不同的電腦上或在相同電腦上不同時區。 在其中的日期和時間值必須代表單一的明確的時間點的情況下，使用<xref:System.DateTimeOffset>值代表當地時間。</xref:System.DateTimeOffset>       ToUniversalTime 方法對應於<xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=fullName>方法多載<xref:System.DateTime>參數<xref:System.DateTime.Kind%2A>屬性不等於<xref:System.DateTimeKind?displayProperty=fullName>.</xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTime.Kind%2A> </xref:System.DateTime> </xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=fullName> 您應該盡可能使用<xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=fullName>方法多載。</xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=fullName>"
  syntax:
    content: public virtual DateTime ToUniversalTime (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "日期和時間。"
    return:
      type: System.DateTime
      description: "A<xref:System.DateTime>物件，其值為 Coordinated Universal Time (UTC) 對應至<code> time </code>。</xref:System.DateTime>"
  overload: System.TimeZone.ToUniversalTime*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.TimeZone.#ctor
  parent: System.TimeZone
  isExternal: false
  name: TimeZone()
  nameWithType: TimeZone.TimeZone()
  fullName: System.TimeZone.TimeZone()
- uid: System.TimeZone.CurrentTimeZone
  parent: System.TimeZone
  isExternal: false
  name: CurrentTimeZone
  nameWithType: TimeZone.CurrentTimeZone
  fullName: System.TimeZone.CurrentTimeZone
- uid: System.TimeZone
  parent: System
  isExternal: false
  name: TimeZone
  nameWithType: TimeZone
  fullName: System.TimeZone
- uid: System.TimeZone.DaylightName
  parent: System.TimeZone
  isExternal: false
  name: DaylightName
  nameWithType: TimeZone.DaylightName
  fullName: System.TimeZone.DaylightName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.TimeZone.GetDaylightChanges(System.Int32)
  parent: System.TimeZone
  isExternal: false
  name: GetDaylightChanges(Int32)
  nameWithType: TimeZone.GetDaylightChanges(Int32)
  fullName: System.TimeZone.GetDaylightChanges(Int32)
- uid: System.Globalization.DaylightTime
  parent: System.Globalization
  isExternal: false
  name: DaylightTime
  nameWithType: DaylightTime
  fullName: System.Globalization.DaylightTime
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.TimeZone.GetUtcOffset(System.DateTime)
  parent: System.TimeZone
  isExternal: false
  name: GetUtcOffset(DateTime)
  nameWithType: TimeZone.GetUtcOffset(DateTime)
  fullName: System.TimeZone.GetUtcOffset(DateTime)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.TimeZone.IsDaylightSavingTime(System.DateTime)
  parent: System.TimeZone
  isExternal: false
  name: IsDaylightSavingTime(DateTime)
  nameWithType: TimeZone.IsDaylightSavingTime(DateTime)
  fullName: System.TimeZone.IsDaylightSavingTime(DateTime)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)
  parent: System.TimeZone
  isExternal: false
  name: IsDaylightSavingTime(DateTime,DaylightTime)
  nameWithType: TimeZone.IsDaylightSavingTime(DateTime,DaylightTime)
  fullName: System.TimeZone.IsDaylightSavingTime(DateTime,DaylightTime)
- uid: System.TimeZone.StandardName
  parent: System.TimeZone
  isExternal: false
  name: StandardName
  nameWithType: TimeZone.StandardName
  fullName: System.TimeZone.StandardName
- uid: System.TimeZone.ToLocalTime(System.DateTime)
  parent: System.TimeZone
  isExternal: false
  name: ToLocalTime(DateTime)
  nameWithType: TimeZone.ToLocalTime(DateTime)
  fullName: System.TimeZone.ToLocalTime(DateTime)
- uid: System.TimeZone.ToUniversalTime(System.DateTime)
  parent: System.TimeZone
  isExternal: false
  name: ToUniversalTime(DateTime)
  nameWithType: TimeZone.ToUniversalTime(DateTime)
  fullName: System.TimeZone.ToUniversalTime(DateTime)
- uid: System.TimeZone.#ctor*
  parent: System.TimeZone
  isExternal: false
  name: TimeZone
  nameWithType: TimeZone.TimeZone
- uid: System.TimeZone.CurrentTimeZone*
  parent: System.TimeZone
  isExternal: false
  name: CurrentTimeZone
  nameWithType: TimeZone.CurrentTimeZone
- uid: System.TimeZone.DaylightName*
  parent: System.TimeZone
  isExternal: false
  name: DaylightName
  nameWithType: TimeZone.DaylightName
- uid: System.TimeZone.GetDaylightChanges*
  parent: System.TimeZone
  isExternal: false
  name: GetDaylightChanges
  nameWithType: TimeZone.GetDaylightChanges
- uid: System.TimeZone.GetUtcOffset*
  parent: System.TimeZone
  isExternal: false
  name: GetUtcOffset
  nameWithType: TimeZone.GetUtcOffset
- uid: System.TimeZone.IsDaylightSavingTime*
  parent: System.TimeZone
  isExternal: false
  name: IsDaylightSavingTime
  nameWithType: TimeZone.IsDaylightSavingTime
- uid: System.TimeZone.StandardName*
  parent: System.TimeZone
  isExternal: false
  name: StandardName
  nameWithType: TimeZone.StandardName
- uid: System.TimeZone.ToLocalTime*
  parent: System.TimeZone
  isExternal: false
  name: ToLocalTime
  nameWithType: TimeZone.ToLocalTime
- uid: System.TimeZone.ToUniversalTime*
  parent: System.TimeZone
  isExternal: false
  name: ToUniversalTime
  nameWithType: TimeZone.ToUniversalTime
