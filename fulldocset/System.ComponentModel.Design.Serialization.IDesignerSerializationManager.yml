### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  id: IDesignerSerializationManager
  children:
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)
  langs:
  - csharp
  name: IDesignerSerializationManager
  nameWithType: IDesignerSerializationManager
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  type: Interface
  summary: "提供介面，可管理設計階段序列化。"
  remarks: "設計工具可以利用 IDesignerSerializationManager，存取有助於管理設計階段序列化程序服務。 例如，實作設計工具的序列化管理員的類別可以使用這個介面建立物件、 查詢型別、 識別物件，並自訂特定型別的序列化。"
  example:
  - "The following example illustrates how to use IDesignerSerializationManager to serialize and deserialize Code DOM statements.  \n  \n [!code-cs[IDesignerSerializationManagerSample#1](~/add/codesnippet/csharp/t-system.componentmodel._71_1.cs)]\n [!code-cpp[IDesignerSerializationManagerSample#1](~/add/codesnippet/cpp/t-system.componentmodel._71_1.cpp)]\n [!code-vb[IDesignerSerializationManagerSample#1](~/add/codesnippet/visualbasic/t-system.componentmodel._71_1.vb)]"
  syntax:
    content: 'public interface IDesignerSerializationManager : IServiceProvider'
  implements:
  - System.IServiceProvider
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  id: AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: AddSerializationProvider(IDesignerSerializationProvider)
  nameWithType: IDesignerSerializationManager.AddSerializationProvider(IDesignerSerializationProvider)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(IDesignerSerializationProvider)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "將指定的序列化提供者加入序列化管理員。"
  remarks: "這個方法會將自訂序列化提供者加入序列化管理員。 序列化提供者可以提供自訂序列化程式的特定物件類型或類型之物件的集合。 在序列化期間，每個自訂序列化提供者會查詢以傳回特定資料類型的序列化程式，如果它會提供一個。 序列化管理員會使用這個方法之前使用特定型別的預設序列化程式提供的自訂序列化程式。"
  syntax:
    content: public void AddSerializationProvider (System.ComponentModel.Design.Serialization.IDesignerSerializationProvider provider);
    parameters:
    - id: provider
      type: System.ComponentModel.Design.Serialization.IDesignerSerializationProvider
      description: "若要加入的序列化提供者。"
  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context
  id: Context
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: Context
  nameWithType: IDesignerSerializationManager.Context
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "取得對於序列化程式之間的通訊很有用的堆疊為基礎、 使用者定義的存放區域。"
  remarks: "這個儲存體區域提供通訊物件內容資訊的序列化程式。 正在序列化的物件的相關內容資訊可儲存及存取透過此<xref:System.ComponentModel.Design.Serialization.ContextStack>.</xref:System.ComponentModel.Design.Serialization.ContextStack>"
  syntax:
    content: public System.ComponentModel.Design.Serialization.ContextStack Context { get; }
    return:
      type: System.ComponentModel.Design.Serialization.ContextStack
      description: "A <xref href=&quot;System.ComponentModel.Design.Serialization.ContextStack&quot;> </xref>儲存資料。"
  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)
  id: CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: CreateInstance(Type,ICollection,String,Boolean)
  nameWithType: IDesignerSerializationManager.CreateInstance(Type,ICollection,String,Boolean)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(Type,ICollection,String,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "建立指定類型的執行個體，並將它加入具名執行個體的集合。"
  remarks: "物件，實作<xref:System.ComponentModel.IComponent>會加入到設計階段容器`addToContainer`參數是`true`。</xref:System.ComponentModel.IComponent>"
  syntax:
    content: public object CreateInstance (Type type, System.Collections.ICollection arguments, string name, bool addToContainer);
    parameters:
    - id: type
      type: System.Type
      description: "要建立的資料類型。"
    - id: arguments
      type: System.Collections.ICollection
      description: "要傳遞給建構函式，此類型引數。"
    - id: name
      type: System.String
      description: "物件的名稱。 這個名稱可以用來存取稍後透過<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance*>.</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance*>物件 如果<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>是傳遞時，物件仍會建立，但無法以名稱存取。"
    - id: addToContainer
      type: System.Boolean
      description: "如果<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>，此物件加入設計容器。 物件必須實作<xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> ，才能發生效用。"
    return:
      type: System.Object
      description: "新建立的物件執行個體。"
  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)
  id: GetInstance(System.String)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: GetInstance(String)
  nameWithType: IDesignerSerializationManager.GetInstance(String)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "取得指定的名稱，建立物件的執行個體或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果該物件不存在。"
  remarks: "要擷取之物件的名稱必須已設定透過<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A>.</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A>先前呼叫"
  syntax:
    content: public object GetInstance (string name);
    parameters:
    - id: name
      type: System.String
      description: "要擷取之物件的名稱。"
    return:
      type: System.Object
      description: "使用指定的名稱、 物件的執行個體或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果找不到沒有該名稱的物件。"
  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)
  id: GetName(System.Object)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: GetName(Object)
  nameWithType: IDesignerSerializationManager.GetName(Object)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "取得指定之物件的名稱或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果物件沒有名稱。"
  syntax:
    content: public string GetName (object value);
    parameters:
    - id: value
      type: System.Object
      description: "要擷取的名稱的物件。"
    return:
      type: System.String
      description: "物件的名稱或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>未命名的物件是否。"
  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)
  id: GetSerializer(System.Type,System.Type)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: GetSerializer(Type,Type)
  nameWithType: IDesignerSerializationManager.GetSerializer(Type,Type)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(Type,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "取得指定的物件類型的要求類型之序列化程式。"
  syntax:
    content: public object GetSerializer (Type objectType, Type serializerType);
    parameters:
    - id: objectType
      type: System.Type
      description: "要取得序列化程式的物件類型。"
    - id: serializerType
      type: System.Type
      description: "要擷取的序列化程式的類型。"
    return:
      type: System.Object
      description: "要求的序列化程式的執行個體或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果可以找到適當的序列化程式。"
  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)
  id: GetType(System.String)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: GetType(String)
  nameWithType: IDesignerSerializationManager.GetType(String)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "取得指定之名稱的類型。"
  syntax:
    content: public Type GetType (string typeName);
    parameters:
    - id: typeName
      type: System.String
      description: "要載入之型別的完整的名稱。"
    return:
      type: System.Type
      description: "類型的執行個體或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果無法載入型別。"
  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties
  id: Properties
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: Properties
  nameWithType: IDesignerSerializationManager.Properties
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "指出可使用可用的序列化程式的自訂屬性。"
  remarks: "這個屬性可以包含空的集合。 序列化程式不應該假設這類屬性的存在。 在衍生的類別或實作<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager>定義一組這裡所公開的屬性。</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager>"
  syntax:
    content: public System.ComponentModel.PropertyDescriptorCollection Properties { get; }
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>包含要序列化之屬性。"
  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  id: RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: RemoveSerializationProvider(IDesignerSerializationProvider)
  nameWithType: IDesignerSerializationManager.RemoveSerializationProvider(IDesignerSerializationProvider)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(IDesignerSerializationProvider)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "將自訂序列化提供者從序列化管理員移除。"
  syntax:
    content: public void RemoveSerializationProvider (System.ComponentModel.Design.Serialization.IDesignerSerializationProvider provider);
    parameters:
    - id: provider
      type: System.ComponentModel.Design.Serialization.IDesignerSerializationProvider
      description: "要移除的提供者。 此物件必須已加入使用<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider*>.</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider*>"
  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)
  id: ReportError(System.Object)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: ReportError(Object)
  nameWithType: IDesignerSerializationManager.ReportError(Object)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "報告序列化中的錯誤。"
  remarks: "如果序列化管理員支援多個錯誤記錄在 ReportError 實作，它可以儲存資訊的 error 物件將來的報表，其中同時顯示發生的錯誤。 如果這個方法會儲存多個錯誤，仍可繼續序列化之後呼叫這個方法。 如果這個方法不支援記錄多個錯誤，則這個方法應該擲回例外狀況，以中止序列化。      > [!NOTE] > 的序列化管理員絕不會擲回例外狀況的序列化期間遇到的錯誤。 它只傳回還原序列化期間的例外狀況。 否則，會變成混淆，因為儲存文件的使用者應該永遠不會失敗。"
  syntax:
    content: public void ReportError (object errorInformation);
    parameters:
    - id: errorInformation
      type: System.Object
      description: "要報告的錯誤。 此資訊的物件可以是任何物件類型。 如果是例外狀況，例外狀況的訊息會擷取並向使用者報告。 如果它是任何其他型別，<xref:System.Object.ToString*>呼叫以向使用者顯示資訊。</xref:System.Object.ToString*>"
  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName
  id: ResolveName
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: ResolveName
  nameWithType: IDesignerSerializationManager.ResolveName
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName
  type: Event
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "發生時<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName*>在序列化管理員的名稱表格中找不到指定的名稱。</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName*>"
  remarks: "此事件會提供視情況下，建立物件的序列化程式的方式，讓序列化程式不需要建立順序物件的相依性。 此事件的委派會在還原序列化後立即清除，或還原序列化已完成。"
  syntax:
    content: public event System.ComponentModel.Design.Serialization.ResolveNameEventHandler ResolveName;
    return:
      type: System.ComponentModel.Design.Serialization.ResolveNameEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete
  id: SerializationComplete
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: SerializationComplete
  nameWithType: IDesignerSerializationManager.SerializationComplete
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete
  type: Event
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "序列化完成時，就會發生。"
  remarks: "序列化或還原序列化完成時，會引發這個事件。       一般來說，序列化程式碼會寫入至發出序列化資料和，通常不需要狀態相關的檢查和處理。 如果有必要整個序列化維持狀態資料，可以設定資料，以及由序列化程式，它可以接聽 SerializationComplete 事件，並清除序列化後的資料存取。 序列化可能會很重要，因為可重複使用的序列化程式在序列化期間，而且留下的狀態資料或開啟的資料流可能不正確之後，請還原正確狀態。       例如，如果序列化程式需要寫入到另一個檔案，例如資源檔，很效率不佳，設計序列化程式關閉時完成的檔案。 序列化物件圖形，通常需要數個序列化程式。 資源檔會開啟和關閉的次數。 相反地，資源檔可以由接聽 SerializationComplete 事件的物件關閉序列化的結尾。"
  syntax:
    content: public event EventHandler SerializationComplete;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)
  id: SetName(System.Object,System.String)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  langs:
  - csharp
  name: SetName(Object,String)
  nameWithType: IDesignerSerializationManager.SetName(Object,String)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel.Design.Serialization
  summary: "設定指定的現有物件的名稱。"
  remarks: "這個方法時，就必須建立並命名物件的執行個體，而不使用<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A>.</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A> 如果您嘗試重新命名現有的物件，或如果您嘗試將提供給新的物件已被使用的名稱，則會擲回例外狀況。"
  syntax:
    content: public void SetName (object instance, string name);
    parameters:
    - id: instance
      type: System.Object
      description: "物件執行個體名稱。"
    - id: name
      type: System.String
      description: "提供給執行個體的名稱。"
  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: AddSerializationProvider(IDesignerSerializationProvider)
  nameWithType: IDesignerSerializationManager.AddSerializationProvider(IDesignerSerializationProvider)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(IDesignerSerializationProvider)
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationProvider
  parent: System.ComponentModel.Design.Serialization
  isExternal: false
  name: IDesignerSerializationProvider
  nameWithType: IDesignerSerializationProvider
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationProvider
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: Context
  nameWithType: IDesignerSerializationManager.Context
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context
- uid: System.ComponentModel.Design.Serialization.ContextStack
  parent: System.ComponentModel.Design.Serialization
  isExternal: false
  name: ContextStack
  nameWithType: ContextStack
  fullName: System.ComponentModel.Design.Serialization.ContextStack
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: CreateInstance(Type,ICollection,String,Boolean)
  nameWithType: IDesignerSerializationManager.CreateInstance(Type,ICollection,String,Boolean)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(Type,ICollection,String,Boolean)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: GetInstance(String)
  nameWithType: IDesignerSerializationManager.GetInstance(String)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(String)
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: GetName(Object)
  nameWithType: IDesignerSerializationManager.GetName(Object)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(Object)
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: GetSerializer(Type,Type)
  nameWithType: IDesignerSerializationManager.GetSerializer(Type,Type)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(Type,Type)
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: GetType(String)
  nameWithType: IDesignerSerializationManager.GetType(String)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(String)
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: Properties
  nameWithType: IDesignerSerializationManager.Properties
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  nameWithType: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: RemoveSerializationProvider(IDesignerSerializationProvider)
  nameWithType: IDesignerSerializationManager.RemoveSerializationProvider(IDesignerSerializationProvider)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(IDesignerSerializationProvider)
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: ReportError(Object)
  nameWithType: IDesignerSerializationManager.ReportError(Object)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(Object)
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: ResolveName
  nameWithType: IDesignerSerializationManager.ResolveName
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName
- uid: System.ComponentModel.Design.Serialization.ResolveNameEventHandler
  parent: System.ComponentModel.Design.Serialization
  isExternal: false
  name: ResolveNameEventHandler
  nameWithType: ResolveNameEventHandler
  fullName: System.ComponentModel.Design.Serialization.ResolveNameEventHandler
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: SerializationComplete
  nameWithType: IDesignerSerializationManager.SerializationComplete
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: SetName(Object,String)
  nameWithType: IDesignerSerializationManager.SetName(Object,String)
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(Object,String)
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider*
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: AddSerializationProvider
  nameWithType: IDesignerSerializationManager.AddSerializationProvider
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context*
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: Context
  nameWithType: IDesignerSerializationManager.Context
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance*
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: CreateInstance
  nameWithType: IDesignerSerializationManager.CreateInstance
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance*
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: GetInstance
  nameWithType: IDesignerSerializationManager.GetInstance
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName*
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: GetName
  nameWithType: IDesignerSerializationManager.GetName
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer*
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: GetSerializer
  nameWithType: IDesignerSerializationManager.GetSerializer
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType*
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: GetType
  nameWithType: IDesignerSerializationManager.GetType
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties*
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: Properties
  nameWithType: IDesignerSerializationManager.Properties
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider*
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: RemoveSerializationProvider
  nameWithType: IDesignerSerializationManager.RemoveSerializationProvider
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError*
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: ReportError
  nameWithType: IDesignerSerializationManager.ReportError
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName*
  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  isExternal: false
  name: SetName
  nameWithType: IDesignerSerializationManager.SetName
