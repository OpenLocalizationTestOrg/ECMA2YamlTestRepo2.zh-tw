### YamlMime:ManagedReference
items:
- uid: System.Transactions.TransactionScope
  id: TransactionScope
  children:
  - System.Transactions.TransactionScope.#ctor
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.Complete
  - System.Transactions.TransactionScope.Dispose
  langs:
  - csharp
  name: TransactionScope
  nameWithType: TransactionScope
  fullName: System.Transactions.TransactionScope
  type: Class
  summary: "讓交易式的程式碼區塊。 這個類別無法被繼承。"
  remarks: "<xref:System.Transactions>基礎結構提供的明確程式設計模型根據<xref:System.Transactions.Transaction>類別，以及使用 TransactionScope 類別，在其中交易自動管理基礎結構的隱含程式撰寫模型。</xref:System.Transactions.Transaction> </xref:System.Transactions>      > [!IMPORTANT] > 建議您建立使用 TransactionScope 類別，隱含交易，以便為您自動管理的環境交易內容。 您也應該使用 TransactionScope 和<xref:System.Transactions.DependentTransaction>跨多個函式呼叫或多個執行緒呼叫需要使用的相同交易的應用程式的類別。</xref:System.Transactions.DependentTransaction> 如需有關此模型的詳細資訊，請參閱[實作隱含交易使用交易範圍](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)主題。 如需撰寫交易應用程式的詳細資訊，請參閱[撰寫交易應用程式](http://msdn.microsoft.com/en-us/4a7cc4d1-0891-4605-941f-a933b9ce5bc8)。       在具現化的 TransactionScope`new`陳述式中，交易管理員決定要參與交易。 一旦決定後，範圍永遠會參與該交易。 此決策根據兩個因素︰ 環境交易是否存在，而`TransactionScopeOption`建構函式中的參數。  環境交易是您的程式碼中執行的交易。 您可以取得環境交易的參考，藉由呼叫靜態<xref:System.Transactions.Transaction.Current%2A>屬性的<xref:System.Transactions.Transaction>類別。</xref:System.Transactions.Transaction> </xref:System.Transactions.Transaction.Current%2A> 如需有關如何使用這個參數的詳細資訊，請參閱 < 交易流程管理 > 一節[實作隱含交易使用交易範圍](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)主題。       如果沒有發生例外狀況在異動範圍內 (亦即之間的 TransactionScope 初始化物件和呼叫其<xref:System.Transactions.TransactionScope.Dispose%2A>方法)，則範圍所參與的交易就可以繼續。</xref:System.Transactions.TransactionScope.Dispose%2A> 如果在異動範圍內，未發生例外狀況，它所參與的交易將回復。       當您的應用程式完成所有工作要在交易中執行，您應該呼叫<xref:System.Transactions.TransactionScope.Complete%2A>方法一次，以通知該交易管理員是可接受要認可的交易。</xref:System.Transactions.TransactionScope.Complete%2A> 無法呼叫這個方法會中止交易。       呼叫<xref:System.Transactions.TransactionScope.Dispose%2A>方法標示的交易範圍結尾。</xref:System.Transactions.TransactionScope.Dispose%2A> 呼叫這個方法後發生的例外狀況不會影響交易。       如果您修改的值<xref:System.Transactions.Transaction.Current%2A>範圍中，內部例外狀況時擲回<xref:System.Transactions.TransactionScope.Dispose%2A>稱為。</xref:System.Transactions.TransactionScope.Dispose%2A> </xref:System.Transactions.Transaction.Current%2A> 不過，在結束範圍時，會還原先前的值。 此外，如果您呼叫<xref:System.Transactions.TransactionScope.Dispose%2A>上<xref:System.Transactions.Transaction.Current%2A>的交易範圍內，建立交易，交易中止的範圍結尾。</xref:System.Transactions.Transaction.Current%2A> </xref:System.Transactions.TransactionScope.Dispose%2A>"
  example:
  - "The following example demonstrates how to use the TransactionScope class to define a block of code to participate in a transaction.  \n  \n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/t-system.transactions.tr_0_1.vb)]\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/t-system.transactions.tr_0_1.cs)]"
  syntax:
    content: 'public sealed class TransactionScope : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor
  id: '#ctor'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope()
  nameWithType: TransactionScope.TransactionScope()
  fullName: System.Transactions.TransactionScope.TransactionScope()
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "初始化的新執行個體<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>類別。"
  remarks: "這個建構函式會建立新的交易範圍與交易範圍選項等於<xref:System.Transactions.TransactionScopeOption>.</xref:System.Transactions.TransactionScopeOption> 這表示交易需要新的範圍，而且如果已經存在，會使用環境交易。 否則，它會建立新的交易，再進入範圍內。"
  syntax:
    content: public TransactionScope ();
    parameters: []
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)
  id: '#ctor(System.Transactions.Transaction)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction)
  nameWithType: TransactionScope.TransactionScope(Transaction)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "初始化的新執行個體<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>類別，並為環境交易，設定指定的交易，以便在範圍內執行的交易工作會使用此交易。"
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "要設定為環境交易，以便在範圍內執行的交易工作會使用此交易的交易。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[在.NET Framework 4.5.1 及更新版本中支援]      初始化的新執行個體<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>類別指定的非同步流程選項。"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "執行個體<xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;></xref>列舉，可描述是否與交易範圍相關聯的環境交易將會是跨執行緒接續使用工作或非同步/等候.NET 非同步程式設計模式時。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)
  id: '#ctor(System.Transactions.TransactionScopeOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "初始化的新執行個體<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>與指定之需求的類別。"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "執行個體<xref href=&quot;System.Transactions.TransactionScopeOption&quot;></xref>列舉，描述與此交易範圍相關聯的交易需求。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)
  id: '#ctor(System.Transactions.Transaction,System.TimeSpan)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "初始化的新執行個體<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>類別指定的逾時值，以指定的交易設定為環境交易，讓交易式範圍內完成的工作會使用此交易。"
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "要設定為環境交易，以便在範圍內執行的交易工作會使用此交易的交易。"
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>之後，交易範圍逾時和中止交易。</xref:System.TimeSpan>"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[在.NET Framework 4.5.1 及更新版本中支援]      初始化的新執行個體<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>類別，並為環境交易，設定指定的交易，以便在範圍內執行的交易工作會使用此交易。"
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "要設定為環境交易，以便在範圍內執行的交易工作會使用此交易的交易。"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "執行個體<xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;></xref>列舉，可描述是否與交易範圍相關聯的環境交易將會是跨執行緒接續使用工作或非同步/等候.NET 非同步程式設計模式時。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "初始化的新執行個體<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>類別具有指定的逾時值和需求。"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, TimeSpan scopeTimeout);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "執行個體<xref href=&quot;System.Transactions.TransactionScopeOption&quot;></xref>列舉，描述與此交易範圍相關聯的交易需求。"
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>之後，交易範圍逾時和中止交易。</xref:System.TimeSpan>"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionOptions)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "初始化的新執行個體<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>與指定之需求的類別。"
  remarks: "當您使用`transactionOptions`參數來指定<xref:System.Transactions.IsolationLevel>，且範圍會建立稍後的交易，新的交易與指定之隔離等級相關聯。</xref:System.Transactions.IsolationLevel> 如果傳入的隔離層級以及交易，交易必須具有相同的隔離等級，或擲回例外狀況。"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "執行個體<xref href=&quot;System.Transactions.TransactionScopeOption&quot;></xref>列舉，描述與此交易範圍相關聯的交易需求。"
    - id: transactionOptions
      type: System.Transactions.TransactionOptions
      description: "A <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref>結構描述在建立新的交易時所要使用的交易選項。 如果使用現有的交易，則此參數中的逾時值會套用至交易範圍。 如果該時間到期之前已處置此範圍，則會中止交易。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[在.NET Framework 4.5.1 及更新版本中支援]      初始化的新執行個體<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>具有指定之需求和非同步的資料流程選項類別。"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "執行個體<xref href=&quot;System.Transactions.TransactionScopeOption&quot;></xref>列舉，描述與此交易範圍相關聯的交易需求。"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "執行個體<xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;></xref>列舉，可描述是否與交易範圍相關聯的環境交易將會是跨執行緒接續使用工作或非同步/等候.NET 非同步程式設計模式時。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)
  id: '#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "初始化的新執行個體<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>類別具有指定的逾時值和 COM + 互通性需求，將指定的交易設定為環境交易，讓交易式範圍內完成的工作會使用此交易。"
  remarks: '**請注意**這個方法會使用<xref:System.Security.Permissions.SecurityAction>以防止它呼叫來自不受信任的程式碼; 不過，立即呼叫者，才能擁有`FullTrust`權限集合。</xref:System.Security.Permissions.SecurityAction>'
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout, System.Transactions.EnterpriseServicesInteropOption interopOption);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "要設定為環境交易，以便在範圍內執行的交易工作會使用此交易的交易。"
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>之後，交易範圍逾時和中止交易。</xref:System.TimeSpan>"
    - id: interopOption
      type: System.Transactions.EnterpriseServicesInteropOption
      description: "執行個體<xref href=&quot;System.Transactions.EnterpriseServicesInteropOption&quot;></xref>描述相關聯的交易與 COM + 交易之間的互動方式的列舉。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[在.NET Framework 4.5.1 及更新版本中支援]      初始化的新執行個體<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>類別指定的逾時值，以指定的交易設定為環境交易，讓交易式範圍內完成的工作會使用此交易。"
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "要設定為環境交易，以便在範圍內執行的交易工作會使用此交易的交易。"
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>之後，交易範圍逾時和中止交易。</xref:System.TimeSpan>"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "執行個體<xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;></xref>列舉，可描述是否與交易範圍相關聯的環境交易將會是跨執行緒接續使用工作或非同步/等候.NET 非同步程式設計模式時。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[在.NET Framework 4.5.1 及更新版本中支援]      初始化的新執行個體<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>具有指定的逾時值、 需求和非同步的資料流程選項類別。"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, TimeSpan scopeTimeout, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "執行個體<xref href=&quot;System.Transactions.TransactionScopeOption&quot;></xref>列舉，描述與此交易範圍相關聯的交易需求。"
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>之後，交易範圍逾時和中止交易。</xref:System.TimeSpan>"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "執行個體<xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;></xref>列舉，可描述是否與交易範圍相關聯的環境交易將會是跨執行緒接續使用工作或非同步/等候.NET 非同步程式設計模式時。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "初始化的新執行個體<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>類別指定的範圍和 COM + 互通性需求和交易選項。"
  remarks: "當您使用`transactionOptions`參數來指定<xref:System.Transactions.IsolationLevel>，且範圍會建立稍後的交易，新的交易與指定之隔離等級相關聯。</xref:System.Transactions.IsolationLevel> 如果傳入的隔離層級以及交易，交易必須具有相同的隔離等級，或擲回例外狀況。       **請注意**這個方法會使用<xref:System.Security.Permissions.SecurityAction>以防止它呼叫來自不受信任的程式碼; 不過，立即呼叫者，才能擁有`FullTrust`權限集合。</xref:System.Security.Permissions.SecurityAction>"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions, System.Transactions.EnterpriseServicesInteropOption interopOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "執行個體<xref href=&quot;System.Transactions.TransactionScopeOption&quot;></xref>列舉，描述與此交易範圍相關聯的交易需求。"
    - id: transactionOptions
      type: System.Transactions.TransactionOptions
      description: "A <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref>結構描述在建立新的交易時所要使用的交易選項。 如果使用現有的交易，則此參數中的逾時值會套用至交易範圍。 如果該時間到期之前已處置此範圍，則會中止交易。"
    - id: interopOption
      type: System.Transactions.EnterpriseServicesInteropOption
      description: "執行個體<xref href=&quot;System.Transactions.EnterpriseServicesInteropOption&quot;></xref>描述相關聯的交易與 COM + 交易之間的互動方式的列舉。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[在.NET Framework 4.5.1 及更新版本中支援]      初始化的新執行個體<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>具有指定之需求和非同步的資料流程選項類別。"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "執行個體<xref href=&quot;System.Transactions.TransactionScopeOption&quot;></xref>列舉，描述與此交易範圍相關聯的交易需求。"
    - id: transactionOptions
      type: System.Transactions.TransactionOptions
      description: "A <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref>結構描述在建立新的交易時所要使用的交易選項。 如果使用現有的交易，則此參數中的逾時值會套用至交易範圍。 如果該時間到期之前已處置此範圍，則會中止交易。"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "執行個體<xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;></xref>列舉，可描述是否與交易範圍相關聯的環境交易將會是跨執行緒接續使用工作或非同步/等候.NET 非同步程式設計模式時。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.Complete
  id: Complete
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: Complete()
  nameWithType: TransactionScope.Complete()
  fullName: System.Transactions.TransactionScope.Complete()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "表示範圍內的所有作業都順利都完成。"
  remarks: "當您滿意，範圍內的所有作業都已成功都完成，您應該呼叫這個方法一次通知該交易管理員之間的所有資源的狀態一致，且可以認可交易。 它是很好的作法將與最後一個陳述式中呼叫`using`區塊。       如需有關如何使用這個方法的詳細資訊，請參閱[實作隱含交易使用交易範圍](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)主題。       無法呼叫這個方法會中止交易，因為交易管理員會將此解譯系統失敗，或在交易範圍中擲回的例外狀況。 不過，您也必須注意，呼叫這個方法時，不會保證交易的認可。 它是狀態的只是狀態的一種告知交易管理員的您。 呼叫這個方法之後, 您就無法再存取環境交易透過<xref:System.Transactions.Transaction.Current%2A>屬性，並嘗試這樣所擲回例外狀況。</xref:System.Transactions.Transaction.Current%2A>       認可資源管理員之間的實際工作會發生在`End Using`陳述式如果<xref:System.Transactions.TransactionScope>建立交易物件。</xref:System.Transactions.TransactionScope> 如果它不會建立交易，便會發生認可每當<xref:System.Transactions.CommittableTransaction.Commit%2A>的擁有者會呼叫<xref:System.Transactions.CommittableTransaction>物件。</xref:System.Transactions.CommittableTransaction> </xref:System.Transactions.CommittableTransaction.Commit%2A> 交易管理員在該點呼叫資源管理員，通知他們認可或回復，根據是否在呼叫這個方法<xref:System.Transactions.TransactionScope>物件。</xref:System.Transactions.TransactionScope>"
  example:
  - "The following example demonstrates how to use the <xref:System.Transactions.TransactionScope> class to define a block of code to participate in a transaction.  \n  \n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/m-system.transactions.tr_1_1.vb)]\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/m-system.transactions.tr_1_1.cs)]"
  syntax:
    content: public void Complete ();
    parameters: []
  overload: System.Transactions.TransactionScope.Complete*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "這個方法已經一次呼叫。"
  platform:
  - net462
- uid: System.Transactions.TransactionScope.Dispose
  id: Dispose
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: Dispose()
  nameWithType: TransactionScope.Dispose()
  fullName: System.Transactions.TransactionScope.Dispose()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "結束交易範圍。"
  remarks: "呼叫這個方法會將標示交易範圍的結束。 如果<xref:System.Transactions.TransactionScope>建立交易物件和<xref:System.Transactions.TransactionScope.Complete%2A>範圍上呼叫<xref:System.Transactions.TransactionScope>物件嘗試認可交易，在呼叫這個方法。</xref:System.Transactions.TransactionScope> </xref:System.Transactions.TransactionScope.Complete%2A> </xref:System.Transactions.TransactionScope>       使用 C#`using`建構可確保即使發生例外狀況，呼叫這個方法。 呼叫這個方法後發生的例外狀況不會影響交易。 這個方法也會還原環境交易其原始狀態。 A<xref:System.Transactions.TransactionAbortedException>無法實際認可交易時就會擲回。</xref:System.Transactions.TransactionAbortedException>       這個方法是同步，並封鎖，直到認可或中止交易。 因為這個緣故，您必須非常小心，在 Windows Form (WinForm) 應用程式中，使用這個方法時，或會發生死結。 如果您呼叫這個方法內一個 WinForm 控制項事件 （例如按一下按鈕），並使用同步<xref:System.Windows.Forms.Control.Invoke%2A>方法來指示要執行一些 UI 工作 （例如變更色彩） 處理交易，將會發生死結的控制項。</xref:System.Windows.Forms.Control.Invoke%2A> 這是因為<xref:System.Windows.Forms.Control.Invoke%2A>方法是同步，背景工作執行緒，直到 UI 執行緒完成其工作。</xref:System.Windows.Forms.Control.Invoke%2A> 不過，在我們的案例中，UI 執行緒正在也等候背景工作執行緒来認可的交易。 結果是它們都無法繼續進行，而範圍會無限期地等候認可完成。 您應該使用<xref:System.Windows.Forms.Control.BeginInvoke%2A>而<xref:System.Windows.Forms.Control.Invoke%2A>只要做得到，因為它是非同步，因此較不容易發生死結。</xref:System.Windows.Forms.Control.Invoke%2A> </xref:System.Windows.Forms.Control.BeginInvoke%2A>       如需有關如何使用這個方法的詳細資訊，請參閱[實作隱含交易使用交易範圍](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)主題。"
  example:
  - "The following example demonstrates how to use the <xref:System.Transactions.TransactionScope> class to define a block of code to participate in a transaction.  \n  \n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/m-system.transactions.tr_0_1.vb)]\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/m-system.transactions.tr_0_1.cs)]"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Transactions.TransactionScope.Dispose*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Transactions.TransactionScope.#ctor
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope()
  nameWithType: TransactionScope.TransactionScope()
  fullName: System.Transactions.TransactionScope.TransactionScope()
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction)
  nameWithType: TransactionScope.TransactionScope(Transaction)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScopeAsyncFlowOption
  parent: System.Transactions
  isExternal: false
  name: TransactionScopeAsyncFlowOption
  nameWithType: TransactionScopeAsyncFlowOption
  fullName: System.Transactions.TransactionScopeAsyncFlowOption
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption)
- uid: System.Transactions.TransactionScopeOption
  parent: System.Transactions
  isExternal: false
  name: TransactionScopeOption
  nameWithType: TransactionScopeOption
  fullName: System.Transactions.TransactionScopeOption
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionOptions)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
- uid: System.Transactions.TransactionOptions
  parent: System.Transactions
  isExternal: false
  name: TransactionOptions
  nameWithType: TransactionOptions
  fullName: System.Transactions.TransactionOptions
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
- uid: System.Transactions.EnterpriseServicesInteropOption
  parent: System.Transactions
  isExternal: false
  name: EnterpriseServicesInteropOption
  nameWithType: EnterpriseServicesInteropOption
  fullName: System.Transactions.EnterpriseServicesInteropOption
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.Complete
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Complete()
  nameWithType: TransactionScope.Complete()
  fullName: System.Transactions.TransactionScope.Complete()
- uid: System.Transactions.TransactionScope.Dispose
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Dispose()
  nameWithType: TransactionScope.Dispose()
  fullName: System.Transactions.TransactionScope.Dispose()
- uid: System.Transactions.TransactionScope.#ctor*
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope
  nameWithType: TransactionScope.TransactionScope
- uid: System.Transactions.TransactionScope.Complete*
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Complete
  nameWithType: TransactionScope.Complete
- uid: System.Transactions.TransactionScope.Dispose*
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Dispose
  nameWithType: TransactionScope.Dispose
