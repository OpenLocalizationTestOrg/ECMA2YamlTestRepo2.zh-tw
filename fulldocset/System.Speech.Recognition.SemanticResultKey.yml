### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.SemanticResultKey
  id: SemanticResultKey
  children:
  - System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])
  - System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])
  - System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder
  langs:
  - csharp
  name: SemanticResultKey
  nameWithType: SemanticResultKey
  fullName: System.Speech.Recognition.SemanticResultKey
  type: Class
  summary: "將索引鍵與字串<xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;></xref>值以定義<xref href=&quot;System.Speech.Recognition.SemanticValue&quot;></xref>物件。"
  remarks: "System.Speech 運算式語意的基本單位是<xref:System.Speech.Recognition.SemanticValue>，這是索引鍵/值組。</xref:System.Speech.Recognition.SemanticValue>       您使用 SemanticResultKey 物件，標記<xref:System.Speech.Recognition.SemanticResultValue>中所包含的執行個體<xref:System.Speech.Recognition.GrammarBuilder>物件和字串以便值可以輕易地存取從<xref:System.Speech.Recognition.SemanticValue>辨識的執行個體。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue>       您可以使用<xref:System.Speech.Recognition.SemanticResultValue>和 SemanticResultKey 物件，搭配<xref:System.Speech.Recognition.GrammarBuilder>和<xref:System.Speech.Recognition.Choices>物件，若要定義語音辨識文法的語意結構。</xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue> 若要存取辨識結果中的語意資訊，取得<xref:System.Speech.Recognition.SemanticValue>透過<xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A><xref:System.Speech.Recognition.RecognizedPhrase>。</xref:System.Speech.Recognition.RecognizedPhrase>屬性</xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A></xref:System.Speech.Recognition.SemanticValue>的執行個體       如需有關使用<xref:System.Speech.Recognition.SemanticResultValue>和 SemanticResultKey 物件，請參閱[了解 SemanticResultValue 和 SemanticResultKey 物件](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)和[使用 SemanticResultKey 擷取 SemanticResultValue](http://msdn.microsoft.com/en-us/198e29b8-845f-4cec-a25e-f55c0eaf46aa)中[System 語音程式設計指南 》 的.NET Framework 4.0](http://msdn.microsoft.com/en-us/610116c7-3817-40ff-857b-5d41e8511043)。</xref:System.Speech.Recognition.SemanticResultValue>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> to recognize password input of the form \"My password is …\", where the actual input is matched with a wildcard.  \n  \n The wildcard is tagged with a semantic key, and the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> handler checks for the presence of this tag to verify that a password input has occurred.  \n  \n```c#  \nprivate void pwdGrammar()   \n{  \n  GrammarBuilder pwdBuilder = new GrammarBuilder(\"My Password is\");  \n  GrammarBuilder wildcardBuilder = new GrammarBuilder();  \n  wildcardBuilder.AppendWildcard();  \n  SemanticResultKey wildcardKey= new SemanticResultKey(\"Password\", wildcardBuilder);  \n  pwdBuilder+=wildcardKey;  \n  Grammar grammar = new Grammar(pwdBuilder);  \n  grammar.Name = \"Password input\";  \n  \n  grammar.SpeechRecognized += delegate(object sender, SpeechRecognizedEventArgs eventArgs)   \n  {  \n    SemanticValue semantics = eventArgs.Result.Semantics;  \n    RecognitionResult result=eventArgs.Result;  \n  \n    if (!semantics.ContainsKey(\"Password\"))   \n    {  \n      SpeechUI.SendTextFeedback(eventArgs.Result, \"No Password Provided\", false);  \n    }  \n    else   \n    {  \n      RecognizedAudio pwdAudio = result.GetAudioForWordRange(result.Words[3], result.Words[result.Words.Count - 1]);  \n      MemoryStream pwdMemoryStream = new MemoryStream();  \n      pwdAudio.WriteToAudioStream(pwdMemoryStream);  \n      if (!IsValidPwd(pwdMemoryStream))   \n      {  \n        string badPwd = System.IO.Path.GetTempPath() + \"BadPwd\" + (new Random()).Next().ToString() + \".wav\";  \n        FileStream waveStream = new FileStream(badPwd, FileMode.Create);  \n        pwdAudio.WriteToWaveStream(waveStream);  \n        waveStream.Flush();  \n        waveStream.Close();  \n        SpeechUI.SendTextFeedback(eventArgs.Result, \"Invalid Password\", false);  \n  \n      }  \n    }  \n  };  \n  grammar.Enabled = true;  \n  _recognizer.LoadGrammar(grammar);  \n  UpdateGrammarTree(_grammarTreeView, _recognizer);  \n  \n}  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{_semanticKey.DebugSummary}")]

      public class SemanticResultKey
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])
  id: '#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])'
  parent: System.Speech.Recognition.SemanticResultKey
  langs:
  - csharp
  name: SemanticResultKey(String,GrammarBuilder[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "將語意索引鍵指派給一個或多個<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>物件用來建立語音辨識文法。"
  remarks: "因為隱含轉換，而`builders`引數支援<xref:System.Speech.Recognition.SemanticResultValue>， <xref:System.Speech.Recognition.SemanticResultKey>， <xref:System.Speech.Recognition.Choices>，和<xref:System.String>物件也。</xref:System.String> </xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> 如需有關隱含轉換的詳細資訊，請參閱<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>.</xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>       當執行辨識作業，<xref:System.Speech.Recognition.GrammarBuilder>中提供的物件`builders`引數處理為循序。</xref:System.Speech.Recognition.GrammarBuilder> 例如，如果下列<xref:System.Speech.Recognition.SemanticResultValue>用來建構<xref:System.Speech.Recognition.Grammar>，輸入辨識引擎必須能夠辨識的序列中包含單字&quot;快速棕色 fox&quot;。</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.SemanticResultValue>      ```c#   SemanticResultKey stringTest=new SemanticResultKey(       &quot;stringTest&quot;, new GrammarBuilder[] {       new GrammarBuilder(&quot;the&quot;),       new GrammarBuilder(&quot;quick&quot;),       new GrammarBuilder(&quot;brown&quot;),       new GrammarBuilder(&quot;fox&quot;)});   ````semanticResultKey`引數包含標記，用來存取<xref:System.Speech.Recognition.SemanticValue>可能傳回哪個。</xref:System.Speech.Recognition.SemanticValue>       <xref:System.Speech.Recognition.SemanticValue.Value%2A>的<xref:System.Speech.Recognition.SemanticValue>取決於<xref:System.Speech.Recognition.GrammarBuilder>提供的執行個體`builders`參數。</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A>       如果<xref:System.Speech.Recognition.GrammarBuilder>物件包含的任何定義的執行個體<xref:System.Speech.Recognition.SemanticResultValue>，值<xref:System.Speech.Recognition.SemanticValue>是`null`。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder>       如果<xref:System.Speech.Recognition.GrammarBuilder>中提供的物件`builders`參數提供未標記 (沒有與相關聯<xref:System.Speech.Recognition.SemanticResultKey>物件)<xref:System.Speech.Recognition.SemanticResultValue>辨識邏輯，該執行個體使用的執行個體<xref:System.Speech.Recognition.SemanticResultValue>會定義<xref:System.Speech.Recognition.SemanticValue.Value%2A>屬性<xref:System.Speech.Recognition.SemanticValue>產生。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder>       應該是其中一個，而且只有一個未標記<xref:System.Speech.Recognition.SemanticResultValue>執行個體中<xref:System.Speech.Recognition.GrammarBuilder>所指定物件`builders`參數。</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue> 如果多個執行個體未標記<xref:System.Speech.Recognition.SemanticResultValue>相關聯<xref:System.Speech.Recognition.SemanticResultKey>，每個會嘗試設定的值<xref:System.Speech.Recognition.SemanticValue>所產生的辨識結果。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> 這不允許而且辨識器將會產生例外狀況，當它嘗試使用<xref:System.Speech.Recognition.Grammar>建立使用例如<xref:System.Speech.Recognition.SemanticResultKey>執行個體。</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Grammar>       執行個體<xref:System.Speech.Recognition.SemanticResultValue>中包含<xref:System.Speech.Recognition.GrammarBuilder>所指定物件`builders`參數已經與另一個<xref:System.Speech.Recognition.SemanticResultKey>不會影響在目前<xref:System.Speech.Recognition.SemanticResultKey>執行個體。</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> to recognize password input of the form \"My password is …\", where the actual input is matched with a wildcard.  \n  \n The wildcard is tagged by a <xref:System.Speech.Recognition.SpeechRecognizer> whose key value is \"Password\". The <xref:System.Speech.Recognition.Grammar.SpeechRecognized> handler checks for the presence of this tag, obtains the audio input of the password, and verifies the password.  \n  \n```c#  \nprivate void pwdGrammar()   \n{  \n  GrammarBuilder pwdBuilder = new GrammarBuilder(\"My Password is\");  \n  GrammarBuilder wildcardBuilder = new GrammarBuilder();  \n  wildcardBuilder.AppendWildcard();  \n  SemanticResultKey wildcardKey= new SemanticResultKey(\"Password\", wildcardBuilder);  \n  pwdBuilder+=wildcardKey;  \n  Grammar grammar = new Grammar(pwdBuilder);  \n  grammar.Name = \"Password input\";  \n  \n  grammar.SpeechRecognized +=   \n    delegate(object sender, SpeechRecognizedEventArgs eventArgs)   \n    {  \n      SemanticValue semantics = eventArgs.Result.Semantics;  \n      RecognitionResult result=eventArgs.Result;  \n  \n      if (!semantics.ContainsKey(\"Password\"))   \n      {  \n        SpeechUI.SendTextFeedback(eventArgs.Result, \"No Password Provided\", false);  \n      }  \n      else   \n      {  \n        RecognizedAudio pwdAudio = result.GetAudioForWordRange(  \n                  result.Words[3],  \n                  result.Words[result.Words.Count - 1]);  \n                  MemoryStream pwdMemoryStream = new MemoryStream();  \n                  pwdAudio.WriteToAudioStream(pwdMemoryStream);  \n        if (!IsValidPwd(pwdMemoryStream))   \n        {  \n          string badPwd = System.IO.Path.GetTempPath() + \"BadPwd\" + (new Random()).Next().ToString() + \".wav\";  \n          FileStream waveStream = new FileStream(badPwd, FileMode.Create);    \n          pwdAudio.WriteToWaveStream(waveStream);  \n          waveStream.Flush();  \n          waveStream.Close();  \n          SpeechUI.SendTextFeedback(eventArgs.Result, \"Invalid Password\", false);      \n        }  \n      }  \n    };  \n  \n  grammar.Enabled = true;  \n  _recognizer.LoadGrammar(grammar);  \n  UpdateGrammarTree(_grammarTreeView, _recognizer);  \n  \n}  \n```"
  syntax:
    content: public SemanticResultKey (string semanticResultKey, System.Speech.Recognition.GrammarBuilder[] builders);
    parameters:
    - id: semanticResultKey
      type: System.String
      description: "要用做為語意索引鍵來存取標籤<xref href=&quot;System.Speech.Recognition.SemanticValue&quot;></xref>與相關聯的執行個體<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>所指定物件`builders`引數。"
    - id: builders
      type: System.Speech.Recognition.GrammarBuilder[]
      description: "將會與相關聯的文法元件的陣列<xref href=&quot;System.Speech.Recognition.SemanticValue&quot;></xref>物件中所定義的標籤與可存取`semanticResultKey`。"
  overload: System.Speech.Recognition.SemanticResultKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])
  id: '#ctor(System.String,System.String[])'
  parent: System.Speech.Recognition.SemanticResultKey
  langs:
  - csharp
  name: SemanticResultKey(String,String[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,String[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,String[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "將語意索引鍵指派給一個或多個<xref:System.String>用來建立語音辨識文法的執行個體。</xref:System.String>"
  remarks: "當執行辨識作業，<xref:System.String>所使用的物件`phrases`參數會被視為為循序。</xref:System.String> 例如，如果下列<xref:System.Speech.Recognition.SemanticResultValue>用來建構<xref:System.Speech.Recognition.Grammar>，輸入辨識引擎必須能夠辨識的序列中包含單字&quot;快速棕色 fox&quot;。</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.SemanticResultValue>      ```c#   SemanticResultKey stringTest=new SemanticResultKey(&quot;stringTest&quot;,                                    new string[] {                                                  &quot;the&quot;,                                                  &quot;quick&quot;,                                                  &quot;brown&quot;,                                                  &quot;fox&quot;});   ````semanticResultKey`引數會決定使用的金鑰存取<xref:System.Speech.Recognition.SemanticValue>可能傳回哪個。</xref:System.Speech.Recognition.SemanticValue>       如果您建構<xref:System.Speech.Recognition.Grammar>使用<xref:System.Speech.Recognition.GrammarBuilder>物件包含語意索引鍵的字串物件的陣列，<xref:System.Speech.Recognition.SemanticValue.Value%2A>的<xref:System.Speech.Recognition.SemanticValue>辨識作業所產生，則將會辨識中使用的字串。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Grammar> 在上述範例中，這表示<xref:System.Speech.Recognition.SemanticValue.Value%2A>會是&quot;快速棕色 fox&quot;。</xref:System.Speech.Recognition.SemanticValue.Value%2A>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> from a <xref:System.Speech.Recognition.GrammarBuilder> object that uses a <xref:System.Speech.Recognition.SemanticResultKey>, which is defined by an array of <xref:System.String> objects.  \n  \n A recognition engine using the <xref:System.Speech.Recognition.Grammar> created will recognize the phrase \"color red green blue zero\". The semantics of the <xref:System.Speech.Recognition.RecognizedPhrase> returned by recognition will contain a <xref:System.Speech.Recognition.SemanticValue> with a <xref:System.Speech.Recognition.SemanticValue.Value%2A> of \"red green blue\". You can access the <xref:System.Speech.Recognition.SemanticValue> using the \"code\" tag.  \n  \n Because of the `SemanticResultValue(\"zero\", 5)` appended to the <xref:System.Speech.Recognition.GrammarBuilder>, the root <xref:System.Speech.Recognition.SemanticValue> object in the <xref:System.Speech.Recognition.RecognizedPhrase> will have a value of 5.  \n  \n```c#  \nprivate void keyTest()   \n{  \n  // Say \"color red green blue zero\"  \n  GrammarBuilder gb = new GrammarBuilder(\"color\") +  \n                        new SemanticResultKey(\"code\",   \n                          (new string[] {\"red\", \"green\", \"blue\"})) +  \n                        new SemanticResultValue(\"zero\", 5);  \n  Grammar g = new Grammar(gb);  \n  g.Name = \"keyTest\";  \n  _recognizer.LoadGrammar(g);  \n}  \n```"
  syntax:
    content: public SemanticResultKey (string semanticResultKey, string[] phrases);
    parameters:
    - id: semanticResultKey
      type: System.String
      description: "要標記使用存取<xref href=&quot;System.Speech.Recognition.SemanticValue&quot;></xref>與相關聯的執行個體<xref:System.String>所指定物件`phrases`引數。</xref:System.String>"
    - id: phrases
      type: System.String[]
      description: "一或多個<xref:System.String>的串連的文字將會與相關聯的物件<xref href=&quot;System.Speech.Recognition.SemanticValue&quot;></xref>物件中所定義的標籤與可存取`semanticResultKey`。</xref:System.String>"
  overload: System.Speech.Recognition.SemanticResultKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder
  id: ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultKey
  langs:
  - csharp
  name: ToGrammarBuilder()
  nameWithType: SemanticResultKey.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "傳回的執行個體<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>建構從目前<xref href=&quot;System.Speech.Recognition.SemanticResultKey&quot;></xref>執行個體。"
  remarks: "使用<xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A>相當於使用<xref:System.Speech.Recognition.GrammarBuilder>的建構函式<xref:System.Speech.Recognition.SemanticResultKey>做為引數 (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>)。</xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> object that supports commands to change the background color.  \n  \n A <xref:System.Speech.Recognition.Choices> object (`colorChoice`) containing the list of options for background colors is filled using the [Add(GrammarBuilder\\[\\])](assetId:///M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])?qualifyHint=False&autoUpgrade=False) method with <xref:System.Speech.Recognition.GrammarBuilder> instances. The <xref:System.Speech.Recognition.GrammarBuilder> instances are obtained through the ToGrammarBuilder method on the <xref:System.Speech.Recognition.SemanticResultValue> objects created from color strings.  \n  \n A <xref:System.Speech.Recognition.GrammarBuilder> is then obtained by calling ToGrammarBuilder on a <xref:System.Speech.Recognition.SemanticResultKey> instance, which will be used to key the semantic choices in `colorChoice`.  \n  \n```c#  \n  \nprivate Grammar CreateGrammarBuilderRGBSemantics()   \n{  \n  \n  // Create a set of choices, each a lookup from a color name to RGB.  \n  // Choices constructors do not take SemanticResultValue parameters, so cast   \n  // the SemanticResultValue to GrammarBuilder.  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n    SemanticResultValue colorValue=new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.  \n    colorChoice.Add(colorValue.ToGrammarBuilder());      \n  }  \n  SemanticResultKey choiceKey = new SemanticResultKey(\"rgb\", colorChoice);  \n  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  \n  \n  // Create two intermediate grammars with introductory phrase and the color choice.  \n  GrammarBuilder makeBackgroundBuilder = \"Make background\";  \n  makeBackgroundBuilder.Append(choiceBuilder);  \n  \n  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder(\"Configure background as\");  \n  configureBackgroundBuilder.Append((new SemanticResultKey(\"rgb\", colorChoice)).ToGrammarBuilder());  \n  \n  // Create the Grammar object, which recognizes either intermediate grammar.  \n  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] {makeBackgroundBuilder, configureBackgroundBuilder}));  \n  grammar.Name = \"Make Background /Configure background as\";  \n  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();
    parameters: []
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "傳回的執行個體<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>建構從目前<xref href=&quot;System.Speech.Recognition.SemanticResultKey&quot;></xref>執行個體。"
  overload: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: SemanticResultKey(String,GrammarBuilder[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.GrammarBuilder[]
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder[]
  spec.csharp:
  - uid: System.Speech.Recognition.GrammarBuilder
    name: GrammarBuilder
    nameWithType: GrammarBuilder
    fullName: GrammarBuilder[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: SemanticResultKey(String,String[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,String[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: ToGrammarBuilder()
  nameWithType: SemanticResultKey.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder()
- uid: System.Speech.Recognition.GrammarBuilder
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
- uid: System.Speech.Recognition.SemanticResultKey.#ctor*
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: SemanticResultKey
  nameWithType: SemanticResultKey.SemanticResultKey
- uid: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder*
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: ToGrammarBuilder
  nameWithType: SemanticResultKey.ToGrammarBuilder
