### YamlMime:ManagedReference
items:
- uid: System.Web.Services.Protocols.LogicalMethodInfo
  id: LogicalMethodInfo
  children:
  - System.Web.Services.Protocols.LogicalMethodInfo.#ctor(System.Reflection.MethodInfo)
  - System.Web.Services.Protocols.LogicalMethodInfo.AsyncCallbackParameter
  - System.Web.Services.Protocols.LogicalMethodInfo.AsyncResultParameter
  - System.Web.Services.Protocols.LogicalMethodInfo.AsyncStateParameter
  - System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke(System.Object,System.Object[],System.AsyncCallback,System.Object)
  - System.Web.Services.Protocols.LogicalMethodInfo.BeginMethodInfo
  - System.Web.Services.Protocols.LogicalMethodInfo.Create(System.Reflection.MethodInfo[])
  - System.Web.Services.Protocols.LogicalMethodInfo.Create(System.Reflection.MethodInfo[],System.Web.Services.Protocols.LogicalMethodTypes)
  - System.Web.Services.Protocols.LogicalMethodInfo.CustomAttributeProvider
  - System.Web.Services.Protocols.LogicalMethodInfo.DeclaringType
  - System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke(System.Object,System.IAsyncResult)
  - System.Web.Services.Protocols.LogicalMethodInfo.EndMethodInfo
  - System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttribute(System.Type)
  - System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes(System.Type)
  - System.Web.Services.Protocols.LogicalMethodInfo.InParameters
  - System.Web.Services.Protocols.LogicalMethodInfo.Invoke(System.Object,System.Object[])
  - System.Web.Services.Protocols.LogicalMethodInfo.IsAsync
  - System.Web.Services.Protocols.LogicalMethodInfo.IsBeginMethod(System.Reflection.MethodInfo)
  - System.Web.Services.Protocols.LogicalMethodInfo.IsEndMethod(System.Reflection.MethodInfo)
  - System.Web.Services.Protocols.LogicalMethodInfo.IsVoid
  - System.Web.Services.Protocols.LogicalMethodInfo.MethodInfo
  - System.Web.Services.Protocols.LogicalMethodInfo.Name
  - System.Web.Services.Protocols.LogicalMethodInfo.OutParameters
  - System.Web.Services.Protocols.LogicalMethodInfo.Parameters
  - System.Web.Services.Protocols.LogicalMethodInfo.ReturnType
  - System.Web.Services.Protocols.LogicalMethodInfo.ReturnTypeCustomAttributeProvider
  - System.Web.Services.Protocols.LogicalMethodInfo.ToString
  langs:
  - csharp
  name: LogicalMethodInfo
  nameWithType: LogicalMethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo
  type: Class
  summary: "表示屬性和 XML Web 服務方法的中繼資料。 這個類別無法被繼承。"
  remarks: "LogicalMethodInfo is used primarily by a SOAP extension to interrogate the details of the XML Web service method with which the SOAP extension is configured to run. Depending on how the SOAP extension is configured, it can find out details about the XML Web service method in the <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> method of <xref:System.Web.Services.Protocols.SoapExtension> that takes a LogicalMethodInfo. The LogicalMethodInfo provides details such as the XML Web service method's parameters by accessing the <xref:System.Web.Services.Protocols.LogicalMethodInfo.Parameters%2A> property and any custom attributes applied to the XML Web service method using the <xref:System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes%2A> property.  \n  \n For more details on SOAP extensions see the <xref:System.Web.Services.Protocols.SoapExtension> class or [&#91;\\<topic://cpconAlteringSOAPMessageUsingSOAPExtensions>&#93;](http://msdn.microsoft.com/en-us/97d81ace-95e7-4acc-ae39-9692a0021e95)."
  example:
  - '[!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]'
  syntax:
    content: public sealed class LogicalMethodInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.#ctor(System.Reflection.MethodInfo)
  id: '#ctor(System.Reflection.MethodInfo)'
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: LogicalMethodInfo(MethodInfo)
  nameWithType: LogicalMethodInfo.LogicalMethodInfo(MethodInfo)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.LogicalMethodInfo(MethodInfo)
  type: Constructor
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "初始化的新執行個體<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref> <xref:System.Reflection.MethodInfo>傳入</xref:System.Reflection.MethodInfo>類別"
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Constructor#1](~/add/codesnippet/csharp/33539594-3d11-433f-bfe7-_1.cs)]
     [!code-cpp[LogicalMethodInfo_Constructor#1](~/add/codesnippet/cpp/33539594-3d11-433f-bfe7-_1.cpp)]
     [!code-vb[LogicalMethodInfo_Constructor#1](~/add/codesnippet/visualbasic/33539594-3d11-433f-bfe7-_1.vb)]
  syntax:
    content: public LogicalMethodInfo (System.Reflection.MethodInfo methodInfo);
    parameters:
    - id: methodInfo
      type: System.Reflection.MethodInfo
      description: "A<xref:System.Reflection.MethodInfo>初始化的屬性<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;></xref>通用<xref:System.Reflection.MethodInfo>.</xref:System.Reflection.MethodInfo> </xref:System.Reflection.MethodInfo>"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.#ctor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "&lt;Xref:System.Reflection.MethodBase.IsStatic%2A?displayProperty=fullName&gt;屬性<code> methodInfo </code>參數是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。       -或- &lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=fullName&gt;方法<code> methodInfo </code>參數不包含執行個體所表示的方法所需的所有參數<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref>。"
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.AsyncCallbackParameter
  id: AsyncCallbackParameter
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: AsyncCallbackParameter
  nameWithType: LogicalMethodInfo.AsyncCallbackParameter
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.AsyncCallbackParameter
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得參數資訊<code> AsyncCallback </code>的非同步引動過程中的 Begin 方法的參數。"
  remarks: "The asynchronous design pattern in the common language runtime involves calling a `Begin` method to start the asynchronous method invocation and an `End` method to complete the invocation. The `Begin` method takes two additional parameters besides the parameters defined by the synchronous version of the method: one to store a delegate and one to store any state information that needs to be passed on to the delegate. This property represents the parameter for the delegate with a parameter name of `AsyncCallback`.  \n  \n For more information on invoking XML Web services asynchronously, see [&#91;\\<topic://cpconInvokingWebServicesAsynchronously>&#93;](http://msdn.microsoft.com/en-us/f9e26a43-063a-440a-8c73-a02f2ccf3ea0)."
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create2#1](~/add/codesnippet/csharp/p-system.web.services.pr_64_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create2#1](~/add/codesnippet/cpp/p-system.web.services.pr_64_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create2#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_64_1.vb)]
  syntax:
    content: public System.Reflection.ParameterInfo AsyncCallbackParameter { get; }
    return:
      type: System.Reflection.ParameterInfo
      description: "A<xref:System.Reflection.ParameterInfo>代表<code> AsyncCallback </code>參數<xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;></xref>非同步方法引動過程。</xref:System.Reflection.ParameterInfo>"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.AsyncCallbackParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.AsyncResultParameter
  id: AsyncResultParameter
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: AsyncResultParameter
  nameWithType: LogicalMethodInfo.AsyncResultParameter
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.AsyncResultParameter
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得傳回值<xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;></xref>非同步方法引動過程。"
  remarks: "The asynchronous design pattern in the common language runtime involves calling a `Begin` method to start the asynchronous method invocation and an `End` method to complete the invocation. The `Begin` method typically returns immediately with an object implementing the <xref:System.IAsyncResult> interface, which can then be passed to the `End` method at a later time to complete the asynchronous method invocation. The returned object implementing the <xref:System.IAsyncResult> interface is represented by this property.  \n  \n For more information on invoking XML Web services asynchronously, see [&#91;\\<topic://cpconInvokingWebServicesAsynchronously>&#93;](http://msdn.microsoft.com/en-us/f9e26a43-063a-440a-8c73-a02f2ccf3ea0)."
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create2#1](~/add/codesnippet/csharp/p-system.web.services.pr_38_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create2#1](~/add/codesnippet/cpp/p-system.web.services.pr_38_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create2#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_38_1.vb)]
  syntax:
    content: public System.Reflection.ParameterInfo AsyncResultParameter { get; }
    return:
      type: System.Reflection.ParameterInfo
      description: "A<xref:System.Reflection.ParameterInfo>代表<xref:System.IAsyncResult>從傳回<xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;></xref>非同步方法引動過程。</xref:System.IAsyncResult> </xref:System.Reflection.ParameterInfo>"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.AsyncResultParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.AsyncStateParameter
  id: AsyncStateParameter
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: AsyncStateParameter
  nameWithType: LogicalMethodInfo.AsyncStateParameter
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.AsyncStateParameter
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得參數資訊<code> AsyncState </code>參數<xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;></xref>方法中的非同步引動過程。"
  remarks: "The asynchronous design pattern in the common language runtime involves calling a `Begin` method to start the asynchronous method invocation and an `End` method to complete the invocation. The `Begin` method takes two additional parameters besides the parameters defined by the synchronous version of the method: one to store a delegate and one to store any state information that needs to be passed on to the delegate. This property represents the state information that needs to be passed into the delegate.  \n  \n For more information on invoking XML Web services asynchronously, see [&#91;\\<topic://cpconInvokingWebServicesAsynchronously>&#93;](http://msdn.microsoft.com/en-us/f9e26a43-063a-440a-8c73-a02f2ccf3ea0)."
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create2#1](~/add/codesnippet/csharp/p-system.web.services.pr_25_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create2#1](~/add/codesnippet/cpp/p-system.web.services.pr_25_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create2#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_25_1.vb)]
  syntax:
    content: public System.Reflection.ParameterInfo AsyncStateParameter { get; }
    return:
      type: System.Reflection.ParameterInfo
      description: "A<xref:System.Reflection.ParameterInfo>代表<code> AsyncState </code>參數<xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;></xref>方法中的非同步引動過程。</xref:System.Reflection.ParameterInfo>"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.AsyncStateParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke(System.Object,System.Object[],System.AsyncCallback,System.Object)
  id: BeginInvoke(System.Object,System.Object[],System.AsyncCallback,System.Object)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: BeginInvoke(Object,Object[],AsyncCallback,Object)
  nameWithType: LogicalMethodInfo.BeginInvoke(Object,Object[],AsyncCallback,Object)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke(Object,Object[],AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "開始所表示之方法的非同步引動過程<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref>。"
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_BeginInvoke#1](~/add/codesnippet/csharp/4cf5df3f-128a-4f09-9f34-_1.cs)]
     [!code-vb[LogicalMethodInfo_BeginInvoke#1](~/add/codesnippet/visualbasic/4cf5df3f-128a-4f09-9f34-_1.vb)]
     [!code-cpp[LogicalMethodInfo_BeginInvoke#1](~/add/codesnippet/cpp/4cf5df3f-128a-4f09-9f34-_1.cpp)]
  syntax:
    content: public IAsyncResult BeginInvoke (object target, object[] values, AsyncCallback callback, object asyncState);
    parameters:
    - id: target
      type: System.Object
      description: "執行個體<xref:System.Object>在其上叫用的方法上。</xref:System.Object>"
    - id: values
      type: System.Object[]
      description: "叫用的方法引數清單。 這是具有相同的數目、 順序和類型的物件陣列做為方法的參數。 如果此方法不需要任何參數，`values`應該<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: callback
      type: System.AsyncCallback
      description: "完成非同步叫用時呼叫委派。 如果`callback`是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，不會呼叫的委派。"
    - id: asyncState
      type: System.Object
      description: "傳遞給委派的狀態資訊。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>傳遞給<xref:System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke*>遠端方法呼叫從取得傳回值。</xref:System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke*> </xref:System.IAsyncResult>"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke*
  exceptions:
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: "The <code>target</code> parameteris <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "數字、 類型和參數的順序<code> values </code>不符合叫用方法的簽章。"
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "呼叫端沒有叫用方法的權限。"
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.BeginMethodInfo
  id: BeginMethodInfo
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: BeginMethodInfo
  nameWithType: LogicalMethodInfo.BeginMethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.BeginMethodInfo
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得的屬性和中繼資料<xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;></xref>方法中的非同步引動過程。"
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create2#1](~/add/codesnippet/csharp/p-system.web.services.pr_4_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create2#1](~/add/codesnippet/cpp/p-system.web.services.pr_4_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create2#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_4_1.vb)]
  syntax:
    content: public System.Reflection.MethodInfo BeginMethodInfo { get; }
    return:
      type: System.Reflection.MethodInfo
      description: "A<xref:System.Reflection.MethodInfo>屬性和中繼資料代表<xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;></xref>非同步方法引動過程。</xref:System.Reflection.MethodInfo>"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.BeginMethodInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Create(System.Reflection.MethodInfo[])
  id: Create(System.Reflection.MethodInfo[])
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: Create(MethodInfo[])
  nameWithType: LogicalMethodInfo.Create(MethodInfo[])
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.Create(MethodInfo[])
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "指定陣列<xref:System.Reflection.MethodInfo>，可以包含非同步和同步方法的相關資訊，請建立的陣列<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref>。</xref:System.Reflection.MethodInfo>"
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create1#1](~/add/codesnippet/csharp/c29165ab-1342-4efc-b959-_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create1#1](~/add/codesnippet/cpp/c29165ab-1342-4efc-b959-_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create1#1](~/add/codesnippet/visualbasic/c29165ab-1342-4efc-b959-_1.vb)]
  syntax:
    content: public static System.Web.Services.Protocols.LogicalMethodInfo[] Create (System.Reflection.MethodInfo[] methodInfos);
    parameters:
    - id: methodInfos
      type: System.Reflection.MethodInfo[]
      description: "陣列<xref:System.Reflection.MethodInfo>代表的非同步和同步的方法，為其建立<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;></xref>物件。</xref:System.Reflection.MethodInfo>"
    return:
      type: System.Web.Services.Protocols.LogicalMethodInfo[]
      description: "陣列<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref>，代表在方法<code> methodInfos </code>。"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.Create*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A <xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;> </xref>非同步方法包含在<code> methodInfos </code>沒有相對應<xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;></xref>方法。"
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Create(System.Reflection.MethodInfo[],System.Web.Services.Protocols.LogicalMethodTypes)
  id: Create(System.Reflection.MethodInfo[],System.Web.Services.Protocols.LogicalMethodTypes)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: Create(MethodInfo[],LogicalMethodTypes)
  nameWithType: LogicalMethodInfo.Create(MethodInfo[],LogicalMethodTypes)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.Create(MethodInfo[],LogicalMethodTypes)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "指定陣列<xref:System.Reflection.MethodInfo>，其中的陣列傳回<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;></xref>可以限制為只有非同步或同步的方法，建立的陣列<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref>。</xref:System.Reflection.MethodInfo>"
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create2#1](~/add/codesnippet/csharp/dac222c9-9fa0-4192-889b-_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create2#1](~/add/codesnippet/cpp/dac222c9-9fa0-4192-889b-_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create2#1](~/add/codesnippet/visualbasic/dac222c9-9fa0-4192-889b-_1.vb)]
  syntax:
    content: public static System.Web.Services.Protocols.LogicalMethodInfo[] Create (System.Reflection.MethodInfo[] methodInfos, System.Web.Services.Protocols.LogicalMethodTypes types);
    parameters:
    - id: methodInfos
      type: System.Reflection.MethodInfo[]
      description: "陣列<xref:System.Reflection.MethodInfo>代表的非同步和同步的方法，為其建立<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;></xref>物件。</xref:System.Reflection.MethodInfo>"
    - id: types
      type: System.Web.Services.Protocols.LogicalMethodTypes
      description: "位元組合<xref href=&quot;System.Web.Services.Protocols.LogicalMethodTypes&quot;></xref>值。 判斷是否會將只同步或非同步方法或兩者都包含在傳回陣列的<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref>。"
    return:
      type: System.Web.Services.Protocols.LogicalMethodInfo[]
      description: "陣列<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref>，代表在方法<code> methodInfos</code>篩選的值， <code> types </code>。"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.Create*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A <xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;> </xref>非同步方法包含在<code> methodInfos </code>沒有相對應<xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;></xref>方法。"
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.CustomAttributeProvider
  id: CustomAttributeProvider
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: CustomAttributeProvider
  nameWithType: LogicalMethodInfo.CustomAttributeProvider
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.CustomAttributeProvider
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得套用至方法的自訂屬性。"
  remarks: ''
  example:
  - >-
    [!code-cpp[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/cpp/p-system.web.services.pr_8_1.cpp)]
     [!code-cs[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/csharp/p-system.web.services.pr_8_1.cs)]
     [!code-vb[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/visualbasic/p-system.web.services.pr_8_1.vb)]
  syntax:
    content: public System.Reflection.ICustomAttributeProvider CustomAttributeProvider { get; }
    return:
      type: System.Reflection.ICustomAttributeProvider
      description: "<xref href=&quot;System.Reflection.ICustomAttributeProvider&quot;> </xref>代表方法的自訂屬性。"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.CustomAttributeProvider*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.DeclaringType
  id: DeclaringType
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: DeclaringType
  nameWithType: LogicalMethodInfo.DeclaringType
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.DeclaringType
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得宣告目前所表示之方法的類別<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref>。"
  remarks: "DeclaringType 屬性擷取參考<xref:System.Type>宣告這個成員的類型。</xref:System.Type> 類別 （或介面） 的成員宣告或繼承自基底類別 （或介面）。 傳回<xref:System.Type>可能無法與相同<xref:System.Type>實作 XML Web 服務之類別 (如果該類別衍生自基底類別，而該基底類別中宣告這個類別所表示的方法則<xref:System.Type>傳回是基底類別)。</xref:System.Type> </xref:System.Type> </xref:System.Type>"
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Constructor#1](~/add/codesnippet/csharp/p-system.web.services.pr_39_1.cs)]
     [!code-cpp[LogicalMethodInfo_Constructor#1](~/add/codesnippet/cpp/p-system.web.services.pr_39_1.cpp)]
     [!code-vb[LogicalMethodInfo_Constructor#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_39_1.vb)]
  syntax:
    content: public Type DeclaringType { get; }
    return:
      type: System.Type
      description: "<xref:System.Type>類別宣告所表示的方法<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref>。</xref:System.Type>"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.DeclaringType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke(System.Object,System.IAsyncResult)
  id: EndInvoke(System.Object,System.IAsyncResult)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: EndInvoke(Object,IAsyncResult)
  nameWithType: LogicalMethodInfo.EndInvoke(Object,IAsyncResult)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke(Object,IAsyncResult)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "結束目前所表示之方法的非同步引動過程<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref>。"
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_BeginInvoke#2](~/add/codesnippet/csharp/70bfcc96-3c47-4d4f-af27-_1.cs)]
     [!code-vb[LogicalMethodInfo_BeginInvoke#2](~/add/codesnippet/visualbasic/70bfcc96-3c47-4d4f-af27-_1.vb)]
     [!code-cpp[LogicalMethodInfo_BeginInvoke#2](~/add/codesnippet/cpp/70bfcc96-3c47-4d4f-af27-_1.cpp)]
  syntax:
    content: public object[] EndInvoke (object target, IAsyncResult asyncResult);
    parameters:
    - id: target
      type: System.Object
      description: "執行個體<xref:System.Object>要叫用方法。</xref:System.Object>"
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>傳回從<xref:System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke*>.</xref:System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke*> </xref:System.IAsyncResult>"
    return:
      type: System.Object[]
      description: "包含傳回值，以及任何所參考的物件或 out 參數在衍生的類別方法的陣列。"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke*
  exceptions:
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: "The <code>target</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "呼叫端沒有叫用方法的權限。"
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: "叫用的方法會擲回例外狀況。"
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.EndMethodInfo
  id: EndMethodInfo
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: EndMethodInfo
  nameWithType: LogicalMethodInfo.EndMethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.EndMethodInfo
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得的屬性和中繼資料<xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;></xref>至方法的非同步引動過程的方法。"
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create2#1](~/add/codesnippet/csharp/p-system.web.services.pr_80_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create2#1](~/add/codesnippet/cpp/p-system.web.services.pr_80_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create2#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_80_1.vb)]
  syntax:
    content: public System.Reflection.MethodInfo EndMethodInfo { get; }
    return:
      type: System.Reflection.MethodInfo
      description: "A<xref:System.Reflection.MethodInfo>屬性和中繼資料代表<xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;></xref>非同步方法引動過程。</xref:System.Reflection.MethodInfo>"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.EndMethodInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttribute(System.Type)
  id: GetCustomAttribute(System.Type)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: GetCustomAttribute(Type)
  nameWithType: LogicalMethodInfo.GetCustomAttribute(Type)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttribute(Type)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "如果任何自訂屬性會套用至類型，則傳回第一個自訂屬性套用至類型。"
  remarks: ''
  example:
  - >-
    [!code-cpp[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/cpp/639f3695-7f4e-41fe-bc5d-_1.cpp)]
     [!code-cs[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/csharp/639f3695-7f4e-41fe-bc5d-_1.cs)]
     [!code-vb[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/visualbasic/639f3695-7f4e-41fe-bc5d-_1.vb)]
  syntax:
    content: public object GetCustomAttribute (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>套用自訂屬性。</xref:System.Type>"
    return:
      type: System.Object
      description: "<xref:System.Object>包含第一個自訂屬性套用至<code> type </code>參數。</xref:System.Object>"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttribute*
  exceptions:
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "無法載入自訂屬性型別。"
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes(System.Type)
  id: GetCustomAttributes(System.Type)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: GetCustomAttributes(Type)
  nameWithType: LogicalMethodInfo.GetCustomAttributes(Type)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes(Type)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "傳回的自訂屬性套用至指定的型別。"
  remarks: ''
  example:
  - >-
    [!code-cpp[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/cpp/c01360a6-e025-410b-ab18-_1.cpp)]
     [!code-cs[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/csharp/c01360a6-e025-410b-ab18-_1.cs)]
     [!code-vb[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/visualbasic/c01360a6-e025-410b-ab18-_1.vb)]
  syntax:
    content: public object[] GetCustomAttributes (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>套用自訂屬性。</xref:System.Type>"
    return:
      type: System.Object[]
      description: "陣列<xref:System.Object>包含自訂屬性套用至<code> type </code>。</xref:System.Object>"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes*
  exceptions:
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "無法載入自訂屬性型別。"
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.InParameters
  id: InParameters
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: InParameters
  nameWithType: LogicalMethodInfo.InParameters
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.InParameters
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得傳遞至方法的執行個體所表示的參數<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref>。"
  remarks: "使用的執行個體<xref:System.Reflection.ParameterInfo>若要取得參數的資料類型的相關資訊，預設值，依此類推。</xref:System.Reflection.ParameterInfo>       InParameters 傳回的陣列<xref:System.Reflection.ParameterInfo>物件代表的參數傳遞給方法，順序。</xref:System.Reflection.ParameterInfo>"
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create1#1](~/add/codesnippet/csharp/p-system.web.services.pr_55_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create1#1](~/add/codesnippet/cpp/p-system.web.services.pr_55_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create1#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_55_1.vb)]
  syntax:
    content: public System.Reflection.ParameterInfo[] InParameters { get; }
    return:
      type: System.Reflection.ParameterInfo[]
      description: "類型的陣列<xref:System.Reflection.ParameterInfo>含有參數傳遞至方法的執行個體所表示<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref>。</xref:System.Reflection.ParameterInfo>"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.InParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Invoke(System.Object,System.Object[])
  id: Invoke(System.Object,System.Object[])
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: Invoke(Object,Object[])
  nameWithType: LogicalMethodInfo.Invoke(Object,Object[])
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.Invoke(Object,Object[])
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "表示由目前的方法會叫用<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref>。"
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Constructor#1](~/add/codesnippet/csharp/5ef48647-93c7-4c46-8d10-_1.cs)]
     [!code-cpp[LogicalMethodInfo_Constructor#1](~/add/codesnippet/cpp/5ef48647-93c7-4c46-8d10-_1.cpp)]
     [!code-vb[LogicalMethodInfo_Constructor#1](~/add/codesnippet/visualbasic/5ef48647-93c7-4c46-8d10-_1.vb)]
  syntax:
    content: public object[] Invoke (object target, object[] values);
    parameters:
    - id: target
      type: System.Object
      description: "執行個體<xref:System.Object>叫用方法。</xref:System.Object>"
    - id: values
      type: System.Object[]
      description: "叫用的方法引數清單。 這是具有相同的數目、 順序和類型的物件陣列做為方法的參數。 如果此方法不需要任何參數，`values`參數應該是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Object[]
      description: "類型的陣列<xref:System.Object>表示傳回的值與 out 叫用方法的參數。</xref:System.Object>"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.Invoke*
  exceptions:
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: "The <code>target</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "數字、 類型和參數的順序<code> values </code>參數與叫用方法的簽章不相符。"
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "呼叫端沒有叫用方法的權限。"
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: "叫用的方法會擲回例外狀況。"
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsAsync
  id: IsAsync
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: IsAsync
  nameWithType: LogicalMethodInfo.IsAsync
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.IsAsync
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得值，指出執行個體所代表方法是否<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;></xref>會以非同步方式叫用。"
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create2#1](~/add/codesnippet/csharp/p-system.web.services.pr_31_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create2#1](~/add/codesnippet/cpp/p-system.web.services.pr_31_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create2#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_31_1.vb)]
  syntax:
    content: public bool IsAsync { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果以非同步的方式; 叫用此方法否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.IsAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsBeginMethod(System.Reflection.MethodInfo)
  id: IsBeginMethod(System.Reflection.MethodInfo)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: IsBeginMethod(MethodInfo)
  nameWithType: LogicalMethodInfo.IsBeginMethod(MethodInfo)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.IsBeginMethod(MethodInfo)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "傳回值，指出方法是否通過中代表<xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;></xref>方法的非同步引動過程。"
  remarks: ''
  example:
  - >-
    [!code-cpp[LogicalMethodInfo_IsBeginMethod#1](~/add/codesnippet/cpp/16aef9c9-6974-4ce7-8b1a-_1.cpp)]
     [!code-cs[LogicalMethodInfo_IsBeginMethod#1](~/add/codesnippet/csharp/16aef9c9-6974-4ce7-8b1a-_1.cs)]
     [!code-vb[LogicalMethodInfo_IsBeginMethod#1](~/add/codesnippet/visualbasic/16aef9c9-6974-4ce7-8b1a-_1.vb)]
  syntax:
    content: public static bool IsBeginMethod (System.Reflection.MethodInfo methodInfo);
    parameters:
    - id: methodInfo
      type: System.Reflection.MethodInfo
      description: "<xref:System.Reflection.MethodInfo>可能<xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;></xref>方法的非同步引動過程。</xref:System.Reflection.MethodInfo>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> methodInfo </code>參數是<xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;></xref>方法的非同步引動過程，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.IsBeginMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsEndMethod(System.Reflection.MethodInfo)
  id: IsEndMethod(System.Reflection.MethodInfo)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: IsEndMethod(MethodInfo)
  nameWithType: LogicalMethodInfo.IsEndMethod(MethodInfo)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.IsEndMethod(MethodInfo)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "傳回值，指出方法是否通過中代表<xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;></xref>方法的非同步引動過程。"
  remarks: ''
  example:
  - >-
    [!code-cpp[LogicalMethodInfo_IsBeginMethod#2](~/add/codesnippet/cpp/0b6247ff-723e-4877-83bb-_1.cpp)]
     [!code-cs[LogicalMethodInfo_IsBeginMethod#2](~/add/codesnippet/csharp/0b6247ff-723e-4877-83bb-_1.cs)]
     [!code-vb[LogicalMethodInfo_IsBeginMethod#2](~/add/codesnippet/visualbasic/0b6247ff-723e-4877-83bb-_1.vb)]
  syntax:
    content: public static bool IsEndMethod (System.Reflection.MethodInfo methodInfo);
    parameters:
    - id: methodInfo
      type: System.Reflection.MethodInfo
      description: "<xref:System.Reflection.MethodInfo>可能<xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;></xref>方法的非同步引動過程。</xref:System.Reflection.MethodInfo>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> methodInfo </code>參數是<xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;></xref>方法的非同步引動過程，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.IsEndMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsVoid
  id: IsVoid
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: IsVoid
  nameWithType: LogicalMethodInfo.IsVoid
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.IsVoid
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得值，指出執行個體所表示之方法的傳回型別是否<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;></xref>是<xref uid=&quot;langword_csharp_void&quot; name=&quot;void&quot; href=&quot;&quot;> </xref>。"
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create1#1](~/add/codesnippet/csharp/p-system.web.services.pr_46_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create1#1](~/add/codesnippet/cpp/p-system.web.services.pr_46_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create1#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_46_1.vb)]
  syntax:
    content: public bool IsVoid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果傳回型別為 void。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.IsVoid*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.MethodInfo
  id: MethodInfo
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: MethodInfo
  nameWithType: LogicalMethodInfo.MethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.MethodInfo
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得同步方法的屬性和中繼資料。"
  remarks: ''
  example:
  - >-
    [!code-cpp[LogicalMethodInfo_GetCustomAttribute#3](~/add/codesnippet/cpp/p-system.web.services.pr_13_1.cpp)]
     [!code-cs[LogicalMethodInfo_GetCustomAttribute#3](~/add/codesnippet/csharp/p-system.web.services.pr_13_1.cs)]
     [!code-vb[LogicalMethodInfo_GetCustomAttribute#3](~/add/codesnippet/visualbasic/p-system.web.services.pr_13_1.vb)]
  syntax:
    content: public System.Reflection.MethodInfo MethodInfo { get; }
    return:
      type: System.Reflection.MethodInfo
      description: "A<xref:System.Reflection.MethodInfo>代表屬性和方法的中繼資料。</xref:System.Reflection.MethodInfo> 如果<xref:System.Web.Services.Protocols.LogicalMethodInfo.IsAsync*>是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>，則這個屬性的值會是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Web.Services.Protocols.LogicalMethodInfo.IsAsync*>"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.MethodInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Name
  id: Name
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: Name
  nameWithType: LogicalMethodInfo.Name
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.Name
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得所表示的方法名稱<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref>。"
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create1#1](~/add/codesnippet/csharp/p-system.web.services.pr_63_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create1#1](~/add/codesnippet/cpp/p-system.web.services.pr_63_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create1#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_63_1.vb)]
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "所表示的方法名稱<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref>。"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.OutParameters
  id: OutParameters
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: OutParameters
  nameWithType: LogicalMethodInfo.OutParameters
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.OutParameters
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得方法的 out 參數。"
  remarks: "使用<xref:System.Reflection.ParameterInfo>若要取得參數的資料類型的相關資訊，預設值，依此類推。</xref:System.Reflection.ParameterInfo>"
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Create1#1](~/add/codesnippet/csharp/p-system.web.services.pr_70_1.cs)]
     [!code-cpp[LogicalMethodInfo_Create1#1](~/add/codesnippet/cpp/p-system.web.services.pr_70_1.cpp)]
     [!code-vb[LogicalMethodInfo_Create1#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_70_1.vb)]
  syntax:
    content: public System.Reflection.ParameterInfo[] OutParameters { get; }
    return:
      type: System.Reflection.ParameterInfo[]
      description: "陣列<xref:System.Reflection.ParameterInfo>代表方法，在順序中的 out 參數。</xref:System.Reflection.ParameterInfo>"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.OutParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Parameters
  id: Parameters
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: Parameters
  nameWithType: LogicalMethodInfo.Parameters
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.Parameters
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得方法的參數。"
  remarks: "使用<xref:System.Reflection.ParameterInfo>若要取得參數的資料類型的相關資訊，預設值，依此類推。</xref:System.Reflection.ParameterInfo>       參數傳回的陣列<xref:System.Reflection.ParameterInfo>物件代表的參數傳遞給方法，順序。</xref:System.Reflection.ParameterInfo>"
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Constructor#1](~/add/codesnippet/csharp/p-system.web.services.pr_7_1.cs)]
     [!code-cpp[LogicalMethodInfo_Constructor#1](~/add/codesnippet/cpp/p-system.web.services.pr_7_1.cpp)]
     [!code-vb[LogicalMethodInfo_Constructor#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_7_1.vb)]
  syntax:
    content: public System.Reflection.ParameterInfo[] Parameters { get; }
    return:
      type: System.Reflection.ParameterInfo[]
      description: "陣列<xref:System.Reflection.ParameterInfo>代表方法的參數。</xref:System.Reflection.ParameterInfo>"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.Parameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.ReturnType
  id: ReturnType
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: ReturnType
  nameWithType: LogicalMethodInfo.ReturnType
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.ReturnType
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得這個方法的傳回型別。"
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Constructor#1](~/add/codesnippet/csharp/p-system.web.services.pr_21_1.cs)]
     [!code-cpp[LogicalMethodInfo_Constructor#1](~/add/codesnippet/cpp/p-system.web.services.pr_21_1.cpp)]
     [!code-vb[LogicalMethodInfo_Constructor#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_21_1.vb)]
  syntax:
    content: public Type ReturnType { get; }
    return:
      type: System.Type
      description: "<xref:System.Type>這個方法所傳回。</xref:System.Type>"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.ReturnType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.ReturnTypeCustomAttributeProvider
  id: ReturnTypeCustomAttributeProvider
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: ReturnTypeCustomAttributeProvider
  nameWithType: LogicalMethodInfo.ReturnTypeCustomAttributeProvider
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.ReturnTypeCustomAttributeProvider
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得自訂屬性的傳回型別。"
  remarks: ''
  example:
  - >-
    [!code-cpp[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/cpp/8b875f48-e18d-4d82-9d82-_1.cpp)]
     [!code-cs[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/csharp/8b875f48-e18d-4d82-9d82-_1.cs)]
     [!code-vb[LogicalMethodInfo_GetCustomAttribute#4](~/add/codesnippet/visualbasic/8b875f48-e18d-4d82-9d82-_1.vb)]
  syntax:
    content: public System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributeProvider { get; }
    return:
      type: System.Reflection.ICustomAttributeProvider
      description: "<xref href=&quot;System.Reflection.ICustomAttributeProvider&quot;> </xref>表示的傳回型別的自訂屬性。"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.ReturnTypeCustomAttributeProvider*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.LogicalMethodInfo.ToString
  id: ToString
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  langs:
  - csharp
  name: ToString()
  nameWithType: LogicalMethodInfo.ToString()
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.ToString()
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "傳回字串，代表目前<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref>。"
  remarks: ''
  example:
  - >-
    [!code-cs[LogicalMethodInfo_Constructor#1](~/add/codesnippet/csharp/m-system.web.services.pr_5_1.cs)]
     [!code-cpp[LogicalMethodInfo_Constructor#1](~/add/codesnippet/cpp/m-system.web.services.pr_5_1.cpp)]
     [!code-vb[LogicalMethodInfo_Constructor#1](~/add/codesnippet/visualbasic/m-system.web.services.pr_5_1.vb)]
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A<xref:System.String>代表目前<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref>。</xref:System.String>"
  overload: System.Web.Services.Protocols.LogicalMethodInfo.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Reflection.TargetException
  parent: System.Reflection
  isExternal: false
  name: TargetException
  nameWithType: TargetException
  fullName: System.Reflection.TargetException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.MemberAccessException
  isExternal: true
  name: System.MemberAccessException
- uid: System.Reflection.TargetInvocationException
  isExternal: true
  name: System.Reflection.TargetInvocationException
- uid: System.TypeLoadException
  isExternal: true
  name: System.TypeLoadException
- uid: System.Web.Services.Protocols.LogicalMethodInfo.#ctor(System.Reflection.MethodInfo)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: LogicalMethodInfo(MethodInfo)
  nameWithType: LogicalMethodInfo.LogicalMethodInfo(MethodInfo)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.LogicalMethodInfo(MethodInfo)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Web.Services.Protocols.LogicalMethodInfo.AsyncCallbackParameter
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: AsyncCallbackParameter
  nameWithType: LogicalMethodInfo.AsyncCallbackParameter
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.AsyncCallbackParameter
- uid: System.Reflection.ParameterInfo
  parent: System.Reflection
  isExternal: true
  name: ParameterInfo
  nameWithType: ParameterInfo
  fullName: System.Reflection.ParameterInfo
- uid: System.Web.Services.Protocols.LogicalMethodInfo.AsyncResultParameter
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: AsyncResultParameter
  nameWithType: LogicalMethodInfo.AsyncResultParameter
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.AsyncResultParameter
- uid: System.Web.Services.Protocols.LogicalMethodInfo.AsyncStateParameter
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: AsyncStateParameter
  nameWithType: LogicalMethodInfo.AsyncStateParameter
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.AsyncStateParameter
- uid: System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke(System.Object,System.Object[],System.AsyncCallback,System.Object)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: BeginInvoke(Object,Object[],AsyncCallback,Object)
  nameWithType: LogicalMethodInfo.BeginInvoke(Object,Object[],AsyncCallback,Object)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke(Object,Object[],AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Web.Services.Protocols.LogicalMethodInfo.BeginMethodInfo
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: BeginMethodInfo
  nameWithType: LogicalMethodInfo.BeginMethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.BeginMethodInfo
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Create(System.Reflection.MethodInfo[])
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: Create(MethodInfo[])
  nameWithType: LogicalMethodInfo.Create(MethodInfo[])
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.Create(MethodInfo[])
- uid: System.Web.Services.Protocols.LogicalMethodInfo[]
  parent: System.Web.Services.Protocols
  isExternal: false
  name: LogicalMethodInfo
  nameWithType: LogicalMethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo[]
  spec.csharp:
  - uid: System.Web.Services.Protocols.LogicalMethodInfo
    name: LogicalMethodInfo
    nameWithType: LogicalMethodInfo
    fullName: LogicalMethodInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.MethodInfo[]
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo[]
  spec.csharp:
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: MethodInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Create(System.Reflection.MethodInfo[],System.Web.Services.Protocols.LogicalMethodTypes)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: Create(MethodInfo[],LogicalMethodTypes)
  nameWithType: LogicalMethodInfo.Create(MethodInfo[],LogicalMethodTypes)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.Create(MethodInfo[],LogicalMethodTypes)
- uid: System.Web.Services.Protocols.LogicalMethodTypes
  parent: System.Web.Services.Protocols
  isExternal: false
  name: LogicalMethodTypes
  nameWithType: LogicalMethodTypes
  fullName: System.Web.Services.Protocols.LogicalMethodTypes
- uid: System.Web.Services.Protocols.LogicalMethodInfo.CustomAttributeProvider
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: CustomAttributeProvider
  nameWithType: LogicalMethodInfo.CustomAttributeProvider
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.CustomAttributeProvider
- uid: System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Web.Services.Protocols.LogicalMethodInfo.DeclaringType
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: DeclaringType
  nameWithType: LogicalMethodInfo.DeclaringType
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.DeclaringType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke(System.Object,System.IAsyncResult)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: EndInvoke(Object,IAsyncResult)
  nameWithType: LogicalMethodInfo.EndInvoke(Object,IAsyncResult)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke(Object,IAsyncResult)
- uid: System.Web.Services.Protocols.LogicalMethodInfo.EndMethodInfo
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: EndMethodInfo
  nameWithType: LogicalMethodInfo.EndMethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.EndMethodInfo
- uid: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttribute(System.Type)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: GetCustomAttribute(Type)
  nameWithType: LogicalMethodInfo.GetCustomAttribute(Type)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttribute(Type)
- uid: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes(System.Type)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: GetCustomAttributes(Type)
  nameWithType: LogicalMethodInfo.GetCustomAttributes(Type)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes(Type)
- uid: System.Web.Services.Protocols.LogicalMethodInfo.InParameters
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: InParameters
  nameWithType: LogicalMethodInfo.InParameters
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.InParameters
- uid: System.Reflection.ParameterInfo[]
  parent: System.Reflection
  isExternal: true
  name: ParameterInfo
  nameWithType: ParameterInfo
  fullName: System.Reflection.ParameterInfo[]
  spec.csharp:
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: ParameterInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Invoke(System.Object,System.Object[])
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: Invoke(Object,Object[])
  nameWithType: LogicalMethodInfo.Invoke(Object,Object[])
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.Invoke(Object,Object[])
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsAsync
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: IsAsync
  nameWithType: LogicalMethodInfo.IsAsync
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.IsAsync
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsBeginMethod(System.Reflection.MethodInfo)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: IsBeginMethod(MethodInfo)
  nameWithType: LogicalMethodInfo.IsBeginMethod(MethodInfo)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.IsBeginMethod(MethodInfo)
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsEndMethod(System.Reflection.MethodInfo)
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: IsEndMethod(MethodInfo)
  nameWithType: LogicalMethodInfo.IsEndMethod(MethodInfo)
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.IsEndMethod(MethodInfo)
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsVoid
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: IsVoid
  nameWithType: LogicalMethodInfo.IsVoid
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.IsVoid
- uid: System.Web.Services.Protocols.LogicalMethodInfo.MethodInfo
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: MethodInfo
  nameWithType: LogicalMethodInfo.MethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.MethodInfo
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Name
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: Name
  nameWithType: LogicalMethodInfo.Name
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Services.Protocols.LogicalMethodInfo.OutParameters
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: OutParameters
  nameWithType: LogicalMethodInfo.OutParameters
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.OutParameters
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Parameters
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: Parameters
  nameWithType: LogicalMethodInfo.Parameters
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.Parameters
- uid: System.Web.Services.Protocols.LogicalMethodInfo.ReturnType
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: ReturnType
  nameWithType: LogicalMethodInfo.ReturnType
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.ReturnType
- uid: System.Web.Services.Protocols.LogicalMethodInfo.ReturnTypeCustomAttributeProvider
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: ReturnTypeCustomAttributeProvider
  nameWithType: LogicalMethodInfo.ReturnTypeCustomAttributeProvider
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.ReturnTypeCustomAttributeProvider
- uid: System.Web.Services.Protocols.LogicalMethodInfo.ToString
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: ToString()
  nameWithType: LogicalMethodInfo.ToString()
  fullName: System.Web.Services.Protocols.LogicalMethodInfo.ToString()
- uid: System.Web.Services.Protocols.LogicalMethodInfo.#ctor*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: LogicalMethodInfo
  nameWithType: LogicalMethodInfo.LogicalMethodInfo
- uid: System.Web.Services.Protocols.LogicalMethodInfo.AsyncCallbackParameter*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: AsyncCallbackParameter
  nameWithType: LogicalMethodInfo.AsyncCallbackParameter
- uid: System.Web.Services.Protocols.LogicalMethodInfo.AsyncResultParameter*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: AsyncResultParameter
  nameWithType: LogicalMethodInfo.AsyncResultParameter
- uid: System.Web.Services.Protocols.LogicalMethodInfo.AsyncStateParameter*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: AsyncStateParameter
  nameWithType: LogicalMethodInfo.AsyncStateParameter
- uid: System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: BeginInvoke
  nameWithType: LogicalMethodInfo.BeginInvoke
- uid: System.Web.Services.Protocols.LogicalMethodInfo.BeginMethodInfo*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: BeginMethodInfo
  nameWithType: LogicalMethodInfo.BeginMethodInfo
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Create*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: Create
  nameWithType: LogicalMethodInfo.Create
- uid: System.Web.Services.Protocols.LogicalMethodInfo.CustomAttributeProvider*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: CustomAttributeProvider
  nameWithType: LogicalMethodInfo.CustomAttributeProvider
- uid: System.Web.Services.Protocols.LogicalMethodInfo.DeclaringType*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: DeclaringType
  nameWithType: LogicalMethodInfo.DeclaringType
- uid: System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: EndInvoke
  nameWithType: LogicalMethodInfo.EndInvoke
- uid: System.Web.Services.Protocols.LogicalMethodInfo.EndMethodInfo*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: EndMethodInfo
  nameWithType: LogicalMethodInfo.EndMethodInfo
- uid: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttribute*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: GetCustomAttribute
  nameWithType: LogicalMethodInfo.GetCustomAttribute
- uid: System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: GetCustomAttributes
  nameWithType: LogicalMethodInfo.GetCustomAttributes
- uid: System.Web.Services.Protocols.LogicalMethodInfo.InParameters*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: InParameters
  nameWithType: LogicalMethodInfo.InParameters
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Invoke*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: Invoke
  nameWithType: LogicalMethodInfo.Invoke
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsAsync*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: IsAsync
  nameWithType: LogicalMethodInfo.IsAsync
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsBeginMethod*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: IsBeginMethod
  nameWithType: LogicalMethodInfo.IsBeginMethod
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsEndMethod*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: IsEndMethod
  nameWithType: LogicalMethodInfo.IsEndMethod
- uid: System.Web.Services.Protocols.LogicalMethodInfo.IsVoid*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: IsVoid
  nameWithType: LogicalMethodInfo.IsVoid
- uid: System.Web.Services.Protocols.LogicalMethodInfo.MethodInfo*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: MethodInfo
  nameWithType: LogicalMethodInfo.MethodInfo
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Name*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: Name
  nameWithType: LogicalMethodInfo.Name
- uid: System.Web.Services.Protocols.LogicalMethodInfo.OutParameters*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: OutParameters
  nameWithType: LogicalMethodInfo.OutParameters
- uid: System.Web.Services.Protocols.LogicalMethodInfo.Parameters*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: Parameters
  nameWithType: LogicalMethodInfo.Parameters
- uid: System.Web.Services.Protocols.LogicalMethodInfo.ReturnType*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: ReturnType
  nameWithType: LogicalMethodInfo.ReturnType
- uid: System.Web.Services.Protocols.LogicalMethodInfo.ReturnTypeCustomAttributeProvider*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: ReturnTypeCustomAttributeProvider
  nameWithType: LogicalMethodInfo.ReturnTypeCustomAttributeProvider
- uid: System.Web.Services.Protocols.LogicalMethodInfo.ToString*
  parent: System.Web.Services.Protocols.LogicalMethodInfo
  isExternal: false
  name: ToString
  nameWithType: LogicalMethodInfo.ToString
