### YamlMime:ManagedReference
items:
- uid: System.CharEnumerator
  id: CharEnumerator
  children:
  - System.CharEnumerator.Clone
  - System.CharEnumerator.Current
  - System.CharEnumerator.Dispose
  - System.CharEnumerator.MoveNext
  - System.CharEnumerator.Reset
  - System.CharEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: CharEnumerator
  nameWithType: CharEnumerator
  fullName: System.CharEnumerator
  type: Class
  summary: "支援反覆<xref:System.String>物件及讀取其個別字元。</xref:System.String> 這個類別無法被繼承。"
  remarks: "CharEnumerator 提供唯讀存取的字元參考<xref:System.String>物件。</xref:System.String> 例如，`foreach`陳述式的 Microsoft Visual Basic 和 C# 程式語言，逐一查看集合的項目，這會擷取從 CharEnumerator<xref:System.String>物件以逐一查看該物件中的字元。</xref:System.String>       CharEnumerator 沒有公用建構函式。 請改為呼叫<xref:System.String>物件的<xref:System.String.GetEnumerator%2A>方法，以取得會初始化為參考的字串 CharEnumerator。</xref:System.String.GetEnumerator%2A> </xref:System.String>       CharEnumerator 會維護 CharEnumerator 參考字串中字元的內部索引。 索引的狀態時，在參考字串中的字元位置以邏輯方式第一個字元之前或之後的最後一個字元時，無效和有效值參考字串內的字元。 此索引會初始化為前的第一個字元，邏輯上的位置，並完成反覆項目時的位置設定後的最後一個字元。 如果您嘗試存取該字元不正確的索引時，會擲回例外狀況。       <xref:System.CharEnumerator.MoveNext%2A>方法遞增索引&1;，所以第一個與後續字元會依次存取。</xref:System.CharEnumerator.MoveNext%2A> <xref:System.CharEnumerator.Reset%2A>方法設定以邏輯方式前的第一個字元的位置索引。</xref:System.CharEnumerator.Reset%2A> <xref:System.CharEnumerator.Current%2A>屬性擷取目前由索引所參考的字元。</xref:System.CharEnumerator.Current%2A> <xref:System.CharEnumerator.Clone%2A>方法會建立一份 CharEnumerator。</xref:System.CharEnumerator.Clone%2A>      > [!NOTE] > CharEnumerator 在一或多個執行緒之間的數個獨立的執行個體可以存取<xref:System.String>.</xref:System.String>的單一執行個體 這個類別會實作以支援<xref:System.Collections.IEnumerator>介面。</xref:System.Collections.IEnumerator> 如需有關使用的列舉值，請參閱<xref:System.Collections.IEnumerator>主題。</xref:System.Collections.IEnumerator>"
  example:
  - "The following example uses the CharEnumerator class to enumerate the individual characters in a string. It instantiates a CharEnumerator object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/t-system.charenumerator_1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/t-system.charenumerator_1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/t-system.charenumerator_1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/t-system.charenumerator_2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/t-system.charenumerator_2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/t-system.charenumerator_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator<char>
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerator<System.Char>
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.CharEnumerator.Clone
  id: Clone
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Clone()
  nameWithType: CharEnumerator.Clone()
  fullName: System.CharEnumerator.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "建立一份目前<xref href=&quot;System.CharEnumerator&quot;></xref>物件。"
  remarks: "傳回值是這個執行個體的副本<xref:System.CharEnumerator>和其目前狀態。</xref:System.CharEnumerator> 這可用於逐一查看時儲存您的狀態<xref:System.String>物件。</xref:System.String>       例如，假設您的應用程式使用<xref:System.CharEnumerator>來逐一查看<xref:System.String>.</xref:System.String>中每個字元</xref:System.CharEnumerator>的原始執行個體 遇到某些唯一的字元時，您的應用程式會暫停處理，並叫用複製方法。 作用中，這會儲存<xref:System.CharEnumerator>在<xref:System.String>.</xref:System.String>物件的索引</xref:System.CharEnumerator>       應用程式用來瀏覽至另一個部分的複製`String`執行一些輔助的處理。 這個巡覽的副作用是位置的複製遺失停止處理。 不過，輔助的處理序完成時，您的應用程式會捨棄複製並使用原始<xref:System.CharEnumerator>繼續使用在執行個體<xref:System.String>原始處理停止。</xref:System.String> </xref:System.CharEnumerator>      > [!NOTE] > 會實作這個方法，以支援<xref:System.ICloneable>介面。</xref:System.ICloneable>"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "<xref:System.Object>也就是目前的複本<xref href=&quot;System.CharEnumerator&quot;></xref>物件。</xref:System.Object>"
  overload: System.CharEnumerator.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.Current
  id: Current
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: CharEnumerator.Current
  fullName: System.CharEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得這個列舉的字串中目前參考的字元<xref href=&quot;System.CharEnumerator&quot;></xref>物件。"
  remarks: "<xref:System.CharEnumerator>類別會維護列舉字串的內部索引和目前的屬性會傳回目前正由索引所參考的字元。</xref:System.CharEnumerator> 索引無效; 時，才應叫用這個屬性否則，會擲回例外狀況。       索引一定是無效的空字串 (&quot;&quot;)。 索引也不正確之後<xref:System.String.GetEnumerator%2A?displayProperty=fullName>或<xref:System.CharEnumerator.Reset%2A>方法呼叫。</xref:System.CharEnumerator.Reset%2A> </xref:System.String.GetEnumerator%2A?displayProperty=fullName> 其中一種方法呼叫之後，叫用<xref:System.CharEnumerator.MoveNext%2A>方法，以調整列舉字串的第一個字元的索引。</xref:System.CharEnumerator.MoveNext%2A> 索引是有效每當<xref:System.CharEnumerator.MoveNext%2A>方法會傳回`true`。</xref:System.CharEnumerator.MoveNext%2A>       目前不會移動索引，並對目前連續呼叫傳回相同的字元，直到<xref:System.CharEnumerator.MoveNext%2A>， <xref:System.CharEnumerator.Reset%2A>，或<xref:System.String.GetEnumerator%2A?displayProperty=fullName>稱為。</xref:System.String.GetEnumerator%2A?displayProperty=fullName> </xref:System.CharEnumerator.Reset%2A> </xref:System.CharEnumerator.MoveNext%2A>"
  example:
  - "The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string. It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the Current property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/p-system.charenumerator._1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/p-system.charenumerator._1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/p-system.charenumerator._1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/p-system.charenumerator._2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/p-system.charenumerator._2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/p-system.charenumerator._2.vb)]"
  syntax:
    content: public char Current { get; }
    return:
      type: System.Char
      description: "目前所參考的 Unicode 字元<xref href=&quot;System.CharEnumerator&quot;></xref>物件。"
  overload: System.CharEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "索引不正確;也就是說，它是第一個之前或之後列舉字串的最後一個字元。"
  platform:
  - net462
- uid: System.CharEnumerator.Dispose
  id: Dispose
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: CharEnumerator.Dispose()
  fullName: System.CharEnumerator.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "目前的執行個體所使用的資源全部釋出<xref href=&quot;System.CharEnumerator&quot;></xref>類別。"
  remarks: "當您完成使用<xref:System.CharEnumerator>.</xref:System.CharEnumerator>呼叫 Dispose Dispose 方法會使<xref:System.CharEnumerator>中無法使用的狀態。</xref:System.CharEnumerator> 在呼叫 Dispose 之後，您必須釋放所有參考<xref:System.CharEnumerator>讓記憶體回收行程可以回收記憶體的<xref:System.CharEnumerator>所佔用。</xref:System.CharEnumerator> </xref:System.CharEnumerator>       如需詳細資訊，請參閱[清除 Unmanaged 資源上](~/add/includes/ajax-current-ext-md.md)和[實作 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      > [!NOTE] > 永遠呼叫 Dispose 之後，再放開您的最後一個參考至<xref:System.CharEnumerator>。</xref:System.CharEnumerator> 否則，它所使用的資源將不會釋放直到記憶體回收行程呼叫<xref:System.CharEnumerator>物件的`Finalize`方法。</xref:System.CharEnumerator>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.CharEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.MoveNext
  id: MoveNext
  parent: System.CharEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: CharEnumerator.MoveNext()
  fullName: System.CharEnumerator.MoveNext()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "遞增目前的內部索引<xref href=&quot;System.CharEnumerator&quot;></xref>列舉字串的下一個字元的物件。"
  remarks: "<xref:System.CharEnumerator>類別會維護列舉字串的內部索引和 MoveNext 方法索引遞增一。</xref:System.CharEnumerator> 在呼叫之後呼叫 MoveNext<xref:System.String.GetEnumerator%2A>或<xref:System.CharEnumerator.Reset%2A>遞增列舉字串中的第一個字元目前字元位置。</xref:System.CharEnumerator.Reset%2A> </xref:System.String.GetEnumerator%2A> 傳回值的核取`true`來判斷目前的字元位置無效。       如果索引超出列舉字串的最後一個字元，不會變更索引和`false`傳回。       請注意，如果是空的列舉的字串 (&quot;&quot;)，則狀態的<xref:System.CharEnumerator>永遠無效。</xref:System.CharEnumerator> 這是因為內部索引<xref:System.CharEnumerator>一開始是先列舉字串的第一個字元，因此無效。</xref:System.CharEnumerator> MoveNext 以邏輯方式設定的索引，這也是無效的列舉字串 （不存在） 的最後一個字元之後。"
  example:
  - "The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string. It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the MoveNext method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/m-system.charenumerator._1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/m-system.charenumerator._1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/m-system.charenumerator._1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/m-system.charenumerator._2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/m-system.charenumerator._2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/m-system.charenumerator._2.vb)]"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果成功遞增索引和列舉的字串; 內否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.CharEnumerator.MoveNext*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.Reset
  id: Reset
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: CharEnumerator.Reset()
  fullName: System.CharEnumerator.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化以邏輯方式前列舉字串的第一個字元的位置的索引。"
  remarks: "<xref:System.CharEnumerator>類別會維護列舉字串的內部索引和 Reset 方法設定為無效狀態的索引。</xref:System.CharEnumerator>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.CharEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.CharEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
  fullName: System.CharEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得這個列舉的字串中目前參考的字元<xref href=&quot;System.CharEnumerator&quot;></xref>物件。 如需這個成員的說明，請參閱&lt;xref:System.Collections.IEnumerator.Current%2A?displayProperty=fullName&gt;。"
  remarks: "這個成員是明確介面成員實作。 它可用時，才<xref:System.CharEnumerator>執行個體轉換成<xref:System.Collections.IEnumerator>介面。</xref:System.Collections.IEnumerator> </xref:System.CharEnumerator>"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "目前所參考的 boxed 的 Unicode 字元<xref href=&quot;System.CharEnumerator&quot;></xref>物件。"
  overload: System.CharEnumerator.System#Collections#IEnumerator#Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "列舉尚未啟動。       -或者-列舉已經結束。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.CharEnumerator.Clone
  parent: System.CharEnumerator
  isExternal: false
  name: Clone()
  nameWithType: CharEnumerator.Clone()
  fullName: System.CharEnumerator.Clone()
- uid: System.CharEnumerator.Current
  parent: System.CharEnumerator
  isExternal: false
  name: Current
  nameWithType: CharEnumerator.Current
  fullName: System.CharEnumerator.Current
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.CharEnumerator.Dispose
  parent: System.CharEnumerator
  isExternal: false
  name: Dispose()
  nameWithType: CharEnumerator.Dispose()
  fullName: System.CharEnumerator.Dispose()
- uid: System.CharEnumerator.MoveNext
  parent: System.CharEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: CharEnumerator.MoveNext()
  fullName: System.CharEnumerator.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.CharEnumerator.Reset
  parent: System.CharEnumerator
  isExternal: false
  name: Reset()
  nameWithType: CharEnumerator.Reset()
  fullName: System.CharEnumerator.Reset()
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current
  parent: System.CharEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
  fullName: System.CharEnumerator.System.Collections.IEnumerator.Current
- uid: System.CharEnumerator.Clone*
  parent: System.CharEnumerator
  isExternal: false
  name: Clone
  nameWithType: CharEnumerator.Clone
- uid: System.CharEnumerator.Current*
  parent: System.CharEnumerator
  isExternal: false
  name: Current
  nameWithType: CharEnumerator.Current
- uid: System.CharEnumerator.Dispose*
  parent: System.CharEnumerator
  isExternal: false
  name: Dispose
  nameWithType: CharEnumerator.Dispose
- uid: System.CharEnumerator.MoveNext*
  parent: System.CharEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: CharEnumerator.MoveNext
- uid: System.CharEnumerator.Reset*
  parent: System.CharEnumerator
  isExternal: false
  name: Reset
  nameWithType: CharEnumerator.Reset
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current*
  parent: System.CharEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
