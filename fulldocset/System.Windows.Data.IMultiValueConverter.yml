### YamlMime:ManagedReference
items:
- uid: System.Windows.Data.IMultiValueConverter
  id: IMultiValueConverter
  children:
  - System.Windows.Data.IMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)
  - System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)
  langs:
  - csharp
  name: IMultiValueConverter
  nameWithType: IMultiValueConverter
  fullName: System.Windows.Data.IMultiValueConverter
  type: Interface
  summary: "提供方法來套用在自訂邏輯<xref href=&quot;System.Windows.Data.MultiBinding&quot;> </xref>。"
  remarks: "轉換器，並使<xref:System.Windows.Data.MultiBinding>、 建立實作 IMultiValueConverter 介面的類別，然後實作<xref:System.Windows.Data.IMultiValueConverter.Convert%2A>和<xref:System.Windows.Data.IMultiValueConverter.ConvertBack%2A>方法。</xref:System.Windows.Data.IMultiValueConverter.ConvertBack%2A> </xref:System.Windows.Data.IMultiValueConverter.Convert%2A> </xref:System.Windows.Data.MultiBinding>       個別的繫結集合中可以有自己的值轉換器。 如需詳細資訊，請參閱<xref:System.Windows.Data.IValueConverter>.</xref:System.Windows.Data.IValueConverter>"
  syntax:
    content: public interface IMultiValueConverter
  implements: []
  platform:
  - net462
- uid: System.Windows.Data.IMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)
  id: Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)
  parent: System.Windows.Data.IMultiValueConverter
  langs:
  - csharp
  name: Convert(Object[],Type,Object,CultureInfo)
  nameWithType: IMultiValueConverter.Convert(Object[],Type,Object,CultureInfo)
  fullName: System.Windows.Data.IMultiValueConverter.Convert(Object[],Type,Object,CultureInfo)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "將來源值轉換為繫結目標的值。 從來源繫結至繫結目標值傳播時，資料繫結引擎會呼叫這個方法。"
  remarks: "資料繫結引擎不會攔截例外狀況擲回由使用者提供的轉換器。 轉換方法，所擲回任何例外狀況或方法呼叫轉換方法，所擲回任何無法攔截例外狀況會視為執行階段錯誤。 處理預期的問題，藉由傳回<xref:System.Windows.DependencyProperty>。<xref:System.Windows.DependencyProperty.UnsetValue>.</xref:System.Windows.DependencyProperty.UnsetValue> </xref:System.Windows.DependencyProperty>"
  syntax:
    content: public object Convert (object[] values, Type targetType, object parameter, System.Globalization.CultureInfo culture);
    parameters:
    - id: values
      type: System.Object[]
      description: "值的陣列中的來源繫結<xref href=&quot;System.Windows.Data.MultiBinding&quot;></xref>產生。 值<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref>表示來源繫結沒有值可提供轉換。"
    - id: targetType
      type: System.Type
      description: "繫結目標屬性的型別。"
    - id: parameter
      type: System.Object
      description: "要使用的轉換子參數。"
    - id: culture
      type: System.Globalization.CultureInfo
      description: "要轉換程式中使用的文化特性。"
    return:
      type: System.Object
      description: "轉換的值。       如果此方法會傳回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，有效<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>會使用值。       傳回值為<xref href=&quot;System.Windows.DependencyProperty&quot;> </xref>。<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref> 表示轉換器未產生值，而且繫結會使用<> *> 如果是的話，否則將會使用預設值。     傳回值為<xref href=&quot;System.Windows.Data.Binding&quot;> </xref>。<xref href=&quot;System.Windows.Data.Binding.DoNothing&quot;></xref>表示繫結不會不傳送值或使用<> *> 或預設值。"
  overload: System.Windows.Data.IMultiValueConverter.Convert*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)
  id: ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)
  parent: System.Windows.Data.IMultiValueConverter
  langs:
  - csharp
  name: ConvertBack(Object,Type[],Object,CultureInfo)
  nameWithType: IMultiValueConverter.ConvertBack(Object,Type[],Object,CultureInfo)
  fullName: System.Windows.Data.IMultiValueConverter.ConvertBack(Object,Type[],Object,CultureInfo)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "將繫結目標值轉換為繫結來源的值。"
  remarks: "如果有多個傳回值中的繫結項目比<xref:System.Windows.Data.MultiBinding>，會忽略的過多的傳回值。</xref:System.Windows.Data.MultiBinding> 如果有傳回值的來源繫結，剩餘的來源繫結中沒有對它們設定任何值。 傳回值的類型不會驗證針對`targetTypes`; 的值都會直接設定的來源繫結上。       傳回<xref:System.Windows.Data.Binding.DoNothing>位置`i`來指出沒有值的索引處的來源繫結上設定`i`。</xref:System.Windows.Data.Binding.DoNothing>       傳回<xref:System.Windows.DependencyProperty>。<xref:System.Windows.DependencyProperty.UnsetValue>位置`i`表示無法提供來源繫結索引處的值轉換器`i`，且沒有值會以一致的情形。 設定</xref:System.Windows.DependencyProperty.UnsetValue></xref:System.Windows.DependencyProperty>       傳回`null`表示轉換器無法執行轉換，或它不支援轉換以這個方向。       資料繫結引擎不會攔截例外狀況擲回由使用者提供的轉換器。 ConvertBack 方法擲回任何例外狀況或 ConvertBack 方法呼叫的方法所擲回任何無法攔截例外狀況會視為執行階段錯誤。 處理預期的問題，藉由傳回`null`。"
  syntax:
    content: public object[] ConvertBack (object value, Type[] targetTypes, object parameter, System.Globalization.CultureInfo culture);
    parameters:
    - id: value
      type: System.Object
      description: "所繫結目標所產生的值。"
    - id: targetTypes
      type: System.Type[]
      description: "要轉換成的型別陣列。 陣列長度表示的數目和類型的建議方法傳回的值。"
    - id: parameter
      type: System.Object
      description: "要使用的轉換子參數。"
    - id: culture
      type: System.Globalization.CultureInfo
      description: "要轉換程式中使用的文化特性。"
    return:
      type: System.Object[]
      description: "已從目標值轉換回來源值的值陣列。"
  overload: System.Windows.Data.IMultiValueConverter.ConvertBack*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Data.IMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)
  parent: System.Windows.Data.IMultiValueConverter
  isExternal: false
  name: Convert(Object[],Type,Object,CultureInfo)
  nameWithType: IMultiValueConverter.Convert(Object[],Type,Object,CultureInfo)
  fullName: System.Windows.Data.IMultiValueConverter.Convert(Object[],Type,Object,CultureInfo)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)
  parent: System.Windows.Data.IMultiValueConverter
  isExternal: false
  name: ConvertBack(Object,Type[],Object,CultureInfo)
  nameWithType: IMultiValueConverter.ConvertBack(Object,Type[],Object,CultureInfo)
  fullName: System.Windows.Data.IMultiValueConverter.ConvertBack(Object,Type[],Object,CultureInfo)
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Data.IMultiValueConverter.Convert*
  parent: System.Windows.Data.IMultiValueConverter
  isExternal: false
  name: Convert
  nameWithType: IMultiValueConverter.Convert
- uid: System.Windows.Data.IMultiValueConverter.ConvertBack*
  parent: System.Windows.Data.IMultiValueConverter
  isExternal: false
  name: ConvertBack
  nameWithType: IMultiValueConverter.ConvertBack
