### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.SecurityToken
  id: SecurityToken
  children:
  - System.IdentityModel.Tokens.SecurityToken.#ctor
  - System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1
  - System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1
  - System.IdentityModel.Tokens.SecurityToken.Id
  - System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Tokens.SecurityToken.SecurityKeys
  - System.IdentityModel.Tokens.SecurityToken.ValidFrom
  - System.IdentityModel.Tokens.SecurityToken.ValidTo
  langs:
  - csharp
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: System.IdentityModel.Tokens.SecurityToken
  type: Class
  summary: "表示用來實作所有安全性權杖的基底類別。"
  remarks: "使用安全性權杖，來提供驗證認證或保護訊息。       安全性權杖可以用來提供驗證認證，密碼編譯金鑰的資料，或者，在安全性權杖的情況下發出安全性權杖服務 (STS)，關於主體的宣告集合。 從 SecurityToken 類別衍生的所有安全性權杖。       從.NET 4.5 開始，Windows Identity Foundation (WIF) 完全整合到.NET Framework 和 WIF 所公開的類別會處理您的程式碼中的安全性權杖的慣用的方法。 在 WIF 中會序列化和還原序列化安全性權杖和從其 XML 表示法是驗證及使用衍生自的<xref:System.IdentityModel.Tokens.SecurityTokenHandler>基底類別。</xref:System.IdentityModel.Tokens.SecurityTokenHandler> 驗證權杖不只確保權杖有效的但也會傳回包含<xref:System.Security.Claims.ClaimsIdentity>執行個體的語彙基元可用於進行驗證和授權決策。</xref:System.Security.Claims.ClaimsIdentity> <xref:System.Security.Claims.ClaimsIdentity>建構由權杖處理常式實作的<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A>方法從也都是內建權杖的宣告型別本身為權杖中包含的宣告。</xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> </xref:System.Security.Claims.ClaimsIdentity>       WIF 隨附支援下列類型的安全性語彙基元:- <xref:System.IdentityModel.Tokens.Saml2SecurityToken>︰ 表示以 SAML 2.0 判斷提示為基礎的安全性權杖。</xref:System.IdentityModel.Tokens.Saml2SecurityToken> 這個語彙基元的型別通常會發出安全性權杖服務要求回應中 Ws-trust 或 WS-同盟安全性權杖 (RST)。      - <xref:System.IdentityModel.Tokens.SamlSecurityToken>︰ 表示 SAML 1.1 判斷提示為基礎的安全性權杖。</xref:System.IdentityModel.Tokens.SamlSecurityToken> 這個語彙基元的型別通常會發出安全性權杖服務要求回應中 Ws-trust 或 WS-同盟安全性權杖 (RST)。      -<xref:System.IdentityModel.Tokens.KerberosRequestorSecurityToken>和<xref:System.IdentityModel.Tokens.KerberosReceiverSecurityToken>︰ 表示已接收或傳送 SOAP 訊息層中 Kerberos 票證為基礎的安全性權杖<xref:System.IdentityModel.Tokens.RsaSecurityToken>︰ 表示使用 RSA 演算法建立的索引鍵為基礎的安全性權杖。</xref:System.IdentityModel.Tokens.RsaSecurityToken> </xref:System.IdentityModel.Tokens.KerberosReceiverSecurityToken> </xref:System.IdentityModel.Tokens.KerberosRequestorSecurityToken>      - <xref:System.IdentityModel.Tokens.SessionSecurityToken>︰ 表示包含在工作階段的相關資訊的安全性權杖。</xref:System.IdentityModel.Tokens.SessionSecurityToken>      - <xref:System.IdentityModel.Tokens.UserNameSecurityToken>︰ 表示使用者名稱和密碼為基礎的安全性權杖。</xref:System.IdentityModel.Tokens.UserNameSecurityToken>      - <xref:System.IdentityModel.Tokens.WindowsSecurityToken>︰ 表示 Windows 網域或使用者帳戶的身分識別為基礎的安全性權杖。</xref:System.IdentityModel.Tokens.WindowsSecurityToken>      - <xref:System.IdentityModel.Tokens.X509SecurityToken>︰ 表示以 X.509 憑證為基礎的安全性權杖。</xref:System.IdentityModel.Tokens.X509SecurityToken>      - <xref:System.IdentityModel.Tokens.X509WindowsSecurityToken>︰ 表示對應至 Windows 網域使用者或本機電腦使用者帳戶的 X.509 憑證為基礎的安全性權杖。</xref:System.IdentityModel.Tokens.X509WindowsSecurityToken>       兩個其他安全性權杖的類別、<xref:System.IdentityModel.Tokens.GenericXmlSecurityToken>和<xref:System.IdentityModel.Tokens.EncryptedSecurityToken>，可用來協助處理一般情況。</xref:System.IdentityModel.Tokens.EncryptedSecurityToken> </xref:System.IdentityModel.Tokens.GenericXmlSecurityToken>       廣泛說話的安全性權杖可分成三大類:-權杖執行，或參考密碼編譯金鑰材料。 例如<xref:System.IdentityModel.Tokens.RsaSecurityToken>和<xref:System.IdentityModel.Tokens.X509SecurityToken>類型通常用於此目的。</xref:System.IdentityModel.Tokens.X509SecurityToken> </xref:System.IdentityModel.Tokens.RsaSecurityToken>      -代表已驗證的使用者認證的權杖。 例如， <xref:System.IdentityModel.Tokens.UserNameSecurityToken>， <xref:System.IdentityModel.Tokens.WindowsSecurityToken>，並在使用者使用憑證，驗證的情況下<xref:System.IdentityModel.Tokens.X509SecurityToken>型別。</xref:System.IdentityModel.Tokens.X509SecurityToken> </xref:System.IdentityModel.Tokens.WindowsSecurityToken> </xref:System.IdentityModel.Tokens.UserNameSecurityToken>      -使用 Ws-trust 或 WS-同盟通訊協定的安全性權杖的要求回應中安全性權杖服務 (STS) 所核發的權杖。 這些通常傳回中`wst:RequestSecurityTokenResponse`XML 片段。 <xref:System.IdentityModel.Tokens.Saml2SecurityToken>和<xref:System.IdentityModel.Tokens.SamlSecurityToken>類型通常用來代表這些語彙基元。</xref:System.IdentityModel.Tokens.SamlSecurityToken> </xref:System.IdentityModel.Tokens.Saml2SecurityToken>       一種特殊的語彙基元類型<xref:System.IdentityModel.Tokens.SessionSecurityToken>，包含在主動或被動的案例中使用工作階段時重新建立主體所需的資訊。</xref:System.IdentityModel.Tokens.SessionSecurityToken>       將功能加入現有的權杖類型，您可以從特定類型和其相關聯的語彙基元處理常式，以支援您將權杖加入任何新項目衍生。 若要加入新的語彙基元類型支援，您可以直接從 SecurityToken 類別衍生。 當您這樣做時，您也必須建立語彙基元處理常式類別，藉由衍生<xref:System.IdentityModel.Tokens.SecurityTokenHandler>類別。</xref:System.IdentityModel.Tokens.SecurityTokenHandler> 根據您的權杖的方式使用，您可能也需要建立自訂的語彙基元解析程式由衍生自的<xref:System.IdentityModel.Tokens.IssuerTokenResolver>類別及一或多個自訂的金鑰識別碼子句型別藉由衍生<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>類別。</xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> </xref:System.IdentityModel.Tokens.IssuerTokenResolver>"
  example:
  - "The code examples that are used in the SecurityToken topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). It includes an implementation of a `SimpleWebToken` class and a `SimpleWebTokenHandler` class, as well as other classes that support SWT tokens. For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows the implementation of the `SimpleWebToken` class. This class extends SecurityToken.  \n  \n [!code-cs[WifCustomTokenST#1](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtokenconstants.cs#1)]  \n[!code-cs[WifCustomTokenST#2](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#2)]"
  syntax:
    content: public abstract class SecurityToken
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: SecurityToken()
  nameWithType: SecurityToken.SecurityToken()
  fullName: System.IdentityModel.Tokens.SecurityToken.SecurityToken()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "初始化衍生類別中的建構函式呼叫<xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;></xref>類別。"
  syntax:
    content: protected SecurityToken ();
    parameters: []
  overload: System.IdentityModel.Tokens.SecurityToken.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1
  id: CanCreateKeyIdentifierClause``1
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: CanCreateKeyIdentifierClause()
  nameWithType: SecurityToken.CanCreateKeyIdentifierClause()
  fullName: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  syntax:
    content: 'public virtual bool CanCreateKeyIdentifierClause<T> () where T : System.IdentityModel.Tokens.SecurityKeyIdentifierClause;'
    parameters: []
    return:
      type: System.Boolean
      description: "即將加入。"
  overload: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause<T>*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1
  id: CreateKeyIdentifierClause``1
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: CreateKeyIdentifierClause()
  nameWithType: SecurityToken.CreateKeyIdentifierClause()
  fullName: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  syntax:
    content: 'public virtual T CreateKeyIdentifierClause<T> () where T : System.IdentityModel.Tokens.SecurityKeyIdentifierClause;'
    parameters: []
    return:
      type: T
      description: "即將加入。"
  overload: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause<T>*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.Id
  id: Id
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: Id
  nameWithType: SecurityToken.Id
  fullName: System.IdentityModel.Tokens.SecurityToken.Id
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得安全性權杖的唯一識別碼。"
  remarks: "一般而言，當安全性權杖已序列化為 XML，`Id`屬性的安全性權杖設定為 [識別碼] 屬性的值。"
  example:
  - "The code examples that are used in the <xref:System.IdentityModel.Tokens.SecurityToken> topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). It includes an implementation of a `SimpleWebToken` class and a `SimpleWebTokenHandler` class, as well as other classes that support SWT tokens. For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows the override of the Id property.  \n  \n [!code-cs[WifCustomTokenST#1](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtokenconstants.cs#1)]  \n[!code-cs[WifCustomTokenST#3](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#3)]  \n[!code-cs[WifCustomTokenST#4](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#4)]"
  syntax:
    content: public abstract string Id { get; }
    return:
      type: System.String
      description: "安全性權杖的唯一識別碼。"
  overload: System.IdentityModel.Tokens.SecurityToken.Id*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  id: MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
  nameWithType: SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "傳回值，指出這個執行個體的金鑰識別碼是否能夠解析為指定的金鑰識別碼。"
  remarks: "預設實作會支援型別的金鑰識別碼子句<xref:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause></xref:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause>"
  syntax:
    content: public virtual bool MatchesKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause);
    parameters:
    - id: keyIdentifierClause
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref>要與這個執行個體相比較。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> keyIdentifierClause </code>是<xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;></xref>而且具有相同的唯一識別碼<xref:System.IdentityModel.Tokens.SecurityToken.Id*>屬性，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.IdentityModel.Tokens.SecurityToken.Id*>"
  overload: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  id: ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
  nameWithType: SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得指定之金鑰識別碼子句的金鑰。"
  remarks: "ResolveKeyIdentifierClause 方法呼叫<xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A>，先判定指定的金鑰識別碼子句是否與這個執行個體相同。</xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A>       預設實作會傳回第一個項目<xref:System.IdentityModel.Tokens.SecurityToken.SecurityKeys%2A>集合如果集合不是空的而且<xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A>傳回`true`; 否則它會傳回`null`。</xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A> </xref:System.IdentityModel.Tokens.SecurityToken.SecurityKeys%2A>"
  syntax:
    content: public virtual System.IdentityModel.Tokens.SecurityKey ResolveKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause);
    parameters:
    - id: keyIdentifierClause
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref>取得的索引鍵。"
    return:
      type: System.IdentityModel.Tokens.SecurityKey
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKey&quot;> </xref>所代表的索引鍵。"
  overload: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.SecurityKeys
  id: SecurityKeys
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: SecurityKeys
  nameWithType: SecurityToken.SecurityKeys
  fullName: System.IdentityModel.Tokens.SecurityToken.SecurityKeys
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得與安全性權杖相關聯的密碼編譯金鑰。"
  remarks: "使用<xref:System.IdentityModel.Tokens.SamlSecurityToken.SecurityKeys%2A>屬性來設定保護權杖或 SOAP 訊息的這個安全性權杖的密碼編譯金鑰。</xref:System.IdentityModel.Tokens.SamlSecurityToken.SecurityKeys%2A> 索引鍵可用，以及其他項目，來數位簽署或加密權杖或 SOAP 訊息。"
  example:
  - "The code examples that are used in the <xref:System.IdentityModel.Tokens.SecurityToken> topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). It includes an implementation of a `SimpleWebToken` class and a `SimpleWebTokenHandler` class, as well as other classes that support SWT tokens. For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows the override of the SecurityKeys property.  \n  \n [!code-cs[WifCustomTokenST#1](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtokenconstants.cs#1)]  \n[!code-cs[WifCustomTokenST#3](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#3)]  \n[!code-cs[WifCustomTokenST#5](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#5)]"
  syntax:
    content: public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Tokens.SecurityKey> SecurityKeys { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityKey}
      description: "A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;型別的<xref href=&quot;System.IdentityModel.Tokens.SecurityKey&quot;> </xref> ，其中包含與安全性權杖相關聯的索引鍵的集合。"
  overload: System.IdentityModel.Tokens.SecurityToken.SecurityKeys*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.ValidFrom
  id: ValidFrom
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: ValidFrom
  nameWithType: SecurityToken.ValidFrom
  fullName: System.IdentityModel.Tokens.SecurityToken.ValidFrom
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得這個安全性權杖無效的時間的第一個瞬間。"
  remarks: "使用 ValidFrom 和<xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A>屬性，以便判斷在其中的時間週期<xref:System.IdentityModel.Tokens.SecurityToken>權杖是有效的。</xref:System.IdentityModel.Tokens.SecurityToken> </xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> 晚於 ValidFrom 和<xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A>屬性所在的安全性權杖有效時間，分別代表時的第一個和最後一個瞬間。</xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A>"
  example:
  - "The code examples that are used in the <xref:System.IdentityModel.Tokens.SecurityToken> topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). It includes an implementation of a `SimpleWebToken` class and a `SimpleWebTokenHandler` class, as well as other classes that support SWT tokens. For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows the override of the ValidFrom property.  \n  \n [!code-cs[WifCustomTokenST#1](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtokenconstants.cs#1)]  \n[!code-cs[WifCustomTokenST#3](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#3)]  \n[!code-cs[WifCustomTokenST#6](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#6)]  \n[!code-cs[WifCustomTokenST#8](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#8)]"
  syntax:
    content: public abstract DateTime ValidFrom { get; }
    return:
      type: System.DateTime
      description: "A<xref:System.DateTime>表示中的這個安全性權杖有效的第一個瞬間。</xref:System.DateTime>"
  overload: System.IdentityModel.Tokens.SecurityToken.ValidFrom*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityToken.ValidTo
  id: ValidTo
  parent: System.IdentityModel.Tokens.SecurityToken
  langs:
  - csharp
  name: ValidTo
  nameWithType: SecurityToken.ValidTo
  fullName: System.IdentityModel.Tokens.SecurityToken.ValidTo
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得最後一個瞬間這個安全性權杖無效。"
  remarks: "使用<xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A>和 ValidTo 屬性，以判斷在其中的時間週期<xref:System.IdentityModel.Tokens.SecurityToken>權杖是有效的。</xref:System.IdentityModel.Tokens.SecurityToken> </xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A>和 ValidTo 屬性所在的安全性權杖有效時間，分別代表時的第一個和最後一個瞬間。</xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A>"
  example:
  - "The code examples that are used in the <xref:System.IdentityModel.Tokens.SecurityToken> topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT). It includes an implementation of a `SimpleWebToken` class and a `SimpleWebTokenHandler` class, as well as other classes that support SWT tokens. For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows the override of the ValidTo property.  \n  \n [!code-cs[WifCustomTokenST#1](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtokenconstants.cs#1)]  \n[!code-cs[WifCustomTokenST#3](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#3)]  \n[!code-cs[WifCustomTokenST#7](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#7)]  \n[!code-cs[WifCustomTokenST#8](~/add/codesnippet/csharp/wifcustomtokenst.simplewebtoken/simplewebtoken.cs#8)]"
  syntax:
    content: public abstract DateTime ValidTo { get; }
    return:
      type: System.DateTime
      description: "A<xref:System.DateTime>表示的最後一個瞬間這個安全性權杖無效。</xref:System.DateTime>"
  overload: System.IdentityModel.Tokens.SecurityToken.ValidTo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IdentityModel.Tokens.SecurityToken.#ctor
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: SecurityToken()
  nameWithType: SecurityToken.SecurityToken()
  fullName: System.IdentityModel.Tokens.SecurityToken.SecurityToken()
- uid: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: CanCreateKeyIdentifierClause()
  nameWithType: SecurityToken.CanCreateKeyIdentifierClause()
  fullName: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: CreateKeyIdentifierClause()
  nameWithType: SecurityToken.CreateKeyIdentifierClause()
  fullName: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause()
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.IdentityModel.Tokens.SecurityToken.Id
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: Id
  nameWithType: SecurityToken.Id
  fullName: System.IdentityModel.Tokens.SecurityToken.Id
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
  nameWithType: SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKeyIdentifierClause
  nameWithType: SecurityKeyIdentifierClause
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
- uid: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
  nameWithType: SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)
- uid: System.IdentityModel.Tokens.SecurityKey
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKey
  nameWithType: SecurityKey
  fullName: System.IdentityModel.Tokens.SecurityKey
- uid: System.IdentityModel.Tokens.SecurityToken.SecurityKeys
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: SecurityKeys
  nameWithType: SecurityToken.SecurityKeys
  fullName: System.IdentityModel.Tokens.SecurityToken.SecurityKeys
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityKey}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<SecurityKey>
  nameWithType: ReadOnlyCollection<SecurityKey>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Tokens.SecurityKey>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.IdentityModel.Tokens.SecurityKey>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Tokens.SecurityKey
    name: SecurityKey
    nameWithType: SecurityKey
    fullName: SecurityKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Tokens.SecurityToken.ValidFrom
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ValidFrom
  nameWithType: SecurityToken.ValidFrom
  fullName: System.IdentityModel.Tokens.SecurityToken.ValidFrom
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IdentityModel.Tokens.SecurityToken.ValidTo
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ValidTo
  nameWithType: SecurityToken.ValidTo
  fullName: System.IdentityModel.Tokens.SecurityToken.ValidTo
- uid: System.IdentityModel.Tokens.SecurityToken.#ctor*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: SecurityToken
  nameWithType: SecurityToken.SecurityToken
- uid: System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause<T>*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: CanCreateKeyIdentifierClause<T>
  nameWithType: SecurityToken.CanCreateKeyIdentifierClause<T>
- uid: System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause<T>*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: CreateKeyIdentifierClause<T>
  nameWithType: SecurityToken.CreateKeyIdentifierClause<T>
- uid: System.IdentityModel.Tokens.SecurityToken.Id*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: Id
  nameWithType: SecurityToken.Id
- uid: System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: MatchesKeyIdentifierClause
  nameWithType: SecurityToken.MatchesKeyIdentifierClause
- uid: System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ResolveKeyIdentifierClause
  nameWithType: SecurityToken.ResolveKeyIdentifierClause
- uid: System.IdentityModel.Tokens.SecurityToken.SecurityKeys*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: SecurityKeys
  nameWithType: SecurityToken.SecurityKeys
- uid: System.IdentityModel.Tokens.SecurityToken.ValidFrom*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ValidFrom
  nameWithType: SecurityToken.ValidFrom
- uid: System.IdentityModel.Tokens.SecurityToken.ValidTo*
  parent: System.IdentityModel.Tokens.SecurityToken
  isExternal: false
  name: ValidTo
  nameWithType: SecurityToken.ValidTo
