### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.ObjectDataSource
  id: ObjectDataSource
  children:
  - System.Web.UI.WebControls.ObjectDataSource.#ctor
  - System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)
  - System.Web.UI.WebControls.ObjectDataSource.CacheDuration
  - System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
  - System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
  - System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
  - System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
  - System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
  - System.Web.UI.WebControls.ObjectDataSource.Delete
  - System.Web.UI.WebControls.ObjectDataSource.Deleted
  - System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
  - System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
  - System.Web.UI.WebControls.ObjectDataSource.Deleting
  - System.Web.UI.WebControls.ObjectDataSource.EnableCaching
  - System.Web.UI.WebControls.ObjectDataSource.EnablePaging
  - System.Web.UI.WebControls.ObjectDataSource.FilterExpression
  - System.Web.UI.WebControls.ObjectDataSource.Filtering
  - System.Web.UI.WebControls.ObjectDataSource.FilterParameters
  - System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)
  - System.Web.UI.WebControls.ObjectDataSource.GetViewNames
  - System.Web.UI.WebControls.ObjectDataSource.Insert
  - System.Web.UI.WebControls.ObjectDataSource.Inserted
  - System.Web.UI.WebControls.ObjectDataSource.Inserting
  - System.Web.UI.WebControls.ObjectDataSource.InsertMethod
  - System.Web.UI.WebControls.ObjectDataSource.InsertParameters
  - System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)
  - System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
  - System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
  - System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
  - System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
  - System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
  - System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
  - System.Web.UI.WebControls.ObjectDataSource.SaveViewState
  - System.Web.UI.WebControls.ObjectDataSource.Select
  - System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
  - System.Web.UI.WebControls.ObjectDataSource.Selected
  - System.Web.UI.WebControls.ObjectDataSource.Selecting
  - System.Web.UI.WebControls.ObjectDataSource.SelectMethod
  - System.Web.UI.WebControls.ObjectDataSource.SelectParameters
  - System.Web.UI.WebControls.ObjectDataSource.SortParameterName
  - System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
  - System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
  - System.Web.UI.WebControls.ObjectDataSource.TrackViewState
  - System.Web.UI.WebControls.ObjectDataSource.TypeName
  - System.Web.UI.WebControls.ObjectDataSource.Update
  - System.Web.UI.WebControls.ObjectDataSource.Updated
  - System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
  - System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
  - System.Web.UI.WebControls.ObjectDataSource.Updating
  langs:
  - csharp
  name: ObjectDataSource
  nameWithType: ObjectDataSource
  fullName: System.Web.UI.WebControls.ObjectDataSource
  type: Class
  summary: "表示商務物件提供資料給多層式 Web 應用程式架構中的資料繫結控制項。"
  remarks: "本主題內容:-[簡介](#introduction)      -   [用途](#purpose)      -   [擷取資料](#retrieving_data)      -   [執行資料作業](#performing_data_operations)      -   [篩選資料](#filtering_data)      -   [快取](#caching)      -   [功能](#features)      -   [資料檢視](#data_view)      -   [使用 LINQ to SQL](#using_linq_to_sql)      -   [宣告式語法](#declarative_syntax)<a name=&quot;introduction&quot;> </a> # # 簡介 ObjectDataSource 控制項適用於您所建立的類別。       建立方法，擷取並更新資料，並提供 ObjectDataSource 控制項，在標記中的這些方法的名稱。 轉譯或是回傳處理期間，ObjectDataSource 會呼叫您指定的方法。       ObjectDataSource 控制項沒有視覺化呈現。 如此一來，ObjectDataSource 不支援視覺化功能例如<xref:System.Web.UI.DataSourceControl.EnableTheming%2A>或<xref:System.Web.UI.DataSourceControl.SkinID%2A>屬性。</xref:System.Web.UI.DataSourceControl.SkinID%2A> </xref:System.Web.UI.DataSourceControl.EnableTheming%2A>      <a name=&quot;purpose&quot;></a># # 用途的常見應用程式設計作法是來分開展示層與商務邏輯，以封裝商務物件的商務邏輯。 這些商務物件會形成之間展示層和資料層，產生三層式應用程式架構的不同層級。 ObjectDataSource 控制項可讓開發人員可以使用 ASP.NET 資料來源控制項，同時保留其三層式應用程式架構。       ObjectDataSource 控制項使用反映來建立商務物件的執行個體並呼叫方法以擷取、 更新、 插入和刪除資料。 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性會識別 ObjectDataSource 所使用的類別名稱。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> ObjectDataSource 控制項建立並終結每個方法呼叫; 類別的執行個體其並未持有物件在記憶體中的 Web 要求的存留期。 如果您使用的商務物件需要許多資源，或因建立和終結耗費資源，這是一個重要的考量。 使用高度耗費資源的物件可能不是最佳的設計選擇，但您可以使用，以控制物件的生命週期<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>      > [!NOTE] > 所識別的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>屬性可以是執行個體方法或`static`(`Shared`在 Visual Basic 中) 的方法。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 如果方法都是`static`(`Shared`在 Visual Basic 中)，無法建立商務物件的執行個體，而<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>不引發事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>      <a name=&quot;retrieving_data&quot;></a># # 擷取來自商務物件，擷取資料的資料集<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性來擷取資料之方法的名稱。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 如果此方法不會傳回<xref:System.Collections.IEnumerable>或<xref:System.Data.DataSet>物件，該物件會包裝在執行階段<xref:System.Collections.IEnumerable>集合。</xref:System.Collections.IEnumerable> </xref:System.Data.DataSet> </xref:System.Collections.IEnumerable> 如果方法簽章有參數，您可以加入<xref:System.Web.UI.WebControls.Parameter>物件加入至<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>集合，然後將它們加入您想要傳遞至方法所指定的值繫結<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.Parameter> 為了讓 ObjectDataSource 控制項使用的參數，參數必須符合的名稱和方法簽章中參數的型別。 如需詳細資訊，請參閱[ObjectDataSource 控制項配合使用參數](~/add/includes/ajax-current-ext-md.md)。       ObjectDataSource 控制項擷取資料時<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法呼叫。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 這個方法會提供以程式設計方式存取所指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 所指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性會自動呼叫繫結至 ObjectDataSource 控制項時其`DataBind`方法呼叫。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 如果您設定`DataSourceID`資料繫結控制項的屬性，控制項自動繫結至資料來源的資料，視需要。 設定`DataSourceID`屬性是 ObjectDataSource 控制項繫結至資料繫結控制項的建議的方法。 或者，您可以設定`DataSource`屬性，但接著您必須明確地呼叫`DataBind`資料繫結控制項的方法。 您可以呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>以程式設計方式在任何時間，以擷取資料的方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>       如需資料繫結控制項繫結至資料來源控制項的詳細資訊，請參閱[繫結至資料使用資料來源控制項](http://msdn.microsoft.com/en-us/e41adfff-8fb8-449e-9cd1-9bd49788c5f7)。      <a name=&quot;performing_data_operations&quot;></a># # 執行資料作業取決於 ObjectDataSource 控制項的商務物件的功能使用，您可以執行資料作業，例如更新、 插入和刪除。 若要執行這些資料作業，設定適當的方法名稱和任何您想要執行的作業相關聯的參數。 例如，更新作業中，設定<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>屬性名稱的商務物件方法會執行更新，並將任何必要的參數來<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 如果 ObjectDataSource 控制項與資料繫結控制項相關聯時，資料繫結控制項所加入的參數。 在此情況下，您需要確定方法的參數名稱相符的資料繫結控制項中的欄位名稱。 在執行更新時<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>呼叫方法時，可以明確地您的程式碼也會自動由資料繫結控制項。</xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 遵循相同的一般模式<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>作業。</xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 商務物件會假設為會執行這些類型的資料作業的一筆記錄一次而批次處理。      <a name=&quot;filtering_data&quot;></a># # 篩選 ObjectDataSource 控制項可以篩選資料所擷取的資料<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性，如果資料以傳回<xref:System.Data.DataSet>或<xref:System.Data.DataTable>物件。</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 您可以設定<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>屬性，即可篩選運算式所使用的格式字串的語法，以及將值繫結至參數中指定的運算式中<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>      <a name=&quot;caching&quot;></a># # 快取雖然 ObjectDataSource 不會保留商務物件的執行個體在多個要求，它可以快取的呼叫所識別的方法結果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 當資料快取，後續呼叫時<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法會傳回快取的資料，而不要建立商務物件，然後呼叫其<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>使用反映。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 快取可讓您避免建立物件，然後呼叫其資料方法，但會犧牲記憶體，在 Web 伺服器上。 ObjectDataSource 自動會快取的資料時<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>屬性設定為`true`，而<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>屬性設定為快取會儲存資料快取會捨棄之前的秒數。</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> 您也可以指定<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>屬性和選用<xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> ObjectDataSource 控制項可讓您快取所有類型的資料，但您應該不會快都取保留資源或無法共用服務的多個要求的狀態的物件 (例如，開啟<xref:System.Data.SqlClient.SqlDataReader>物件)，因為相同的執行個體的物件會用來服務多個要求。</xref:System.Data.SqlClient.SqlDataReader>      <a name=&quot;features&quot;></a># # 功能下表說明 ObjectDataSource 控制項的功能。      |功能 |需求 |  |----------------|------------------|  |選取 |將<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性設定為選取的資料，商務物件方法的名稱和任何必要的參數集合中包含的<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>以程式設計方式或使用資料繫結控制項。 |  |排序 |將<xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A>屬性設定為在執行排序準則<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>方法參數的名稱。 |  |篩選 |設定<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>屬性篩選運算式，並選擇性地加入任何參數，以便<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合來篩選的資料時<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法呼叫。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性所指定的方法必須傳回<xref:System.Data.DataSet>或<xref:System.Data.DataTable>。 |  |分頁 |支援資料來源分頁，如果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>方法包含要擷取的記錄數目上限和要擷取的第一個記錄索引的參數。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 這些參數的名稱必須在設定<xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>屬性，分別。</xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> 資料繫結控制項可能可以執行分頁本身，即使 ObjectDataSource 控制項不支援直接在所指定的方法中的分頁<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 資料繫結控制項，可以執行這項操作的需求是<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性所指定的方法，傳回實作<xref:System.Collections.ICollection>介面的物件。 |  |更新 |設定 「<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>屬性更新的資料，商務物件方法的名稱以及任何必要的參數集合中包含的<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>。 |  |刪除 |設定 「<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>屬性名稱的商務物件方法或函式會刪除資料，以及任何必要的參數集合中包含的<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>。 |  |插入 |將<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>屬性設定為商務物件方法或插入資料，函式的名稱和任何必要的參數集合中包含的<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>。 |  |快取 |將<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>屬性設定為`true`，和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>屬性，根據您想要針對您快取資料的快取行為。 |     > [!NOTE] > 時 ObjectDataSource 類別用於更新或插入資料時，會在用戶端輸入的字串不自動轉換從用戶端文化特性格式為伺服器的文化特性格式。</xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Collections.ICollection> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 例如，用戶端文化特性可能會與日期格式，指定 DD/MM/YYYY，而且在伺服器上的日期格式可能 MM/DD/YYYY。 在此情況下，會在輸入 2009 年 10 月 5 日<xref:System.Web.UI.WebControls.TextBox>為 2009 年 5 月 10 日的控制項，但是會被解譯為 2009 年 10 日。</xref:System.Web.UI.WebControls.TextBox> 2009 年 10 月 15 日會輸入為 15/10/2009年，成為無效的日期會遭到拒絕。      <a name=&quot;data_view&quot;></a># # 資料檢視的所有資料來源控制項，ObjectDataSource 控制項是相關聯的資料來源檢視類別。 ObjectDataSource 控制項時，網頁開發人員用來處理資料，介面<xref:System.Web.UI.WebControls.ObjectDataSourceView>類別是資料繫結控制項所使用的介面。</xref:System.Web.UI.WebControls.ObjectDataSourceView> 此外，<xref:System.Web.UI.WebControls.ObjectDataSourceView>類別說明資料來源控制項的功能，並執行實際工作。</xref:System.Web.UI.WebControls.ObjectDataSourceView> ObjectDataSource 控制項，則只有一個相關聯<xref:System.Web.UI.WebControls.ObjectDataSourceView>，一律會命名為`DefaultView`。</xref:System.Web.UI.WebControls.ObjectDataSourceView> 雖然<xref:System.Web.UI.WebControls.ObjectDataSourceView>物件由<xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A>方法，其屬性和方法的許多包裝，且直接由 ObjectDataSource 控制項。</xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView> 在幕後<xref:System.Web.UI.WebControls.ObjectDataSourceView>物件執行所有的資料作業，包括擷取、 插入、 更新、 刪除、 篩選和排序資料。</xref:System.Web.UI.WebControls.ObjectDataSourceView> 如需詳細資訊，請參閱<xref:System.Web.UI.WebControls.ObjectDataSourceView>.</xref:System.Web.UI.WebControls.ObjectDataSourceView>      <a name=&quot;using_linq_to_sql&quot;></a># # 使用 LINQ to SQL 您可以使用 LINQ to SQL 類別 ObjectDataSource 控制項。 若要這樣做，您將<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性資料內容類別的名稱。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 您也設定<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>執行對應作業的資料內容類別中方法的方法。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 您必須建立<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件，才能取消資料內容類別的處置</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件處理常式 這個步驟是必要的因為 LINQ to SQL 支援延後的執行，而 ObjectDataSource 控制項嘗試處置之後選取作業的資料內容。 如需如何建立 LINQ to SQL 類別的詳細資訊，請參閱[How to︰ 建立 LINQ to SQL 類別，在 Web 專案](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081)。 如需如何取消資料內容類別的處置的範例，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>      ## 使用 Entity Framework 您也可以使用 ObjectDataSource 控制項與 Entity Framework。 如需詳細資訊，請參閱[使用 Entity Framework 和 ObjectDataSource 控制項](http://go.microsoft.com/fwlink/?LinkId=209117)。      <a name=&quot;declarative_syntax&quot;></a>    ## Declarative Syntax      ```   <asp:ObjectDataSource       CacheDuration=&quot;string|Infinite&quot;       CacheExpirationPolicy=&quot;Absolute|Sliding&quot;       CacheKeyDependency=&quot;string&quot;       ConflictDetection=&quot;OverwriteChanges|CompareAllValues&quot;       ConvertNullToDBNull=&quot;True|False&quot;       DataObjectTypeName=&quot;string&quot;       DeleteMethod=&quot;string&quot;       EnableCaching=&quot;True|False&quot;       EnablePaging=&quot;True|False&quot;       EnableTheming=&quot;True|False&quot;       EnableViewState=&quot;True|False&quot;       FilterExpression=&quot;string&quot;       ID=&quot;string&quot;       InsertMethod=&quot;string&quot;       MaximumRowsParameterName=&quot;string&quot;       OldValuesParameterFormatString=&quot;string&quot;       OnDataBinding=&quot;DataBinding event handler&quot;       OnDeleted=&quot;Deleted event handler&quot;       OnDeleting=&quot;Deleting event handler&quot;       OnDisposed=&quot;Disposed event handler&quot;       OnFiltering=&quot;Filtering event handler&quot;       OnInit=&quot;Init event handler&quot;       OnInserted=&quot;Inserted event handler&quot;       OnInserting=&quot;Inserting event handler&quot;       OnLoad=&quot;Load event handler&quot;       OnObjectCreated=&quot;ObjectCreated event handler&quot;       OnObjectCreating=&quot;ObjectCreating event handler&quot;       OnObjectDisposing=&quot;ObjectDisposing event handler&quot;       OnPreRender=&quot;PreRender event handler&quot;       OnSelected=&quot;Selected event handler&quot;       OnSelecting=&quot;Selecting event handler&quot;       OnUnload=&quot;Unload event handler&quot;       OnUpdated=&quot;Updated event handler&quot;       OnUpdating=&quot;Updating event handler&quot;       runat=&quot;server&quot;       SelectCountMethod=&quot;string&quot;       SelectMethod=&quot;string&quot;       SkinID=&quot;string&quot;       SortParameterName=&quot;string&quot;       SqlCacheDependency=&quot;string&quot;       StartRowIndexParameterName=&quot;string&quot;       TypeName=&quot;string&quot;       UpdateMethod=&quot;string&quot;       Visible=&quot;True|False&quot;   >           <DeleteParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </DeleteParameters>           <FilterParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </FilterParameters>           <InsertParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </InsertParameters>           <SelectParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </SelectParameters>           <UpdateParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </UpdateParameters>   </asp:ObjectDataSource>   ```"
  example:
  - "A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://code.msdn.microsoft.com/Project/Download/FileDownload.aspx?ProjectName=aspnetmsdnexamples&DownloadId=14838).  \n  \n This section shows an ObjectDataSource in markup in an .aspx page and it shows the business objects that it works with. The example is the .aspx page. It contains a <xref:System.Web.UI.WebControls.GridView> control that is bound to an ObjectDataSource control. The ObjectDataSource control markup specifies the name of the business object and the name of the business object method to call in order to retrieve data.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_105_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_105_1.aspx)]  \n  \n The following example shows the business object that the ObjectDataSource control in the .aspx page uses. (Many other ObjectDataSource code examples use this business object also.) The example consists of the following two basic classes:  \n  \n-   The `EmployeeLogic` class is the business logic class that the ObjectDataSource uses.  \n  \n-   The `NorthwindEmployee` class defines the data object that is returned by the `GetAllEmployees` method of the `EmployeeLogic` class.  \n  \n An additional `NorthwindDataException` class is provided as a convenience.  \n  \n This set of example classes works with the Northwind Traders database, which is available with Microsoft SQL Server and Microsoft Access. For a complete working example, you must compile and use these classes with the .aspx page example that is provided. For information about how to install the Northwind Traders database, see [How to: Install Sample Databases](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_105_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_105_2.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Selecting")]

      [System.ComponentModel.DefaultProperty("TypeName")]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ObjectDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.ObjectDataSource))]

      [System.Web.UI.ParseChildren(true)]

      [System.Web.UI.PersistChildren(false)]

      public class ObjectDataSource : System.Web.UI.DataSourceControl
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.DataSourceControl
  implements: []
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnPreRender(System.EventArgs)
  - System.Web.UI.Control.OnUnload(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.DataSourceControl.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.DataSourceControl.ClientID
  - System.Web.UI.DataSourceControl.ClientIDMode
  - System.Web.UI.DataSourceControl.Controls
  - System.Web.UI.DataSourceControl.CreateControlCollection
  - System.Web.UI.DataSourceControl.EnableTheming
  - System.Web.UI.DataSourceControl.FindControl(System.String)
  - System.Web.UI.DataSourceControl.Focus
  - System.Web.UI.DataSourceControl.HasControls
  - System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent(System.EventArgs)
  - System.Web.UI.DataSourceControl.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.DataSourceControl.SkinID
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#ContainsListCollection
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#GetList
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetView(System.String)
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetViewNames
  - System.Web.UI.DataSourceControl.Visible
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectDataSource()
  nameWithType: ObjectDataSource.ObjectDataSource()
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "初始化的新執行個體<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>類別。"
  syntax:
    content: public ObjectDataSource ();
    parameters: []
  overload: System.Web.UI.WebControls.ObjectDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectDataSource(String,String)
  nameWithType: ObjectDataSource.ObjectDataSource(String,String)
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource(String,String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "初始化的新執行個體<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>類別具有指定的型別名稱和資料擷取方法的名稱。"
  remarks: "值`typeName`參數可以是位於 Bin 或 App_Code 目錄中的程式碼的不完整的類型或全域組件快取中註冊的程式碼的完整限定的類型名稱。 如果您使用全域組件快取，您必須加入至適當的參考`assemblies`Machine.config 或 Web.config 組態檔的區段。"
  syntax:
    content: public ObjectDataSource (string typeName, string selectMethod);
    parameters:
    - id: typeName
      type: System.String
      description: "類別的名稱， <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>搭配。"
    - id: selectMethod
      type: System.String
      description: "方法的名稱或函式， <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>叫用以擷取資料。"
  overload: System.Web.UI.WebControls.ObjectDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheDuration
  id: CacheDuration
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: CacheDuration
  nameWithType: ObjectDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheDuration
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定以秒為單位，資料來源控制項會快取資料所擷取的時間長度<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>控制項支援的資料快取。</xref:System.Web.UI.WebControls.ObjectDataSource> 雖然快取資料，則呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法擷取資料，從快取，而不是從商務物件<xref:System.Web.UI.WebControls.ObjectDataSource>搭配。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 當快取到期時，<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法從商務物件，擷取資料，並再次快取資料。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>       <xref:System.Web.UI.WebControls.ObjectDataSource>控制項會自動快取資料時<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>屬性設定為`true`和 CacheDuration 屬性設為值大於 0，表示快取會儲存資料快取項目會被捨棄之前的秒數。</xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 值為 0 指出無限長的快取。       持續時間的組合調整快取和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>設定。</xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 如果<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>屬性設定為<xref:System.Web.UI.DataSourceCacheExpiry>值<xref:System.Web.UI.WebControls.ObjectDataSource>會快取資料上的第一個呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法並保留它在記憶體中，最多 CacheDuration 屬性所指定的時間量。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.DataSourceCacheExpiry> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 如果需要記憶體，可能釋放資料持續時間的時間之前。 然後會在下一個呼叫會重新整理快取<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 如果<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>屬性設定為<xref:System.Web.UI.DataSourceCacheExpiry>值，資料來源控制項會快取資料上的第一個呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法，但卻會重設為其保留每個後續呼叫上的快取的時間間隔<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.DataSourceCacheExpiry> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 快取逾期等於 CacheDuration 屬性自上次呼叫時間沒有活動是否<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> object supports caching. The second code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching with an <xref:System.Web.UI.WebControls.ObjectDataSource> object.  \n  \n The following code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> control supports caching. To enable caching, you must implement the method that retrieves data, which is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, to return the data as a <xref:System.Data.DataSet> object. In this example, the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true`, and the CacheDuration and <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> properties are set. The <xref:System.Web.UI.WebControls.ObjectDataSource> caches data that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property for 30 seconds.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1024_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1024_1.aspx)]  \n  \n The following code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching with an <xref:System.Web.UI.WebControls.ObjectDataSource> control. In the base implementation of the `EmployeeLogic` class, the `GetAllEmployees` method returns an <xref:System.Collections.ArrayList> object. Instead of refactoring the object completely to work with the <xref:System.Web.UI.WebControls.ObjectDataSource> on a Web Forms page, a wrapper method named `GetAllEmployeesAsDataSet` is added that returns a set of `NorthwindEmployee` data as a <xref:System.Data.DataSet>.  \n  \n This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ObjectDataSource> class.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1024_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1024_2.cs)]"
  syntax:
    content: public virtual int CacheDuration { get; set; }
    return:
      type: System.Int32
      description: "的秒數<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>快取的結果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>屬性的引動過程。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> 預設值為 0。 值不可為負數。"
  overload: System.Web.UI.WebControls.ObjectDataSource.CacheDuration*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
  id: CacheExpirationPolicy
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: CacheExpirationPolicy
  nameWithType: ObjectDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定快取到期行為，與持續時間，結合時，描述資料來源控制項所使用的快取行為。"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>控制項支援的資料快取。</xref:System.Web.UI.WebControls.ObjectDataSource> 雖然快取資料，則呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法擷取資料，從快取，而不是從商務物件<xref:System.Web.UI.WebControls.ObjectDataSource>搭配。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 當快取到期時，<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法從商務物件，擷取資料，並再次快取資料。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>       <xref:System.Web.UI.WebControls.ObjectDataSource>控制項會自動快取資料時<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>屬性設定為`true`和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>屬性設定為值大於 0，表示快取會儲存資料快取項目會被捨棄之前的秒數。</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 值為 0 表示無限長快取期間。       快取是藉由持續時間和 CacheExpirationPolicy 設定的組合調節。 如果 CacheExpirationPolicy 屬性設定為<xref:System.Web.UI.DataSourceCacheExpiry>值<xref:System.Web.UI.WebControls.ObjectDataSource>會快取資料上的第一個呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法並保留它在記憶體中的最多的時間所指定的量<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.DataSourceCacheExpiry> 如果需要記憶體，可能釋放資料持續時間的時間之前。 然後會在下一個呼叫會重新整理快取<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 如果 CacheExpirationPolicy 屬性設定為<xref:System.Web.UI.DataSourceCacheExpiry>值，資料來源控制項會快取資料上的第一個呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法，但卻會重設為其保留快取中的每個後續呼叫的時間間隔<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.DataSourceCacheExpiry> 快取逾期相當的時間沒有活動是否<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>屬性自上次呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> object supports filtering and caching. The second code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> object.  \n  \n The following code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> control supports filtering and caching. To enable filtering and caching, you must implement the method that retrieves data, which is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, to return the data as a <xref:System.Data.DataSet> object. In this example, caching is enabled because the `EmployeeLogic` object returns data as a <xref:System.Data.DataSet>, the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true`, and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> and CacheExpirationPolicy properties are set. The <xref:System.Web.UI.WebControls.ObjectDataSource> caches data that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property for 30 seconds.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1282_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1282_1.aspx)]  \n  \n The following code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> control. In the base implementation of the `EmployeeLogic` class, the `GetAllEmployees` method returns an <xref:System.Collections.ArrayList>. Instead of refactoring the object completely to work with the <xref:System.Web.UI.WebControls.ObjectDataSource> on a Web Forms page, a wrapper method named `GetAllEmployeesAsDataSet` is added that returns a set of `NorthwindEmployee` data as a <xref:System.Data.DataSet>. This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ObjectDataSource> class.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1282_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1282_2.cs)]"
  syntax:
    content: public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }
    return:
      type: System.Web.UI.DataSourceCacheExpiry
      description: "其中一個<xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;></xref>值。 預設值是<xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;> </xref>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
  id: CacheKeyDependency
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: CacheKeyDependency
  nameWithType: ObjectDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定使用者定義索引鍵相依性連結的所有資料快取物件所建立的資料來源控制項。"
  remarks: "CacheKeyDependency 屬性可以設定為任何任意字串值。       金鑰已過期時，所有快取物件明確已過期。 這可讓您使快取項目所建立的<xref:System.Web.UI.WebControls.ObjectDataSource>從自己的網頁程式碼以程式設計的方式。</xref:System.Web.UI.WebControls.ObjectDataSource>       <xref:System.Web.UI.WebControls.ObjectDataSource>控制項支援的資料快取。</xref:System.Web.UI.WebControls.ObjectDataSource> 雖然快取資料，則呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法擷取資料，從快取，而不是從商務物件<xref:System.Web.UI.WebControls.ObjectDataSource>搭配。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 當快取到期時，<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法從商務物件，擷取資料，並再次快取資料。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>       <xref:System.Web.UI.WebControls.ObjectDataSource>控制項會自動快取資料時<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>屬性設定為`true`和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>屬性設定為值大於 0，表示快取會儲存資料快取項目會被捨棄之前的秒數。</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 值為 0 指出無限長的快取。       您可以設定要建立所建立的所有快取項目之間的相依性的 CacheKeyDependency 屬性<xref:System.Web.UI.WebControls.ObjectDataSource>控制項和索引鍵。</xref:System.Web.UI.WebControls.ObjectDataSource> 您可能會過期的快取項目以程式設計方式在任何時間索引鍵設定為已過期。 使用過期的索引鍵<xref:System.Web.Caching.Cache.Remove%2A?displayProperty=fullName>目前 CacheKeyDependency 值做為參數的方法。</xref:System.Web.Caching.Cache.Remove%2A?displayProperty=fullName>       唯一的快取項目建立的每個組合<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 多個<xref:System.Web.UI.WebControls.ObjectDataSource>控制項可以使用相同的快取項目在案例中使用相同的型別、 方法和參數的資料載入其中。</xref:System.Web.UI.WebControls.ObjectDataSource>"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that retrieve records from the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve and display the employee record that is selected by the user.  \n  \n Caching is enabled for the <xref:System.Web.UI.WebControls.ObjectDataSource> control. Therefore, each record is retrieved only one time from the database. The CacheKeyDependency property is set to \"EmployeeDetails\", but any string value can work as the key. The Web page also includes a <xref:System.Web.UI.WebControls.Button> control that the user can click to expire the cached data.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_180_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_180_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.Control.Load> event and a handler for the <xref:System.Web.UI.WebControls.Button.Click> event of the <xref:System.Web.UI.WebControls.Button> control. The <xref:System.Web.UI.Control.Load> event handler creates a cache item with a key set to the CacheKeyDependency value. The <xref:System.Web.UI.WebControls.Button.Click> event handler removes the cache item whose key is equal to the CacheKeyDependency value. When the cache item is removed, all the cached data that is dependent on the key is expired.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/csharp/p-system.web.ui.webcontr_180_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_180_2.vb)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and the Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_180_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_180_3.cs)]"
  syntax:
    content: public virtual string CacheKeyDependency { get; set; }
    return:
      type: System.String
      description: "可識別的所有快取物件的索引鍵建立<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
  id: ConflictDetection
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ConflictDetection
  nameWithType: ObjectDataSource.ConflictDetection
  fullName: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，這個值會決定是否要將新的值傳遞至<xref uid=&quot;langword_csharp_Update&quot; name=&quot;Update&quot; href=&quot;&quot;></xref>方法或舊的和新值會傳遞至<xref uid=&quot;langword_csharp_Update&quot; name=&quot;Update&quot; href=&quot;&quot;></xref>方法。"
  remarks: "這個屬性會決定是否要將舊的和新值的參數套用至所指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 比方說，如果該方法是由指定<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性會傳回<xref:System.Data.DataTable>控制項與資料行`Name`和`Number`，和 ConflictDetection 屬性設定為<xref:System.Web.UI.ConflictOptions> 欄位中，會針對建立參數`Name`和`Number`的`Update`方法。</xref:System.Web.UI.ConflictOptions> </xref:System.Data.DataTable> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 如果 ConflictDetection 屬性設定為<xref:System.Web.UI.ConflictOptions>值的建立參數`Name`， `Number`， `original_Name`，和`original_Number`。</xref:System.Web.UI.ConflictOptions> (取決於原始值參數的完整名稱<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>屬性。)</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A><xref:System.Web.UI.WebControls.ObjectDataSource>然後判斷方法，是否在指定<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>屬性具有相符的參數。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>       並行存取控制是用來控制如何讀取和多個用戶端存取和管理相同的資料時，存放區中變更資料的資料存放區的技術。 例如，一個用戶端讀取資料並呈現給使用者，而另一個用戶端讀取相同的資料並呈現給不同的使用者。 如果兩個使用者更新的資料，並送出至資料存放區，可能會發生非預期的結果，因為兩個用戶端可能會提供不同的值為相同的資料。 這被視為衝突。 ConflictDetection 屬性設定為<xref:System.Web.UI.ConflictOptions>值`Update`方法可以再比較原始資料來源，以便偵測衝突，並視需要處理這類舊的和新值。</xref:System.Web.UI.ConflictOptions>       ConflictDetection 屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>"
  syntax:
    content: public System.Web.UI.ConflictOptions ConflictDetection { get; set; }
    return:
      type: System.Web.UI.ConflictOptions
      description: "其中一個<xref href=&quot;System.Web.UI.ConflictOptions&quot;></xref>值。 預設值是<xref href=&quot;System.Web.UI.ConflictOptions&quot;> </xref>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
  id: ConvertNullToDBNull
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ConvertNullToDBNull
  nameWithType: ObjectDataSource.ConvertNullToDBNull
  fullName: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，指出是否<xref href=&quot;System.Web.UI.WebControls.Parameter&quot;></xref>值傳遞給更新、 插入或刪除作業會自動轉換從<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>至<xref href=&quot;System.DBNull.Value&quot;></xref>值<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控制項。"
  remarks: "不會將轉換`null`至<xref:System.DBNull.Value>值會在執行階段發生錯誤。</xref:System.DBNull.Value> 使用 ConvertNullToDBNull 屬性來表示是否<xref:System.Web.UI.WebControls.Parameter>值傳遞給更新、 插入或刪除作業會自動轉換從`null`至<xref:System.DBNull.Value>值<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.DBNull.Value> </xref:System.Web.UI.WebControls.Parameter>"
  syntax:
    content: public bool ConvertNullToDBNull { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果有任何<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>值<xref href=&quot;System.Web.UI.WebControls.Parameter&quot;></xref>物件傳遞至<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控制項自動轉換為<xref href=&quot;System.DBNull.Value&quot;></xref>值; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
  id: DataObjectTypeName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: DataObjectTypeName
  nameWithType: ObjectDataSource.DataObjectTypeName
  fullName: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定類別的名稱<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控制項所使用的參數，以更新、 插入或刪除資料的作業，而不是從資料繫結控制項傳遞個別的值。"
  remarks: "而不是指定數個參數傳遞給<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>方法，您可以建立數個資料欄位值彙總的一個物件。</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 這一個物件會傳遞至方法，而不是數個參數。       預設行為<xref:System.Web.UI.WebControls.ObjectDataSource>繫結至資料繫結控制項的控制項時，就會建立資料繫結控制項<xref:System.Web.UI.WebControls.Parameter>資料來源中的每個參數的物件。</xref:System.Web.UI.WebControls.Parameter> </xref:System.Web.UI.WebControls.ObjectDataSource> 如果商務物件有許多欄位，則產生的方法也會有許多欄位。 DataObjectTypeName 屬性可讓您指定的類型具有每個資料欄位的屬性。 然後，而不是將數個參數傳遞給方法，執行階段會建立一個物件，並設定其所有屬性。 此物件會加入至方法呼叫的參數集合。       DataObjectTypeName 屬性所指定的類型必須有預設建構函式沒有參數，所以<xref:System.Web.UI.WebControls.ObjectDataSource>控制項可以建立類型的執行個體。</xref:System.Web.UI.WebControls.ObjectDataSource> 類型也必須具有可設定屬性，可讓<xref:System.Web.UI.WebControls.ObjectDataSource>控制項將填入該物件會從資料繫結控制項的值。</xref:System.Web.UI.WebControls.ObjectDataSource> 屬性名稱<xref:System.Web.UI.WebControls.ObjectDataSource>控制項應完全符合傳遞的資料繫結控制項的值的參數名稱。</xref:System.Web.UI.WebControls.ObjectDataSource>       當 DataObjectTypeName 屬性設定和<xref:System.Web.UI.WebControls.ObjectDataSource>控制項已資料繫結控制項，所指定的方法相關聯<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>屬性必須各有一個參數的 DataObjectTypeName 屬性中指定的型別。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 如果<xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>屬性設定為<xref:System.Web.UI.ConflictOptions>值所指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>屬性必須有一個參數的 DataObjectTypeName 屬性中指定的型別。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> 如果<xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>屬性設定為<xref:System.Web.UI.ConflictOptions>值所指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>屬性必須有兩個參數的 DataObjectTypeName 屬性中指定的型別。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> 第一個參數包含的原始值。第二個參數會包含新值。       DataObjectTypeName 屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>相關聯<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A>"
  example:
  - "The section contains two code examples. The first code example demonstrates how to implement a type that combines all parameter values into one object, using the DataObjectTypeName property. The second code example shows the Web page that uses the two classes that are used in the first code example.  \n  \n The following code example demonstrates how to implement a type that combines all parameter values into one object, using the DataObjectTypeName property. The select method of the `AggregateData` class returns a <xref:System.Data.DataTable> object with two columns named `Name` and `Number`. Similarly, the `NewData` class defines two read/write properties, `Name` and `Number`. The `Insert` method of the `AggregateData` class takes one parameter of type `NewData`. The `TypeName` property of the <xref:System.Web.UI.WebControls.ObjectDataSource> is set to `AggregateData` and the DataObjectTypeName property is set to `NewData`.  \n  \n [!code-cs[ObjectDataSourceDataObjectTypeName#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_183_1.cs)]\n [!code-vb[ObjectDataSourceDataObjectTypeName#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_183_1.vb)]  \n  \n The following code example shows the Web page that uses the two classes that are used in the preceding code example.  \n  \n [!code-cs[ObjectDataSourceDataObjectTypeName#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_183_2.aspx)]\n [!code-vb[ObjectDataSourceDataObjectTypeName#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_183_2.aspx)]"
  syntax:
    content: public string DataObjectTypeName { get; set; }
    return:
      type: System.String
      description: "識別的物件類型的部分或完整限定的類別名稱， <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>可用的參數為<> *>， <> </> *>，或<xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>作業。</xref:System.Web.UI.WebControls.ObjectDataSource.Delete*> 預設為空字串 (&quot;&quot;)。"
  overload: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Delete
  id: Delete
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Delete()
  nameWithType: ObjectDataSource.Delete()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Delete()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "藉由呼叫的方法，由執行刪除作業<> *> 中的任何參數與屬性<> *> 集合。"
  remarks: "執行刪除作業之前，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A> 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件檢查參數的值，並執行任何前置處理之前刪除作業。</xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 若要執行刪除作業<xref:System.Web.UI.WebControls.ObjectDataSourceView>物件使用反映來建立物件所識別的執行個體<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView> 然後它會呼叫的方法，由<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>使用所有相關聯的屬性<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 如果刪除參數來自相關聯的資料繫結控制項時，參數的名稱會根據建立<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 刪除作業完成之後，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A> 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>事件檢查任何傳回值、 輸出參數，以及例外狀況，並執行任何後續處理。</xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>       Delete 方法會委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A>方法<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A>      ## 資料繫結控制項時<xref:System.Web.UI.WebControls.ObjectDataSource>與相關聯控制項的資料繫結控制項，例如<xref:System.Web.UI.WebControls.GridView>控制項，不需要呼叫 Delete 方法，從網頁程式碼。</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> Delete 方法會叫用資料繫結控制項來直接改為。       如需參數合併、 物件存留期，以及方法解析的詳細資訊，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>"
  syntax:
    content: public int Delete ();
    parameters: []
    return:
      type: System.Int32
      description: "值，表示從基礎資料存放區中，刪除資料列數目，如果<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows*>屬性<xref href=&quot;System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs&quot;></xref>中設定<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource.Deleted&quot;></xref>事件; 否則為-1。</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.Delete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Deleted
  id: Deleted
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Deleted
  nameWithType: ObjectDataSource.Deleted
  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "發生時<xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>作業已完成。</xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>"
  remarks: "處理刪除事件來檢查傳回值或輸出參數的值，或是判斷是否發生例外狀況之後<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>作業已完成。</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 傳回值，輸出參數和例外狀況處理屬性都是從<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>與事件相關聯的物件。</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>       您可以使用<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>物件從已刪除的資料列數目傳回<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> 若要這樣做，請設定<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> 如果您從所指定的方法傳回已刪除的資料列數目<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>屬性值是可從<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>物件。</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>       如需處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \n  \n If you click the **Delete** button, the delete operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event before the operation is performed and the `NorthwindEmployeeDeleted` delegate is called to handle the Deleted event after the operation has completed to perform exception handling. In this code example, if a `NorthwindDataException` is thrown, it is handled by the `NorthwindEmployeeDeleted` method.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_116_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_116_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_116_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_116_2.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
  id: DeleteMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: DeleteMethod
  nameWithType: ObjectDataSource.DeleteMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定的方法或函式名稱<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控制項叫用來刪除資料。"
  remarks: "商務物件會假設為一次，而不是批次中刪除資料的一筆記錄。       DeleteMethod 屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A>       請確定參數名稱設定為<xref:System.Web.UI.WebControls.ObjectDataSource>控制<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合符合 select 方法所傳回的資料行名稱。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>      ## 物件存留期 DeleteMethod 屬性所識別的方法可以是執行個體方法或`static`(`Shared`在 Visual Basic 中) 方法。 如果是執行個體方法，會建立商務物件，並終結每次呼叫 DeleteMethod 屬性時。 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>之前呼叫 DeleteMethod 屬性時使用的商務物件的事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 您也可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>之後呼叫 DeleteMethod 屬性時引發的事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 如果實作的商務物件<xref:System.IDisposable>介面，<xref:System.IDisposable.Dispose%2A>方法會終結物件之前呼叫。</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable> 如果該方法是`static`(`Shared`在 Visual Basic 中) 方法，不會建立商務物件，而無法處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>      ## 若要加入參數合併參數<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>三個來源的集合:-從資料繫結控制項，在執行階段。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>      -從`DeleteParameters`項目，以宣告方式。      -從`Deleting`方法，以宣告方式。       首先，將資料繫結控制項所產生的任何參數加入至<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 例如，如果<xref:System.Web.UI.WebControls.ObjectDataSource>控制項繫結至<xref:System.Web.UI.WebControls.GridView>具有資料行的控制`Name`和`Number`，參數`Name`和`Number`加入至集合。</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> 完整名稱的參數取決於<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 這些參數的資料類型是`string`。 下一步，參數中所列`DeleteParameters`加入項目。 如果中的參數`DeleteParameters`找到項目具有相同名稱做為參數已經在<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>修改集合，現有的參數符合參數中指定`DeleteParameters`項目。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 一般而言，這用來修改參數中的資料類型。 最後，您可以透過程式設計方式加入和移除參數中的<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件之前發生<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>方法執行。</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 會合併這些參數之後，就會解決方法。 在下一節討論方法解析。      ## 方法解析時<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>呼叫方法時，資料繫結控制項，以宣告方式中所建立的參數的資料欄位`DeleteParameters`項目，並已加入的參數<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>所有合併事件處理常式。</xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> </xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> （如需詳細資訊，請參閱上一節）。<xref:System.Web.UI.WebControls.ObjectDataSource>物件會嘗試尋找要呼叫的方法。</xref:System.Web.UI.WebControls.ObjectDataSource> 首先，它會尋找具有 DeleteMethod 屬性中指定名稱的一或多個方法。 如果找到相符項目，<xref:System.InvalidOperationException>擲回例外狀況。</xref:System.InvalidOperationException> 如果找到相符項目，則會尋找相符的參數名稱。 例如，假設由所指定的型別<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性有兩個方法，名為`DeleteARecord`。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 一個`DeleteARecord`具有一個參數， `ID`，和其他`DeleteARecord`有兩個參數，`Name`和`Number`。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合具有名為只有一個參數`ID`、`DeleteARecord`方法只`ID`參數呼叫。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 參數的型別不會檢查在解析方法。 參數的順序不重要。       如果<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性設定，方法解決了不同的方式。</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> <xref:System.Web.UI.WebControls.ObjectDataSource>中指定屬性中指定 DeleteMethod，接受一個參數的型別之名稱的方法會尋找<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 在此情況下，參數的名稱並不重要。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \n  \n If you click the **Delete** button, the delete operation is performed using the method that is specified by the DeleteMethod property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event before the operation is performed, and the `NorthwindEmployeeDeleted` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event after the operation has completed to perform exception handling. In this example, if a `NorthwindDataException` is thrown, it is handled by the `NorthwindDataException` delegate.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_23_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_23_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_23_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_23_2.cs)]"
  syntax:
    content: public string DeleteMethod { get; set; }
    return:
      type: System.String
      description: "字串，代表方法的名稱，或函式， <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>使用刪除資料。 預設為空字串 (&quot;&quot;)。"
  overload: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
  id: DeleteParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: DeleteParameters
  nameWithType: ObjectDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得參數集合，其中包含所使用的參數<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*>"
  remarks: "名稱和 DeleteParameters 集合中所包含的參數類型必須符合的名稱和型別中的參數<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>方法簽章。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 參數名稱會受到<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>屬性而且有區分大小寫。</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 集合中的參數取決於資料中的資料繫結控制項以宣告方式，指定的參數和以程式設計方式加入的參數。 如需詳細資訊，請參閱 「 參數合併 」，在<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>和[ObjectDataSource 控制項配合使用參數](~/add/includes/ajax-current-ext-md.md)。</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>       DeleteParameters 屬性擷取<xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A>屬性所包含的<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A>       如需參數合併、 物件存留期，以及方法解析的詳細資訊，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use the DeleteParameters property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \n  \n If you click the **Delete** button, the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event is called with two parameters. One parameter, `EmpID`, comes from the <xref:System.Web.UI.WebControls.DataGrid> control, and is based on the <xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A> property. The other parameter comes from the declarative DeleteParameters property. The `EmployeeLogic` class overloads the `DeleteEmployee` method. One overload takes a `NorthwindEmployee` parameter, and the other takes an <xref:System.Int32> parameter named `anID`. In the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event, the entries in the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> property are adjusted to include only one parameter named `anID` with the value from `original_EmpID`. When the event handler exists, the matching `DeleteEmployee` method is called.  \n  \n The following code example shows the Web page that displays the <xref:System.Web.UI.WebControls.DataGrid> control and handles the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_11#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_729_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_11#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_729_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_11#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_729_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_11#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_729_2.cs)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> ，其中包含所使用的參數<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Deleting
  id: Deleting
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Deleting
  nameWithType: ObjectDataSource.Deleting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "發生於之前<xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>操作。</xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>"
  remarks: "處理刪除事件，以執行額外的初始化專屬於您的應用程式，來驗證參數的值，或若要變更參數值之前<xref:System.Web.UI.WebControls.ObjectDataSource>控制項執行刪除作業。</xref:System.Web.UI.WebControls.ObjectDataSource> 參數是可做為<xref:System.Collections.IDictionary>所存取的集合<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>屬性，由<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>物件。</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> </xref:System.Collections.IDictionary>       您可以藉由設定取消刪除作業<xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>至`true`。</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> </xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A>       如需處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \n  \n If you click the **Delete** button, the delete operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the Deleting event before the operation is performed, and the `NorthwindEmployeeDeleted` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event after the operation has completed to perform exception handling. In this code example, if a `NorthwindDataException` is thrown, it is handled by the `NorthwindEmployeeDeleted` method.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_138_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_138_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_138_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_138_2.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.EnableCaching
  id: EnableCaching
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: EnableCaching
  nameWithType: ObjectDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.ObjectDataSource.EnableCaching
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，指出是否<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控制已啟用快取的資料。"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>控制項支援的資料快取。</xref:System.Web.UI.WebControls.ObjectDataSource> 雖然快取資料，則呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法會擷取快取中的資料而非<xref:System.Web.UI.WebControls.ObjectDataSource>建立商務物件的執行個體，然後呼叫其資料的方法。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 當快取到期時，<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法從商務物件，擷取資料，並再次快取資料。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>       <xref:System.Web.UI.WebControls.ObjectDataSource>控制項會自動快取資料，當 EnableCaching 屬性設定為`true`和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>屬性設定為值大於 0，表示快取會儲存資料快取項目會被捨棄之前的秒數。</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 值為 0 指出無限長的快取。"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that retrieve records from the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve and display the employee record that is selected by the user.  \n  \n Caching is enabled for the <xref:System.Web.UI.WebControls.ObjectDataSource> control. Therefore, each record is retrieved only one time from the database. The <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> property is set to \"EmployeeDetails\", but any string value can work as the key. The Web page also includes a <xref:System.Web.UI.WebControls.Button> control that the user can click to expire the cached data.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_657_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_657_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.Control.Load> event and a handler for the <xref:System.Web.UI.WebControls.Button.Click> event of the <xref:System.Web.UI.WebControls.Button> control. The <xref:System.Web.UI.Control.Load> event handler creates a cache item with a key set to the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> value. The <xref:System.Web.UI.WebControls.Button.Click> event handler removes the cache item whose key is equal to the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> value. When the cache item is removed, all the cached data that is dependent on the key is expired.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/csharp/p-system.web.ui.webcontr_657_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_657_2.vb)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and the Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_657_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_657_3.cs)]"
  syntax:
    content: public virtual bool EnableCaching { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果資料快取的資料來源控制項; 已啟用否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.EnableCaching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "EnableCaching 屬性設定為<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>方法時所指定<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>屬性會傳回<xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref>。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.EnablePaging
  id: EnablePaging
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: EnablePaging
  nameWithType: ObjectDataSource.EnablePaging
  fullName: System.Web.UI.WebControls.ObjectDataSource.EnablePaging
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，這個值，指出資料來源控制項是否支援，它會擷取的資料集進行分頁。"
  remarks: "分頁所<xref:System.Web.UI.WebControls.ObjectDataSource>控制項由設定 EnablePaging <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSource>和 select 方法定義中的商務物件，以適當的參數。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 當 EnablePaging 屬性設定為`true`、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>集合包含兩個額外的參數，要求第一個資料列和要求的資料列數目。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 這兩個參數的命名方式所定義<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> `Select`方法應傳回的資料列，指定索引處開始要求的數目。 因為資料可能不完整地分配依頁面大小，最後一頁可能會包含較少的資料列。 因此，要求資料列數目是實際上會傳回的資料列的最大數目。       資料繫結控制項相關聯的資料繫結控制項上啟用分頁時，呼叫`Select`方法的起始索引和所需的資料列數目。 此外，如果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>屬性設定，將資料繫結控制項之前呈現頁面巡覽區控制項，呼叫的方法。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 例如，如果<xref:System.Web.UI.WebControls.GridView>控制項具有分頁的頁面大小為 5，而且由所指定的方法已啟用<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>屬性傳回 20，只有 4 頁會顯示在頁面巡覽區。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> </xref:System.Web.UI.WebControls.GridView>       EnablePaging 屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>物件。</xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A>"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \n  \n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose EnablePaging property is set to `true`. The <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set to the name of a method that returns the total number of records in the query. The <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> property and the <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_678_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_678_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_678_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_678_2.vb)]  \n  \n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_678_3.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_678_3.vb)]"
  syntax:
    content: public bool EnablePaging { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果資料來源控制項支援的資料進行分頁它擷取。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.EnablePaging*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterExpression
  id: FilterExpression
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: FilterExpression
  nameWithType: ObjectDataSource.FilterExpression
  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterExpression
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定的方法時所套用的篩選運算式所指定<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>屬性稱為。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>控制項支援篩選的資料時，才<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法會傳回<xref:System.Data.DataSet>或<xref:System.Data.DataTable>物件。</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>       用於 FilterExpression 屬性的語法是格式字串樣式運算式。 篩選運算式語法是相同的語法可接受的<xref:System.Data.DataColumn.Expression%2A>屬性。</xref:System.Data.DataColumn.Expression%2A> 如果您加入參數，以便<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合，您也可以包含格式字串的預留位置。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 例如，包含`&quot;{0}&quot;`中替換參數值的運算式。 根據中的參數索引來取代預留位置<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>       您可以在 FilterExpression 屬性中包含參數。 如果參數類型是字串或字元類型，請使用單引號括住參數。 如果參數是數值類型，就不需要引號。       <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合包含評估 FilterExpression 屬性中找到的預留位置的參數。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>       FilterExpression 屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A>      > [!NOTE] > 則應該先驗證您從用戶端接收任何篩選參數值。 執行階段只會取代篩選條件運算式的參數值並將其以套用<xref:System.Data.DataSet>或<xref:System.Data.DataTable>所傳回的物件<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.DataTable> </xref:System.Data.DataSet> 如果您基於安全性考量使用 FilterExpression 屬性來限制傳回的項目數目，您必須先驗證參數值，篩選發生之前。"
  example:
  - "The following code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control to retrieve data from a middle-tier business object and a <xref:System.Web.UI.WebControls.GridView> control to display the results. The <xref:System.Web.UI.WebControls.ObjectDataSource> control can filter data only when the method that retrieves the data retrieves it as a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object. For this reason, the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property identifies a business object method that retrieves data as a <xref:System.Data.DataSet>.  \n  \n The code example consists of a <xref:System.Web.UI.WebControls.TextBox> control, a <xref:System.Web.UI.WebControls.GridView> control, the <xref:System.Web.UI.WebControls.ObjectDataSource> control, and a **Submit** button. By default, the <xref:System.Web.UI.WebControls.TextBox> is populated with the name of one of the Northwind Traders employees. The <xref:System.Web.UI.WebControls.GridView> displays information about the employee that is identified by the name in the <xref:System.Web.UI.WebControls.TextBox>. To retrieve data on another employee, enter the full name of the employee in the <xref:System.Web.UI.WebControls.TextBox>, and then click the **Submit** button.  \n  \n The FilterExpression property specifies an expression that is used to filter the data that is retrieved by the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. It uses parameter placeholders that are evaluated to the parameters that are contained in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection. In this example, the parameter placeholder is bounded by single quotation marks because the type of the parameter is a string type that might contain spaces. If the type of the parameter is a numeric or date type, bounding quotation marks are not required.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_597_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_597_1.aspx)]  \n  \n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \n  \n-   The `EmployeeLogic` class, which is a class that encapsulates business logic.  \n  \n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \n  \n For simplicity, the `EmployeeLogic` class creates a static set of data, rather than retrieving the data from a data tier. It is also helpful for this example, because the sample relies on you to provide the full name of a Northwind Traders employee to demonstrate filtering. For a complete working example, you must compile and use these classes with the Web Forms code examples that are provided.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_597_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_597_2.vb)]"
  syntax:
    content: public string FilterExpression { get; set; }
    return:
      type: System.String
      description: "字串，代表所使用的方法或函式所識別擷取資料時所套用的篩選運算式<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.FilterExpression*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "FilterExpression 屬性已設定和<xref:System.Web.UI.WebControls.ObjectDataSource.Select*>方法不會傳回<xref href=&quot;System.Data.DataSet&quot;></xref>或<xref href=&quot;System.Data.DataTable&quot;> </xref>。</xref:System.Web.UI.WebControls.ObjectDataSource.Select*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Filtering
  id: Filtering
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Filtering
  nameWithType: ObjectDataSource.Filtering
  fullName: System.Web.UI.WebControls.ObjectDataSource.Filtering
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "篩選作業之前發生。"
  remarks: "處理篩選事件，以執行驗證作業篩選參數值之前<xref:System.Web.UI.WebControls.ObjectDataSource>控制項執行篩選作業。</xref:System.Web.UI.WebControls.ObjectDataSource> 您可以取消選取的作業，藉由設定<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs>至`true`。</xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs> </xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 引發事件時，才<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>屬性設定。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>       篩選事件委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.Filtering?displayProperty=fullName>事件<xref:System.Web.UI.WebControls.ObjectDataSourceView>相關聯<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.Filtering?displayProperty=fullName>      > [!IMPORTANT] > 則應該先驗證您從用戶端接收任何篩選參數值。 執行階段只會取代篩選條件運算式的參數值並將其以套用<xref:System.Data.DataSet>或<xref:System.Data.DataTable>所傳回的物件<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.DataTable> </xref:System.Data.DataSet> 如果您使用<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>屬性作為安全性考量，以限制所傳回的篩選發生之前，您必須驗證的參數值的項目數目。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>       如需處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterParameters
  id: FilterParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: FilterParameters
  nameWithType: ObjectDataSource.FilterParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得相關聯的任何參數預留位置的參數集合<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*>字串。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*>"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>控制項支援篩選的資料時，才<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法會傳回<xref:System.Data.DataSet>或<xref:System.Data.DataTable>物件。</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>       用於語法<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>是格式字串樣式的運算式。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 篩選運算式語法是相同的語法可接受的<xref:System.Data.DataColumn.Expression%2A>屬性。</xref:System.Data.DataColumn.Expression%2A> 如果您將參數加入至放集合時，您也可以包含格式字串的預留位置。 例如，包含`&quot;{0}&quot;`中替換參數值的運算式。 根據放集合中的參數索引來取代預留位置。       您可以包含在參數<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 如果參數是字串或字元類型，請使用單引號括住參數。 如果參數是數值類型，就不需要引號。       放屬性擷取<xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A>屬性所包含的<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> object to retrieve data from a middle-tier business object and a <xref:System.Web.UI.WebControls.GridView> control to display the results. The second code example provides an example of a middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control to retrieve data from a middle-tier business object and a <xref:System.Web.UI.WebControls.GridView> control to display the results. The <xref:System.Web.UI.WebControls.ObjectDataSource> control can filter data only when the method that retrieves the data retrieves it as a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object. For this reason, the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property identifies a business object method that retrieves data as a <xref:System.Data.DataSet>.  \n  \n The code example consists of a <xref:System.Web.UI.WebControls.TextBox> control, a <xref:System.Web.UI.WebControls.GridView> control, the <xref:System.Web.UI.WebControls.ObjectDataSource> control, and a **Submit** button. By default, the <xref:System.Web.UI.WebControls.TextBox> is populated with the name of one of the Northwind Traders employees. The <xref:System.Web.UI.WebControls.GridView> displays information about the employee that is identified by the name in the <xref:System.Web.UI.WebControls.TextBox>. To retrieve data on another employee, in the <xref:System.Web.UI.WebControls.TextBox>, enter the full name of the employee, and then click the **Submit** button.  \n  \n The <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property specifies an expression that is used to filter the data that is retrieved by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. It uses parameter placeholders that are evaluated to the parameters that are contained in the FilterParameters collection. In this example, the parameter placeholder is bounded by single quotation marks because the type of the parameter is a string type that might contain spaces. If the type of the parameter is a numeric or date type, bounding quotation marks are not required. The FilterParameters collection contains one parameter, a <xref:System.Web.UI.WebControls.FormParameter> object that is bound to the <xref:System.Web.UI.WebControls.TextBox> control.  \n  \n> [!IMPORTANT]\n>  You should validate any filter parameter value that you receive from the client. The runtime simply substitutes the parameter value into the filter expression and applies it to the <xref:System.Data.DataView> object that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method. If you are using the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property as a security measure to limit the number of items that are returned, you must validate the parameter values before the filtering occurs.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_647_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_647_1.aspx)]  \n  \n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \n  \n-   The `EmployeeLogic` class, which is a class that encapsulates business logic.  \n  \n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \n  \n For simplicity, the `EmployeeLogic` class creates a static set of data, rather than retrieving the data from a data tier. It is also helpful for this example, because the sample relies on you to provide the full name of a Northwind Traders employee to demonstrate filtering. For a complete working example, you must compile and use these classes with the Web Forms code examples that are provided.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_647_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_647_2.vb)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> ，其中包含關聯中找到的任何參數預留位置的參數集<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.FilterParameters*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "您設定<> *> 屬性和<> *> 方法不會傳回<xref href=&quot;System.Data.DataSet&quot;></xref>或<xref href=&quot;System.Data.DataTable&quot;> </xref>。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)
  id: GetView(System.String)
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: GetView(String)
  nameWithType: ObjectDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.ObjectDataSource.GetView(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "擷取資料來源控制項相關聯的具名的資料來源檢視。"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>控制項支援只有一個資料來源檢視。</xref:System.Web.UI.WebControls.ObjectDataSource> 如同所有的資料來源檢視物件，<xref:System.Web.UI.WebControls.ObjectDataSourceView>關聯資料與原始檔控制定義其功能時，會執行需要從基礎資料存放區中，擷取資料及執行作業，例如排序、 插入、 刪除和更新的所有工作。</xref:System.Web.UI.WebControls.ObjectDataSourceView>       GetView 方法是由資料繫結控制項，呼叫不是由網頁程式碼。"
  syntax:
    content: protected override System.Web.UI.DataSourceView GetView (string viewName);
    parameters:
    - id: viewName
      type: System.String
      description: "要擷取之檢視的名稱。 因為<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>只支援一個檢視，`viewName`會被忽略。"
    return:
      type: System.Web.UI.DataSourceView
      description: "<xref href=&quot;System.Web.UI.WebControls.ObjectDataSourceView&quot;> </xref>名為<xref uid=&quot;langword_csharp_DefaultView&quot; name=&quot;DefaultView&quot; href=&quot;&quot;></xref>相關聯<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.GetView*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定<code> viewName </code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或以外<xref uid=&quot;langword_csharp_DefaultView&quot; name=&quot;DefaultView&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.GetViewNames
  id: GetViewNames
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: GetViewNames()
  nameWithType: ObjectDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.ObjectDataSource.GetViewNames()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "擷取集合的名稱表示清單檢視物件的相關聯<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>物件。"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>控制項支援只有一個檢視中，名為`DefaultView`，其基礎資料。</xref:System.Web.UI.WebControls.ObjectDataSource> GetViewNames 方法會傳回此一檢視名稱的單一項目集合。       GetViewNames 方法是由資料繫結控制項，呼叫不是由網頁程式碼。"
  syntax:
    content: protected override System.Collections.ICollection GetViewNames ();
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>，其中包含相關聯的檢視表名稱<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>。</xref:System.Collections.ICollection>"
  overload: System.Web.UI.WebControls.ObjectDataSource.GetViewNames*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Insert
  id: Insert
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Insert()
  nameWithType: ObjectDataSource.Insert()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Insert()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "藉由呼叫的方法，由執行插入作業<> *> 屬性和任何參數在<> *> 集合。"
  remarks: "在執行插入作業之前，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A> 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>檢查參數的值，並執行插入作業之前任何前置處理的事件。</xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> 若要執行插入作業，<xref:System.Web.UI.WebControls.ObjectDataSourceView>物件使用反映來建立物件所識別的執行個體<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView> 然後它會呼叫的方法，由<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>使用所有相關聯的屬性<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 插入作業完成後，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A> 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>事件檢查任何傳回值、 輸出參數，以及例外狀況，並執行任何後續處理。</xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>       Insert 方法會委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A>方法<xref:System.Web.UI.WebControls.ObjectDataSourceView>相關聯<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A>       如需參數合併、 物件存留期，以及方法解析的詳細資訊，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>      ## 資料繫結控制項時<xref:System.Web.UI.WebControls.ObjectDataSource>物件相關聯的資料繫結控制項，例如<xref:System.Web.UI.WebControls.GridView>控制項，不需要從網頁程式碼呼叫插入方法。</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> Insert 方法會叫用資料繫結控制項來直接改為。"
  syntax:
    content: public int Insert ();
    parameters: []
    return:
      type: System.Int32
      description: "值，表示基礎資料存放區中插入的資料列數目。"
  overload: System.Web.UI.WebControls.ObjectDataSource.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Inserted
  id: Inserted
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Inserted
  nameWithType: ObjectDataSource.Inserted
  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "發生時<xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>完成作業。</xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>"
  remarks: "處理插入事件來檢查傳回值或輸出參數的值，或是判斷是否發生例外狀況之後<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>作業已完成。</xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 傳回值，輸出參數和例外狀況處理屬性都是從<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>與事件相關聯的物件。</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>       如需處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Inserting
  id: Inserting
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Inserting
  nameWithType: ObjectDataSource.Inserting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "發生於之前<xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>作業。</xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>"
  remarks: "處理插入事件，以執行額外的初始化專屬於您的應用程式，來驗證參數的值，或若要變更參數值之前<xref:System.Web.UI.WebControls.ObjectDataSource>控制項執行插入作業。</xref:System.Web.UI.WebControls.ObjectDataSource> 參數是可做為<xref:System.Collections.IDictionary>所存取的集合<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>屬性，由<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>物件。</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> </xref:System.Collections.IDictionary>       如需處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The second code example provides an example of the middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. Initially, the <xref:System.Web.UI.WebControls.DetailsView> displays a new `NorthwindEmployee` record, along with an automatically generated **Insert** button. After you enter data into the fields of the <xref:System.Web.UI.WebControls.DetailsView> control, click the **Insert** button. The <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property identifies which method performs the insert operation.  \n  \n In this example, the `UpdateEmployeeInfo` method is used to perform an insert; however, it requires a `NorthwindEmployee` parameter to insert the data. For this reason, the collection of strings that the <xref:System.Web.UI.WebControls.DetailsView> control passes automatically is not sufficient. The `NorthwindEmployeeInserting` delegate is an <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> object that handles the Inserting event and enables you to manipulate the input parameters before the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation proceeds. Because the `UpdateEmployeeInfo` method requires a `NorthwindEmployee` object as a parameter, one is created using the collection of strings and is added to the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> collection using a parameter name (`ne`) that the method expects. You might perform steps like these when using an existing middle-tier object as a data source with types and methods that are not designed specifically for use with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \n  \n When the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation is performed, the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property is called. If the `Insert` method of the object has a method signature that includes parameters, the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection must contain a parameter with names that match the method signature parameters for the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method to complete successfully.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_105_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_105_1.aspx)]  \n  \n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \n  \n-   The `EmployeeLogic` class, which is a stateless class that encapsulates business logic.  \n  \n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \n  \n An additional `NorthwindDataException` class is provided as a convenience. For a complete working example, you must compile and use these classes. The `UpdateEmployeeInfo` method is not completely implemented, so you will not insert data into the Northwind Traders database when you experiment with this example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_105_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_105_2.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertMethod
  id: InsertMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: InsertMethod
  nameWithType: ObjectDataSource.InsertMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定的方法或函式名稱<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>叫用以插入資料的控制項。"
  remarks: "商務物件會假設為一次，而不是批次中插入一筆記錄的資料。       InsertMethod 屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>物件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A>      ## 物件存留期 InsertMethod 屬性所識別的方法可以是執行個體方法或`static`(`Shared`在 Visual Basic 中) 方法。 如果是執行個體方法，會建立商務物件，並終結每次呼叫 InsertMethod 屬性所指定的方法時。 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>之前呼叫 InsertMethod 屬性時使用的商務物件的事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 您也可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>所指定的方法之後，就會引發的事件<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>屬性稱為。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 如果實作的商務物件<xref:System.IDisposable>介面，<xref:System.IDisposable.Dispose%2A>方法會終結物件之前呼叫。</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable> 如果該方法是`static`(`Shared`在 Visual Basic 中)，不會建立商務物件，而且您無法處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>      ## 若要加入參數合併參數<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>三個來源的集合:-從資料繫結控制項，在執行階段。</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>      -從`InsertParameters`項目，以宣告方式。      -從`Inserting`方法，以程式設計的方式。       首先，將資料繫結控制項所產生的任何參數加入至<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合。</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 例如，如果<xref:System.Web.UI.WebControls.ObjectDataSource>控制項繫結至<xref:System.Web.UI.WebControls.GridView>具有資料行的控制`Name`和`Number`，參數`Name`和`Number`加入至集合。</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> 這些參數的資料類型是`string`。 下一步，參數中所列`InsertParameters`加入項目。 如果中的參數`InsertParameters`找到項目具有相同名稱做為參數已經在<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>修改集合，現有的參數符合參數中指定`InsertParameters`項目。</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 一般而言，這用來修改參數中的資料類型。 最後，您可以透過程式設計方式加入和移除參數中的<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>事件之前發生<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>方法執行。</xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> 會合併這些參數之後，就會解決方法。 在下一節討論方法解析。      > [!IMPORTANT] > 則應該先驗證您從用戶端接收任何參數值。 執行階段只會取代 InsertMethod 屬性參數值。      ## 方法解析時<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>呼叫方法時，資料繫結控制項，以宣告方式中所建立的參數的資料欄位`InsertParameters`項目，並已加入的參數<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>所有合併事件處理常式。</xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> </xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> （如需詳細資訊，請參閱上一節）。<xref:System.Web.UI.WebControls.ObjectDataSource>物件會嘗試尋找要呼叫的方法。</xref:System.Web.UI.WebControls.ObjectDataSource> 首先，它會尋找具有 InsertMethod 屬性中指定名稱的一或多個方法。 如果找到相符項目，<xref:System.InvalidOperationException>擲回例外狀況。</xref:System.InvalidOperationException> 如果找到相符項目，則會尋找相符的參數名稱。 例如，假設由所指定的型別<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性有兩個方法，名為`InsertARecord`。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 一個`InsertARecord`具有一個參數， `ID`，和其他`InsertARecord`有兩個參數，`Name`和`Number`。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合具有名為只有一個參數`ID`、`InsertARecord`方法只`ID`參數呼叫。</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 參數的型別不會檢查在解析方法。 參數的順序不重要。       如果<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性設定，方法解決了不同的方式。</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> <xref:System.Web.UI.WebControls.ObjectDataSource>會尋找名稱中指定 InsertMethod 屬性會接受一個參數的型別，方法指定於<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 在此情況下，參數的名稱並不重要。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The second code example provides an example of the middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. Initially, the <xref:System.Web.UI.WebControls.DetailsView> displays a new `NorthwindEmployee` record, along with an automatically generated **Insert** button. After you enter data into the fields of the <xref:System.Web.UI.WebControls.DetailsView> control, click the **Insert** button. The InsertMethod property identifies which method performs the insert operation.  \n  \n In this example, the `UpdateEmployeeInfo` method is used to perform an insert; however, it requires a `NorthwindEmployee` parameter to insert the data. For this reason, the collection of strings that the <xref:System.Web.UI.WebControls.DetailsView> control passes automatically is not sufficient. The `NorthwindEmployeeInserting` delegate is an <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> object that handles the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> event and enables you to manipulate the input parameters before the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation proceeds. Because the `UpdateEmployeeInfo` method requires a `NorthwindEmployee` object as a parameter, one is created using the collection of strings and is added to the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> collection using a parameter name (`ne`) that the method expects. You might perform steps like these when using an existing middle-tier object as a data source with types and methods that are not designed specifically for use with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \n  \n When the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation is performed, the method that is identified by the InsertMethod property is called. If the `Insert` method of the object has a method signature that includes parameters, the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection must contain a parameter with names that match the method signature parameters for the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method to complete successfully.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1235_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1235_1.aspx)]  \n  \n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \n  \n-   The `EmployeeLogic` class, which is a stateless class that encapsulates business logic.  \n  \n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \n  \n An additional `NorthwindDataException` class is provided as a convenience. For a complete working example, you must compile and use these classes. The `UpdateEmployeeInfo` method is not completely implemented, so you will not insert data into the Northwind Traders database when you experiment with this example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1235_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1235_2.cs)]"
  syntax:
    content: public string InsertMethod { get; set; }
    return:
      type: System.String
      description: "字串，代表方法的名稱，或函式， <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>用於插入資料。 預設為空字串 (&quot;&quot;)。"
  overload: System.Web.UI.WebControls.ObjectDataSource.InsertMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertParameters
  id: InsertParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: InsertParameters
  nameWithType: ObjectDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得參數集合，其中包含所使用的參數<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*>"
  remarks: "名稱和 InsertParameters 集合中所包含的參數類型必須符合的名稱和型別中的參數<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>屬性簽章。</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 參數名稱會區分大小寫。 使用提供的參數，例如資料繫結控制項時<xref:System.Web.UI.WebControls.GridView>和<xref:System.Web.UI.WebControls.DetailsView>控制項<xref:System.Web.UI.WebControls.ObjectDataSource>控制項自動合併具有資料繫結控制項所提供的參數集合中已明確指定任何參數。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.DetailsView> </xref:System.Web.UI.WebControls.GridView> 這是很重要，因為資料繫結控制項一律提供做為其參數<xref:System.String>類型，而且如果方法簽章包含數值或日期類型，您必須明確地參數集合中包含的 InsertParameters 與正確的類型。</xref:System.String> 否則，<xref:System.Web.UI.WebControls.ObjectDataSource>控制項嘗試轉換成根據集合中的參數所定義的型別參數。</xref:System.Web.UI.WebControls.ObjectDataSource> 如需詳細資訊，請參閱[ObjectDataSource 控制項配合使用參數](~/add/includes/ajax-current-ext-md.md)。       InsertParameters 屬性擷取<xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A>屬性所包含的<xref:System.Web.UI.WebControls.ObjectDataSourceView>相關聯<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A>       如需參數合併、 物件存留期，以及方法解析的詳細資訊，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The second code example provides an example implementation of the `Insert` method that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. Initially, the <xref:System.Web.UI.WebControls.DetailsView> displays text boxes in which you can enter data for a new `NorthwindEmployee` record, along with an automatically generated **Insert** button. After you enter data into the fields of the <xref:System.Web.UI.WebControls.DetailsView> control, click the **Insert** button. The <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property identifies which method performs the insert operation.  \n  \n If you click the **Insert** button, the operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property and any parameters that are specified in the InsertParameters collection. In this code example, one parameter is specified in the InsertParameters collection that corresponds to the supervisor's ID. This is because even though the ID is displayed in the <xref:System.Web.UI.WebControls.GridView.Rows%2A> collection for the <xref:System.Web.UI.WebControls.DetailsView> control as a <xref:System.Web.UI.WebControls.BoundField> object, it is passed as a string to the <xref:System.Web.UI.WebControls.ObjectDataSource> control. By adding it explicitly to the InsertParameters collection with a <xref:System.Web.UI.WebControls.Parameter.Type%2A> property set to the <xref:System.TypeCode> value, it will be passed correctly by the <xref:System.Web.UI.WebControls.ObjectDataSource> to the method as an <xref:System.Int32>, not as a string.  \n  \n When the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation is performed, the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property is called. If the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method of the object has a method signature that includes parameters, the InsertParameters collection must contain parameters that have names that match the method signature parameters for the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method to complete successfully.  \n  \n> [!IMPORTANT]\n>  You should validate any parameter value that you receive from the client. The runtime simply substitutes the parameter value into the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_8#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_752_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_8#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_752_1.aspx)]  \n  \n The following code example provides an example implementation of the `Insert` method that the preceding code example uses. The `InsertNewEmployeeWrapper` method is added to the `EmployeeLogic` middle-tier object that is provided in the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview to enable the object to work more easily with the <xref:System.Web.UI.WebControls.ObjectDataSource> control in Web scenarios, without a substantial rewrite to the actual business logic.  \n  \n To run the example, you must have the `NorthwindEmployee` class that is provided in the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview. This example illustrates only how to connect the <xref:System.Web.UI.WebControls.ObjectDataSource> to a business object method that gets data for a new database record by using parameters. The example does not add records to the database, because the `Save` method of the `NorthwindEmployee` class does not include code to update the database.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_8#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_752_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_8#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_752_2.cs)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> ，其中包含所識別的方法所使用的參數<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.InsertParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)
  id: LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: LoadViewState(Object)
  nameWithType: ObjectDataSource.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "載入先前儲存的檢視狀態的<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控制項。"
  remarks: "這個方法主要供.NET Framework 基礎結構，並不是直接從您的程式碼使用。 不過，控制項開發人員可以覆寫這個方法，以指定自訂的伺服器控制項如何還原其檢視狀態。 如需詳細資訊，請參閱[ASP.NET 狀態管理概觀](~/add/includes/ajax-current-ext-md.md)。       LoadViewState 方法用來載入先前儲存的檢視狀態的<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource>"
  syntax:
    content: protected override void LoadViewState (object savedState);
    parameters:
    - id: savedState
      type: System.Object
      description: "物件，包含控制項的已儲存的檢視狀態值。"
  overload: System.Web.UI.WebControls.ObjectDataSource.LoadViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
  id: MaximumRowsParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: MaximumRowsParameterName
  nameWithType: ObjectDataSource.MaximumRowsParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定商務物件資料擷取方法參數的名稱，用來指出要擷取的資料來源分頁支援的記錄數目。"
  remarks: "MaximumRowsParameterName 屬性用來支援資料來源分頁。 如需分頁支援的<xref:System.Web.UI.WebControls.ObjectDataSource>控制項，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>       MaximumRowsParameterName 屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A>"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \n  \n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> property is set to `true`. The <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set to the name of a method that returns the total number of records in the query. The MaximumRowsParameterName property and the <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_176_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_176_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_176_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_176_2.vb)]  \n  \n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_176_3.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_176_3.vb)]"
  syntax:
    content: public string MaximumRowsParameterName { get; set; }
    return:
      type: System.String
      description: "名稱<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>用來指定要擷取的記錄數目的參數。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> 預設值是`&quot;maximumRows&quot;`。"
  overload: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
  id: ObjectCreated
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectCreated
  nameWithType: ObjectDataSource.ObjectCreated
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "所識別的物件之後，就會發生<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>會建立屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>"
  remarks: "處理 ObjectCreated 事件商務物件上呼叫其他方法，請設定屬性，或執行其他特有之前的商務物件的初始化<xref:System.Web.UI.WebControls.ObjectDataSource>物件呼叫商務物件資料的方法來執行資料作業。</xref:System.Web.UI.WebControls.ObjectDataSource> 存取物件的參考<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>屬性，由<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>物件。</xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>       如果識別來執行資料作業的方法是`static`(`Shared`在 Visual Basic 中)，則<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>以及永遠不會引發 ObjectCreated 事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>       如需處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
  id: ObjectCreating
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectCreating
  nameWithType: ObjectDataSource.ObjectCreating
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "物件所識別之前，就會發生<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>會建立屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>"
  remarks: "如果識別來執行資料作業的方法是`static`(`Shared`在 Visual Basic 中)，ObjectCreating 和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>永遠不會引發事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>       <xref:System.Web.UI.WebControls.ObjectDataSource>控制項會自動呼叫的商務物件來建立使用反映它的執行個體的預設建構函式。</xref:System.Web.UI.WebControls.ObjectDataSource> 處理 ObjectCreating 事件，以便明確地呼叫另一個建構函式，並將結果儲存至的物件執行個體設定<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>屬性相關聯的<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>物件。</xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>       如需處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. The second code example provides the middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. You might work with a business object that is very expensive to create (in terms of time or resources) for every data operation your Web page performs. One way to work with an expensive object might be to create an instance of it once, and then cache it for subsequent operations instead of creating and destroying it for every data operation.  \n  \n> [!NOTE]\n>  In a production application, multiple requests might end up simultaneously using the same instance. Therefore, the object needs to be implemented in a thread-safe manner.  \n  \n This code example demonstrates this pattern. You can handle the ObjectCreating event to check the cache for an object first, and only create an instance of the object, if one is not already cached. Then, handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event to cache the business object for future use, instead of destroying it. In this code example, the <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=fullName> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> object is set to `true` to direct the <xref:System.Web.UI.WebControls.ObjectDataSource> to not call <xref:System.IDisposable.Dispose%2A> method on the object.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_72_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_72_1.aspx)]  \n  \n The following code example provides the example middle-tier business object that the preceding code example uses. The code example consists of a basic business object, defined by the `EmployeeLogic` class, which is a stateful class that encapsulates business logic. For a complete working example, you must compile this code as a library and use these classes from an ASP.NET page (.aspx file).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_72_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_72_2.vb)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
  id: ObjectDisposing
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectDisposing
  nameWithType: ObjectDataSource.ObjectDisposing
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "物件所識別之前，就會發生<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>屬性已被丟棄。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>"
  remarks: "一律在商務物件的執行個體就會捨棄之前，會引發 ObjectDisposing 事件。 如果實作的商務物件<xref:System.IDisposable>介面，<xref:System.IDisposable.Dispose%2A>方法呼叫之後會引發這個事件。</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable>       處理 ObjectDisposing 事件物件上呼叫其他方法、 設定屬性，或是執行清理之前終結物件的特定物件。 存取物件的參考<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>屬性，由<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>物件。</xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>       當您使用<xref:System.Web.UI.WebControls.ObjectDataSource>控制 linq to SQL 類別中，您必須取消 ObjectDisposing 事件的處理常式中的資料內容類別的處置。</xref:System.Web.UI.WebControls.ObjectDataSource> 這是必要步驟，因為 LINQ to SQL 支援延後的執行，而<xref:System.Web.UI.WebControls.ObjectDataSource>控制項嘗試處置之後選取作業的資料內容。</xref:System.Web.UI.WebControls.ObjectDataSource>       如需如何處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. The second code example provides the middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. You might work with a business object that is very expensive to create (in terms of time or resources) for every data operation your Web page performs. One way to work with an expensive object might be to create an instance of it once, and then cache it for subsequent operations instead of creating and destroying it for every data operation. This example demonstrates this pattern. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> event to check the cache for an object first, and only create an instance of it, if one is not already cached. Then, handle the ObjectDisposing event to cache the business object for future use, instead of destroying it. In this code example, the <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=fullName> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> object is set to `true` to direct the <xref:System.Web.UI.WebControls.ObjectDataSource> to not call the <xref:System.IDisposable.Dispose%2A> method on the object.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_11_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_11_1.aspx)]  \n  \n The following code example provides the example middle-tier business object that the preceding code example uses. The code example consists of a basic business object, defined by the `EmployeeLogic` class, which is a stateful class that encapsulates business logic. For a complete working example, you must compile this code as a library and use these classes from an ASP.NET page (.aspx file).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_11_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_11_2.vb)]  \n  \n The following example shows how to handle the ObjectDisposing event when using an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a LINQ to SQL class.  \n  \n```vb#  \nPublic Sub ExampleObjectDisposing(ByVal sender As Object, _   \n        ByVal e As ObjectDataSourceDisposingEventArgs)  \n    e.Cancel = True  \nEnd Sub  \n```  \n  \n```c#  \npublic void ExampleObjectDisposing(object sender,   \n        ObjectDataSourceDisposingEventArgs e)  \n{  \n    e.Cancel = true;  \n}  \n```"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
  id: OldValuesParameterFormatString
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: OldValuesParameterFormatString
  nameWithType: ObjectDataSource.OldValuesParameterFormatString
  fullName: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定要套用至傳遞給的原始值的參數名稱的格式字串<xref uid=&quot;langword_csharp_Delete&quot; name=&quot;Delete&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_Update&quot; name=&quot;Update&quot; href=&quot;&quot;></xref>方法。"
  remarks: "值<xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>屬性套用至主索引鍵，例如識別與`DataKeyNames`屬性的資料繫結控制項，或在刪除和更新案例其中<xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>屬性設定為<xref:System.Web.UI.ConflictOptions>值和原始值組會傳遞至相對應的資料方法。</xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>       以下是兩個常見的案例，您可能會在其中變更<xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>屬性:-您可能想要變更的屬性來區分各個更新中的舊和新值。</xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> 當<xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>屬性設定為<xref:System.Web.UI.ConflictOptions>值參數的原始和新的值都會加入<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> 而格式化的字串，不會為每個資料欄位建立具有相同名稱的兩個參數。 藉由變更原始值參數的名稱，您可以比較原始資料來源偵測衝突，並比較索引鍵值的資料。      -有些視覺化設計工具會實作特定的命名配置，針對原始值和索引鍵。       Where 屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>"
  syntax:
    content: public string OldValuesParameterFormatString { get; set; }
    return:
      type: System.String
      description: "字串，表示格式字串套用至任何名稱<code> oldValues </code>或索引鍵參數傳遞至<> *> 或<> *> 方法。 預設值是`&quot;{0}&quot;`，這表示參數名稱都是欄位名稱。"
  overload: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: ObjectDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.ObjectDataSource.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "新增<xref href=&quot;System.Web.UI.Page.LoadComplete&quot;></xref>至頁面，其中包含事件處理常式<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控制項。"
  remarks: "引發事件會透過委派事件處理常式叫用。 如需詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。       OnInit 方法也允許衍生的類別處理事件，而不用附加委派。 這是處理衍生類別中的事件的慣用的技巧。"
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件資料。</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.ObjectDataSource.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
  id: ParsingCulture
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ParsingCulture
  nameWithType: ObjectDataSource.ParsingCulture
  fullName: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，表示何種文化特性資訊時使用字串值轉換為實際屬性型別，才能建構類型的物件表示<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*>。</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*>"
  syntax:
    content: public System.Web.UI.WebControls.ParsingCulture ParsingCulture { get; set; }
    return:
      type: System.Web.UI.WebControls.ParsingCulture
      description: "文化特性資訊。 預設值是<xref href=&quot;System.Web.UI.WebControls.ParsingCulture&quot;> </xref>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SaveViewState
  id: SaveViewState
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SaveViewState()
  nameWithType: ObjectDataSource.SaveViewState()
  fullName: System.Web.UI.WebControls.ObjectDataSource.SaveViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "儲存的狀態<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控制項。"
  syntax:
    content: protected override object SaveViewState ();
    parameters: []
    return:
      type: System.Object
      description: "傳回伺服器控制項目前檢視狀態。反之則傳回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，如果沒有與控制項關聯的檢視狀態。"
  overload: System.Web.UI.WebControls.ObjectDataSource.SaveViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Select
  id: Select
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Select()
  nameWithType: ObjectDataSource.Select()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Select()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "從基礎資料存放區擷取資料，藉由呼叫的方法，由<> *> 中的參數屬性<> *> 集合。"
  remarks: "指定的方法可能會有任何方法簽章，但它必須傳回或衍生自其中一個類型中的下列資料表列出<xref:System.Web.UI.WebControls.ObjectDataSource>能夠成功呼叫它的控制項。</xref:System.Web.UI.WebControls.ObjectDataSource>      |傳回型別 |動作 |  |-----------------|------------|  |<xref:System.Collections.IEnumerable>|選取的方法所傳回<xref:System.Collections.IEnumerable>。 |  |<xref:System.Data.DataTable>|建立使用<xref:System.Data.DataTable>和選取的方法所傳回<xref:System.Data.DataView>。 |  |<xref:System.Data.DataView>|選取的方法所傳回<xref:System.Data.DataView>。 |  |<xref:System.Data.DataSet>|擷取第一個<xref:System.Data.DataTable><xref:System.Data.DataSet>並建立及選取的方法所傳回<xref:System.Data.DataView>。 |  |<xref:System.Object>|物件是包裝在一個項目<xref:System.Collections.IEnumerable>集合，而且選取的方法所傳回。 |      所識別的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性可以是執行個體方法或`static`(`Shared`在 Visual Basic 中) 方法。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Collections.IEnumerable> </xref:System.Object> </xref:System.Data.DataView> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataView> </xref:System.Data.DataView>  </xref:System.Data.DataView></xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Collections.IEnumerable> </xref:System.Collections.IEnumerable> 如果是執行個體方法，商務物件會建立，並且由所指定的方法終結每次<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>呼叫屬性時，不同之處在於相同的執行個體用來呼叫的方法所指定<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性和方法所指定<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 選取方法會傳回<xref:System.Collections.IEnumerable>介面。</xref:System.Collections.IEnumerable> 不過，若要啟用快取和篩選案例，傳回的值必須是<xref:System.Data.DataSet>物件。</xref:System.Data.DataSet> 雖然<xref:System.Data.DataSet>類別未實作的<xref:System.Collections.IEnumerable>介面，<xref:System.Web.UI.WebControls.ObjectDataSource>自動擷取控制項的預設<xref:System.Data.DataView>控制項，它會實作<xref:System.Collections.IEnumerable>.</xref:System.Collections.IEnumerable> </xref:System.Data.DataView> </xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Collections.IEnumerable> </xref:System.Data.DataSet>       在執行 Select 作業之前，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A> 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件檢查參數的值，並執行任何前置處理之前選取的作業。</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 若要執行資料擷取作業，<xref:System.Web.UI.WebControls.ObjectDataSourceView>物件使用反映來建立物件所識別的執行個體<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView> 然後它會呼叫的方法，由<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>使用所有相關聯的屬性<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 選取的作業完成後，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.Selected> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A> 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>事件檢查任何傳回值、 輸出參數，以及例外狀況，並執行任何後續處理。</xref:System.Web.UI.WebControls.ObjectDataSource.Selected>       如果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性會傳回<xref:System.Data.DataSet>， <xref:System.Data.DataTable>，或<xref:System.Data.DataView>物件和快取已啟用，<xref:System.Web.UI.WebControls.ObjectDataSource>擷取的資料，並選取作業期間，將資料儲存至快取。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Data.DataView> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 快取，已捨棄，或重新整理會根據建立指定之組合的快取行為<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>       如果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性會傳回<xref:System.Data.DataSet>或<xref:System.Data.DataTable>物件，和<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>指定屬性，它會與任何提供評估<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>屬性和結果篩選條件會套用至資料的清單選取作業期間。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>       選取方法會委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A>方法<xref:System.Web.UI.WebControls.ObjectDataSourceView>相關聯<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A>       如需參數合併、 物件存留期，以及方法解析的詳細資訊，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>      ## 資料繫結控制項時<xref:System.Web.UI.WebControls.ObjectDataSource>與相關聯控制項的資料繫結控制項，例如<xref:System.Web.UI.WebControls.GridView>控制項，不需要從網頁程式碼呼叫選取的方法。</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> 選取方法會叫用資料繫結控制項來直接改為。"
  example:
  - For a code example, see <xref:System.Web.UI.WebControls.ObjectDataSource>.
  syntax:
    content: public System.Collections.IEnumerable Select ();
    parameters: []
    return:
      type: System.Collections.IEnumerable
      description: "<xref:System.Collections.IEnumerable>資料列的清單。</xref:System.Collections.IEnumerable>"
  overload: System.Web.UI.WebControls.ObjectDataSource.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
  id: SelectCountMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SelectCountMethod
  nameWithType: ObjectDataSource.SelectCountMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定的方法或函式名稱<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控制項叫用以擷取資料列計數。"
  remarks: "SelectCountMethod 屬性會識別用來擷取總計資料列計數，以支援資料來源分頁的商務物件方法。 只有當評估 SelectCountMethod 屬性<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>屬性設定為`true`。</xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>       SelectCountMethod 屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A> 如需分頁支援的<xref:System.Web.UI.WebControls.ObjectDataSource>控制項，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \n  \n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> property is set to `true`. The SelectCountMethod property is set to the name of a method that returns the total number of records in the query. The <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> property and the <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_626_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_626_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_626_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_626_2.vb)]  \n  \n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the SelectCountMethod property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_626_3.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_626_3.vb)]"
  syntax:
    content: public string SelectCountMethod { get; set; }
    return:
      type: System.String
      description: "字串，代表方法的名稱，或函式， <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>使用擷取資料列計數。 此方法必須傳回一個整數 (<xref:System.Int32>)。</xref:System.Int32> 預設為空字串 (&quot;&quot;)。"
  overload: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Selected
  id: Selected
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Selected
  nameWithType: ObjectDataSource.Selected
  fullName: System.Web.UI.WebControls.ObjectDataSource.Selected
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "發生時<xref:System.Web.UI.WebControls.ObjectDataSource.Select*>作業已完成。</xref:System.Web.UI.WebControls.ObjectDataSource.Select*>"
  remarks: "處理選取的事件來檢查傳回值或輸出參數的值，或是判斷是否發生例外狀況之後<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>完成作業。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 傳回值，輸出參數和例外狀況處理屬性都是從<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>與事件相關聯的物件。</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>       如需處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable a user to retrieve and update records in the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve, display, and modify the data from the employee record that is selected by the user.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_48_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_48_1.aspx)]  \n  \n The second example shows handlers for the Selected and <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> events. The Selected event handler serializes the object that contains data that was retrieved from the Employee table. The serialized object is stored in view state. The <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event handler deserializes the object in view state that contains the original data for the data record that is being updated. The object that contains the original data is passed as a parameter to the Update method. The original data must be passed to the database so that it can be used to check whether the data has been modified by another process.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_48_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_48_2.cs)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query and update the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_48_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/e-system.web.ui.webcontr_48_3.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Selecting
  id: Selecting
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Selecting
  nameWithType: ObjectDataSource.Selecting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Selecting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "發生於之前<xref:System.Web.UI.WebControls.ObjectDataSource.Select*>作業。</xref:System.Web.UI.WebControls.ObjectDataSource.Select*>"
  remarks: "處理執行額外的初始化專屬於您的應用程式，來驗證參數的值在 Selecting 事件或變更參數值之前<xref:System.Web.UI.WebControls.ObjectDataSource>控制項執行資料擷取作業。</xref:System.Web.UI.WebControls.ObjectDataSource> 參數是可做為<xref:System.Collections.IDictionary>所存取的集合<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>屬性，由<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>物件。</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> </xref:System.Collections.IDictionary>       這個事件可以引發兩次的單一呼叫<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法，如果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>屬性設定。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs.ExecutingSelectCount%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs>物件用來判斷是否選取已呼叫以擷取資料，或擷取計數。</xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs.ExecutingSelectCount%2A>       如需處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectMethod
  id: SelectMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SelectMethod
  nameWithType: ObjectDataSource.SelectMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定的方法或函式名稱<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控制叫用以擷取資料。"
  remarks: "指定的方法可以有任何方法簽章，但它必須傳回一個顯示的下列資料表中的型別<xref:System.Web.UI.WebControls.ObjectDataSource>能夠成功呼叫它的控制項。</xref:System.Web.UI.WebControls.ObjectDataSource>      |傳回型別 |動作 |  |-----------------|------------|  |<xref:System.Collections.IEnumerable>|<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法所傳回<xref:System.Collections.IEnumerable>。 |  |<xref:System.Data.DataTable>|建立使用<xref:System.Data.DataTable>並<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法所傳回<xref:System.Data.DataView>。 |  |<xref:System.Data.DataView>|<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法所傳回<xref:System.Data.DataView>。 |  |<xref:System.Data.DataSet>|擷取第一個<xref:System.Data.DataTable><xref:System.Data.DataSet>時，並建立及<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法所傳回<xref:System.Data.DataView>。 |  |<xref:System.Object>|物件是包裝在一個項目<xref:System.Collections.IEnumerable>集合，而且<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法所傳回。 |      SelectMethod 屬性會委派至<xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Collections.IEnumerable> </xref:System.Object>  </xref:System.Data.DataView></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataSet>  </xref:System.Data.DataView></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.DataView>   </xref:System.Data.DataView></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Data.DataTable> </xref:System.Data.DataTable>  </xref:System.Collections.IEnumerable></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Collections.IEnumerable>       當您使用<xref:System.Web.UI.WebControls.ObjectDataSource>類別若要刪除或更新資料，請確定參數名稱設定為<xref:System.Web.UI.WebControls.ObjectDataSource>控制<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合或<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合符合 select 方法所傳回的資料行名稱。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource>      ## SelectMethod 屬性所識別的方法可以是執行個體方法的物件存留期或`static`(`Shared`在 Visual Basic 中) 方法。 如果執行個體方法，會建立商務物件，並終結每次呼叫 SelectMethod 屬性所指定的方法時。 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>SelectMethod 屬性所指定的方法呼叫之前使用商務物件的事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 您也可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>呼叫 SelectMethod 屬性所指定的方法之後，就會引發的事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 如果實作的商務物件<xref:System.IDisposable>介面，<xref:System.IDisposable.Dispose%2A>方法會終結物件之前呼叫。</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable> 如果該方法是`static`(`Shared`在 Visual Basic 中)，不會建立商務物件，而且您無法處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>      ## 若要加入參數合併參數<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>從這些來源的集合:-以宣告方式從`SelectParameters`項目。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>      -以程式設計方式從`Selecting`方法。       首先，在列出參數`SelectParameters`加入項目。 第二，以程式設計方式加入和移除參數<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件之前發生<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法執行。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 會合併這些參數之後，就會解決方法。 在下一節討論方法解析。      > [!IMPORTANT] > 則應該先驗證您從用戶端接收任何參數值。 執行階段只會取代 SelectMethod 屬性參數值。      ## 方法解析時<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>呼叫方法時，資料繫結控制項，以宣告方式中所建立的參數的資料欄位`SelectParameters`項目，並已加入的參數<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>所有合併事件處理常式。</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> （如需詳細資訊，請參閱上一節）。<xref:System.Web.UI.WebControls.ObjectDataSource>控制然後嘗試尋找要呼叫的方法。</xref:System.Web.UI.WebControls.ObjectDataSource> 首先，它會尋找具有 SelectMethod 屬性中指定名稱的一或多個方法。 如果找到相符項目，<xref:System.InvalidOperationException>擲回例外狀況。</xref:System.InvalidOperationException> 如果找到相符項目，則會尋找相符的參數名稱。 例如，假設由所指定的型別<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性有兩個方法，名為`SelectARecord`。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 一個`SelectARecord`具有一個參數， `ID`，和其他`SelectARecord`有兩個參數，`Name`和`Number`。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>集合具有名為只有一個參數`ID`、`SelectARecord`方法只`ID`參數呼叫。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 參數的型別不會檢查在解析方法。 參數的順序不重要。       如果<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性設定，方法解決了不同的方式。</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> <xref:System.Web.UI.WebControls.ObjectDataSource>會尋找名稱中指定 SelectMethod 屬性會接受一個參數的型別，方法指定於<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 在此情況下，參數的名稱並不重要。"
  example:
  - "The following code example demonstrates how a <xref:System.Web.UI.WebControls.GridView> control can display data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control on a Web Forms page. The <xref:System.Web.UI.WebControls.ObjectDataSource> identifies a partially or fully qualified class name with its <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property and a method that is called to retrieve data with its SelectMethod property. At run time, the object is created and the method is called using reflection. The <xref:System.Web.UI.WebControls.GridView> control enumerates through the <xref:System.Collections.IEnumerable> collection that is returned by the method that is specified by the SelectMethod property, and displays the data.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_540_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_540_1.aspx)]"
  syntax:
    content: public string SelectMethod { get; set; }
    return:
      type: System.String
      description: "字串，代表方法的名稱，或函式， <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>用來擷取資料。 預設為空字串 (&quot;&quot;)。"
  overload: System.Web.UI.WebControls.ObjectDataSource.SelectMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectParameters
  id: SelectParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SelectParameters
  nameWithType: ObjectDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得所指定的方法所使用的參數集合<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  remarks: "SelectParameters 屬性會取得<xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A>       您將參數加入至 SelectParameters 集合以宣告方式使用`SelectParameters`項目或以程式設計方式中的處理常式<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 在執行階段，參數會列在`SelectParameters`項目會先加入至集合。 然後加入或移除的處理常式集合中的參數<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>之前引發事件<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法執行。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>       之前<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法執行、 名稱和 SelectParameters 集合中所包含的參數類型必須符合所指定之方法的簽章<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 例如，如果名為 select 方法`GetEmployeesByStateAndAge`採用`string`和整數做為參數，SelectParameters 集合必須包含兩個參數。 第一個參數必須解析成字串，而且第二個參數必須解析成整數。 這兩個參數可以指定在標記中`SelectParameters`項目。 或者，也可以加入<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>加入事件處理常式或一個參數標記，而且可以透過程式設計方式加入另一個。</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>       如需詳細資訊，請參閱[ObjectDataSource 控制項配合使用參數](~/add/includes/ajax-current-ext-md.md)和<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod>      > [!IMPORTANT] > 中的程式碼<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件處理常式或所指定的方法中<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性，請確定您驗證接收自用戶端的任何參數值。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>"
  example:
  - "The following code example demonstrates how to retrieve a single data record using an <xref:System.Web.UI.WebControls.ObjectDataSource> control and display it in a <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.ObjectDataSource> control retrieves a specific employee record by calling the `GetEmployee` method of the `EmployeeLogic` class. The `GetEmployee` method requires an employee ID parameter. The <xref:System.Web.UI.WebControls.ObjectDataSource> control uses a `QueryStringParameter` element in markup to create a <xref:System.Web.UI.WebControls.QueryStringParameter> object that will retrieve the value of a specified query-string parameter from the URL and pass it to the `GetEmployee` method.  \n  \n Other parameter classes can be used to retrieve values from other sources, such as control properties, form fields, cookies, ASP.NET profile data, or session state. You can also use a parameter object that is defined in markup in order to pass a hard-coded value to the select method. For more information about parameter classes that are available, see [Using Parameters with Data Source Controls for Filtering](~/add/includes/ajax-current-ext-md.md).  \n  \n To run this example, you will need the following:  \n  \n-   A Web site that has a connection string named `NorthwindConnection` that connects to the Northwind Traders database. For more information, see the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview.  \n  \n-   The `EmployeeLogic` class that is shown as one of the code examples for the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview. The class file must be located in the App_Code folder.  \n  \n-   The sample code can be run as an .aspx page. If you request the page without a query-string parameter, an error message is displayed. If you request the page using a query string such as `?empid=1` after the name of the .aspx file, you will see the details for the requested employee.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_3#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1025_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_3#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1025_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "所指定的方法所使用的參數集合<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.SelectParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SortParameterName
  id: SortParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SortParameterName
  nameWithType: ObjectDataSource.SortParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.SortParameterName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定商務物件的名稱<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>參數用來針對資料來源排序支援指定的排序運算式。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  remarks: "SortParameterName 屬性用來支援資料來源排序。 當<xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A>上設定屬性<xref:System.Web.UI.DataSourceSelectArguments>物件，並傳遞至<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>SortParameterName 值識別的參數名稱的方法， <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>，據此排序資料的商務物件方法。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.DataSourceSelectArguments> </xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A>       如果<xref:System.Web.UI.WebControls.ObjectDataSource>與資料繫結控制項，會傳遞至以逗號分隔的欄位值的形式，後面加上此參數採用的值相關聯`&quot;ASC&quot;`或`&quot;DESC&quot;`。</xref:System.Web.UI.WebControls.ObjectDataSource> 例如，在遞增排序的值`Name`會`&quot;Name ASC&quot;`。       SortParameterName 屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.SortParameterName%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.SortParameterName%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to implement a type that supports sorting. The second code example demonstrates how to implement a sort expression.  \n  \n The following code example demonstrates how to implement a type that supports sorting. The `SelectMethod` of the `SortingData` class takes a parameter, `sortExpression`. The string that is passed to `SelectMethod` is used for the <xref:System.Data.DataView.Sort%2A> property of the <xref:System.Data.DataView> object that is returned by `SelectMethod`.  \n  \n [!code-cs[ObjectDataSourceSorting#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_386_1.cs)]\n [!code-vb[ObjectDataSourceSorting#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_386_1.vb)]  \n  \n The following code example demonstrates how to implement a sort expression. The code in the Web page creates an instance of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property is set to `SortingData` and the SortParameterName property is set to `sortExpression`. The <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true`. When the user clicks the **Sort** button, the field name, `Name` or `Number`, is passed to `SelectMethod` in the sort parameter.  \n  \n [!code-cs[ObjectDataSourceSorting#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_386_2.aspx)]\n [!code-vb[ObjectDataSourceSorting#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_386_2.aspx)]"
  syntax:
    content: public string SortParameterName { get; set; }
    return:
      type: System.String
      description: "用來指示參數，這用來排序資料的方法參數的名稱。 預設為空字串。"
  overload: System.Web.UI.WebControls.ObjectDataSource.SortParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
  id: SqlCacheDependency
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SqlCacheDependency
  nameWithType: ObjectDataSource.SqlCacheDependency
  fullName: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定以分號分隔的字串，表示哪些資料庫和資料表，以使用 Microsoft SQL Server 的快取相依性。"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>控制項支援選擇性的到期原則為基礎的<xref:System.Web.Caching.SqlCacheDependency>（服務必須設定為資料庫伺服器） 的資料快取的物件。</xref:System.Web.Caching.SqlCacheDependency> </xref:System.Web.UI.WebControls.ObjectDataSource>       SQL Server 支援兩種機制，快取無效︰ 輪詢和通知。 每一種機制具有不同的語法為<xref:System.Web.Caching.SqlCacheDependency>物件。</xref:System.Web.Caching.SqlCacheDependency>       <xref:System.Web.UI.WebControls.ObjectDataSource>支援只有輪詢。</xref:System.Web.UI.WebControls.ObjectDataSource> <xref:System.Web.Caching.SqlCacheDependency>字串用來建立<xref:System.Data.SqlClient.SqlDependency>物件傳遞至<xref:System.Data.Common.DbCommand>建構函式之前<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>執行方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.Common.DbCommand> </xref:System.Data.SqlClient.SqlDependency> </xref:System.Web.Caching.SqlCacheDependency> SqlCacheDependency 字串會識別資料庫和資料表，根據所使用的相同格式`@ Page`指示詞，其中字串的第一個部分是 SQL Server 資料庫的連接字串，後面接著冒號分隔符號和最後的資料庫資料表名稱 (例如， `&quot;connectionstring1:table1&quot;`)。 如果 SqlCacheDependency 屬性相依於多個資料表中，連接字串和資料表名稱組以分號分隔 (例如， `&quot;connectionstring1:table1&quot;;connectionstring2:table2&quot;`)。       若要支援通知，您必須撰寫的快取邏輯中的實作您<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性及處理建構<xref:System.Web.Caching.SqlCacheDependency>程式碼中的物件。</xref:System.Web.Caching.SqlCacheDependency> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to create a SQL Server cache dependency and set the SqlCacheDependency property of a <xref:System.Web.UI.WebControls.ObjectDataSource> object. The second code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> object.  \n  \n The following code example demonstrates how to create a SQL Server cache dependency and set the SqlCacheDependency property of a <xref:System.Web.UI.WebControls.ObjectDataSource> control. In this example, the database is polled every 120 seconds. If the data in the Northwind Traders Employees table changes during that time, any data that is cached by the <xref:System.Web.UI.WebControls.ObjectDataSource> control and displayed by the <xref:System.Web.UI.WebControls.GridView> control is expired and a new set of data is retrieved on the next request for the page.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_7#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_787_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_7#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_787_1.aspx)]  \n  \n The following code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> control. In the base implementation of the `EmployeeLogic` class, the `GetAllEmployees` method returns an <xref:System.Collections.ArrayList> object. Instead of refactoring the object completely to work with the <xref:System.Web.UI.WebControls.ObjectDataSource> on a Web Forms page, a wrapper method named `GetAllEmployeesAsDataSet` is added that returns a set of `NorthwindEmployee` data as a <xref:System.Data.DataSet>.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_787_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_5#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_787_2.cs)]"
  syntax:
    content: public virtual string SqlCacheDependency { get; set; }
    return:
      type: System.String
      description: "字串，表示哪些資料庫和資料表中，以使用 SQL Server 的快取相依性。"
  overload: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
  id: StartRowIndexParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: StartRowIndexParameterName
  nameWithType: ObjectDataSource.StartRowIndexParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定用來表示要擷取的資料來源分頁支援的第一個記錄識別碼值的資料擷取方法的參數名稱。"
  remarks: "StartRowIndexParameterName 屬性用來支援資料來源分頁。 如需分頁支援的<xref:System.Web.UI.WebControls.ObjectDataSource>控制項，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>       StartRowIndexParameterName 屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A>"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \n  \n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> property is set to `true`. The <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set to the name of a method that returns the total number of records in the query. The <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> property and the StartRowIndexParameterName property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1148_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1148_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1148_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1148_2.vb)]  \n  \n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1148_3.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1148_3.vb)]"
  syntax:
    content: public string StartRowIndexParameterName { get; set; }
    return:
      type: System.String
      description: "用來指示擷取之第一個資料錄的商務物件方法參數的名稱。 參數必須傳回一個整數值。 預設值是`&quot;startRowIndex&quot;`。"
  overload: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.TrackViewState
  id: TrackViewState
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: TrackViewState()
  nameWithType: ObjectDataSource.TrackViewState()
  fullName: System.Web.UI.WebControls.ObjectDataSource.TrackViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "會追蹤檢視狀態變更<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控制項，以便它們可以儲存在<xref href=&quot;System.Web.UI.StateBag&quot;></xref>物件。"
  remarks: "TrackViewState 方法會覆寫來標示的起點開始追蹤並儲存變更至控制項的檢視狀態物件的一部分。"
  syntax:
    content: protected override void TrackViewState ();
    parameters: []
  overload: System.Web.UI.WebControls.ObjectDataSource.TrackViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.TypeName
  id: TypeName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: TypeName
  nameWithType: ObjectDataSource.TypeName
  fullName: System.Web.UI.WebControls.ObjectDataSource.TypeName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定的類別名稱<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>物件表示。"
  remarks: "若要建立物件的執行個體<xref:System.Web.UI.WebControls.ObjectDataSource>控制項繫結至、 控制項載入執行階段的型別名稱識別的型別會使用反映。</xref:System.Web.UI.WebControls.ObjectDataSource> 因此，類型名稱屬性的值可以是位於 Bin 或 App_Code 目錄中的程式碼的不完整的類型或全域組件快取中註冊的程式碼的完整限定的類型名稱。 如果您使用全域組件快取，您必須加入至適當的參考`assemblies`Machine.config 或 Web.config 檔案區段。       類型必須有預設建構函式，除非您處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>自行建立它的執行個體的事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 每次呼叫建立類型的執行個體<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>方法，如果型別上的方法成員方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 如果方法不會建立執行個體`static`(`Shared`在 Visual Basic 中)。 如果類型實作<xref:System.IDisposable>介面，<xref:System.IDisposable.Dispose%2A>方法會終結物件之前呼叫。</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable>"
  example:
  - "The following code example demonstrates how a <xref:System.Web.UI.WebControls.GridView> control can display data by using an <xref:System.Web.UI.WebControls.ObjectDataSource> control on a Web Forms page. The <xref:System.Web.UI.WebControls.ObjectDataSource> identifies a partially or fully qualified class name with its TypeName property and a method that is called to retrieve data with its <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. At run time, the object is created and the method is called using reflection. The <xref:System.Web.UI.WebControls.GridView> control enumerates through the <xref:System.Collections.IEnumerable> collection that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, and displays the data.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_850_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_850_1.aspx)]  \n  \n The following example shows the class that the TypeName property value refers to.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_850_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_850_2.vb)]"
  syntax:
    content: public string TypeName { get; set; }
    return:
      type: System.String
      description: "識別的物件類型的部分或完整限定的類別名稱， <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>代表。 預設為空字串 (&quot;&quot;)。"
  overload: System.Web.UI.WebControls.ObjectDataSource.TypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Update
  id: Update
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Update()
  nameWithType: ObjectDataSource.Update()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Update()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "藉由呼叫的方法，由執行更新作業<> *> 屬性和任何參數中<> *> 集合。"
  remarks: "商務物件會假設為一次，而不是批次中更新資料的一筆記錄。       在執行更新作業之前，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.Updating> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A> 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>檢查參數的值，並執行更新作業之前任何前置處理的事件。</xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 若要執行更新作業，<xref:System.Web.UI.WebControls.ObjectDataSourceView>物件使用反映來建立物件所識別的執行個體<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView> 然後它會呼叫的方法，由<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>使用所有相關聯的屬性<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 更新作業完成後，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.ObjectDataSource.Updated>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.Updated> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A> 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.Updated>事件檢查任何傳回值、 輸出參數，以及例外狀況，並執行任何後續處理。</xref:System.Web.UI.WebControls.ObjectDataSource.Updated>       更新方法會委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A>方法<xref:System.Web.UI.WebControls.ObjectDataSourceView>相關聯<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A>       如需參數合併、 物件存留期，以及方法解析的詳細資訊，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>      > [!IMPORTANT] > 則應該先驗證您從用戶端接收任何參數值。 執行階段只會替代參數值到<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>      ## 資料繫結控制項時<xref:System.Web.UI.WebControls.ObjectDataSource>與相關聯控制項的資料繫結控制項，例如<xref:System.Web.UI.WebControls.GridView>控制項，不需要的更新方法呼叫從網頁程式碼。</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> 更新方法會叫用資料繫結控制項來直接改為。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> objects to update data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> controls to update data. The <xref:System.Web.UI.WebControls.DropDownList> displays the name of a Northwind employee, while the <xref:System.Web.UI.WebControls.TextBox> controls are used to enter and update address information. Because the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection contains a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the selected value of the <xref:System.Web.UI.WebControls.DropDownList>, the button that raises the Update operation is enabled only after an employee is selected.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_97_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_97_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/csharp/m-system.web.ui.webcontr_97_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_97_2.vb)]"
  syntax:
    content: public int Update ();
    parameters: []
    return:
      type: System.Int32
      description: "值，表示基礎資料存放區中更新資料列數目。"
  overload: System.Web.UI.WebControls.ObjectDataSource.Update*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Updated
  id: Updated
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Updated
  nameWithType: ObjectDataSource.Updated
  fullName: System.Web.UI.WebControls.ObjectDataSource.Updated
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "發生時<xref:System.Web.UI.WebControls.ObjectDataSource.Update*>完成作業。</xref:System.Web.UI.WebControls.ObjectDataSource.Update*>"
  remarks: "處理已更新事件來檢查傳回值或輸出參數的值，或是判斷是否發生例外狀況之後<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>作業已完成。</xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 傳回值，輸出參數和例外狀況處理屬性都是從<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>與事件相關聯的物件。</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>       如需處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
  id: UpdateMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: UpdateMethod
  nameWithType: ObjectDataSource.UpdateMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定的方法或函式名稱<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控制項叫用來更新資料。"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>控制項假設 UpdateMethod 屬性所識別的方法會執行一次，而不是在批次更新一個。</xref:System.Web.UI.WebControls.ObjectDataSource>       UpdateMethod 屬性委派給<xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A>屬性<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A>       請確定參數名稱設定為<xref:System.Web.UI.WebControls.ObjectDataSource>控制<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合符合 select 方法所傳回的資料行名稱。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>      ## 物件存留期 UpdateMethod 屬性所識別的方法可以是執行個體方法或`static`(`Shared`在 Visual Basic 中) 方法。 如果是執行個體方法，會建立商務物件，並終結每次呼叫 UpdateMethod 屬性所指定的方法時。 您可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>呼叫 UpdateMethod 屬性所指定的方法之前，使用商務物件的事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 您也可以處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>呼叫 UpdateMethod 屬性所指定的方法之後，就會引發的事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 如果實作的商務物件<xref:System.IDisposable>介面，<xref:System.IDisposable.Dispose%2A>方法會終結物件之前呼叫。</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable> 如果該方法是`static`(`Shared`在 Visual Basic 中)，不會建立商務物件，而且您無法處理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>      ## 若要加入參數合併參數<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>三個來源的集合:-從資料繫結控制項，在執行階段。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>      -從`UpdateParameters`項目，以宣告方式。      -從<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件處理常式，以程式設計的方式。</xref:System.Web.UI.WebControls.ObjectDataSource.Updating>       首先，將資料繫結控制項所產生的任何參數加入至<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 例如，如果<xref:System.Web.UI.WebControls.ObjectDataSource>控制項繫結至<xref:System.Web.UI.WebControls.GridView>具有資料行的控制`Name`和`Number`，參數`Name`和`Number`加入至集合。</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> 完整名稱的參數取決於<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 這些參數的資料類型是`string`。 下一步，參數中所列`UpdateParameters`加入項目。 如果中的參數`UpdateParameters`找到項目具有相同名稱做為參數已經在<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>修改集合，現有的參數符合參數中指定`UpdateParameters`項目。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 一般而言，這用來修改參數中的資料類型。 最後，您可以透過程式設計方式加入和移除參數中的<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件之前發生<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>方法執行。</xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 會合併這些參數之後，就會解決方法。 在下一節討論方法解析。      > [!IMPORTANT] > 則應該先驗證您從用戶端接收任何參數值。 執行階段只會取代 UpdateMethod 屬性參數值。      ## 方法解析時<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>呼叫方法時，資料繫結控制項，以宣告方式中所建立的參數的資料欄位`UpdateParameters`項目，並已加入的參數<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>所有合併事件處理常式。</xref:System.Web.UI.WebControls.ObjectDataSource.Updating> </xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> （如需詳細資訊，請參閱上一節）。<xref:System.Web.UI.WebControls.ObjectDataSource>控制然後嘗試尋找要呼叫的方法。</xref:System.Web.UI.WebControls.ObjectDataSource> 首先，它會尋找具有 UpdateMethod 屬性中指定名稱的一或多個方法。 如果找到相符項目，<xref:System.InvalidOperationException>擲回例外狀況。</xref:System.InvalidOperationException> 如果找到相符項目，則會尋找相符的參數名稱。 例如，假設由所指定的型別<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>屬性有兩個方法，名為`UpdateARecord`。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 一個`UpdateARecord`具有一個參數， `ID`，和其他`UpdateARecord`有兩個參數，`Name`和`Number`。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合具有名為只有一個參數`ID`、`UpdateARecord`方法只`ID`參數呼叫。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 參數的型別不會檢查在解析方法。 參數的順序不重要。       如果<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性設定，方法解決了不同的方式。</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> <xref:System.Web.UI.WebControls.ObjectDataSource>會尋找名稱中指定 UpdateMethod 屬性會接受一個參數的型別，方法指定於<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 在此情況下，參數的名稱並不重要。"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable a user to retrieve and update records in the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve, display, and modify the data from the employee record that is selected by the user.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_943_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_943_1.aspx)]  \n  \n The second example shows handlers for the <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> and <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> events. The <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> event handler serializes the object that contains data that was retrieved from the Employee table. The serialized object is stored in view state. The <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event handler deserializes the object in view state that contains the original data for the data record that is being updated. The object that contains the original data is passed as a parameter to the Update method. The original data must be passed to the database so that it can be used to check whether the data has been modified by another process.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_943_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_943_2.cs)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query and update the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_943_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_943_3.cs)]"
  syntax:
    content: public string UpdateMethod { get; set; }
    return:
      type: System.String
      description: "字串，代表方法的名稱，或函式， <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>用來更新資料。 預設為空字串。"
  overload: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
  id: UpdateParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: UpdateParameters
  nameWithType: ObjectDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得參數集合，其中包含所指定的方法所使用的參數<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*>"
  remarks: "名稱和 UpdateParameters 集合中所包含的參數類型必須符合的名稱和型別中的參數<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>方法簽章。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 參數名稱會受到<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>屬性而且有區分大小寫。</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 集合中的參數取決於資料繫結控制項，以宣告方式，指定的參數和以程式設計方式加入的參數中的資料。 如需詳細資訊，請參閱中的 「 合併參數 」 一節<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>和[ObjectDataSource 控制項配合使用參數](~/add/includes/ajax-current-ext-md.md)。</xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>       UpdateParameters 屬性擷取<xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A>屬性所包含的<xref:System.Web.UI.WebControls.ObjectDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.ObjectDataSource>控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A>       如需參數合併、 物件存留期，以及方法解析的詳細資訊，請參閱<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>.</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>      > [!IMPORTANT] > 則應該先驗證您從用戶端接收任何參數值。 執行階段只會替代參數值到<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> objects to update data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> controls to update data. The <xref:System.Web.UI.WebControls.DropDownList> displays the name of a Northwind employee, while the <xref:System.Web.UI.WebControls.TextBox> controls are used to enter and update address information. Because the UpdateParameters collection contains a <xref:System.Web.UI.WebControls.ControlParameter> that is bound to the selected value of the <xref:System.Web.UI.WebControls.DropDownList>, the button that raises the <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> operation is enabled only after an employee is selected.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_610_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_610_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_610_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_610_2.vb)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> ，其中包含所指定的方法所使用的參數<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Updating
  id: Updating
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Updating
  nameWithType: ObjectDataSource.Updating
  fullName: System.Web.UI.WebControls.ObjectDataSource.Updating
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "發生於之前<xref:System.Web.UI.WebControls.ObjectDataSource.Update*>作業。</xref:System.Web.UI.WebControls.ObjectDataSource.Update*>"
  remarks: "處理更新事件，以執行額外的初始化專屬於您的應用程式，來驗證參數的值，或若要變更參數值之前<xref:System.Web.UI.WebControls.ObjectDataSource>控制項執行更新作業。</xref:System.Web.UI.WebControls.ObjectDataSource> 參數是可做為<xref:System.Collections.IDictionary>所存取的集合<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>屬性，由<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>物件。</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> </xref:System.Collections.IDictionary>       如需處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable a user to retrieve and update records in the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve, display, and modify the data from the employee record that is selected by the user.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_25_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_25_1.aspx)]  \n  \n The second example shows handlers for the <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> and Updating events. The <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> event handler serializes the object that contains data that was retrieved from the Employee table. The serialized object is stored in view state. The Updating event handler deserializes the object in view state that contains the original data for the data record that is being updated. The object that contains the original data is passed as a parameter to the Update method. The original data must be passed to the database so that it can be used to check whether the data has been modified by another process.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_25_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_25_2.cs)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query and update the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_25_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/e-system.web.ui.webcontr_25_3.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.DataSourceControl
  isExternal: false
  name: System.Web.UI.DataSourceControl
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectDataSource()
  nameWithType: ObjectDataSource.ObjectDataSource()
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource()
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectDataSource(String,String)
  nameWithType: ObjectDataSource.ObjectDataSource(String,String)
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheDuration
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: ObjectDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheDuration
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: ObjectDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
- uid: System.Web.UI.DataSourceCacheExpiry
  parent: System.Web.UI
  isExternal: false
  name: DataSourceCacheExpiry
  nameWithType: DataSourceCacheExpiry
  fullName: System.Web.UI.DataSourceCacheExpiry
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: ObjectDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ConflictDetection
  nameWithType: ObjectDataSource.ConflictDetection
  fullName: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
- uid: System.Web.UI.ConflictOptions
  parent: System.Web.UI
  isExternal: false
  name: ConflictOptions
  nameWithType: ConflictOptions
  fullName: System.Web.UI.ConflictOptions
- uid: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ConvertNullToDBNull
  nameWithType: ObjectDataSource.ConvertNullToDBNull
  fullName: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DataObjectTypeName
  nameWithType: ObjectDataSource.DataObjectTypeName
  fullName: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
- uid: System.Web.UI.WebControls.ObjectDataSource.Delete
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Delete()
  nameWithType: ObjectDataSource.Delete()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Delete()
- uid: System.Web.UI.WebControls.ObjectDataSource.Deleted
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Deleted
  nameWithType: ObjectDataSource.Deleted
  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleted
- uid: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceStatusEventHandler
  nameWithType: ObjectDataSourceStatusEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DeleteMethod
  nameWithType: ObjectDataSource.DeleteMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: ObjectDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.ParameterCollection
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParameterCollection
  nameWithType: ParameterCollection
  fullName: System.Web.UI.WebControls.ParameterCollection
- uid: System.Web.UI.WebControls.ObjectDataSource.Deleting
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Deleting
  nameWithType: ObjectDataSource.Deleting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleting
- uid: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceMethodEventHandler
  nameWithType: ObjectDataSourceMethodEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.EnableCaching
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: ObjectDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.ObjectDataSource.EnableCaching
- uid: System.Web.UI.WebControls.ObjectDataSource.EnablePaging
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: EnablePaging
  nameWithType: ObjectDataSource.EnablePaging
  fullName: System.Web.UI.WebControls.ObjectDataSource.EnablePaging
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterExpression
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: FilterExpression
  nameWithType: ObjectDataSource.FilterExpression
  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterExpression
- uid: System.Web.UI.WebControls.ObjectDataSource.Filtering
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Filtering
  nameWithType: ObjectDataSource.Filtering
  fullName: System.Web.UI.WebControls.ObjectDataSource.Filtering
- uid: System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceFilteringEventHandler
  nameWithType: ObjectDataSourceFilteringEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: FilterParameters
  nameWithType: ObjectDataSource.FilterParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: GetView(String)
  nameWithType: ObjectDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.ObjectDataSource.GetView(String)
- uid: System.Web.UI.DataSourceView
  parent: System.Web.UI
  isExternal: false
  name: DataSourceView
  nameWithType: DataSourceView
  fullName: System.Web.UI.DataSourceView
- uid: System.Web.UI.WebControls.ObjectDataSource.GetViewNames
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: GetViewNames()
  nameWithType: ObjectDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.ObjectDataSource.GetViewNames()
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Web.UI.WebControls.ObjectDataSource.Insert
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Insert()
  nameWithType: ObjectDataSource.Insert()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Insert()
- uid: System.Web.UI.WebControls.ObjectDataSource.Inserted
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Inserted
  nameWithType: ObjectDataSource.Inserted
  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserted
- uid: System.Web.UI.WebControls.ObjectDataSource.Inserting
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Inserting
  nameWithType: ObjectDataSource.Inserting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserting
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: InsertMethod
  nameWithType: ObjectDataSource.InsertMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: ObjectDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: LoadViewState(Object)
  nameWithType: ObjectDataSource.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: MaximumRowsParameterName
  nameWithType: ObjectDataSource.MaximumRowsParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectCreated
  nameWithType: ObjectDataSource.ObjectCreated
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
- uid: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceObjectEventHandler
  nameWithType: ObjectDataSourceObjectEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectCreating
  nameWithType: ObjectDataSource.ObjectCreating
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectDisposing
  nameWithType: ObjectDataSource.ObjectDisposing
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
- uid: System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceDisposingEventHandler
  nameWithType: ObjectDataSourceDisposingEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: OldValuesParameterFormatString
  nameWithType: ObjectDataSource.OldValuesParameterFormatString
  fullName: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
- uid: System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: ObjectDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.ObjectDataSource.OnInit(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ParsingCulture
  nameWithType: ObjectDataSource.ParsingCulture
  fullName: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
- uid: System.Web.UI.WebControls.ParsingCulture
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParsingCulture
  nameWithType: ParsingCulture
  fullName: System.Web.UI.WebControls.ParsingCulture
- uid: System.Web.UI.WebControls.ObjectDataSource.SaveViewState
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SaveViewState()
  nameWithType: ObjectDataSource.SaveViewState()
  fullName: System.Web.UI.WebControls.ObjectDataSource.SaveViewState()
- uid: System.Web.UI.WebControls.ObjectDataSource.Select
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Select()
  nameWithType: ObjectDataSource.Select()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Select()
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectCountMethod
  nameWithType: ObjectDataSource.SelectCountMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.Selected
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Selected
  nameWithType: ObjectDataSource.Selected
  fullName: System.Web.UI.WebControls.ObjectDataSource.Selected
- uid: System.Web.UI.WebControls.ObjectDataSource.Selecting
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Selecting
  nameWithType: ObjectDataSource.Selecting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Selecting
- uid: System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceSelectingEventHandler
  nameWithType: ObjectDataSourceSelectingEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectMethod
  nameWithType: ObjectDataSource.SelectMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: ObjectDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.SortParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SortParameterName
  nameWithType: ObjectDataSource.SortParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.SortParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SqlCacheDependency
  nameWithType: ObjectDataSource.SqlCacheDependency
  fullName: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
- uid: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: StartRowIndexParameterName
  nameWithType: ObjectDataSource.StartRowIndexParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.TrackViewState
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: TrackViewState()
  nameWithType: ObjectDataSource.TrackViewState()
  fullName: System.Web.UI.WebControls.ObjectDataSource.TrackViewState()
- uid: System.Web.UI.WebControls.ObjectDataSource.TypeName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: TypeName
  nameWithType: ObjectDataSource.TypeName
  fullName: System.Web.UI.WebControls.ObjectDataSource.TypeName
- uid: System.Web.UI.WebControls.ObjectDataSource.Update
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Update()
  nameWithType: ObjectDataSource.Update()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Update()
- uid: System.Web.UI.WebControls.ObjectDataSource.Updated
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Updated
  nameWithType: ObjectDataSource.Updated
  fullName: System.Web.UI.WebControls.ObjectDataSource.Updated
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: UpdateMethod
  nameWithType: ObjectDataSource.UpdateMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: ObjectDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.Updating
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Updating
  nameWithType: ObjectDataSource.Updating
  fullName: System.Web.UI.WebControls.ObjectDataSource.Updating
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectDataSource
  nameWithType: ObjectDataSource.ObjectDataSource
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheDuration*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: ObjectDataSource.CacheDuration
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: ObjectDataSource.CacheExpirationPolicy
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: ObjectDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ConflictDetection
  nameWithType: ObjectDataSource.ConflictDetection
- uid: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ConvertNullToDBNull
  nameWithType: ObjectDataSource.ConvertNullToDBNull
- uid: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DataObjectTypeName
  nameWithType: ObjectDataSource.DataObjectTypeName
- uid: System.Web.UI.WebControls.ObjectDataSource.Delete*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Delete
  nameWithType: ObjectDataSource.Delete
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DeleteMethod
  nameWithType: ObjectDataSource.DeleteMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: ObjectDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.EnableCaching*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: ObjectDataSource.EnableCaching
- uid: System.Web.UI.WebControls.ObjectDataSource.EnablePaging*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: EnablePaging
  nameWithType: ObjectDataSource.EnablePaging
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterExpression*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: FilterExpression
  nameWithType: ObjectDataSource.FilterExpression
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: FilterParameters
  nameWithType: ObjectDataSource.FilterParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.GetView*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: GetView
  nameWithType: ObjectDataSource.GetView
- uid: System.Web.UI.WebControls.ObjectDataSource.GetViewNames*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: GetViewNames
  nameWithType: ObjectDataSource.GetViewNames
- uid: System.Web.UI.WebControls.ObjectDataSource.Insert*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Insert
  nameWithType: ObjectDataSource.Insert
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: InsertMethod
  nameWithType: ObjectDataSource.InsertMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: ObjectDataSource.InsertParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.LoadViewState*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: LoadViewState
  nameWithType: ObjectDataSource.LoadViewState
- uid: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: MaximumRowsParameterName
  nameWithType: ObjectDataSource.MaximumRowsParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: OldValuesParameterFormatString
  nameWithType: ObjectDataSource.OldValuesParameterFormatString
- uid: System.Web.UI.WebControls.ObjectDataSource.OnInit*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: OnInit
  nameWithType: ObjectDataSource.OnInit
- uid: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ParsingCulture
  nameWithType: ObjectDataSource.ParsingCulture
- uid: System.Web.UI.WebControls.ObjectDataSource.SaveViewState*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SaveViewState
  nameWithType: ObjectDataSource.SaveViewState
- uid: System.Web.UI.WebControls.ObjectDataSource.Select*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Select
  nameWithType: ObjectDataSource.Select
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectCountMethod
  nameWithType: ObjectDataSource.SelectCountMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectMethod
  nameWithType: ObjectDataSource.SelectMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: ObjectDataSource.SelectParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.SortParameterName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SortParameterName
  nameWithType: ObjectDataSource.SortParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SqlCacheDependency
  nameWithType: ObjectDataSource.SqlCacheDependency
- uid: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: StartRowIndexParameterName
  nameWithType: ObjectDataSource.StartRowIndexParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.TrackViewState*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: TrackViewState
  nameWithType: ObjectDataSource.TrackViewState
- uid: System.Web.UI.WebControls.ObjectDataSource.TypeName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: TypeName
  nameWithType: ObjectDataSource.TypeName
- uid: System.Web.UI.WebControls.ObjectDataSource.Update*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Update
  nameWithType: ObjectDataSource.Update
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: UpdateMethod
  nameWithType: ObjectDataSource.UpdateMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: ObjectDataSource.UpdateParameters
