### YamlMime:ManagedReference
items:
- uid: System.Reflection.ObfuscateAssemblyAttribute
  id: ObfuscateAssemblyAttribute
  children:
  - System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)
  - System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
  - System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
  langs:
  - csharp
  name: ObfuscateAssemblyAttribute
  nameWithType: ObfuscateAssemblyAttribute
  fullName: System.Reflection.ObfuscateAssemblyAttribute
  type: Class
  summary: "指示模糊化工具，其標準模糊化規則用於適當的組件類型。"
  remarks: "<xref:System.Reflection.ObfuscationAttribute>和 ObfuscateAssemblyAttribute 屬性為提供的方式來標註它們二進位檔，以便模糊化工具可以正確地處理這些最少的外部組態的組件作者。</xref:System.Reflection.ObfuscationAttribute>       將此屬性套用至組件會告知模糊化工具以使用其預設規則組件類型。      > [!IMPORTANT] > 套用這個屬性並不會自動模糊化組件。 套用此屬性是建立模糊化工具的組態檔的替代方案。 也就是說，它只提供模糊化工具的指示。 Microsoft 建議的模糊化工具廠商依照此處所述的語意。 不過，沒有特定的工具會遵循 Microsoft 建議保證。       您可以套用<xref:System.Reflection.ObfuscationAttribute>組件中的類型，以及在這些類型的成員。</xref:System.Reflection.ObfuscationAttribute> 最內層的屬性會控制方式模糊化工具會將任何特定的程式碼實體。"
  example:
  - "The following code example shows a private assembly that has been marked with the ObfuscateAssemblyAttribute. The <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> property is `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \n  \n For a code example that shows the use of ObfuscateAssemblyAttribute with <xref:System.Reflection.ObfuscationAttribute>, see the <xref:System.Reflection.ObfuscationAttribute> class.  \n  \n [!code-vb[ObfuscateAssemblyAttribute#1](~/add/codesnippet/visualbasic/t-system.reflection.obfu_0_1.vb)]\n [!code-cs[ObfuscateAssemblyAttribute#1](~/add/codesnippet/csharp/t-system.reflection.obfu_0_1.cs)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=false, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ObfuscateAssemblyAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Reflection.ObfuscateAssemblyAttribute
  langs:
  - csharp
  name: ObfuscateAssemblyAttribute(Boolean)
  nameWithType: ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)
  fullName: System.Reflection.ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "初始化的新執行個體<xref href=&quot;System.Reflection.ObfuscateAssemblyAttribute&quot;></xref>類別，指定要模糊化的組件是否為 public 或 private。"
  remarks: "如果它們僅供您的應用程式，而不供其他軟體程式庫，請將標示為私用組件。 一般而言，標示為私用組件會告知模糊化工具，它可以模糊化包括一部分模糊化應用程式的公用方法的所有方法的名稱。 如果組件是 public，模糊化工具應該不會模糊化公用成員的名稱。      > [!IMPORTANT] > 套用這個屬性並不會自動模糊化組件。 套用此屬性是建立模糊化工具的組態檔的替代方案。 也就是說，它只提供模糊化工具的指示。 Microsoft 建議的模糊化工具廠商依照此處所述的語意。 不過，沒有特定的工具會遵循 Microsoft 建議保證。"
  example:
  - "The following code example shows how the attribute constructor specifies that an assembly is private. The <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> property is `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \n  \n [!code-vb[ObfuscateAssemblyAttribute#1](~/add/codesnippet/visualbasic/m-system.reflection.obfu_1.vb)]\n [!code-cs[ObfuscateAssemblyAttribute#1](~/add/codesnippet/csharp/m-system.reflection.obfu_1.cs)]"
  syntax:
    content: public ObfuscateAssemblyAttribute (bool assemblyIsPrivate);
    parameters:
    - id: assemblyIsPrivate
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果單一應用程式; 範圍內使用的組件否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Reflection.ObfuscateAssemblyAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
  id: AssemblyIsPrivate
  parent: System.Reflection.ObfuscateAssemblyAttribute
  langs:
  - csharp
  name: AssemblyIsPrivate
  nameWithType: ObfuscateAssemblyAttribute.AssemblyIsPrivate
  fullName: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "取得<xref:System.Boolean>值，指出是否將組件已標示為私用。</xref:System.Boolean>"
  remarks: "只能由應用程式它是一部分，而不是由其他軟體，則會使用私用組件。      > [!IMPORTANT] > 套用這個屬性並不會自動模糊化組件。 套用此屬性是建立模糊化工具的組態檔的替代方案。 也就是說，它只提供模糊化工具的指示。 Microsoft 建議的模糊化工具廠商依照此處所述的語意。 不過，沒有特定的工具會遵循 Microsoft 建議保證。"
  example:
  - "The following code example shows how the attribute constructor sets the AssemblyIsPrivate property to `true`, to specify that an assembly is private. The <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> property is `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \n  \n [!code-vb[ObfuscateAssemblyAttribute#1](~/add/codesnippet/visualbasic/p-system.reflection.obfu_2_1.vb)]\n [!code-cs[ObfuscateAssemblyAttribute#1](~/add/codesnippet/csharp/p-system.reflection.obfu_2_1.cs)]"
  syntax:
    content: public bool AssemblyIsPrivate { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果組件標示為私用。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
  id: StripAfterObfuscation
  parent: System.Reflection.ObfuscateAssemblyAttribute
  langs:
  - csharp
  name: StripAfterObfuscation
  nameWithType: ObfuscateAssemblyAttribute.StripAfterObfuscation
  fullName: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "取得或設定<xref:System.Boolean>值，指出模糊化工具處理後是否移除屬性。</xref:System.Boolean>"
  remarks: "如果您的程式庫會納入其他應用程式的一部分，而且混淆做為該應用程式的一部分，就應該刪除屬性。       指定應該帶狀模糊化工具<xref:System.Reflection.ObfuscateAssemblyAttribute>不會影響執行個體<xref:System.Reflection.ObfuscationAttribute>，已套用至型別和組件中的成員。</xref:System.Reflection.ObfuscationAttribute> </xref:System.Reflection.ObfuscateAssemblyAttribute>      > [!IMPORTANT] > 套用這個屬性並不會自動模糊化組件。 套用此屬性是建立模糊化工具的組態檔的替代方案。 也就是說，它只提供模糊化工具的指示。 Microsoft 建議的模糊化工具廠商依照此處所述的語意。 不過，沒有特定的工具會遵循 Microsoft 建議保證。"
  example:
  - "The following code example shows the <xref:System.Reflection.ObfuscateAssemblyAttribute> attribute with the StripAfterObfuscation property set to `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \n  \n [!code-vb[ObfuscateAssemblyAttribute#1](~/add/codesnippet/visualbasic/p-system.reflection.obfu_3_1.vb)]\n [!code-cs[ObfuscateAssemblyAttribute#1](~/add/codesnippet/csharp/p-system.reflection.obfu_3_1.cs)]"
  syntax:
    content: public bool StripAfterObfuscation { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果模糊化工具應該處理; 之後移除屬性否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 這個屬性的預設值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: ObfuscateAssemblyAttribute(Boolean)
  nameWithType: ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)
  fullName: System.Reflection.ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: AssemblyIsPrivate
  nameWithType: ObfuscateAssemblyAttribute.AssemblyIsPrivate
  fullName: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
- uid: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: StripAfterObfuscation
  nameWithType: ObfuscateAssemblyAttribute.StripAfterObfuscation
  fullName: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
- uid: System.Reflection.ObfuscateAssemblyAttribute.#ctor*
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: ObfuscateAssemblyAttribute
  nameWithType: ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute
- uid: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate*
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: AssemblyIsPrivate
  nameWithType: ObfuscateAssemblyAttribute.AssemblyIsPrivate
- uid: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation*
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: StripAfterObfuscation
  nameWithType: ObfuscateAssemblyAttribute.StripAfterObfuscation
