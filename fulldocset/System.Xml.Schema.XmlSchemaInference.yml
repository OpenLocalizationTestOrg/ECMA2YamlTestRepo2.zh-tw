### YamlMime:ManagedReference
items:
- uid: System.Xml.Schema.XmlSchemaInference
  id: XmlSchemaInference
  children:
  - System.Xml.Schema.XmlSchemaInference.#ctor
  - System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader)
  - System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet)
  - System.Xml.Schema.XmlSchemaInference.Occurrence
  - System.Xml.Schema.XmlSchemaInference.TypeInference
  langs:
  - csharp
  name: XmlSchemaInference
  nameWithType: XmlSchemaInference
  fullName: System.Xml.Schema.XmlSchemaInference
  type: Class
  summary: "推斷 XML 結構描述定義語言 (XSD) 結構描述從 XML 文件。 XmlSchemaInference 類別無法被繼承。"
  remarks: "> [!IMPORTANT]>-請勿使用結構描述從未知或未受信任的來源或位置。 如此一來，將危害您的程式碼的安全性。   >-（包括內嵌結構描述） 的 XML 結構描述是本質上容易遭到阻絕服務攻擊。不接受其在受信任的案例。   >-結構描述驗證錯誤訊息和例外狀況可能會公開機密資訊的內容模型或結構描述檔案的 URI 路徑。 請小心不要公開給未受信任的呼叫端的這項資訊。       中的 XmlSchemaInference 類別<xref:System.Xml.Schema?displayProperty=fullName>命名空間可讓您推斷 XML 結構描述定義語言 (XSD) 結構描述從 XML 文件的結構。</xref:System.Xml.Schema?displayProperty=fullName> XmlSchemaInference 類別會輸出可驗證 XML 文件的 XML 結構描述。       XmlSchemaInference 類別支援 W3C XML 和 XML 結構描述標準。 它可以用於推斷新的結構描述，或修改現有的結構描述。"
  example:
  - "This example takes an XML file as input, and generates a schema that can validate the example XML.  \n  \n [!code-cs[XmlSchemaInferenceExamples#1](~/add/codesnippet/csharp/t-system.xml.schema.xmls_24_1.cs)]\n [!code-cpp[XmlSchemaInferenceExamples#1](~/add/codesnippet/cpp/t-system.xml.schema.xmls_24_1.cpp)]\n [!code-vb[XmlSchemaInferenceExamples#1](~/add/codesnippet/visualbasic/t-system.xml.schema.xmls_24_1.vb)]  \n  \n The following is the input XML file.  \n  \n [!code-xml[XmlSchemaInferenceExamples#5](~/add/codesnippet/xml/t-system.xml.schema.xmls_24_2.xml)]  \n  \n The following is the schema inferred from the XML document.  \n  \n [!code-xml[XmlSchemaInferenceExamples#6](~/add/codesnippet/xml/t-system.xml.schema.xmls_24_3.xsd)]"
  syntax:
    content: public sealed class XmlSchemaInference
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaInference.#ctor
  id: '#ctor'
  parent: System.Xml.Schema.XmlSchemaInference
  langs:
  - csharp
  name: XmlSchemaInference()
  nameWithType: XmlSchemaInference.XmlSchemaInference()
  fullName: System.Xml.Schema.XmlSchemaInference.XmlSchemaInference()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "初始化的新執行個體<xref href=&quot;System.Xml.Schema.XmlSchemaInference&quot;></xref>類別。"
  syntax:
    content: public XmlSchemaInference ();
    parameters: []
  overload: System.Xml.Schema.XmlSchemaInference.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader)
  id: InferSchema(System.Xml.XmlReader)
  parent: System.Xml.Schema.XmlSchemaInference
  langs:
  - csharp
  name: InferSchema(XmlReader)
  nameWithType: XmlSchemaInference.InferSchema(XmlReader)
  fullName: System.Xml.Schema.XmlSchemaInference.InferSchema(XmlReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "推斷 XML 結構描述定義語言 (XSD) 結構描述中包含的 XML 文件從<xref:System.Xml.XmlReader>指定的物件。</xref:System.Xml.XmlReader>"
  remarks: "InferSchema 方法推斷其中一個或多個 W3C XML 結構描述定義語言 (XSD) 結構描述的 xml 執行個體中包含文件<xref:System.Xml.XmlReader>指定的物件。</xref:System.Xml.XmlReader> 如果 XML 文件包含項目和屬性從多個命名空間，則會產生多個結構描述︰ 一個用於每個文件中所使用的命名空間。 主要的結構描述可以驗證整個 XML 文件的結構描述，而且它的目標命名空間是 XML 文件的文件項目的命名空間相同。       以下是使用 InferSchema 方法時要考慮的重要注意事項。      -InferSchema 方法會略過任何`xsi:type`， `xsi:schemaLocation`，或`xsi:noNamespaceSchemaLocation`XML 文件中的屬性。      -如果<xref:System.Xml.XmlReader>物件類型，它包含的型別資訊會被忽略。</xref:System.Xml.XmlReader>      -如果<xref:System.Xml.XmlReader>物件所在的項目不是 XML 文件的根項目，只有該元素推斷的結構描述。</xref:System.Xml.XmlReader> 如果<xref:System.Xml.XmlReader>物件不位在項目<xref:System.Xml.XmlReader.Read%2A>上呼叫方法<xref:System.Xml.XmlReader>參數，直到遇到的項目 (例如，當<xref:System.Xml.XmlReader.NodeType%2A>是<xref:System.Xml.XmlNodeType>)。</xref:System.Xml.XmlNodeType> </xref:System.Xml.XmlReader.NodeType%2A> </xref:System.Xml.XmlReader> </xref:System.Xml.XmlReader.Read%2A> </xref:System.Xml.XmlReader> 此時，推斷程序會開始從該項目。 如果沒有任何項目發生之前的文件結尾<xref:System.ArgumentException>就會擲回。</xref:System.ArgumentException>"
  example:
  - "This example takes an XML file as input, and generates a schema that can validate the example XML.  \n  \n [!code-cs[XmlSchemaInferenceExamples#1](~/add/codesnippet/csharp/m-system.xml.schema.xmls_6_1.cs)]\n [!code-cpp[XmlSchemaInferenceExamples#1](~/add/codesnippet/cpp/m-system.xml.schema.xmls_6_1.cpp)]\n [!code-vb[XmlSchemaInferenceExamples#1](~/add/codesnippet/visualbasic/m-system.xml.schema.xmls_6_1.vb)]  \n  \n The following is the input XML file.  \n  \n [!code-xml[XmlSchemaInferenceExamples#5](~/add/codesnippet/xml/m-system.xml.schema.xmls_6_2.xml)]  \n  \n The following is the schema inferred from the XML document.  \n  \n [!code-xml[XmlSchemaInferenceExamples#6](~/add/codesnippet/xml/m-system.xml.schema.xmls_6_3.xsd)]"
  syntax:
    content: public System.Xml.Schema.XmlSchemaSet InferSchema (System.Xml.XmlReader instanceDocument);
    parameters:
    - id: instanceDocument
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>物件，其中包含 XML 文件推斷結構描述從。</xref:System.Xml.XmlReader>"
    return:
      type: System.Xml.Schema.XmlSchemaSet
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>包含推斷的結構描述的物件。"
  overload: System.Xml.Schema.XmlSchemaInference.InferSchema*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "XML 文件格式不正確。"
  - type: System.Xml.Schema.XmlSchemaInferenceException
    commentId: T:System.Xml.Schema.XmlSchemaInferenceException
    description: "<xref:System.Xml.XmlReader>物件不位在根節點或項目上。</xref:System.Xml.XmlReader> 結構描述推斷程序期間，發生錯誤。"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet)
  id: InferSchema(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet)
  parent: System.Xml.Schema.XmlSchemaInference
  langs:
  - csharp
  name: InferSchema(XmlReader,XmlSchemaSet)
  nameWithType: XmlSchemaInference.InferSchema(XmlReader,XmlSchemaSet)
  fullName: System.Xml.Schema.XmlSchemaInference.InferSchema(XmlReader,XmlSchemaSet)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "推斷 XML 結構描述定義語言 (XSD) 結構描述中包含的 XML 文件從<xref:System.Xml.XmlReader>物件指定，而推斷的結構描述使用現有的結構描述中的精簡<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>物件指定相同的目標命名空間。</xref:System.Xml.XmlReader>"
  remarks: "InferSchema 方法推斷其中一個或多個 W3C XML 結構描述定義語言 (XSD) 結構描述的 xml 執行個體中包含文件<xref:System.Xml.XmlReader>指定的物件。</xref:System.Xml.XmlReader> 如果 XML 文件包含項目和屬性從多個命名空間，則會產生多個結構描述︰ 一個用於每個文件中所使用的命名空間。 主要的結構描述可以驗證整個 XML 文件的結構描述，而且它的目標命名空間是 XML 文件的文件項目的命名空間相同。       以下是使用 InferSchema 方法時要考慮的重要注意事項。      -InferSchema 方法會略過任何`xsi:type`， `xsi:schemaLocation`，或`xsi:noNamespaceSchemaLocation`XML 文件中的屬性。      -如果<xref:System.Xml.XmlReader>物件類型，它包含的型別資訊會被忽略。</xref:System.Xml.XmlReader>      -如果<xref:System.Xml.XmlReader>物件所在的項目不是 XML 文件的根項目，只有該元素推斷的結構描述。</xref:System.Xml.XmlReader> 如果<xref:System.Xml.XmlReader>物件不位在項目<xref:System.Xml.XmlReader.Read%2A>上呼叫方法<xref:System.Xml.XmlReader>參數，直到遇到的項目 (例如，當<xref:System.Xml.XmlReader.NodeType%2A>是<xref:System.Xml.XmlNodeType>)。</xref:System.Xml.XmlNodeType> </xref:System.Xml.XmlReader.NodeType%2A> </xref:System.Xml.XmlReader> </xref:System.Xml.XmlReader.Read%2A> </xref:System.Xml.XmlReader> 此時，推斷程序會開始從該項目。 如果沒有任何項目發生之前的文件結尾<xref:System.ArgumentException>就會擲回。</xref:System.ArgumentException>      -如果<xref:System.Xml.Schema.XmlSchemaSet>物件會傳遞做為參數和賴以元素<xref:System.Xml.XmlReader>物件定位於中其中一個結構描述中定義<xref:System.Xml.Schema.XmlSchemaSet>，推斷的結構描述用來修改現有的結構描述中<xref:System.Xml.Schema.XmlSchemaSet>參數具有相同的目標命名空間中; 否則新的結構描述就會推斷為命名空間。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.XmlReader> </xref:System.Xml.Schema.XmlSchemaSet>"
  example:
  - "The following example code takes XML document 1 as an input and generates a schema that can validate XML document 1. The example code then takes XML document 2 and refines the schema generated from XML document 1, based on the changes found in XML document 2.  \n  \n The following is XML document 1.  \n  \n [!code-xml[XmlSchemaInferenceExamples#13](~/add/codesnippet/xml/0c36415c-5ade-4e0e-8494-_1.xml)]  \n  \n The following is XML document 2.  \n  \n [!code-xml[XmlSchemaInferenceExamples#14](~/add/codesnippet/xml/0c36415c-5ade-4e0e-8494-_2.xml)]  \n  \n The following example code infers a schema from the first XML document contained in `reader`, and then refines the inferred schema with the changes found in the second XML document contained in `reader1`. The example code uses the first overloaded <xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A> method to infer the schema, and the second overloaded InferSchema method to refine the existing schema in the <xref:System.Xml.Schema.XmlSchemaSet> object.  \n  \n [!code-cs[XmlSchemaInferenceExamples#4](~/add/codesnippet/csharp/0c36415c-5ade-4e0e-8494-_3.cs)]\n [!code-cpp[XmlSchemaInferenceExamples#4](~/add/codesnippet/cpp/0c36415c-5ade-4e0e-8494-_3.cpp)]\n [!code-vb[XmlSchemaInferenceExamples#4](~/add/codesnippet/visualbasic/0c36415c-5ade-4e0e-8494-_3.vb)]  \n  \n The following schema is the schema inferred from XML document 1.  \n  \n [!code-xml[XmlSchemaInferenceExamples#15](~/add/codesnippet/xml/0c36415c-5ade-4e0e-8494-_4.xml)]  \n  \n The following schema is the refined version of the schema above, based on XML document 2.  \n  \n [!code-xml[XmlSchemaInferenceExamples#16](~/add/codesnippet/xml/0c36415c-5ade-4e0e-8494-_5.xml)]"
  syntax:
    content: public System.Xml.Schema.XmlSchemaSet InferSchema (System.Xml.XmlReader instanceDocument, System.Xml.Schema.XmlSchemaSet schemas);
    parameters:
    - id: instanceDocument
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>物件，其中包含 XML 文件推斷結構描述從。</xref:System.Xml.XmlReader>"
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>物件，其中包含現有的結構描述，用來精簡推斷的結構描述。"
    return:
      type: System.Xml.Schema.XmlSchemaSet
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>包含推斷的結構描述的物件。"
  overload: System.Xml.Schema.XmlSchemaInference.InferSchema*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "XML 文件格式不正確。"
  - type: System.Xml.Schema.XmlSchemaInferenceException
    commentId: T:System.Xml.Schema.XmlSchemaInferenceException
    description: "<xref:System.Xml.XmlReader>物件不位在根節點或項目上。</xref:System.Xml.XmlReader> 結構描述推斷程序期間，發生錯誤。"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaInference.Occurrence
  id: Occurrence
  parent: System.Xml.Schema.XmlSchemaInference
  langs:
  - csharp
  name: Occurrence
  nameWithType: XmlSchemaInference.Occurrence
  fullName: System.Xml.Schema.XmlSchemaInference.Occurrence
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "取得或設定<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>會影響從 XML 文件推斷結構描述項目宣告的值。</xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>"
  remarks: "如果出現項目屬性設定為<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>，在 XML 文件中遇到的第一個時間項目，就會推斷的結構描述宣告為`minOccurs=&quot;1&quot;`。</xref:System.Xml.Schema.XmlSchemaInference.InferenceOption> 當遇到屬性時，推斷的結構描述宣告為`use=&quot;required&quot;`。       如果出現項目屬性設定為<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>，項目結構描述宣告會被推斷為`minOccurs=&quot;0&quot;`，和屬性結構描述宣告會被推斷為`use=&quot;optional&quot;`。</xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>       項目屬性的預設值為<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>。</xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>"
  example:
  - "This example illustrates how occurrence is affected by the Occurrence property. The example code infers occurrence from an XML file in two different ways: relaxed and restricted. The following is the example XML file.  \n  \n [!code-xml[XmlSchemaInferenceExamples#7](~/add/codesnippet/xml/p-system.xml.schema.xmls_3_1.xml)]  \n  \n The following example code instructs the <xref:System.Xml.Schema.XmlSchemaInference> class to infer occurrence of elements and attributes in a relaxed way.  \n  \n [!code-cs[XmlSchemaInferenceExamples#2](~/add/codesnippet/csharp/p-system.xml.schema.xmls_3_2.cs)]\n [!code-cpp[XmlSchemaInferenceExamples#2](~/add/codesnippet/cpp/p-system.xml.schema.xmls_3_2.cpp)]\n [!code-vb[XmlSchemaInferenceExamples#2](~/add/codesnippet/visualbasic/p-system.xml.schema.xmls_3_2.vb)]  \n  \n Because the Occurrence property was set to <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>, the following schema was generated.  \n  \n [!code-xml[XmlSchemaInferenceExamples#8](~/add/codesnippet/xml/p-system.xml.schema.xmls_3_3.xml)]  \n  \n In the example code above, if the Occurrence property was not set to <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>, the <xref:System.Xml.Schema.XmlSchemaInference> class would have defaulted to <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption> and generated the following schema.  \n  \n [!code-xml[XmlSchemaInferenceExamples#9](~/add/codesnippet/xml/p-system.xml.schema.xmls_3_4.xml)]"
  syntax:
    content: public System.Xml.Schema.XmlSchemaInference.InferenceOption Occurrence { get; set; }
    return:
      type: System.Xml.Schema.XmlSchemaInference.InferenceOption
      description: "<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>物件。</xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>"
  overload: System.Xml.Schema.XmlSchemaInference.Occurrence*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaInference.TypeInference
  id: TypeInference
  parent: System.Xml.Schema.XmlSchemaInference
  langs:
  - csharp
  name: TypeInference
  nameWithType: XmlSchemaInference.TypeInference
  fullName: System.Xml.Schema.XmlSchemaInference.TypeInference
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "取得或設定<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>會影響類型從 XML 文件推斷的值。</xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>"
  remarks: "如果 TypeInference 屬性設定為<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>，具有簡單內容的 XML 文件中元素和屬性的推斷的類型永遠是`xs:string`。</xref:System.Xml.Schema.XmlSchemaInference.InferenceOption> 如果 TypeInference 屬性設定為<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>，更特定的類型推斷，例如`xs:date`， `xs:decimal`， `xs:unsignedByte`，依此類推。</xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>       TypeInference 屬性的預設值為<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>。</xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>"
  example:
  - "This example illustrates how type inference is affected by the TypeInference property. The example code infers types from an XML file in two different ways: relaxed and restricted. The following is the example XML file.  \n  \n [!code-xml[XmlSchemaInferenceExamples#10](~/add/codesnippet/xml/p-system.xml.schema.xmls_0_1.xml)]  \n  \n The following example code instructs the <xref:System.Xml.Schema.XmlSchemaInference> class to infer `xs:string` for elements and attributes with simple content.  \n  \n [!code-cs[XmlSchemaInferenceExamples#3](~/add/codesnippet/csharp/p-system.xml.schema.xmls_0_2.cs)]\n [!code-cpp[XmlSchemaInferenceExamples#3](~/add/codesnippet/cpp/p-system.xml.schema.xmls_0_2.cpp)]\n [!code-vb[XmlSchemaInferenceExamples#3](~/add/codesnippet/visualbasic/p-system.xml.schema.xmls_0_2.vb)]  \n  \n Because the TypeInference property was set to <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>, the following schema was generated.  \n  \n [!code-xml[XmlSchemaInferenceExamples#11](~/add/codesnippet/xml/p-system.xml.schema.xmls_0_3.xml)]  \n  \n In the example code above, if the TypeInference property was not set to <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>, the <xref:System.Xml.Schema.XmlSchemaInference> class would have defaulted to <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption> and generated the following schema.  \n  \n [!code-xml[XmlSchemaInferenceExamples#12](~/add/codesnippet/xml/p-system.xml.schema.xmls_0_4.xml)]"
  syntax:
    content: public System.Xml.Schema.XmlSchemaInference.InferenceOption TypeInference { get; set; }
    return:
      type: System.Xml.Schema.XmlSchemaInference.InferenceOption
      description: "<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>物件。</xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>"
  overload: System.Xml.Schema.XmlSchemaInference.TypeInference*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.Xml.Schema.XmlSchemaInferenceException
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaInferenceException
  nameWithType: XmlSchemaInferenceException
  fullName: System.Xml.Schema.XmlSchemaInferenceException
- uid: System.Xml.Schema.XmlSchemaInference.#ctor
  parent: System.Xml.Schema.XmlSchemaInference
  isExternal: false
  name: XmlSchemaInference()
  nameWithType: XmlSchemaInference.XmlSchemaInference()
  fullName: System.Xml.Schema.XmlSchemaInference.XmlSchemaInference()
- uid: System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader)
  parent: System.Xml.Schema.XmlSchemaInference
  isExternal: false
  name: InferSchema(XmlReader)
  nameWithType: XmlSchemaInference.InferSchema(XmlReader)
  fullName: System.Xml.Schema.XmlSchemaInference.InferSchema(XmlReader)
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet)
  parent: System.Xml.Schema.XmlSchemaInference
  isExternal: false
  name: InferSchema(XmlReader,XmlSchemaSet)
  nameWithType: XmlSchemaInference.InferSchema(XmlReader,XmlSchemaSet)
  fullName: System.Xml.Schema.XmlSchemaInference.InferSchema(XmlReader,XmlSchemaSet)
- uid: System.Xml.Schema.XmlSchemaInference.Occurrence
  parent: System.Xml.Schema.XmlSchemaInference
  isExternal: false
  name: Occurrence
  nameWithType: XmlSchemaInference.Occurrence
  fullName: System.Xml.Schema.XmlSchemaInference.Occurrence
- uid: System.Xml.Schema.XmlSchemaInference.InferenceOption
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaInference+InferenceOption
  nameWithType: XmlSchemaInference+InferenceOption
  fullName: System.Xml.Schema.XmlSchemaInference+InferenceOption
- uid: System.Xml.Schema.XmlSchemaInference.TypeInference
  parent: System.Xml.Schema.XmlSchemaInference
  isExternal: false
  name: TypeInference
  nameWithType: XmlSchemaInference.TypeInference
  fullName: System.Xml.Schema.XmlSchemaInference.TypeInference
- uid: System.Xml.Schema.XmlSchemaInference.#ctor*
  parent: System.Xml.Schema.XmlSchemaInference
  isExternal: false
  name: XmlSchemaInference
  nameWithType: XmlSchemaInference.XmlSchemaInference
- uid: System.Xml.Schema.XmlSchemaInference.InferSchema*
  parent: System.Xml.Schema.XmlSchemaInference
  isExternal: false
  name: InferSchema
  nameWithType: XmlSchemaInference.InferSchema
- uid: System.Xml.Schema.XmlSchemaInference.Occurrence*
  parent: System.Xml.Schema.XmlSchemaInference
  isExternal: false
  name: Occurrence
  nameWithType: XmlSchemaInference.Occurrence
- uid: System.Xml.Schema.XmlSchemaInference.TypeInference*
  parent: System.Xml.Schema.XmlSchemaInference
  isExternal: false
  name: TypeInference
  nameWithType: XmlSchemaInference.TypeInference
