### YamlMime:ManagedReference
items:
- uid: System.Windows.Controls.DataTemplateSelector
  id: DataTemplateSelector
  children:
  - System.Windows.Controls.DataTemplateSelector.#ctor
  - System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)
  langs:
  - csharp
  name: DataTemplateSelector
  nameWithType: DataTemplateSelector
  fullName: System.Windows.Controls.DataTemplateSelector
  type: Class
  summary: "提供方法來選擇<xref href=&quot;System.Windows.DataTemplate&quot;></xref>根據資料物件和資料繫結項目。"
  remarks: "通常您會建立 DataTemplateSelector 時有一個以上<xref:System.Windows.DataTemplate>相同類型的物件，而且您想要提供您自己選擇的邏輯<xref:System.Windows.DataTemplate>套用根據每個資料物件的屬性。</xref:System.Windows.DataTemplate> </xref:System.Windows.DataTemplate> 請注意，是否您有不同類型的物件您可以設定<xref:System.Windows.DataTemplate.DataType%2A>於<xref:System.Windows.DataTemplate>。</xref:System.Windows.DataTemplate>屬性</xref:System.Windows.DataTemplate.DataType%2A> 如果您這樣做，就不需要建立 DataTemplateSelector。 此外，如果您有物件類型相同，但具有不同的屬性時，您也可以考慮使用<xref:System.Windows.DataTrigger>或資料轉換。</xref:System.Windows.DataTrigger> 如需詳細資訊，請參閱[資料範本化概觀](~/add/includes/ajax-current-ext-md.md)。       若要建立範本選擇器，請建立繼承自 DataTemplateSelector 和覆寫類別<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法。</xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> 您的類別定義之後您可以指派給您的項目範本選取器屬性的類別的執行個體。"
  example:
  - "In this example, the binding source is a list of `Task` objects. One of the properties of a `Task` object is `Priority`. There are two data templates defined, `myTaskTemplate` and `importantTaskTemplate`.  \n  \n To supply logic to choose which <xref:System.Windows.DataTemplate> to use based on the `Priority` value of the data object, create a subclass of DataTemplateSelector and override the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method. In the following example, the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method provides logic to return the appropriate template based on the value of the `Priority` property. The template to return is found in the resources of the enveloping <xref:System.Windows.Window> element.  \n  \n [!code-cs[DataTemplatingIntro_snip#DTSClass](~/add/codesnippet/csharp/DataTemplatingSample/TaskListDataTemplateSelector.cs#dtsclass)]\n [!code-vb[DataTemplatingIntro_snip#DTSClass](~/add/codesnippet/visualbasic/datatemplatingsample/tasklistdatatemplateselector.vb#dtsclass)]  \n  \n We can then declare the `TaskListDataTemplateSelector` as a resource:  \n  \n [!code-xml[DataTemplatingIntro_snip#R1](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#r1)]  \n[!code-xml[DataTemplatingIntro_snip#DTS](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#dts)]  \n[!code-xml[DataTemplatingIntro_snip#R2](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#r2)]  \n  \n To use the template selector resource, assign it to the <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> property of the <xref:System.Windows.Controls.ListBox>. The <xref:System.Windows.Controls.ListBox> calls the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method of the `TaskListDataTemplateSelector` for each of the items in the underlying collection. The call passes the data object as the item parameter. The <xref:System.Windows.DataTemplate> that is returned by the method is then applied to that data object.  \n  \n [!code-xml[DataTemplatingIntro_snip#ItemTemplateSelector](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#itemtemplateselector)]  \n  \n For the complete sample, see [Introduction to Data Templating Sample](http://go.microsoft.com/fwlink/?LinkID=160009)."
  syntax:
    content: public class DataTemplateSelector
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Controls.DataTemplateSelector.#ctor
  id: '#ctor'
  parent: System.Windows.Controls.DataTemplateSelector
  langs:
  - csharp
  name: DataTemplateSelector()
  nameWithType: DataTemplateSelector.DataTemplateSelector()
  fullName: System.Windows.Controls.DataTemplateSelector.DataTemplateSelector()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Controls
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.Controls.DataTemplateSelector&quot;></xref>類別。"
  syntax:
    content: public DataTemplateSelector ();
    parameters: []
  overload: System.Windows.Controls.DataTemplateSelector.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)
  id: SelectTemplate(System.Object,System.Windows.DependencyObject)
  parent: System.Windows.Controls.DataTemplateSelector
  langs:
  - csharp
  name: SelectTemplate(Object,DependencyObject)
  nameWithType: DataTemplateSelector.SelectTemplate(Object,DependencyObject)
  fullName: System.Windows.Controls.DataTemplateSelector.SelectTemplate(Object,DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Controls
  summary: "當在衍生類別中覆寫時，會傳回<xref href=&quot;System.Windows.DataTemplate&quot;></xref>根據自訂邏輯。"
  remarks: "一般而言，當您有多個相同類型的物件定義的資料範本時使用範本選擇器。 比方說，如果您的繫結來源是清單學生物件清單和您想要特定範本可用於兼職學生。 您可以藉由建立繼承自一個類別<xref:System.Windows.Controls.DataTemplateSelector>和覆寫 SelectTemplate 方法。</xref:System.Windows.Controls.DataTemplateSelector> 您的類別定義之後您可以指派給您的項目範本選取器屬性的類別的執行個體。"
  example:
  - "In this example, the binding source is a list of `Task` objects. One of the properties of a `Task` object is `Priority`. There are two data templates defined, `myTaskTemplate` and `importantTaskTemplate`.  \n  \n To supply logic to choose which <xref:System.Windows.DataTemplate> to use based on the `Priority` value of the data object, create a subclass of <xref:System.Windows.Controls.DataTemplateSelector> and override the SelectTemplate method. In the following example, the SelectTemplate method provides logic to return the appropriate template based on the value of the `Priority` property. The template to return is found in the resources of the enveloping <xref:System.Windows.Window> element.  \n  \n [!code-cs[DataTemplatingIntro_snip#DTSClass](~/add/codesnippet/csharp/DataTemplatingSample/TaskListDataTemplateSelector.cs#dtsclass)]\n [!code-vb[DataTemplatingIntro_snip#DTSClass](~/add/codesnippet/visualbasic/datatemplatingsample/tasklistdatatemplateselector.vb#dtsclass)]  \n  \n We can then declare the `TaskListDataTemplateSelector` as a resource:  \n  \n [!code-xml[DataTemplatingIntro_snip#R1](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#r1)]  \n[!code-xml[DataTemplatingIntro_snip#DTS](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#dts)]  \n[!code-xml[DataTemplatingIntro_snip#R2](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#r2)]  \n  \n To use the template selector resource, assign it to the <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> property of the <xref:System.Windows.Controls.ListBox>. The <xref:System.Windows.Controls.ListBox> calls the SelectTemplate method of the `TaskListDataTemplateSelector` for each of the items in the underlying collection. The call passes the data object as the item parameter. The <xref:System.Windows.DataTemplate> that is returned by the method is then applied to that data object.  \n  \n [!code-xml[DataTemplatingIntro_snip#ItemTemplateSelector](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#itemtemplateselector)]  \n  \n For the complete sample, see [Introduction to Data Templating Sample](http://go.microsoft.com/fwlink/?LinkID=160009)."
  syntax:
    content: public virtual System.Windows.DataTemplate SelectTemplate (object item, System.Windows.DependencyObject container);
    parameters:
    - id: item
      type: System.Object
      description: "這是要選取的範本資料物件。"
    - id: container
      type: System.Windows.DependencyObject
      description: "資料繫結的物件。"
    return:
      type: System.Windows.DataTemplate
      description: "Returns a <xref href=&quot;System.Windows.DataTemplate&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>. 預設值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Controls.DataTemplateSelector.SelectTemplate*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Controls.DataTemplateSelector.#ctor
  parent: System.Windows.Controls.DataTemplateSelector
  isExternal: false
  name: DataTemplateSelector()
  nameWithType: DataTemplateSelector.DataTemplateSelector()
  fullName: System.Windows.Controls.DataTemplateSelector.DataTemplateSelector()
- uid: System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)
  parent: System.Windows.Controls.DataTemplateSelector
  isExternal: false
  name: SelectTemplate(Object,DependencyObject)
  nameWithType: DataTemplateSelector.SelectTemplate(Object,DependencyObject)
  fullName: System.Windows.Controls.DataTemplateSelector.SelectTemplate(Object,DependencyObject)
- uid: System.Windows.DataTemplate
  parent: System.Windows
  isExternal: false
  name: DataTemplate
  nameWithType: DataTemplate
  fullName: System.Windows.DataTemplate
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.Controls.DataTemplateSelector.#ctor*
  parent: System.Windows.Controls.DataTemplateSelector
  isExternal: false
  name: DataTemplateSelector
  nameWithType: DataTemplateSelector.DataTemplateSelector
- uid: System.Windows.Controls.DataTemplateSelector.SelectTemplate*
  parent: System.Windows.Controls.DataTemplateSelector
  isExternal: false
  name: SelectTemplate
  nameWithType: DataTemplateSelector.SelectTemplate
