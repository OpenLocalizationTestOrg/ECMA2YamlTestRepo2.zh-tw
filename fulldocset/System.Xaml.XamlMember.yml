### YamlMime:ManagedReference
items:
- uid: System.Xaml.XamlMember
  id: XamlMember
  children:
  - System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.DeclaringType
  - System.Xaml.XamlMember.DeferringLoader
  - System.Xaml.XamlMember.DependsOn
  - System.Xaml.XamlMember.Equals(System.Object)
  - System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)
  - System.Xaml.XamlMember.GetHashCode
  - System.Xaml.XamlMember.GetXamlNamespaces
  - System.Xaml.XamlMember.Invoker
  - System.Xaml.XamlMember.IsAmbient
  - System.Xaml.XamlMember.IsAttachable
  - System.Xaml.XamlMember.IsDirective
  - System.Xaml.XamlMember.IsEvent
  - System.Xaml.XamlMember.IsNameValid
  - System.Xaml.XamlMember.IsReadOnly
  - System.Xaml.XamlMember.IsReadPublic
  - System.Xaml.XamlMember.IsUnknown
  - System.Xaml.XamlMember.IsWriteOnly
  - System.Xaml.XamlMember.IsWritePublic
  - System.Xaml.XamlMember.LookupCustomAttributeProvider
  - System.Xaml.XamlMember.LookupDeferringLoader
  - System.Xaml.XamlMember.LookupDependsOn
  - System.Xaml.XamlMember.LookupInvoker
  - System.Xaml.XamlMember.LookupIsAmbient
  - System.Xaml.XamlMember.LookupIsEvent
  - System.Xaml.XamlMember.LookupIsReadOnly
  - System.Xaml.XamlMember.LookupIsReadPublic
  - System.Xaml.XamlMember.LookupIsUnknown
  - System.Xaml.XamlMember.LookupIsWriteOnly
  - System.Xaml.XamlMember.LookupIsWritePublic
  - System.Xaml.XamlMember.LookupTargetType
  - System.Xaml.XamlMember.LookupType
  - System.Xaml.XamlMember.LookupTypeConverter
  - System.Xaml.XamlMember.LookupUnderlyingGetter
  - System.Xaml.XamlMember.LookupUnderlyingMember
  - System.Xaml.XamlMember.LookupUnderlyingSetter
  - System.Xaml.XamlMember.LookupValueSerializer
  - System.Xaml.XamlMember.Name
  - System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  - System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  - System.Xaml.XamlMember.PreferredXamlNamespace
  - System.Xaml.XamlMember.SerializationVisibility
  - System.Xaml.XamlMember.TargetType
  - System.Xaml.XamlMember.ToString
  - System.Xaml.XamlMember.Type
  - System.Xaml.XamlMember.TypeConverter
  - System.Xaml.XamlMember.UnderlyingMember
  - System.Xaml.XamlMember.ValueSerializer
  langs:
  - csharp
  name: XamlMember
  nameWithType: XamlMember
  fullName: System.Xaml.XamlMember
  type: Class
  summary: "提供 XAML 型別成員的 XAML 類型系統識別項。 識別項由 XAML 讀取器和 XAML 寫入器成員節點的處理期間 (當 XAML 讀取器位於<xref href=&quot;System.Xaml.XamlNodeType&quot;> </xref>) 及一般 XAML 類型系統的邏輯。"
  remarks: "XamlMember 可以使用三個方法，傳回 XAML 成員的相關資訊︰ 標準 common language runtime (CLR) 反映;呼叫內部參考僅限反映技術 Api 該使用最佳化的位元旗標。虛擬呼叫覆寫或`Lookup*`可能 XamlMember 子類別所提供的 API。 對於大部分的.NET Framework XAML 服務 Api 和 XamlMember API 使用，您可以使用的預設 XAML 結構描述內容。 .NET Framework XAML 服務的預設 XAML 結構描述內容會使用 CLR 型別系統支援。 這可讓處理任何類型或成員定義在中，或其他可、 CLR 和其反映技術的 XAML 讀取器和 XAML 寫入器。      ## 查閱 * Api 和衍生類別 XamlMember XamlMember 定義數個衍生類別的虛擬成員可能會覆寫。 這些成員具有一律開頭為字串的名稱`Lookup`。 API 的其餘部分名稱參考的虛擬方法影響的屬性。 例如，XamlMember 衍生類別可能會覆寫<xref:System.Xaml.XamlMember.LookupTargetType%2A>來影響哪些基底定義的屬性會<xref:System.Xaml.XamlMember.TargetType%2A>傳回衍生的類別。</xref:System.Xaml.XamlMember.TargetType%2A> </xref:System.Xaml.XamlMember.LookupTargetType%2A> 您可以預測傳回值，這類屬性中 XamlMember 或現有的衍生類別所閱讀相關的文件`Lookup*`方法。       目的`Lookup*`方法是提供 XAML 類型系統擴充功能的技術，其中包含 XamlMember 基底類別。 由衍生自 XamlMember 和覆寫`Lookup`虛擬成員，您可以定義 XAML 結構描述的是 XAML 成員的概念中，XAML 類型系統而不必受限於支援類型系統或技術的細節。 您可以也使用提供的 XAML 結構描述內容在此配置下，仍會傳回您想要的結果。       例如，請考慮 XamlMember 屬性<xref:System.Xaml.XamlMember.IsWritePublic%2A>.</xref:System.Xaml.XamlMember.IsWritePublic%2A> 這個屬性就會通知呼叫端，該作業，例如使用<xref:System.Xaml.XamlWriter>序列化可以寫入此成員值的目標物件上。</xref:System.Xaml.XamlWriter> 在預設實作中，該成員是否可寫入的決定使用針對支援 CLR 反映技術<xref:System.Type>及其成員 ( <xref:System.Reflection.MemberInfo>)。</xref:System.Reflection.MemberInfo> </xref:System.Type> 因此，根據預設，XAML 類型系統取決於 CLR 型別系統。 不過，您可以移除此依存性，您 XAML 類型系統報告的<xref:System.Xaml.XamlMember.IsWritePublic%2A>方式是覆寫應用程式開發介面<xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>.</xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> </xref:System.Xaml.XamlMember.IsWritePublic%2A> 在您覆寫時，您可以使用其他決定，例如屬於您的技術，最適合用於固定的 XAML 詞彙，或是各種其他策略，以判斷是否可寫入 XAML 詞彙是 XAML 成員的主要的查閱資料表的中繼資料。      ## 建構 XamlMember 沒有 XAML 結構描述內容最 XamlMember 的建構函式需要<xref:System.Xaml.XamlSchemaContext>做為其初始設定的一部分。</xref:System.Xaml.XamlSchemaContext> <xref:System.Xaml.XamlSchemaContext>也是必要的許多內部<xref:System.Xaml.XamlSchemaContext>作業，例如取得轉寄從支援類型的資訊。</xref:System.Xaml.XamlSchemaContext> </xref:System.Xaml.XamlSchemaContext> 當您正在使用 XamlMember API 時，您通常會有的<xref:System.Xaml.XamlSchemaContext>而且可從周圍的建構，例如<xref:System.Xaml.XamlWriter>.</xref:System.Xaml.XamlWriter> </xref:System.Xaml.XamlSchemaContext> 在此情況下，您可以傳遞<xref:System.Xaml.XamlSchemaContext>透過參考所有 XAML 類型系統呼叫需要 XAML 結構描述內容。</xref:System.Xaml.XamlSchemaContext>       一個特定建構函式<xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>，則不需要<xref:System.Xaml.XamlSchemaContext>.</xref:System.Xaml.XamlSchemaContext> </xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> 不過，建構 XamlMember<xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>簽章傳回`true` <xref:System.Xaml.XamlMember.IsUnknown%2A>。</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>       適用於牽涉到的載入路徑<xref:System.Xaml.XamlObjectWriter>，這類成員無法寫入物件圖形。</xref:System.Xaml.XamlObjectWriter> 使用.NET Framework XAML 服務實作中，<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>呼叫會擲回<xref:System.Xaml.XamlObjectWriterException>相關 XamlMember 會報告當`true` <xref:System.Xaml.XamlMember.IsUnknown%2A>。</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlObjectWriterException> </xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>       您不應該建構的值為 XamlMember`true`如<xref:System.Xaml.XamlMember.IsUnknown%2A>除非您的實作可以處理的例外狀況，從<xref:System.Xaml.XamlObjectWriter>，或者有其他方式來調整<xref:System.Xaml.XamlObjectWriter>行為。</xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlMember.IsUnknown%2A> 例如，一或多個下列可能的實作，則為 true:-XAML 結構描述內容可供使用更新版本。      -您使用的成員啟動程式模式。      -您刻意覆寫<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>自訂 XAML 寫入器。</xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>"
  syntax:
    content: 'public class XamlMember : IEquatable<System.Xaml.XamlMember>'
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Xaml.XamlMember>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(EventInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新執行個體<xref href=&quot;System.Xaml.XamlMember&quot;></xref>類別使用 CLR 型別系統<xref:System.Reflection.EventInfo>和<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>。</xref:System.Reflection.EventInfo>"
  remarks: "如果成員表示的事件 （事件處理常式連接點屬性），請使用這個建構函式。"
  syntax:
    content: public XamlMember (System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: eventInfo
      type: System.Reflection.EventInfo
      description: "CLR 型別系統<xref:System.Reflection.EventInfo>表示事件成員。</xref:System.Reflection.EventInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>限定成員的內容。"
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(PropertyInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新執行個體<xref href=&quot;System.Xaml.XamlMember&quot;></xref>類別使用 CLR 型別系統<xref:System.Reflection.PropertyInfo>和<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>。</xref:System.Reflection.PropertyInfo>"
  remarks: "如果成員表示的屬性 （並不特別的事件處理常式連接），請使用這個建構函式。"
  syntax:
    content: public XamlMember (System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: propertyInfo
      type: System.Reflection.PropertyInfo
      description: "CLR 型別系統<xref:System.Reflection.PropertyInfo>表示屬性成員。</xref:System.Reflection.PropertyInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>限定成員的內容。"
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新執行個體<xref href=&quot;System.Xaml.XamlMember&quot;></xref>類別使用 CLR 型別系統<xref:System.Reflection.EventInfo>和<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>，包括<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;></xref>資訊。</xref:System.Reflection.EventInfo>"
  remarks: "如果成員表示一個事件 （或事件處理常式連接點屬性），請使用這個建構函式。"
  syntax:
    content: public XamlMember (System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: eventInfo
      type: System.Reflection.EventInfo
      description: "CLR 型別系統<xref:System.Reflection.EventInfo>表示事件成員。</xref:System.Reflection.EventInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>限定成員的內容。"
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref>處理執行階段反映的實作會呼叫針對<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新執行個體<xref href=&quot;System.Xaml.XamlMember&quot;></xref>類別使用反映<xref:System.Reflection.PropertyInfo>和<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>，包括<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;></xref>資訊。</xref:System.Reflection.PropertyInfo>"
  remarks: "使用這個建構函式，而且不是事件處理常式連接才成員表示的屬性。"
  syntax:
    content: public XamlMember (System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: propertyInfo
      type: System.Reflection.PropertyInfo
      description: "CLR 型別系統<xref:System.Reflection.PropertyInfo>表示屬性成員。</xref:System.Reflection.PropertyInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>限定成員的內容。"
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref>處理執行階段引動過程的實作會呼叫針對<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新執行個體<xref href=&quot;System.Xaml.XamlMember&quot;></xref>類別<xref href=&quot;System.Xaml.XamlMember&quot;> </xref> ，代表可附加的事件。"
  remarks: "如果成員表示可附加的事件成員，請使用這個建構函式。"
  syntax:
    content: public XamlMember (string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: attachableEventName
      type: System.String
      description: "可附加事件的字串名稱。"
    - id: adder
      type: System.Reflection.MethodInfo
      description: "CLR 型別系統<xref:System.Reflection.MethodInfo>處理常式<xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;></xref>方法的可附加成員的支援實作。</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>限定成員的內容。"
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)
  id: '#ctor(System.String,System.Xaml.XamlType,System.Boolean)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,XamlType,Boolean)
  nameWithType: XamlMember.XamlMember(String,XamlType,Boolean)
  fullName: System.Xaml.XamlMember.XamlMember(String,XamlType,Boolean)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新執行個體<xref href=&quot;System.Xaml.XamlMember&quot;></xref>類別使用字串名稱與宣告<xref href=&quot;System.Xaml.XamlType&quot;></xref>資訊。 A <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> ，建構與此簽章有重要的限制，請參閱 < 備註 >。"
  remarks: "A <xref:System.Xaml.XamlMember>，建構簽章傳回的 XamlMember `true` <xref:System.Xaml.XamlMember.IsUnknown%2A>。</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember>       適用於牽涉到的載入路徑<xref:System.Xaml.XamlObjectWriter>，這類成員無法寫入物件圖形。</xref:System.Xaml.XamlObjectWriter> 使用.NET Framework XAML 服務實作中，<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>呼叫會擲回<xref:System.Xaml.XamlObjectWriterException>時相關<xref:System.Xaml.XamlMember>報表`true` <xref:System.Xaml.XamlMember.IsUnknown%2A>。</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlObjectWriterException> </xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>       您不應該建構<xref:System.Xaml.XamlMember>與<xref:System.Xaml.XamlMember.IsUnknown%2A>`true`除非您的實作可以處理的例外狀況，從<xref:System.Xaml.XamlObjectWriter>，或者有其他方式來調整<xref:System.Xaml.XamlObjectWriter>行為。</xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember> 例如，一或多個下列可能的實作，則為 true:-XAML 結構描述內容可供使用更新版本。      -您使用的成員啟動程式模式。      -您刻意覆寫<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>自訂 XAML 寫入器。</xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>"
  syntax:
    content: public XamlMember (string name, System.Xaml.XamlType declaringType, bool isAttachable);
    parameters:
    - id: name
      type: System.String
      description: "成員的字串名稱。"
    - id: declaringType
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref>宣告的型別資訊。"
    - id: isAttachable
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要表示成員為可附加;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code>or <code>declaringType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新執行個體<xref href=&quot;System.Xaml.XamlMember&quot;></xref>類別<xref href=&quot;System.Xaml.XamlMember&quot;> </xref> ，代表可附加的屬性。"
  remarks: "如果成員表示的可附加屬性，請使用這個建構函式。"
  syntax:
    content: public XamlMember (string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: attachablePropertyName
      type: System.String
      description: "可附加屬性的字串名稱。"
    - id: getter
      type: System.Reflection.MethodInfo
      description: "CLR 型別系統<xref:System.Reflection.MethodInfo>如<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;></xref>的可附加成員的存取子的支援實作。</xref:System.Reflection.MethodInfo>"
    - id: setter
      type: System.Reflection.MethodInfo
      description: "CLR 型別系統<xref:System.Reflection.MethodInfo>如<xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;></xref>的可附加成員的存取子的支援實作。</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>限定成員的內容。"
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新執行個體<xref href=&quot;System.Xaml.XamlMember&quot;></xref>類別<xref href=&quot;System.Xaml.XamlMember&quot;> </xref> ，代表可附加的事件，包括<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;></xref>資訊。"
  remarks: "如果成員表示可附加的事件成員，請使用這個建構函式。"
  syntax:
    content: public XamlMember (string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: attachableEventName
      type: System.String
      description: "可附加事件的字串名稱。"
    - id: adder
      type: System.Reflection.MethodInfo
      description: "CLR 型別系統<xref:System.Reflection.MethodInfo>處理常式<xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;></xref>方法的可附加成員的支援實作。</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>限定成員的內容。"
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref>處理執行階段引動過程的實作會呼叫針對<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新執行個體<xref href=&quot;System.Xaml.XamlMember&quot;></xref>類別<xref href=&quot;System.Xaml.XamlMember&quot;> </xref> ，代表可附加的屬性，包括<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;></xref>資訊。"
  remarks: "如果成員表示的可附加屬性的成員，請使用這個建構函式。"
  syntax:
    content: public XamlMember (string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: attachablePropertyName
      type: System.String
      description: "可附加屬性的字串名稱。"
    - id: getter
      type: System.Reflection.MethodInfo
      description: "CLR 型別系統<xref:System.Reflection.MethodInfo>如<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;></xref>的可附加成員的存取子的支援實作。</xref:System.Reflection.MethodInfo>"
    - id: setter
      type: System.Reflection.MethodInfo
      description: "CLR 型別系統<xref:System.Reflection.MethodInfo>如<xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;></xref>的可附加成員的存取子的支援實作。</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>限定成員的內容。"
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref>處理執行階段引動過程的實作會呼叫針對<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.DeclaringType
  id: DeclaringType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: DeclaringType
  nameWithType: XamlMember.DeclaringType
  fullName: System.Xaml.XamlMember.DeclaringType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得<xref href=&quot;System.Xaml.XamlType&quot;></xref>的宣告與此相關聯之成員的型別<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "此值通常在初始化期間設定，且通常不`null`。      > [!IMPORTANT] > DeclaringType 資訊可以傳入建構函式進行初始化。 直接呼叫基底建構函式、<xref:System.Xaml.XamlMember>衍生類別可以省略部分值檢查，在基底類別中進行</xref:System.Xaml.XamlMember>初始化 因此，衍生的初始化可以變更報告的型別成員關聯性的資訊是 XAML 成員，使它不再符合預期的方式為基礎的 CLR 宣告的型別系統資訊。 宣告型別資訊的任何安全性關鍵的檢查，請改用基礎 CLR 型別。"
  syntax:
    content: public System.Xaml.XamlType DeclaringType { get; }
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref>的宣告與此相關聯之成員的型別<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  overload: System.Xaml.XamlMember.DeclaringType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.DeferringLoader
  id: DeferringLoader
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: DeferringLoader
  nameWithType: XamlMember.DeferringLoader
  fullName: System.Xaml.XamlMember.DeferringLoader
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;物件，用於延後載入的 XAML 宣告物件。"
  remarks: "呼叫 DeferringLoader 會叫用<xref:System.Xaml.XamlMember.LookupDeferringLoader%2A>或特定覆寫該方法。</xref:System.Xaml.XamlMember.LookupDeferringLoader%2A> 在其中初始的內部反映邏輯具有已設定資訊的情況下，就會發生這種行為。"
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader> DeferringLoader { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;與<xref href=&quot;System.Xaml.XamlDeferringLoader&quot;></xref>泛型條件約束。"
  overload: System.Xaml.XamlMember.DeferringLoader*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.DependsOn
  id: DependsOn
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: DependsOn
  nameWithType: XamlMember.DependsOn
  fullName: System.Xaml.XamlMember.DependsOn
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得一份<xref href=&quot;System.Xaml.XamlMember&quot;></xref>物件。 這些報告的成員相對於此初始化順序的相依性關聯性存在的位置<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "呼叫 DependsOn 會叫用<xref:System.Xaml.XamlMember.LookupDependsOn%2A>或特定覆寫該方法。</xref:System.Xaml.XamlMember.LookupDependsOn%2A> 在其中初始的內部反映邏輯具有已設定資訊的情況下，就會發生這種行為。       `DependsOn`模式可以套用至刻意有所出入一般的 XAML 規則的物件模型案例。 一般的 XAML 規則是類型的成員，不會傳遞做為初始文字 （或在 XAML 2009 中的 factory 方法） 必須能夠依任何順序指定。 藉由套用`DependsOn`模式給成員，您可以指示 XAML 寫入器永遠會處理此成員之前參考的成員。 您可以套用在目前成員的值需要內容或之後，才可設定其他成員的其他資訊的位置的情況下此模式。       `DependsOn`模式應該套用明智並保留屬性情況下，它可以做架構的用途。 慢 XAML 處理可能需要大量的相依性。 此外，很可能會產生循環相依性，在此情況下，XAML 處理行為是未定義。       範例`DependsOn`從 WPF 的情況包括某些屬性上<xref:System.Windows.Controls.ControlTemplate>和<xref:System.Windows.DataTemplate>上<xref:System.Windows.Trigger>，並於<xref:System.Windows.Setter>。</xref:System.Windows.Setter> </xref:System.Windows.Trigger> </xref:System.Windows.DataTemplate> </xref:System.Windows.Controls.ControlTemplate>"
  syntax:
    content: public System.Collections.Generic.IList<System.Xaml.XamlMember> DependsOn { get; }
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlMember}
      description: "一份<xref href=&quot;System.Xaml.XamlMember&quot;></xref>物件。"
  overload: System.Xaml.XamlMember.DependsOn*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: XamlMember.Equals(Object)
  fullName: System.Xaml.XamlMember.Equals(Object)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "指出目前的物件是否等於另一個物件。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "要與這個物件比較的物件。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果目前的物件是否等於<code> obj </code>參數，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)
  id: Equals(System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Equals(XamlMember)
  nameWithType: XamlMember.Equals(XamlMember)
  fullName: System.Xaml.XamlMember.Equals(XamlMember)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "指出目前的物件是否等於另一個相同類型的物件。"
  syntax:
    content: public bool Equals (System.Xaml.XamlMember other);
    parameters:
    - id: other
      type: System.Xaml.XamlMember
      description: "要與這個物件比較的物件。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果目前的物件是否等於<code> other </code>參數，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.GetHashCode
  id: GetHashCode
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: XamlMember.GetHashCode()
  fullName: System.Xaml.XamlMember.GetHashCode()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "傳回這個物件的雜湊碼。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "整數雜湊碼。"
  overload: System.Xaml.XamlMember.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.GetXamlNamespaces
  id: GetXamlNamespaces
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: GetXamlNamespaces()
  nameWithType: XamlMember.GetXamlNamespaces()
  fullName: System.Xaml.XamlMember.GetXamlNamespaces()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "這個 XAML 成員可以存在的位置會傳回 XAML 命名空間的清單。"
  remarks: "預設實作會傳回<xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=fullName>呼叫<xref:System.Xaml.XamlMember.DeclaringType%2A>與這個<xref:System.Xaml.XamlMember>.</xref:System.Xaml.XamlMember>相關聯</xref:System.Xaml.XamlMember.DeclaringType%2A>的結果</xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=fullName>"
  syntax:
    content: public virtual System.Collections.Generic.IList<string> GetXamlNamespaces ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
      description: "以字串形式的 XAML 命名空間識別項清單。"
  overload: System.Xaml.XamlMember.GetXamlNamespaces*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Invoker
  id: Invoker
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Invoker
  nameWithType: XamlMember.Invoker
  fullName: System.Xaml.XamlMember.Invoker
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;></xref>與此相關聯的實作<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "`Invoker`模式是進階的 XAML 類型系統擴充功能技術。 `Invoker`模式提供插入不同的結構描述型別對應的行為，同時仍然使用.NET Framework XAML 服務 XAML 類型系統定義的方法。       如果<xref:System.Xaml.XamlMember.LookupInvoker%2A>覆寫會傳回`null`，或如果預設實作會傳回`null`因為其欠缺<xref:System.Xaml.XamlMember.UnderlyingMember%2A>這個<xref:System.Xaml.XamlMember>，啟動程式屬性會傳回<xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName>.</xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName> </xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlMember.UnderlyingMember%2A> </xref:System.Xaml.XamlMember.LookupInvoker%2A>       <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName>預設值。</xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName> 這適用於大部分的操作，使用.NET Framework XAML 服務和預設 XAML 結構描述內容，並在其中任何特定覆寫`Invoker`XAML 類型系統實體的建構函式傳遞模式。       呼叫啟動程式會叫用<xref:System.Xaml.XamlMember.LookupInvoker%2A>或特定覆寫該方法。</xref:System.Xaml.XamlMember.LookupInvoker%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlMemberInvoker Invoker { get; }
    return:
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref>與此相關聯的實作<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  overload: System.Xaml.XamlMember.Invoker*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsAmbient
  id: IsAmbient
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsAmbient
  nameWithType: XamlMember.IsAmbient
  fullName: System.Xaml.XamlMember.IsAmbient
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得值，指出是否此<xref href=&quot;System.Xaml.XamlMember&quot;></xref>回報為環境的屬性。"
  remarks: "呼叫 IsAmbient 會叫用<xref:System.Xaml.XamlMember.LookupIsAmbient%2A>或特定覆寫該方法。</xref:System.Xaml.XamlMember.LookupIsAmbient%2A> 在其中初始的內部反映邏輯具有已設定資訊的實作，會發生此問題。       檢查環境的內容通常以確定物件和環境的使用方式的類型限定性條件所依賴的值可以正確運作的 XAML 處理邏輯的一部分。 .NET Framework XAML 服務 Api 和預設 XAML 結構描述內容會填入這個屬性與<xref:System.Windows.Markup.AmbientAttribute>.</xref:System.Windows.Markup.AmbientAttribute>為基礎的值 預設實作<xref:System.Xaml.XamlMember.LookupIsAmbient%2A>使用這個現有<xref:System.Windows.Markup.AmbientAttribute>技術，並傳回`true`如果<xref:System.Windows.Markup.AmbientAttribute>存在於宣告的成員。</xref:System.Windows.Markup.AmbientAttribute> </xref:System.Windows.Markup.AmbientAttribute> </xref:System.Xaml.XamlMember.LookupIsAmbient%2A>       <xref:System.Windows.Markup.AmbientAttribute>找到的數個 WPF 類型，包括成員上<xref:System.Windows.Application>， <xref:System.Windows.Setter>，和<xref:System.Windows.Style>。</xref:System.Windows.Style> </xref:System.Windows.Setter> </xref:System.Windows.Application></xref:System.Windows.Markup.AmbientAttribute> 它也可以找到上<xref:System.Windows.ResourceDictionary>connotes，任何成員，會使用型別<xref:System.Windows.ResourceDictionary>為其型別應該視為環境即使未特別屬性成員。</xref:System.Windows.ResourceDictionary> </xref:System.Windows.ResourceDictionary>"
  syntax:
    content: public bool IsAmbient { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個<xref href=&quot;System.Xaml.XamlMember&quot;></xref>回報為環境的屬性; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.IsAmbient*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsAttachable
  id: IsAttachable
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsAttachable
  nameWithType: XamlMember.IsAttachable
  fullName: System.Xaml.XamlMember.IsAttachable
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得值，指出是否此<xref href=&quot;System.Xaml.XamlMember&quot;></xref>是可附加的成員。"
  remarks: "IsAttachable 值會初始化為基礎的建構函式用來建構<xref:System.Xaml.XamlMember>.</xref:System.Xaml.XamlMember>"
  syntax:
    content: public bool IsAttachable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個<xref href=&quot;System.Xaml.XamlMember&quot;></xref>是可附加的成員，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.IsAttachable*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsDirective
  id: IsDirective
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsDirective
  nameWithType: XamlMember.IsDirective
  fullName: System.Xaml.XamlMember.IsDirective
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得值，指出是否此<xref href=&quot;System.Xaml.XamlMember&quot;> </xref> XAML 指示詞。"
  remarks: "IsDirective 值會初始化為基礎的建構函式用來建構<xref:System.Xaml.XamlMember>.</xref:System.Xaml.XamlMember> 基底<xref:System.Xaml.XamlMember>建構函式初始化使 IsDirective `false`。</xref:System.Xaml.XamlMember> 不過，<xref:System.Xaml.XamlDirective>類別 (<xref:System.Xaml.XamlMember>衍生的類別) 初始化使 IsDirective `true`。</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlDirective>       如果您想要報告為 IsDirective`true`的 XAML 成員的自訂 XAML 結構描述類別的呼叫端，確定您衍生自<xref:System.Xaml.XamlDirective>因為這是為了允許該行為的唯一方式。</xref:System.Xaml.XamlDirective>"
  syntax:
    content: public bool IsDirective { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個<xref href=&quot;System.Xaml.XamlMember&quot;></xref>是 XAML 指示詞，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.IsDirective*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsEvent
  id: IsEvent
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsEvent
  nameWithType: XamlMember.IsEvent
  fullName: System.Xaml.XamlMember.IsEvent
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得值，指出是否此<xref href=&quot;System.Xaml.XamlMember&quot;></xref>代表事件成員。"
  remarks: "呼叫 IsEvent 會叫用<xref:System.Xaml.XamlMember.LookupIsEvent%2A>或特定覆寫該方法。</xref:System.Xaml.XamlMember.LookupIsEvent%2A>"
  syntax:
    content: public bool IsEvent { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個<xref href=&quot;System.Xaml.XamlMember&quot;></xref>代表的事件，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.IsEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsNameValid
  id: IsNameValid
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsNameValid
  nameWithType: XamlMember.IsNameValid
  fullName: System.Xaml.XamlMember.IsNameValid
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得值，指出是否此<xref href=&quot;System.Xaml.XamlMember&quot;></xref>初始化的有效<xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;></xref>字串做為其<xref:System.Xaml.XamlMember.Name*>.</xref:System.Xaml.XamlMember.Name*>"
  syntax:
    content: public bool IsNameValid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個<xref href=&quot;System.Xaml.XamlMember&quot;></xref>初始化的有效<xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;></xref>字串; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.IsNameValid*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsReadOnly
  id: IsReadOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: XamlMember.IsReadOnly
  fullName: System.Xaml.XamlMember.IsReadOnly
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得值，指出是否此<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示唯讀成員。"
  remarks: "呼叫 IsReadOnly 會叫用<xref:System.Xaml.XamlMember.LookupIsReadOnly%2A>或特定覆寫該方法。</xref:System.Xaml.XamlMember.LookupIsReadOnly%2A>"
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示唯讀成員，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsReadPublic
  id: IsReadPublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsReadPublic
  nameWithType: XamlMember.IsReadPublic
  fullName: System.Xaml.XamlMember.IsReadPublic
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得值，指出是否此<xref href=&quot;System.Xaml.XamlMember&quot;></xref>代表具有可呼叫公用成員<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;></xref>存取子。"
  remarks: "IsReadPublic 是否值檢查<xref:System.Xaml.XamlMember.DeclaringType%2A>是公用。</xref:System.Xaml.XamlMember.DeclaringType%2A> 如果<xref:System.Xaml.XamlMember.DeclaringType%2A>為非公用，`get`存取子不是實際的方式，可呼叫，並傳回 IsReadPublic `false`。</xref:System.Xaml.XamlMember.DeclaringType%2A>       呼叫 IsReadPublic 會叫用<xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>或特定覆寫該方法。</xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>      > [!IMPORTANT] ><xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>方法是虛擬的因此，可以覆寫。</xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> 覆寫就可能會變更 （惡意或失敗） 的報告的存取資訊的 XAML 成員，讓它不會再預期的方式會與對應的基礎 CLR 宣告的型別系統的存取資訊。 存取層級的任何安全性關鍵的檢查，請改用基礎 CLR 型別。"
  syntax:
    content: public bool IsReadPublic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個<xref href=&quot;System.Xaml.XamlMember&quot;></xref>代表可呼叫公用<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;></xref>存取子，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.IsReadPublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsUnknown
  id: IsUnknown
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsUnknown
  nameWithType: XamlMember.IsUnknown
  fullName: System.Xaml.XamlMember.IsUnknown
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得值，指出是否在成員不是可解析的備份系統，用於解析型別和成員。"
  remarks: "A <xref:System.Xaml.XamlMember>，建構<xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>簽章傳回`true`如 IsUnknown。</xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> </xref:System.Xaml.XamlMember>       適用於牽涉到的載入路徑<xref:System.Xaml.XamlObjectWriter>、<xref:System.Xaml.XamlMember>與`true`的 IsUnknown 無法寫入物件圖形。</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlObjectWriter> 在.NET Framework XAML 服務 Api 中的預設實作<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>呼叫會擲回<xref:System.Xaml.XamlObjectWriterException>時相關<xref:System.Xaml.XamlMember>報表`true`如 IsUnknown。</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlObjectWriterException> </xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>       您不應該建構<xref:System.Xaml.XamlMember>的值`true`如 IsUnknown 除非您的實作可以處理的例外狀況，從<xref:System.Xaml.XamlObjectWriter>，或者有其他方式來調整<xref:System.Xaml.XamlObjectWriter>行為。</xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlMember>       呼叫 IsUnknown 會叫用<xref:System.Xaml.XamlMember.LookupIsUnknown%2A>或特定覆寫該方法。</xref:System.Xaml.XamlMember.LookupIsUnknown%2A>"
  syntax:
    content: public bool IsUnknown { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果成員不是可解析。<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果成員是可解析。"
  overload: System.Xaml.XamlMember.IsUnknown*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsWriteOnly
  id: IsWriteOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsWriteOnly
  nameWithType: XamlMember.IsWriteOnly
  fullName: System.Xaml.XamlMember.IsWriteOnly
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得值，指出是否此<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示唯寫的成員。"
  remarks: "呼叫 IsWriteOnly 會叫用<xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A>或特定覆寫該方法。</xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A>"
  syntax:
    content: public bool IsWriteOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示唯寫的成員，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.IsWriteOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsWritePublic
  id: IsWritePublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsWritePublic
  nameWithType: XamlMember.IsWritePublic
  fullName: System.Xaml.XamlMember.IsWritePublic
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得值，指出是否此<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示有可呼叫公用成員<xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;></xref>存取子。"
  remarks: "IsWritePublic 值會考慮是否<xref:System.Xaml.XamlMember.DeclaringType%2A>是公用判斷的一部分。</xref:System.Xaml.XamlMember.DeclaringType%2A> 如果<xref:System.Xaml.XamlMember.DeclaringType%2A>為非公用，`set`存取子不是實際的方式，可呼叫，並傳回 IsWritePublic `false`。</xref:System.Xaml.XamlMember.DeclaringType%2A>       呼叫 IsWritePublic 會叫用<xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>或特定覆寫該方法。</xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>      > [!IMPORTANT] ><xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>方法是虛擬的因此，可以覆寫。</xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> 覆寫就可能會變更 （惡意或失敗） 的報告的存取資訊的 XAML 成員，讓它不會再預期的方式會與對應的基礎 CLR 宣告的型別系統的存取資訊。 存取層級的任何安全性關鍵的檢查，請改用基礎 CLR 型別。"
  syntax:
    content: public bool IsWritePublic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個<xref href=&quot;System.Xaml.XamlMember&quot;></xref>代表可呼叫公用<xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;></xref>存取子，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.IsWritePublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupCustomAttributeProvider
  id: LookupCustomAttributeProvider
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupCustomAttributeProvider()
  nameWithType: XamlMember.LookupCustomAttributeProvider()
  fullName: System.Xaml.XamlMember.LookupCustomAttributeProvider()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "在衍生類別中實作時，會傳回<xref href=&quot;System.Reflection.ICustomAttributeProvider&quot;></xref>實作。"
  remarks: "覆寫這個方法以提供的替代方法，若要取得 CLR 屬性值與內部的反映。 沒有覆寫時，在內部反映程式會使用一般的 CLR 反映邏輯，例如<xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>.</xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>呼叫       預設實作會傳回`null`。"
  syntax:
    content: protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider ();
    parameters: []
    return:
      type: System.Reflection.ICustomAttributeProvider
      description: "<xref href=&quot;System.Reflection.ICustomAttributeProvider&quot;> </xref>實作。"
  overload: System.Xaml.XamlMember.LookupCustomAttributeProvider*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupDeferringLoader
  id: LookupDeferringLoader
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupDeferringLoader()
  nameWithType: XamlMember.LookupDeferringLoader()
  fullName: System.Xaml.XamlMember.LookupDeferringLoader()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "傳回&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;物件，用於延後載入的 XAML 宣告物件。"
  remarks: "這個方法會叫用時呼叫者取得值，從<xref:System.Xaml.XamlMember.DeferringLoader%2A>屬性。</xref:System.Xaml.XamlMember.DeferringLoader%2A> 如果您想要覆寫此方法<xref:System.Xaml.XamlMember.DeferringLoader%2A>傳回不同的值從預設內部反映中，會啟用的值，如果您也要提供自訂<xref:System.Xaml.Schema.XamlMemberInvoker>資訊。</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.XamlMember.DeferringLoader%2A>       預設實作會傳回物件以讀取<xref:System.Windows.Markup.XamlDeferLoadAttribute>或使用<xref:System.Xaml.XamlDeferringLoader>從宣告的型別。</xref:System.Xaml.XamlDeferringLoader> </xref:System.Windows.Markup.XamlDeferLoadAttribute> 如果是使用 無任何物件，這個方法可能會傳回`null`。"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader> LookupDeferringLoader ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;具有<xref href=&quot;System.Xaml.XamlDeferringLoader&quot;></xref>泛型條件約束。"
  overload: System.Xaml.XamlMember.LookupDeferringLoader*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupDependsOn
  id: LookupDependsOn
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupDependsOn()
  nameWithType: XamlMember.LookupDependsOn()
  fullName: System.Xaml.XamlMember.LookupDependsOn()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "會傳回一份<xref href=&quot;System.Xaml.XamlMember&quot;></xref>物件。 在清單中的項目回報的成員相對於此初始化順序的相依性關聯性存在的位置<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "這個方法會叫用時呼叫者取得值，從<xref:System.Xaml.XamlMember.DependsOn%2A>屬性。</xref:System.Xaml.XamlMember.DependsOn%2A> 如果您想要覆寫此方法<xref:System.Xaml.XamlMember.DependsOn%2A>傳回不同的值從預設內部反映中，會啟用的值，如果您也要提供自訂<xref:System.Xaml.Schema.XamlMemberInvoker>資訊。</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.XamlMember.DependsOn%2A>       WPF XAML 讀取器和寫入器實作的屬性與<xref:System.Windows.Markup.DependsOnAttribute>.</xref:System.Windows.Markup.DependsOnAttribute>此情況下 預設實作會使用這個現有<xref:System.Windows.Markup.DependsOnAttribute>技術。</xref:System.Windows.Markup.DependsOnAttribute>       覆寫這個方法，如果您不使用<xref:System.Windows.Markup.DependsOnAttribute>這個用途，而且想要取代該技術，指出屬性處理順序，使用您自己的技術。</xref:System.Windows.Markup.DependsOnAttribute> 如果您不想支援屬性的處理順序，您可以使用的預設實作，因為它會不傳回任何結果，哪個較合適。       清單是唯讀的。"
  syntax:
    content: protected virtual System.Collections.Generic.IList<System.Xaml.XamlMember> LookupDependsOn ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlMember}
      description: "一份<xref href=&quot;System.Xaml.XamlMember&quot;></xref>物件。"
  overload: System.Xaml.XamlMember.LookupDependsOn*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupInvoker
  id: LookupInvoker
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupInvoker()
  nameWithType: XamlMember.LookupInvoker()
  fullName: System.Xaml.XamlMember.LookupInvoker()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "傳回<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;></xref>與此相關聯<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "藉由呼叫<xref:System.Xaml.XamlMember.Invoker%2A>.</xref:System.Xaml.XamlMember.Invoker%2A>叫用此方法       預設實作不需要<xref:System.Xaml.XamlMember>使用其中一種建構函式，傳遞初始<xref:System.Xaml.Schema.XamlMemberInvoker>.</xref:System.Xaml.Schema.XamlMemberInvoker>建構</xref:System.Xaml.XamlMember> 不過，<xref:System.Xaml.XamlMember.UnderlyingMember%2A>值必須存在<xref:System.Xaml.XamlMember>; 否則預設實作會傳回`null`。</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlMember.UnderlyingMember%2A>       覆寫這個方法，如果您也是衍生自<xref:System.Xaml.Schema.XamlMemberInvoker>，而且想要傳回衍生的類別。</xref:System.Xaml.Schema.XamlMemberInvoker> 如果您傳回`null`，<xref:System.Xaml.XamlMember.Invoker%2A>傳回<xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName>給呼叫端。</xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName> </xref:System.Xaml.XamlMember.Invoker%2A>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlMemberInvoker LookupInvoker ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "The <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;></xref> information for this <xref href=&quot;System.Xaml.XamlMember&quot;></xref>; or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlMember.LookupInvoker*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsAmbient
  id: LookupIsAmbient
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsAmbient()
  nameWithType: XamlMember.LookupIsAmbient()
  fullName: System.Xaml.XamlMember.LookupIsAmbient()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "傳回是否這<xref href=&quot;System.Xaml.XamlMember&quot;></xref>回報為環境的屬性。"
  remarks: "這個方法會叫用由內部呼叫，以檢查環境的 XAML 內容資訊。 環境屬性行為會佔用公用 API 的行為，XAML 讀取器和 XAML 寫入器。 參考 LookupIsAmbient 內部呼叫通常是先確認物件和環境的使用方式的類型限定性條件所依賴的值可以正確運作的 XAML 處理邏輯的一部分。 預設的.NET Framework XAML 服務實作會使用 CLR 屬性設定來透過支援類型，取得從反映的這項資訊。 具體來說，預設實作會檢查是否有<xref:System.Windows.Markup.AmbientAttribute>並傳回`true`如 LookupIsAmbient 如果<xref:System.Windows.Markup.AmbientAttribute>存在於成員定義。</xref:System.Windows.Markup.AmbientAttribute> </xref:System.Windows.Markup.AmbientAttribute>       覆寫這個方法，如果您不使用<xref:System.Windows.Markup.AmbientAttribute>這個用途，而且想要取代該技術，指出環境的 XAML 屬性，使用您自己的技術。</xref:System.Windows.Markup.AmbientAttribute>       從 WPF<xref:System.Windows.Markup.AmbientAttribute>和<xref:System.Windows.Trigger.Property%2A?displayProperty=fullName><xref:System.Windows.Style.BasedOn%2A?displayProperty=fullName>.</xref:System.Windows.Style.BasedOn%2A?displayProperty=fullName></xref:System.Windows.Trigger.Property%2A?displayProperty=fullName></xref:System.Windows.Markup.AmbientAttribute>與該屬性的範例應用程式開發介面"
  syntax:
    content: protected virtual bool LookupIsAmbient ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要將此報告<xref href=&quot;System.Xaml.XamlMember&quot;></xref>做為環境的屬性; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.LookupIsAmbient*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsEvent
  id: LookupIsEvent
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsEvent()
  nameWithType: XamlMember.LookupIsEvent()
  fullName: System.Xaml.XamlMember.LookupIsEvent()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "傳回是否這<xref href=&quot;System.Xaml.XamlMember&quot;></xref>代表的事件。"
  remarks: "這個預設實作會檢查是否<xref:System.Xaml.XamlMember.UnderlyingMember%2A>的型別<xref:System.Reflection.EventInfo>，如果是，會傳回與`true`。</xref:System.Reflection.EventInfo> </xref:System.Xaml.XamlMember.UnderlyingMember%2A>       當呼叫端從<xref:System.Xaml.XamlMember.IsEvent%2A>.</xref:System.Xaml.XamlMember.IsEvent%2A>取得一個值時，叫用此方法 覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有特殊的可用中繼資料，可以解譯，以判斷 XAML 類型系統表示法以每個案例為基礎。</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsEvent ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>報告這個<xref href=&quot;System.Xaml.XamlMember&quot;></xref>代表的事件，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.LookupIsEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsReadOnly
  id: LookupIsReadOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsReadOnly()
  nameWithType: XamlMember.LookupIsReadOnly()
  fullName: System.Xaml.XamlMember.LookupIsReadOnly()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "傳回是否這<xref href=&quot;System.Xaml.XamlMember&quot;></xref>代表預定的唯讀屬性。"
  remarks: "預設實作會傳回`true`如果<xref:System.Xaml.XamlMember.UnderlyingMember%2A>存在，但公用`set`存取子不存在，由內部反映所決定。</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       當呼叫端從<xref:System.Xaml.XamlMember.IsReadOnly%2A>.</xref:System.Xaml.XamlMember.IsReadOnly%2A>取得一個值時，叫用此方法 覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有特殊的可用中繼資料，可以解譯，以判斷 XAML 類型系統表示法以每個案例為基礎。</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsReadOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要將此報告<xref href=&quot;System.Xaml.XamlMember&quot;></xref>為預定唯讀屬性; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.LookupIsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsReadPublic
  id: LookupIsReadPublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsReadPublic()
  nameWithType: XamlMember.LookupIsReadPublic()
  fullName: System.Xaml.XamlMember.LookupIsReadPublic()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "傳回是否這<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示有公用的屬性<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;></xref>存取子。"
  remarks: "預設實作會傳回內部反映或否定結果<xref:System.Xaml.XamlMember.IsWriteOnly%2A>、 依序處理。</xref:System.Xaml.XamlMember.IsWriteOnly%2A>       LookupIsReadPublic 傳回成員本身是否為公用。它會傳回`true`nonpublic，宣告類型上的公用成員。 使用<xref:System.Xaml.XamlMember.IsReadPublic%2A>相反地，您也要考慮的宣告型別可視性。</xref:System.Xaml.XamlMember.IsReadPublic%2A>       當呼叫端從<xref:System.Xaml.XamlMember.IsReadPublic%2A>.</xref:System.Xaml.XamlMember.IsReadPublic%2A>取得一個值時，叫用此方法 覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</xref:System.Xaml.XamlMember>      > [!IMPORTANT] > LookupIsReadPublic 方法是虛擬的因此，可以覆寫。 覆寫就可能會變更 （惡意或失敗） 的報告的存取資訊的 XAML 成員，讓它不會再預期的方式會與對應的基礎 CLR 宣告的型別系統的存取資訊。 存取層級的任何安全性關鍵的檢查，請改用基礎 CLR 型別。"
  syntax:
    content: protected virtual bool LookupIsReadPublic ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示有公用的屬性<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;></xref>存取子，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.LookupIsReadPublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsUnknown
  id: LookupIsUnknown
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsUnknown()
  nameWithType: XamlMember.LookupIsUnknown()
  fullName: System.Xaml.XamlMember.LookupIsUnknown()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "傳回是否這<xref href=&quot;System.Xaml.XamlMember&quot;></xref>代表無法解析成備份系統，用於解析型別和成員的成員。"
  remarks: "當呼叫端從<xref:System.Xaml.XamlMember.IsUnknown%2A>.</xref:System.Xaml.XamlMember.IsUnknown%2A>取得值，可能會叫用此方法 預設實作會傳回結果，會根據其中一個內部反映或檢查`null`值<xref:System.Xaml.XamlMember.UnderlyingMember%2A>、 依序處理。</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsUnknown ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個<xref href=&quot;System.Xaml.XamlMember&quot;></xref>代表非解析的成員，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.LookupIsUnknown*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsWriteOnly
  id: LookupIsWriteOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsWriteOnly()
  nameWithType: XamlMember.LookupIsWriteOnly()
  fullName: System.Xaml.XamlMember.LookupIsWriteOnly()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "傳回是否這<xref href=&quot;System.Xaml.XamlMember&quot;></xref>代表已公開的成員<xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;></xref>存取子，但不是公用<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;></xref>存取子。"
  remarks: "預設實作會傳回`true`如果<xref:System.Xaml.XamlMember.UnderlyingMember%2A>存在具有公用`set`存取子和 nonpublic`get`存取子，由內部反映所決定。</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       當呼叫端從<xref:System.Xaml.XamlMember.IsWriteOnly%2A>.</xref:System.Xaml.XamlMember.IsWriteOnly%2A>取得一個值時，叫用此方法 覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsWriteOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示唯寫的成員，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.LookupIsWriteOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsWritePublic
  id: LookupIsWritePublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsWritePublic()
  nameWithType: XamlMember.LookupIsWritePublic()
  fullName: System.Xaml.XamlMember.LookupIsWritePublic()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "傳回是否這<xref href=&quot;System.Xaml.XamlMember&quot;></xref>代表已公開的成員<xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;></xref>存取子。"
  remarks: "預設實作會傳回結果基礎內部反映或否定<xref:System.Xaml.XamlMember.IsReadOnly%2A>、 依序處理。</xref:System.Xaml.XamlMember.IsReadOnly%2A>       當呼叫端從<xref:System.Xaml.XamlMember.IsWritePublic%2A>.</xref:System.Xaml.XamlMember.IsWritePublic%2A>取得一個值時，叫用此方法 覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</xref:System.Xaml.XamlMember>      > [!IMPORTANT] > LookupIsWritePublic 方法是虛擬的因此，可以覆寫。 覆寫就可能會變更 （惡意或失敗） 的報告的存取資訊的 XAML 成員，讓它不會再預期的方式會與對應的基礎 CLR 宣告的型別系統的存取資訊。 存取層級的任何安全性關鍵的檢查，請改用基礎 CLR 型別。"
  syntax:
    content: protected virtual bool LookupIsWritePublic ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個<xref href=&quot;System.Xaml.XamlMember&quot;></xref>代表可寫入的成員，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.LookupIsWritePublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupTargetType
  id: LookupTargetType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupTargetType()
  nameWithType: XamlMember.LookupTargetType()
  fullName: System.Xaml.XamlMember.LookupTargetType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "傳回<xref href=&quot;System.Xaml.XamlType&quot;></xref>型別的其中<xref href=&quot;System.Xaml.XamlMember&quot;></xref>可以存在。"
  remarks: "預設實作會區分可附加和非可附加成員。 對於非可附加成員，LookupTargetType 一律會傳回<xref:System.Xaml.XamlMember.DeclaringType%2A>.</xref:System.Xaml.XamlMember.DeclaringType%2A> 可附加成員 LookupTargetType 傳回結果，根據檢查<xref:System.Xaml.XamlMember.UnderlyingMember%2A>存取子參數類型和解譯類型根據 XAML 結構描述內容。</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       當呼叫端從<xref:System.Xaml.XamlMember.TargetType%2A>.</xref:System.Xaml.XamlMember.TargetType%2A>取得一個值時，叫用此方法 覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.XamlType LookupTargetType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "型別其中<xref href=&quot;System.Xaml.XamlMember&quot;></xref>可以存在。 請參閱 < 備註 >。"
  overload: System.Xaml.XamlMember.LookupTargetType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupType
  id: LookupType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupType()
  nameWithType: XamlMember.LookupType()
  fullName: System.Xaml.XamlMember.LookupType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "傳回<xref href=&quot;System.Xaml.XamlType&quot;></xref>由成員的型別。 請參閱 < 備註 >。"
  remarks: "當呼叫端從<xref:System.Xaml.XamlMember.Type%2A>.</xref:System.Xaml.XamlMember.Type%2A>取得一個值時，叫用此方法 如果您想要覆寫此方法<xref:System.Xaml.XamlMember.Type%2A>傳回不同的值從預設內部反映中，會啟用的值，如果您也要提供自訂<xref:System.Xaml.Schema.XamlMemberInvoker>資訊。</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.XamlMember.Type%2A>       預設實作會使用不同的程式碼路徑與概念的意義傳回<xref:System.Xaml.XamlType>，根據這<xref:System.Xaml.XamlMember>表示屬性、 方法或事件。</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlType>      -若為屬性，傳回<xref:System.Xaml.XamlType>設定的屬性或屬性所傳回的型別。</xref:System.Xaml.XamlType>      -針對某個事件時，傳回<xref:System.Xaml.XamlType>是所需的事件處理常式型別 （CLR 實作中的委派）。</xref:System.Xaml.XamlType>      -若為一種方法，<xref:System.Xaml.XamlType>的傳回型別。</xref:System.Xaml.XamlType>       在每個案例中，XAML 結構描述內容用於評估的基礎系統類型的 XAML 型別。       當呼叫端從<xref:System.Xaml.XamlMember.Type%2A>.</xref:System.Xaml.XamlMember.Type%2A>取得一個值時，叫用此方法 覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.XamlType LookupType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref>由成員的型別。 請參閱 < 備註 >。"
  overload: System.Xaml.XamlMember.LookupType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupTypeConverter
  id: LookupTypeConverter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupTypeConverter()
  nameWithType: XamlMember.LookupTypeConverter()
  fullName: System.Xaml.XamlMember.LookupTypeConverter()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "傳回與此相關聯的類型轉換子實作<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "預設實作會使用下列邏輯和處理順序:: 如果屬性設定存在成員層級 (<xref:System.ComponentModel.TypeConverterAttribute>)，用於呼叫的屬性資訊<xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A>對 XAML 結構描述內容。</xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> </xref:System.ComponentModel.TypeConverterAttribute>      -如果<xref:System.Xaml.XamlMember.Type%2A>有效，則會傳回與類型相關聯的類型轉換器。</xref:System.Xaml.XamlMember.Type%2A>      -如果成員是事件，則會傳回特定事件的型別轉換子。       當呼叫端從<xref:System.Xaml.XamlMember.TypeConverter%2A>.</xref:System.Xaml.XamlMember.TypeConverter%2A>取得一個值時，叫用此方法 覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> LookupTypeConverter ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;執行個體，其<xref href=&quot;System.ComponentModel.TypeConverter&quot;></xref>條件約束，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.LookupTypeConverter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupUnderlyingGetter
  id: LookupUnderlyingGetter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupUnderlyingGetter()
  nameWithType: XamlMember.LookupUnderlyingGetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingGetter()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "傳回<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;></xref>與此相關聯的存取子<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "預設實作會解譯<xref:System.Xaml.XamlMember.UnderlyingMember%2A>屬性做為<xref:System.Reflection.PropertyInfo>並傳回值<xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=fullName>(參數設為`true`)，這表示傳回的方法可以是公用。</xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=fullName> </xref:System.Reflection.PropertyInfo> </xref:System.Xaml.XamlMember.UnderlyingMember%2A> 這種行為可能會導致`null`特定案例。 包括沒有相關聯的存取子存在，或該成員不是屬性。       當呼叫端<xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A>相關聯的<xref:System.Xaml.Schema.XamlMemberInvoker>。</xref:System.Xaml.Schema.XamlMemberInvoker>屬性</xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A>取得的值時，叫用此方法 覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</xref:System.Xaml.XamlMember> 請務必實作 LookupUnderlyingGetter， <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>，和<xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>使它們都會傳回相互關聯的結果。</xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> </xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>"
  syntax:
    content: protected virtual System.Reflection.MethodInfo LookupUnderlyingGetter ();
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "<xref:System.Reflection.MethodInfo>關聯<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;></xref>存取子; 或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Reflection.MethodInfo>"
  overload: System.Xaml.XamlMember.LookupUnderlyingGetter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupUnderlyingMember
  id: LookupUnderlyingMember
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupUnderlyingMember()
  nameWithType: XamlMember.LookupUnderlyingMember()
  fullName: System.Xaml.XamlMember.LookupUnderlyingMember()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "傳回 CLR 型別系統<xref:System.Reflection.MemberInfo>與此相關聯<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。</xref:System.Reflection.MemberInfo>"
  remarks: "預設實作會傳回建構為基礎的基礎成員資訊。 如果<xref:System.Reflection.MemberInfo>不提供足夠的資訊來設定基礎成員的簽章與建構物件，這個方法會傳回`null`。</xref:System.Reflection.MemberInfo>       如果在建構期間設定為基礎的成員，您應該不需要呼叫這個方法。       當呼叫端從<xref:System.Xaml.XamlMember.UnderlyingMember%2A>.</xref:System.Xaml.XamlMember.UnderlyingMember%2A>取得一個值時，叫用此方法 覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</xref:System.Xaml.XamlMember> 請務必實作<xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>， <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>，和 LookupUnderlyingMember 使它們都會傳回相互關聯的結果。</xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A> </xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>"
  syntax:
    content: protected virtual System.Reflection.MemberInfo LookupUnderlyingMember ();
    parameters: []
    return:
      type: System.Reflection.MemberInfo
      description: "CLR 型別系統<xref:System.Reflection.MemberInfo>與此相關聯的物件<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>; 或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Reflection.MemberInfo>"
  overload: System.Xaml.XamlMember.LookupUnderlyingMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupUnderlyingSetter
  id: LookupUnderlyingSetter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupUnderlyingSetter()
  nameWithType: XamlMember.LookupUnderlyingSetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingSetter()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "傳回<xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;></xref>與此相關聯的存取子<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "預設實作會解譯<xref:System.Xaml.XamlMember.UnderlyingMember%2A>為<xref:System.Reflection.PropertyInfo>並傳回值<xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=fullName>(參數設為`true`)，這表示傳回的方法可以是公用。</xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=fullName> </xref:System.Reflection.PropertyInfo> </xref:System.Xaml.XamlMember.UnderlyingMember%2A> 這會導致`null`某些情況下，包括沒有這類存取子，或不是屬性之成員的狀況。       當呼叫端相關聯的<xref:System.Xaml.Schema.XamlMemberInvoker>上取得<xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A>中的值，這個方法會叫用。覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</xref:System.Xaml.XamlMember>  </xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A></xref:System.Xaml.Schema.XamlMemberInvoker> 請務必實作<xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>，LookupUnderlyingSetter，和<xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>使它們都會傳回相互關聯的結果。</xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> </xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>"
  syntax:
    content: protected virtual System.Reflection.MethodInfo LookupUnderlyingSetter ();
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "<xref:System.Reflection.MethodInfo>關聯<xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;></xref>存取子; 或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Reflection.MethodInfo>"
  overload: System.Xaml.XamlMember.LookupUnderlyingSetter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupValueSerializer
  id: LookupValueSerializer
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupValueSerializer()
  nameWithType: XamlMember.LookupValueSerializer()
  fullName: System.Xaml.XamlMember.LookupValueSerializer()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "傳回與此相關聯的值序列化程式實作<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "預設實作會使用下列邏輯和處理順序:: 如果屬性設定存在成員層級 (<xref:System.Windows.Markup.ValueSerializerAttribute>)，用於呼叫的屬性資訊<xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A>對 XAML 結構描述內容。</xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> </xref:System.Windows.Markup.ValueSerializerAttribute>      -如果<xref:System.Xaml.XamlMember.Type%2A>有效，則會傳回與類型相關聯的值轉換器。</xref:System.Xaml.XamlMember.Type%2A>      -如果先前的條件不會套用，`null`傳回。       當呼叫端從<xref:System.Xaml.XamlMember.ValueSerializer%2A>.</xref:System.Xaml.XamlMember.ValueSerializer%2A>取得一個值時，叫用此方法 覆寫這個方法，如果您想要報告的統一結果整個<xref:System.Xaml.XamlMember>衍生的類別，或如果您有專用的中繼資料可用來判斷每個案例為基礎。</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer> LookupValueSerializer ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;執行個體，其<xref:System.Windows.Markup.ValueSerializer>條件約束，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.Markup.ValueSerializer>"
  overload: System.Xaml.XamlMember.LookupValueSerializer*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Name
  id: Name
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Name
  nameWithType: XamlMember.Name
  fullName: System.Xaml.XamlMember.Name
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得<xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;></xref>名稱字串，其中宣告此<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "這個值一律是在建構期間設定。 建構函式實作的<xref:System.Xaml.XamlMember>通常擲回例外狀況如果未指定初始的名稱; 因此，不想要這個屬性`null`或空字串，如果您使用預設.NET Framework XAML 服務實作。</xref:System.Xaml.XamlMember>       [XamlName 文法](~/add/includes/ajax-current-ext-md.md)而且命名規則的 CLR 型別和成員不精確的交集。 它是宣告是合法的在 CLR 成員名稱，但卻無效下 XAML 命名。 您應該儘可能避免這種情況。"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref>名稱字串，其中宣告此<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  overload: System.Xaml.XamlMember.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  id: op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: op_Equality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Equality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Equality(XamlMember,XamlMember)
  type: Operator
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "判斷兩個指定<xref href=&quot;System.Xaml.XamlMember&quot;></xref>物件具有相同的值。"
  syntax:
    content: public static bool op_Equality (System.Xaml.XamlMember xamlMember1, System.Xaml.XamlMember xamlMember2);
    parameters:
    - id: xamlMember1
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    - id: xamlMember2
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果值<code> xamlMember1 </code>的值相同<code> xamlMember2 </code>，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  id: op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: op_Inequality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Inequality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Inequality(XamlMember,XamlMember)
  type: Operator
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "判斷兩個指定<xref href=&quot;System.Xaml.XamlMember&quot;></xref>物件具有不同值。"
  syntax:
    content: public static bool op_Inequality (System.Xaml.XamlMember xamlMember1, System.Xaml.XamlMember xamlMember2);
    parameters:
    - id: xamlMember1
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    - id: xamlMember2
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果值<code> xamlMember1 </code>不同的值<code> xamlMember2 </code>，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.PreferredXamlNamespace
  id: PreferredXamlNamespace
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: PreferredXamlNamespace
  nameWithType: XamlMember.PreferredXamlNamespace
  fullName: System.Xaml.XamlMember.PreferredXamlNamespace
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得單一 XAML 命名空間 URI，這個識別主要的 XAML 命名空間<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "PreferredXamlNamespace 屬性提供相同的值與呼叫<xref:System.Xaml.XamlMember.GetXamlNamespaces%2A>然後從傳回的清單中取得的第一個值的字串。</xref:System.Xaml.XamlMember.GetXamlNamespaces%2A> 撰寫回到文字或 XAML 命名空間資訊會保留其他表示相互轉換的成員時，應該使用慣用的 XAML 命名空間。"
  syntax:
    content: public string PreferredXamlNamespace { get; }
    return:
      type: System.String
      description: "這個主要的 XAML 命名空間的識別項<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>，做為字串。"
  overload: System.Xaml.XamlMember.PreferredXamlNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.SerializationVisibility
  id: SerializationVisibility
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: SerializationVisibility
  nameWithType: XamlMember.SerializationVisibility
  fullName: System.Xaml.XamlMember.SerializationVisibility
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得<xref href=&quot;System.ComponentModel.DesignerSerializationVisibility&quot;></xref>值，表示視覺化設計工具應該如何處理成員。"
  syntax:
    content: public System.ComponentModel.DesignerSerializationVisibility SerializationVisibility { get; }
    return:
      type: System.ComponentModel.DesignerSerializationVisibility
      description: "值為<xref href=&quot;System.ComponentModel.DesignerSerializationVisibility&quot;></xref>列舉型別。 預設值是<xref href=&quot;System.ComponentModel.DesignerSerializationVisibility&quot;> </xref>。"
  overload: System.Xaml.XamlMember.SerializationVisibility*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.TargetType
  id: TargetType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: TargetType
  nameWithType: XamlMember.TargetType
  fullName: System.Xaml.XamlMember.TargetType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得<xref href=&quot;System.Xaml.XamlType&quot;></xref>型別的其中<xref href=&quot;System.Xaml.XamlMember&quot;></xref>可以存在。"
  remarks: "傳回的值是不同的可附加和非可附加成員。 對於非可附加成員，TargetType 傳回<xref:System.Xaml.XamlMember.DeclaringType%2A>.</xref:System.Xaml.XamlMember.DeclaringType%2A> 可附加成員<xref:System.Xaml.XamlMember.LookupTargetType%2A>傳回結果，取決於此邏輯︰ 如果反映無法解決備份-(<xref:System.Xaml.XamlMember.IsUnknown%2A> `true`)，這個方法會傳回代表一般物件類型的內部常數。</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember.LookupTargetType%2A>      -如果先前的條件不適用，<xref:System.Xaml.XamlMember.LookupTargetType%2A>稱為。</xref:System.Xaml.XamlMember.LookupTargetType%2A> 預設實作會傳回<xref:System.Xaml.XamlType>檢查實作的方法，根據`get`和`set`存取子。</xref:System.Xaml.XamlType> 類別可能會覆寫<xref:System.Xaml.XamlMember.LookupTargetType%2A>要使用不同的行為，例如其他中繼資料表單，可能會報告目標類型的可附加成員。</xref:System.Xaml.XamlMember.LookupTargetType%2A>"
  syntax:
    content: public System.Xaml.XamlType TargetType { get; }
    return:
      type: System.Xaml.XamlType
      description: "型別其中<xref href=&quot;System.Xaml.XamlMember&quot;></xref>可以存在。 請參閱 < 備註 >。"
  overload: System.Xaml.XamlMember.TargetType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.ToString
  id: ToString
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: ToString()
  nameWithType: XamlMember.ToString()
  fullName: System.Xaml.XamlMember.ToString()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "傳回這個字串表示<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "這個實作會傳回<xref:System.Xaml.XamlMember.Name%2A>.</xref:System.Xaml.XamlMember.Name%2A>"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "這個字串表示<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  overload: System.Xaml.XamlMember.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Type
  id: Type
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Type
  nameWithType: XamlMember.Type
  fullName: System.Xaml.XamlMember.Type
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得<xref href=&quot;System.Xaml.XamlType&quot;></xref>由成員的型別。"
  remarks: "呼叫類型會叫用<xref:System.Xaml.XamlMember.LookupType%2A>或特定覆寫該方法。</xref:System.Xaml.XamlMember.LookupType%2A> 會發生這種情況時的初始內部反映邏輯已設定資訊。       此預設行為 (沒有<xref:System.Xaml.XamlMember.LookupType%2A>覆寫)，傳回<xref:System.Xaml.XamlType>可以具有不同的概念意義。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlMember.LookupType%2A> 適用於哪一個的意義取決於是否這<xref:System.Xaml.XamlMember>表示屬性、 方法或事件，如下列清單所示:-對於屬性，傳回<xref:System.Xaml.XamlType>設定的屬性或屬性所傳回的型別。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlMember>      -針對某個事件時，傳回<xref:System.Xaml.XamlType>是所需的事件處理常式型別 （CLR 實作中的委派）。</xref:System.Xaml.XamlType>      -若為一種方法，<xref:System.Xaml.XamlType>是可能是該方法的傳回型別`null`。</xref:System.Xaml.XamlType>       在每個案例中，XAML 結構描述內容用於評估的支援類型的 XAML 型別。"
  syntax:
    content: public System.Xaml.XamlType Type { get; }
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref>由成員的型別。 請參閱 < 備註 >。"
  overload: System.Xaml.XamlMember.Type*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.TypeConverter
  id: TypeConverter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: TypeConverter
  nameWithType: XamlMember.TypeConverter
  fullName: System.Xaml.XamlMember.TypeConverter
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;物件，可用的 XAML 宣告物件的型別轉換建構函式。"
  remarks: "呼叫 TypeConverter 會叫用<xref:System.Xaml.XamlMember.LookupTypeConverter%2A>或特定覆寫該方法。</xref:System.Xaml.XamlMember.LookupTypeConverter%2A> 初始內部反映邏輯已設定資訊時，就會發生這種行為。       實作，傳回非 null 屬性值。 TypeConverter 不一定可運作的<xref:System.ComponentModel.TypeConverter>.</xref:System.ComponentModel.TypeConverter> 下列是可能的 TypeConverter 和這些值代表項目的非 null 傳回值的清單:-傳回值會報告該成員為或更廣泛地目標型別轉換子的屬性型別轉換子。 這種行為通常是何種大部分的 XAML 類型系統和 XAML 處理器尋找才能具現化類型轉換器，並叫用其方法。      -傳回的值會報告內建值轉換器。 這些轉換存在特定 XAML 寫入器所執行的內部作業。 特別是，這些內建的值轉換器會將原始屬性字串值轉換成 XAML 語言層級基本類型。 如需.NET Framework XAML 服務實作，這些內建型別轉換通常轉送給系統組件中定義的類型轉換器。 例如，轉換為<xref:System.Int32>值沒有內建的轉送轉換，而因此，<xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A>值的參考<xref:System.ComponentModel.Int32Converter>.</xref:System.ComponentModel.Int32Converter> </xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A> </xref:System.Int32>      -傳回的值會報告未受限制的物件模型; 特殊的案例也就是說，<xref:System.Xaml.XamlMember>具有<xref:System.Xaml.XamlMember.Type%2A><xref:System.Object>.</xref:System.Object>值</xref:System.Xaml.XamlMember.Type%2A></xref:System.Xaml.XamlMember> 在此情況下，<xref:System.Xaml.Schema.XamlValueConverter%601>報告<xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=fullName>是 {`Object}`。</xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=fullName> </xref:System.Xaml.Schema.XamlValueConverter%601> 不過，<xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>是`null`因為沒有實際的類型或執行個體是可用來執行這項轉換。</xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> 相反地，無法判斷物件模型的行為，直到執行階段，當特定技術的執行階段會判定其物件圖形的處理。       如果您可以存取工作<xref:System.ComponentModel.TypeConverter>從<xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>，您可以將其轉換方法叫用。</xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> </xref:System.ComponentModel.TypeConverter> 不過，許多轉換方法都倚賴服務內容。 如果您沒有可用的類型轉換器撰寫物件的物件圖形的其一般角色必須要有相同的服務內容，轉換器方法可以擲回例外狀況。"
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> TypeConverter { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;值，與<xref href=&quot;System.ComponentModel.TypeConverter&quot;></xref>泛型條件約束。 請參閱 < 備註 >。"
  overload: System.Xaml.XamlMember.TypeConverter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.UnderlyingMember
  id: UnderlyingMember
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: UnderlyingMember
  nameWithType: XamlMember.UnderlyingMember
  fullName: System.Xaml.XamlMember.UnderlyingMember
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得 CLR 型別系統<xref:System.Reflection.MemberInfo>，而且所建構之成員可<xref:System.Reflection.PropertyInfo>， <xref:System.Reflection.MethodInfo>，或<xref:System.Reflection.EventInfo>.</xref:System.Reflection.EventInfo> </xref:System.Reflection.MethodInfo> </xref:System.Reflection.PropertyInfo> </xref:System.Reflection.MemberInfo>"
  remarks: "呼叫 UnderlyingMember 會叫用<xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>或特定覆寫該方法。</xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>"
  syntax:
    content: public System.Reflection.MemberInfo UnderlyingMember { get; }
    return:
      type: System.Reflection.MemberInfo
      description: "CLR 型別系統<xref:System.Reflection.MemberInfo>資訊，以從初始建構函式參數的轉換。</xref:System.Reflection.MemberInfo> A <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> ，建構&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;簽章傳回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.UnderlyingMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.ValueSerializer
  id: ValueSerializer
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: ValueSerializer
  nameWithType: XamlMember.ValueSerializer
  fullName: System.Xaml.XamlMember.ValueSerializer
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;物件，使用值序列化的 XAML 宣告物件。"
  remarks: "呼叫 ValueSerializer 會叫用<xref:System.Xaml.XamlMember.LookupValueSerializer%2A>或特定覆寫該方法。</xref:System.Xaml.XamlMember.LookupValueSerializer%2A> 初始內部反映邏輯已設定資訊時，就會發生這種行為。       並非所有的 ValueSerializer 傳回非 null 屬性值的情況下未必會<xref:System.Windows.Markup.ValueSerializer>.</xref:System.Windows.Markup.ValueSerializer>可運作 請參閱 < 備註 > 中的<xref:System.Xaml.XamlMember.TypeConverter%2A>; 相同的考量適用於 ValueSerializer。</xref:System.Xaml.XamlMember.TypeConverter%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer> ValueSerializer { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;與<xref:System.Windows.Markup.ValueSerializer>泛型條件約束。</xref:System.Windows.Markup.ValueSerializer>"
  overload: System.Xaml.XamlMember.ValueSerializer*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(EventInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext)
- uid: System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: true
  name: EventInfo
  nameWithType: EventInfo
  fullName: System.Reflection.EventInfo
- uid: System.Xaml.XamlSchemaContext
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(PropertyInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.Schema.XamlMemberInvoker
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlMemberInvoker
  nameWithType: XamlMemberInvoker
  fullName: System.Xaml.Schema.XamlMemberInvoker
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,XamlType,Boolean)
  nameWithType: XamlMember.XamlMember(String,XamlType,Boolean)
  fullName: System.Xaml.XamlMember.XamlMember(String,XamlType,Boolean)
- uid: System.Xaml.XamlType
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.XamlMember.DeclaringType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeclaringType
  nameWithType: XamlMember.DeclaringType
  fullName: System.Xaml.XamlMember.DeclaringType
- uid: System.Xaml.XamlMember.DeferringLoader
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeferringLoader
  nameWithType: XamlMember.DeferringLoader
  fullName: System.Xaml.XamlMember.DeferringLoader
- uid: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<XamlDeferringLoader>
  nameWithType: XamlValueConverter<XamlDeferringLoader>
  fullName: System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.Xaml.XamlDeferringLoader>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlDeferringLoader
    name: XamlDeferringLoader
    nameWithType: XamlDeferringLoader
    fullName: XamlDeferringLoader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.DependsOn
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DependsOn
  nameWithType: XamlMember.DependsOn
  fullName: System.Xaml.XamlMember.DependsOn
- uid: System.Collections.Generic.IList{System.Xaml.XamlMember}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<XamlMember>
  nameWithType: IList<XamlMember>
  fullName: System.Collections.Generic.IList<System.Xaml.XamlMember>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Xaml.XamlMember>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlMember
    name: XamlMember
    nameWithType: XamlMember
    fullName: XamlMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.Equals(System.Object)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Equals(Object)
  nameWithType: XamlMember.Equals(Object)
  fullName: System.Xaml.XamlMember.Equals(Object)
- uid: System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Equals(XamlMember)
  nameWithType: XamlMember.Equals(XamlMember)
  fullName: System.Xaml.XamlMember.Equals(XamlMember)
- uid: System.Xaml.XamlMember
  parent: System.Xaml
  isExternal: false
  name: XamlMember
  nameWithType: XamlMember
  fullName: System.Xaml.XamlMember
- uid: System.Xaml.XamlMember.GetHashCode
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetHashCode()
  nameWithType: XamlMember.GetHashCode()
  fullName: System.Xaml.XamlMember.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Xaml.XamlMember.GetXamlNamespaces
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetXamlNamespaces()
  nameWithType: XamlMember.GetXamlNamespaces()
  fullName: System.Xaml.XamlMember.GetXamlNamespaces()
- uid: System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.Invoker
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Invoker
  nameWithType: XamlMember.Invoker
  fullName: System.Xaml.XamlMember.Invoker
- uid: System.Xaml.XamlMember.IsAmbient
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAmbient
  nameWithType: XamlMember.IsAmbient
  fullName: System.Xaml.XamlMember.IsAmbient
- uid: System.Xaml.XamlMember.IsAttachable
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAttachable
  nameWithType: XamlMember.IsAttachable
  fullName: System.Xaml.XamlMember.IsAttachable
- uid: System.Xaml.XamlMember.IsDirective
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsDirective
  nameWithType: XamlMember.IsDirective
  fullName: System.Xaml.XamlMember.IsDirective
- uid: System.Xaml.XamlMember.IsEvent
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsEvent
  nameWithType: XamlMember.IsEvent
  fullName: System.Xaml.XamlMember.IsEvent
- uid: System.Xaml.XamlMember.IsNameValid
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsNameValid
  nameWithType: XamlMember.IsNameValid
  fullName: System.Xaml.XamlMember.IsNameValid
- uid: System.Xaml.XamlMember.IsReadOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadOnly
  nameWithType: XamlMember.IsReadOnly
  fullName: System.Xaml.XamlMember.IsReadOnly
- uid: System.Xaml.XamlMember.IsReadPublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadPublic
  nameWithType: XamlMember.IsReadPublic
  fullName: System.Xaml.XamlMember.IsReadPublic
- uid: System.Xaml.XamlMember.IsUnknown
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsUnknown
  nameWithType: XamlMember.IsUnknown
  fullName: System.Xaml.XamlMember.IsUnknown
- uid: System.Xaml.XamlMember.IsWriteOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWriteOnly
  nameWithType: XamlMember.IsWriteOnly
  fullName: System.Xaml.XamlMember.IsWriteOnly
- uid: System.Xaml.XamlMember.IsWritePublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWritePublic
  nameWithType: XamlMember.IsWritePublic
  fullName: System.Xaml.XamlMember.IsWritePublic
- uid: System.Xaml.XamlMember.LookupCustomAttributeProvider
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupCustomAttributeProvider()
  nameWithType: XamlMember.LookupCustomAttributeProvider()
  fullName: System.Xaml.XamlMember.LookupCustomAttributeProvider()
- uid: System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Xaml.XamlMember.LookupDeferringLoader
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDeferringLoader()
  nameWithType: XamlMember.LookupDeferringLoader()
  fullName: System.Xaml.XamlMember.LookupDeferringLoader()
- uid: System.Xaml.XamlMember.LookupDependsOn
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDependsOn()
  nameWithType: XamlMember.LookupDependsOn()
  fullName: System.Xaml.XamlMember.LookupDependsOn()
- uid: System.Xaml.XamlMember.LookupInvoker
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupInvoker()
  nameWithType: XamlMember.LookupInvoker()
  fullName: System.Xaml.XamlMember.LookupInvoker()
- uid: System.Xaml.XamlMember.LookupIsAmbient
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsAmbient()
  nameWithType: XamlMember.LookupIsAmbient()
  fullName: System.Xaml.XamlMember.LookupIsAmbient()
- uid: System.Xaml.XamlMember.LookupIsEvent
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsEvent()
  nameWithType: XamlMember.LookupIsEvent()
  fullName: System.Xaml.XamlMember.LookupIsEvent()
- uid: System.Xaml.XamlMember.LookupIsReadOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadOnly()
  nameWithType: XamlMember.LookupIsReadOnly()
  fullName: System.Xaml.XamlMember.LookupIsReadOnly()
- uid: System.Xaml.XamlMember.LookupIsReadPublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadPublic()
  nameWithType: XamlMember.LookupIsReadPublic()
  fullName: System.Xaml.XamlMember.LookupIsReadPublic()
- uid: System.Xaml.XamlMember.LookupIsUnknown
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsUnknown()
  nameWithType: XamlMember.LookupIsUnknown()
  fullName: System.Xaml.XamlMember.LookupIsUnknown()
- uid: System.Xaml.XamlMember.LookupIsWriteOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWriteOnly()
  nameWithType: XamlMember.LookupIsWriteOnly()
  fullName: System.Xaml.XamlMember.LookupIsWriteOnly()
- uid: System.Xaml.XamlMember.LookupIsWritePublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWritePublic()
  nameWithType: XamlMember.LookupIsWritePublic()
  fullName: System.Xaml.XamlMember.LookupIsWritePublic()
- uid: System.Xaml.XamlMember.LookupTargetType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTargetType()
  nameWithType: XamlMember.LookupTargetType()
  fullName: System.Xaml.XamlMember.LookupTargetType()
- uid: System.Xaml.XamlMember.LookupType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupType()
  nameWithType: XamlMember.LookupType()
  fullName: System.Xaml.XamlMember.LookupType()
- uid: System.Xaml.XamlMember.LookupTypeConverter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTypeConverter()
  nameWithType: XamlMember.LookupTypeConverter()
  fullName: System.Xaml.XamlMember.LookupTypeConverter()
- uid: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<TypeConverter>
  nameWithType: XamlValueConverter<TypeConverter>
  fullName: System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.ComponentModel.TypeConverter>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.TypeConverter
    name: TypeConverter
    nameWithType: TypeConverter
    fullName: TypeConverter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.LookupUnderlyingGetter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingGetter()
  nameWithType: XamlMember.LookupUnderlyingGetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingGetter()
- uid: System.Xaml.XamlMember.LookupUnderlyingMember
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingMember()
  nameWithType: XamlMember.LookupUnderlyingMember()
  fullName: System.Xaml.XamlMember.LookupUnderlyingMember()
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Xaml.XamlMember.LookupUnderlyingSetter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingSetter()
  nameWithType: XamlMember.LookupUnderlyingSetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingSetter()
- uid: System.Xaml.XamlMember.LookupValueSerializer
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupValueSerializer()
  nameWithType: XamlMember.LookupValueSerializer()
  fullName: System.Xaml.XamlMember.LookupValueSerializer()
- uid: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<ValueSerializer>
  nameWithType: XamlValueConverter<ValueSerializer>
  fullName: System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.Windows.Markup.ValueSerializer>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Markup.ValueSerializer
    name: ValueSerializer
    nameWithType: ValueSerializer
    fullName: ValueSerializer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.Name
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Name
  nameWithType: XamlMember.Name
  fullName: System.Xaml.XamlMember.Name
- uid: System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Equality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Equality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Equality(XamlMember,XamlMember)
- uid: System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Inequality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Inequality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Inequality(XamlMember,XamlMember)
- uid: System.Xaml.XamlMember.PreferredXamlNamespace
  parent: System.Xaml.XamlMember
  isExternal: false
  name: PreferredXamlNamespace
  nameWithType: XamlMember.PreferredXamlNamespace
  fullName: System.Xaml.XamlMember.PreferredXamlNamespace
- uid: System.Xaml.XamlMember.SerializationVisibility
  parent: System.Xaml.XamlMember
  isExternal: false
  name: SerializationVisibility
  nameWithType: XamlMember.SerializationVisibility
  fullName: System.Xaml.XamlMember.SerializationVisibility
- uid: System.ComponentModel.DesignerSerializationVisibility
  parent: System.ComponentModel
  isExternal: false
  name: DesignerSerializationVisibility
  nameWithType: DesignerSerializationVisibility
  fullName: System.ComponentModel.DesignerSerializationVisibility
- uid: System.Xaml.XamlMember.TargetType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TargetType
  nameWithType: XamlMember.TargetType
  fullName: System.Xaml.XamlMember.TargetType
- uid: System.Xaml.XamlMember.ToString
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ToString()
  nameWithType: XamlMember.ToString()
  fullName: System.Xaml.XamlMember.ToString()
- uid: System.Xaml.XamlMember.Type
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Type
  nameWithType: XamlMember.Type
  fullName: System.Xaml.XamlMember.Type
- uid: System.Xaml.XamlMember.TypeConverter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TypeConverter
  nameWithType: XamlMember.TypeConverter
  fullName: System.Xaml.XamlMember.TypeConverter
- uid: System.Xaml.XamlMember.UnderlyingMember
  parent: System.Xaml.XamlMember
  isExternal: false
  name: UnderlyingMember
  nameWithType: XamlMember.UnderlyingMember
  fullName: System.Xaml.XamlMember.UnderlyingMember
- uid: System.Xaml.XamlMember.ValueSerializer
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ValueSerializer
  nameWithType: XamlMember.ValueSerializer
  fullName: System.Xaml.XamlMember.ValueSerializer
- uid: System.Xaml.XamlMember.#ctor*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember
  nameWithType: XamlMember.XamlMember
- uid: System.Xaml.XamlMember.DeclaringType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeclaringType
  nameWithType: XamlMember.DeclaringType
- uid: System.Xaml.XamlMember.DeferringLoader*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeferringLoader
  nameWithType: XamlMember.DeferringLoader
- uid: System.Xaml.XamlMember.DependsOn*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DependsOn
  nameWithType: XamlMember.DependsOn
- uid: System.Xaml.XamlMember.Equals*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Equals
  nameWithType: XamlMember.Equals
- uid: System.Xaml.XamlMember.GetHashCode*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetHashCode
  nameWithType: XamlMember.GetHashCode
- uid: System.Xaml.XamlMember.GetXamlNamespaces*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetXamlNamespaces
  nameWithType: XamlMember.GetXamlNamespaces
- uid: System.Xaml.XamlMember.Invoker*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Invoker
  nameWithType: XamlMember.Invoker
- uid: System.Xaml.XamlMember.IsAmbient*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAmbient
  nameWithType: XamlMember.IsAmbient
- uid: System.Xaml.XamlMember.IsAttachable*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAttachable
  nameWithType: XamlMember.IsAttachable
- uid: System.Xaml.XamlMember.IsDirective*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsDirective
  nameWithType: XamlMember.IsDirective
- uid: System.Xaml.XamlMember.IsEvent*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsEvent
  nameWithType: XamlMember.IsEvent
- uid: System.Xaml.XamlMember.IsNameValid*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsNameValid
  nameWithType: XamlMember.IsNameValid
- uid: System.Xaml.XamlMember.IsReadOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadOnly
  nameWithType: XamlMember.IsReadOnly
- uid: System.Xaml.XamlMember.IsReadPublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadPublic
  nameWithType: XamlMember.IsReadPublic
- uid: System.Xaml.XamlMember.IsUnknown*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsUnknown
  nameWithType: XamlMember.IsUnknown
- uid: System.Xaml.XamlMember.IsWriteOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWriteOnly
  nameWithType: XamlMember.IsWriteOnly
- uid: System.Xaml.XamlMember.IsWritePublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWritePublic
  nameWithType: XamlMember.IsWritePublic
- uid: System.Xaml.XamlMember.LookupCustomAttributeProvider*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupCustomAttributeProvider
  nameWithType: XamlMember.LookupCustomAttributeProvider
- uid: System.Xaml.XamlMember.LookupDeferringLoader*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDeferringLoader
  nameWithType: XamlMember.LookupDeferringLoader
- uid: System.Xaml.XamlMember.LookupDependsOn*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDependsOn
  nameWithType: XamlMember.LookupDependsOn
- uid: System.Xaml.XamlMember.LookupInvoker*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupInvoker
  nameWithType: XamlMember.LookupInvoker
- uid: System.Xaml.XamlMember.LookupIsAmbient*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsAmbient
  nameWithType: XamlMember.LookupIsAmbient
- uid: System.Xaml.XamlMember.LookupIsEvent*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsEvent
  nameWithType: XamlMember.LookupIsEvent
- uid: System.Xaml.XamlMember.LookupIsReadOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadOnly
  nameWithType: XamlMember.LookupIsReadOnly
- uid: System.Xaml.XamlMember.LookupIsReadPublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadPublic
  nameWithType: XamlMember.LookupIsReadPublic
- uid: System.Xaml.XamlMember.LookupIsUnknown*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsUnknown
  nameWithType: XamlMember.LookupIsUnknown
- uid: System.Xaml.XamlMember.LookupIsWriteOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWriteOnly
  nameWithType: XamlMember.LookupIsWriteOnly
- uid: System.Xaml.XamlMember.LookupIsWritePublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWritePublic
  nameWithType: XamlMember.LookupIsWritePublic
- uid: System.Xaml.XamlMember.LookupTargetType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTargetType
  nameWithType: XamlMember.LookupTargetType
- uid: System.Xaml.XamlMember.LookupType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupType
  nameWithType: XamlMember.LookupType
- uid: System.Xaml.XamlMember.LookupTypeConverter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTypeConverter
  nameWithType: XamlMember.LookupTypeConverter
- uid: System.Xaml.XamlMember.LookupUnderlyingGetter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingGetter
  nameWithType: XamlMember.LookupUnderlyingGetter
- uid: System.Xaml.XamlMember.LookupUnderlyingMember*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingMember
  nameWithType: XamlMember.LookupUnderlyingMember
- uid: System.Xaml.XamlMember.LookupUnderlyingSetter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingSetter
  nameWithType: XamlMember.LookupUnderlyingSetter
- uid: System.Xaml.XamlMember.LookupValueSerializer*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupValueSerializer
  nameWithType: XamlMember.LookupValueSerializer
- uid: System.Xaml.XamlMember.Name*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Name
  nameWithType: XamlMember.Name
- uid: System.Xaml.XamlMember.op_Equality*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Equality
  nameWithType: XamlMember.op_Equality
- uid: System.Xaml.XamlMember.op_Inequality*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Inequality
  nameWithType: XamlMember.op_Inequality
- uid: System.Xaml.XamlMember.PreferredXamlNamespace*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: PreferredXamlNamespace
  nameWithType: XamlMember.PreferredXamlNamespace
- uid: System.Xaml.XamlMember.SerializationVisibility*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: SerializationVisibility
  nameWithType: XamlMember.SerializationVisibility
- uid: System.Xaml.XamlMember.TargetType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TargetType
  nameWithType: XamlMember.TargetType
- uid: System.Xaml.XamlMember.ToString*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ToString
  nameWithType: XamlMember.ToString
- uid: System.Xaml.XamlMember.Type*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Type
  nameWithType: XamlMember.Type
- uid: System.Xaml.XamlMember.TypeConverter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TypeConverter
  nameWithType: XamlMember.TypeConverter
- uid: System.Xaml.XamlMember.UnderlyingMember*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: UnderlyingMember
  nameWithType: XamlMember.UnderlyingMember
- uid: System.Xaml.XamlMember.ValueSerializer*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ValueSerializer
  nameWithType: XamlMember.ValueSerializer
