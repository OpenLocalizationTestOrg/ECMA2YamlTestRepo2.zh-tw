### YamlMime:ManagedReference
items:
- uid: System.Data.Linq.Mapping.MetaDataMember
  id: MetaDataMember
  children:
  - System.Data.Linq.Mapping.MetaDataMember.#ctor
  - System.Data.Linq.Mapping.MetaDataMember.Association
  - System.Data.Linq.Mapping.MetaDataMember.AutoSync
  - System.Data.Linq.Mapping.MetaDataMember.CanBeNull
  - System.Data.Linq.Mapping.MetaDataMember.DbType
  - System.Data.Linq.Mapping.MetaDataMember.DeclaringType
  - System.Data.Linq.Mapping.MetaDataMember.DeferredSourceAccessor
  - System.Data.Linq.Mapping.MetaDataMember.DeferredValueAccessor
  - System.Data.Linq.Mapping.MetaDataMember.Expression
  - System.Data.Linq.Mapping.MetaDataMember.IsAssociation
  - System.Data.Linq.Mapping.MetaDataMember.IsDbGenerated
  - System.Data.Linq.Mapping.MetaDataMember.IsDeclaredBy(System.Data.Linq.Mapping.MetaType)
  - System.Data.Linq.Mapping.MetaDataMember.IsDeferred
  - System.Data.Linq.Mapping.MetaDataMember.IsDiscriminator
  - System.Data.Linq.Mapping.MetaDataMember.IsPersistent
  - System.Data.Linq.Mapping.MetaDataMember.IsPrimaryKey
  - System.Data.Linq.Mapping.MetaDataMember.IsVersion
  - System.Data.Linq.Mapping.MetaDataMember.LoadMethod
  - System.Data.Linq.Mapping.MetaDataMember.MappedName
  - System.Data.Linq.Mapping.MetaDataMember.Member
  - System.Data.Linq.Mapping.MetaDataMember.MemberAccessor
  - System.Data.Linq.Mapping.MetaDataMember.Name
  - System.Data.Linq.Mapping.MetaDataMember.Ordinal
  - System.Data.Linq.Mapping.MetaDataMember.StorageAccessor
  - System.Data.Linq.Mapping.MetaDataMember.StorageMember
  - System.Data.Linq.Mapping.MetaDataMember.Type
  - System.Data.Linq.Mapping.MetaDataMember.UpdateCheck
  langs:
  - csharp
  name: MetaDataMember
  nameWithType: MetaDataMember
  fullName: System.Data.Linq.Mapping.MetaDataMember
  type: Class
  summary: "表示欄位或屬性的網域物件之間的對應至資料庫資料表的資料行。"
  syntax:
    content: public abstract class MetaDataMember
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.#ctor
  id: '#ctor'
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: MetaDataMember()
  nameWithType: MetaDataMember.MetaDataMember()
  fullName: System.Data.Linq.Mapping.MetaDataMember.MetaDataMember()
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "初始化的新執行個體<xref href=&quot;System.Data.Linq.Mapping.MetaDataMember&quot;></xref>類別。"
  syntax:
    content: protected MetaDataMember ();
    parameters: []
  overload: System.Data.Linq.Mapping.MetaDataMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.Association
  id: Association
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: Association
  nameWithType: MetaDataMember.Association
  fullName: System.Data.Linq.Mapping.MetaDataMember.Association
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得<xref href=&quot;System.Data.Linq.Mapping.MetaAssociation&quot;></xref>對應於這個成員。"
  remarks: "此屬性代表資料庫關聯外部索引鍵對主索引鍵關聯性類似。"
  syntax:
    content: public abstract System.Data.Linq.Mapping.MetaAssociation Association { get; }
    return:
      type: System.Data.Linq.Mapping.MetaAssociation
      description: "對應<xref href=&quot;System.Data.Linq.Mapping.MetaAssociation&quot;></xref>如果存在的話，否則<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Linq.Mapping.MetaDataMember.Association*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.AutoSync
  id: AutoSync
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: AutoSync
  nameWithType: MetaDataMember.AutoSync
  fullName: System.Data.Linq.Mapping.MetaDataMember.AutoSync
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "這個成員為插入，取得讀回行為和更新作業。"
  syntax:
    content: public abstract System.Data.Linq.Mapping.AutoSync AutoSync { get; }
    return:
      type: System.Data.Linq.Mapping.AutoSync
      description: "<xref href=&quot;System.Data.Linq.Mapping.AutoSync&quot;> </xref>列舉型別。"
  overload: System.Data.Linq.Mapping.MetaDataMember.AutoSync*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.CanBeNull
  id: CanBeNull
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: CanBeNull
  nameWithType: MetaDataMember.CanBeNull
  fullName: System.Data.Linq.Mapping.MetaDataMember.CanBeNull
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得這個成員的值可指定是否<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>值。"
  remarks: "這個屬性是相依於<xref:System.Data.Linq.Mapping.MetaDataMember.DbType%2A>屬性，並為了方便起見。</xref:System.Data.Linq.Mapping.MetaDataMember.DbType%2A>"
  syntax:
    content: public abstract bool CanBeNull { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果可以指派這個成員<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>值; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Linq.Mapping.MetaDataMember.CanBeNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.DbType
  id: DbType
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: DbType
  nameWithType: MetaDataMember.DbType
  fullName: System.Data.Linq.Mapping.MetaDataMember.DbType
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得對應的資料庫資料行的類型。"
  remarks: "這會是用來定義 T-SQL 資料表宣告命令中的資料行的確切文字。 如果不這樣定義，資料庫資料行類型會推斷的成員型別。"
  syntax:
    content: public abstract string DbType { get; }
    return:
      type: System.String
      description: "做為字串的資料庫資料行類型。"
  overload: System.Data.Linq.Mapping.MetaDataMember.DbType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.DeclaringType
  id: DeclaringType
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: DeclaringType
  nameWithType: MetaDataMember.DeclaringType
  fullName: System.Data.Linq.Mapping.MetaDataMember.DeclaringType
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得<xref href=&quot;System.Data.Linq.Mapping.MetaType&quot;> </xref> ，其中包含此資料成員。"
  syntax:
    content: public abstract System.Data.Linq.Mapping.MetaType DeclaringType { get; }
    return:
      type: System.Data.Linq.Mapping.MetaType
      description: "中繼型別，其中包含目前的成員。"
  overload: System.Data.Linq.Mapping.MetaDataMember.DeclaringType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.DeferredSourceAccessor
  id: DeferredSourceAccessor
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: DeferredSourceAccessor
  nameWithType: MetaDataMember.DeferredSourceAccessor
  fullName: System.Data.Linq.Mapping.MetaDataMember.DeferredSourceAccessor
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得用來取得和設定這個成員的延後的來源的存取子。"
  syntax:
    content: public abstract System.Data.Linq.Mapping.MetaAccessor DeferredSourceAccessor { get; }
    return:
      type: System.Data.Linq.Mapping.MetaAccessor
      description: "存取子，用來存取這個成員的延後的來源。"
  overload: System.Data.Linq.Mapping.MetaDataMember.DeferredSourceAccessor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.DeferredValueAccessor
  id: DeferredValueAccessor
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: DeferredValueAccessor
  nameWithType: MetaDataMember.DeferredValueAccessor
  fullName: System.Data.Linq.Mapping.MetaDataMember.DeferredValueAccessor
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得用來取得和設定這個成員的延後的值 （而不會造成提取） 的存取子。"
  syntax:
    content: public abstract System.Data.Linq.Mapping.MetaAccessor DeferredValueAccessor { get; }
    return:
      type: System.Data.Linq.Mapping.MetaAccessor
      description: "存取子，用來存取這個成員的延後的值。"
  overload: System.Data.Linq.Mapping.MetaDataMember.DeferredValueAccessor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.Expression
  id: Expression
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: Expression
  nameWithType: MetaDataMember.Expression
  fullName: System.Data.Linq.Mapping.MetaDataMember.Expression
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得定義計算資料行的運算式。"
  syntax:
    content: public abstract string Expression { get; }
    return:
      type: System.String
      description: "計算資料行的運算式做為字串。"
  overload: System.Data.Linq.Mapping.MetaDataMember.Expression*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.IsAssociation
  id: IsAssociation
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: IsAssociation
  nameWithType: MetaDataMember.IsAssociation
  fullName: System.Data.Linq.Mapping.MetaDataMember.IsAssociation
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得這個成員會定義一個關聯的關聯。"
  syntax:
    content: public abstract bool IsAssociation { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個成員會定義一個關聯的關聯。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Linq.Mapping.MetaDataMember.IsAssociation*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.IsDbGenerated
  id: IsDbGenerated
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: IsDbGenerated
  nameWithType: MetaDataMember.IsDbGenerated
  fullName: System.Data.Linq.Mapping.MetaDataMember.IsDbGenerated
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得是否自動產生這個成員的資料庫。"
  remarks: "自動產生的成員會插入對應的資料列之後，立即同步處理。 插入觸發程序產生的金鑰不支援值。"
  syntax:
    content: public abstract bool IsDbGenerated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個成員會自動產生的資料庫。否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Linq.Mapping.MetaDataMember.IsDbGenerated*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.IsDeclaredBy(System.Data.Linq.Mapping.MetaType)
  id: IsDeclaredBy(System.Data.Linq.Mapping.MetaType)
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: IsDeclaredBy(MetaType)
  nameWithType: MetaDataMember.IsDeclaredBy(MetaType)
  fullName: System.Data.Linq.Mapping.MetaDataMember.IsDeclaredBy(MetaType)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "指定是否由指定類型所宣告這個成員。"
  syntax:
    content: public abstract bool IsDeclaredBy (System.Data.Linq.Mapping.MetaType type);
    parameters:
    - id: type
      type: System.Data.Linq.Mapping.MetaType
      description: "要檢查的類型。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>這個成員由指定類型宣告; 如果否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Linq.Mapping.MetaDataMember.IsDeclaredBy*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.IsDeferred
  id: IsDeferred
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: IsDeferred
  nameWithType: MetaDataMember.IsDeferred
  fullName: System.Data.Linq.Mapping.MetaDataMember.IsDeferred
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得是否載入延後的基礎這個成員的預設行為。"
  syntax:
    content: public abstract bool IsDeferred { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個成員，已載入延遲為基礎的預設值;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Linq.Mapping.MetaDataMember.IsDeferred*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.IsDiscriminator
  id: IsDiscriminator
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: IsDiscriminator
  nameWithType: MetaDataMember.IsDiscriminator
  fullName: System.Data.Linq.Mapping.MetaDataMember.IsDiscriminator
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得此成員是否表示繼承鑑別子。"
  remarks: "這個屬性可以是`true`最多一個成員的最上方的對應類別階層中的。"
  syntax:
    content: public abstract bool IsDiscriminator { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此成員表示繼承鑑別子。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Linq.Mapping.MetaDataMember.IsDiscriminator*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.IsPersistent
  id: IsPersistent
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: IsPersistent
  nameWithType: MetaDataMember.IsPersistent
  fullName: System.Data.Linq.Mapping.MetaDataMember.IsPersistent
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得這個成員會對應至資料行 （或條件約束）。"
  remarks: "類別可能會有持續性和非持續性的成員的組合。 持續性的成員對應時未對應的非持續性的成員。 對應的類別必須至少一個持續性的成員。"
  syntax:
    content: public abstract bool IsPersistent { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個成員會對應到資料行中 （或條件約束）。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Linq.Mapping.MetaDataMember.IsPersistent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.IsPrimaryKey
  id: IsPrimaryKey
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: IsPrimaryKey
  nameWithType: MetaDataMember.IsPrimaryKey
  fullName: System.Data.Linq.Mapping.MetaDataMember.IsPrimaryKey
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得這個成員是類型的身分識別的一部分。"
  remarks: "如果這個屬性是`true`，該類別的成員代表資料表的唯一索引鍵一部分的資料行。 類別的多個成員可以將此屬性設定為`true`相關聯的資料行的複合索引鍵。 將實體類別，至少一個成員必須有這個屬性，而且應該對應至主索引鍵或唯一索引鍵對應的資料表或檢視表中。 否則，LINQ to SQL 會考慮為唯讀，以將變更提交至資料庫類別的執行個體。       IsPrimaryKey 用來識別資料行不必是主索引鍵。 它們只是代表一組可唯一識別實體。 常見的替代項目包含叢集索引資料行或其他唯一的索引鍵資料行。"
  syntax:
    content: public abstract bool IsPrimaryKey { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個成員是類型的身分識別; 的一部分否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Linq.Mapping.MetaDataMember.IsPrimaryKey*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.IsVersion
  id: IsVersion
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: IsVersion
  nameWithType: MetaDataMember.IsVersion
  fullName: System.Data.Linq.Mapping.MetaDataMember.IsVersion
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得此成員是否表示資料列版本或時間戳記。"
  remarks: "版本號碼會遞增，並且每次更新相關聯的資料列時，會更新時間戳記資料行。"
  syntax:
    content: public abstract bool IsVersion { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此成員表示的資料列版本或時間戳記。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Linq.Mapping.MetaDataMember.IsVersion*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.LoadMethod
  id: LoadMethod
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: LoadMethod
  nameWithType: MetaDataMember.LoadMethod
  fullName: System.Data.Linq.Mapping.MetaDataMember.LoadMethod
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得<xref href=&quot;System.Data.Linq.DataContext&quot;></xref>用來執行載入作業的方法。"
  syntax:
    content: public abstract System.Reflection.MethodInfo LoadMethod { get; }
    return:
      type: System.Reflection.MethodInfo
      description: "為<xref:System.Reflection.MethodInfo>.</xref:System.Reflection.MethodInfo> load 方法"
  overload: System.Data.Linq.Mapping.MetaDataMember.LoadMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.MappedName
  id: MappedName
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: MappedName
  nameWithType: MetaDataMember.MappedName
  fullName: System.Data.Linq.Mapping.MetaDataMember.MappedName
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得資料庫中的資料行 （或條件約束） 的名稱。"
  syntax:
    content: public abstract string MappedName { get; }
    return:
      type: System.String
      description: "資料行 （或條件約束），做為字串的名稱。"
  overload: System.Data.Linq.Mapping.MetaDataMember.MappedName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.Member
  id: Member
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: Member
  nameWithType: MetaDataMember.Member
  fullName: System.Data.Linq.Mapping.MetaDataMember.Member
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得基礎<xref:System.Reflection.MemberInfo>.</xref:System.Reflection.MemberInfo>"
  syntax:
    content: public abstract System.Reflection.MemberInfo Member { get; }
    return:
      type: System.Reflection.MemberInfo
      description: "成員屬性和中繼資料資訊。"
  overload: System.Data.Linq.Mapping.MetaDataMember.Member*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.MemberAccessor
  id: MemberAccessor
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: MemberAccessor
  nameWithType: MetaDataMember.MemberAccessor
  fullName: System.Data.Linq.Mapping.MetaDataMember.MemberAccessor
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得用來取得或設定值，這個成員的存取子。"
  syntax:
    content: public abstract System.Data.Linq.Mapping.MetaAccessor MemberAccessor { get; }
    return:
      type: System.Data.Linq.Mapping.MetaAccessor
      description: "存取子。"
  overload: System.Data.Linq.Mapping.MetaDataMember.MemberAccessor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.Name
  id: Name
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: Name
  nameWithType: MetaDataMember.Name
  fullName: System.Data.Linq.Mapping.MetaDataMember.Name
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得的成員，與相同名稱<xref:System.Reflection.MemberInfo>名稱。</xref:System.Reflection.MemberInfo>"
  syntax:
    content: public abstract string Name { get; }
    return:
      type: System.String
      description: "名稱與相同<xref:System.Reflection.MemberInfo>名稱。</xref:System.Reflection.MemberInfo>"
  overload: System.Data.Linq.Mapping.MetaDataMember.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.Ordinal
  id: Ordinal
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: Ordinal
  nameWithType: MetaDataMember.Ordinal
  fullName: System.Data.Linq.Mapping.MetaDataMember.Ordinal
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得這個成員的查詢結果的預設版面配置中的序數位置。"
  syntax:
    content: public abstract int Ordinal { get; }
    return:
      type: System.Int32
      description: "序數位置。"
  overload: System.Data.Linq.Mapping.MetaDataMember.Ordinal*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.StorageAccessor
  id: StorageAccessor
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: StorageAccessor
  nameWithType: MetaDataMember.StorageAccessor
  fullName: System.Data.Linq.Mapping.MetaDataMember.StorageAccessor
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得用來取得或設定儲存體值，這個成員的存取子。"
  syntax:
    content: public abstract System.Data.Linq.Mapping.MetaAccessor StorageAccessor { get; }
    return:
      type: System.Data.Linq.Mapping.MetaAccessor
      description: "儲存值，這個成員的存取子。"
  overload: System.Data.Linq.Mapping.MetaDataMember.StorageAccessor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.StorageMember
  id: StorageMember
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: StorageMember
  nameWithType: MetaDataMember.StorageMember
  fullName: System.Data.Linq.Mapping.MetaDataMember.StorageMember
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得儲存的資料，這個成員的成員。"
  syntax:
    content: public abstract System.Reflection.MemberInfo StorageMember { get; }
    return:
      type: System.Reflection.MemberInfo
      description: "儲存成員。"
  overload: System.Data.Linq.Mapping.MetaDataMember.StorageMember*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.Type
  id: Type
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: Type
  nameWithType: MetaDataMember.Type
  fullName: System.Data.Linq.Mapping.MetaDataMember.Type
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得這個成員的型別。"
  syntax:
    content: public abstract Type Type { get; }
    return:
      type: System.Type
      description: "目前成員的型別。"
  overload: System.Data.Linq.Mapping.MetaDataMember.Type*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaDataMember.UpdateCheck
  id: UpdateCheck
  parent: System.Data.Linq.Mapping.MetaDataMember
  langs:
  - csharp
  name: UpdateCheck
  nameWithType: MetaDataMember.UpdateCheck
  fullName: System.Data.Linq.Mapping.MetaDataMember.UpdateCheck
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得這個成員的開放式並行存取檢查原則。"
  remarks: "如果類別沒有版本成員 (<xref:System.Data.Linq.Mapping.MetaDataMember.IsVersion%2A>設`true`)，偵測是藉由比較原始成員值與目前的資料庫狀態。</xref:System.Data.Linq.Mapping.MetaDataMember.IsVersion%2A>       UpdateCheck 屬性會決定如何 LINQ to SQL 實作開放式並行存取下的衝突偵測。 這些成員具有此屬性設定為<xref:System.Data.Linq.Mapping.UpdateCheck>或<xref:System.Data.Linq.Mapping.UpdateCheck>衝突偵測期間都會列入考慮。</xref:System.Data.Linq.Mapping.UpdateCheck> </xref:System.Data.Linq.Mapping.UpdateCheck>"
  syntax:
    content: public abstract System.Data.Linq.Mapping.UpdateCheck UpdateCheck { get; }
    return:
      type: System.Data.Linq.Mapping.UpdateCheck
      description: "An <xref href=&quot;System.Data.Linq.Mapping.UpdateCheck&quot;></xref> enum."
  overload: System.Data.Linq.Mapping.MetaDataMember.UpdateCheck*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Linq.Mapping.MetaDataMember.#ctor
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: MetaDataMember()
  nameWithType: MetaDataMember.MetaDataMember()
  fullName: System.Data.Linq.Mapping.MetaDataMember.MetaDataMember()
- uid: System.Data.Linq.Mapping.MetaDataMember.Association
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: Association
  nameWithType: MetaDataMember.Association
  fullName: System.Data.Linq.Mapping.MetaDataMember.Association
- uid: System.Data.Linq.Mapping.MetaAssociation
  parent: System.Data.Linq.Mapping
  isExternal: false
  name: MetaAssociation
  nameWithType: MetaAssociation
  fullName: System.Data.Linq.Mapping.MetaAssociation
- uid: System.Data.Linq.Mapping.MetaDataMember.AutoSync
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: AutoSync
  nameWithType: MetaDataMember.AutoSync
  fullName: System.Data.Linq.Mapping.MetaDataMember.AutoSync
- uid: System.Data.Linq.Mapping.AutoSync
  parent: System.Data.Linq.Mapping
  isExternal: false
  name: AutoSync
  nameWithType: AutoSync
  fullName: System.Data.Linq.Mapping.AutoSync
- uid: System.Data.Linq.Mapping.MetaDataMember.CanBeNull
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: CanBeNull
  nameWithType: MetaDataMember.CanBeNull
  fullName: System.Data.Linq.Mapping.MetaDataMember.CanBeNull
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Linq.Mapping.MetaDataMember.DbType
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: DbType
  nameWithType: MetaDataMember.DbType
  fullName: System.Data.Linq.Mapping.MetaDataMember.DbType
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Linq.Mapping.MetaDataMember.DeclaringType
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: DeclaringType
  nameWithType: MetaDataMember.DeclaringType
  fullName: System.Data.Linq.Mapping.MetaDataMember.DeclaringType
- uid: System.Data.Linq.Mapping.MetaType
  parent: System.Data.Linq.Mapping
  isExternal: false
  name: MetaType
  nameWithType: MetaType
  fullName: System.Data.Linq.Mapping.MetaType
- uid: System.Data.Linq.Mapping.MetaDataMember.DeferredSourceAccessor
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: DeferredSourceAccessor
  nameWithType: MetaDataMember.DeferredSourceAccessor
  fullName: System.Data.Linq.Mapping.MetaDataMember.DeferredSourceAccessor
- uid: System.Data.Linq.Mapping.MetaAccessor
  parent: System.Data.Linq.Mapping
  isExternal: false
  name: MetaAccessor
  nameWithType: MetaAccessor
  fullName: System.Data.Linq.Mapping.MetaAccessor
- uid: System.Data.Linq.Mapping.MetaDataMember.DeferredValueAccessor
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: DeferredValueAccessor
  nameWithType: MetaDataMember.DeferredValueAccessor
  fullName: System.Data.Linq.Mapping.MetaDataMember.DeferredValueAccessor
- uid: System.Data.Linq.Mapping.MetaDataMember.Expression
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: Expression
  nameWithType: MetaDataMember.Expression
  fullName: System.Data.Linq.Mapping.MetaDataMember.Expression
- uid: System.Data.Linq.Mapping.MetaDataMember.IsAssociation
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: IsAssociation
  nameWithType: MetaDataMember.IsAssociation
  fullName: System.Data.Linq.Mapping.MetaDataMember.IsAssociation
- uid: System.Data.Linq.Mapping.MetaDataMember.IsDbGenerated
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: IsDbGenerated
  nameWithType: MetaDataMember.IsDbGenerated
  fullName: System.Data.Linq.Mapping.MetaDataMember.IsDbGenerated
- uid: System.Data.Linq.Mapping.MetaDataMember.IsDeclaredBy(System.Data.Linq.Mapping.MetaType)
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: IsDeclaredBy(MetaType)
  nameWithType: MetaDataMember.IsDeclaredBy(MetaType)
  fullName: System.Data.Linq.Mapping.MetaDataMember.IsDeclaredBy(MetaType)
- uid: System.Data.Linq.Mapping.MetaDataMember.IsDeferred
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: IsDeferred
  nameWithType: MetaDataMember.IsDeferred
  fullName: System.Data.Linq.Mapping.MetaDataMember.IsDeferred
- uid: System.Data.Linq.Mapping.MetaDataMember.IsDiscriminator
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: IsDiscriminator
  nameWithType: MetaDataMember.IsDiscriminator
  fullName: System.Data.Linq.Mapping.MetaDataMember.IsDiscriminator
- uid: System.Data.Linq.Mapping.MetaDataMember.IsPersistent
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: IsPersistent
  nameWithType: MetaDataMember.IsPersistent
  fullName: System.Data.Linq.Mapping.MetaDataMember.IsPersistent
- uid: System.Data.Linq.Mapping.MetaDataMember.IsPrimaryKey
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: IsPrimaryKey
  nameWithType: MetaDataMember.IsPrimaryKey
  fullName: System.Data.Linq.Mapping.MetaDataMember.IsPrimaryKey
- uid: System.Data.Linq.Mapping.MetaDataMember.IsVersion
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: IsVersion
  nameWithType: MetaDataMember.IsVersion
  fullName: System.Data.Linq.Mapping.MetaDataMember.IsVersion
- uid: System.Data.Linq.Mapping.MetaDataMember.LoadMethod
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: LoadMethod
  nameWithType: MetaDataMember.LoadMethod
  fullName: System.Data.Linq.Mapping.MetaDataMember.LoadMethod
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Data.Linq.Mapping.MetaDataMember.MappedName
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: MappedName
  nameWithType: MetaDataMember.MappedName
  fullName: System.Data.Linq.Mapping.MetaDataMember.MappedName
- uid: System.Data.Linq.Mapping.MetaDataMember.Member
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: Member
  nameWithType: MetaDataMember.Member
  fullName: System.Data.Linq.Mapping.MetaDataMember.Member
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Data.Linq.Mapping.MetaDataMember.MemberAccessor
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: MemberAccessor
  nameWithType: MetaDataMember.MemberAccessor
  fullName: System.Data.Linq.Mapping.MetaDataMember.MemberAccessor
- uid: System.Data.Linq.Mapping.MetaDataMember.Name
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: Name
  nameWithType: MetaDataMember.Name
  fullName: System.Data.Linq.Mapping.MetaDataMember.Name
- uid: System.Data.Linq.Mapping.MetaDataMember.Ordinal
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: Ordinal
  nameWithType: MetaDataMember.Ordinal
  fullName: System.Data.Linq.Mapping.MetaDataMember.Ordinal
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.Linq.Mapping.MetaDataMember.StorageAccessor
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: StorageAccessor
  nameWithType: MetaDataMember.StorageAccessor
  fullName: System.Data.Linq.Mapping.MetaDataMember.StorageAccessor
- uid: System.Data.Linq.Mapping.MetaDataMember.StorageMember
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: StorageMember
  nameWithType: MetaDataMember.StorageMember
  fullName: System.Data.Linq.Mapping.MetaDataMember.StorageMember
- uid: System.Data.Linq.Mapping.MetaDataMember.Type
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: Type
  nameWithType: MetaDataMember.Type
  fullName: System.Data.Linq.Mapping.MetaDataMember.Type
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.Linq.Mapping.MetaDataMember.UpdateCheck
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: UpdateCheck
  nameWithType: MetaDataMember.UpdateCheck
  fullName: System.Data.Linq.Mapping.MetaDataMember.UpdateCheck
- uid: System.Data.Linq.Mapping.UpdateCheck
  parent: System.Data.Linq.Mapping
  isExternal: false
  name: UpdateCheck
  nameWithType: UpdateCheck
  fullName: System.Data.Linq.Mapping.UpdateCheck
- uid: System.Data.Linq.Mapping.MetaDataMember.#ctor*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: MetaDataMember
  nameWithType: MetaDataMember.MetaDataMember
- uid: System.Data.Linq.Mapping.MetaDataMember.Association*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: Association
  nameWithType: MetaDataMember.Association
- uid: System.Data.Linq.Mapping.MetaDataMember.AutoSync*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: AutoSync
  nameWithType: MetaDataMember.AutoSync
- uid: System.Data.Linq.Mapping.MetaDataMember.CanBeNull*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: CanBeNull
  nameWithType: MetaDataMember.CanBeNull
- uid: System.Data.Linq.Mapping.MetaDataMember.DbType*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: DbType
  nameWithType: MetaDataMember.DbType
- uid: System.Data.Linq.Mapping.MetaDataMember.DeclaringType*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: DeclaringType
  nameWithType: MetaDataMember.DeclaringType
- uid: System.Data.Linq.Mapping.MetaDataMember.DeferredSourceAccessor*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: DeferredSourceAccessor
  nameWithType: MetaDataMember.DeferredSourceAccessor
- uid: System.Data.Linq.Mapping.MetaDataMember.DeferredValueAccessor*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: DeferredValueAccessor
  nameWithType: MetaDataMember.DeferredValueAccessor
- uid: System.Data.Linq.Mapping.MetaDataMember.Expression*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: Expression
  nameWithType: MetaDataMember.Expression
- uid: System.Data.Linq.Mapping.MetaDataMember.IsAssociation*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: IsAssociation
  nameWithType: MetaDataMember.IsAssociation
- uid: System.Data.Linq.Mapping.MetaDataMember.IsDbGenerated*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: IsDbGenerated
  nameWithType: MetaDataMember.IsDbGenerated
- uid: System.Data.Linq.Mapping.MetaDataMember.IsDeclaredBy*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: IsDeclaredBy
  nameWithType: MetaDataMember.IsDeclaredBy
- uid: System.Data.Linq.Mapping.MetaDataMember.IsDeferred*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: IsDeferred
  nameWithType: MetaDataMember.IsDeferred
- uid: System.Data.Linq.Mapping.MetaDataMember.IsDiscriminator*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: IsDiscriminator
  nameWithType: MetaDataMember.IsDiscriminator
- uid: System.Data.Linq.Mapping.MetaDataMember.IsPersistent*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: IsPersistent
  nameWithType: MetaDataMember.IsPersistent
- uid: System.Data.Linq.Mapping.MetaDataMember.IsPrimaryKey*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: IsPrimaryKey
  nameWithType: MetaDataMember.IsPrimaryKey
- uid: System.Data.Linq.Mapping.MetaDataMember.IsVersion*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: IsVersion
  nameWithType: MetaDataMember.IsVersion
- uid: System.Data.Linq.Mapping.MetaDataMember.LoadMethod*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: LoadMethod
  nameWithType: MetaDataMember.LoadMethod
- uid: System.Data.Linq.Mapping.MetaDataMember.MappedName*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: MappedName
  nameWithType: MetaDataMember.MappedName
- uid: System.Data.Linq.Mapping.MetaDataMember.Member*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: Member
  nameWithType: MetaDataMember.Member
- uid: System.Data.Linq.Mapping.MetaDataMember.MemberAccessor*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: MemberAccessor
  nameWithType: MetaDataMember.MemberAccessor
- uid: System.Data.Linq.Mapping.MetaDataMember.Name*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: Name
  nameWithType: MetaDataMember.Name
- uid: System.Data.Linq.Mapping.MetaDataMember.Ordinal*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: Ordinal
  nameWithType: MetaDataMember.Ordinal
- uid: System.Data.Linq.Mapping.MetaDataMember.StorageAccessor*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: StorageAccessor
  nameWithType: MetaDataMember.StorageAccessor
- uid: System.Data.Linq.Mapping.MetaDataMember.StorageMember*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: StorageMember
  nameWithType: MetaDataMember.StorageMember
- uid: System.Data.Linq.Mapping.MetaDataMember.Type*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: Type
  nameWithType: MetaDataMember.Type
- uid: System.Data.Linq.Mapping.MetaDataMember.UpdateCheck*
  parent: System.Data.Linq.Mapping.MetaDataMember
  isExternal: false
  name: UpdateCheck
  nameWithType: MetaDataMember.UpdateCheck
