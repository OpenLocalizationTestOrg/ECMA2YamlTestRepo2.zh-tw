### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Persistence.PersistenceProvider
  id: PersistenceProvider
  children:
  - System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)
  - System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)
  - System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)
  - System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)
  - System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)
  - System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)
  - System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)
  - System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)
  - System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)
  - System.ServiceModel.Persistence.PersistenceProvider.Id
  - System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)
  - System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)
  - System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)
  langs:
  - csharp
  name: PersistenceProvider
  nameWithType: PersistenceProvider
  fullName: System.ServiceModel.Persistence.PersistenceProvider
  type: Class
  summary: "從中衍生所有長期服務持續性提供者的抽象基底類別。"
  remarks: "使用者可以建立衍生自這個類型建立使用自訂持續性存放區，例如協力廠商資料庫、 檔案系統或從遠端存取的儲存系統的長期服務持續性提供者的類別。 若要建立使用 Microsoft SQL Server 持續性存放區作為此類型的系統提供實作，請參閱<xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory>.</xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory>      > [!NOTE] > 時建立持續性提供者實作，請務必維護新的提供者方法 （例如<xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A>.</xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A>執行緒的原始身分識別 否則安全性漏洞時無法建立，因為作業可能會執行在錯誤的身分識別。"
  example:
  - For an implementation of this type that uses the file system as a persistence store, see the FilePersistenceProviderFactory.cs file in the DurableServiceFactory SDK sample.
  syntax:
    content: >-
      [System.Obsolete("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]

      public abstract class PersistenceProvider : System.ServiceModel.Channels.CommunicationObject
  inheritance:
  - System.ServiceModel.Channels.CommunicationObject
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)
  id: '#ctor(System.Guid)'
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: PersistenceProvider(Guid)
  nameWithType: PersistenceProvider.PersistenceProvider(Guid)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.PersistenceProvider(Guid)
  type: Constructor
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "在衍生類別中實作時，初始化新執行個體<xref href=&quot;System.ServiceModel.Persistence.PersistenceProvider&quot;></xref>類別。"
  remarks: ''
  example:
  - "The following code demonstrates how to use the <xref:System.ServiceModel.Persistence.PersistenceProvider> constructor. This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]the DurableServiceFactory SDK sample.  \n  \n [!code-cs[PersistenceProvider#0](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#0)]"
  syntax:
    content: protected PersistenceProvider (Guid id);
    parameters:
    - id: id
      type: System.Guid
      description: "已儲存的服務狀態資料的唯一識別碼。"
  overload: System.ServiceModel.Persistence.PersistenceProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: BeginCreate(Object,TimeSpan,AsyncCallback,Object)
  nameWithType: PersistenceProvider.BeginCreate(Object,TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(Object,TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "在衍生類別中實作時，代表 「 建立 」 階段的開始。 當服務執行個體記錄首次在持續性存放區中建立時，就會發生 「 建立 」 階段。"
  remarks: ''
  example:
  - "The following code demonstrates how to implement the BeginCreate method.  \n  \n [!code-cs[PersistenceProvider#14](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#14)]"
  syntax:
    content: public abstract IAsyncResult BeginCreate (object instance, TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: instance
      type: System.Object
      description: "實際的執行個體的狀態。"
    - id: timeout
      type: System.TimeSpan
      description: "一段時間之後的持續性提供者會中止這次嘗試。"
    - id: callback
      type: System.AsyncCallback
      description: "要在作業完成時呼叫的方法。"
    - id: state
      type: System.Object
      description: "使用者提供的物件，可區別這個特定非同步作業與其他作業。"
    return:
      type: System.IAsyncResult
      description: "BeginCreate 非同步方法呼叫的狀態。"
  overload: System.ServiceModel.Persistence.PersistenceProvider.BeginCreate*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: BeginDelete(Object,TimeSpan,AsyncCallback,Object)
  nameWithType: PersistenceProvider.BeginDelete(Object,TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(Object,TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "在衍生類別中實作時，代表 「 刪除 」 階段的開始。 從持續性存放區永久刪除服務狀態資料時，就會發生 「 刪除 」 階段。"
  remarks: ''
  example:
  - "The following code demonstrates how to implement the `BeginDelete` method. This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]the DurableServiceFactory SDK sample.  \n  \n [!code-cs[PersistenceProvider#6](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#6)]"
  syntax:
    content: public abstract IAsyncResult BeginDelete (object instance, TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: instance
      type: System.Object
      description: "實際的執行個體的狀態。"
    - id: timeout
      type: System.TimeSpan
      description: "一段時間之後的持續性提供者會中止這次嘗試。"
    - id: callback
      type: System.AsyncCallback
      description: "要在作業完成時呼叫的方法。"
    - id: state
      type: System.Object
      description: "使用者提供的物件，可區別這個特定非同步作業與其他作業。"
    return:
      type: System.IAsyncResult
      description: "BeginDelete 非同步方法呼叫的狀態。"
  overload: System.ServiceModel.Persistence.PersistenceProvider.BeginDelete*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: BeginLoad(TimeSpan,AsyncCallback,Object)
  nameWithType: PersistenceProvider.BeginLoad(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "在衍生類別中實作時，代表 「 載入 」 階段的開始。 狀態資料載入至持續性存放區從持續性提供者時，就會發生 「 載入 」 階段。"
  remarks: ''
  example:
  - "The following code demonstrates how to implement the `BeginLoad` method. This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]the DurableServiceFactory SDK sample.  \n  \n [!code-cs[PersistenceProvider#7](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#7)]"
  syntax:
    content: public abstract IAsyncResult BeginLoad (TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "一段時間之後的持續性提供者會中止這次嘗試。"
    - id: callback
      type: System.AsyncCallback
      description: "要在作業完成時呼叫的方法。"
    - id: state
      type: System.Object
      description: "使用者提供的物件，可區別這個特定非同步作業與其他作業。"
    return:
      type: System.IAsyncResult
      description: "BeginLoad 非同步方法呼叫的狀態。"
  overload: System.ServiceModel.Persistence.PersistenceProvider.BeginLoad*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)
  id: BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: BeginLoadIfChanged(TimeSpan,Object,AsyncCallback,Object)
  nameWithType: PersistenceProvider.BeginLoadIfChanged(TimeSpan,Object,AsyncCallback,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(TimeSpan,Object,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "在衍生類別中實作時，代表 LoadIfChanged 階段的開始。 狀態資料載入至持續性存放區中，從持續性提供者和已變更的持續性存放區中的狀態資料時，就會發生 LoadIfChanged 階段。"
  remarks: ''
  example:
  - "The following code demonstrates how to implement the BeginLoadIfChanged method.  \n  \n [!code-cs[PersistenceProvider#11](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#11)]"
  syntax:
    content: public virtual IAsyncResult BeginLoadIfChanged (TimeSpan timeout, object instanceToken, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "一段時間之後的持續性提供者會中止這次嘗試。"
    - id: instanceToken
      type: System.Object
      description: "先前傳回的權杖<> *> 或<> *>，代表呼叫端所持有的目前狀態。"
    - id: callback
      type: System.AsyncCallback
      description: "要在作業完成時呼叫的方法。"
    - id: state
      type: System.Object
      description: "使用者提供的物件，可區別這個特定非同步作業與其他作業。"
    return:
      type: System.IAsyncResult
      description: "BeginLoadIfChanged 非同步方法呼叫的狀態。"
  overload: System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: BeginUpdate(Object,TimeSpan,AsyncCallback,Object)
  nameWithType: PersistenceProvider.BeginUpdate(Object,TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(Object,TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "在衍生類別中實作時，代表 「 更新 」 階段的開始。 持續性存放區中更新服務狀態資料時，就會發生 「 更新 」 階段。"
  remarks: ''
  example:
  - "The following code demonstrates how to implement the BeginUpdate method.  \n  \n [!code-cs[PersistenceProvider#17](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#17)]"
  syntax:
    content: public abstract IAsyncResult BeginUpdate (object instance, TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: instance
      type: System.Object
      description: "實際的執行個體的狀態。"
    - id: timeout
      type: System.TimeSpan
      description: "一段時間之後的持續性提供者會中止這次嘗試。"
    - id: callback
      type: System.AsyncCallback
      description: "要在作業完成時呼叫的方法。"
    - id: state
      type: System.Object
      description: "使用者提供的物件，可區別這個特定非同步作業與其他作業。"
    return:
      type: System.IAsyncResult
      description: "BeginUpdate 非同步方法呼叫的狀態。"
  overload: System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)
  id: Create(System.Object,System.TimeSpan)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: Create(Object,TimeSpan)
  nameWithType: PersistenceProvider.Create(Object,TimeSpan)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.Create(Object,TimeSpan)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "在衍生類別中實作時，會建立持續性存放區服務狀態記錄。"
  remarks: ''
  example:
  - "The following code demonstrates how to implement the Create method.  \n  \n [!code-cs[PersistenceProvider#15](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#15)]"
  syntax:
    content: public abstract object Create (object instance, TimeSpan timeout);
    parameters:
    - id: instance
      type: System.Object
      description: "實際的執行個體的狀態。"
    - id: timeout
      type: System.TimeSpan
      description: "一段時間之後的持續性提供者會中止這次嘗試。"
    return:
      type: System.Object
      description: "對應至剛儲存之狀態執行個體的語彙基元。 這可以傳遞至<xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged*>以判斷建立 」 呼叫時是否持續性存放區中的狀態不同狀態。</xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged*>"
  overload: System.ServiceModel.Persistence.PersistenceProvider.Create*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)
  id: Delete(System.Object,System.TimeSpan)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: Delete(Object,TimeSpan)
  nameWithType: PersistenceProvider.Delete(Object,TimeSpan)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.Delete(Object,TimeSpan)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "在衍生類別中實作時，永久刪除服務狀態資訊從持續性存放區。"
  remarks: ''
  example:
  - "The following code demonstrates how to implement the Delete method. This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]the DurableServiceFactory SDK sample.  \n  \n [!code-cs[PersistenceProvider#9](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#9)]"
  syntax:
    content: public abstract void Delete (object instance, TimeSpan timeout);
    parameters:
    - id: instance
      type: System.Object
      description: "實際的執行個體的狀態。"
    - id: timeout
      type: System.TimeSpan
      description: "一段時間之後的持續性提供者會中止這次嘗試。"
  overload: System.ServiceModel.Persistence.PersistenceProvider.Delete*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)
  id: EndCreate(System.IAsyncResult)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: EndCreate(IAsyncResult)
  nameWithType: PersistenceProvider.EndCreate(IAsyncResult)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.EndCreate(IAsyncResult)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "在衍生類別中實作時，代表 「 建立 」 階段的結尾。 服務狀態記錄首次在持續性存放區中建立時，就會發生 「 建立 」 階段。"
  remarks: ''
  example:
  - "The following code demonstrates how to implement the EndCreate method.  \n  \n [!code-cs[PersistenceProvider#16](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#16)]"
  syntax:
    content: public abstract object EndCreate (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "運算結果的參考。"
    return:
      type: System.Object
      description: "對應至剛儲存之狀態執行個體的語彙基元。 這可以傳遞至<xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged*>以判斷建立 」 呼叫時是否持續性存放區中的狀態不同狀態。</xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged*>"
  overload: System.ServiceModel.Persistence.PersistenceProvider.EndCreate*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)
  id: EndDelete(System.IAsyncResult)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: EndDelete(IAsyncResult)
  nameWithType: PersistenceProvider.EndDelete(IAsyncResult)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.EndDelete(IAsyncResult)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "在衍生類別中實作時，代表 「 刪除 」 階段的結尾。 狀態資料從持續性存放區永久刪除時，就會發生 「 刪除 」 階段。"
  remarks: ''
  example:
  - "The following code demonstrates how to implement the EndDelete method. This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file. For more information, see the DurableServiceFactory SDK sample.  \n  \n [!code-cs[PersistenceProvider#5](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#5)]"
  syntax:
    content: public abstract void EndDelete (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "運算結果的參考。"
  overload: System.ServiceModel.Persistence.PersistenceProvider.EndDelete*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)
  id: EndLoad(System.IAsyncResult)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: EndLoad(IAsyncResult)
  nameWithType: PersistenceProvider.EndLoad(IAsyncResult)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.EndLoad(IAsyncResult)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "在衍生類別中實作時，代表 「 載入 」 階段的結尾。 狀態資料載入至持續性存放區從持續性提供者時，就會發生 「 載入 」 階段。"
  remarks: ''
  example:
  - "The following code demonstrates how to use the `EndLoad` method. This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]the DurableServiceFactory SDK sample.  \n  \n [!code-cs[PersistenceProvider#1](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#1)]"
  syntax:
    content: public abstract object EndLoad (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "運算結果的參考。"
    return:
      type: System.Object
      description: "服務狀態資訊。"
  overload: System.ServiceModel.Persistence.PersistenceProvider.EndLoad*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)
  id: EndLoadIfChanged(System.IAsyncResult,System.Object@)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: EndLoadIfChanged(IAsyncResult,Object)
  nameWithType: PersistenceProvider.EndLoadIfChanged(IAsyncResult,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(IAsyncResult,Object)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "在衍生類別中實作時，代表 LoadIfChanged 階段的結束。 狀態資料載入至持續性存放區中，從持續性提供者和已變更的持續性存放區中的狀態資料時，就會發生 LoadIfChanged 階段。"
  remarks: ''
  example:
  - "The following code demonstrates how to implement the EndLoadIfChanged method.  \n  \n [!code-cs[PersistenceProvider#12](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#12)]"
  syntax:
    content: public virtual bool EndLoadIfChanged (IAsyncResult result, out object instance);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "運算結果的參考。"
    - id: instance
      type: System.Object
      description: "實際的執行個體的狀態。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果執行個體<xref uid=&quot;langword_csharp_out&quot; name=&quot;out&quot; href=&quot;&quot;></xref>從持續性存放區; 參數設定的最新的複本<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果本機快取的狀態已經是最新狀態。"
  overload: System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)
  id: EndUpdate(System.IAsyncResult)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: EndUpdate(IAsyncResult)
  nameWithType: PersistenceProvider.EndUpdate(IAsyncResult)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(IAsyncResult)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "代表 「 更新 」 階段結束。 在持續性存放區中更新服務狀態記錄時，就會發生 「 更新 」 階段。"
  remarks: ''
  example:
  - "The following code demonstrates how to implement the EndUpdate method.  \n  \n [!code-cs[PersistenceProvider#19](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#19)]"
  syntax:
    content: public abstract object EndUpdate (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "運算結果的參考。"
    return:
      type: System.Object
      description: "對應至剛儲存之狀態執行個體的語彙基元。 這可以傳遞至<xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged*>以判斷建立 」 呼叫時是否持續性存放區中的狀態不同狀態。</xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged*>"
  overload: System.ServiceModel.Persistence.PersistenceProvider.EndUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.Id
  id: Id
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: Id
  nameWithType: PersistenceProvider.Id
  fullName: System.ServiceModel.Persistence.PersistenceProvider.Id
  type: Property
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "代表<xref:System.Guid>與這個執行個體相關聯。</xref:System.Guid>"
  remarks: ''
  example:
  - "The following code demonstrates how to use the Id property.  \n  \n [!code-cs[PersistenceProvider#10](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#10)]"
  syntax:
    content: public Guid Id { get; }
    return:
      type: System.Guid
      description: "與這個執行個體相關聯的 GUID。"
  overload: System.ServiceModel.Persistence.PersistenceProvider.Id*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)
  id: Load(System.TimeSpan)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: Load(TimeSpan)
  nameWithType: PersistenceProvider.Load(TimeSpan)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.Load(TimeSpan)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "在衍生類別中實作時，請從持續性存放區中載入服務狀態資訊。"
  remarks: "變更載入方法中的安全性權杖，如果未還原時，保持作用中處理該訊息的其餘部分。 這表示服務作業的使用者程式碼、 透過發送器的回應訊息路徑，以及任何錯誤路徑，在執行變更的安全性內容。"
  example:
  - "The following code demonstrates how to implement the Load method. This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]the DurableServiceFactory SDK sample.  \n  \n [!code-cs[PersistenceProvider#3](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#3)]"
  syntax:
    content: public abstract object Load (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "一段時間之後的持續性提供者會中止這次嘗試。"
    return:
      type: System.Object
      description: "載入的執行個體的狀態。"
  overload: System.ServiceModel.Persistence.PersistenceProvider.Load*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)
  id: LoadIfChanged(System.TimeSpan,System.Object,System.Object@)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: LoadIfChanged(TimeSpan,Object,Object)
  nameWithType: PersistenceProvider.LoadIfChanged(TimeSpan,Object,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(TimeSpan,Object,Object)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "在衍生類別中實作時，載入服務狀態資訊從持續性存放區若該資料已變更。"
  remarks: ''
  example:
  - "The following code demonstrates how to implement the LoadIfChanged method.  \n  \n [!code-cs[PersistenceProvider#13](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#13)]"
  syntax:
    content: public virtual bool LoadIfChanged (TimeSpan timeout, object instanceToken, out object instance);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "一段時間之後的持續性提供者會中止這次嘗試。"
    - id: instanceToken
      type: System.Object
      description: "先前傳回的權杖<> *> 或<> *>，表示呼叫端所持有的目前狀態。"
    - id: instance
      type: System.Object
      description: "實際的執行個體的狀態。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> instance </code> <xref uid=&quot;langword_csharp_out&quot; name=&quot;out&quot; href=&quot;&quot;> </xref>從持續性存放區; 參數設定的最新的複本<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果本機快取的狀態已經是最新狀態。"
  overload: System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)
  id: Update(System.Object,System.TimeSpan)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: Update(Object,TimeSpan)
  nameWithType: PersistenceProvider.Update(Object,TimeSpan)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.Update(Object,TimeSpan)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "在衍生類別中實作時，更新的服務狀態記錄的持續性存放區中。"
  remarks: ''
  example:
  - "The following code demonstrates how to implement the Update method.  \n  \n [!code-cs[PersistenceProvider#18](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#18)]"
  syntax:
    content: public abstract object Update (object instance, TimeSpan timeout);
    parameters:
    - id: instance
      type: System.Object
      description: "實際的執行個體的狀態。"
    - id: timeout
      type: System.TimeSpan
      description: "一段時間之後的持續性提供者會中止這次嘗試。"
    return:
      type: System.Object
      description: "對應至剛儲存之狀態執行個體的語彙基元。 這可以傳遞至<xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged*>以判斷建立 」 呼叫時是否持續性存放區中的狀態不同狀態。</xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged*>"
  overload: System.ServiceModel.Persistence.PersistenceProvider.Update*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Channels.CommunicationObject
  isExternal: false
  name: System.ServiceModel.Channels.CommunicationObject
- uid: System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: PersistenceProvider(Guid)
  nameWithType: PersistenceProvider.PersistenceProvider(Guid)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.PersistenceProvider(Guid)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: BeginCreate(Object,TimeSpan,AsyncCallback,Object)
  nameWithType: PersistenceProvider.BeginCreate(Object,TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(Object,TimeSpan,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: BeginDelete(Object,TimeSpan,AsyncCallback,Object)
  nameWithType: PersistenceProvider.BeginDelete(Object,TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(Object,TimeSpan,AsyncCallback,Object)
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: BeginLoad(TimeSpan,AsyncCallback,Object)
  nameWithType: PersistenceProvider.BeginLoad(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(TimeSpan,AsyncCallback,Object)
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: BeginLoadIfChanged(TimeSpan,Object,AsyncCallback,Object)
  nameWithType: PersistenceProvider.BeginLoadIfChanged(TimeSpan,Object,AsyncCallback,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(TimeSpan,Object,AsyncCallback,Object)
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: BeginUpdate(Object,TimeSpan,AsyncCallback,Object)
  nameWithType: PersistenceProvider.BeginUpdate(Object,TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(Object,TimeSpan,AsyncCallback,Object)
- uid: System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: Create(Object,TimeSpan)
  nameWithType: PersistenceProvider.Create(Object,TimeSpan)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.Create(Object,TimeSpan)
- uid: System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: Delete(Object,TimeSpan)
  nameWithType: PersistenceProvider.Delete(Object,TimeSpan)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.Delete(Object,TimeSpan)
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: EndCreate(IAsyncResult)
  nameWithType: PersistenceProvider.EndCreate(IAsyncResult)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.EndCreate(IAsyncResult)
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: EndDelete(IAsyncResult)
  nameWithType: PersistenceProvider.EndDelete(IAsyncResult)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.EndDelete(IAsyncResult)
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: EndLoad(IAsyncResult)
  nameWithType: PersistenceProvider.EndLoad(IAsyncResult)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.EndLoad(IAsyncResult)
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: EndLoadIfChanged(IAsyncResult,Object)
  nameWithType: PersistenceProvider.EndLoadIfChanged(IAsyncResult,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(IAsyncResult,Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: EndUpdate(IAsyncResult)
  nameWithType: PersistenceProvider.EndUpdate(IAsyncResult)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(IAsyncResult)
- uid: System.ServiceModel.Persistence.PersistenceProvider.Id
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: Id
  nameWithType: PersistenceProvider.Id
  fullName: System.ServiceModel.Persistence.PersistenceProvider.Id
- uid: System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: Load(TimeSpan)
  nameWithType: PersistenceProvider.Load(TimeSpan)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.Load(TimeSpan)
- uid: System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: LoadIfChanged(TimeSpan,Object,Object)
  nameWithType: PersistenceProvider.LoadIfChanged(TimeSpan,Object,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(TimeSpan,Object,Object)
- uid: System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: Update(Object,TimeSpan)
  nameWithType: PersistenceProvider.Update(Object,TimeSpan)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.Update(Object,TimeSpan)
- uid: System.ServiceModel.Persistence.PersistenceProvider.#ctor*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: PersistenceProvider
  nameWithType: PersistenceProvider.PersistenceProvider
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginCreate*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: BeginCreate
  nameWithType: PersistenceProvider.BeginCreate
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginDelete*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: BeginDelete
  nameWithType: PersistenceProvider.BeginDelete
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginLoad*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: BeginLoad
  nameWithType: PersistenceProvider.BeginLoad
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: BeginLoadIfChanged
  nameWithType: PersistenceProvider.BeginLoadIfChanged
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: BeginUpdate
  nameWithType: PersistenceProvider.BeginUpdate
- uid: System.ServiceModel.Persistence.PersistenceProvider.Create*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: Create
  nameWithType: PersistenceProvider.Create
- uid: System.ServiceModel.Persistence.PersistenceProvider.Delete*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: Delete
  nameWithType: PersistenceProvider.Delete
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndCreate*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: EndCreate
  nameWithType: PersistenceProvider.EndCreate
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndDelete*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: EndDelete
  nameWithType: PersistenceProvider.EndDelete
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndLoad*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: EndLoad
  nameWithType: PersistenceProvider.EndLoad
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: EndLoadIfChanged
  nameWithType: PersistenceProvider.EndLoadIfChanged
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndUpdate*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: EndUpdate
  nameWithType: PersistenceProvider.EndUpdate
- uid: System.ServiceModel.Persistence.PersistenceProvider.Id*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: Id
  nameWithType: PersistenceProvider.Id
- uid: System.ServiceModel.Persistence.PersistenceProvider.Load*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: Load
  nameWithType: PersistenceProvider.Load
- uid: System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: LoadIfChanged
  nameWithType: PersistenceProvider.LoadIfChanged
- uid: System.ServiceModel.Persistence.PersistenceProvider.Update*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: Update
  nameWithType: PersistenceProvider.Update
