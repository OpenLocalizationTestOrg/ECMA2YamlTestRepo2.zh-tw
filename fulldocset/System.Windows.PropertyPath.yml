### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyPath
  id: PropertyPath
  children:
  - System.Windows.PropertyPath.#ctor(System.Object)
  - System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  - System.Windows.PropertyPath.Path
  - System.Windows.PropertyPath.PathParameters
  langs:
  - csharp
  name: PropertyPath
  nameWithType: PropertyPath
  fullName: System.Windows.PropertyPath
  type: Class
  summary: "實作資料結構，用以將屬性描述為路徑下的擁有者型別或另一個屬性下。 屬性路徑會用於資料物件的繫結，以及分鏡腳本與時間表的動畫。"
  remarks: "這個類別包含字串<xref:System.Windows.PropertyPath.Path%2A>，和會<xref:System.Windows.PropertyPath.PathParameters%2A>插入字串<xref:System.Windows.PropertyPath.Path%2A>.</xref:System.Windows.PropertyPath.Path%2A></xref:System.Windows.PropertyPath.PathParameters%2A>的相依性屬性的清單</xref:System.Windows.PropertyPath.Path%2A>       PropertyPath 支援兩種模式的行為︰**來源模式**描述作業所用做為來源的某些其他屬性的路徑。 這個模式由<xref:System.Windows.Data.Binding>類別，以支援資料繫結。</xref:System.Windows.Data.Binding>       **目標模式**描述的路徑會設定為目標屬性的屬性。 此模式會使用以腳本及時間表的 setter 支援動畫。       比方說，`Background.Opacity`是兩個步驟的路徑。 此路徑所示︰ 首先，尋找`Background`屬性的物件，會得到值物件，`Background`屬性設定為，，，然後取得的值`Opacity`上該物件的屬性。      <a name=&quot;xamlAttributeUsage_PropertyPath&quot;></a># # XAML 屬性使用方式```   <object property=&quot;propertyPath&quot; .../>   ``` <a name=&quot;xamlValues_PropertyPath&quot;> </a> # # XAML 值*propertyPath*評估為簡單或複雜屬性的路徑的字串。       在中設定 PropertyPath 語法[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]靈活，但是複雜，並會在個別的主題描述[PropertyPath XAML 語法](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))]

      public sealed class PropertyPath
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PropertyPath(Object)
  nameWithType: PropertyPath.PropertyPath(Object)
  fullName: System.Windows.PropertyPath.PropertyPath(Object)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.PropertyPath&quot;></xref>類別。"
  remarks: "這個建構函式有兩個完全不同的使用方式取決於是否它正在使用的繫結，或分鏡腳本目標的目標模式單一步驟的屬性路徑的來源模式屬性路徑。       如果使用這個<xref:System.Windows.PropertyPath>在來源模式下的繫結`parameter`是字串，表示屬性名稱，或可以是字串，描述中的屬性的 「 逐步執行 「 路徑[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]繫結做為來源之物件的物件模型。</xref:System.Windows.PropertyPath> 針對繫結屬性路徑識別 」 步驟&quot;的字元是句點 （.）。 也支援索引子 （包括多個索引子和型別差異） 的參考。 如需詳細資訊<xref:System.Windows.Data.Binding>，請參閱<xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>.</xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName></xref:System.Windows.Data.Binding>明確地使用字串的語法 當做來源使用的繫結的屬性不需要相依性屬性。 雙向更新繫結，如果參考的屬性必須可讀寫。 也請注意，繫結目標並沒有相依性屬性。 如需詳細資訊，請參閱[資料繫結概觀](~/add/includes/ajax-current-ext-md.md)。       如果使用這個<xref:System.Windows.PropertyPath>分鏡腳本目標的單一步驟路徑的目標模式`parameter`通常提供做為型別<xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> </xref:System.Windows.PropertyPath> 您也可以指定為<xref:System.Windows.DependencyProperty.Name%2A>。</xref:System.Windows.DependencyProperty.Name%2A>的字串 任一種評估相同的結果，因為它在內部儲存為字串。 <xref:System.Windows.DependencyProperty>會轉換成字串，以透過<xref:System.Windows.Markup.DependencyPropertyConverter>.</xref:System.Windows.Markup.DependencyPropertyConverter></xref:System.Windows.DependencyProperty>提供 <xref:System.Windows.Markup.DependencyPropertyConverter>支援限定的命名格式相依性屬性，因此您可以指定*typeName*。*propertyName*限定 PropertyPath 建構函式程式碼中相依性屬性名稱的字串。</xref:System.Windows.Markup.DependencyPropertyConverter> 相依性屬性的識別項的完整的路徑是不同的概念，比複雜的路徑。 複合路徑<xref:System.Windows.PropertyPath>改以建立<xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName>建構函式。</xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName> </xref:System.Windows.PropertyPath>"
  syntax:
    content: public PropertyPath (object parameter);
    parameters:
    - id: parameter
      type: System.Object
      description: "屬性路徑，其中描述的路徑[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]屬性，或是單一相依性屬性。"
  overload: System.Windows.PropertyPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  id: '#ctor(System.String,System.Object[])'
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PropertyPath(String,Object[])
  nameWithType: PropertyPath.PropertyPath(String,Object[])
  fullName: System.Windows.PropertyPath.PropertyPath(String,Object[])
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.PropertyPath&quot;></xref>類別，以提供的路徑的語彙基元字串和參數。"
  remarks: "此簽章通常僅用於目標模式<xref:System.Windows.PropertyPath>複雜的路徑與使用方式。</xref:System.Windows.PropertyPath>       這個建構函式支援`params`如`pathParameters`建構函式引數。 因此，您可以指定的內容`pathParameters`為一系列以逗號分隔的建構函式引數所填入的陣列，而不是無須維度陣列，並於其中填入它與`pathParameters`項目。 您指定每個項目必須是下列類型之一: <xref:System.Windows.DependencyProperty> <xref:System.Reflection.PropertyInfo>、 <xref:System.ComponentModel.PropertyDescriptor>.</xref:System.ComponentModel.PropertyDescriptor> </xref:System.Reflection.PropertyInfo> </xref:System.Windows.DependencyProperty>       如需有關參數的需求的詳細資訊，請參閱<xref:System.Windows.PropertyPath.Path%2A>和<xref:System.Windows.PropertyPath.PathParameters%2A>。</xref:System.Windows.PropertyPath.PathParameters%2A> </xref:System.Windows.PropertyPath.Path%2A>"
  syntax:
    content: public PropertyPath (string path, object[] pathParameters);
    parameters:
    - id: path
      type: System.String
      description: "字串，指定<xref:System.Windows.PropertyPath.Path*>，語彙基元化的格式。</xref:System.Windows.PropertyPath.Path*>"
    - id: pathParameters
      type: System.Object[]
      description: "設定<xref:System.Windows.PropertyPath.PathParameters*>.</xref:System.Windows.PropertyPath.PathParameters*>物件的陣列"
  overload: System.Windows.PropertyPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.Path
  id: Path
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: Path
  nameWithType: PropertyPath.Path
  fullName: System.Windows.PropertyPath.Path
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得或設定描述路徑的字串。"
  remarks: "The string contained in this property has three completely different meanings depending on whether a <xref:System.Windows.PropertyPath> is being used for a source-mode property path for a binding, for a target-mode single-step property path for a storyboard target, or for a complex path for a storyboard target.  \n  \n If using this <xref:System.Windows.PropertyPath> in source mode for a binding, Path is a string representing a property name, or can be a string that describes a \"step-through\" path to the property in the [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] object model of the object that is being used as the source for a binding. For a binding property path, the character that identifies a \"step\" is a dot (.). Indexer references (including multiple indexers, and type differentiation) are also supported. For more details on the syntax of the string as specifically used by the <xref:System.Windows.Data.Binding> object, see <xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>. A property used as a binding source need not be a dependency property. If the binding updates two-way, the property source must be read-write. Also note that the binding target does have to be a dependency property. For details, see [Data Binding Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n If using this <xref:System.Windows.PropertyPath> in target mode for a single-step path for a storyboard target, <xref:System.Windows.PropertyPath> is a string that is a *typeName*.*propertyName* qualified dependency property name string.  \n  \n If using this <xref:System.Windows.PropertyPath> for a complex path for a storyboard target, Path is a tokenized string format that describes the relationships of the various objects given in the <xref:System.Windows.PropertyPath.PathParameters%2A>.  \n  \n-   Each item in the array is specified in this format by the array index for the item enclosed in parentheses. For example, to specify the first item in the array, the string token is `(0)`.  \n  \n-   Relationships between items (\"steps\" in the path) are specified by a dot (.). The property forward of the dot is the first step in the path, the property after is the second step, and so on (you can specify steps beyond two). The last step in the chain always represents the property being animated.  \n  \n-   Items within collection properties are accessed with an indexer syntax, with the index within square brackets ([ and ]). The indexer is additive to the token representing the property. For example, the following is a two-step path, with the token combination in the first step specifying the second item from within the collection of that property: `(0)[1].(1)` . You cannot use an indexer on the last property in the chain; you cannot animate the actual collection position, you must animate a property on that object.  \n  \n The path string for a <xref:System.Windows.PropertyPath> is typically established through the constructors: the <xref:System.Windows.PropertyPath.%23ctor%28System.Object%29> signature for bindings or single-step storyboard targets, the [PropertyPath(String, Object\\[\\])](assetId:///M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])?qualifyHint=False&autoUpgrade=False) signature for multi-step storyboard targets.  \n  \n **XAML:** When you use a <xref:System.Windows.PropertyPath> to describe a property reference in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], as an attribute value, the string that you specify is first handled by a type converter (<xref:System.Windows.PropertyPathConverter>). This type converter then processes the string and based on its syntax will call one of the <xref:System.Windows.PropertyPath> constructor signatures. This indirection through the type converter handling an attribute value is generally how you use <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], rather than declaring a <xref:System.Windows.PropertyPath> object element and then applying specific values to attributes such as Path and <xref:System.Windows.PropertyPath.PathParameters%2A>. For more information, see [PropertyPath XAML Syntax](~/add/includes/ajax-current-ext-md.md).  \n  \n<a name=\"xamlTextUsage_Path\"></a>   \n## XAML Text Usage  \n Members of the <xref:System.Windows.PropertyPath> type are not typically set in a direct [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax. See Remarks."
  syntax:
    content: public string Path { get; set; }
    return:
      type: System.String
      description: "描述路徑的字串。"
  overload: System.Windows.PropertyPath.Path*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.PathParameters
  id: PathParameters
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
  fullName: System.Windows.PropertyPath.PathParameters
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得要使用該路徑參考到索引參數的參數清單。"
  remarks: "屬性<xref:System.Windows.PropertyPath>通常透過建構函式所建立。</xref:System.Windows.PropertyPath> 設定 PathParameters，<xref:System.Windows.PropertyPath.%23ctor%2A>建構函式會格外方便因為`pathParameters`建構函式引數指定為`params`，這表示您不需要建立或維度的陣列建構的。</xref:System.Windows.PropertyPath.%23ctor%2A> 您只需指定陣列的每個成員，做為額外的參數。       如果最後一個屬性的目標是<xref:System.Windows.Freezable>輸入時，值將會複製。</xref:System.Windows.Freezable> 如需詳細資訊，請參閱[概觀腳本](~/add/includes/ajax-current-ext-md.md)。       實際評估屬性鏈結是由 分鏡腳本動畫機制執行。 在<xref:System.Windows.PropertyPath>層級，不會執行驗證以確定路徑的步驟完全連接。</xref:System.Windows.PropertyPath> 比方說，您可以建構包含的屬性路徑<xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>的第一個步驟，和<xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName>做為第二個步驟。</xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName> </xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName> 但這類屬性的路徑將會失敗實際套用做為目標，如果因為筆刷類型的填滿<xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>沒有<xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName>屬性。</xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName> </xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName> 無效的屬性路徑會以無訊息模式失敗。 如需詳細資訊，請參閱[概觀腳本](../Topic/Storyboards%20Overview.md)。       **XAML:**當您使用<xref:System.Windows.PropertyPath>來描述中的屬性參考[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]，如屬性值，您所指定的字串第一次由型別轉換子 (<xref:System.Windows.PropertyPathConverter>)。</xref:System.Windows.PropertyPathConverter> </xref:System.Windows.PropertyPath> 此型別轉換子，以處理字串，然後根據它的語法會呼叫其中一種<xref:System.Windows.PropertyPath>建構函式簽章。</xref:System.Windows.PropertyPath> 處理屬性值的類型轉換子透過這個間接取值通常是您如何使用<xref:System.Windows.PropertyPath>中[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]，而不是宣告<xref:System.Windows.PropertyPath>物件項目，然後這類屬性套用特定值<xref:System.Windows.PropertyPath.Path%2A>和 PathParameters。</xref:System.Windows.PropertyPath.Path%2A> </xref:System.Windows.PropertyPath> </xref:System.Windows.PropertyPath> 如需詳細資訊，請參閱[PropertyPath XAML 語法](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;xamlTextUsage_PathParameters&quot;></a># # XAML 文字使用量成員<xref:System.Windows.PropertyPath>類型未通常設定在直接[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]語法。</xref:System.Windows.PropertyPath> 請參閱 < 備註 >。"
  syntax:
    content: public System.Collections.ObjectModel.Collection<object> PathParameters { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Object}
      description: "參數清單。"
  overload: System.Windows.PropertyPath.PathParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.PropertyPath.#ctor(System.Object)
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath(Object)
  nameWithType: PropertyPath.PropertyPath(Object)
  fullName: System.Windows.PropertyPath.PropertyPath(Object)
- uid: System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath(String,Object[])
  nameWithType: PropertyPath.PropertyPath(String,Object[])
  fullName: System.Windows.PropertyPath.PropertyPath(String,Object[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.PropertyPath.Path
  parent: System.Windows.PropertyPath
  isExternal: false
  name: Path
  nameWithType: PropertyPath.Path
  fullName: System.Windows.PropertyPath.Path
- uid: System.Windows.PropertyPath.PathParameters
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
  fullName: System.Windows.PropertyPath.PathParameters
- uid: System.Collections.ObjectModel.Collection{System.Object}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<Object>
  nameWithType: Collection<Object>
  fullName: System.Collections.ObjectModel.Collection<System.Object>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.PropertyPath.#ctor*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath
  nameWithType: PropertyPath.PropertyPath
- uid: System.Windows.PropertyPath.Path*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: Path
  nameWithType: PropertyPath.Path
- uid: System.Windows.PropertyPath.PathParameters*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
