### YamlMime:ManagedReference
items:
- uid: System.Security.RightsManagement.PublishLicense
  id: PublishLicense
  children:
  - System.Security.RightsManagement.PublishLicense.#ctor(System.String)
  - System.Security.RightsManagement.PublishLicense.AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)
  - System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)
  - System.Security.RightsManagement.PublishLicense.ContentId
  - System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)
  - System.Security.RightsManagement.PublishLicense.ReferralInfoName
  - System.Security.RightsManagement.PublishLicense.ReferralInfoUri
  - System.Security.RightsManagement.PublishLicense.ToString
  - System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl
  langs:
  - csharp
  name: PublishLicense
  nameWithType: PublishLicense
  fullName: System.Security.RightsManagement.PublishLicense
  type: Class
  summary: "代表帶正負號的版權管理發行授權。"
  remarks: "PublishLicense 定義安全性權限、 使用者和相關資料，其他安全性相關的資訊。  授權會定義如何在特定電腦上的特定使用者可以使用指定的權限管理的內容。       在發佈程序開頭的文件作者， <xref:System.Security.RightsManagement.UnsignedPublishLicense>.</xref:System.Security.RightsManagement.UnsignedPublishLicense>中定義的權限資訊  接下來，作者會建立帶正負號的 PublishLicense 藉由呼叫<xref:System.Security.RightsManagement.UnsignedPublishLicense.Sign%2A><xref:System.Security.RightsManagement.UnsignedPublishLicense>.</xref:System.Security.RightsManagement.UnsignedPublishLicense>方法</xref:System.Security.RightsManagement.UnsignedPublishLicense.Sign%2A>  序列化的形式的帶正負號的 PublishLicense 則可以提供給使用者讓他們可以使用它來取得<xref:System.Security.RightsManagement.UseLicense>藉由呼叫<xref:System.Security.RightsManagement.PublishLicense.AcquireUseLicense%2A>方法 PublishLicense。</xref:System.Security.RightsManagement.PublishLicense.AcquireUseLicense%2A> </xref:System.Security.RightsManagement.UseLicense>  傳回<xref:System.Security.RightsManagement.UseLicense>然後允許用戶端應用程式執行所授與使用者的權限。</xref:System.Security.RightsManagement.UseLicense>       如同其他<xref:System.Security.RightsManagement>型別，PublishLicense 才可用於完全信任應用程式。</xref:System.Security.RightsManagement>"
  example:
  - "The following example shows how to initialize a PublishLicense by using the <xref:System.Security.RightsManagement.UnsignedPublishLicense.Sign%2A> method.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: >-
      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]

      public class PublishLicense
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: PublishLicense(String)
  nameWithType: PublishLicense.PublishLicense(String)
  fullName: System.Security.RightsManagement.PublishLicense.PublishLicense(String)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "初始化的新執行個體<xref href=&quot;System.Security.RightsManagement.PublishLicense&quot;></xref>從指定的類別序列化，並簽署<xref href=&quot;System.Security.RightsManagement.PublishLicense&quot;> </xref>。"
  syntax:
    content: public PublishLicense (string signedPublishLicense);
    parameters:
    - id: signedPublishLicense
      type: System.String
      description: "簽署和序列化的發行授權。"
  overload: System.Security.RightsManagement.PublishLicense.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>signedPublishLicense</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.RightsManagement.RightsManagementException
    commentId: T:System.Security.RightsManagement.RightsManagementException
    description: "授權無效。"
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)
  id: AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: AcquireUseLicense(SecureEnvironment)
  nameWithType: PublishLicense.AcquireUseLicense(SecureEnvironment)
  fullName: System.Security.RightsManagement.PublishLicense.AcquireUseLicense(SecureEnvironment)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "嘗試取得<xref href=&quot;System.Security.RightsManagement.UseLicense&quot;></xref>使用者或使用者群組，在指定的<xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;> </xref>。"
  syntax:
    content: public System.Security.RightsManagement.UseLicense AcquireUseLicense (System.Security.RightsManagement.SecureEnvironment secureEnvironment);
    parameters:
    - id: secureEnvironment
      type: System.Security.RightsManagement.SecureEnvironment
      description: "啟用授權和繫結至安全的環境。"
    return:
      type: System.Security.RightsManagement.UseLicense
      description: "<xref href=&quot;System.Security.RightsManagement.UseLicense&quot;> </xref>使用者或使用者群組內指定<code> secureEnvironment </code>。"
  overload: System.Security.RightsManagement.PublishLicense.AcquireUseLicense*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>secureEnvironment</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.RightsManagement.RightsManagementException
    commentId: T:System.Security.RightsManagement.RightsManagementException
    description: "驗證失敗。"
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)
  id: AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: AcquireUseLicenseNoUI(SecureEnvironment)
  nameWithType: PublishLicense.AcquireUseLicenseNoUI(SecureEnvironment)
  fullName: System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(SecureEnvironment)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "嘗試取得<xref href=&quot;System.Security.RightsManagement.UseLicense&quot;></xref>使用者或使用者群組，在指定的<xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;> </xref>。"
  remarks: "AcquireUseLicenseNoUI 方法隱藏 Windows 網路驗證 對話方塊。 如果授權要求被拒，因為使用者沒有權限，AcquireUseLicenseNoUI 會防止顯示網路驗證 對話方塊。 取得授權，或可能不會造成混淆的對話方塊會顯示非使用者介面中的背景工作時嘗試使用無訊息擷取。"
  syntax:
    content: public System.Security.RightsManagement.UseLicense AcquireUseLicenseNoUI (System.Security.RightsManagement.SecureEnvironment secureEnvironment);
    parameters:
    - id: secureEnvironment
      type: System.Security.RightsManagement.SecureEnvironment
      description: "啟用授權和繫結至安全的環境。"
    return:
      type: System.Security.RightsManagement.UseLicense
      description: "<xref href=&quot;System.Security.RightsManagement.UseLicense&quot;> </xref>使用者或使用者群組內指定<code> secureEnvironment </code>。"
  overload: System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>secureEnvironment</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.RightsManagement.RightsManagementException
    commentId: T:System.Security.RightsManagement.RightsManagementException
    description: "驗證失敗。"
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.ContentId
  id: ContentId
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: ContentId
  nameWithType: PublishLicense.ContentId
  fullName: System.Security.RightsManagement.PublishLicense.ContentId
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "取得發行者建立的內容識別項。"
  remarks: "發行者建立<xref:System.Security.RightsManagement.UnsignedPublishLicense.ContentId%2A>來識別受保護的內容。</xref:System.Security.RightsManagement.UnsignedPublishLicense.ContentId%2A>"
  syntax:
    content: public Guid ContentId { get; }
    return:
      type: System.Guid
      description: "發行者建立內容識別項。"
  overload: System.Security.RightsManagement.PublishLicense.ContentId*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)
  id: DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: DecryptUnsignedPublishLicense(CryptoProvider)
  nameWithType: PublishLicense.DecryptUnsignedPublishLicense(CryptoProvider)
  fullName: System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(CryptoProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "傳回解密<xref href=&quot;System.Security.RightsManagement.UnsignedPublishLicense&quot;></xref>的簽署版<xref href=&quot;System.Security.RightsManagement.PublishLicense&quot;> </xref>。"
  remarks: "DecryptUnsignedPublishLicense 方法可讓授權擁有者以及被授與使用者<xref:System.Security.RightsManagement.ContentRight>擷取的原始資訊加密時<xref:System.Security.RightsManagement.PublishLicense>所建立。</xref:System.Security.RightsManagement.PublishLicense> </xref:System.Security.RightsManagement.ContentRight>"
  syntax:
    content: public System.Security.RightsManagement.UnsignedPublishLicense DecryptUnsignedPublishLicense (System.Security.RightsManagement.CryptoProvider cryptoProvider);
    parameters:
    - id: cryptoProvider
      type: System.Security.RightsManagement.CryptoProvider
      description: "要用來解密授權 rights management 服務。"
    return:
      type: System.Security.RightsManagement.UnsignedPublishLicense
      description: "此授權解密、 不帶正負號版本。"
  overload: System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>cryptoProvider</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.ReferralInfoName
  id: ReferralInfoName
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: ReferralInfoName
  nameWithType: PublishLicense.ReferralInfoName
  fullName: System.Security.RightsManagement.PublishLicense.ReferralInfoName
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "取得連絡作者或內容的發行者名稱。"
  remarks: "ReferralInfoName 屬性所傳回的字串不會經過加密，即使使用者沒有<xref:System.Security.RightsManagement.UseLicense>.</xref:System.Security.RightsManagement.UseLicense>存取  傳回的字串可以讓使用者連絡發行者以要求<xref:System.Security.RightsManagement.UseLicense>.</xref:System.Security.RightsManagement.UseLicense>"
  syntax:
    content: public string ReferralInfoName { get; }
    return:
      type: System.String
      description: "連絡作者或內容的發行者名稱。"
  overload: System.Security.RightsManagement.PublishLicense.ReferralInfoName*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.ReferralInfoUri
  id: ReferralInfoUri
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: ReferralInfoUri
  nameWithType: PublishLicense.ReferralInfoUri
  fullName: System.Security.RightsManagement.PublishLicense.ReferralInfoUri
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "取得連絡人[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]作者或發行者的內容。"
  remarks: "ReferralInfoUri 屬性所傳回的字串不會經過加密，即使使用者沒有<xref:System.Security.RightsManagement.UseLicense>.</xref:System.Security.RightsManagement.UseLicense>存取  傳回的字串可以讓使用者連絡發行者以要求<xref:System.Security.RightsManagement.UseLicense>.</xref:System.Security.RightsManagement.UseLicense>"
  syntax:
    content: public Uri ReferralInfoUri { get; }
    return:
      type: System.Uri
      description: "連絡人[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]作者或發行者的內容。"
  overload: System.Security.RightsManagement.PublishLicense.ReferralInfoUri*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.ToString
  id: ToString
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: ToString()
  nameWithType: PublishLicense.ToString()
  fullName: System.Security.RightsManagement.PublishLicense.ToString()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "傳回序列化[!INCLUDE[TLA2#tla_xrml](~/add/includes/tla2sharptla-xrml-md.md)]用來建立此授權的字串。"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "序列化[!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)]用來建立此授權的字串。"
  overload: System.Security.RightsManagement.PublishLicense.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl
  id: UseLicenseAcquisitionUrl
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: UseLicenseAcquisitionUrl
  nameWithType: PublishLicense.UseLicenseAcquisitionUrl
  fullName: System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "取得[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]用於取得<xref href=&quot;System.Security.RightsManagement.UseLicense&quot;> </xref>。"
  remarks: "<xref:System.Security.RightsManagement.PublishLicense.AcquireUseLicense%2A>當使用者取得<xref:System.Security.RightsManagement.UseLicense>.</xref:System.Security.RightsManagement.UseLicense>方法</xref:System.Security.RightsManagement.PublishLicense.AcquireUseLicense%2A>會使用 UseLicenseAcquisitionUrl 屬性"
  syntax:
    content: public Uri UseLicenseAcquisitionUrl { get; }
    return:
      type: System.Uri
      description: "[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]用於取得<xref href=&quot;System.Security.RightsManagement.UseLicense&quot;> </xref>。"
  overload: System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.RightsManagement.RightsManagementException
  parent: System.Security.RightsManagement
  isExternal: false
  name: RightsManagementException
  nameWithType: RightsManagementException
  fullName: System.Security.RightsManagement.RightsManagementException
- uid: System.Security.RightsManagement.PublishLicense.#ctor(System.String)
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: PublishLicense(String)
  nameWithType: PublishLicense.PublishLicense(String)
  fullName: System.Security.RightsManagement.PublishLicense.PublishLicense(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.RightsManagement.PublishLicense.AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: AcquireUseLicense(SecureEnvironment)
  nameWithType: PublishLicense.AcquireUseLicense(SecureEnvironment)
  fullName: System.Security.RightsManagement.PublishLicense.AcquireUseLicense(SecureEnvironment)
- uid: System.Security.RightsManagement.UseLicense
  parent: System.Security.RightsManagement
  isExternal: false
  name: UseLicense
  nameWithType: UseLicense
  fullName: System.Security.RightsManagement.UseLicense
- uid: System.Security.RightsManagement.SecureEnvironment
  parent: System.Security.RightsManagement
  isExternal: false
  name: SecureEnvironment
  nameWithType: SecureEnvironment
  fullName: System.Security.RightsManagement.SecureEnvironment
- uid: System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: AcquireUseLicenseNoUI(SecureEnvironment)
  nameWithType: PublishLicense.AcquireUseLicenseNoUI(SecureEnvironment)
  fullName: System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(SecureEnvironment)
- uid: System.Security.RightsManagement.PublishLicense.ContentId
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ContentId
  nameWithType: PublishLicense.ContentId
  fullName: System.Security.RightsManagement.PublishLicense.ContentId
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: DecryptUnsignedPublishLicense(CryptoProvider)
  nameWithType: PublishLicense.DecryptUnsignedPublishLicense(CryptoProvider)
  fullName: System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(CryptoProvider)
- uid: System.Security.RightsManagement.UnsignedPublishLicense
  parent: System.Security.RightsManagement
  isExternal: false
  name: UnsignedPublishLicense
  nameWithType: UnsignedPublishLicense
  fullName: System.Security.RightsManagement.UnsignedPublishLicense
- uid: System.Security.RightsManagement.CryptoProvider
  parent: System.Security.RightsManagement
  isExternal: false
  name: CryptoProvider
  nameWithType: CryptoProvider
  fullName: System.Security.RightsManagement.CryptoProvider
- uid: System.Security.RightsManagement.PublishLicense.ReferralInfoName
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ReferralInfoName
  nameWithType: PublishLicense.ReferralInfoName
  fullName: System.Security.RightsManagement.PublishLicense.ReferralInfoName
- uid: System.Security.RightsManagement.PublishLicense.ReferralInfoUri
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ReferralInfoUri
  nameWithType: PublishLicense.ReferralInfoUri
  fullName: System.Security.RightsManagement.PublishLicense.ReferralInfoUri
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Security.RightsManagement.PublishLicense.ToString
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ToString()
  nameWithType: PublishLicense.ToString()
  fullName: System.Security.RightsManagement.PublishLicense.ToString()
- uid: System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: UseLicenseAcquisitionUrl
  nameWithType: PublishLicense.UseLicenseAcquisitionUrl
  fullName: System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl
- uid: System.Security.RightsManagement.PublishLicense.#ctor*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: PublishLicense
  nameWithType: PublishLicense.PublishLicense
- uid: System.Security.RightsManagement.PublishLicense.AcquireUseLicense*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: AcquireUseLicense
  nameWithType: PublishLicense.AcquireUseLicense
- uid: System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: AcquireUseLicenseNoUI
  nameWithType: PublishLicense.AcquireUseLicenseNoUI
- uid: System.Security.RightsManagement.PublishLicense.ContentId*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ContentId
  nameWithType: PublishLicense.ContentId
- uid: System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: DecryptUnsignedPublishLicense
  nameWithType: PublishLicense.DecryptUnsignedPublishLicense
- uid: System.Security.RightsManagement.PublishLicense.ReferralInfoName*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ReferralInfoName
  nameWithType: PublishLicense.ReferralInfoName
- uid: System.Security.RightsManagement.PublishLicense.ReferralInfoUri*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ReferralInfoUri
  nameWithType: PublishLicense.ReferralInfoUri
- uid: System.Security.RightsManagement.PublishLicense.ToString*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ToString
  nameWithType: PublishLicense.ToString
- uid: System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: UseLicenseAcquisitionUrl
  nameWithType: PublishLicense.UseLicenseAcquisitionUrl
