### YamlMime:ManagedReference
items:
- uid: System.Collections.SortedList
  id: SortedList
  children:
  - System.Collections.SortedList.#ctor
  - System.Collections.SortedList.#ctor(System.Collections.IComparer)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  - System.Collections.SortedList.#ctor(System.Int32)
  - System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  - System.Collections.SortedList.Add(System.Object,System.Object)
  - System.Collections.SortedList.Capacity
  - System.Collections.SortedList.Clear
  - System.Collections.SortedList.Clone
  - System.Collections.SortedList.Contains(System.Object)
  - System.Collections.SortedList.ContainsKey(System.Object)
  - System.Collections.SortedList.ContainsValue(System.Object)
  - System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  - System.Collections.SortedList.Count
  - System.Collections.SortedList.GetByIndex(System.Int32)
  - System.Collections.SortedList.GetEnumerator
  - System.Collections.SortedList.GetKey(System.Int32)
  - System.Collections.SortedList.GetKeyList
  - System.Collections.SortedList.GetValueList
  - System.Collections.SortedList.IndexOfKey(System.Object)
  - System.Collections.SortedList.IndexOfValue(System.Object)
  - System.Collections.SortedList.IsFixedSize
  - System.Collections.SortedList.IsReadOnly
  - System.Collections.SortedList.IsSynchronized
  - System.Collections.SortedList.Item(System.Object)
  - System.Collections.SortedList.Keys
  - System.Collections.SortedList.Remove(System.Object)
  - System.Collections.SortedList.RemoveAt(System.Int32)
  - System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  - System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  - System.Collections.SortedList.SyncRoot
  - System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.SortedList.TrimToSize
  - System.Collections.SortedList.Values
  langs:
  - csharp
  name: SortedList
  nameWithType: SortedList
  fullName: System.Collections.SortedList
  type: Class
  summary: "代表依索引鍵排序，而且可由索引鍵和索引存取的索引鍵/值組的集合。"
  remarks: "這個集合的泛型版本，請參閱<xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>.</xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>       SortedList 項目可以存取它的金鑰，如在任何項目一般<xref:System.Collections.IDictionary>實作，或依據索引，如在任何項目一般<xref:System.Collections.IList>實作。</xref:System.Collections.IList> </xref:System.Collections.IDictionary>       SortedList 物件在內部維護兩個陣列來儲存的清單項目也就是一個陣列的索引鍵，另一個陣列的相關聯的值。 每個項目是無法做為存取的索引鍵/值組<xref:System.Collections.DictionaryEntry>物件。</xref:System.Collections.DictionaryEntry> 金鑰不能`null`，但是值可以是。       SortedList 物件的容量是 SortedList 可以保存的項目數目。 當項目加入至 SortedList 時，會自動增加容量視需要透過重新配置。 藉由呼叫，您可以減少容量<xref:System.Collections.SortedList.TrimToSize%2A>或藉由設定<xref:System.Collections.SortedList.Capacity%2A>屬性明確。</xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.TrimToSize%2A>       對於非常大的 SortedList 物件，您可以藉由設定增加到 64 位元系統上的 2 億元素的最大容量`enabled`屬性的組態項目`true`在執行階段環境中。       SortedList 物件的項目會依照索引鍵是根據特定<xref:System.Collections.IComparer>SortedList 建立時或根據指定的實作<xref:System.IComparable>金鑰本身所提供的實作。</xref:System.IComparable> </xref:System.Collections.IComparer> 在任一情況下，SortedList 不允許重複的索引鍵。       索引的順序為基礎的排序順序。 加入項目之後，會插入 SortedList 正確的排序順序和索引會隨之調整。 移除項目時，索引也會據以的調整。 因此，加入或從 SortedList 物件移除項目時，可能會變更特定索引鍵/值組的索引。       SortedList 物件的作業通常會變慢，相較於<xref:System.Collections.Hashtable>因為排序的物件。</xref:System.Collections.Hashtable> 不過，SortedList 會提供更大的彈性，允許存取的值，透過關聯的索引鍵或索引。       可以使用整數索引來存取此集合中的項目。  在此集合中的索引都以零為起始。       `foreach` C# 語言的陳述式 (`for each`在 Visual Basic 中) 傳回集合中的項目類型的物件。 SortedList 物件的每個項目是索引鍵/值組，因為項目型別不是索引鍵的類型或值的類型。 相對地，項目型別是<xref:System.Collections.DictionaryEntry>.</xref:System.Collections.DictionaryEntry> 例如︰ [!code-cpp[傳統 SortedList 範例&#2;](~/add/codesnippet/cpp/t-system.collections.sor_1.cpp)][!code-cs[傳統 SortedList 範例&#2;](~/add/codesnippet/csharp/t-system.collections.sor_1.cs)][!code-vb[傳統 SortedList 範例&#2;](~/add/codesnippet/visualbasic/t-system.collections.sor_1.vb) ] `foreach`陳述式是可讓只有讀取，不寫入至集合的列舉值的包裝函式。    "
  example:
  - "The following code example shows how to create and initialize a SortedList object and how to print out its keys and values.  \n  \n [!code-cpp[Classic SortedList Example#1](~/add/codesnippet/cpp/t-system.collections.sor_2.cpp)]\n [!code-cs[Classic SortedList Example#1](~/add/codesnippet/csharp/t-system.collections.sor_2.cs)]\n [!code-vb[Classic SortedList Example#1](~/add/codesnippet/visualbasic/t-system.collections.sor_2.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.SortedList/SortedListDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class SortedList : ICloneable, System.Collections.IDictionary
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor
  id: '#ctor'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList()
  nameWithType: SortedList.SortedList()
  fullName: System.Collections.SortedList.SortedList()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "初始化的新執行個體<xref href=&quot;System.Collections.SortedList&quot;></xref>的是空白的、 具有預設初始容量，並排序依據<xref:System.IComparable>介面實作新增至每個索引鍵<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。</xref:System.IComparable>"
  remarks: "每個索引鍵必須實作<xref:System.IComparable>介面中的索引鍵的比較能夠<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList> </xref:System.IComparable> 項目都是根據<xref:System.IComparable>每個索引鍵加入至<xref:System.Collections.SortedList>。</xref:System.Collections.SortedList>實作</xref:System.IComparable>排序       容量<xref:System.Collections.SortedList>物件則是項目數目，<xref:System.Collections.SortedList>可以保存。</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 當項目加入至<xref:System.Collections.SortedList>，就會自動增加容量的要求以重新配置內部的陣列。</xref:System.Collections.SortedList>       如果可以評估集合的大小，指定初始容量，就不需要執行數個調整大小作業時新增元素至<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList>       這個建構函式是 o （1） 運算。"
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctor#1](~/add/codesnippet/csharp/m-system.collections.sor_7_1.cs)]\n [!code-vb[System.Collections.SortedList_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.sor_7_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctor#1](~/add/codesnippet/cpp/m-system.collections.sor_7_1.cpp)]"
  syntax:
    content: public SortedList ();
    parameters: []
  overload: System.Collections.SortedList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)
  id: '#ctor(System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IComparer)
  nameWithType: SortedList.SortedList(IComparer)
  fullName: System.Collections.SortedList.SortedList(IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "初始化的新執行個體<xref href=&quot;System.Collections.SortedList&quot;></xref>類別是空白的、 具有預設初始容量，而且排序根據指定<xref:System.Collections.IComparer>介面。</xref:System.Collections.IComparer>"
  remarks: "排序項目會根據指定<xref:System.Collections.IComparer>實作。</xref:System.Collections.IComparer> 如果`comparer`參數是`null`、<xref:System.IComparable>會使用每個索引鍵的實作; 因此，每個索引鍵必須實作<xref:System.IComparable>介面中的索引鍵的比較能夠<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       容量<xref:System.Collections.SortedList>物件則是項目數目，<xref:System.Collections.SortedList>可以保存。</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 當項目加入至<xref:System.Collections.SortedList>，就會自動增加容量的要求以重新配置內部的陣列。</xref:System.Collections.SortedList>       如果可以評估集合的大小，指定初始容量，就不需要執行數個調整大小作業時新增元素至<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList>       這個建構函式是 o （1） 運算。"
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctor#1](~/add/codesnippet/csharp/m-system.collections.sor_18_1.cs)]\n [!code-vb[System.Collections.SortedList_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.sor_18_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctor#1](~/add/codesnippet/cpp/m-system.collections.sor_18_1.cpp)]"
  syntax:
    content: public SortedList (System.Collections.IComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>比較索引鍵時要使用的實作。</xref:System.Collections.IComparer>       - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>使用<xref:System.IComparable>實作每個索引鍵。</xref:System.IComparable>"
  overload: System.Collections.SortedList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  id: '#ctor(System.Collections.IDictionary)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IDictionary)
  nameWithType: SortedList.SortedList(IDictionary)
  fullName: System.Collections.SortedList.SortedList(IDictionary)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "初始化的新執行個體<xref href=&quot;System.Collections.SortedList&quot;></xref>類別，其中包含從指定的字典複製項目已複製，項目數一樣的初始容量，而且根據排序<xref:System.IComparable>每個索引鍵所實作的介面。</xref:System.IComparable>"
  remarks: "每個索引鍵必須實作<xref:System.IComparable>介面中的索引鍵的比較能夠<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList> </xref:System.IComparable> 項目都是根據<xref:System.IComparable>每個索引鍵加入至<xref:System.Collections.SortedList>。</xref:System.Collections.SortedList>實作</xref:System.IComparable>排序       A<xref:System.Collections.Hashtable>物件是範例<xref:System.Collections.IDictionary>可以傳遞給這個建構函式的實作。</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable> <xref:System.Collections.SortedList>物件包含索引鍵和值在<xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable>儲存一份</xref:System.Collections.SortedList>新       容量<xref:System.Collections.SortedList>物件則是項目數目，<xref:System.Collections.SortedList>可以保存。</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 當項目加入至<xref:System.Collections.SortedList>，就會自動增加容量的要求以重新配置內部的陣列。</xref:System.Collections.SortedList>       如果可以評估集合的大小，指定初始容量，就不需要執行數個調整大小作業時新增元素至<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList>       這個建構函式為 O (`n`) 作業，其中`n`是中的項目數`d`。"
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/cpp/m-system.collections.sor_9_1.cpp)]\n [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/visualbasic/m-system.collections.sor_9_1.vb)]\n [!code-cs[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/csharp/m-system.collections.sor_9_1.cs)]"
  syntax:
    content: public SortedList (System.Collections.IDictionary d);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>複製到新的實作<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。</xref:System.Collections.IDictionary>"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "中的一個或多個項目<code> d </code>不會實作<xref:System.IComparable>介面。</xref:System.IComparable>"
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(Int32)
  nameWithType: SortedList.SortedList(Int32)
  fullName: System.Collections.SortedList.SortedList(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "初始化的新執行個體<xref href=&quot;System.Collections.SortedList&quot;></xref>的是空白的、 具有指定的初始容量，並排序依據<xref:System.IComparable>介面實作新增至每個索引鍵<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。</xref:System.IComparable>"
  remarks: "每個索引鍵必須實作<xref:System.IComparable>介面中的索引鍵的比較能夠<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList> </xref:System.IComparable> 項目都是根據<xref:System.IComparable>每個索引鍵加入至<xref:System.Collections.SortedList>。</xref:System.Collections.SortedList>實作</xref:System.IComparable>排序       容量<xref:System.Collections.SortedList>物件則是項目數目，<xref:System.Collections.SortedList>可以保存。</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 當項目加入至<xref:System.Collections.SortedList>，就會自動增加容量的要求以重新配置內部的陣列。</xref:System.Collections.SortedList>       如果可以評估集合的大小，指定初始容量，就不需要執行數個調整大小作業時新增元素至<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList>       這個建構函式為 O (`n`) 作業，其中`n`是`initialCapacity`。"
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/csharp/m-system.collections.sor_15_1.cs)]\n [!code-vb[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/visualbasic/m-system.collections.sor_15_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/cpp/m-system.collections.sor_15_1.cpp)]"
  syntax:
    content: public SortedList (int initialCapacity);
    parameters:
    - id: initialCapacity
      type: System.Int32
      description: "初始項目數， <xref href=&quot;System.Collections.SortedList&quot;> </xref>物件可以包含。"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>initialCapacity</code>小於零。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "沒有足夠的記憶體來建立<xref href=&quot;System.Collections.SortedList&quot;></xref>物件具有指定<code> initialCapacity </code>。"
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  id: '#ctor(System.Collections.IComparer,System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IComparer,Int32)
  nameWithType: SortedList.SortedList(IComparer,Int32)
  fullName: System.Collections.SortedList.SortedList(IComparer,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "初始化的新執行個體<xref href=&quot;System.Collections.SortedList&quot;></xref>類別是空白的、 具有指定的初始容量，而且排序根據指定<xref:System.Collections.IComparer>介面。</xref:System.Collections.IComparer>"
  remarks: "排序項目會根據指定<xref:System.Collections.IComparer>實作。</xref:System.Collections.IComparer> 如果`comparer`參數是`null`、<xref:System.IComparable>會使用每個索引鍵的實作; 因此，每個索引鍵必須實作<xref:System.IComparable>介面中的索引鍵的比較能夠<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       容量<xref:System.Collections.SortedList>物件則是項目數目，<xref:System.Collections.SortedList>可以保存。</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 當項目加入至<xref:System.Collections.SortedList>，就會自動增加容量的要求以重新配置內部的陣列。</xref:System.Collections.SortedList>       如果可以評估集合的大小，指定初始容量，就不需要執行數個調整大小作業時新增元素至<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList>       這個建構函式為 O (`n`) 作業，其中`n`是`capacity`。"
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/csharp/1806b376-56fc-45e2-aff7-_1.cs)]\n [!code-vb[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/visualbasic/1806b376-56fc-45e2-aff7-_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/cpp/1806b376-56fc-45e2-aff7-_1.cpp)]"
  syntax:
    content: public SortedList (System.Collections.IComparer comparer, int capacity);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>比較索引鍵時要使用的實作。</xref:System.Collections.IComparer>       - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>使用<xref:System.IComparable>實作每個索引鍵。</xref:System.IComparable>"
    - id: capacity
      type: System.Int32
      description: "初始項目數， <xref href=&quot;System.Collections.SortedList&quot;> </xref>物件可以包含。"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>小於零。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "沒有足夠的記憶體來建立<xref href=&quot;System.Collections.SortedList&quot;></xref>物件具有指定<code> capacity </code>。"
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IDictionary,IComparer)
  nameWithType: SortedList.SortedList(IDictionary,IComparer)
  fullName: System.Collections.SortedList.SortedList(IDictionary,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "初始化的新執行個體<xref href=&quot;System.Collections.SortedList&quot;></xref>類別，其中包含從指定的字典複製項目已複製，項目數一樣的初始容量，而且排序根據指定<xref:System.Collections.IComparer>介面。</xref:System.Collections.IComparer>"
  remarks: "排序項目會根據指定<xref:System.Collections.IComparer>實作。</xref:System.Collections.IComparer> 如果`comparer`參數是`null`、<xref:System.IComparable>會使用每個索引鍵的實作; 因此，每個索引鍵必須實作<xref:System.IComparable>介面中的索引鍵的比較能夠<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       A<xref:System.Collections.Hashtable>物件是範例<xref:System.Collections.IDictionary>可以傳遞給這個建構函式的實作。</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable> <xref:System.Collections.SortedList>物件包含索引鍵和值在<xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable>儲存一份</xref:System.Collections.SortedList>新       容量<xref:System.Collections.SortedList>物件則是項目數目，<xref:System.Collections.SortedList>可以保存。</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 當項目加入至<xref:System.Collections.SortedList>，就會自動增加容量的要求以重新配置內部的陣列。</xref:System.Collections.SortedList>       如果可以評估集合的大小，指定初始容量，就不需要執行數個調整大小作業時新增元素至<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList>       這個建構函式為 O (`n`) 作業，其中`n`是中的項目數`d`。"
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/cpp/653e16d8-524e-4544-8674-_1.cpp)]\n [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/visualbasic/653e16d8-524e-4544-8674-_1.vb)]\n [!code-cs[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/csharp/653e16d8-524e-4544-8674-_1.cs)]"
  syntax:
    content: public SortedList (System.Collections.IDictionary d, System.Collections.IComparer comparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>複製到新的實作<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。</xref:System.Collections.IDictionary>"
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>比較索引鍵時要使用的實作。</xref:System.Collections.IComparer>       - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>使用<xref:System.IComparable>實作每個索引鍵。</xref:System.IComparable>"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>comparer</code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，和一或多個項目中的<code>d</code>不會實作<xref:System.IComparable>介面。"
  platform:
  - net462
- uid: System.Collections.SortedList.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Add(Object,Object)
  nameWithType: SortedList.Add(Object,Object)
  fullName: System.Collections.SortedList.Add(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "將具有指定索引鍵和值的項目<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  remarks: "插入點取決於選取，以明確或預設的比較子時<xref:System.Collections.SortedList>建立物件。</xref:System.Collections.SortedList>       如果<xref:System.Collections.SortedList.Count%2A>已等於<xref:System.Collections.SortedList.Capacity%2A>、 容量的<xref:System.Collections.SortedList>增加物件會自動重新配置內部的陣列，並加入新項目之前現有的項目複製到新陣列。</xref:System.Collections.SortedList> </xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.Count%2A>       您也可以使用<xref:System.Collections.SortedList.Item%2A>加入新項目，藉由設定機碼值的屬性不存在於<xref:System.Collections.SortedList>物件 (例如， `myCollection[&quot;myNonexistentKey&quot;] = myValue`)。</xref:System.Collections.SortedList> </xref:System.Collections.SortedList.Item%2A> 不過，如果指定的索引鍵已存在於<xref:System.Collections.SortedList>，設定<xref:System.Collections.SortedList.Item%2A>屬性會覆寫舊的值。</xref:System.Collections.SortedList.Item%2A> </xref:System.Collections.SortedList> 相反地，加入方法不會修改現有的項目。       項目<xref:System.Collections.SortedList>依索引鍵所排序的物件是根據特定<xref:System.Collections.IComparer>實作時指定<xref:System.Collections.SortedList>是建立或根據<xref:System.IComparable>金鑰本身所提供的實作。</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       金鑰不能`null`，但是值可以是。       這個方法是 O (`n`) 作業的未排序的資料，其中`n`為<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A> 是 O (記錄`n`) 作業時，如果在清單結尾處加入新項目。 如果插入會導致調整大小，作業為 O (`n`)。"
  example:
  - "The following code example shows how to add elements to a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.sor_4_1.cpp)]\n [!code-vb[Classic SortedList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_4_1.vb)]\n [!code-cs[Classic SortedList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.sor_4_1.cs)]"
  syntax:
    content: public virtual void Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "若要加入的項目索引鍵。"
    - id: value
      type: System.Object
      description: "要加入之元素的值。 這個值可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.SortedList.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "具有指定的項目<code> key </code>已經存在於<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。       -或- <xref href=&quot;System.Collections.SortedList&quot;> </xref>會設定為使用<xref:System.IComparable>介面，和<code> key </code>未實作<xref:System.IComparable>介面。</xref:System.IComparable> </xref:System.IComparable>"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref>處於唯讀狀態。       -或- <xref href=&quot;System.Collections.SortedList&quot;> </xref>有固定的大小。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "不是記憶體不足，無法新增項目的<xref href=&quot;System.Collections.SortedList&quot;> </xref>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "比較子會擲回例外狀況。"
  platform:
  - net462
- uid: System.Collections.SortedList.Capacity
  id: Capacity
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Capacity
  nameWithType: SortedList.Capacity
  fullName: System.Collections.SortedList.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得或設定的容量<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  remarks: "容量則是項目數目，<xref:System.Collections.SortedList>物件可儲存。</xref:System.Collections.SortedList> <xref:System.Collections.SortedList.Count%2A>是實際<xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>中的項目數目</xref:System.Collections.SortedList.Count%2A>       容量永遠是大於或等於<xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> 如果<xref:System.Collections.SortedList.Count%2A>超過容量加入項目時，複製的舊項目並加入新項目之前，重新配置內部的陣列，就會自動增加容量。</xref:System.Collections.SortedList.Count%2A>       藉由呼叫，您可以減少容量<xref:System.Collections.SortedList.TrimToSize%2A>或藉由明確地設定容量屬性。</xref:System.Collections.SortedList.TrimToSize%2A> 當明確設定的容量值時，在內部陣列也重新配置到符合指定的容量。       擷取這個屬性的值是 o （1） 運算。將屬性設定為 O (`n`) 作業，其中`n`是新的容量。"
  syntax:
    content: public virtual int Capacity { get; set; }
    return:
      type: System.Int32
      description: "項目數目， <xref href=&quot;System.Collections.SortedList&quot;> </xref>物件可以包含。"
  overload: System.Collections.SortedList.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "指派的值小於目前的數字中的項目<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "沒有足夠的記憶體可用系統上。"
  platform:
  - net462
- uid: System.Collections.SortedList.Clear
  id: Clear
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Clear()
  nameWithType: SortedList.Clear()
  fullName: System.Collections.SortedList.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "移除所有項目從<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  remarks: "<xref:System.Collections.SortedList.Count%2A>設為零，且從項目集合的其他物件的參考也會釋放。</xref:System.Collections.SortedList.Count%2A>       <xref:System.Collections.SortedList.Capacity%2A>維持不變。</xref:System.Collections.SortedList.Capacity%2A> 若要重設的容量<xref:System.Collections.SortedList>物件，呼叫<xref:System.Collections.SortedList.TrimToSize%2A>或設定<xref:System.Collections.SortedList.Capacity%2A>屬性直接。</xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.TrimToSize%2A> </xref:System.Collections.SortedList> 修剪空白<xref:System.Collections.SortedList>設定的容量<xref:System.Collections.SortedList>預設容量。</xref:System.Collections.SortedList> </xref:System.Collections.SortedList>       這個方法是 O (`n`) 作業，其中`n`為<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear the values of the <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.sor_14_1.cpp)]\n [!code-cs[Classic SortedList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.sor_14_1.cs)]\n [!code-vb[Classic SortedList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_14_1.vb)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.SortedList.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref>物件是唯讀的。       -或- <xref href=&quot;System.Collections.SortedList&quot;> </xref>有固定的大小。"
  platform:
  - net462
- uid: System.Collections.SortedList.Clone
  id: Clone
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Clone()
  nameWithType: SortedList.Clone()
  fullName: System.Collections.SortedList.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "建立的淺層複本<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  remarks: "集合的淺層複本只會複製元素的集合，它們都是參考類型或值類型，但不會複製參考所參考的物件。 新的集合中的參考都指向相同原始集合中的參考所指向的物件。       相反地，項目複製集合的深層複本，並直接或間接參考之項目，所有項目。       這個方法是 O (`n`) 作業，其中`n`為<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "淺層複本<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  overload: System.Collections.SortedList.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: SortedList.Contains(Object)
  fullName: System.Collections.SortedList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "決定是否<xref href=&quot;System.Collections.SortedList&quot;></xref>物件包含特定索引鍵。"
  remarks: "項目<xref:System.Collections.SortedList>依索引鍵所排序的物件是根據特定<xref:System.Collections.IComparer>實作時指定<xref:System.Collections.SortedList>是建立或根據<xref:System.IComparable>金鑰本身所提供的實作。</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       包含實作<xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>.</xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName> 它的行為就像<xref:System.Collections.SortedList.ContainsKey%2A>.</xref:System.Collections.SortedList.ContainsKey%2A>       這個方法會使用二進位搜尋演算法。因此，這個方法是 O (記錄`n`) 作業，其中`n`為<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>       從.NET Framework 2.0 開始，這個方法會使用集合的物件<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`來判斷項目是否存在。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> 在舊版的.NET Framework 中，藉由進行這項判斷<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`上集合中物件的參數。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_12_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_12_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_12_1.vb)]"
  syntax:
    content: public virtual bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "要在中尋找的索引鍵<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Collections.SortedList&quot;></xref>物件包含具有指定的項目<code> key </code>，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.SortedList.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "比較子會擲回例外狀況。"
  platform:
  - net462
- uid: System.Collections.SortedList.ContainsKey(System.Object)
  id: ContainsKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: ContainsKey(Object)
  nameWithType: SortedList.ContainsKey(Object)
  fullName: System.Collections.SortedList.ContainsKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "決定是否<xref href=&quot;System.Collections.SortedList&quot;></xref>物件包含特定索引鍵。"
  remarks: "項目<xref:System.Collections.SortedList>依索引鍵所排序的物件是根據特定<xref:System.Collections.IComparer>實作時指定<xref:System.Collections.SortedList>是建立或根據<xref:System.IComparable>金鑰本身所提供的實作。</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       這個方法的行為就像<xref:System.Collections.SortedList.Contains%2A>方法。</xref:System.Collections.SortedList.Contains%2A>       這個方法會使用二進位搜尋演算法。因此，這個方法是 O (記錄`n`) 作業，其中`n`為<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>       從.NET Framework 2.0 開始，這個方法會使用集合的物件<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`來判斷項目是否存在。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> 在舊版的.NET Framework 中，藉由進行這項判斷<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`上集合中物件的參數。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_16_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_16_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_16_1.vb)]"
  syntax:
    content: public virtual bool ContainsKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "要在中尋找的索引鍵<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Collections.SortedList&quot;></xref>物件包含具有指定的項目<code> key </code>，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.SortedList.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "比較子會擲回例外狀況。"
  platform:
  - net462
- uid: System.Collections.SortedList.ContainsValue(System.Object)
  id: ContainsValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: ContainsValue(Object)
  nameWithType: SortedList.ContainsValue(Object)
  fullName: System.Collections.SortedList.ContainsValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "決定是否<xref href=&quot;System.Collections.SortedList&quot;></xref>物件包含特定值。"
  remarks: "項目的值<xref:System.Collections.SortedList>物件與指定的值使用<xref:System.Object.Equals%2A>方法。</xref:System.Object.Equals%2A> </xref:System.Collections.SortedList>       這個方法會執行線性搜尋;因此，平均執行時間是成比例<xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> 也就是說，這個方法是 O (`n`) 作業，其中`n`為<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>       從.NET Framework 2.0 開始，這個方法會使用集合的物件<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`來判斷項目是否存在。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> 在舊版的.NET Framework 中，藉由進行這項判斷<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`上集合中物件的參數。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_0_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_0_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_0_1.vb)]"
  syntax:
    content: public virtual bool ContainsValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "要在中尋找值<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。 這個值可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Collections.SortedList&quot;></xref>物件包含具有指定的項目<code> value </code>，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.SortedList.ContainsValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: SortedList.CopyTo(Array,Int32)
  fullName: System.Collections.SortedList.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "複製<xref href=&quot;System.Collections.SortedList&quot;></xref>到一維的元素<xref:System.Array>物件，在陣列中指定索引處開始。</xref:System.Array>"
  remarks: "索引鍵/值組複製到<xref:System.Array>物件列舉值反覆執行的順序相同<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList> </xref:System.Array>       若要複製中的索引鍵<xref:System.Collections.SortedList>，使用`SortedList.Keys.CopyTo`。</xref:System.Collections.SortedList>       若要複製的值中<xref:System.Collections.SortedList>，使用`SortedList.Values.CopyTo`。</xref:System.Collections.SortedList>       這個方法是 O (`n`) 作業，其中`n`為<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to copy the values in a <xref:System.Collections.SortedList> object into a one-dimensional <xref:System.Array> object.  \n  \n [!code-cs[Classic SortedList.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.sor_20_1.cs)]\n [!code-cpp[Classic SortedList.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.sor_20_1.cpp)]\n [!code-vb[Classic SortedList.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_20_1.vb)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "一維<xref:System.Array>的目的地物件<xref:System.Collections.DictionaryEntry>從複製物件<xref href=&quot;System.Collections.SortedList&quot;> </xref>。</xref:System.Collections.DictionaryEntry> </xref:System.Array> <xref:System.Array>必須有以零為起始的索引。</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "中以零為起始的索引`array`由此開始複製。"
  overload: System.Collections.SortedList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>小於零。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>是多維的。       -在來源中的項目數<xref href=&quot;System.Collections.SortedList&quot;></xref>物件是否大於可用空間<code>arrayIndex</code>至目的地結尾<code>array</code>。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "來源類型<xref href=&quot;System.Collections.SortedList&quot;></xref>無法自動轉換成目的地類型<code> array </code>。"
  platform:
  - net462
- uid: System.Collections.SortedList.Count
  id: Count
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Count
  nameWithType: SortedList.Count
  fullName: System.Collections.SortedList.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得所包含的元素數目<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  remarks: "每個項目是無法做為存取的索引鍵/值組<xref:System.Collections.DictionaryEntry>物件。</xref:System.Collections.DictionaryEntry>       <xref:System.Collections.SortedList.Capacity%2A>是的項目數，<xref:System.Collections.SortedList>物件可儲存。</xref:System.Collections.SortedList></xref:System.Collections.SortedList.Capacity%2A> 計數是實際<xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>中的項目數目       <xref:System.Collections.SortedList.Capacity%2A>永遠是大於或等於 Count。</xref:System.Collections.SortedList.Capacity%2A> 如果計數超過<xref:System.Collections.SortedList.Capacity%2A>時加入項目，容量會自動增加之前複製的舊項目並加入新項目後，重新配置內部的陣列。</xref:System.Collections.SortedList.Capacity%2A>       擷取這個屬性的值是一種 o （1） 運算。"
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "中包含的元素數目<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  overload: System.Collections.SortedList.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetByIndex(System.Int32)
  id: GetByIndex(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetByIndex(Int32)
  nameWithType: SortedList.GetByIndex(Int32)
  fullName: System.Collections.SortedList.GetByIndex(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得指定索引處的值<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  remarks: "索引的順序為基礎的排序順序。 當已新增的項目時，它會插入<xref:System.Collections.SortedList>中正確的排序順序和索引據此調整。</xref:System.Collections.SortedList> 移除項目時，索引也會據以的調整。 加入或移除項目時，特定的索引鍵/值組的索引可能會因此，變更<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList>       這個方法是一種 o （1） 運算。"
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_8_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_8_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_8_1.vb)]"
  syntax:
    content: public virtual object GetByIndex (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "要取得之值的以零為起始的索引。"
    return:
      type: System.Object
      description: "指定索引處的值<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  overload: System.Collections.SortedList.GetByIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>有效索引範圍之外<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  platform:
  - net462
- uid: System.Collections.SortedList.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SortedList.GetEnumerator()
  fullName: System.Collections.SortedList.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "傳回<xref:System.Collections.IDictionaryEnumerator>逐一查看的物件<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。</xref:System.Collections.IDictionaryEnumerator>"
  remarks: "`foreach` C# 語言的陳述式 (`for each`在 Visual Basic 中) 會隱藏列舉值的複雜度。  因此，使用`foreach`建議，而不是直接管理 列舉值。       列舉程式可以用來讀取集合中的資料，但無法用於修改基礎集合。       一開始，列舉程式位在集合中的第一個項目之前。 <xref:System.Collections.IEnumerator.Reset%2A>也會列舉值帶回至這個位置。</xref:System.Collections.IEnumerator.Reset%2A>  此位置<xref:System.Collections.IEnumerator.Current%2A>是未定義。</xref:System.Collections.IEnumerator.Current%2A> 因此，您必須呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>前進的第一個元素之前讀取<xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A>值集合的列舉值</xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>會傳回相同的物件直到<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>稱為。</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>設定<xref:System.Collections.IEnumerator.Current%2A>下一個項目。</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       如果<xref:System.Collections.IEnumerator.MoveNext%2A>超過集合的列舉值的結尾會位於集合中的最後一個元素之後和<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 列舉值位於這個位置上，後續呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>也會傳回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> 如果最後一個呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`，<xref:System.Collections.IEnumerator.Current%2A>是未定義。</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 若要設定<xref:System.Collections.IEnumerator.Current%2A>的第一個元素的集合，您可以呼叫<xref:System.Collections.IEnumerator.Reset%2A>後面加上<xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       只要集合維持不變，列舉程式就持續有效。 如果對集合進行變更，例如加入、 修改或刪除元素，列舉程式會永久失效，且其行為未定義。       列舉程式沒有集合的獨佔存取因此，列舉集合在本質上並非安全執行緒程序。  若要保證列舉過程的執行緒安全，您可以鎖定在整個列舉過程的集合。  若要讓集合以便進行讀取和寫入的多重執行緒能夠存取，您必須實作自己的同步處理。       這個方法是一種 o （1） 運算。"
  syntax:
    content: public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "<xref:System.Collections.IDictionaryEnumerator>物件<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Collections.SortedList.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetKey(System.Int32)
  id: GetKey(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetKey(Int32)
  nameWithType: SortedList.GetKey(Int32)
  fullName: System.Collections.SortedList.GetKey(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得位於指定索引處的索引鍵<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  remarks: "索引的順序為基礎的排序順序。 當已新增的項目時，它會插入<xref:System.Collections.SortedList>中正確的排序順序和索引據此調整。</xref:System.Collections.SortedList> 移除項目時，索引也會據以的調整。 加入或移除項目時，特定的索引鍵/值組的索引可能會因此，變更<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList>       這個方法是一種 o （1） 運算。"
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_19_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_19_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_19_1.vb)]"
  syntax:
    content: public virtual object GetKey (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "要取得之索引鍵以零為起始的索引。"
    return:
      type: System.Object
      description: "指定索引處的索引鍵<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  overload: System.Collections.SortedList.GetKey*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>有效索引範圍之外<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  platform:
  - net462
- uid: System.Collections.SortedList.GetKeyList
  id: GetKeyList
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetKeyList()
  nameWithType: SortedList.GetKeyList()
  fullName: System.Collections.SortedList.GetKeyList()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得索引鍵中<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  remarks: "傳回<xref:System.Collections.IList>物件是索引鍵的唯讀檢視表<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList> </xref:System.Collections.IList> <xref:System.Collections.SortedList>會立即反映在<xref:System.Collections.IList>.</xref:System.Collections.IList></xref:System.Collections.SortedList>基礎所做的修改       <xref:System.Collections.IList>做為<xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>的索引鍵相同的順序排序</xref:System.Collections.IList>傳回的項目       這個方法是類似於<xref:System.Collections.SortedList.Keys%2A>屬性，但是傳回<xref:System.Collections.IList>物件而非<xref:System.Collections.ICollection>物件。</xref:System.Collections.ICollection> </xref:System.Collections.IList> </xref:System.Collections.SortedList.Keys%2A>       這個方法是一種 o （1） 運算。"
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_1_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_1_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_1_1.vb)]"
  syntax:
    content: public virtual System.Collections.IList GetKeyList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>物件，其中包含中的索引鍵<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。</xref:System.Collections.IList>"
  overload: System.Collections.SortedList.GetKeyList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetValueList
  id: GetValueList
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetValueList()
  nameWithType: SortedList.GetValueList()
  fullName: System.Collections.SortedList.GetValueList()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得值， <xref href=&quot;System.Collections.SortedList&quot;> </xref>物件。"
  remarks: "傳回<xref:System.Collections.IList>物件是唯讀值的檢視<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList> </xref:System.Collections.IList> <xref:System.Collections.SortedList>會立即反映在<xref:System.Collections.IList>.</xref:System.Collections.IList></xref:System.Collections.SortedList>基礎所做的修改       <xref:System.Collections.IList>作為<xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>的值相同的順序排序</xref:System.Collections.IList>傳回的項目       這個方法是類似於<xref:System.Collections.SortedList.Values%2A>屬性，但是傳回<xref:System.Collections.IList>物件而非<xref:System.Collections.ICollection>物件。</xref:System.Collections.ICollection> </xref:System.Collections.IList> </xref:System.Collections.SortedList.Values%2A>       這個方法是一種 o （1） 運算。"
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_11_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_11_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_11_1.vb)]"
  syntax:
    content: public virtual System.Collections.IList GetValueList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>物件，其中包含中的值<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。</xref:System.Collections.IList>"
  overload: System.Collections.SortedList.GetValueList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IndexOfKey(System.Object)
  id: IndexOfKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IndexOfKey(Object)
  nameWithType: SortedList.IndexOfKey(Object)
  fullName: System.Collections.SortedList.IndexOfKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "傳回指定之索引鍵中以零為起始的索引<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  remarks: "項目<xref:System.Collections.SortedList>依索引鍵所排序的物件是根據特定<xref:System.Collections.IComparer>實作時指定<xref:System.Collections.SortedList>建立，或依據<xref:System.IComparable>金鑰本身所提供的實作。</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       索引的順序為基礎的排序順序。 當已新增的項目時，它會插入<xref:System.Collections.SortedList>中正確的排序順序和索引據此調整。</xref:System.Collections.SortedList> 移除項目時，索引也會據以的調整。 因此，特定的索引鍵/值組的索引可能會變更為加入或移除<xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>項目       這個方法會使用二進位搜尋演算法。因此，這個方法是 O (記錄`n`) 作業，其中`n`為<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>       從.NET Framework 2.0 開始，這個方法會使用集合的物件<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`來判斷項目是否存在。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> 在舊版的.NET Framework 中，藉由進行這項判斷<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`上集合中物件的參數。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/cpp/m-system.collections.sor_2_1.cpp)]\n [!code-vb[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_2_1.vb)]\n [!code-cs[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/csharp/m-system.collections.sor_2_1.cs)]"
  syntax:
    content: public virtual int IndexOfKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "要在中尋找的索引鍵<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
    return:
      type: System.Int32
      description: "以零為起始的索引<code> key </code>參數，如果<code> key </code>位於<xref href=&quot;System.Collections.SortedList&quot;></xref>物件; 否則為-1。"
  overload: System.Collections.SortedList.IndexOfKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "比較子會擲回例外狀況。"
  platform:
  - net462
- uid: System.Collections.SortedList.IndexOfValue(System.Object)
  id: IndexOfValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IndexOfValue(Object)
  nameWithType: SortedList.IndexOfValue(Object)
  fullName: System.Collections.SortedList.IndexOfValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "傳回指定的值中的第一個出現項目以零為起始的索引<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  remarks: "索引的順序為基礎的排序順序。 當已新增的項目時，它會插入<xref:System.Collections.SortedList>中正確的排序順序和索引據此調整。</xref:System.Collections.SortedList> 移除項目時，索引也會據以的調整。 加入或移除項目時，特定的索引鍵/值組的索引可能會因此，變更<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList>       項目的值<xref:System.Collections.SortedList>與指定的值使用<xref:System.Object.Equals%2A>方法。</xref:System.Object.Equals%2A> </xref:System.Collections.SortedList>       這個方法會使用線性搜尋;因此，這個方法是 O (`n`) 作業，其中`n`為<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>       從.NET Framework 2.0 開始，這個方法會使用集合的物件<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`來判斷項目是否存在。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> 在舊版的.NET Framework 中，藉由進行這項判斷<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`上集合中物件的參數。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/cpp/m-system.collections.sor_5_1.cpp)]\n [!code-vb[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_5_1.vb)]\n [!code-cs[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/csharp/m-system.collections.sor_5_1.cs)]"
  syntax:
    content: public virtual int IndexOfValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "要在中尋找值<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。 這個值可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Int32
      description: "第一個出現的以零為起始的索引<code> value </code>參數，如果<code> value </code>位於<xref href=&quot;System.Collections.SortedList&quot;></xref>物件; 否則為-1。"
  overload: System.Collections.SortedList.IndexOfValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
  fullName: System.Collections.SortedList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得值，指出是否<xref href=&quot;System.Collections.SortedList&quot;></xref>物件具有固定的大小。"
  remarks: "具有固定大小的集合不允許集合建立後，但允許修改現有的項目後新增或移除項目。       具有固定大小的集合是唯讀的集合只以防止新增或移除項目; 包裝函式因此，如果變更基礎的集合，包括新增或移除項目，固定大小的集合會反映這些變更。       擷取這個屬性的值是一種 o （1） 運算。"
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Collections.SortedList&quot;></xref>物件具有固定大小，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.SortedList.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
  fullName: System.Collections.SortedList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得值，指出是否<xref href=&quot;System.Collections.SortedList&quot;></xref>物件是唯讀的。"
  remarks: "是唯讀的集合不允許在集合建立後增加、 移除或修改項目。       是唯讀的集合是唯讀的集合只具有可防止修改集合的包裝函式因此，如果基礎集合進行變更，唯讀的集合會反映這些變更。       擷取這個屬性的值是一種 o （1） 運算。"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Collections.SortedList&quot;></xref>物件是唯讀，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.SortedList.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
  fullName: System.Collections.SortedList.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得值，指出是否存取<xref href=&quot;System.Collections.SortedList&quot;></xref>物件為同步 （安全執行緒）。"
  remarks: "若要保證的執行緒安全<xref:System.Collections.SortedList>物件時，所有作業都必須都透過包裝函式所傳回<xref:System.Collections.SortedList.Synchronized%2A>方法。</xref:System.Collections.SortedList.Synchronized%2A> </xref:System.Collections.SortedList>       透過集合進行列舉在本質上並不是安全執行緒程序。 即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。 若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。"
  example:
  - "The following code example shows how to lock a collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sor_1_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sor_1_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sor_1_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.sor_1_2.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.sor_1_2.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.sor_1_2.vb)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果存取<xref href=&quot;System.Collections.SortedList&quot;></xref>物件為同步 （安全執行緒），否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.SortedList.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Item(Object)
  nameWithType: SortedList.Item(Object)
  fullName: System.Collections.SortedList.Item(Object)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得及設定中指定的索引鍵相關聯的值<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  remarks: "您可以使用此項目屬性來存取集合中的特定元素，藉由指定下列語法︰ `myCollection[key]`。       您也可以使用這個屬性來加入新項目中不存在的索引鍵的值設定<xref:System.Collections.SortedList>物件 (例如， `myCollection[&quot;myNonexistentKey&quot;] = myValue)`。</xref:System.Collections.SortedList> 不過，如果指定的索引鍵已存在於<xref:System.Collections.SortedList>，項目屬性設定會覆寫舊的值。</xref:System.Collections.SortedList> 相反地，<xref:System.Collections.SortedList.Add%2A>方法不會修改現有的項目。</xref:System.Collections.SortedList.Add%2A>       金鑰不能`null`，但是值可以是。 若要在區別`null`傳回因為找不到指定的索引鍵和`null`傳回指定之索引鍵的值，所以`null`，使用<xref:System.Collections.SortedList.Contains%2A>方法或<xref:System.Collections.SortedList.ContainsKey%2A>方法來判斷是否索引鍵存在於清單中。</xref:System.Collections.SortedList.ContainsKey%2A> </xref:System.Collections.SortedList.Contains%2A>       項目<xref:System.Collections.SortedList>依索引鍵所排序是根據特定<xref:System.Collections.IComparer>實作時指定<xref:System.Collections.SortedList>是建立或根據<xref:System.IComparable>金鑰本身所提供的實作。</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       C# 語言使用關鍵字來定義索引，而不必實作<xref:System.Collections.SortedList.Keys%2A>屬性。</xref:System.Collections.SortedList.Keys%2A> Visual Basic 實作項目作為預設屬性，提供相同的索引功能。       擷取這個屬性的值是 O (記錄`n`) 作業，其中`n`為<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A> 將屬性設定為 O (記錄`n`) 作業時，如果在<xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>已有索引鍵 如果索引鍵不在清單中，將屬性設定為 O (`n`) 未排序的資料或 I/O 作業 (記錄`n`) 如果清單的結尾處加入新項目。 如果插入會導致調整大小，作業為 O (`n`)。"
  syntax:
    content: public virtual object this[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "取得或設定要使用的值相關聯的金鑰。"
    return:
      type: System.Object
      description: "與相關聯的值<code> key </code>中的參數<xref href=&quot;System.Collections.SortedList&quot;></xref>物件，如果<code> key </code>找到，否則<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.SortedList.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "此屬性設定和<xref href=&quot;System.Collections.SortedList&quot;></xref>物件是唯讀的。       -或-此屬性設定， <code> key </code>不存在於集合中，而<xref href=&quot;System.Collections.SortedList&quot;></xref>有固定的大小。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "不是記憶體不足，無法新增項目的<xref href=&quot;System.Collections.SortedList&quot;> </xref>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "比較子會擲回例外狀況。"
  platform:
  - net462
- uid: System.Collections.SortedList.Keys
  id: Keys
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Keys
  nameWithType: SortedList.Keys
  fullName: System.Collections.SortedList.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得索引鍵中<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  remarks: "<xref:System.Collections.ICollection>物件是索引鍵的唯讀檢視表<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList> </xref:System.Collections.ICollection> <xref:System.Collections.SortedList>會立即反映在<xref:System.Collections.ICollection>.</xref:System.Collections.ICollection></xref:System.Collections.SortedList>基礎所做的修改       <xref:System.Collections.ICollection> <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>的索引鍵相同的順序排序</xref:System.Collections.ICollection>的項目       這個屬性是類似於<xref:System.Collections.SortedList.GetKeyList%2A>方法，但傳回<xref:System.Collections.ICollection>物件而非<xref:System.Collections.IList>物件。</xref:System.Collections.IList> </xref:System.Collections.ICollection> </xref:System.Collections.SortedList.GetKeyList%2A>       這個方法是一種 o （1） 運算。"
  syntax:
    content: public virtual System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>物件，其中包含中的索引鍵<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。</xref:System.Collections.ICollection>"
  overload: System.Collections.SortedList.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: SortedList.Remove(Object)
  fullName: System.Collections.SortedList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "移除具有指定之索引鍵的項目<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  remarks: "如果<xref:System.Collections.SortedList>物件不包含以指定的索引鍵的項目<xref:System.Collections.SortedList>維持不變。</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 擲不回任何例外狀況。       在連續項目，例如清單的集合中移除項的項目向上移動以佔用空出的位置。 如果集合具有索引，會移動之項目的索引也會更新。 這個問題不適用於集合的項目在概念上群組成 bucket，例如雜湊資料表。       這個方法是 O (`n`) 作業，其中`n`為<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.  \n  \n [!code-cs[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.collections.sor_6_1.cs)]\n [!code-cpp[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/cpp/m-system.collections.sor_6_1.cpp)]\n [!code-vb[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_6_1.vb)]"
  syntax:
    content: public virtual void Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "要移除之項目的索引鍵。"
  overload: System.Collections.SortedList.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref>物件是唯讀的。       -或- <xref href=&quot;System.Collections.SortedList&quot;> </xref>有固定的大小。"
  platform:
  - net462
- uid: System.Collections.SortedList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SortedList.RemoveAt(Int32)
  fullName: System.Collections.SortedList.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "移除位於指定索引處的項目<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  remarks: "索引的順序為基礎的排序順序。 當已新增的項目時，它會插入<xref:System.Collections.SortedList>中正確的排序順序和索引據此調整。</xref:System.Collections.SortedList> 移除項目時，索引也會據以的調整。 加入或移除項目時，特定的索引鍵/值組的索引可能會因此，變更<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList>       在連續項目，例如清單的集合中移除項的項目向上移動以佔用空出的位置。 如果集合具有索引，會移動之項目的索引也會更新。 這個問題不適用於集合的項目在概念上群組成 bucket，例如雜湊資料表。       這個方法是 O (`n`) 作業，其中`n`為<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.  \n  \n [!code-cs[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.collections.sor_17_1.cs)]\n [!code-cpp[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/cpp/m-system.collections.sor_17_1.cpp)]\n [!code-vb[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_17_1.vb)]"
  syntax:
    content: public virtual void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "若要移除的項目以零為起始的索引。"
  overload: System.Collections.SortedList.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>有效索引範圍之外<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref>處於唯讀狀態。       -或- <xref href=&quot;System.Collections.SortedList&quot;> </xref>有固定的大小。"
  platform:
  - net462
- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  id: SetByIndex(System.Int32,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SetByIndex(Int32,Object)
  nameWithType: SortedList.SetByIndex(Int32,Object)
  fullName: System.Collections.SortedList.SetByIndex(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取代位於指定索引中的值<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  remarks: "索引的順序為基礎的排序順序。 當已新增的項目時，它會插入<xref:System.Collections.SortedList>中正確的排序順序和索引據此調整。</xref:System.Collections.SortedList> 移除項目時，索引也會據以的調整。 加入或移除項目時，特定的索引鍵/值組的索引可能會因此，變更<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList>       這個方法是一種 o （1） 運算。"
  example:
  - "The following code example shows how to replace the value of an existing element in a <xref:System.Collections.SortedList> object.  \n  \n [!code-vb[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_13_1.vb)]\n [!code-cs[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_13_1.cs)]\n [!code-cpp[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_13_1.cpp)]"
  syntax:
    content: public virtual void SetByIndex (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "以零為起始的索引處儲存`value`。"
    - id: value
      type: System.Object
      description: "<xref:System.Object>將其儲存到<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。</xref:System.Object> 這個值可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.SortedList.SetByIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>有效索引範圍之外<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  platform:
  - net462
- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  id: Synchronized(System.Collections.SortedList)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Synchronized(SortedList)
  nameWithType: SortedList.Synchronized(SortedList)
  fullName: System.Collections.SortedList.Synchronized(SortedList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "傳回同步 （安全執行緒） 包裝函式<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  remarks: "若要保證的執行緒安全<xref:System.Collections.SortedList>物件時，所有作業必須都透過這個包裝函式只。</xref:System.Collections.SortedList>       透過集合進行列舉在本質上並不是安全執行緒程序。 即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。 若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。"
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.sor_10_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.sor_10_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.sor_10_1.vb)]  \n  \n This method is an O(1) operation.  \n  \n The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.sor_10_2.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.sor_10_2.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_10_2.vb)]"
  syntax:
    content: public static System.Collections.SortedList Synchronized (System.Collections.SortedList list);
    parameters:
    - id: list
      type: System.Collections.SortedList
      description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref>物件同步處理。"
    return:
      type: System.Collections.SortedList
      description: "同步處理 （安全執行緒） 包裝函式<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  overload: System.Collections.SortedList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.SortedList.SyncRoot
  id: SyncRoot
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
  fullName: System.Collections.SortedList.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得物件，可用來同步處理存取具備<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  remarks: "若要建立的同步化的版本<xref:System.Collections.SortedList>物件，請使用<xref:System.Collections.SortedList.Synchronized%2A>方法。</xref:System.Collections.SortedList.Synchronized%2A> </xref:System.Collections.SortedList> 不過，在衍生的類別可以提供自己的同步處理的版本<xref:System.Collections.SortedList>使用 SyncRoot 屬性。</xref:System.Collections.SortedList> 同步處理的程式碼必須在上執行作業的 SyncRoot <xref:System.Collections.SortedList>，不是直接在<xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 這可確保衍生自其他物件的集合正常運作。 具體而言，保持正常的同步處理與其他可能同時修改的執行緒<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList>       透過集合進行列舉在本質上並不是安全執行緒程序。 即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。 若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。"
  example:
  - "The following code example shows how to lock the collection using the SyncRoot property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sor_0_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sor_0_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sor_0_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "物件，可用來同步處理存取具備<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  overload: System.Collections.SortedList.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "傳回<xref:System.Collections.IEnumerator>逐一<xref href=&quot;System.Collections.SortedList&quot;> </xref>。</xref:System.Collections.IEnumerator>"
  remarks: "[Visual Basic、 C#]      `foreach` C# 語言的陳述式 (`for each`在 Visual Basic 中) 會隱藏列舉值的複雜度。  因此，使用`foreach`建議，而不是直接管理 列舉值。       列舉程式可以用來讀取集合中的資料，但無法用於修改基礎集合。       一開始，列舉程式位在集合中的第一個項目之前。 <xref:System.Collections.IEnumerator.Reset%2A>也會列舉值帶回至這個位置。</xref:System.Collections.IEnumerator.Reset%2A> 在這個位置上，呼叫<xref:System.Collections.IEnumerator.Current%2A>擲回例外狀況。</xref:System.Collections.IEnumerator.Current%2A> 因此，您必須呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>前進的第一個元素之前讀取<xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A>值集合的列舉值</xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>會傳回相同的物件直到<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>稱為。</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>設定<xref:System.Collections.IEnumerator.Current%2A>下一個項目。</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       如果<xref:System.Collections.IEnumerator.MoveNext%2A>超過集合的列舉值的結尾會位於集合中的最後一個元素之後和<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 列舉值位於這個位置上，後續呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>也會傳回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> 如果最後一個呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>傳回`false`，則呼叫<xref:System.Collections.IEnumerator.Current%2A>擲回例外狀況。</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 若要設定<xref:System.Collections.IEnumerator.Current%2A>的第一個元素的集合，您可以呼叫<xref:System.Collections.IEnumerator.Reset%2A>後面加上<xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       只要集合維持不變，列舉程式就持續有效。 如果對集合進行變更，例如加入、 修改或刪除項目，列舉程式會永久失效，而且下一個呼叫<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>擲回<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 如果之間修改集合<xref:System.Collections.IEnumerator.MoveNext%2A>和<xref:System.Collections.IEnumerator.Current%2A>，<xref:System.Collections.IEnumerator.Current%2A>傳回項目所設定，即使列舉值已經無效。</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       列舉程式沒有集合的獨佔存取因此，列舉集合在本質上並非安全執行緒程序。 即使集合經過同步化，其他的執行緒仍可修改該集合，使列舉值擲回例外狀況。 若要保證列舉過程的執行緒安全，您可以在整個列舉過程中鎖定集合，或攔截由其他執行緒的變更所造成的例外狀況。       這個方法是一種 o （1） 運算。"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Collections.SortedList&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.TrimToSize
  id: TrimToSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: TrimToSize()
  nameWithType: SortedList.TrimToSize()
  fullName: System.Collections.SortedList.TrimToSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "將容量設中的項目實際數目<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。"
  remarks: "這個方法可用記憶體降到最低集合的額外負荷如果沒有新的項目會加入至集合。       若要重設<xref:System.Collections.SortedList>物件設為初始狀態，呼叫<xref:System.Collections.SortedList.Clear%2A>方法，然後再呼叫 TrimToSize。</xref:System.Collections.SortedList.Clear%2A> </xref:System.Collections.SortedList> 修剪空白<xref:System.Collections.SortedList>設定的容量<xref:System.Collections.SortedList>預設容量。</xref:System.Collections.SortedList> </xref:System.Collections.SortedList>       這個方法是 O (`n`) 作業，其中`n`為<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear its values.  \n  \n [!code-cpp[Classic SortedList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.sor_3_1.cpp)]\n [!code-cs[Classic SortedList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.sor_3_1.cs)]\n [!code-vb[Classic SortedList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_3_1.vb)]"
  syntax:
    content: public virtual void TrimToSize ();
    parameters: []
  overload: System.Collections.SortedList.TrimToSize*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref>物件是唯讀的。       -或- <xref href=&quot;System.Collections.SortedList&quot;> </xref>有固定的大小。"
  platform:
  - net462
- uid: System.Collections.SortedList.Values
  id: Values
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Values
  nameWithType: SortedList.Values
  fullName: System.Collections.SortedList.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得值， <xref href=&quot;System.Collections.SortedList&quot;> </xref>物件。"
  remarks: "<xref:System.Collections.ICollection>物件是唯讀值的檢視<xref:System.Collections.SortedList>物件。</xref:System.Collections.SortedList> </xref:System.Collections.ICollection> <xref:System.Collections.SortedList>會立即反映在<xref:System.Collections.ICollection>.</xref:System.Collections.ICollection></xref:System.Collections.SortedList>基礎所做的修改       <xref:System.Collections.ICollection>作為<xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>的值相同的順序排序</xref:System.Collections.ICollection>的項目       這個屬性是類似於<xref:System.Collections.SortedList.GetValueList%2A>方法，但傳回<xref:System.Collections.ICollection>物件而非<xref:System.Collections.IList>物件。</xref:System.Collections.IList> </xref:System.Collections.ICollection> </xref:System.Collections.SortedList.GetValueList%2A>       這個方法是一種 o （1） 運算。"
  syntax:
    content: public virtual System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>物件，其中包含中的值<xref href=&quot;System.Collections.SortedList&quot;></xref>物件。</xref:System.Collections.ICollection>"
  overload: System.Collections.SortedList.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Collections.SortedList.#ctor
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList()
  nameWithType: SortedList.SortedList()
  fullName: System.Collections.SortedList.SortedList()
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IComparer)
  nameWithType: SortedList.SortedList(IComparer)
  fullName: System.Collections.SortedList.SortedList(IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IDictionary)
  nameWithType: SortedList.SortedList(IDictionary)
  fullName: System.Collections.SortedList.SortedList(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.SortedList.#ctor(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(Int32)
  nameWithType: SortedList.SortedList(Int32)
  fullName: System.Collections.SortedList.SortedList(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IComparer,Int32)
  nameWithType: SortedList.SortedList(IComparer,Int32)
  fullName: System.Collections.SortedList.SortedList(IComparer,Int32)
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IDictionary,IComparer)
  nameWithType: SortedList.SortedList(IDictionary,IComparer)
  fullName: System.Collections.SortedList.SortedList(IDictionary,IComparer)
- uid: System.Collections.SortedList.Add(System.Object,System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Add(Object,Object)
  nameWithType: SortedList.Add(Object,Object)
  fullName: System.Collections.SortedList.Add(Object,Object)
- uid: System.Collections.SortedList.Capacity
  parent: System.Collections.SortedList
  isExternal: false
  name: Capacity
  nameWithType: SortedList.Capacity
  fullName: System.Collections.SortedList.Capacity
- uid: System.Collections.SortedList.Clear
  parent: System.Collections.SortedList
  isExternal: false
  name: Clear()
  nameWithType: SortedList.Clear()
  fullName: System.Collections.SortedList.Clear()
- uid: System.Collections.SortedList.Clone
  parent: System.Collections.SortedList
  isExternal: false
  name: Clone()
  nameWithType: SortedList.Clone()
  fullName: System.Collections.SortedList.Clone()
- uid: System.Collections.SortedList.Contains(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Contains(Object)
  nameWithType: SortedList.Contains(Object)
  fullName: System.Collections.SortedList.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.SortedList.ContainsKey(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsKey(Object)
  nameWithType: SortedList.ContainsKey(Object)
  fullName: System.Collections.SortedList.ContainsKey(Object)
- uid: System.Collections.SortedList.ContainsValue(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsValue(Object)
  nameWithType: SortedList.ContainsValue(Object)
  fullName: System.Collections.SortedList.ContainsValue(Object)
- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: SortedList.CopyTo(Array,Int32)
  fullName: System.Collections.SortedList.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.SortedList.Count
  parent: System.Collections.SortedList
  isExternal: false
  name: Count
  nameWithType: SortedList.Count
  fullName: System.Collections.SortedList.Count
- uid: System.Collections.SortedList.GetByIndex(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: GetByIndex(Int32)
  nameWithType: SortedList.GetByIndex(Int32)
  fullName: System.Collections.SortedList.GetByIndex(Int32)
- uid: System.Collections.SortedList.GetEnumerator
  parent: System.Collections.SortedList
  isExternal: false
  name: GetEnumerator()
  nameWithType: SortedList.GetEnumerator()
  fullName: System.Collections.SortedList.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.SortedList.GetKey(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKey(Int32)
  nameWithType: SortedList.GetKey(Int32)
  fullName: System.Collections.SortedList.GetKey(Int32)
- uid: System.Collections.SortedList.GetKeyList
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKeyList()
  nameWithType: SortedList.GetKeyList()
  fullName: System.Collections.SortedList.GetKeyList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.SortedList.GetValueList
  parent: System.Collections.SortedList
  isExternal: false
  name: GetValueList()
  nameWithType: SortedList.GetValueList()
  fullName: System.Collections.SortedList.GetValueList()
- uid: System.Collections.SortedList.IndexOfKey(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfKey(Object)
  nameWithType: SortedList.IndexOfKey(Object)
  fullName: System.Collections.SortedList.IndexOfKey(Object)
- uid: System.Collections.SortedList.IndexOfValue(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfValue(Object)
  nameWithType: SortedList.IndexOfValue(Object)
  fullName: System.Collections.SortedList.IndexOfValue(Object)
- uid: System.Collections.SortedList.IsFixedSize
  parent: System.Collections.SortedList
  isExternal: false
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
  fullName: System.Collections.SortedList.IsFixedSize
- uid: System.Collections.SortedList.IsReadOnly
  parent: System.Collections.SortedList
  isExternal: false
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
  fullName: System.Collections.SortedList.IsReadOnly
- uid: System.Collections.SortedList.IsSynchronized
  parent: System.Collections.SortedList
  isExternal: false
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
  fullName: System.Collections.SortedList.IsSynchronized
- uid: System.Collections.SortedList.Item(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Item(Object)
  nameWithType: SortedList.Item(Object)
  fullName: System.Collections.SortedList.Item(Object)
- uid: System.Collections.SortedList.Keys
  parent: System.Collections.SortedList
  isExternal: false
  name: Keys
  nameWithType: SortedList.Keys
  fullName: System.Collections.SortedList.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.SortedList.Remove(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Remove(Object)
  nameWithType: SortedList.Remove(Object)
  fullName: System.Collections.SortedList.Remove(Object)
- uid: System.Collections.SortedList.RemoveAt(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SortedList.RemoveAt(Int32)
  fullName: System.Collections.SortedList.RemoveAt(Int32)
- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: SetByIndex(Int32,Object)
  nameWithType: SortedList.SetByIndex(Int32,Object)
  fullName: System.Collections.SortedList.SetByIndex(Int32,Object)
- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  parent: System.Collections.SortedList
  isExternal: false
  name: Synchronized(SortedList)
  nameWithType: SortedList.Synchronized(SortedList)
  fullName: System.Collections.SortedList.Synchronized(SortedList)
- uid: System.Collections.SortedList
  parent: System.Collections
  isExternal: false
  name: SortedList
  nameWithType: SortedList
  fullName: System.Collections.SortedList
- uid: System.Collections.SortedList.SyncRoot
  parent: System.Collections.SortedList
  isExternal: false
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
  fullName: System.Collections.SortedList.SyncRoot
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.SortedList
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.SortedList.TrimToSize
  parent: System.Collections.SortedList
  isExternal: false
  name: TrimToSize()
  nameWithType: SortedList.TrimToSize()
  fullName: System.Collections.SortedList.TrimToSize()
- uid: System.Collections.SortedList.Values
  parent: System.Collections.SortedList
  isExternal: false
  name: Values
  nameWithType: SortedList.Values
  fullName: System.Collections.SortedList.Values
- uid: System.Collections.SortedList.#ctor*
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList
  nameWithType: SortedList.SortedList
- uid: System.Collections.SortedList.Add*
  parent: System.Collections.SortedList
  isExternal: false
  name: Add
  nameWithType: SortedList.Add
- uid: System.Collections.SortedList.Capacity*
  parent: System.Collections.SortedList
  isExternal: false
  name: Capacity
  nameWithType: SortedList.Capacity
- uid: System.Collections.SortedList.Clear*
  parent: System.Collections.SortedList
  isExternal: false
  name: Clear
  nameWithType: SortedList.Clear
- uid: System.Collections.SortedList.Clone*
  parent: System.Collections.SortedList
  isExternal: false
  name: Clone
  nameWithType: SortedList.Clone
- uid: System.Collections.SortedList.Contains*
  parent: System.Collections.SortedList
  isExternal: false
  name: Contains
  nameWithType: SortedList.Contains
- uid: System.Collections.SortedList.ContainsKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsKey
  nameWithType: SortedList.ContainsKey
- uid: System.Collections.SortedList.ContainsValue*
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsValue
  nameWithType: SortedList.ContainsValue
- uid: System.Collections.SortedList.CopyTo*
  parent: System.Collections.SortedList
  isExternal: false
  name: CopyTo
  nameWithType: SortedList.CopyTo
- uid: System.Collections.SortedList.Count*
  parent: System.Collections.SortedList
  isExternal: false
  name: Count
  nameWithType: SortedList.Count
- uid: System.Collections.SortedList.GetByIndex*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetByIndex
  nameWithType: SortedList.GetByIndex
- uid: System.Collections.SortedList.GetEnumerator*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetEnumerator
  nameWithType: SortedList.GetEnumerator
- uid: System.Collections.SortedList.GetKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKey
  nameWithType: SortedList.GetKey
- uid: System.Collections.SortedList.GetKeyList*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKeyList
  nameWithType: SortedList.GetKeyList
- uid: System.Collections.SortedList.GetValueList*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetValueList
  nameWithType: SortedList.GetValueList
- uid: System.Collections.SortedList.IndexOfKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfKey
  nameWithType: SortedList.IndexOfKey
- uid: System.Collections.SortedList.IndexOfValue*
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfValue
  nameWithType: SortedList.IndexOfValue
- uid: System.Collections.SortedList.IsFixedSize*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
- uid: System.Collections.SortedList.IsReadOnly*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
- uid: System.Collections.SortedList.IsSynchronized*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
- uid: System.Collections.SortedList.Item*
  parent: System.Collections.SortedList
  isExternal: false
  name: Item
  nameWithType: SortedList.Item
- uid: System.Collections.SortedList.Keys*
  parent: System.Collections.SortedList
  isExternal: false
  name: Keys
  nameWithType: SortedList.Keys
- uid: System.Collections.SortedList.Remove*
  parent: System.Collections.SortedList
  isExternal: false
  name: Remove
  nameWithType: SortedList.Remove
- uid: System.Collections.SortedList.RemoveAt*
  parent: System.Collections.SortedList
  isExternal: false
  name: RemoveAt
  nameWithType: SortedList.RemoveAt
- uid: System.Collections.SortedList.SetByIndex*
  parent: System.Collections.SortedList
  isExternal: false
  name: SetByIndex
  nameWithType: SortedList.SetByIndex
- uid: System.Collections.SortedList.Synchronized*
  parent: System.Collections.SortedList
  isExternal: false
  name: Synchronized
  nameWithType: SortedList.Synchronized
- uid: System.Collections.SortedList.SyncRoot*
  parent: System.Collections.SortedList
  isExternal: false
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.SortedList
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.SortedList.TrimToSize*
  parent: System.Collections.SortedList
  isExternal: false
  name: TrimToSize
  nameWithType: SortedList.TrimToSize
- uid: System.Collections.SortedList.Values*
  parent: System.Collections.SortedList
  isExternal: false
  name: Values
  nameWithType: SortedList.Values
