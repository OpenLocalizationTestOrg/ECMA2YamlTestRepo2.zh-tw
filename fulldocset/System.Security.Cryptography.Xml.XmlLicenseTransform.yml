### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform
  id: XmlLicenseTransform
  children:
  - System.Security.Cryptography.Xml.XmlLicenseTransform.#ctor
  - System.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor
  - System.Security.Cryptography.Xml.XmlLicenseTransform.GetInnerXml
  - System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput
  - System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput(System.Type)
  - System.Security.Cryptography.Xml.XmlLicenseTransform.InputTypes
  - System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInnerXml(System.Xml.XmlNodeList)
  - System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInput(System.Object)
  - System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes
  langs:
  - csharp
  name: XmlLicenseTransform
  nameWithType: XmlLicenseTransform
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform
  type: Class
  summary: "表示用來正規化簽章 XrML 授權的授權轉換演算法。"
  remarks: "XmlLicenseTransform 類別代表授權轉換演算法 MPEG 權限延伸模組 (MPEG REL) 語言中所定義。       您可以使用 XmlLicenseTransform 類別轉換簽章 XrML 授權。       描述 XmlLicenseTransform 類別統一資源識別元 (URI) 由定義<xref:System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl>欄位。</xref:System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl>"
  example:
  - "The following code example shows how to validate an XML digital signature using the <xref:System.Security.Cryptography.Xml.IRelDecryptor> interface and the XmlLicenseTransform class.  \n  \n [!code-cs[Cryptography.XML.XmlLicenseTransform#2](~/add/codesnippet/csharp/t-system.security.crypto_114_1.cs)]\n [!code-cpp[Cryptography.XML.XmlLicenseTransform#2](~/add/codesnippet/cpp/t-system.security.crypto_114_1.cpp)]\n [!code-vb[Cryptography.XML.XmlLicenseTransform#2](~/add/codesnippet/visualbasic/t-system.security.crypto_114_1.vb)]"
  syntax:
    content: 'public class XmlLicenseTransform : System.Security.Cryptography.Xml.Transform'
  inheritance:
  - System.Object
  - System.Security.Cryptography.Xml.Transform
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.Xml.Transform.Algorithm
  - System.Security.Cryptography.Xml.Transform.Context
  - System.Security.Cryptography.Xml.Transform.GetDigestedOutput(System.Security.Cryptography.HashAlgorithm)
  - System.Security.Cryptography.Xml.Transform.GetXml
  - System.Security.Cryptography.Xml.Transform.PropagatedNamespaces
  - System.Security.Cryptography.Xml.Transform.Resolver
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  langs:
  - csharp
  name: XmlLicenseTransform()
  nameWithType: XmlLicenseTransform.XmlLicenseTransform()
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.XmlLicenseTransform()
  type: Constructor
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>類別。"
  syntax:
    content: public XmlLicenseTransform ();
    parameters: []
  overload: System.Security.Cryptography.Xml.XmlLicenseTransform.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor
  id: Decryptor
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  langs:
  - csharp
  name: Decryptor
  nameWithType: XmlLicenseTransform.Decryptor
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "取得或設定目前的解密程式來<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>物件。"
  remarks: "<xref:System.Security.Cryptography.Xml.XmlLicenseTransform>物件會使用<xref:System.Security.Cryptography.Xml.IRelDecryptor>介面，以解密`<encryptedGrant>`從目前的項目`<license>`項目。</xref:System.Security.Cryptography.Xml.IRelDecryptor> </xref:System.Security.Cryptography.Xml.XmlLicenseTransform>"
  example:
  - "The following code example shows how to validate an XML digital signature using the <xref:System.Security.Cryptography.Xml.IRelDecryptor> interface and the <xref:System.Security.Cryptography.Xml.XmlLicenseTransform> class.  \n  \n [!code-cs[Cryptography.XML.XmlLicenseTransform#2](~/add/codesnippet/csharp/p-system.security.crypto_17_1.cs)]\n [!code-cpp[Cryptography.XML.XmlLicenseTransform#2](~/add/codesnippet/cpp/p-system.security.crypto_17_1.cpp)]\n [!code-vb[Cryptography.XML.XmlLicenseTransform#2](~/add/codesnippet/visualbasic/p-system.security.crypto_17_1.vb)]"
  syntax:
    content: public System.Security.Cryptography.Xml.IRelDecryptor Decryptor { get; set; }
    return:
      type: System.Security.Cryptography.Xml.IRelDecryptor
      description: "目前的解密程式來<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>物件。"
  overload: System.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.GetInnerXml
  id: GetInnerXml
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  langs:
  - csharp
  name: GetInnerXml()
  nameWithType: XmlLicenseTransform.GetInnerXml()
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.GetInnerXml()
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "傳回參數的 XML 表示法<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>都適合用來為 XMLDSIG 的子元素所包含的物件<xref uid=&quot;langword_csharp_&lt;Transform&gt;&quot; name=&quot;&lt;Transform&gt;&quot; href=&quot;&quot;></xref>項目。"
  syntax:
    content: protected override System.Xml.XmlNodeList GetInnerXml ();
    parameters: []
    return:
      type: System.Xml.XmlNodeList
      description: "代表特定轉換的內容說明目前所需的 XML 節點的清單<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>中 XMLDSIG 物件<xref uid=&quot;langword_csharp_&lt;Transform&gt;&quot; name=&quot;&lt;Transform&gt;&quot; href=&quot;&quot;></xref>項目。"
  overload: System.Security.Cryptography.Xml.XmlLicenseTransform.GetInnerXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput
  id: GetOutput
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  langs:
  - csharp
  name: GetOutput()
  nameWithType: XmlLicenseTransform.GetOutput()
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput()
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "傳回的輸出<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>物件。"
  remarks: "傳回物件的類型必須是<xref:System.Xml.XmlDocument>.</xref:System.Xml.XmlDocument>"
  syntax:
    content: public override object GetOutput ();
    parameters: []
    return:
      type: System.Object
      description: "輸出<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>物件。"
  overload: System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput(System.Type)
  id: GetOutput(System.Type)
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  langs:
  - csharp
  name: GetOutput(Type)
  nameWithType: XmlLicenseTransform.GetOutput(Type)
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput(Type)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "傳回的輸出<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>物件。"
  syntax:
    content: public override object GetOutput (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "要傳回之輸出的類型。 <xref href=&quot;System.Xml.XmlDocument&quot;></xref>是為此參數唯一有效的類型。"
    return:
      type: System.Object
      description: "輸出<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>物件。"
  overload: System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> type </code>參數不是<xref href=&quot;System.Xml.XmlDocument&quot;></xref>物件。"
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.InputTypes
  id: InputTypes
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  langs:
  - csharp
  name: InputTypes
  nameWithType: XmlLicenseTransform.InputTypes
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.InputTypes
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "取得屬於有效的輸入之型別的陣列<xref:System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes*>方法目前<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>物件。</xref:System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes*>"
  remarks: "以<xref:System.Security.Cryptography.Xml.XmlLicenseTransform>類別為<xref:System.Xml.XmlDocument>。</xref:System.Xml.XmlDocument></xref:System.Security.Cryptography.Xml.XmlLicenseTransform>的唯一有效的輸入的類型"
  syntax:
    content: public override Type[] InputTypes { get; }
    return:
      type: System.Type[]
      description: "屬於有效的輸入之型別的陣列<> *> 方法目前<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>物件; 您可以將只有其中一個這些類型的物件傳遞<> *> 方法目前<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>物件。"
  overload: System.Security.Cryptography.Xml.XmlLicenseTransform.InputTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInnerXml(System.Xml.XmlNodeList)
  id: LoadInnerXml(System.Xml.XmlNodeList)
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  langs:
  - csharp
  name: LoadInnerXml(XmlNodeList)
  nameWithType: XmlLicenseTransform.LoadInnerXml(XmlNodeList)
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInnerXml(XmlNodeList)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "剖析指定<xref href=&quot;System.Xml.XmlNodeList&quot;></xref>物件做為轉換特定內容的<xref uid=&quot;langword_csharp_&lt;Transform&gt;&quot; name=&quot;&lt;Transform&gt;&quot; href=&quot;&quot;></xref>項目; 這個方法不支援，因為<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>物件沒有任何內部的 XML 項目。"
  syntax:
    content: public override void LoadInnerXml (System.Xml.XmlNodeList nodeList);
    parameters:
    - id: nodeList
      type: System.Xml.XmlNodeList
      description: "<xref href=&quot;System.Xml.XmlNodeList&quot;> </xref>封裝載入到目前的轉換物件<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>物件。"
  overload: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInnerXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInput(System.Object)
  id: LoadInput(System.Object)
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  langs:
  - csharp
  name: LoadInput(Object)
  nameWithType: XmlLicenseTransform.LoadInput(Object)
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInput(Object)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "將目前載入指定的輸入<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>物件。"
  syntax:
    content: public override void LoadInput (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "要載入到目前之輸入<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>物件。 輸入物件的類型必須是<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>。"
  overload: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInput*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "內容未設定在叫用這個轉換之前。       -或- <xref uid=&quot;langword_csharp_&lt;issuer&gt;&quot; name=&quot;&lt;issuer&gt;&quot; href=&quot;&quot;> </xref>項目未設定在叫用這個轉換之前。       -或- <xref uid=&quot;langword_csharp_&lt;license&gt;&quot; name=&quot;&lt;license&gt;&quot; href=&quot;&quot;> </xref>項目未設定在叫用這個轉換之前。       -或-<xref:System.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor*>屬性未設定在叫用這個轉換之前。</xref:System.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor*>"
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes
  id: OutputTypes
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  langs:
  - csharp
  name: OutputTypes
  nameWithType: XmlLicenseTransform.OutputTypes
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "取得屬於有效 OutputTypes 方法在目前的輸出之型別的陣列<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>物件。"
  remarks: "以<xref:System.Security.Cryptography.Xml.XmlLicenseTransform>類別為<xref:System.Xml.XmlDocument>。</xref:System.Xml.XmlDocument></xref:System.Security.Cryptography.Xml.XmlLicenseTransform>的唯一有效的輸出類型"
  syntax:
    content: public override Type[] OutputTypes { get; }
    return:
      type: System.Type[]
      description: "在目前有效的輸出型別的陣列<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>物件，只有物件的下列其中一種會從傳回型別<xref:System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput*>方法在目前的<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>物件。</xref:System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput*>"
  overload: System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: System.Security.Cryptography.Xml.Transform
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.#ctor
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: XmlLicenseTransform()
  nameWithType: XmlLicenseTransform.XmlLicenseTransform()
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.XmlLicenseTransform()
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: Decryptor
  nameWithType: XmlLicenseTransform.Decryptor
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor
- uid: System.Security.Cryptography.Xml.IRelDecryptor
  parent: System.Security.Cryptography.Xml
  isExternal: false
  name: IRelDecryptor
  nameWithType: IRelDecryptor
  fullName: System.Security.Cryptography.Xml.IRelDecryptor
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.GetInnerXml
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: GetInnerXml()
  nameWithType: XmlLicenseTransform.GetInnerXml()
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.GetInnerXml()
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: GetOutput()
  nameWithType: XmlLicenseTransform.GetOutput()
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput(System.Type)
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: GetOutput(Type)
  nameWithType: XmlLicenseTransform.GetOutput(Type)
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.InputTypes
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: InputTypes
  nameWithType: XmlLicenseTransform.InputTypes
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.InputTypes
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInnerXml(System.Xml.XmlNodeList)
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: LoadInnerXml(XmlNodeList)
  nameWithType: XmlLicenseTransform.LoadInnerXml(XmlNodeList)
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInnerXml(XmlNodeList)
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInput(System.Object)
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: LoadInput(Object)
  nameWithType: XmlLicenseTransform.LoadInput(Object)
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInput(Object)
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: OutputTypes
  nameWithType: XmlLicenseTransform.OutputTypes
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.#ctor*
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: XmlLicenseTransform
  nameWithType: XmlLicenseTransform.XmlLicenseTransform
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor*
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: Decryptor
  nameWithType: XmlLicenseTransform.Decryptor
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.GetInnerXml*
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: GetInnerXml
  nameWithType: XmlLicenseTransform.GetInnerXml
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput*
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: GetOutput
  nameWithType: XmlLicenseTransform.GetOutput
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.InputTypes*
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: InputTypes
  nameWithType: XmlLicenseTransform.InputTypes
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInnerXml*
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: LoadInnerXml
  nameWithType: XmlLicenseTransform.LoadInnerXml
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInput*
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: LoadInput
  nameWithType: XmlLicenseTransform.LoadInput
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes*
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: OutputTypes
  nameWithType: XmlLicenseTransform.OutputTypes
