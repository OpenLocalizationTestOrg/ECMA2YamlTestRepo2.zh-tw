### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission
  id: ClaimsPrincipalPermission
  children:
  - System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)
  - System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)
  - System.IdentityModel.Services.ClaimsPrincipalPermission.Copy
  - System.IdentityModel.Services.ClaimsPrincipalPermission.Demand
  - System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)
  - System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)
  - System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)
  - System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted
  - System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml
  - System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: ClaimsPrincipalPermission
  nameWithType: ClaimsPrincipalPermission
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission
  type: Class
  summary: "代表使用的權限<xref href=&quot;System.Security.Claims.ClaimsAuthorizationManager&quot;></xref>實作，以判斷是否資源的存取權應該授與使用中的主體。 這個類別無法被繼承。"
  remarks: "The ClaimsPrincipalPermission class provides the capability to perform imperative access checks by using the <xref:System.Security.Claims.ClaimsAuthorizationManager> that is configured for an application. By invoking the <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> method or the static <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> method, you can provide protection to resources from within the execution path of your code according to the authorization policy defined for your claims authentication manager. Declarative access checks can be performed by using the <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> class.  \n  \n> [!IMPORTANT]\n>  The ClaimsPrincipalPermission class uses the claims authorization manager configured by the <xref:System.IdentityModel.Configuration.IdentityConfiguration> that is set under the <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=fullName> property. This is true in all cases, even in scenarios where WS-Federation is not used; for example, active (WCF) Web applications and Console applications. You can specify the claims authorization manager either in configuration or programmatically. To specify the claims authorization manager in a configuration file, set the [\\&lt;claimsAuthorizationManager\\&gt;](../Topic/%3CclaimsAuthorizationManager%3E.md) element under an [\\&lt;identityConfiguration\\&gt;](../Topic/%3CidentityConfiguration%3E.md) element and ensure that this identity configuration is referenced by the [\\&lt;federationConfiguration\\&gt;](../Topic/%3CfederationConfiguration%3E.md) element that is loaded by the runtime (for example, by setting the `identityConfigurationName` attribute). To set the claims authorization manager programmatically, provide a handler for the <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=fullName> event.  \n  \n On one level, the functionality provided by ClaimsPrincipalPermission is similar to the role-based access checks (RBAC) provided through the <xref:System.Security.Permissions.PrincipalPermission> class; however, the <xref:System.Security.Claims.ClaimsAuthorizationManager> class performs checks based on the claims presented by the active principal. This enables far more granularity than is available through pure RBAC, where many permissions are typically collected under a single role. Perhaps, more importantly, claims-based authorization enables better separation of business logic and authorization policy because permission can be demanded for a specific action on a resource in code and back-end policy can be used to configure which claims the presenting entity must possess in order to satisfy the demand. Like RBAC, ClaimsPrincipalPermission performs a user-based access check, that is, unlike code access security implemented by classes that derive from the <xref:System.Security.CodeAccessPermission> class and use a stack walk to ensure that all callers of the code have been granted a permission, ClaimsPrincipalPermission performs its check only on the current principal.  \n  \n The static <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> method checks access for a specified action on a specified resource. The resource and action are both strings and are typically URIs. You can also initialize an instance of ClaimsPrincipalPermission with an action and a resource and call the <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> method. Although the constructor only takes a single resource and action, ClaimsPrincipalPermission objects can be combined through the <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> and <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> methods. A permission created by using these methods may contain multiple resource-action pairs.  \n  \n Both methods determine access by invoking the <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=fullName> method of the configured claims authorization manager with an <xref:System.Security.Claims.AuthorizationContext> composed of the active principal (<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>), the resource, and the action. They throw a <xref:System.Security.SecurityException> if the current principal is not authorized to perform the action on the resource; otherwise, execution proceeds.  \n  \n In the case of a ClaimsPrincipalPermission that contains multiple resource-action pairs, the <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=fullName> method is invoked for each of the resource-action pairs contained in the permission.  For the call to <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> to succeed, the active principal must be authorized for all of the resource-action pairs contained in the permission."
  example:
  - "The following example shows how to protect a resource by using the <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> method, the <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> method, or a <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> declaration. In each case, the configured <xref:System.Security.Claims.ClaimsAuthorizationManager> is invoked to evaluate the current principal against the specified resource and action. If the current principal is not authorized for the specified action on the specified resource, a <xref:System.Security.SecurityException> is thrown; otherwise, execution proceeds.  \n  \n [!code-cs[WifCppWithCam#1](~/add/codesnippet/csharp/wifcppwithcam/program.cs#1)]  \n  \n The following XML shows the minimum configuration required to use a custom claims authorization manager with the ClaimsPrincipalPermission class. You must, at a minimum, declare both the `system.identityModel` and the `system.identityModel.services` sections in the `<configSection>` element and then specify your authorization manager in a [\\&lt;claimsAuthorizationManager\\&gt;](../Topic/%3CclaimsAuthorizationManager%3E.md) element under the default identity configuration. This will ensure that your authorization manager is referenced from the default federation configuration. Alternatively, you can specify the name of the identity configuration under which your authorization manager is specified in the `identityConfigurationName` attribute of the [\\&lt;federationConfiguration\\&gt;](../Topic/%3CfederationConfiguration%3E.md) element.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n  <configSections>  \n    <!-- WIF configuration sections -->  \n    <section name=\"system.identityModel\" type=\"System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089\"/>  \n    <section name=\"system.identityModel.services\" type=\"System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089\"/>  \n  </configSections>  \n  \n  <startup>  \n    <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n  </startup>  \n  \n  <system.identityModel>  \n    <identityConfiguration>  \n      <claimsAuthorizationManager type =\"MyClaimsAuthorizationManager.MyClaimsAuthorizationManager, MyClaimsAuthorizationManager\"/>  \n    </identityConfiguration>  \n  </system.identityModel>  \n  \n</configuration>  \n```"
  syntax:
    content: 'public sealed class ClaimsPrincipalPermission : System.Security.IPermission, System.Security.Permissions.IUnrestrictedPermission'
  inheritance:
  - System.Object
  implements:
  - System.Security.IPermission
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  langs:
  - csharp
  name: ClaimsPrincipalPermission(String,String)
  nameWithType: ClaimsPrincipalPermission.ClaimsPrincipalPermission(String,String)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.ClaimsPrincipalPermission(String,String)
  type: Constructor
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "建立的新執行個體<xref href=&quot;System.IdentityModel.Services.ClaimsPrincipalPermission&quot;></xref>類別。"
  remarks: "<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>物件使用指定的資源動作組初始化。</xref:System.IdentityModel.Services.ClaimsPrincipalPermission> 您可以呼叫<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>方法，以執行存取檢查。</xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>       雖然建構函式只接受單一資源和動作、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>物件可以透過結合<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A>和<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A>方法。</xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> </xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> </xref:System.IdentityModel.Services.ClaimsPrincipalPermission> 透過這些方法建立的權限可能包含多個資源動作配對。"
  syntax:
    content: public ClaimsPrincipalPermission (string resource, string action);
    parameters:
    - id: resource
      type: System.String
      description: "資源應該在其授權的主體。"
    - id: action
      type: System.String
      description: "主體要授權的動作。"
  overload: System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>resource</code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或空字串。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>action</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)
  id: CheckAccess(System.String,System.String)
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  langs:
  - csharp
  name: CheckAccess(String,String)
  nameWithType: ClaimsPrincipalPermission.CheckAccess(String,String)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(String,String)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "檢查是否目前的主體已獲授權在指定的資源上執行指定的動作。"
  remarks: "主體必須經過授權，針對指定的資源上指定的動作或<xref:System.Security.SecurityException>擲回例外狀況。</xref:System.Security.SecurityException>       <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=fullName>設定的 claims authorization manager 授權的方法用來叫用<xref:System.Security.Claims.AuthorizationContext>作用中的主體所組成 (<xref:System.Threading.Thread.CurrentPrincipal%2A>)、 資源和動作。</xref:System.Threading.Thread.CurrentPrincipal%2A> </xref:System.Security.Claims.AuthorizationContext> </xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=fullName>"
  example:
  - "The following example shows how to protect a resource by using the CheckAccess method. The configured claims authorization manager is invoked to evaluate the current principal against the specified resource and action. If the current principal is not authorized for the specified action on the specified resource, a <xref:System.Security.SecurityException> is thrown; otherwise, execution proceeds.  \n  \n [!code-cs[WifCppWithCam#2](~/add/codesnippet/csharp/wifcppwithcam/program.cs#2)]"
  syntax:
    content: public static void CheckAccess (string resource, string action);
    parameters:
    - id: resource
      type: System.String
      description: "資源應該在其授權的主體。"
    - id: action
      type: System.String
      description: "主體要授權的動作。"
  overload: System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "目前的主體不是可從<xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>。       -或-沒有任何<xref href=&quot;System.Security.Claims.ClaimsAuthorizationManager&quot;></xref>設定。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "授權檢查失敗。"
  platform:
  - net462
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Copy
  id: Copy
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: ClaimsPrincipalPermission.Copy()
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.Copy()
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "傳回目前的複本<xref href=&quot;System.IdentityModel.Services.ClaimsPrincipalPermission&quot;></xref>執行個體。"
  syntax:
    content: public System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "A <xref href=&quot;System.IdentityModel.Services.ClaimsPrincipalPermission&quot;> </xref>複製目前的執行個體。"
  overload: System.IdentityModel.Services.ClaimsPrincipalPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Demand
  id: Demand
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  langs:
  - csharp
  name: Demand()
  nameWithType: ClaimsPrincipalPermission.Demand()
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.Demand()
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "會檢查目前的主體已獲授權的目前執行個體相關聯的資源動作組。"
  remarks: "目前的主體必須經過授權，所有與這個執行個體相關聯的資源動作組或<xref:System.Security.SecurityException>擲回例外狀況。</xref:System.Security.SecurityException>       雖然建構函式只接受單一資源和動作、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>物件可以透過結合<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A>和<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A>方法。</xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> </xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> </xref:System.IdentityModel.Services.ClaimsPrincipalPermission> 透過這些方法建立的權限可能包含多個資源動作配對。       要求方法會叫用<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=fullName>方法設定的 claims authorization manager 授權與<xref:System.Security.Claims.AuthorizationContext>作用中的主體所組成 (<xref:System.Threading.Thread.CurrentPrincipal%2A>)，資源，並針對每個資源動作組所包含的權限中的動作。</xref:System.Threading.Thread.CurrentPrincipal%2A> </xref:System.Security.Claims.AuthorizationContext> </xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=fullName> 必須為所有包含的權限中的資源動作組成功作用中的主體指定授權。"
  example:
  - "The following example shows how to protect a resource by using the Demand method. The configured claims authorization manager is invoked to evaluate the current principal against the specified resource and action. If the current principal is not authorized for the specified action on the specified resource, a <xref:System.Security.SecurityException> is thrown; otherwise, execution proceeds.  \n  \n [!code-cs[WifCppWithCam#3](~/add/codesnippet/csharp/wifcppwithcam/program.cs#3)]"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.IdentityModel.Services.ClaimsPrincipalPermission.Demand*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "目前的主體不是可從<xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>。       -或-沒有任何<xref href=&quot;System.Security.Claims.ClaimsAuthorizationManager&quot;></xref>設定。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "授權檢查失敗。"
  platform:
  - net462
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: ClaimsPrincipalPermission.FromXml(SecurityElement)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "目前的權限與指定的 XML 編碼方式的狀態，重新建構。"
  remarks: "重新建構權限的呼叫所建立的 XML 編碼<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml%2A>方法。</xref:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml%2A>"
  syntax:
    content: public void FromXml (System.Security.SecurityElement element);
    parameters:
    - id: element
      type: System.Security.SecurityElement
      description: "XML 編碼用來重新建構權限。"
  overload: System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>element</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "編碼方式包含無法辨識的項目或屬性或格式不正確的 XML。"
  platform:
  - net462
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: ClaimsPrincipalPermission.Intersect(IPermission)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "傳回目前權限和指定的權限交集的權限。"
  remarks: "傳回的權限有只出現在目前的權限和指定的權限中的資源動作組。 存在於其中之一或其他的權限的資源動作組不包含。 如<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>成功新權限，目前的主體只需要獲得目前權限與指定權限的共用資源動作組。</xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>"
  syntax:
    content: public System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "若要與目前權限產生交集的權限。 它必須是執行個體<xref href=&quot;System.IdentityModel.Services.ClaimsPrincipalPermission&quot;> </xref>。"
    return:
      type: System.Security.IPermission
      description: "新<xref href=&quot;System.IdentityModel.Services.ClaimsPrincipalPermission&quot;> </xref> ，代表目前權限和指定的權限; 交集或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果<code> target </code>是<code> null </code>或不是執行個體的<xref href=&quot;System.IdentityModel.Services.ClaimsPrincipalPermission&quot;> </xref>。"
  overload: System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: ClaimsPrincipalPermission.IsSubsetOf(IPermission)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "傳回值，指出目前的權限是否為指定的權限的子集。"
  remarks: "如果所有包含在目前的權限的資源動作組也會出現在指定的權限，目前的權限會是所指定權限的子集。 如果`target`是`null`或不是執行個體的<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>，IsSubsetOf 傳回`false`。</xref:System.IdentityModel.Services.ClaimsPrincipalPermission>"
  syntax:
    content: public bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "要測試子集關聯性的權限。 它必須是執行個體<xref href=&quot;System.IdentityModel.Services.ClaimsPrincipalPermission&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果目前權限是指定的權限的子集否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: ClaimsPrincipalPermission.IsUnrestricted()
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted()
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "傳回值，指出是否不受限制的權限。"
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果權限不受限制;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 一律傳回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指出權限不受限制。"
  overload: System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml
  id: ToXml
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: ClaimsPrincipalPermission.ToXml()
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml()
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "傳回 XML 編碼格式目前權限和其狀態。"
  remarks: "主體就可以重新建構的 XML 編碼格式藉由呼叫<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml%2A>方法。</xref:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml%2A>"
  syntax:
    content: public System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "XML 編碼格式目前權限和其狀態。"
  overload: System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: ClaimsPrincipalPermission.Union(IPermission)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.Union(IPermission)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "傳回目前的權限與指定權限的聯集的新權限。 <xref href=&quot;System.IdentityModel.Services.ClaimsPrincipalPermission&quot;></xref>物件，其中包含所有目前的執行個體與目標執行個體中的資源動作組。"
  remarks: "傳回的權限都具有所有會在目前的權限的資源動作組和所有的資源動作組指定的權限。 如<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>成功新權限，目前的主體必須經過授權，為存在於目前的權限的資源動作組與所有存在於指定的權限的資源動作組。</xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>"
  syntax:
    content: public System.Security.IPermission Union (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "要與目前權限結合的權限。 它必須是型別<xref href=&quot;System.IdentityModel.Services.ClaimsPrincipalPermission&quot;> </xref>。"
    return:
      type: System.Security.IPermission
      description: "新<xref href=&quot;System.IdentityModel.Services.ClaimsPrincipalPermission&quot;> </xref> ，代表目前的權限與指定的權限的聯集或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果<code> target </code>是<code> null </code>或不是執行個體的<xref href=&quot;System.IdentityModel.Services.ClaimsPrincipalPermission&quot;> </xref>。"
  overload: System.IdentityModel.Services.ClaimsPrincipalPermission.Union*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: ClaimsPrincipalPermission(String,String)
  nameWithType: ClaimsPrincipalPermission.ClaimsPrincipalPermission(String,String)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.ClaimsPrincipalPermission(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: CheckAccess(String,String)
  nameWithType: ClaimsPrincipalPermission.CheckAccess(String,String)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(String,String)
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Copy
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: Copy()
  nameWithType: ClaimsPrincipalPermission.Copy()
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Demand
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: Demand()
  nameWithType: ClaimsPrincipalPermission.Demand()
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.Demand()
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: ClaimsPrincipalPermission.FromXml(SecurityElement)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: ClaimsPrincipalPermission.Intersect(IPermission)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(IPermission)
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: ClaimsPrincipalPermission.IsSubsetOf(IPermission)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: ClaimsPrincipalPermission.IsUnrestricted()
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted()
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: ToXml()
  nameWithType: ClaimsPrincipalPermission.ToXml()
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml()
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: ClaimsPrincipalPermission.Union(IPermission)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.Union(IPermission)
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor*
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: ClaimsPrincipalPermission
  nameWithType: ClaimsPrincipalPermission.ClaimsPrincipalPermission
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess*
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: CheckAccess
  nameWithType: ClaimsPrincipalPermission.CheckAccess
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Copy*
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: Copy
  nameWithType: ClaimsPrincipalPermission.Copy
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Demand*
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: Demand
  nameWithType: ClaimsPrincipalPermission.Demand
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml*
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: FromXml
  nameWithType: ClaimsPrincipalPermission.FromXml
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect*
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: Intersect
  nameWithType: ClaimsPrincipalPermission.Intersect
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf*
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: ClaimsPrincipalPermission.IsSubsetOf
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted*
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: ClaimsPrincipalPermission.IsUnrestricted
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml*
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: ToXml
  nameWithType: ClaimsPrincipalPermission.ToXml
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Union*
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: Union
  nameWithType: ClaimsPrincipalPermission.Union
