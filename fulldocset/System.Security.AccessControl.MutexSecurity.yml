### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.MutexSecurity
  id: MutexSecurity
  children:
  - System.Security.AccessControl.MutexSecurity.#ctor
  - System.Security.AccessControl.MutexSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.MutexSecurity.AccessRightType
  - System.Security.AccessControl.MutexSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.MutexSecurity.AccessRuleType
  - System.Security.AccessControl.MutexSecurity.AddAccessRule(System.Security.AccessControl.MutexAccessRule)
  - System.Security.AccessControl.MutexSecurity.AddAuditRule(System.Security.AccessControl.MutexAuditRule)
  - System.Security.AccessControl.MutexSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  - System.Security.AccessControl.MutexSecurity.AuditRuleType
  - System.Security.AccessControl.MutexSecurity.RemoveAccessRule(System.Security.AccessControl.MutexAccessRule)
  - System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(System.Security.AccessControl.MutexAccessRule)
  - System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.MutexAccessRule)
  - System.Security.AccessControl.MutexSecurity.RemoveAuditRule(System.Security.AccessControl.MutexAuditRule)
  - System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(System.Security.AccessControl.MutexAuditRule)
  - System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.MutexAuditRule)
  - System.Security.AccessControl.MutexSecurity.ResetAccessRule(System.Security.AccessControl.MutexAccessRule)
  - System.Security.AccessControl.MutexSecurity.SetAccessRule(System.Security.AccessControl.MutexAccessRule)
  - System.Security.AccessControl.MutexSecurity.SetAuditRule(System.Security.AccessControl.MutexAuditRule)
  langs:
  - csharp
  name: MutexSecurity
  nameWithType: MutexSecurity
  fullName: System.Security.AccessControl.MutexSecurity
  type: Class
  summary: "代表具名 mutex 的 Windows 存取控制安全性。 這個類別無法被繼承。"
  remarks: "MutexSecurity 物件指定具名的系統 mutex 的存取權限，也會指定如何稽核存取嘗試。 Mutex 的存取權限會由每個存取規則的規則，以表示<xref:System.Security.AccessControl.MutexAccessRule>物件。</xref:System.Security.AccessControl.MutexAccessRule> 每個稽核規則由<xref:System.Security.AccessControl.MutexAuditRule>物件。</xref:System.Security.AccessControl.MutexAuditRule>       這會反映基礎的 Windows 安全性系統，其中每個安全性實體物件都有最多一個判別存取控制清單 (DACL) 控制存取受保護的物件，並最多一個系統存取控制清單 (SACL)，指定稽核的存取嘗試。 DACL，SACL 會排序清單的指定存取和稽核使用者和群組的存取控制項目 (ACE)。 A<xref:System.Security.AccessControl.MutexAccessRule>或<xref:System.Security.AccessControl.MutexAuditRule>物件可能代表一個以上的 ACE。</xref:System.Security.AccessControl.MutexAuditRule> </xref:System.Security.AccessControl.MutexAccessRule>      > [!NOTE] > A<xref:System.Threading.Mutex>物件可代表本機 mutex 或具名的系統 mutex。</xref:System.Threading.Mutex> Windows 存取控制安全性是有意義，只會針對具名的系統 mutex。       MutexSecurity <xref:System.Security.AccessControl.MutexAccessRule>，和<xref:System.Security.AccessControl.MutexAuditRule>類別隱藏 Acl 和 Ace 的實作詳細資料。</xref:System.Security.AccessControl.MutexAuditRule> </xref:System.Security.AccessControl.MutexAccessRule> 它們可讓您忽略十七不同的 ACE 類型，並正確地維護繼承和存取權限傳播的複雜性。 這些物件也為了避免下列常見的存取控制項錯誤:-建立具有 null DACL 的安全性描述元。 DACL 的 null 參考可讓任何使用者新增到物件，也有可能產生的阻絕服務攻擊的存取規則。 此外，新的 MutexSecurity 物件一律會以空的 DACL，它會拒絕所有使用者的所有存取開頭。      -違反 Ace 的標準順序。 如果 DACL 中的 ACE 清單不會保持在標準順序，使用者可能會不小心指定存取受保護的物件。 比方說，拒絕的存取權限必須永遠出現之前允許的存取權限。 MutexSecurity 物件會在內部維護正確的順序。      -管理安全性描述元旗標，它應該只資源管理員的控制下。      -建立無效的 ACE 旗標組合。      -管理繼承的 Ace。 繼承和傳用是由資源管理員，以回應變更您對存取和稽核規則處理。      -無意義的 Ace 只插入 Acl。       不支援.NET 安全性物件的唯一功能是危險的活動，應該避免的大部分應用程式開發人員，如下所示:-通常由資源管理員執行的低階工作。      -新增或移除存取控制項目不會維護標準順序的方式。       若要修改 Windows 具名 mutex 的存取控制安全性，請使用<xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName>方法來取得 MutexSecurity 物件。</xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> 修改安全性物件，透過加入和移除規則，然後再使用<xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>方法來重新附加它。</xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>      > [!IMPORTANT] > 對 MutexSecurity 物件進行的變更不會影響具名 mutex 的存取層級直到您呼叫<xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>將更改的安全性物件指派給具名 mutex 方法。</xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>       若要從一個 mutex 的存取控制安全性複製到另一個中，使用<xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName>方法來取得 MutexSecurity 物件，表示第一個 mutex 的存取和稽核規則，然後使用<xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>方法或建構函式可接受 MutexSecurity 物件，這些規則將第二個 mutex。</xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName> </xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName>       中的安全性描述元定義語言 (SDDL) 投資的使用者可以使用<xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A>方法，以設定具名 mutex 的存取規則和<xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>方法，以取得字串，代表 SDDL 格式中的存取規則。</xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> </xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> 建議您不要開發新項目。      > [!NOTE] > Windows 98 或 Windows Millennium Edition 不支援同步處理物件的安全性。"
  example:
  - "The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType> rules and <xref:System.Security.AccessControl.AccessControlType> rules, and shows the combination of rights in compatible rules. The example creates a MutexSecurity object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_12_1.vb)]\n [!code-cs[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_12_1.cs)]"
  syntax:
    content: 'public sealed class MutexSecurity : System.Security.AccessControl.NativeObjectSecurity'
  inheritance:
  - System.Object
  - System.Security.AccessControl.ObjectSecurity
  - System.Security.AccessControl.CommonObjectSecurity
  - System.Security.AccessControl.NativeObjectSecurity
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.AddAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.ResetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.ObjectSecurity.AccessRulesModified
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AuditRulesModified
  - System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.GroupModified
  - System.Security.AccessControl.ObjectSecurity.IsContainer
  - System.Security.AccessControl.ObjectSecurity.IsDS
  - System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported
  - System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.OwnerModified
  - System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.ReadLock
  - System.Security.AccessControl.ObjectSecurity.ReadUnlock
  - System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.WriteLock
  - System.Security.AccessControl.ObjectSecurity.WriteUnlock
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.#ctor
  id: '#ctor'
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: MutexSecurity()
  nameWithType: MutexSecurity.MutexSecurity()
  fullName: System.Security.AccessControl.MutexSecurity.MutexSecurity()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "初始化的新執行個體<xref href=&quot;System.Security.AccessControl.MutexSecurity&quot;></xref>類別具有預設值。"
  remarks: "新<xref:System.Security.AccessControl.MutexSecurity>物件一律開頭空白的判別存取清單 (DACL)，它會拒絕所有使用者的所有存取。</xref:System.Security.AccessControl.MutexSecurity>"
  syntax:
    content: public MutexSecurity ();
    parameters: []
  overload: System.Security.AccessControl.MutexSecurity.#ctor*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "在 Windows 98 或 Windows Millennium Edition 上不支援這個類別。"
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  id: '#ctor(System.String,System.Security.AccessControl.AccessControlSections)'
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: MutexSecurity(String,AccessControlSections)
  nameWithType: MutexSecurity.MutexSecurity(String,AccessControlSections)
  fullName: System.Security.AccessControl.MutexSecurity.MutexSecurity(String,AccessControlSections)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "初始化的新執行個體<xref href=&quot;System.Security.AccessControl.MutexSecurity&quot;></xref>類別從具有指定名稱的系統 mutex 的存取控制安全性規則的指定區段。"
  remarks: "這個建構函式可讓您取得的具名的系統 mutex 的存取控制安全性，而不會先建立<xref:System.Threading.Mutex>物件。</xref:System.Threading.Mutex>       使用具名的系統物件時請務必小心。 如果是名為系統物件`name`無法 mutex，可能會擷取其存取控制安全性。"
  syntax:
    content: public MutexSecurity (string name, System.Security.AccessControl.AccessControlSections includeSections);
    parameters:
    - id: name
      type: System.String
      description: "要擷取其存取控制安全性規則的系統 mutex 的名稱。"
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "組合<xref href=&quot;System.Security.AccessControl.AccessControlSections&quot;></xref>旗標，指定要擷取的區段。"
  overload: System.Security.AccessControl.MutexSecurity.#ctor*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "沒有具有指定名稱的系統物件。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "在 Windows 98 或 Windows Millennium Edition 上不支援這個類別。"
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.AccessRightType
  id: AccessRightType
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: AccessRightType
  nameWithType: MutexSecurity.AccessRightType
  fullName: System.Security.AccessControl.MutexSecurity.AccessRightType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "取得列舉型別<xref href=&quot;System.Security.AccessControl.MutexSecurity&quot;></xref>類別用來表示的存取權限。"
  remarks: "類別衍生自<xref:System.Security.AccessControl.ObjectSecurity>類別覆寫<xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A>屬性，並傳回它們以表示的存取權限的類型。</xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> </xref:System.Security.AccessControl.ObjectSecurity> 當您使用陣列或包含多個類型的安全性物件的集合時，使用這個屬性來判斷要用於每個安全性物件的正確的列舉類型。"
  syntax:
    content: public override Type AccessRightType { get; }
    return:
      type: System.Type
      description: "A<xref:System.Type>物件，代表<xref href=&quot;System.Security.AccessControl.MutexRights&quot;></xref>列舉型別。</xref:System.Type>"
  overload: System.Security.AccessControl.MutexSecurity.AccessRightType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: MutexSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.MutexSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "建立新的存取控制規則所指定的使用者，使用指定的存取權限、 存取控制和旗標。"
  remarks: "若要建立存取控制規則的建議的方式是使用<xref:System.Security.AccessControl.MutexAccessRule>類別</xref:System.Security.AccessControl.MutexAccessRule>的建構函式      > [!NOTE] > 雖然繼承和傳播旗標是無意義的具名 mutex，就仍然可以指定它們。 這不是建議，因為它不必要地變得非常複雜的維護的規則，例如藉由干擾原本是相容的規則的組合。"
  syntax:
    content: public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "<xref href=&quot;System.Security.Principal.IdentityReference&quot;> </xref>識別使用者或群組規則會套用至。"
    - id: accessMask
      type: System.Int32
      description: "位元組合<xref href=&quot;System.Security.AccessControl.MutexRights&quot;></xref>轉換成整數的值，指定要允許或拒絕的存取權限。"
    - id: isInherited
      type: System.Boolean
      description: "無意義的具名 mutex，因為它們沒有任何階層。"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "無意義的具名 mutex，因為它們沒有任何階層。"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "無意義的具名 mutex，因為它們沒有任何階層。"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "其中一個<xref href=&quot;System.Security.AccessControl.AccessControlType&quot;></xref>值，指定是否允許或拒絕權限。"
    return:
      type: System.Security.AccessControl.AccessRule
      description: "A <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;> </xref>物件，代表指定之使用者的指定權限。"
  overload: System.Security.AccessControl.MutexSecurity.AccessRuleFactory*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>accessMask</code><code>inheritanceFlags</code>， <code>propagationFlags</code>，或<code>type</code>指定無效的值。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identityReference</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -或-<code>accessMask</code>為零。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identityReference</code>既不是類型<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>，或這類類型的<xref href=&quot;System.Security.Principal.NTAccount&quot;></xref>可以轉換為類型<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.AccessRuleType
  id: AccessRuleType
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: AccessRuleType
  nameWithType: MutexSecurity.AccessRuleType
  fullName: System.Security.AccessControl.MutexSecurity.AccessRuleType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "取得型別<xref href=&quot;System.Security.AccessControl.MutexSecurity&quot;></xref>類別用來代表存取規則。"
  remarks: "類別衍生自<xref:System.Security.AccessControl.ObjectSecurity>類別覆寫<xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A>屬性，並傳回它們以表示存取規則的類型。</xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> </xref:System.Security.AccessControl.ObjectSecurity> 當您使用陣列或包含多個類型的安全性物件的集合時，使用這個屬性來判斷用於每個安全性物件的正確的存取規則類型。"
  syntax:
    content: public override Type AccessRuleType { get; }
    return:
      type: System.Type
      description: "A<xref:System.Type>物件，代表<xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;></xref>類別</xref:System.Type>"
  overload: System.Security.AccessControl.MutexSecurity.AccessRuleType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.AddAccessRule(System.Security.AccessControl.MutexAccessRule)
  id: AddAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: AddAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.AddAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.AddAccessRule(MutexAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "搜尋符合的存取控制規則，可以與合併新規則。 如果找不到，加入新的規則。"
  remarks: "AddAccessRule 方法會搜尋具有相同的使用者或群組及相同的規則<xref:System.Security.AccessControl.AccessControlType>為`rule`。</xref:System.Security.AccessControl.AccessControlType> 如果找不到，`rule`加入。 如果找到相符的規則是中的權限`rule`會合併與現有的規則。"
  example:
  - "The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType> rules and <xref:System.Security.AccessControl.AccessControlType> rules, and shows the combination of rights in compatible rules. The example creates a <xref:System.Security.AccessControl.MutexSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName><xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/a07c477f-17a9-4bd4-908e-_1.vb)]\n [!code-cs[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/csharp/a07c477f-17a9-4bd4-908e-_1.cs)]"
  syntax:
    content: public void AddAccessRule (System.Security.AccessControl.MutexAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAccessRule
      description: "若要加入之存取控制規則。"
  overload: System.Security.AccessControl.MutexSecurity.AddAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Principal.IdentityNotMappedException
    commentId: T:System.Security.Principal.IdentityNotMappedException
    description: "<code>rule </code>無法對應至已知的識別。"
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.AddAuditRule(System.Security.AccessControl.MutexAuditRule)
  id: AddAuditRule(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: AddAuditRule(MutexAuditRule)
  nameWithType: MutexSecurity.AddAuditRule(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.AddAuditRule(MutexAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "搜尋的稽核規則可以合併新規則。 如果找不到，加入新的規則。"
  remarks: "AddAuditRule 方法會搜尋具有相同的使用者或群組做為規則`rule`。 如果找不到，`rule`加入。 如果找到相符的規則是中的旗標`rule`會合併到現有的規則。"
  syntax:
    content: public void AddAuditRule (System.Security.AccessControl.MutexAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAuditRule
      description: "要加入的稽核規則。 此規則所指定的使用者會決定搜尋。"
  overload: System.Security.AccessControl.MutexSecurity.AddAuditRule*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  id: AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  nameWithType: MutexSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  fullName: System.Security.AccessControl.MutexSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "建立新的稽核規則，指定的使用者將規則套用到的存取權限，若要稽核，以及觸發程序稽核規則的結果。"
  remarks: "若要建立的稽核規則的建議的方式是使用<xref:System.Security.AccessControl.MutexAuditRule>類別</xref:System.Security.AccessControl.MutexAuditRule>的建構函式      > [!NOTE] > 雖然繼承和傳播旗標是無意義的具名 mutex，就仍然可以指定它們。 這不是建議，因為它不必要地變得非常複雜的維護的規則，例如藉由干擾原本是相容的規則的組合。"
  syntax:
    content: public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "<xref href=&quot;System.Security.Principal.IdentityReference&quot;> </xref>識別使用者或群組規則會套用至。"
    - id: accessMask
      type: System.Int32
      description: "位元組合<xref href=&quot;System.Security.AccessControl.MutexRights&quot;></xref>轉換成整數的值，指定要稽核的存取權限。"
    - id: isInherited
      type: System.Boolean
      description: "無意義的具名的等候控制代碼，因為它們沒有任何階層。"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "無意義的具名的等候控制代碼，因為它們沒有任何階層。"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "無意義的具名的等候控制代碼，因為它們沒有任何階層。"
    - id: flags
      type: System.Security.AccessControl.AuditFlags
      description: "位元組合<xref href=&quot;System.Security.AccessControl.AuditFlags&quot;></xref>值，指定是否要稽核成功的存取、 失敗的存取，或兩者。"
    return:
      type: System.Security.AccessControl.AuditRule
      description: "A <xref href=&quot;System.Security.AccessControl.MutexAuditRule&quot;> </xref>物件，代表指定之使用者指定的稽核規則。 方法的傳回型別是基底類別， <xref href=&quot;System.Security.AccessControl.AuditRule&quot;> </xref>，但傳回的值可以安全地轉換成衍生類別。"
  overload: System.Security.AccessControl.MutexSecurity.AuditRuleFactory*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>accessMask</code><code>inheritanceFlags</code>， <code>propagationFlags</code>，或<code>flags</code>指定無效的值。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identityReference</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -或-<code>accessMask</code>為零。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identityReference</code>既不是類型<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>，或這類類型的<xref href=&quot;System.Security.Principal.NTAccount&quot;></xref>可以轉換為類型<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.AuditRuleType
  id: AuditRuleType
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: AuditRuleType
  nameWithType: MutexSecurity.AuditRuleType
  fullName: System.Security.AccessControl.MutexSecurity.AuditRuleType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "取得型別<xref href=&quot;System.Security.AccessControl.MutexSecurity&quot;></xref>類別用來代表稽核規則。"
  remarks: "類別衍生自<xref:System.Security.AccessControl.ObjectSecurity>類別覆寫<xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A>屬性和傳回類型，用以代表稽核權限。</xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> </xref:System.Security.AccessControl.ObjectSecurity> 當您使用陣列或包含多個類型的安全性物件的集合時，使用這個屬性來判斷用於每個安全性物件的正確的稽核規則類型。"
  syntax:
    content: public override Type AuditRuleType { get; }
    return:
      type: System.Type
      description: "A<xref:System.Type>物件，代表<xref href=&quot;System.Security.AccessControl.MutexAuditRule&quot;></xref>類別</xref:System.Type>"
  overload: System.Security.AccessControl.MutexSecurity.AuditRuleType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRule(System.Security.AccessControl.MutexAccessRule)
  id: RemoveAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: RemoveAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.RemoveAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRule(MutexAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "搜尋具有相同的使用者的存取控制規則及<xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> （允許或拒絕） 所指定的規則，且具有相容的繼承和傳播旗標; 如果找到這類規則，指定的存取規則中所包含的權限會從中移除。"
  remarks: "目前<xref:System.Security.AccessControl.MutexSecurity>擁有相同的使用者和相同的規則會搜尋<xref:System.Security.AccessControl.AccessControlType>視為`rule`。</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.MutexSecurity> 如果找到任何這類規則，會採取任何動作，而且方法會傳回`false`。 如果找到比對規則，其繼承和相容性旗標會檢查在指定的旗標與相容性的`rule`。 如果找到不相容的規則，會採取任何動作，而且方法會傳回`false`。 如果找到具有相容的旗標的規則，在指定的權限`rule`移除了相容的規則，而且方法會傳回`true`。 如果`rule`指定不相容的規則中包含的權限，就會採取任何動作，與這些權限。 如果從相容的規則會移除所有的權限，整個規則會移除從目前<xref:System.Security.AccessControl.MutexSecurity>物件。</xref:System.Security.AccessControl.MutexSecurity>      > [!IMPORTANT] > 雖然您可以藉由建立它們與指定的 mutex 的存取規則的繼承和傳播旗標<xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A>方法時，建議您不要。</xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A> 繼承和傳播的具名 mutex，無意義，請存取規則的維護更為複雜。"
  example:
  - "The following code example demonstrates the use of the RemoveAccessRule method to remove rights from an <xref:System.Security.AccessControl.AccessControlType> rule in a <xref:System.Security.AccessControl.MutexSecurity> object. It also shows that other rights in `rule` are ignored.  \n  \n The example creates a <xref:System.Security.AccessControl.MutexSecurity> object and adds rules that allow and deny various rights for the current user. The rights allowed include <xref:System.Security.AccessControl.MutexRights>, <xref:System.Security.AccessControl.MutexRights>, and <xref:System.Security.AccessControl.MutexRights>. The example then creates a new rule for the current user, including <xref:System.Security.AccessControl.MutexRights> and <xref:System.Security.AccessControl.MutexRights> rights, and uses that rule with the RemoveAccessRule method to remove <xref:System.Security.AccessControl.MutexRights> from the <xref:System.Security.AccessControl.AccessControlType> rule in the <xref:System.Security.AccessControl.MutexSecurity> object. The extraneous <xref:System.Security.AccessControl.MutexRights> right in `rule` is ignored.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.MutexSecurity.RemoveAccessRule#1](~/add/codesnippet/visualbasic/02c8df82-84a8-4212-a3e0-_1.vb)]\n [!code-cs[System.Security.AccessControl.MutexSecurity.RemoveAccessRule#1](~/add/codesnippet/csharp/02c8df82-84a8-4212-a3e0-_1.cs)]"
  syntax:
    content: public bool RemoveAccessRule (System.Security.AccessControl.MutexAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAccessRule
      description: "A <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;> </xref>所指定的使用者和<xref href=&quot;System.Security.AccessControl.AccessControlType&quot;></xref>搜尋，和一組比對規則，如果的繼承和傳播旗標找到，就必須相容。 指定的權限移除相容的規則，如果找到。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果找到相容的規則否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.AccessControl.MutexSecurity.RemoveAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(System.Security.AccessControl.MutexAccessRule)
  id: RemoveAccessRuleAll(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: RemoveAccessRuleAll(MutexAccessRule)
  nameWithType: MutexSecurity.RemoveAccessRuleAll(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(MutexAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "搜尋所有存取控制規則具有相同的使用者和<xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> （允許或拒絕） 所指定規則，如果找到，則移除它們。"
  remarks: "目前<xref:System.Security.AccessControl.MutexSecurity>具備相同的使用者和相同的規則搜尋物件<xref:System.Security.AccessControl.AccessControlType>視為`rule`。</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.MutexSecurity> 指定的任何權限`rule`時執行這項搜尋將會被忽略。 如果找不到任何對應的規則，會不採取任何動作。"
  example:
  - "The following code example shows that the RemoveAccessRuleAll method removes all rules that match user and <xref:System.Security.AccessControl.AccessControlType>, ignoring rights.  \n  \n The example creates a <xref:System.Security.AccessControl.MutexSecurity> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref:System.Security.AccessControl.AccessControlType> rule. The example then creates a new rule that allows the current user to take ownership, and uses that rule to remove the <xref:System.Security.AccessControl.AccessControlType> rule from the <xref:System.Security.AccessControl.MutexSecurity> object.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll#1](~/add/codesnippet/csharp/6d97fdf7-4cee-497f-898e-_1.cs)]\n [!code-vb[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll#1](~/add/codesnippet/visualbasic/6d97fdf7-4cee-497f-898e-_1.vb)]"
  syntax:
    content: public void RemoveAccessRuleAll (System.Security.AccessControl.MutexAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAccessRule
      description: "A <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;> </xref>所指定的使用者和<xref href=&quot;System.Security.AccessControl.AccessControlType&quot;></xref>搜尋。 此規則所指定的任何權限都會被忽略。"
  overload: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.MutexAccessRule)
  id: RemoveAccessRuleSpecific(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: RemoveAccessRuleSpecific(MutexAccessRule)
  nameWithType: MutexSecurity.RemoveAccessRuleSpecific(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(MutexAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "搜尋符合指定的存取控制規則的規則，如果找到，則移除它。"
  remarks: "此規則會移除它完全符合時，才`rule`中所有詳細資料，包括旗標。 其他規則具有相同的使用者和<xref:System.Security.AccessControl.AccessControlType>不會受到影響。</xref:System.Security.AccessControl.AccessControlType>      > [!IMPORTANT] > 規則表示一或多個基礎存取控制項目 (ACE)，以及分割或修改使用者存取安全性規則時，視需要結合這些項目。 因此，規則可能不再存在於特定的表單時加入，而在此情況下，不能移除該 RemoveAccessRuleSpecific 方法。"
  example:
  - "The following code example shows that the RemoveAccessRuleSpecific method requires an exact match in order to remove a rule, and that rules to allow and deny rights are independent of each other.  \n  \n The example creates a <xref:System.Security.AccessControl.MutexSecurity> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref:System.Security.AccessControl.AccessControlType> access rule. The example then passes the original <xref:System.Security.AccessControl.AccessControlType> rule to the RemoveAccessRuleSpecific method, and displays the results, showing that nothing is deleted. The example then constructs a rule that matches the <xref:System.Security.AccessControl.AccessControlType> rule in the <xref:System.Security.AccessControl.MutexSecurity> object, and successfully uses the RemoveAccessRuleSpecific method to remove the rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific#1](~/add/codesnippet/visualbasic/fa20d5ab-0fa1-47be-9c16-_1.vb)]\n [!code-cs[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific#1](~/add/codesnippet/csharp/fa20d5ab-0fa1-47be-9c16-_1.cs)]"
  syntax:
    content: public void RemoveAccessRuleSpecific (System.Security.AccessControl.MutexAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAccessRule
      description: "<xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;> </xref>移除。"
  overload: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRule(System.Security.AccessControl.MutexAuditRule)
  id: RemoveAuditRule(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: RemoveAuditRule(MutexAuditRule)
  nameWithType: MutexSecurity.RemoveAuditRule(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRule(MutexAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "搜尋的存取控制規則具有相同的使用者指定的規則，以及具有相容的繼承和傳播旗標。如果找到相容的規則，就會移除指定之規則中所包含的權限。"
  remarks: "目前<xref:System.Security.AccessControl.MutexSecurity>搜尋具有相同的使用者的稽核規則`rule`。</xref:System.Security.AccessControl.MutexSecurity> 如果找到任何這類規則，會採取任何動作，而且方法會傳回`false`。 如果找到比對規則，其繼承和相容性旗標會檢查在指定的旗標與相容性的`rule`。 如果找到不相容的規則，會採取任何動作，而且方法會傳回`false`。 如果找到具有相容的旗標的規則，在指定的權限`rule`移除了相容的規則，而且方法會傳回`true`。 如果`rule`指定不相容的規則中包含的權限，就會採取任何動作，與這些權限。 如果從相容的規則會移除所有的權限，整個規則會移除從目前<xref:System.Security.AccessControl.MutexSecurity>物件。</xref:System.Security.AccessControl.MutexSecurity>      > [!IMPORTANT] > 雖然您可以藉由建立它們與指定 mutex 稽核規則、 繼承和傳播旗標<xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A>方法時，建議您不要。</xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A> 繼承和傳播的具名 mutex，無意義，請稽核規則的維護更為複雜。"
  syntax:
    content: public bool RemoveAuditRule (System.Security.AccessControl.MutexAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAuditRule
      description: "A <xref href=&quot;System.Security.AccessControl.MutexAuditRule&quot;> </xref>指定要搜尋的使用者和一組比對規則的繼承和傳播旗標時發現，必須與相容。 指定的權限移除相容的規則，如果找到。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果找到相容的規則否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.AccessControl.MutexSecurity.RemoveAuditRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(System.Security.AccessControl.MutexAuditRule)
  id: RemoveAuditRuleAll(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: RemoveAuditRuleAll(MutexAuditRule)
  nameWithType: MutexSecurity.RemoveAuditRuleAll(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(MutexAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "搜尋的所有稽核規則具有相同的使用者指定的規則，如果找到，會將它們移除。"
  remarks: "目前<xref:System.Security.AccessControl.MutexSecurity>搜尋中是否有具有相同的使用者的稽核規則`rule`。</xref:System.Security.AccessControl.MutexSecurity> 指定的任何權限`rule`時執行這項搜尋將會被忽略。 會移除所有比對規則。 如果找不到任何對應的規則，會不採取任何動作。"
  syntax:
    content: public void RemoveAuditRuleAll (System.Security.AccessControl.MutexAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAuditRule
      description: "A <xref href=&quot;System.Security.AccessControl.MutexAuditRule&quot;> </xref> ，指定要搜尋的使用者。 此規則所指定的任何權限都會被忽略。"
  overload: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.MutexAuditRule)
  id: RemoveAuditRuleSpecific(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: RemoveAuditRuleSpecific(MutexAuditRule)
  nameWithType: MutexSecurity.RemoveAuditRuleSpecific(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(MutexAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "搜尋符合指定的稽核規則的規則，如果找到，則移除它。"
  remarks: "此規則會移除它完全符合時，才`rule`中所有詳細資料，包括旗標。 不會影響同一個使用者的其他稽核規則。      > [!IMPORTANT] > 規則表示一或多個基礎存取控制項目 (ACE)，以及分割或修改使用者的安全性稽核規則時，視需要結合這些項目。 因此，規則可能不再存在於特定的表單時加入，而在此情況下，不能移除該 RemoveAuditRuleSpecific 方法。"
  syntax:
    content: public void RemoveAuditRuleSpecific (System.Security.AccessControl.MutexAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAuditRule
      description: "<xref href=&quot;System.Security.AccessControl.MutexAuditRule&quot;> </xref>移除。"
  overload: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.ResetAccessRule(System.Security.AccessControl.MutexAccessRule)
  id: ResetAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: ResetAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.ResetAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.ResetAccessRule(MutexAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "移除具有所指定之規則的相同使用者的所有存取控制規則，不論<xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref>，並將指定的規則。"
  remarks: "如果沒有使用者符合指定之規則的存取規則`rule`加入。"
  example:
  - "The following code example shows how the ResetAccessRule method replaces all rules for the matching user with the rule specified for the match.  \n  \n The example creates a <xref:System.Security.AccessControl.MutexSecurity> object and adds rules that allow and deny various rights for the current user. The example then creates a new rule that allows the current user full control, and uses the ResetAccessRule method to replace both of the existing rules with the new rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.MutexSecurity.ResetAccessRule#1](~/add/codesnippet/csharp/382093ed-47a5-4dd0-aee6-_1.cs)]\n [!code-vb[System.Security.AccessControl.MutexSecurity.ResetAccessRule#1](~/add/codesnippet/visualbasic/382093ed-47a5-4dd0-aee6-_1.vb)]"
  syntax:
    content: public void ResetAccessRule (System.Security.AccessControl.MutexAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAccessRule
      description: "The <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;></xref> to add. 此規則所指定的使用者可以決定之前加入這個規則所要移除的規則。"
  overload: System.Security.AccessControl.MutexSecurity.ResetAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.SetAccessRule(System.Security.AccessControl.MutexAccessRule)
  id: SetAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: SetAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.SetAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.SetAccessRule(MutexAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "移除所有的存取控制規則具有相同的使用者和<xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> （允許或拒絕） 所指定的規則，並將指定的規則。"
  remarks: "如果指定的規則有<xref:System.Security.AccessControl.AccessControlType>，這個方法的效果是要移除所有<xref:System.Security.AccessControl.AccessControlType>規則所指定的使用者，將其取代為指定的規則。</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.AccessControlType> 如果指定的規則有<xref:System.Security.AccessControl.AccessControlType>，則所有<xref:System.Security.AccessControl.AccessControlType>規則指定的使用者都取代成指定的規則。</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.AccessControlType>       如果沒有規則的使用者和<xref:System.Security.AccessControl.AccessControlType>符合指定之規則`rule`加入。</xref:System.Security.AccessControl.AccessControlType>"
  example:
  - "The following code example shows how the SetAccessRule method removes all rules that match both the user and the <xref:System.Security.AccessControl.AccessControlType> of `rule`, replacing them with `rule`.  \n  \n The example creates a <xref:System.Security.AccessControl.MutexSecurity> object and adds rules that allow and deny various rights for the current user. The example then creates a new rule that allows the current user full control, and uses the SetAccessRule method to replace the existing Allow rule with the new rule. The rule that denies access is not affected.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.MutexSecurity.SetAccessRule#1](~/add/codesnippet/visualbasic/5e6eedb1-8b35-40cc-b676-_1.vb)]\n [!code-cs[System.Security.AccessControl.MutexSecurity.SetAccessRule#1](~/add/codesnippet/csharp/5e6eedb1-8b35-40cc-b676-_1.cs)]"
  syntax:
    content: public void SetAccessRule (System.Security.AccessControl.MutexAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAccessRule
      description: "The <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;></xref> to add. 使用者和<xref href=&quot;System.Security.AccessControl.AccessControlType&quot;></xref>的這項規則可以決定之前加入這個規則所要移除的規則。"
  overload: System.Security.AccessControl.MutexSecurity.SetAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.SetAuditRule(System.Security.AccessControl.MutexAuditRule)
  id: SetAuditRule(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: SetAuditRule(MutexAuditRule)
  nameWithType: MutexSecurity.SetAuditRule(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.SetAuditRule(MutexAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "移除所有稽核規則具有相同的使用者所指定的規則，不論<xref href=&quot;System.Security.AccessControl.AuditFlags&quot;></xref>值，並將指定的規則。"
  remarks: "如果沒有使用者符合指定之規則的稽核規則`rule`加入。"
  syntax:
    content: public void SetAuditRule (System.Security.AccessControl.MutexAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAuditRule
      description: "The <xref href=&quot;System.Security.AccessControl.MutexAuditRule&quot;></xref> to add. 此規則所指定的使用者可以決定之前加入這個規則所要移除的規則。"
  overload: System.Security.AccessControl.MutexSecurity.SetAuditRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.AccessControl.NativeObjectSecurity
  isExternal: false
  name: System.Security.AccessControl.NativeObjectSecurity
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Principal.IdentityNotMappedException
  parent: System.Security.Principal
  isExternal: false
  name: IdentityNotMappedException
  nameWithType: IdentityNotMappedException
  fullName: System.Security.Principal.IdentityNotMappedException
- uid: System.Security.AccessControl.MutexSecurity.#ctor
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: MutexSecurity()
  nameWithType: MutexSecurity.MutexSecurity()
  fullName: System.Security.AccessControl.MutexSecurity.MutexSecurity()
- uid: System.Security.AccessControl.MutexSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: MutexSecurity(String,AccessControlSections)
  nameWithType: MutexSecurity.MutexSecurity(String,AccessControlSections)
  fullName: System.Security.AccessControl.MutexSecurity.MutexSecurity(String,AccessControlSections)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.AccessControlSections
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlSections
  nameWithType: AccessControlSections
  fullName: System.Security.AccessControl.AccessControlSections
- uid: System.Security.AccessControl.MutexSecurity.AccessRightType
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AccessRightType
  nameWithType: MutexSecurity.AccessRightType
  fullName: System.Security.AccessControl.MutexSecurity.AccessRightType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.AccessControl.MutexSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: MutexSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.MutexSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
- uid: System.Security.AccessControl.AccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessRule
  nameWithType: AccessRule
  fullName: System.Security.AccessControl.AccessRule
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  nameWithType: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  nameWithType: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.MutexSecurity.AccessRuleType
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AccessRuleType
  nameWithType: MutexSecurity.AccessRuleType
  fullName: System.Security.AccessControl.MutexSecurity.AccessRuleType
- uid: System.Security.AccessControl.MutexSecurity.AddAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AddAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.AddAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.AddAccessRule(MutexAccessRule)
- uid: System.Security.AccessControl.MutexAccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: MutexAccessRule
  nameWithType: MutexAccessRule
  fullName: System.Security.AccessControl.MutexAccessRule
- uid: System.Security.AccessControl.MutexSecurity.AddAuditRule(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AddAuditRule(MutexAuditRule)
  nameWithType: MutexSecurity.AddAuditRule(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.AddAuditRule(MutexAuditRule)
- uid: System.Security.AccessControl.MutexAuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: MutexAuditRule
  nameWithType: MutexAuditRule
  fullName: System.Security.AccessControl.MutexAuditRule
- uid: System.Security.AccessControl.MutexSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  nameWithType: MutexSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  fullName: System.Security.AccessControl.MutexSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
- uid: System.Security.AccessControl.AuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditRule
  nameWithType: AuditRule
  fullName: System.Security.AccessControl.AuditRule
- uid: System.Security.AccessControl.AuditFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditFlags
  nameWithType: AuditFlags
  fullName: System.Security.AccessControl.AuditFlags
- uid: System.Security.AccessControl.MutexSecurity.AuditRuleType
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AuditRuleType
  nameWithType: MutexSecurity.AuditRuleType
  fullName: System.Security.AccessControl.MutexSecurity.AuditRuleType
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.RemoveAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRule(MutexAccessRule)
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAccessRuleAll(MutexAccessRule)
  nameWithType: MutexSecurity.RemoveAccessRuleAll(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(MutexAccessRule)
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAccessRuleSpecific(MutexAccessRule)
  nameWithType: MutexSecurity.RemoveAccessRuleSpecific(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(MutexAccessRule)
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRule(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAuditRule(MutexAuditRule)
  nameWithType: MutexSecurity.RemoveAuditRule(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRule(MutexAuditRule)
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAuditRuleAll(MutexAuditRule)
  nameWithType: MutexSecurity.RemoveAuditRuleAll(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(MutexAuditRule)
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAuditRuleSpecific(MutexAuditRule)
  nameWithType: MutexSecurity.RemoveAuditRuleSpecific(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(MutexAuditRule)
- uid: System.Security.AccessControl.MutexSecurity.ResetAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: ResetAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.ResetAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.ResetAccessRule(MutexAccessRule)
- uid: System.Security.AccessControl.MutexSecurity.SetAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: SetAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.SetAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.SetAccessRule(MutexAccessRule)
- uid: System.Security.AccessControl.MutexSecurity.SetAuditRule(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: SetAuditRule(MutexAuditRule)
  nameWithType: MutexSecurity.SetAuditRule(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.SetAuditRule(MutexAuditRule)
- uid: System.Security.AccessControl.MutexSecurity.#ctor*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: MutexSecurity
  nameWithType: MutexSecurity.MutexSecurity
- uid: System.Security.AccessControl.MutexSecurity.AccessRightType*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AccessRightType
  nameWithType: MutexSecurity.AccessRightType
- uid: System.Security.AccessControl.MutexSecurity.AccessRuleFactory*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AccessRuleFactory
  nameWithType: MutexSecurity.AccessRuleFactory
- uid: System.Security.AccessControl.MutexSecurity.AccessRuleType*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AccessRuleType
  nameWithType: MutexSecurity.AccessRuleType
- uid: System.Security.AccessControl.MutexSecurity.AddAccessRule*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AddAccessRule
  nameWithType: MutexSecurity.AddAccessRule
- uid: System.Security.AccessControl.MutexSecurity.AddAuditRule*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AddAuditRule
  nameWithType: MutexSecurity.AddAuditRule
- uid: System.Security.AccessControl.MutexSecurity.AuditRuleFactory*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AuditRuleFactory
  nameWithType: MutexSecurity.AuditRuleFactory
- uid: System.Security.AccessControl.MutexSecurity.AuditRuleType*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AuditRuleType
  nameWithType: MutexSecurity.AuditRuleType
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRule*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAccessRule
  nameWithType: MutexSecurity.RemoveAccessRule
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAccessRuleAll
  nameWithType: MutexSecurity.RemoveAccessRuleAll
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAccessRuleSpecific
  nameWithType: MutexSecurity.RemoveAccessRuleSpecific
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRule*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAuditRule
  nameWithType: MutexSecurity.RemoveAuditRule
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAuditRuleAll
  nameWithType: MutexSecurity.RemoveAuditRuleAll
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAuditRuleSpecific
  nameWithType: MutexSecurity.RemoveAuditRuleSpecific
- uid: System.Security.AccessControl.MutexSecurity.ResetAccessRule*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: ResetAccessRule
  nameWithType: MutexSecurity.ResetAccessRule
- uid: System.Security.AccessControl.MutexSecurity.SetAccessRule*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: SetAccessRule
  nameWithType: MutexSecurity.SetAccessRule
- uid: System.Security.AccessControl.MutexSecurity.SetAuditRule*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: SetAuditRule
  nameWithType: MutexSecurity.SetAuditRule
