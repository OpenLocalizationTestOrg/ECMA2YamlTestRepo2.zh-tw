### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.RandomNumberGenerator
  id: RandomNumberGenerator
  children:
  - System.Security.Cryptography.RandomNumberGenerator.#ctor
  - System.Security.Cryptography.RandomNumberGenerator.Create
  - System.Security.Cryptography.RandomNumberGenerator.Create(System.String)
  - System.Security.Cryptography.RandomNumberGenerator.Dispose
  - System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)
  - System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])
  - System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])
  langs:
  - csharp
  name: RandomNumberGenerator
  nameWithType: RandomNumberGenerator
  fullName: System.Security.Cryptography.RandomNumberGenerator
  type: Class
  summary: "表示從中衍生所有密碼編譯亂數產生器實作的抽象類別。"
  remarks: "密碼編譯亂數產生器建立密碼編譯強式隨機值。       應用程式程式碼直接使用這個類別。 此抽象類別的基底類別提供的所有密碼編譯亂數產生器。       密碼編譯亂數產生器的實作，使用 衍生的類別<xref:System.Security.Cryptography.RNGCryptoServiceProvider>.</xref:System.Security.Cryptography.RNGCryptoServiceProvider>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class RandomNumberGenerator : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: RandomNumberGenerator()
  nameWithType: RandomNumberGenerator.RandomNumberGenerator()
  fullName: System.Security.Cryptography.RandomNumberGenerator.RandomNumberGenerator()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.RandomNumberGenerator&quot;> </xref>。"
  remarks: "您無法建立抽象類別的執行個體。 應用程式程式碼會建立衍生類別的新執行個體。 密碼編譯亂數產生器的實作，使用 衍生的類別<xref:System.Security.Cryptography.RNGCryptoServiceProvider>.</xref:System.Security.Cryptography.RNGCryptoServiceProvider>"
  syntax:
    content: protected RandomNumberGenerator ();
    parameters: []
  overload: System.Security.Cryptography.RandomNumberGenerator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.Create
  id: Create
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: Create()
  nameWithType: RandomNumberGenerator.Create()
  fullName: System.Security.Cryptography.RandomNumberGenerator.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "當在衍生類別中覆寫時，會建立密碼編譯亂數產生器可以用來產生隨機資料的預設實作的執行個體。"
  syntax:
    content: public static System.Security.Cryptography.RandomNumberGenerator Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.RandomNumberGenerator
      description: "密碼編譯亂數產生器的新執行個體。"
  overload: System.Security.Cryptography.RandomNumberGenerator.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: Create(String)
  nameWithType: RandomNumberGenerator.Create(String)
  fullName: System.Security.Cryptography.RandomNumberGenerator.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "當在衍生類別中覆寫時，會建立指定的密碼編譯亂數產生器實作的執行個體。"
  syntax:
    content: public static System.Security.Cryptography.RandomNumberGenerator Create (string rngName);
    parameters:
    - id: rngName
      type: System.String
      description: "要使用的隨機號碼產生器實作的名稱。"
    return:
      type: System.Security.Cryptography.RandomNumberGenerator
      description: "密碼編譯亂數產生器的新執行個體。"
  overload: System.Security.Cryptography.RandomNumberGenerator.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose
  id: Dispose
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: RandomNumberGenerator.Dispose()
  fullName: System.Security.Cryptography.RandomNumberGenerator.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "在衍生類別中覆寫，釋出目前的執行個體所使用的所有資源<xref href=&quot;System.Security.Cryptography.RandomNumberGenerator&quot;></xref>類別。"
  remarks: "呼叫`Dispose`當您完成使用<xref:System.Security.Cryptography.RandomNumberGenerator>.</xref:System.Security.Cryptography.RandomNumberGenerator> `Dispose`方法會使<xref:System.Security.Cryptography.RandomNumberGenerator>中無法使用的狀態。</xref:System.Security.Cryptography.RandomNumberGenerator> 在呼叫`Dispose`，您必須釋放所有參考<xref:System.Security.Cryptography.RandomNumberGenerator>讓記憶體回收行程可以回收記憶體的<xref:System.Security.Cryptography.RandomNumberGenerator>所佔用。</xref:System.Security.Cryptography.RandomNumberGenerator> </xref:System.Security.Cryptography.RandomNumberGenerator>       如需詳細資訊，請參閱[清除 Unmanaged 資源上](~/add/includes/ajax-current-ext-md.md)和[實作 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      > [!NOTE] > 永遠呼叫`Dispose`釋放您的最後一個參考至<xref:System.Security.Cryptography.RandomNumberGenerator>。</xref:System.Security.Cryptography.RandomNumberGenerator>之前 否則，它所使用的資源將不會釋放直到記憶體回收行程呼叫<xref:System.Security.Cryptography.RandomNumberGenerator>物件的`Finalize`方法。</xref:System.Security.Cryptography.RandomNumberGenerator>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.RandomNumberGenerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: RandomNumberGenerator.Dispose(Boolean)
  fullName: System.Security.Cryptography.RandomNumberGenerator.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "當在衍生類別中覆寫時，釋放所使用的 unmanaged 的資源<xref href=&quot;System.Security.Cryptography.RandomNumberGenerator&quot;></xref>並選擇性釋放 managed 的資源。"
  remarks: "這個方法會呼叫公用`Dispose()`方法和`Finalize`方法。 `Dispose()`叫用受保護`Dispose(Boolean)`方法`disposing`參數設定為`true`。 `Finalize`叫用`Dispose`與`disposing`設`false`。       當`disposing`參數是`true`，這個方法的任何 managed 物件所持有的資源全部釋出這個<xref:System.Security.Cryptography.RandomNumberGenerator>參考。</xref:System.Security.Cryptography.RandomNumberGenerator> 這個方法會叫用`Dispose()`每個參考物件的方法。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>表示釋放 managed 和 unmanaged 資源，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>表示只釋放 unmanaged 的資源。"
  overload: System.Security.Cryptography.RandomNumberGenerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])
  id: GetBytes(System.Byte[])
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: GetBytes(Byte[])
  nameWithType: RandomNumberGenerator.GetBytes(Byte[])
  fullName: System.Security.Cryptography.RandomNumberGenerator.GetBytes(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "在衍生類別中覆寫，填入在密碼編譯方面強式隨機值序列的位元組陣列。"
  remarks: "位元組陣列的長度會決定要產生隨機位元組數目。"
  example:
  - "The following example creates a random sequence 100 bytes long and stores it in `random`.  \n  \n [!code-cs[Classic RandomNumberGenerator.GetBytes Example#1](~/add/codesnippet/csharp/m-system.security.crypto_63_1.cs)]\n [!code-cpp[Classic RandomNumberGenerator.GetBytes Example#1](~/add/codesnippet/cpp/m-system.security.crypto_63_1.cpp)]\n [!code-vb[Classic RandomNumberGenerator.GetBytes Example#1](~/add/codesnippet/visualbasic/m-system.security.crypto_63_1.vb)]"
  syntax:
    content: public abstract void GetBytes (byte[] data);
    parameters:
    - id: data
      type: System.Byte[]
      description: "要在密碼編譯方面強式隨機位元組填入的陣列。"
  overload: System.Security.Cryptography.RandomNumberGenerator.GetBytes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)
  id: GetBytes(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: GetBytes(Byte[],Int32,Int32)
  nameWithType: RandomNumberGenerator.GetBytes(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.RandomNumberGenerator.GetBytes(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "密碼編譯強式隨機值序列中填入指定的位元組陣列。"
  syntax:
    content: public virtual void GetBytes (byte[] data, int offset, int count);
    parameters:
    - id: data
      type: System.Byte[]
      description: "要在密碼編譯方面強式隨機位元組填入的陣列。"
    - id: offset
      type: System.Int32
      description: "若要開始填入作業陣列的索引。"
    - id: count
      type: System.Int32
      description: "要填入的位元組數目。"
  overload: System.Security.Cryptography.RandomNumberGenerator.GetBytes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>或<code>count</code>小於 0"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>加上<code>count</code>超過長度<code>data</code>。"
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])
  id: GetNonZeroBytes(System.Byte[])
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: GetNonZeroBytes(Byte[])
  nameWithType: RandomNumberGenerator.GetNonZeroBytes(Byte[])
  fullName: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "在衍生類別中覆寫，填入密碼編譯強式隨機非零值序列的位元組陣列。"
  remarks: "位元組陣列的長度會決定要產生隨機位元組數目。"
  example:
  - "The following example creates a random sequence of 100 nonzero bytes and stores it in `random`.  \n  \n [!code-cpp[Classic RandomNumberGenerator.GetNonZeroBytes Example#1](~/add/codesnippet/cpp/cf0179cb-fbea-47fb-bad6-_1.cpp)]\n [!code-cs[Classic RandomNumberGenerator.GetNonZeroBytes Example#1](~/add/codesnippet/csharp/cf0179cb-fbea-47fb-bad6-_1.cs)]\n [!code-vb[Classic RandomNumberGenerator.GetNonZeroBytes Example#1](~/add/codesnippet/visualbasic/cf0179cb-fbea-47fb-bad6-_1.vb)]"
  syntax:
    content: public virtual void GetNonZeroBytes (byte[] data);
    parameters:
    - id: data
      type: System.Byte[]
      description: "要填入在密碼編譯方面強式隨機非零的位元組陣列。"
  overload: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Cryptography.RandomNumberGenerator.#ctor
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: RandomNumberGenerator()
  nameWithType: RandomNumberGenerator.RandomNumberGenerator()
  fullName: System.Security.Cryptography.RandomNumberGenerator.RandomNumberGenerator()
- uid: System.Security.Cryptography.RandomNumberGenerator.Create
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Create()
  nameWithType: RandomNumberGenerator.Create()
  fullName: System.Security.Cryptography.RandomNumberGenerator.Create()
- uid: System.Security.Cryptography.RandomNumberGenerator
  parent: System.Security.Cryptography
  isExternal: false
  name: RandomNumberGenerator
  nameWithType: RandomNumberGenerator
  fullName: System.Security.Cryptography.RandomNumberGenerator
- uid: System.Security.Cryptography.RandomNumberGenerator.Create(System.String)
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Create(String)
  nameWithType: RandomNumberGenerator.Create(String)
  fullName: System.Security.Cryptography.RandomNumberGenerator.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Dispose()
  nameWithType: RandomNumberGenerator.Dispose()
  fullName: System.Security.Cryptography.RandomNumberGenerator.Dispose()
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: RandomNumberGenerator.Dispose(Boolean)
  fullName: System.Security.Cryptography.RandomNumberGenerator.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: GetBytes(Byte[])
  nameWithType: RandomNumberGenerator.GetBytes(Byte[])
  fullName: System.Security.Cryptography.RandomNumberGenerator.GetBytes(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: GetBytes(Byte[],Int32,Int32)
  nameWithType: RandomNumberGenerator.GetBytes(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.RandomNumberGenerator.GetBytes(Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: GetNonZeroBytes(Byte[])
  nameWithType: RandomNumberGenerator.GetNonZeroBytes(Byte[])
  fullName: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(Byte[])
- uid: System.Security.Cryptography.RandomNumberGenerator.#ctor*
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: RandomNumberGenerator
  nameWithType: RandomNumberGenerator.RandomNumberGenerator
- uid: System.Security.Cryptography.RandomNumberGenerator.Create*
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Create
  nameWithType: RandomNumberGenerator.Create
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose*
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Dispose
  nameWithType: RandomNumberGenerator.Dispose
- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes*
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: GetBytes
  nameWithType: RandomNumberGenerator.GetBytes
- uid: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes*
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: GetNonZeroBytes
  nameWithType: RandomNumberGenerator.GetNonZeroBytes
