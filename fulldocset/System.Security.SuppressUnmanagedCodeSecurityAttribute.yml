### YamlMime:ManagedReference
items:
- uid: System.Security.SuppressUnmanagedCodeSecurityAttribute
  id: SuppressUnmanagedCodeSecurityAttribute
  children:
  - System.Security.SuppressUnmanagedCodeSecurityAttribute.#ctor
  langs:
  - csharp
  name: SuppressUnmanagedCodeSecurityAttribute
  nameWithType: SuppressUnmanagedCodeSecurityAttribute
  fullName: System.Security.SuppressUnmanagedCodeSecurityAttribute
  type: Class
  summary: "可讓 managed 程式碼呼叫進入 unmanaged 程式碼沒有堆疊查核行程。 這個類別無法被繼承。"
  remarks: "> [!CAUTION]> 與必須特別小心使用這個屬性。 使用不正確，可以建立安全性弱點。       這個屬性可以套用至想要原生程式碼而不會產生執行階段安全性檢查的效能損失，這麼做時呼叫的方法。 執行在執行階段，省略呼叫 unmanaged 程式碼時導致效能大幅節省堆疊查核行程。 類別中使用這個屬性套用至所有包含的方法。       一般來說，managed 程式碼呼叫 unmanaged 程式碼 （由原生程式碼的 PInvoke 或 COM interop)，只要沒有要求`UnmanagedCode`權限，以確保所有呼叫端具有必要的權限，允許此。 藉由套用此明確的屬性，開發人員就可以隱藏執行階段的要求。 開發人員必須負責確保轉換為 unmanaged 程式碼完全受到其他方式。 要求`UnmanagedCode`連結時，還是會發生權限。 比方說，如果函式 A 呼叫函式 B，SuppressUnmanagedCodeSecurityAttribute 會標示函式 B 函式 A 將檢查在 just-in-time 編譯期間，但後續未在執行階段之 unmanaged 程式碼權限。       這個屬性才有效時用於 PInvoke 方法 （或包含 PInvoke 方法的類別） 或將透過它進行 interop 呼叫介面的定義。 所有其他內容中，會忽略它。       這個屬性可用於實作提供透過 unmanaged 程式碼的系統資源的存取權的類別。 不需要存取 unmanaged 程式碼的權限的程式碼可以呼叫具有存取 unmanaged 程式碼的這個屬性的類別。 這只是安全的如果具有此屬性之類別的寫入器已設計為安全類別。 如果沒有，此屬性非常危險，並且可以讓使用被誤用的程式碼。       這不是宣告式安全性屬性，但一般屬性 (其衍生自<xref:System.Attribute>，而非<xref:System.Security.Permissions.SecurityAttribute>)。</xref:System.Security.Permissions.SecurityAttribute> </xref:System.Attribute>"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.Interface | System.AttributeTargets.Delegate, AllowMultiple=true, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class SuppressUnmanagedCodeSecurityAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.SuppressUnmanagedCodeSecurityAttribute.#ctor
  id: '#ctor'
  parent: System.Security.SuppressUnmanagedCodeSecurityAttribute
  langs:
  - csharp
  name: SuppressUnmanagedCodeSecurityAttribute()
  nameWithType: SuppressUnmanagedCodeSecurityAttribute.SuppressUnmanagedCodeSecurityAttribute()
  fullName: System.Security.SuppressUnmanagedCodeSecurityAttribute.SuppressUnmanagedCodeSecurityAttribute()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "初始化的新執行個體<xref href=&quot;System.Security.SuppressUnmanagedCodeSecurityAttribute&quot;></xref>類別。"
  remarks: "預設建構函式任何欄位初始化成為其預設值。"
  syntax:
    content: public SuppressUnmanagedCodeSecurityAttribute ();
    parameters: []
  overload: System.Security.SuppressUnmanagedCodeSecurityAttribute.#ctor*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Security.SuppressUnmanagedCodeSecurityAttribute.#ctor
  parent: System.Security.SuppressUnmanagedCodeSecurityAttribute
  isExternal: false
  name: SuppressUnmanagedCodeSecurityAttribute()
  nameWithType: SuppressUnmanagedCodeSecurityAttribute.SuppressUnmanagedCodeSecurityAttribute()
  fullName: System.Security.SuppressUnmanagedCodeSecurityAttribute.SuppressUnmanagedCodeSecurityAttribute()
- uid: System.Security.SuppressUnmanagedCodeSecurityAttribute.#ctor*
  parent: System.Security.SuppressUnmanagedCodeSecurityAttribute
  isExternal: false
  name: SuppressUnmanagedCodeSecurityAttribute
  nameWithType: SuppressUnmanagedCodeSecurityAttribute.SuppressUnmanagedCodeSecurityAttribute
