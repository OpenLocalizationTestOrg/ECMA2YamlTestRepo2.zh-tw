### YamlMime:ManagedReference
items:
- uid: System.Threading.WaitOrTimerCallback
  id: WaitOrTimerCallback
  langs:
  - csharp
  name: WaitOrTimerCallback
  nameWithType: WaitOrTimerCallback
  fullName: System.Threading.WaitOrTimerCallback
  type: Delegate
  summary: "表示方法時，呼叫<xref:System.Threading.WaitHandle>收到信號或逾時。</xref:System.Threading.WaitHandle>"
  remarks: "WaitOrTimerCallback 代表您想要的已註冊之等候控制代碼會逾時或收到信號時執行的回呼方法。 將回呼方法傳遞至 WaitOrTimerCallback 建構函式建立委派。 您的方法必須有簽章如下所示。       藉由傳遞 WaitOrTimerCallback 委派和<xref:System.Threading.WaitHandle>至<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=fullName>。</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=fullName></xref:System.Threading.WaitHandle>建立已註冊之等候控制代碼 執行每次回呼方法<xref:System.Threading.WaitHandle>逾時或收到信號。</xref:System.Threading.WaitHandle>       [Visual Basic] > [!NOTE] > Visual Basic 使用者可以省略 WaitOrTimerCallback 建構函式，並想要使用`AddressOf`運算子時傳遞至<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>。</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>回呼方法 Visual Basic 會自動呼叫正確的委派建構函式。       如果您想要將資訊傳遞至回呼方法，建立包含必要資訊的物件，並將它傳遞給<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>當您建立的已註冊之等候控制代碼。</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 執行回呼方法時，每次`state`參數包含此物件。       如需使用回呼方法來同步處理執行緒集區執行緒的詳細資訊，請參閱[Managed 執行緒集區](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example shows how to use the WaitOrTimerCallback delegate to represent a callback method that is executed when a wait handle is signaled.  \n  \n The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled. In this example, the callback method is `WaitProc` and the wait handle is an <xref:System.Threading.AutoResetEvent>.  \n  \n The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes. The example creates a `TaskInfo` object and assigns it some string data. The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object, so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.  \n  \n In addition to the `TaskInfo` object, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> the task waits on, a WaitOrTimerCallback delegate that represents the `WaitProc` callback method, a one-second timeout interval, and multiple callbacks.  \n  \n When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the WaitOrTimerCallback delegate is invoked. The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a timeout occurred. If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping further callbacks. In the case of a timeout, the task continues waiting. The `WaitProc` method ends by printing a message to the console.  \n  \n [!code-cs[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/csharp/t-system.threading.waito_1.cs)]\n [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/cpp/t-system.threading.waito_1.cpp)]\n [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/visualbasic/t-system.threading.waito_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public delegate void WaitOrTimerCallback(object state, bool timedOut);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
