### YamlMime:ManagedReference
items:
- uid: System.IO.Packaging.PackageStore
  id: PackageStore
  children:
  - System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)
  - System.IO.Packaging.PackageStore.GetPackage(System.Uri)
  - System.IO.Packaging.PackageStore.RemovePackage(System.Uri)
  langs:
  - csharp
  name: PackageStore
  nameWithType: PackageStore
  fullName: System.IO.Packaging.PackageStore
  type: Class
  summary: "表示應用程式特定的集合<xref href=&quot;System.IO.Packaging.Package&quot;></xref>與搭配使用的執行個體<xref href=&quot;System.IO.Packaging.PackWebRequest&quot;> </xref>。"
  remarks: "PackageStore 定義封裝會開啟並作用中應用程式參考的集合。  套件新增至 PackageStore 存取是由其索引鍵的 URI 值。  PackageStore 支援三種常見的用法︰ 1。  存取<xref:System.IO.Packaging.PackagePart>透過<xref:System.IO.Packaging.PackWebRequest>.</xref:System.IO.Packaging.PackWebRequest>資料</xref:System.IO.Packaging.PackagePart>      2.  取得執行個體的應用程式<xref:System.IO.Packaging.Package>指定封裝的 URI。</xref:System.IO.Packaging.Package>      3.  存取封裝所建立和儲存在<xref:System.IO.MemoryStream>.</xref:System.IO.MemoryStream>       若要改善效能，並重複的檔案開啟/關閉作業的負擔降至最低，PackageStore 用來管理封裝所存取的執行個體<xref:System.IO.Packaging.PackWebRequest>，直接由應用程式。</xref:System.IO.Packaging.PackWebRequest>  存取封裝時，資料時<xref:System.IO.Packaging.Package>位址的要求<xref:System.IO.Packaging.PackagePart><xref:System.IO.Packaging.PackagePart.Uri%2A>會先檢查封裝是否已定義且 PackageStore 中開啟。</xref:System.IO.Packaging.PackagePart.Uri%2A> </xref:System.IO.Packaging.PackagePart> </xref:System.IO.Packaging.Package>  如果封裝定義為 PackageStore 中開啟，直接不重複開啟和關閉每個要求的封裝就能存取要求的組件。       如果您的應用程式開啟的封裝<xref:System.IO.Packaging.Package.Open%2A?displayProperty=fullName>，<xref:System.IO.Packaging.PackageStore.AddPackage%2A>可以呼叫以將封裝加入 PackageStore。</xref:System.IO.Packaging.PackageStore.AddPackage%2A> </xref:System.IO.Packaging.Package.Open%2A?displayProperty=fullName>  <xref:System.IO.Packaging.PackageStore.RemovePackage%2A>稍後應該呼叫以從之前呼叫<xref:System.IO.Packaging.Package.Close%2A?displayProperty=fullName>.</xref:System.IO.Packaging.Package.Close%2A?displayProperty=fullName> PackageStore 移除封裝</xref:System.IO.Packaging.PackageStore.RemovePackage%2A>       使用 XPS 封裝開啟<xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A>建構函式會自動加入和移除從 PackageStore 文件時建立並處置。</xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A>  (您不需要呼叫<xref:System.IO.Packaging.PackageStore.AddPackage%2A>或<xref:System.IO.Packaging.PackageStore.RemovePackage%2A>分開的 XPS 封裝以開啟<xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A>建構函式。)</xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> </xref:System.IO.Packaging.PackageStore.RemovePackage%2A> </xref:System.IO.Packaging.PackageStore.AddPackage%2A>     透過 PackageStore 存取封裝的檔案 I/O 權限會維持相同的封裝上設定，開啟時的 I/O 權限。  PackageStore 僅提供參考已加入存放區的封裝。  這是由要正確地開啟、 更新和關閉每個封裝的應用程式。       搭配使用時，您可以在多執行緒環境中存取封裝加入至 PackageStore [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] <xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=fullName>.</xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=fullName>例如剖析器  多執行緒環境中運作，當應用程式必須鎖定之前存取封裝。"
  syntax:
    content: >-
      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]

      public static class PackageStore
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)
  id: AddPackage(System.Uri,System.IO.Packaging.Package)
  parent: System.IO.Packaging.PackageStore
  langs:
  - csharp
  name: AddPackage(Uri,Package)
  nameWithType: PackageStore.AddPackage(Uri,Package)
  fullName: System.IO.Packaging.PackageStore.AddPackage(Uri,Package)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.IO.Packaging
  summary: "新增<xref href=&quot;System.IO.Packaging.Package&quot;></xref>存放區。"
  remarks: "`packageUri`定義封裝的索引鍵進行比較時呼叫<xref:System.IO.Packaging.PackWebRequest>.</xref:System.IO.Packaging.PackWebRequest>的 URI       如果`packageUri`符合<xref:System.IO.Packaging.PackagePart.Uri%2A><xref:System.IO.Packaging.PackagePart><xref:System.IO.Packaging.PackWebRequest>呼叫，<xref:System.IO.Packaging.PackageStore>用來存取要求的組件</xref:System.IO.Packaging.PackageStore>中定義封裝</xref:System.IO.Packaging.PackWebRequest>中</xref:System.IO.Packaging.PackagePart></xref:System.IO.Packaging.PackagePart.Uri%2A>       如果`packageUri`<xref:System.IO.Packaging.PackagePart.Uri%2A><xref:System.IO.Packaging.PackagePart>中<xref:System.IO.Packaging.PackWebRequest>呼叫時，具有指定之 URI 的封裝會開啟到存取要求的組件</xref:System.IO.Packaging.PackWebRequest></xref:System.IO.Packaging.PackagePart></xref:System.IO.Packaging.PackagePart.Uri%2A>不相符       **安全性注意事項**這個方法會要求<xref:System.Security.Permissions.EnvironmentPermission>所有自訂<xref:System.IO.Packaging.Package>(非<xref:System.IO.Packaging.ZipPackage>) 型別。</xref:System.IO.Packaging.ZipPackage> </xref:System.IO.Packaging.Package> </xref:System.Security.Permissions.EnvironmentPermission>"
  example:
  - "The following example shows how to use the AddPackage method.  \n  \n [!code-vb[RightsManagedPackageViewer#RmPkgViewDecrypt](~/add/codesnippet/visualbasic/rmpackageviewer/window1.xaml.vb#rmpkgviewdecrypt)]\n [!code-cs[RightsManagedPackageViewer#RmPkgViewDecrypt](~/add/codesnippet/csharp/RmPackageViewer/Window1.xaml.cs#rmpkgviewdecrypt)]"
  syntax:
    content: public static void AddPackage (Uri uri, System.IO.Packaging.Package package);
    parameters:
    - id: uri
      type: System.Uri
      description: "索引鍵[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]的`package`中比較<xref href=&quot;System.IO.Packaging.PackWebRequest&quot;> </xref>。"
    - id: package
      type: System.IO.Packaging.Package
      description: "要新增至存放區的封裝。"
  overload: System.IO.Packaging.PackageStore.AddPackage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>package</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>packageUri</code>是無效的套件[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "使用指定的封裝<code> packageUri </code>已經在存放區中。"
  platform:
  - net462
- uid: System.IO.Packaging.PackageStore.GetPackage(System.Uri)
  id: GetPackage(System.Uri)
  parent: System.IO.Packaging.PackageStore
  langs:
  - csharp
  name: GetPackage(Uri)
  nameWithType: PackageStore.GetPackage(Uri)
  fullName: System.IO.Packaging.PackageStore.GetPackage(Uri)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.IO.Packaging
  summary: "傳回<xref href=&quot;System.IO.Packaging.Package&quot;></xref>與指定[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]從存放區。"
  remarks: "`packageUri`比對以 Uri 中指定<xref:System.IO.Packaging.PackageStore.AddPackage%2A>方法呼叫。</xref:System.IO.Packaging.PackageStore.AddPackage%2A>       **安全性注意事項**這個方法會要求<xref:System.Security.Permissions.EnvironmentPermission>所有自訂<xref:System.IO.Packaging.Package>(非<xref:System.IO.Packaging.ZipPackage>) 型別。</xref:System.IO.Packaging.ZipPackage> </xref:System.IO.Packaging.Package> </xref:System.Security.Permissions.EnvironmentPermission>"
  example:
  - "The following example shows how to use the GetPackage method.  \n  \n [!code-vb[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/add/codesnippet/visualbasic/rmpackageviewer/window1.xaml.vb#rmpkgviewopendoc)]\n [!code-cs[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/add/codesnippet/csharp/RmPackageViewer/Window1.xaml.cs#rmpkgviewopendoc)]"
  syntax:
    content: public static System.IO.Packaging.Package GetPackage (Uri uri);
    parameters:
    - id: uri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]来傳回的封裝。"
    return:
      type: System.IO.Packaging.Package
      description: "具有指定的封裝<code> packageUri </code>; 或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，如果指定的封裝<code> packageUri </code>不在存放區。"
  overload: System.IO.Packaging.PackageStore.GetPackage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>packageUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>packageUri</code>是無效的套件[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]。"
  platform:
  - net462
- uid: System.IO.Packaging.PackageStore.RemovePackage(System.Uri)
  id: RemovePackage(System.Uri)
  parent: System.IO.Packaging.PackageStore
  langs:
  - csharp
  name: RemovePackage(Uri)
  nameWithType: PackageStore.RemovePackage(Uri)
  fullName: System.IO.Packaging.PackageStore.RemovePackage(Uri)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.IO.Packaging
  summary: "移除<xref href=&quot;System.IO.Packaging.Package&quot;></xref>與指定[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]從存放區。"
  remarks: "`packageUri`比對以 Uri 中指定<xref:System.IO.Packaging.PackageStore.AddPackage%2A>方法呼叫。</xref:System.IO.Packaging.PackageStore.AddPackage%2A>       **安全性注意事項**這個方法會要求<xref:System.Security.Permissions.EnvironmentPermission>所有自訂<xref:System.IO.Packaging.Package>(非<xref:System.IO.Packaging.ZipPackage>) 型別。</xref:System.IO.Packaging.ZipPackage> </xref:System.IO.Packaging.Package> </xref:System.Security.Permissions.EnvironmentPermission>"
  example:
  - "The following example shows how to use the RemovePackage method.  \n  \n [!code-vb[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/add/codesnippet/visualbasic/rmpackageviewer/window1.xaml.vb#rmpkgviewclosedoc)]\n [!code-cs[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/add/codesnippet/csharp/RmPackageViewer/Window1.xaml.cs#rmpkgviewclosedoc)]"
  syntax:
    content: public static void RemovePackage (Uri uri);
    parameters:
    - id: uri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]来移除的封裝。"
  overload: System.IO.Packaging.PackageStore.RemovePackage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>packageUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>packageUri</code>是無效的套件[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)
  parent: System.IO.Packaging.PackageStore
  isExternal: false
  name: AddPackage(Uri,Package)
  nameWithType: PackageStore.AddPackage(Uri,Package)
  fullName: System.IO.Packaging.PackageStore.AddPackage(Uri,Package)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.IO.Packaging.Package
  parent: System.IO.Packaging
  isExternal: false
  name: Package
  nameWithType: Package
  fullName: System.IO.Packaging.Package
- uid: System.IO.Packaging.PackageStore.GetPackage(System.Uri)
  parent: System.IO.Packaging.PackageStore
  isExternal: false
  name: GetPackage(Uri)
  nameWithType: PackageStore.GetPackage(Uri)
  fullName: System.IO.Packaging.PackageStore.GetPackage(Uri)
- uid: System.IO.Packaging.PackageStore.RemovePackage(System.Uri)
  parent: System.IO.Packaging.PackageStore
  isExternal: false
  name: RemovePackage(Uri)
  nameWithType: PackageStore.RemovePackage(Uri)
  fullName: System.IO.Packaging.PackageStore.RemovePackage(Uri)
- uid: System.IO.Packaging.PackageStore.AddPackage*
  parent: System.IO.Packaging.PackageStore
  isExternal: false
  name: AddPackage
  nameWithType: PackageStore.AddPackage
- uid: System.IO.Packaging.PackageStore.GetPackage*
  parent: System.IO.Packaging.PackageStore
  isExternal: false
  name: GetPackage
  nameWithType: PackageStore.GetPackage
- uid: System.IO.Packaging.PackageStore.RemovePackage*
  parent: System.IO.Packaging.PackageStore
  isExternal: false
  name: RemovePackage
  nameWithType: PackageStore.RemovePackage
