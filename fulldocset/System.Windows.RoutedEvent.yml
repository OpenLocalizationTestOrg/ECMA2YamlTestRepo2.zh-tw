### YamlMime:ManagedReference
items:
- uid: System.Windows.RoutedEvent
  id: RoutedEvent
  children:
  - System.Windows.RoutedEvent.AddOwner(System.Type)
  - System.Windows.RoutedEvent.HandlerType
  - System.Windows.RoutedEvent.Name
  - System.Windows.RoutedEvent.OwnerType
  - System.Windows.RoutedEvent.RoutingStrategy
  - System.Windows.RoutedEvent.ToString
  langs:
  - csharp
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
  type: Class
  summary: "代表與識別路由的事件，並宣告其特性。"
  remarks: "這個類別包含<xref:System.Windows.RoutedEvent.Name%2A>， <xref:System.Windows.RoutedEvent.RoutingStrategy%2A>， <xref:System.Windows.RoutedEvent.HandlerType%2A>，和<xref:System.Windows.RoutedEvent.OwnerType%2A>屬性。</xref:System.Windows.RoutedEvent.OwnerType%2A> </xref:System.Windows.RoutedEvent.HandlerType%2A> </xref:System.Windows.RoutedEvent.RoutingStrategy%2A> </xref:System.Windows.RoutedEvent.Name%2A> 這些成員無一可以有 null 值。       這個類別具有 XAML 用法是專為提供的值<xref:System.Windows.EventTrigger.RoutedEvent%2A>屬性<xref:System.Windows.EventTrigger>（或衍生類別），或如<xref:System.Windows.EventSetter.Event%2A>屬性<xref:System.Windows.EventSetter>（或衍生類別）。</xref:System.Windows.EventSetter> </xref:System.Windows.EventSetter.Event%2A> </xref:System.Windows.EventTrigger> </xref:System.Windows.EventTrigger.RoutedEvent%2A> 如需有關<xref:System.Windows.EventTrigger>， <xref:System.Windows.EventSetter>，和 XAML 的使用方式的類別，請參閱[路由傳送事件概觀](~/add/includes/ajax-current-ext-md.md)。</xref:System.Windows.EventSetter> </xref:System.Windows.EventTrigger>      <a name=&quot;xamlAttributeUsage_RoutedEvent&quot;></a># # XAML 屬性使用方式```   <object property=&quot;eventName&quot;/>   - or -   <object property=&quot;type.eventName&quot;/>      ``` <a name=&quot;xamlValues_RoutedEvent&quot;> </a> # # XAML 值*eventName*不合格的事件名稱相當於<xref:System.Windows.RoutedEvent.Name%2A>RoutedEvent 欄位的屬性，而不實際的成員名稱的型別中的 RoutedEvent 識別項欄位。</xref:System.Windows.RoutedEvent.Name%2A>       無限制， *eventName*必須命名為<xref:System.Windows.Style.TargetType%2A>目前的樣式包含<xref:System.Windows.EventSetter>或<xref:System.Windows.EventTrigger>.</xref:System.Windows.EventTrigger></xref:System.Windows.EventSetter></xref:System.Windows.Style.TargetType%2A>的型別中找到的事件       *型別*来用來限定事件名稱的型別。 如果沒有前置詞，提供*類型*必須是預設 XAML 命名空間內的類型，對應至現有 CLR 型別。 自訂事件，或預設 XAML 命名空間，如字串以外的型別上的事件*類型*可以包含對應的 XML 命名空間前置詞。 該 XAML 命名空間應該包含 XAML 型別可以對應至支援 CLR 類型，以及該 CLR 類型應定義所需的路由的事件識別項。 如需 XAML 命名空間對應的詳細資訊，請參閱[XAML 命名空間和 WPF XAML 命名空間對應](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter("System.Windows.Markup.RoutedEventConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]

      [System.Windows.Markup.ValueSerializer("System.Windows.Markup.RoutedEventValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]

      public sealed class RoutedEvent
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.RoutedEvent.AddOwner(System.Type)
  id: AddOwner(System.Type)
  parent: System.Windows.RoutedEvent
  langs:
  - csharp
  name: AddOwner(Type)
  nameWithType: RoutedEvent.AddOwner(Type)
  fullName: System.Windows.RoutedEvent.AddOwner(Type)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "將另一個擁有者型別與所表示的路由事件相關聯<xref href=&quot;System.Windows.RoutedEvent&quot;></xref>執行個體，並啟用路由的事件和其處理。"
  remarks: "擁有者型別為內部使用解決事件時的名稱。"
  example:
  - "The following example adds the current class as another owner of an event defined in a different class. Here, `AnotherEditContainer` is the current class, and the `EditStateChangedEvent`<xref:System.Windows.RoutedEvent> field is defined as a member of that class. The `MyEditContainer` class originally defined the event, registering it with the identically named `EditStateChangedEvent`identifier.  \n  \n [!code-vb[ClassHandling#RoutedEventAddOwner](~/add/codesnippet/visualbasic/ClassHandling.sdksamplelibrary/class1.vb#routedeventaddowner)]\n [!code-cs[ClassHandling#RoutedEventAddOwner](~/add/codesnippet/csharp/ClassHandling/SDKSampleLibrary/class1.cs#routedeventaddowner)]"
  syntax:
    content: public System.Windows.RoutedEvent AddOwner (Type ownerType);
    parameters:
    - id: ownerType
      type: System.Type
      description: "加入路由的事件的位置類型。"
    return:
      type: System.Windows.RoutedEvent
      description: "事件的識別項欄位。 若要設定的公用靜態唯讀欄位會擁有者型別上儲存的表示路由事件的識別項，應該使用這個傳回的值。 此欄位一般定義為具有公用存取，因為使用者程式碼必須參考的欄位，才能附加路由事件時使用的任何執行個體處理常式<xref:System.Windows.UIElement.AddHandler*>公用程式方法。</xref:System.Windows.UIElement.AddHandler*>"
  overload: System.Windows.RoutedEvent.AddOwner*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.RoutedEvent.HandlerType
  id: HandlerType
  parent: System.Windows.RoutedEvent
  langs:
  - csharp
  name: HandlerType
  nameWithType: RoutedEvent.HandlerType
  fullName: System.Windows.RoutedEvent.HandlerType
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得路由事件處理常式型別。"
  remarks: "處理常式型別會實作這個<xref:System.Windows.RoutedEvent>.</xref:System.Windows.RoutedEvent>所代表的事件將會接聽的處理常式時，應使用事件處理常式委派"
  syntax:
    content: public Type HandlerType { get; }
    return:
      type: System.Type
      description: "路由事件處理常式型別。"
  overload: System.Windows.RoutedEvent.HandlerType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.RoutedEvent.Name
  id: Name
  parent: System.Windows.RoutedEvent
  langs:
  - csharp
  name: Name
  nameWithType: RoutedEvent.Name
  fullName: System.Windows.RoutedEvent.Name
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得路由事件的識別名稱。"
  remarks: "路由事件的名稱中每個擁有者類型必須是唯一，但不需要是全域唯一的。       這個屬性的值源自<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>定義<xref:System.Windows.RoutedEvent>.</xref:System.Windows.RoutedEvent>方法</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 具體而言，名稱的值是`name`至<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A>傳遞的參數值"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "路由事件的名稱。"
  overload: System.Windows.RoutedEvent.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.RoutedEvent.OwnerType
  id: OwnerType
  parent: System.Windows.RoutedEvent
  langs:
  - csharp
  name: OwnerType
  nameWithType: RoutedEvent.OwnerType
  fullName: System.Windows.RoutedEvent.OwnerType
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得路由事件的已註冊的擁有者類型。"
  remarks: "此類型可以是任何物件類型，不受限於<xref:System.Windows.DependencyObject>.</xref:System.Windows.DependencyObject> 在已加入擁有的路由事件的情況下，此屬性會傳回第一個宣告的擁有人。       這個屬性的值源自<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>定義<xref:System.Windows.RoutedEvent>.</xref:System.Windows.RoutedEvent>方法</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 具體而言，是 OwnerType 值`ownerType`至<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A>傳遞的參數值"
  syntax:
    content: public Type OwnerType { get; }
    return:
      type: System.Type
      description: "路由事件的擁有者型別。"
  overload: System.Windows.RoutedEvent.OwnerType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.RoutedEvent.RoutingStrategy
  id: RoutingStrategy
  parent: System.Windows.RoutedEvent
  langs:
  - csharp
  name: RoutingStrategy
  nameWithType: RoutedEvent.RoutingStrategy
  fullName: System.Windows.RoutedEvent.RoutingStrategy
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "取得路由事件的路由策略。"
  remarks: "依照慣例，通道的路由的事件都有名稱前置詞 「 預覽 」 和定義的反昇相關聯的事件。 它應該很少見，會有通道版本並不相符的反昇版本。 如需詳細資訊，請參閱[How to︰ 建立自訂路由傳送事件](~/add/includes/ajax-current-ext-md.md)。       這個屬性的值源自<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>定義<xref:System.Windows.RoutedEvent>.</xref:System.Windows.RoutedEvent>方法</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 具體而言，是 RoutingStrategy 值`routingStrategy`至<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A>傳遞的參數值"
  syntax:
    content: public System.Windows.RoutingStrategy RoutingStrategy { get; }
    return:
      type: System.Windows.RoutingStrategy
      description: "其中一個列舉值。 預設值是列舉型別預設值， <xref href=&quot;System.Windows.RoutingStrategy&quot;> </xref>。"
  overload: System.Windows.RoutedEvent.RoutingStrategy*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.RoutedEvent.ToString
  id: ToString
  parent: System.Windows.RoutedEvent
  langs:
  - csharp
  name: ToString()
  nameWithType: RoutedEvent.ToString()
  fullName: System.Windows.RoutedEvent.ToString()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "傳回這個字串表示<xref href=&quot;System.Windows.RoutedEvent&quot;> </xref>。"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "字串表示，此物件，等同於<xref:System.Windows.RoutedEvent.Name*>.</xref:System.Windows.RoutedEvent.Name*>所傳回的值"
  overload: System.Windows.RoutedEvent.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.RoutedEvent.AddOwner(System.Type)
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: AddOwner(Type)
  nameWithType: RoutedEvent.AddOwner(Type)
  fullName: System.Windows.RoutedEvent.AddOwner(Type)
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.RoutedEvent.HandlerType
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: HandlerType
  nameWithType: RoutedEvent.HandlerType
  fullName: System.Windows.RoutedEvent.HandlerType
- uid: System.Windows.RoutedEvent.Name
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: Name
  nameWithType: RoutedEvent.Name
  fullName: System.Windows.RoutedEvent.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.RoutedEvent.OwnerType
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: OwnerType
  nameWithType: RoutedEvent.OwnerType
  fullName: System.Windows.RoutedEvent.OwnerType
- uid: System.Windows.RoutedEvent.RoutingStrategy
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: RoutingStrategy
  nameWithType: RoutedEvent.RoutingStrategy
  fullName: System.Windows.RoutedEvent.RoutingStrategy
- uid: System.Windows.RoutingStrategy
  parent: System.Windows
  isExternal: false
  name: RoutingStrategy
  nameWithType: RoutingStrategy
  fullName: System.Windows.RoutingStrategy
- uid: System.Windows.RoutedEvent.ToString
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: ToString()
  nameWithType: RoutedEvent.ToString()
  fullName: System.Windows.RoutedEvent.ToString()
- uid: System.Windows.RoutedEvent.AddOwner*
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: AddOwner
  nameWithType: RoutedEvent.AddOwner
- uid: System.Windows.RoutedEvent.HandlerType*
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: HandlerType
  nameWithType: RoutedEvent.HandlerType
- uid: System.Windows.RoutedEvent.Name*
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: Name
  nameWithType: RoutedEvent.Name
- uid: System.Windows.RoutedEvent.OwnerType*
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: OwnerType
  nameWithType: RoutedEvent.OwnerType
- uid: System.Windows.RoutedEvent.RoutingStrategy*
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: RoutingStrategy
  nameWithType: RoutedEvent.RoutingStrategy
- uid: System.Windows.RoutedEvent.ToString*
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: ToString
  nameWithType: RoutedEvent.ToString
