### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventLogEntry
  id: EventLogEntry
  children:
  - System.Diagnostics.EventLogEntry.Category
  - System.Diagnostics.EventLogEntry.CategoryNumber
  - System.Diagnostics.EventLogEntry.Data
  - System.Diagnostics.EventLogEntry.EntryType
  - System.Diagnostics.EventLogEntry.Equals(System.Diagnostics.EventLogEntry)
  - System.Diagnostics.EventLogEntry.EventID
  - System.Diagnostics.EventLogEntry.Index
  - System.Diagnostics.EventLogEntry.InstanceId
  - System.Diagnostics.EventLogEntry.MachineName
  - System.Diagnostics.EventLogEntry.Message
  - System.Diagnostics.EventLogEntry.ReplacementStrings
  - System.Diagnostics.EventLogEntry.Source
  - System.Diagnostics.EventLogEntry.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Diagnostics.EventLogEntry.TimeGenerated
  - System.Diagnostics.EventLogEntry.TimeWritten
  - System.Diagnostics.EventLogEntry.UserName
  langs:
  - csharp
  name: EventLogEntry
  nameWithType: EventLogEntry
  fullName: System.Diagnostics.EventLogEntry
  type: Class
  summary: "將單一記錄封裝事件記錄檔中。 這個類別無法被繼承。"
  remarks: "您通常會不建立執行的個體 EventLogEntry 直接時使用的<xref:System.Diagnostics.EventLog>類別。</xref:System.Diagnostics.EventLog> <xref:System.Diagnostics.EventLog.Entries%2A>隸屬<xref:System.Diagnostics.EventLog>類別包含 EventLogEntry 執行個體，藉由讀取時反覆查看的集合<xref:System.Diagnostics.EventLogEntryCollection.Item%2A?displayProperty=fullName>類別索引成員。</xref:System.Diagnostics.EventLogEntryCollection.Item%2A?displayProperty=fullName> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Entries%2A>      > [!IMPORTANT] > 這個型別實作<xref:System.IDisposable>介面。</xref:System.IDisposable> 當您完成使用類型時，您應該會處置它直接或間接。 若要直接處置的類型，呼叫其<xref:System.IDisposable.Dispose%2A>方法中的`try` / `catch`區塊。</xref:System.IDisposable.Dispose%2A> 若要為其配置間接，使用語言建構例如`using`（C# 中） 或`Using`（在 Visual Basic)。 如需詳細資訊，請參閱中的 「 使用物件的實作 IDisposable 」 一節<xref:System.IDisposable>介面 > 主題。</xref:System.IDisposable>"
  example:
  - "The following code example demonstrates the use of the EventLogEntry class. In this example, a `switch` statement uses console input to search for event log entries for the specified event type.  If a match is found, log entry source information is displayed at the console.  \n  \n [!code-cpp[EventLogEntry_Source#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_4_1.cpp)]\n [!code-cs[EventLogEntry_Source#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_4_1.cs)]\n [!code-vb[EventLogEntry_Source#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_4_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DesignTimeVisible(false)]

      [System.ComponentModel.ToolboxItem(false)]

      public sealed class EventLogEntry : System.ComponentModel.Component, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.Category
  id: Category
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: Category
  nameWithType: EventLogEntry.Category
  fullName: System.Diagnostics.EventLogEntry.Category
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得相關聯的文字<xref:System.Diagnostics.EventLogEntry.CategoryNumber*>這個項目的屬性。</xref:System.Diagnostics.EventLogEntry.CategoryNumber*>"
  remarks: "每個應用程式 （事件來源） 可以定義自己的編號的分類和其所對應的文字字串。 事件檢視器可以使用分類來篩選事件記錄檔中。"
  syntax:
    content: public string Category { get; }
    return:
      type: System.String
      description: "應用程式特定分類的文字。"
  overload: System.Diagnostics.EventLogEntry.Category*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "無法插入字串與類別相關聯的其中一個配置空間。"
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.CategoryNumber
  id: CategoryNumber
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: CategoryNumber
  nameWithType: EventLogEntry.CategoryNumber
  fullName: System.Diagnostics.EventLogEntry.CategoryNumber
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得事件記錄檔項目的分類編號。"
  remarks: "每個應用程式 （事件來源） 可以定義自己的編號的分類和其所對應的文字字串。 事件檢視器可以使用分類來篩選事件記錄檔中。 類別必須從 1 開始連續編號。 所指定的類別數字<xref:System.Diagnostics.EventInstance.CategoryId%2A?displayProperty=fullName>屬性。</xref:System.Diagnostics.EventInstance.CategoryId%2A?displayProperty=fullName> 事件檢視器可以顯示類別目錄做為數值，或它可以使用 「 類別目錄做為資源識別項若要顯示的當地語系化類別目錄字串。 如需詳細資訊，請參閱<xref:System.Diagnostics.EventInstance>.</xref:System.Diagnostics.EventInstance>"
  syntax:
    content: public short CategoryNumber { get; }
    return:
      type: System.Int16
      description: "這個項目的應用程式特定分類編號。"
  overload: System.Diagnostics.EventLogEntry.CategoryNumber*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.Data
  id: Data
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: Data
  nameWithType: EventLogEntry.Data
  fullName: System.Diagnostics.EventLogEntry.Data
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得與項目相關聯的二進位資料。"
  remarks: "取得這個屬性會建立保留的項目事件特有的二進位資料組合的十六進位和文字格式顯示的事件檢視器的複本的陣列。 事件特有的資料有時候會儲存應用程式會處理獨立於事件檢視器中，例如的資訊，以讓報表從記錄檔。"
  syntax:
    content: public byte[] Data { get; }
    return:
      type: System.Byte[]
      description: "保存與項目相關聯的二進位資料的位元組陣列。"
  overload: System.Diagnostics.EventLogEntry.Data*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.EntryType
  id: EntryType
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: EntryType
  nameWithType: EventLogEntry.EntryType
  fullName: System.Diagnostics.EventLogEntry.EntryType
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得這個項目的事件類型。"
  remarks: "所有事件類型具有妥善定義的一般資料，並可以選擇性地包含事件的特定資料。 每個事件是單一型別，表示應用程式時報告事件。 事件檢視器會使用事件類型來決定要在事件記錄檔的清單檢視中顯示的圖示。"
  example:
  - "The following code example demonstrates the use of the EntryType property. In this example, a `switch` statement uses console input to search for event log entries for the specified EntryType.  If a match is found, log entry source information is displayed at the console.  \n  \n [!code-cpp[EventLogEntry_Source#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_4_1.cpp)]\n [!code-cs[EventLogEntry_Source#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_4_1.cs)]\n [!code-vb[EventLogEntry_Source#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_4_1.vb)]"
  syntax:
    content: public System.Diagnostics.EventLogEntryType EntryType { get; }
    return:
      type: System.Diagnostics.EventLogEntryType
      description: "事件記錄檔中的項目相關聯的事件類型。"
  overload: System.Diagnostics.EventLogEntry.EntryType*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.Equals(System.Diagnostics.EventLogEntry)
  id: Equals(System.Diagnostics.EventLogEntry)
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: Equals(EventLogEntry)
  nameWithType: EventLogEntry.Equals(EventLogEntry)
  fullName: System.Diagnostics.EventLogEntry.Equals(EventLogEntry)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "執行兩個事件記錄檔項目之間的比較。"
  remarks: "這個方法會執行兩個物件之間的位元組的比較。 它不會判斷是否這兩個<xref:System.Diagnostics.EventLogEntry>執行個體會參考相同的物件。</xref:System.Diagnostics.EventLogEntry>"
  syntax:
    content: public bool Equals (System.Diagnostics.EventLogEntry otherEntry);
    parameters:
    - id: otherEntry
      type: System.Diagnostics.EventLogEntry
      description: "<xref href=&quot;System.Diagnostics.EventLogEntry&quot;> </xref>比較。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Diagnostics.EventLogEntry&quot;></xref>物件相同則為不相等， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Diagnostics.EventLogEntry.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.EventID
  id: EventID
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: EventID
  nameWithType: EventLogEntry.EventID
  fullName: System.Diagnostics.EventLogEntry.EventID
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得目前事件項目的應用程式特定事件識別項。"
  remarks: "在事件記錄檔，與前兩個位元遮罩關閉，這個值代表項目的事件識別項。 <xref:System.Diagnostics.EventLogEntry.InstanceId%2A>屬性的事件記錄檔項目表示之事件來源的訊息資源檔中的事件的完整的 32 位元的資源識別碼。</xref:System.Diagnostics.EventLogEntry.InstanceId%2A> 從相同來源的兩個事件記錄檔項目可以有相符的 EventID 值，但具有不同<xref:System.Diagnostics.EventLogEntry.InstanceId%2A>因為前兩個位元，事件的識別項的差異值。</xref:System.Diagnostics.EventLogEntry.InstanceId%2A>       如果應用程式所撰寫的事件項目，使用其中一種<xref:System.Diagnostics.EventLog.WriteEntry%2A>EventID 屬性的方法比對選擇性`eventId`參數。</xref:System.Diagnostics.EventLog.WriteEntry%2A> 如果應用程式寫入事件使用<xref:System.Diagnostics.EventLog.WriteEvent%2A>或 Win32 API `ReportEvent`EventID 屬性比對事件的資源識別碼、 與頂端兩個位元遮罩的關閉</xref:System.Diagnostics.EventLog.WriteEvent%2A>"
  syntax:
    content: public int EventID { get; }
    return:
      type: System.Int32
      description: "事件訊息的應用程式特定識別項。"
  overload: System.Diagnostics.EventLogEntry.EventID*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.Index
  id: Index
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: Index
  nameWithType: EventLogEntry.Index
  fullName: System.Diagnostics.EventLogEntry.Index
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得事件記錄檔中的這個項目的索引。"
  remarks: "這個數字不一定是以零為起始。"
  syntax:
    content: public int Index { get; }
    return:
      type: System.Int32
      description: "事件記錄檔中此項目的索引。"
  overload: System.Diagnostics.EventLogEntry.Index*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.InstanceId
  id: InstanceId
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: InstanceId
  nameWithType: EventLogEntry.InstanceId
  fullName: System.Diagnostics.EventLogEntry.InstanceId
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得指定事件項目的訊息文字的資源識別碼。"
  remarks: "InstanceId 屬性唯一識別已設定的事件來源的事件項目。 事件記錄檔項目執行個體識別碼表示事件來源的訊息資源檔中的事件的 32 位元的完整資源識別碼。 <xref:System.Diagnostics.EventLogEntry.EventID%2A>屬性等於 InstanceId 與前兩個位元遮罩 off。</xref:System.Diagnostics.EventLogEntry.EventID%2A> 從相同來源的兩個事件記錄檔項目可以有相符的<xref:System.Diagnostics.EventLogEntry.EventID%2A>值，但有不同的 InstanceId 值，因為前兩個位元，資源識別項的差異。</xref:System.Diagnostics.EventLogEntry.EventID%2A>       如果應用程式所撰寫的事件項目，使用其中一種<xref:System.Diagnostics.EventLog.WriteEntry%2A>方法，執行個體識別碼屬性比對選擇性`eventId`參數。</xref:System.Diagnostics.EventLog.WriteEntry%2A> 如果應用程式寫入事件使用<xref:System.Diagnostics.EventLog.WriteEvent%2A>，InstanceId 屬性比對中指定的資源識別碼<xref:System.Diagnostics.EventInstance.InstanceId%2A>的`instance`參數。</xref:System.Diagnostics.EventInstance.InstanceId%2A> </xref:System.Diagnostics.EventLog.WriteEvent%2A> 如果應用程式會撰寫使用 Win32 API 的事件`ReportEvent`，InstanceId 屬性比對中指定的資源識別碼`dwEventID`參數。       定義事件訊息及建置事件記錄檔資源檔的相關詳細資訊，請參閱 「 訊息編譯器 」 中的主題 Platform SDK 文件，網址為[http://msdn.microsoft.com](http://msdn.microsoft.com/)。 如需有關事件記錄檔識別碼的詳細資訊，請參閱 Platform SDK 中的 < 事件識別碼 > 主題。"
  example:
  - "The following code example searches an event log for entries with a particular resource identifier. The code example displays the event message for each matching entry, and counts the total number of matching entries in the log. The message text for each entry may or may not be the same; each event message depends on the event source message file, insertion strings, and parameters used when it was written.  \n  \n [!code-cpp[EventLog_WriteEvent#10](~/add/codesnippet/cpp/p-system.diagnostics.eve_20_1.cpp)]\n [!code-vb[EventLog_WriteEvent#10](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_20_1.vb)]\n [!code-cs[EventLog_WriteEvent#10](~/add/codesnippet/csharp/p-system.diagnostics.eve_20_1.cs)]"
  syntax:
    content: public long InstanceId { get; }
    return:
      type: System.Int64
      description: "資源識別碼對應到字串中的定義事件來源的訊息資源檔。"
  overload: System.Diagnostics.EventLogEntry.InstanceId*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.MachineName
  id: MachineName
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: MachineName
  nameWithType: EventLogEntry.MachineName
  fullName: System.Diagnostics.EventLogEntry.MachineName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得產生這個項目所在的電腦名稱。"
  syntax:
    content: public string MachineName { get; }
    return:
      type: System.String
      description: "包含事件記錄檔的電腦名稱。"
  overload: System.Diagnostics.EventLogEntry.MachineName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.Message
  id: Message
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: Message
  nameWithType: EventLogEntry.Message
  fullName: System.Diagnostics.EventLogEntry.Message
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得與這個事件項目相關聯的當地語系化的訊息。"
  remarks: "取得這個屬性就會開啟登錄，以判斷包含當地語系化的文字的.dll 檔案的檔案名稱。 如果測試您的原始程式碼時，您會收到登錄時發生錯誤，請確認電腦上存在的.dll 檔案。 如果插入字串包含在訊息中，請在其配置中攔截錯誤。"
  syntax:
    content: public string Message { get; }
    return:
      type: System.String
      description: "格式化、 當地語系化的訊息文字。 這包含相關聯的取代字串。"
  overload: System.Diagnostics.EventLogEntry.Message*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "無法插入字串與訊息相關聯的其中一個配置空間。"
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.ReplacementStrings
  id: ReplacementStrings
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: ReplacementStrings
  nameWithType: EventLogEntry.ReplacementStrings
  fullName: System.Diagnostics.EventLogEntry.ReplacementStrings
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得與事件記錄項目相關聯的取代字串。"
  remarks: "此屬性會擷取僅的取代字串的項目。 若要擷取完整的訊息，請參閱<xref:System.Diagnostics.EventLogEntry.Message%2A>屬性。</xref:System.Diagnostics.EventLogEntry.Message%2A>       ReplacementStrings 屬性包含在事件記錄檔項目時所使用的取代字串的當地語系化的版本。 如果您提供包含字串中每個應用程式的目標語言的資源檔，您可以發出事件記錄檔訊息中使用該電腦的語言。 若要這樣做，請建立的執行個體<xref:System.Resources.ResourceManager>包含替代字串資源組件的類別。</xref:System.Resources.ResourceManager> 第一個參數<xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29>建構函式識別要使用的資源組件。</xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29> 使用<xref:System.Resources.ResourceManager.GetString%2A>該執行個體提供當地語系化的訊息記錄事件的方法。</xref:System.Resources.ResourceManager.GetString%2A> 下列程式碼會自動設定為目前的文化特性的語言的訊息。      ```   ResourceManager LocRM = new ResourceManager(&quot;ReplacementStrings.TestStrings&quot;,          typeof(Program).Assembly);   EventLog e1 = new EventLog(&quot;LocTest&quot;, &quot;MyMachine&quot;, &quot;LocTest&quot;);   // Get the string associated with the current culture.   e1.WriteEntry(LocRM.GetString(&quot;strMessage&quot;),      EventLogEntryType.Information);   ```"
  syntax:
    content: public string[] ReplacementStrings { get; }
    return:
      type: System.String[]
      description: "保留的取代字串的陣列儲存在事件項目。"
  overload: System.Diagnostics.EventLogEntry.ReplacementStrings*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.Source
  id: Source
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: Source
  nameWithType: EventLogEntry.Source
  fullName: System.Diagnostics.EventLogEntry.Source
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得產生此事件的應用程式的名稱。"
  remarks: "事件來源表示記錄事件的內容。 通常很的應用程式名稱或名稱的子元件的應用程式如果很大的應用程式。 應用程式和服務通常寫入 （而因此是來源） 應用程式記錄檔或自訂的記錄檔。 裝置驅動程式通常會寫入至系統記錄檔。"
  example:
  - "The following code example demonstrates the use of the Source property. In this example, a `switch` statement uses console input to search for event log entries for the specified <xref:System.Diagnostics.EventLogEntry.EntryType%2A>.  If a match is found, the Source property information is displayed at the console.  \n  \n [!code-cpp[EventLogEntry_Source#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_27_1.cpp)]\n [!code-cs[EventLogEntry_Source#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_27_1.cs)]\n [!code-vb[EventLogEntry_Source#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_27_1.vb)]"
  syntax:
    content: public string Source { get; }
    return:
      type: System.String
      description: "做為這個事件來源登錄與事件記錄檔的名稱。"
  overload: System.Diagnostics.EventLogEntry.Source*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: EventLogEntry.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Diagnostics.EventLogEntry.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "於其中填入<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref>將序列化目標物件所需的資料。"
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>来填入資料。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "目的地 (請參閱<xref:System.Runtime.Serialization.StreamingContext>) 這個序列化。</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Diagnostics.EventLogEntry.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.TimeGenerated
  id: TimeGenerated
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: TimeGenerated
  nameWithType: EventLogEntry.TimeGenerated
  fullName: System.Diagnostics.EventLogEntry.TimeGenerated
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得產生這個事件的當地時間。"
  remarks: "這個成員會保存已產生事件的時間。 這可能不是相同的事件資訊寫入事件記錄檔的時間。 對於後者，讀取<xref:System.Diagnostics.EventLogEntry.TimeWritten%2A>屬性。</xref:System.Diagnostics.EventLogEntry.TimeWritten%2A>       通常是產生事件的時間，並將它記錄的時間之間的延遲。 它是非常重要事件產生時，除非您想要查看在記錄中是否有明顯的延遲。 如果您的記錄檔位於不同伺服器上，而且您遇到瓶頸，，可能會發生。"
  syntax:
    content: public DateTime TimeGenerated { get; }
    return:
      type: System.DateTime
      description: "產生這個事件的當地時間。"
  overload: System.Diagnostics.EventLogEntry.TimeGenerated*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.TimeWritten
  id: TimeWritten
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: TimeWritten
  nameWithType: EventLogEntry.TimeWritten
  fullName: System.Diagnostics.EventLogEntry.TimeWritten
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得這個事件寫入記錄檔的當地時間。"
  remarks: "這個成員會保存事件的資訊會寫入事件記錄檔的時間。 這可能不是產生事件的同時間。 對於後者，讀取<xref:System.Diagnostics.EventLogEntry.TimeGenerated%2A>屬性。</xref:System.Diagnostics.EventLogEntry.TimeGenerated%2A>"
  syntax:
    content: public DateTime TimeWritten { get; }
    return:
      type: System.DateTime
      description: "這個事件寫入記錄檔的當地時間。"
  overload: System.Diagnostics.EventLogEntry.TimeWritten*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.UserName
  id: UserName
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: UserName
  nameWithType: EventLogEntry.UserName
  fullName: System.Diagnostics.EventLogEntry.UserName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得為這個事件負責的使用者名稱。"
  remarks: "這個屬性通常是空白的安全性記錄檔以外的記錄檔中的事件。"
  syntax:
    content: public string UserName { get; }
    return:
      type: System.String
      description: "可唯一識別使用者或群組安全性識別碼 (SID)。"
  overload: System.Diagnostics.EventLogEntry.UserName*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "帳戶資訊無法取得使用者的 sid。"
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.Diagnostics.EventLogEntry.Category
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Category
  nameWithType: EventLogEntry.Category
  fullName: System.Diagnostics.EventLogEntry.Category
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.EventLogEntry.CategoryNumber
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: CategoryNumber
  nameWithType: EventLogEntry.CategoryNumber
  fullName: System.Diagnostics.EventLogEntry.CategoryNumber
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Diagnostics.EventLogEntry.Data
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Data
  nameWithType: EventLogEntry.Data
  fullName: System.Diagnostics.EventLogEntry.Data
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.EventLogEntry.EntryType
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: EntryType
  nameWithType: EventLogEntry.EntryType
  fullName: System.Diagnostics.EventLogEntry.EntryType
- uid: System.Diagnostics.EventLogEntryType
  parent: System.Diagnostics
  isExternal: false
  name: EventLogEntryType
  nameWithType: EventLogEntryType
  fullName: System.Diagnostics.EventLogEntryType
- uid: System.Diagnostics.EventLogEntry.Equals(System.Diagnostics.EventLogEntry)
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Equals(EventLogEntry)
  nameWithType: EventLogEntry.Equals(EventLogEntry)
  fullName: System.Diagnostics.EventLogEntry.Equals(EventLogEntry)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.EventLogEntry
  parent: System.Diagnostics
  isExternal: false
  name: EventLogEntry
  nameWithType: EventLogEntry
  fullName: System.Diagnostics.EventLogEntry
- uid: System.Diagnostics.EventLogEntry.EventID
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: EventID
  nameWithType: EventLogEntry.EventID
  fullName: System.Diagnostics.EventLogEntry.EventID
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.EventLogEntry.Index
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Index
  nameWithType: EventLogEntry.Index
  fullName: System.Diagnostics.EventLogEntry.Index
- uid: System.Diagnostics.EventLogEntry.InstanceId
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: InstanceId
  nameWithType: EventLogEntry.InstanceId
  fullName: System.Diagnostics.EventLogEntry.InstanceId
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Diagnostics.EventLogEntry.MachineName
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: MachineName
  nameWithType: EventLogEntry.MachineName
  fullName: System.Diagnostics.EventLogEntry.MachineName
- uid: System.Diagnostics.EventLogEntry.Message
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Message
  nameWithType: EventLogEntry.Message
  fullName: System.Diagnostics.EventLogEntry.Message
- uid: System.Diagnostics.EventLogEntry.ReplacementStrings
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: ReplacementStrings
  nameWithType: EventLogEntry.ReplacementStrings
  fullName: System.Diagnostics.EventLogEntry.ReplacementStrings
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.EventLogEntry.Source
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Source
  nameWithType: EventLogEntry.Source
  fullName: System.Diagnostics.EventLogEntry.Source
- uid: System.Diagnostics.EventLogEntry.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: EventLogEntry.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Diagnostics.EventLogEntry.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Diagnostics.EventLogEntry.TimeGenerated
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: TimeGenerated
  nameWithType: EventLogEntry.TimeGenerated
  fullName: System.Diagnostics.EventLogEntry.TimeGenerated
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Diagnostics.EventLogEntry.TimeWritten
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: TimeWritten
  nameWithType: EventLogEntry.TimeWritten
  fullName: System.Diagnostics.EventLogEntry.TimeWritten
- uid: System.Diagnostics.EventLogEntry.UserName
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: UserName
  nameWithType: EventLogEntry.UserName
  fullName: System.Diagnostics.EventLogEntry.UserName
- uid: System.Diagnostics.EventLogEntry.Category*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Category
  nameWithType: EventLogEntry.Category
- uid: System.Diagnostics.EventLogEntry.CategoryNumber*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: CategoryNumber
  nameWithType: EventLogEntry.CategoryNumber
- uid: System.Diagnostics.EventLogEntry.Data*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Data
  nameWithType: EventLogEntry.Data
- uid: System.Diagnostics.EventLogEntry.EntryType*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: EntryType
  nameWithType: EventLogEntry.EntryType
- uid: System.Diagnostics.EventLogEntry.Equals*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Equals
  nameWithType: EventLogEntry.Equals
- uid: System.Diagnostics.EventLogEntry.EventID*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: EventID
  nameWithType: EventLogEntry.EventID
- uid: System.Diagnostics.EventLogEntry.Index*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Index
  nameWithType: EventLogEntry.Index
- uid: System.Diagnostics.EventLogEntry.InstanceId*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: InstanceId
  nameWithType: EventLogEntry.InstanceId
- uid: System.Diagnostics.EventLogEntry.MachineName*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: MachineName
  nameWithType: EventLogEntry.MachineName
- uid: System.Diagnostics.EventLogEntry.Message*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Message
  nameWithType: EventLogEntry.Message
- uid: System.Diagnostics.EventLogEntry.ReplacementStrings*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: ReplacementStrings
  nameWithType: EventLogEntry.ReplacementStrings
- uid: System.Diagnostics.EventLogEntry.Source*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Source
  nameWithType: EventLogEntry.Source
- uid: System.Diagnostics.EventLogEntry.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: EventLogEntry.System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Diagnostics.EventLogEntry.TimeGenerated*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: TimeGenerated
  nameWithType: EventLogEntry.TimeGenerated
- uid: System.Diagnostics.EventLogEntry.TimeWritten*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: TimeWritten
  nameWithType: EventLogEntry.TimeWritten
- uid: System.Diagnostics.EventLogEntry.UserName*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: UserName
  nameWithType: EventLogEntry.UserName
