### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.LinqDataSource
  id: LinqDataSource
  children:
  - System.Web.UI.WebControls.LinqDataSource.#ctor
  - System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  - System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  - System.Web.UI.WebControls.LinqDataSource.AutoPage
  - System.Web.UI.WebControls.LinqDataSource.AutoSort
  - System.Web.UI.WebControls.LinqDataSource.ContextCreated
  - System.Web.UI.WebControls.LinqDataSource.ContextCreating
  - System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  - System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  - System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  - System.Web.UI.WebControls.LinqDataSource.CreateView
  - System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Deleted
  - System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  - System.Web.UI.WebControls.LinqDataSource.Deleting
  - System.Web.UI.WebControls.LinqDataSource.EnableDelete
  - System.Web.UI.WebControls.LinqDataSource.EnableInsert
  - System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  - System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  - System.Web.UI.WebControls.LinqDataSource.GroupBy
  - System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  - System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Inserted
  - System.Web.UI.WebControls.LinqDataSource.Inserting
  - System.Web.UI.WebControls.LinqDataSource.InsertParameters
  - System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  - System.Web.UI.WebControls.LinqDataSource.OrderBy
  - System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  - System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  - System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  - System.Web.UI.WebControls.LinqDataSource.Select
  - System.Web.UI.WebControls.LinqDataSource.Selected
  - System.Web.UI.WebControls.LinqDataSource.Selecting
  - System.Web.UI.WebControls.LinqDataSource.SelectParameters
  - System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  - System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  - System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  - System.Web.UI.WebControls.LinqDataSource.TableName
  - System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Updated
  - System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  - System.Web.UI.WebControls.LinqDataSource.Updating
  - System.Web.UI.WebControls.LinqDataSource.Where
  - System.Web.UI.WebControls.LinqDataSource.WhereParameters
  langs:
  - csharp
  name: LinqDataSource
  nameWithType: LinqDataSource
  fullName: System.Web.UI.WebControls.LinqDataSource
  type: Class
  summary: "可讓您使用的 Language-Integrated Query (LINQ) 中 ASP.NET Web 網頁透過標記文字擷取和修改從資料物件的資料。"
  remarks: "本主題內容:-[簡介](#introduction)      -   [作業的順序](#order_of_operations)      -   [排序資料](#ordering_data)      -   [群組資料](#grouping_data)      -   [資料修改](#data_modifications)      -   [評估的值，在執行階段](#evaluating_value_at_run_time)      -   [使用預存程序](#working_with_stored_procedures)      -   [宣告式語法](#declarative_syntax)<a name=&quot;introduction&quot;> </a> # # Introduction Language-Integrated Query (LINQ) 會定義一組讓周遊、 篩選和投射作業的任何宣告式的方式來表示的查詢運算子的查詢語法。以網路為基礎的程式設計語言。       資料物件可以是記憶體中的資料集合或表示資料庫資料的物件。 您可以擷取或修改的資料，而不需要撰寫 SQL 命令，針對每項作業。       LinqDataSource 控制項可讓您使用 ASP.NET Web 網頁中的 LINQ 標記文字中設定屬性。 LinqDataSource 控制項可用於 LINQ to SQL 自動產生資料命令。 如需有關 LINQ to SQL 的詳細資訊，請參閱[LINQ to SQL](~/add/includes/ajax-current-ext-md.md)。       您會從記憶體中的資料集合中擷取資料，當您設定<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>屬性來包含資料收集的類別。</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 您設定<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性或欄位，傳回資料集合的屬性。</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 比方說，您可能會有類別，名為`Person`，包含屬性，名為`FavoriteCities`所傳回的字串值陣列。 在此情況下，您將設定<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>屬性`Person`並設定<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性`FavoriteCities`。</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>       當您查詢資料庫時，您必須先建立資料庫與資料表代表實體類別。 您可以使用[!INCLUDE[vs_ordesigner_long](~/add/includes/vs-ordesigner-long-md.md)]或 SqlMetal.exe 公用程式來產生這些類別。 然後設定<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>屬性來表示資料庫的類別，並設定<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性，以代表資料庫資料表的內容。</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>      <a name=&quot;order_of_operations&quot;></a># # 作業 LinqDataSource 控制項順序適用於資料作業順序如下︰ 1。  位置 （指定要傳回的資料記錄）。      2.  Order By （排序）。      3.  Group By （共用的值彙總資料記錄）。      4.  依群組的排序 （排序群組資料）。      5.  選取 （指定哪些欄位或屬性傳回）。      6.  自動排序 （由使用者選取的屬性來排序資料記錄）。      7.  自動頁面 （擷取的使用者所選取的資料記錄的子集）。       您可以將條件加入至<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>屬性來篩選從查詢中傳回的資料記錄。</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 如果<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>屬性未設定時，LinqDataSource 控制項從 資料物件會擷取每一筆記錄。</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>      <a name=&quot;ordering_data&quot;></a># # 排序的資料，您使用<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性來指定從傳回的資料來排序屬性的名稱。</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>      > [!NOTE] > 當您使用 LinqDataSource 控制項[!INCLUDE[ss2k](~/add/includes/ss2k-md.md)]或[!INCLUDE[ssEW](~/add/includes/ssew-md.md)]和<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>屬性設定為`true`，您必須提供值，以在<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 根據預設，<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>屬性是`true`。</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 如果您指派值給<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性，您必須也包含所有 identity 資料行中傳回查詢中的屬性清單。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>      <a name=&quot;grouping_data&quot;></a># # 分組的資料，您使用<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性，以指定的屬性用來合併具有相同值的資料記錄。</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 分組資料，您可以包含`Key`和`It`，其中中動態建立屬性，<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> `Key`屬性表示用來將資料分組，一個或多個屬性值。 例如，如果您依屬性分組`Category`、`Key`屬性會包含中的所有唯一值`Category`屬性。 `It`屬性參考到資料群組中個別記錄的集合。 您可以反覆`It`屬性，以擷取已在群組作業中彙總的個別記錄。 例如，如果您依屬性分組`Category`、`It`屬性包含共用共通的值中的所有個別記錄`Category`屬性。       您使用<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>屬性來指定要用來排序群組的資料的屬性。</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 當您群組資料，<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性會指定如何排序群組資料中的個別記錄。</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       根據預設，LinqDataSource 控制項，請從資料物件擷取所有屬性的值。 您使用<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性來指定要傳回您要使用的可用屬性子集的內容。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 選取作業套用之後 Where、 Order By 和 Group By 作業。 因此，如果您在 Select 子句中建立的別名，別名不提供其他子句。      <a name=&quot;data_modifications&quot;></a># # 您可以指定是否啟用資料修改，以使用資料修改<xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>， <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>，和<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> 提供使用者介面修改從 LinqDataSource 控制項的資料通常透過資料繫結控制項，例如<xref:System.Web.UI.WebControls.DetailsView>控制項。</xref:System.Web.UI.WebControls.DetailsView> 除了設定<xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>， <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>，或<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>至`true`，啟用自動的資料修改所需的下列條件:-<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性不能指定一個值。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>      -<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性不能指定一個值。</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>      指派給<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>屬性必須衍生自<xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> -類別      指派給<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性必須衍生自<xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601> </xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> -屬性       您可以限制中有兩種資料繫結控制項所顯示的屬性。 您可以設定<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性子集的內容，或者您可以定義資料繫結控制項的欄位加<xref:System.Web.UI.WebControls.DataControlField>控制項。</xref:System.Web.UI.WebControls.DataControlField> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 不過，如果您設定<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性，表示不啟用自動更新、 插入和刪除作業。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 如果您想要啟用自動的資料修改，當您使用的可用屬性子集時，就不要設定<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 相反地，從資料物件擷取所有屬性和管理要使用的資料繫結控制項中顯示哪些。 當您使用<xref:System.Web.UI.WebControls.DetailsView>控制項或<xref:System.Web.UI.WebControls.GridView>控制項，您也必須設定<xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A>或<xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A>屬性`false`。</xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> </xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> </xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.DetailsView> 這可防止將資料繫結控制項自動包含編輯和刪除資料的按鈕。 不會顯示在資料繫結控制項的任何值會儲存在檢視狀態。 它們會原封不動地傳遞至資料來源時執行資料更新。      <a name=&quot;evaluating_value_at_run_time&quot;></a># # 評估值在執行階段如果您有篩選，來排序，執行階段評估的值或群組值，您可以將參數加入至<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>， <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>， <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>，或<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>集合。</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>       如果您想要指定預設值，您可以加入參數，以便<xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>集合。</xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>       如果您想要檢查或修改值，執行資料作業之前，您可以處理<xref:System.Web.UI.WebControls.LinqDataSource.Deleting>， <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>， <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>，或<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件。</xref:System.Web.UI.WebControls.LinqDataSource.Updating> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSource.Inserting> </xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 若要取消資料作業，或檢查您根據使用者輸入的資料類別中設定屬性時所發生的驗證錯誤，您也可以處理這些事件。       若要資料作業完成之後，請檢查值，處理<xref:System.Web.UI.WebControls.LinqDataSource.Deleted>， <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>， <xref:System.Web.UI.WebControls.LinqDataSource.Selected>，或<xref:System.Web.UI.WebControls.LinqDataSource.Updated>事件。</xref:System.Web.UI.WebControls.LinqDataSource.Updated> </xref:System.Web.UI.WebControls.LinqDataSource.Selected> </xref:System.Web.UI.WebControls.LinqDataSource.Inserted> </xref:System.Web.UI.WebControls.LinqDataSource.Deleted>      <a name=&quot;working_with_stored_procedures&quot;></a># # 使用預存程序您使用 LinqDataSource 控制項來擷取預存程序中的資料，藉由建立的事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件。</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 在事件處理常式，您呼叫方法的資料內容類別，代表預存程序中，並將結果設<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>屬性<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>物件。</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 如果您想要啟用自動更新、 插入和刪除作業的資料，從方法傳回的型別必須符合中指定的型別<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 如需建立資料內容方法的詳細資訊，請參閱[How to︰ 建立 DataContext 方法對應至預存程序和函式 （O/R 設計工具）](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;declarative_syntax&quot;></a># # 宣告式語法<CodeContentPlaceHolder>0</CodeContentPlaceHolder>"
  example:
  - "The following example shows a LinqDataSource control that retrieves data from an entity class named `Products`. The entity class could have been generated by using the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)] or the SqlMetal.exe utility. The <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is set to return only records that have a value in the `Price` property greater than 50. A <xref:System.Web.UI.WebControls.GridView> control is bound to the LinqDataSource control to display the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_1.aspx)]  \n  \n The following example shows a LinqDataSource control that enables users to update, delete, and insert records in the data source. A <xref:System.Web.UI.WebControls.DetailsView> control is bound to the LinqDataSource control and enables users to see and modify the data. Notice that no SQL commands are required in order to select, update, delete, or insert the records.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_2.aspx)]  \n  \n The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event that sets the data object based on a value in the Web page.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_3.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_3.vb)]  \n  \n The following example shows a LinqDataSource control that is configured to group by two columns. The `Key` property references an object that has two properties, `ProductCategory` and `Color`. The object represented by `It` is renamed (aliased) to `Products`. The renamed `Products` object contains a collection of the individual records in a grouping. Each instance will contain all the columns from the `Products` table.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_4.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_4.aspx)]  \n  \n The following example shows two <xref:System.Web.UI.WebControls.ListView> controls that display the data from the LinqDataSource control in the previous example. One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data, and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group. The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_5.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_5.aspx)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Selecting")]

      [System.ComponentModel.DefaultProperty("ContextTypeName")]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]

      [System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")]

      [System.Web.UI.ParseChildren(true)]

      [System.Web.UI.PersistChildren(false)]

      public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.DataSourceControl
  - System.Web.UI.WebControls.QueryableDataSource
  - System.Web.UI.WebControls.ContextDataSource
  implements:
  - System.Web.DynamicData.IDynamicDataSource
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnPreRender(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.DataSourceControl.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.DataSourceControl.ClientID
  - System.Web.UI.DataSourceControl.ClientIDMode
  - System.Web.UI.DataSourceControl.Controls
  - System.Web.UI.DataSourceControl.CreateControlCollection
  - System.Web.UI.DataSourceControl.EnableTheming
  - System.Web.UI.DataSourceControl.FindControl(System.String)
  - System.Web.UI.DataSourceControl.Focus
  - System.Web.UI.DataSourceControl.HasControls
  - System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent(System.EventArgs)
  - System.Web.UI.DataSourceControl.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.DataSourceControl.SkinID
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#ContainsListCollection
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#GetList
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetView(System.String)
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetViewNames
  - System.Web.UI.DataSourceControl.Visible
  - System.Web.UI.WebControls.ContextDataSource.EntitySetName
  - System.Web.UI.WebControls.ContextDataSource.EntityTypeName
  - System.Web.UI.WebControls.QueryableDataSource.GetView(System.String)
  - System.Web.UI.WebControls.QueryableDataSource.GetViewNames
  - System.Web.UI.WebControls.QueryableDataSource.LoadViewState(System.Object)
  - System.Web.UI.WebControls.QueryableDataSource.QueryCreated
  - System.Web.UI.WebControls.QueryableDataSource.RaiseViewChanged
  - System.Web.UI.WebControls.QueryableDataSource.SaveViewState
  - System.Web.UI.WebControls.QueryableDataSource.TrackViewState
  - System.Web.UI.WebControls.QueryableDataSource.UpdateParameterVales
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: LinqDataSource()
  nameWithType: LinqDataSource.LinqDataSource()
  fullName: System.Web.UI.WebControls.LinqDataSource.LinqDataSource()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "初始化的新執行個體<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>類別。"
  syntax:
    content: public LinqDataSource ();
    parameters: []
  overload: System.Web.UI.WebControls.LinqDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  id: AutoGenerateOrderByClause
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，指出是否<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>控制項會以動態方式建立 Order By 子句中的值為基礎<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters*>集合。</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters*>"
  remarks: "當您將 AutoGenerateOrderByClause 屬性設`true`、<xref:System.Web.UI.WebControls.LinqDataSource>控制項會以動態方式建立 Order By 子句中的值為基礎的<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>集合。</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource>控制項的第一個參數的排序資料，然後此外排序每個額外參數的資料。</xref:System.Web.UI.WebControls.LinqDataSource> 含有參數`null`或 Order By 子句中不包含空值。       您沒有設定<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性當 AutoGenerateOrderByClause 設定為`true`，因為剖析器會動態建立的 Order By 子句。</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> <xref:System.Web.UI.WebControls.LinqDataSource>控制項會擲回例外狀況，如果 AutoGenerateOrderByClause 設定為`true`和<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>指派值給屬性。</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoGenerateOrderByClause set to `true`. A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/csharp/p-system.web.ui.webcontr_120_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_120_1.aspx)]"
  syntax:
    content: public bool AutoGenerateOrderByClause { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>控制項建立 Order By 子句，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  id: AutoGenerateWhereClause
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，指出是否<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>控制項會以動態方式建立 Where 子句中定義的值為基礎<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters*>集合。</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters*>"
  remarks: "當您將 AutoGenerateWhereClause 屬性設`true`、<xref:System.Web.UI.WebControls.LinqDataSource>控制項會以動態方式建立 Where 子句中的參數從<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>集合。</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource> 您將加入至每個參數<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>集合必須有其<xref:System.Web.UI.WebControls.Parameter.Name%2A>屬性設定為符合正在進行查詢的資料物件中的屬性值。</xref:System.Web.UI.WebControls.Parameter.Name%2A> </xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 自動產生子句會檢查是否在指定的值<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>集合等於資料物件中的比對屬性的值。</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 如果您提供一個以上的參數，參數會與邏輯連結`AND`作業。 含有參數`null`或空的值不包含在 where 子句。       自動產生<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>子句可以只測試是否相等，以及可以連結參數只能搭配`AND`作業。</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 未設定為 AutoGenerateWhereClause 屬性`true`或者如果您需要將不會測試是否相等的條件產生關聯的參數有`OR`作業。 您可以完成這些工作，AutoGenerateWhereClause 屬性設定為`false`並加入中的預留位置<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>屬性中每個參數<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>集合。</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 在<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>屬性，與每個預留位置名稱的前面上 @ 符號。</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>       您沒有設定<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>屬性當 AutoGenerateWhereClause 屬性`true`，因為剖析器以動態方式建立 Where 子句。</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> <xref:System.Web.UI.WebControls.LinqDataSource>控制項會擲回例外狀況，如果 AutoGenerateWhereClause 屬性為`true`和<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>指派值給屬性。</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> </xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoGenerateWhereClause set to `true`. A <xref:System.Web.UI.WebControls.GridView> control is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control to display the data that is returned from the query. A <xref:System.Web.UI.WebControls.DropDownList> control is included that is populated with three values. A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection with the name set to `Category,` which matches one of the properties of the data object. Its <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> property is set to the ID of the <xref:System.Web.UI.WebControls.DropDownList> control. The <xref:System.Web.UI.WebControls.LinqDataSource> control automatically creates the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to filter records based on the value that the user selects from the <xref:System.Web.UI.WebControls.DropDownList> control. The query returns the records whose `Category` property matches the value that the user has selected from the <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/add/codesnippet/csharp/p-system.web.ui.webcontr_223_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_223_1.aspx)]"
  syntax:
    content: public bool AutoGenerateWhereClause { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>控制項將會建立 Where 子句，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage
  id: AutoPage
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoPage
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，指出是否<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>控制項支援的資料區段的執行階段導覽。"
  remarks: "將自動產生資料頁屬性設定為`true`以啟用分頁中的<xref:System.Web.UI.WebControls.LinqDataSource>控制項。</xref:System.Web.UI.WebControls.LinqDataSource> 若要讓使用者逐頁查看資料，連接提供介面，用於分頁的資料繫結控制項<xref:System.Web.UI.WebControls.LinqDataSource>控制項。</xref:System.Web.UI.WebControls.LinqDataSource> 當 AutoPage 屬性設定為`true`、<xref:System.Web.UI.WebControls.LinqDataSource>控制項擷取的資料繫結控制項中的一個頁面足以記錄。</xref:System.Web.UI.WebControls.LinqDataSource> 它會使用<xref:System.Linq.Enumerable.Skip%2A>和<xref:System.Linq.Enumerable.Take%2A>方法來擷取目前頁面的記錄。</xref:System.Linq.Enumerable.Take%2A> </xref:System.Linq.Enumerable.Skip%2A>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoPage property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control. The <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users page through the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_959_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_959_1.aspx)]"
  syntax:
    content: public bool AutoPage { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果使用者可以逐頁查看資料。，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSource.AutoPage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort
  id: AutoSort
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoSort
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，指出是否<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>控制項支援在執行階段中排序資料。"
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>控制項支援兩種方法來排序資料。</xref:System.Web.UI.WebControls.LinqDataSource> 您可以使用自動排序屬性，若要啟用執行階段排序，或您可以設定<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性可定義在設計階段的排序。</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       將自動排序屬性設定為`true`啟用中排序<xref:System.Web.UI.WebControls.LinqDataSource>控制項為基礎的資料繫結控制項的排序運算式。</xref:System.Web.UI.WebControls.LinqDataSource> 資料繫結控制項提供介面，讓使用者在執行階段選取用來排序的屬性。       您可以透過程式設計方式設定藉由設定傳回資料的順序<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性至屬性或屬性用來進行排序。</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 當<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性設定為屬性和排序屬性是`true`，從資料繫結控制項的排序運算式中的運算式之後套用<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 因此，這會決定最終排序的資料。"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoSort property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control. The <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users sort the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_766_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_766_1.aspx)]"
  syntax:
    content: public bool AutoSort { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果使用者可以排序資料。，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSource.AutoSort*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  id: ContextCreated
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextCreated
  nameWithType: LinqDataSource.ContextCreated
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "建立內容型別物件的執行個體之後發生。"
  remarks: "處理 ContextCreated 事件來檢查內容型別物件，或檢查在建立物件時所引發的例外狀況。 擷取內容型別物件，從<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>屬性<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>與此事件相關聯的物件。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 擷取從資料作業中引發的例外狀況<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>       內容型別物件建立期間選取、 更新、 插入和刪除作業，並會在要求中重複使用。       沒有不引發事件時的一次。 這是當您以程式設計方式設定<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>屬性的物件期間<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件。</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 額外的條件是要儲存檢視狀態或在物件中，不需要原始值<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>屬性實作<xref:System.Data.Linq.ITable>介面。</xref:System.Data.Linq.ITable> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> ContextCreated;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  id: ContextCreating
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextCreating
  nameWithType: LinqDataSource.ContextCreating
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "建立內容型別物件的執行個體之前發生。"
  remarks: "根據預設，<xref:System.Web.UI.WebControls.LinqDataSource>控制項建立執行個體中指定的型別<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> </xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource>控制項會呼叫來建立物件的執行個體的資料內容物件的預設建構函式。</xref:System.Web.UI.WebControls.LinqDataSource> 可能是您必須使用非預設建構函式，或您必須建立不同的物件中指定的<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 在此情況下，您必須處理 ContextCreating 事件，然後手動建立的資料內容物件。       選取、 更新、 插入和刪除作業期間，會建立內容型別物件。       沒有不引發事件時的一次。 這是當您以程式設計方式設定<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>屬性中的事件處理常式的物件<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件。</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 額外的條件是要儲存檢視狀態或在物件中，不需要原始值<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>屬性實作<xref:System.Data.Linq.ITable>介面。</xref:System.Data.Linq.ITable> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>"
  example:
  - "The following example shows how to create the data context object by using a non-default constructor during the ContextCreating event. The code assigns the object to the <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_153_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_153_1.vb)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs> ContextCreating;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceContextEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  id: ContextDisposing
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextDisposing
  nameWithType: LinqDataSource.ContextDisposing
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "發生於之前處置內容型別物件。"
  remarks: "處理手動處置物件 ContextDisposing 事件或執行清除的特定物件之前物件被終結。"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs> ContextDisposing;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  id: ContextTypeName
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得或設定包含屬性的值具有您想要擷取的資料型別名稱。"
  remarks: "當您使用<xref:System.Web.UI.WebControls.LinqDataSource>控制從記憶體中的資料集合或資料庫擷取資料，您必須指定兩個屬性。</xref:System.Web.UI.WebControls.LinqDataSource> 第一個是代表資料來源的資料內容類別。 第二個是包含資料的資料內容類別中的屬性。 ContextTypeName 屬性設為資料內容類別的名稱和您設定<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>資料集合，其中包含資料的屬性。</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>       比方說，當您從資料庫擷取資料，設定 ContextTypeName 屬性來表示資料庫類別的名稱。 也設定<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性，以代表資料庫中的資料表的內容。</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 若要從資料庫中產生類別，請使用[!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]或 SqlMetal.exe 公用程式，以自動產生這些類別。       當您從記憶體中的資料集合，例如陣列中擷取資料時，設定 ContextTypeName 屬性包含陣列屬性的類別名稱。 然後設定<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性來取得陣列的屬性。</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>       若要啟用自動更新，插入或刪除作業，透過的<xref:System.Web.UI.WebControls.LinqDataSource>控制項，指派給 ContextTypeName 屬性類別必須衍生自<xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext> </xref:System.Web.UI.WebControls.LinqDataSource> 此外，指派的<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性必須衍生自<xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601></xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性 如果您不需要啟用自動更新、 插入或刪除作業，您可以指派任何類型的類別的名稱的 ContextTypeName 屬性。       如需如何從類別的執行個體中選取資料的資訊，請參閱<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>"
  example:
  - "The following example shows how to set the ContextTypeName property to a class that contains an array of strings. It also shows how to set the property to a class (generated by the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]) that represents a database.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_745_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_745_1.aspx)]  \n  \n The class named `ExampleDataContext` that represents the database table is not shown in this example. For this example to work, you must create this class by adding a LINQ To SQL class named Example.dbml and dragging a table named Movie onto the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]. A class named `ExampleDataContext` with a property named `Movies` is generated.  \n  \n The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_745_2.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_745_2.vb)]"
  syntax:
    content: public override string ContextTypeName { get; set; }
    return:
      type: System.String
      description: "要從中擷取資料的類別名稱。"
  overload: System.Web.UI.WebControls.LinqDataSource.ContextTypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  id: CreateQueryableView
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: CreateQueryableView()
  nameWithType: LinqDataSource.CreateQueryableView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "傳回可查詢的檢視。"
  syntax:
    content: protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.QueryableDataSourceView
      description: "可查詢的檢視。"
  overload: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView
  id: CreateView
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: CreateView()
  nameWithType: LinqDataSource.CreateView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateView()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "建立的新執行個體<xref href=&quot;System.Web.UI.WebControls.LinqDataSourceView&quot;></xref>與這個控制項相關聯的類別。"
  remarks: "若要提供自訂的檢視，您可以覆寫這個方法在衍生類別中。"
  syntax:
    content: protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.LinqDataSourceView
      description: "物件，可做為資料繫結控制項的介面。"
  overload: System.Web.UI.WebControls.LinqDataSource.CreateView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  id: Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Delete(IDictionary,IDictionary)
  nameWithType: LinqDataSource.Delete(IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Delete(IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "執行刪除作業。"
  remarks: "一般而言，您沒有從您的程式碼呼叫 Delete 方法。 當您使用<xref:System.Web.UI.WebControls.LinqDataSource>與資料繫結控制項，資料繫結控制項的控制項也會在使用者採取動作來刪除記錄時自動呼叫 Delete 方法。</xref:System.Web.UI.WebControls.LinqDataSource> 當您想要建立您自己的處理程序，刪除資料時，明確地呼叫 Delete 方法。 例如，您可以呼叫 Delete 方法，當您想要刪除的記錄外，資料繫結控制項的事件。"
  syntax:
    content: public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "要刪除的記錄資料列索引鍵值。"
    - id: oldValues
      type: System.Collections.IDictionary
      description: "資料列的值評估為偵測資料衝突。"
    return:
      type: System.Int32
      description: "刪除作業所影響的記錄數目。"
  overload: System.Web.UI.WebControls.LinqDataSource.Delete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Deleted
  id: Deleted
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Deleted
  nameWithType: LinqDataSource.Deleted
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleted
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "刪除作業完成時發生。"
  remarks: "處理刪除事件，攔截任何例外狀況的刪除作業或作業完成之後，請檢查輸出參數。 您可以擷取輸出參數，從<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>傳遞至事件處理常式的物件。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Deleted;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  id: DeleteParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "這個屬性不是由<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>類別。"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "參數的集合。"
  overload: System.Web.UI.WebControls.LinqDataSource.DeleteParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Deleting
  id: Deleting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Deleting
  nameWithType: LinqDataSource.Deleting
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "刪除作業之前發生。"
  remarks: "處理刪除事件，以驗證要刪除，以檢查資料類別，來變更值，以刪除作業之前，或取消刪除作業從資料驗證錯誤的物件。 <xref:System.Web.UI.WebControls.LinqDataSource>控制權會將<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>刪除事件的事件處理常式的物件。</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> </xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>物件包含的資料將被刪除，並可讓您取消刪除作業。</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> 如果資料類別會擲回<xref:System.Web.UI.WebControls.LinqDataSourceValidationException>例外狀況，<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>物件包含在該例外狀況<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceValidationException>       如果刪除事件的事件處理常式中擲回例外狀況，您必須處理該事件處理常式中的例外狀況。 例外狀況不會傳遞至事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Deleted>事件 (透過<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>屬性<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>物件)。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Deleted> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>屬性包含正在刪除事件後就會擲回的例外狀況。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Deleting event. The code cancels the delete operation based on a property in the <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> property and a value from the Web page. In the example, when the `OnSale` property is set to `true`, the user must select a <xref:System.Web.UI.WebControls.CheckBox> control to confirm that a record should be deleted.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_77_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_77_1.cs)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> Deleting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  id: EnableDelete
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，指出是否可以透過刪除資料錄<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>控制項。"
  remarks: "將 EnableDelete 屬性設定為`true`當您想要讓使用者可以刪除資料錄透過<xref:System.Web.UI.WebControls.LinqDataSource>控制項。</xref:System.Web.UI.WebControls.LinqDataSource> EnableDelete 時`true`、<xref:System.Web.UI.WebControls.LinqDataSource>控制使用 LINQ to SQL 會自動建立的資料刪除命令。</xref:System.Web.UI.WebControls.LinqDataSource> 您必須加入介面，可讓使用者選取的記錄，若要刪除，例如<xref:System.Web.UI.WebControls.DetailsView>控制項。</xref:System.Web.UI.WebControls.DetailsView>       <xref:System.Web.UI.WebControls.LinqDataSource>控制項不支援自動刪除作業時<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性或<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性設定。</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> 在此情況下，<xref:System.Web.UI.WebControls.LinqDataSource>控制如果嘗試刪除作業將會擲回例外狀況。</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableDelete set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users delete a data record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_368_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_368_1.aspx)]"
  syntax:
    content: public bool EnableDelete { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已啟用自動刪除作業。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSource.EnableDelete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  id: EnableInsert
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，指出是否可以透過插入資料記錄<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>控制項。"
  remarks: "將 EnableInsert 屬性設定為`true`當您想要讓使用者插入新的資料記錄，到<xref:System.Web.UI.WebControls.LinqDataSource>控制項。</xref:System.Web.UI.WebControls.LinqDataSource> EnableInsert 時`true`、<xref:System.Web.UI.WebControls.LinqDataSource>控制使用 LINQ to SQL 會自動建立 插入資料的命令。</xref:System.Web.UI.WebControls.LinqDataSource> 您必須加入介面，可讓使用者插入新的記錄，例如<xref:System.Web.UI.WebControls.DetailsView>控制項。</xref:System.Web.UI.WebControls.DetailsView>       <xref:System.Web.UI.WebControls.LinqDataSource>控制項不支援自動插入作業時<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性或<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性設定。</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> 在此情況下，<xref:System.Web.UI.WebControls.LinqDataSource>控制如果嘗試插入作業將會擲回例外狀況。</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableInsert set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and displays a button that switches the control to insert mode where users can create and save a new record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1142_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1142_1.aspx)]"
  syntax:
    content: public bool EnableInsert { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已啟用自動插入作業;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSource.EnableInsert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  id: EnableObjectTracking
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，指出是否會追蹤變更的資料內容物件。"
  remarks: "只有在從 LINQ 到 SQL 資料內容物件中選取資料時，會使用的 EnableObjectTracking 屬性。       當您與唯讀資料互動時，EnableObjectTracking 屬性設定為`false`改善效能，因為資料不會快取來判斷是否已變更。 不過，它也會停用延後的查詢執行。 這個屬性必須設定為`true`如果您想要使用延後的查詢執行。"
  syntax:
    content: public bool EnableObjectTracking { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果在資料內容物件追蹤的變更。，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  id: EnableUpdate
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，指出是否可以透過更新資料錄<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>控制項。"
  remarks: "將 EnableUpdate 屬性設定為`true`當您想要讓使用者可以使用更新的資料記錄<xref:System.Web.UI.WebControls.LinqDataSource>控制項。</xref:System.Web.UI.WebControls.LinqDataSource> EnableUpdate 時`true`、<xref:System.Web.UI.WebControls.LinqDataSource>控制使用 LINQ to SQL 會自動建立命令以更新的資料。</xref:System.Web.UI.WebControls.LinqDataSource> 您必須加入介面，可讓使用者更新記錄，例如<xref:System.Web.UI.WebControls.DetailsView>控制項。</xref:System.Web.UI.WebControls.DetailsView>       <xref:System.Web.UI.WebControls.LinqDataSource>控制項不支援自動更新作業時<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性或<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性設定。</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> 在此情況下，<xref:System.Web.UI.WebControls.LinqDataSource>控制如果嘗試更新作業將會擲回例外狀況。</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableUpdate set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users update a data record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_116_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_116_1.aspx)]"
  syntax:
    content: public bool EnableUpdate { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已啟用自動更新作業。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSource.EnableUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy
  id: GroupBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，這個值會指定哪些屬性用於分組所擷取的資料。"
  remarks: "您可以使用 GroupBy 屬性來指定哪些屬性用於合併具有相同值的資料記錄。 例如，如果您將 GroupBy 屬性設定為`Name`，所有記錄在查詢中所提供的相同`Name`屬性值會傳回成單一合併記錄。       您可以指派多個屬性給 GroupBy 屬性藉由封閉中的所有屬性`new`函式，並使用逗號分隔每一個屬性。 例如，若要群組的屬性`Name`然後`Category`，GroupBy 屬性設定為`new(Name, Category)`。       用來分組屬性中的值會傳回產生的屬性，名為透過`Key`。 您包含`Key`屬性<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性，以擷取群組的值。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 您可以設定`Key`使用別名的屬性`As`關鍵字，但您不需要使用別名。 例如，您可能會設定 GroupBy 屬性屬性名為`Category`。 您可以擷取的合併的值`Category`藉由設定屬性<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性`new(Key As ProductCategory)`。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       您可以存取群組中的個別記錄包括`It`屬性<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> `It`屬性包含記錄共用的分組屬性值的集合。 您可以反覆`It`屬性來擷取個別的記錄。       GroupBy 屬性通常用於彙總方法。 您可以使用下列的彙總方法:- `Count()`       -    `Average(` *資料行* `)`       -    `Sum(` *資料行* `)`       -    `Max(` *資料行* `)`       -    `Min(` *資料行* `)`       -    `Where(` *條件* `)`       -    `Any()`       -    `All(` *條件*`)`如需詳細資訊，請參閱[NIB: LinqDataSource Web 伺服器控制項概觀](http://msdn.microsoft.com/en-us/104cfc3f-7385-47d3-8a51-830dfa791136)和[How to︰ 群組和彙總資料使用 LinqDataSource控制](http://msdn.microsoft.com/en-us/b922cf69-251f-4158-b405-ea960993a1af)。"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that groups the returned data by a property named `Category`. It returns the shared values and calculates the average price for the grouped records.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_1.aspx)]  \n  \n The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that is configured to group by two columns. The `Key` property references an object that has two properties, `ProductCategory` and `Color`. The object represented by `It` is renamed `Products`. The renamed `Products` object contains a collection of the individual records in a grouping, and each instance contains all the columns from the Products table.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_2.aspx)]  \n  \n The following example shows two <xref:System.Web.UI.WebControls.ListView> controls for displaying the data from the <xref:System.Web.UI.WebControls.LinqDataSource> control in the previous example. One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group. The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_3.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_3.aspx)]"
  syntax:
    content: public string GroupBy { get; set; }
    return:
      type: System.String
      description: "字串，用來建立 Group By 子句。"
  overload: System.Web.UI.WebControls.LinqDataSource.GroupBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  id: GroupByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得用來建立 Group By 子句的參數集合。"
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>控制項 GroupByParameters 集合中使用參數來在執行階段建立 Group By 子句。</xref:System.Web.UI.WebControls.LinqDataSource> 通常不會使用 GroupByParameters 集合來群組資料。 相反地，您可以使用<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 只有當 Group By 子句中的值必須在執行階段設定，而且值不是屬性名稱時，您可以使用 GroupByParameters 集合。 例如，使用 GroupByParameters 集合是否為基礎的群組資料`LastName`資料記錄中的屬性值等於使用者所提供的值。       如果想要依屬性來群組資料，而且該屬性並沒有在執行階段設定，您可以定義在群組屬性<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 例如，若要從資料庫資料表傳回值分組`LastName`，將<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>至&quot;LastName&quot;，不含任何參數。</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 如果您想要動態群組資料的屬性，建立事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件和自訂<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性視。</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting>       您無法指派屬性的名稱做為 GroupByParameters 集合中的參數值。 當您想要新增的條件，GroupByParameters 集合來新增參數<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>必須在執行階段設定的屬性。</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>       若要設定 GroupByParameters 集合中的值，方法，您可以將名稱指派給每個參數，然後再新增中的預留位置<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性的具名參數。</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 在 Group By 子句中，名稱的前面上每個參數使用 @ 符號。"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "用來建立 Group By 子句的參數。"
  overload: System.Web.UI.WebControls.LinqDataSource.GroupByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  id: Insert(System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Insert(IDictionary)
  nameWithType: LinqDataSource.Insert(IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Insert(IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "執行插入作業。"
  remarks: "一般而言，您沒有從您的程式碼呼叫插入方法。 資料繫結控制項使用者採取動作來插入新的記錄時，會自動呼叫插入方法。 當您想要建立您自己的處理程序，將資料插入時，明確地呼叫插入方法。"
  example:
  - "The following example shows how to programmatically insert a new record in the data source after the user clicks a button. The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains default values to the Insert method.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/add/codesnippet/csharp/cd9b3311-c882-4466-8d03-_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/add/codesnippet/visualbasic/cd9b3311-c882-4466-8d03-_1.vb)]  \n  \n The following example shows the markup for the previous example.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/add/codesnippet/csharp/cd9b3311-c882-4466-8d03-_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/add/codesnippet/visualbasic/cd9b3311-c882-4466-8d03-_2.aspx)]"
  syntax:
    content: public int Insert (System.Collections.IDictionary values);
    parameters:
    - id: values
      type: System.Collections.IDictionary
      description: "要插入至資料來源資料列的值。"
    return:
      type: System.Int32
      description: "插入作業所影響的資料列數目。"
  overload: System.Web.UI.WebControls.LinqDataSource.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Inserted
  id: Inserted
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Inserted
  nameWithType: LinqDataSource.Inserted
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserted
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "插入作業完成時發生。"
  remarks: "處理插入事件攔截任何例外狀況的插入作業，或插入作業完成之後，檢查的值。 您可以擷取到的新值<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>傳遞至事件處理常式的物件。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 例如，您可以使用<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>擷取新的資料記錄的資料庫所產生的識別屬性的物件。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  example:
  - "The following example shows how to create an event handler for the Inserted event that checks for exceptions and retrieves the identity property for the new record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_96_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_96_1.aspx)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Inserted;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Inserting
  id: Inserting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Inserting
  nameWithType: LinqDataSource.Inserting
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "插入作業之前發生。"
  remarks: "處理插入事件，以驗證要插入、 檢查來自資料類別，以將值插入作業之前，變更或取消插入作業的資料驗證錯誤的物件。 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>物件傳遞至事件處理常式，此事件報告功能包含要插入資料來源中的新物件。</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>       如果<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>物件包含的資料類別所擲回驗證例外狀況</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>的插入作業期間發生驗證錯誤 如果要插入的值不符合資料類別中屬性的型別或是它未通過自訂的驗證檢查，就會發生驗證錯誤。 在插入事件的事件處理常式，您可以擷取驗證例外狀況，並採取適當的動作。       如果插入事件的事件處理常式中擲回例外狀況，您必須處理該事件處理常式中的例外狀況。 例外狀況不會傳遞至事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>事件 (透過<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>屬性<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>物件)。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Inserted> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>屬性包含插入事件後就會擲回的例外狀況。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Inserting event that modifies data before the insert operation. The object from the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property is cast to a type named `Product`. The `DateModified` property of the `Product` object is set to the current date and time.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_110_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_110_1.vb)]  \n  \n The following example shows an event handler for the Inserting event that retrieves validation exceptions.  \n  \n```vb#  \nProtected Sub LinqDataSource_Inserting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceInsertEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Inserting(object sender,   \n        LinqDataSourceInsertEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```  \n  \n The previous example retrieves validation exceptions. An exception might be thrown if a value does not match the type of the property. It might also be thrown from a customized check such as the one in the following example. The `OnAgeChanging` method checks that the number for the `Age` property is not negative.  \n  \n```c#  \npartial void  OnAgeChanging(int? value)  \n{  \n    if (value < 0)  \n    {  \n        throw new Exception(\"Age cannot be a negative number.\");  \n    }  \n}  \n```  \n  \n```vb#  \nPrivate Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  \n    If (value < 0) Then  \n        Throw New Exception(\"Age cannot be a negative number.\")  \n    End If  \nEnd Sub  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Inserting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceInsertEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  id: InsertParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得插入作業期間所使用的參數的集合。"
  remarks: "通常所需的插入作業的值會傳遞至<xref:System.Web.UI.WebControls.LinqDataSource>資料繫結控制項的控制項。</xref:System.Web.UI.WebControls.LinqDataSource> 您指定當您想要提供預設值時，插入參數值或定義是否將空值轉換為`null`。 您沒有提供參數的每個值會被插入，僅適用於使用者未提供值時，必須處理的值。       您提供 InsertParameters 集合中的值只用於資料來源中所定義，但未繫結資料控制項中的欄位。 例如，假設資料庫資料表資料行名稱、 地址和郵遞區號，名為但<xref:System.Web.UI.WebControls.ListView>繫結至資料表的控制項繫結名稱和地址欄位。</xref:System.Web.UI.WebControls.ListView> InsertParameters 集合中的值只會用於 [郵遞區號] 欄位。 它們不使用名稱和地址欄位。 即使未輸入任何值，這些欄位也是如此。 如果資料繫結控制項的自動產生欄位的資料來源中的所有欄位，就會不使用從 InsertParameters 集合的任何值。"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with a parameter that provides a default value in the InsertParameters collection. If the user does not provide a value for the `Category` property, the default value that is provided by the parameter is saved in the database.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1053_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1053_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "插入作業期間所使用的參數。"
  overload: System.Web.UI.WebControls.LinqDataSource.InsertParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: LinqDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "初始化<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>物件。"
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "事件資料。"
  overload: System.Web.UI.WebControls.LinqDataSource.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  id: OnUnload(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OnUnload(EventArgs)
  nameWithType: LinqDataSource.OnUnload(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnUnload(EventArgs)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "引發<xref href=&quot;System.Web.UI.Control.Unload&quot;></xref>事件。"
  syntax:
    content: protected override void OnUnload (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>物件，其中包含事件資料。</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.LinqDataSource.OnUnload*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy
  id: OrderBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，這個值會指定哪些欄位會用來排序擷取的資料。"
  remarks: "您可以使用 OrderBy 屬性來指定從傳回的資料，用來排序的屬性。 排序資料的屬性必須存在於原始資料來源，但是並沒有包含在<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 您可以加入一個空格和`Ascending`， `ASC`， `Descending`，或`DESC`OrderBy 字串，以指定如何傳回已排序的資料中的屬性。       您可以使用逗號分隔每一個屬性提供 OrderBy 屬性中的多個屬性。 例如，若要依屬性名為`LastName`和`FirstName`，將 OrderBy 屬性設為&quot;LastName FirstName&quot;。      > [!NOTE] > 當您使用<xref:System.Web.UI.WebControls.LinqDataSource>用來控制[!INCLUDE[ss2k](~/add/includes/ss2k-md.md)]或[!INCLUDE[ssEW](~/add/includes/ssew-md.md)]和<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>屬性設定為`true`，您必須提供 OrderBy 屬性中的值。</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> </xref:System.Web.UI.WebControls.LinqDataSource> 根據預設，<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>屬性是`true`。</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 如果您指派值給<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性，您必須也包含所有 identity 資料行中傳回查詢中的屬性清單。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       如果<xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>屬性設定為`true`，資料繫結控制項可以將排序運算式，以傳遞<xref:System.Web.UI.WebControls.LinqDataSource>控制項在執行階段。</xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> <xref:System.Web.UI.WebControls.LinqDataSource>套用 OrderBy 屬性之後，控制會套用來自資料繫結控制項的排序運算式。</xref:System.Web.UI.WebControls.LinqDataSource> 因此，資料會根據排序運算式傳回的資料繫結控制項。"
  example:
  - "The following example returns data in reverse alphabetical order based on values in the `Category` property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/add/codesnippet/csharp/p-system.web.ui.webcontr_348_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_348_1.aspx)]"
  syntax:
    content: public string OrderBy { get; set; }
    return:
      type: System.String
      description: "字串，用來建立 Order By 子句。"
  overload: System.Web.UI.WebControls.LinqDataSource.OrderBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  id: OrderByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得用來建立 Order By 子句的參數集合。"
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>控制項 OrderByParameters 集合中使用參數來在執行階段建立 Order By 子句。</xref:System.Web.UI.WebControls.LinqDataSource> 通常您會設定<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>屬性`true`將參數加入至 OrderByParameters 集合。</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 當<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>屬性設定為`true`，OrderByParameters 集合中的每個參數加入序列中 Order By 子句指定 OrderByParameters 集合中。</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 當<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>屬性是`true`，不需要參數，所以它們會依序套用和不相符的預留位置來命名。</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>       如果您不需要在 Order By 子句中的執行階段設定值，您不必使用 OrderByParameters 集合。 您可以定義要用於排序中的資料欄位<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 例如，若要從資料庫資料表傳回值依`LastName`，將<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>至&quot;LastName&quot;，不含任何參數。</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       您可以設定 OrderByParameters 集合中的參數，並比對中預留位置的參數<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>屬性，但是這種方法具有有限的應用程式。</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 當您使用這個方法時，OrderByParameters 集合中的參數不能代表資料行名稱。 您可以設定參數的值，然後進行比較值屬性中的值。 例如，您可以排序依據屬性中的值是否小於參數代表的執行階段值的資料。"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property set to `true`. A parameter is included in the OrderByParameters collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/csharp/p-system.web.ui.webcontr_757_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_757_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "用於建立 Order By 子句的參數。"
  overload: System.Web.UI.WebControls.LinqDataSource.OrderByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  id: OrderGroupsBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得或設定用來排序群組資料的欄位。"
  remarks: "您可以使用 OrderGroupsBy 屬性來指定如何排序資料的群組。 例如，您可以依分組`CategoryID`屬性，然後排序每個類別目錄識別碼分組的平均`Price`屬性。       只有在已分組的資料時，您可以設定 OrderGroupsBy 屬性。 如果您將 OrderGroupsBy 屬性未設定<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>屬性，<xref:System.Web.UI.WebControls.LinqDataSource>控制項會擲回例外狀況。</xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>       用來排序資料的屬性必須為此屬性，用來分組資料或在群組資料的彙總函式的結果。 若要指定資料的排序方式，您可以加入一個空格和字串&quot;Ascending&quot;、&quot;ASC 」、 「 遞減 」 或&quot;DESC&quot;OrderGroupsBy 字串中的屬性名稱。       您可以指定多個屬性 OrderGroupsBy 屬性中。 使用逗號分隔每一個屬性。"
  example:
  - "The following example shows how to group the data by using two properties, and how to sort the grouped data by using one of those properties. The data from a table named `Products` is grouped by using properties named `CategoryID` and `Discontinued`. The grouped data is sorted by the `CategoryID` property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1127_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1127_1.aspx)]  \n  \n The following example shows how to group the data by using a property, and how to sort it based on the results of an aggregation function. The data from the `Products` table is grouped by using the `CategoryID` property. It is sorted based on the average of the `UnitPrice` property within each group.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1127_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1127_2.aspx)]"
  syntax:
    content: public string OrderGroupsBy { get; set; }
    return:
      type: System.String
      description: "字串，用來建立的順序群組 By 子句。"
  overload: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  id: OrderGroupsByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得用來建立的順序群組 By 子句的參數集合。"
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>控制項 OrderGroupsByParameters 集合中使用參數來在執行階段建立的順序群組 By 子句。</xref:System.Web.UI.WebControls.LinqDataSource>       只有當您必須在群組 By 子句中的執行階段設定值，您可以加入至 OrderGroupsByParameters 集合的值。 您可以定義用來排序資料所使用的欄位<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>       您可以設定 OrderGroupsByParameters 集合中的參數，並比對中預留位置的參數<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 不過，當您使用這個方法，OrderGroupsByParameters 集合中的參數不能代表資料行名稱。它們必須代表值。 您可以設定參數的值，然後進行比較的屬性值。 例如，您可以排序依據屬性中的值是否小於參數代表的執行階段值的資料。"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "用來建立的順序群組 By 子句的參數。"
  overload: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Select
  id: Select
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Select
  nameWithType: LinqDataSource.Select
  fullName: System.Web.UI.WebControls.LinqDataSource.Select
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得或設定的屬性和包含在擷取資料的導出的值。"
  remarks: "如果您未設定選取的屬性，<xref:System.Web.UI.WebControls.LinqDataSource>控制從資料物件擷取所有的屬性 （資料行）。</xref:System.Web.UI.WebControls.LinqDataSource> 若要從物件擷取屬性的子集，或擷取資料時計算新的值，您可以使用選取的屬性。       您指定要擷取選取的屬性設定為您想要傳回的資料中包含的屬性名稱的屬性。       如果您從資料物件擷取屬性的子集<xref:System.Web.UI.WebControls.LinqDataSource>控制項會以動態方式建立包含您在選取的屬性中指定之屬性的類別。</xref:System.Web.UI.WebControls.LinqDataSource> 如果您要計算不是屬性中的資料物件的屬性，也會動態建立類別。 在這些情況下，從查詢傳回的物件不是類別中所指定的執行個體<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 相反地，您必須使用`new`中選取的屬性，以表示新的類別從查詢傳回的方法。 例如，若要只傳回`FirstName`和`LastName`屬性從物件，包含多個這些屬性，可將選取的屬性設定為`new(FirstName, LastName)`。 <xref:System.Web.UI.WebControls.LinqDataSource>控制項將以動態方式建立新的類別中所指定`new`方法。</xref:System.Web.UI.WebControls.LinqDataSource>       您可以使用`As`關鍵字來指派別名給選取的值。 如果您指定別名，您必須包含中的別名屬性`new`方法。 將繫結至結果的任何資料繫結控制項<xref:System.Web.UI.WebControls.LinqDataSource>屬性必須參考控制項的別名。</xref:System.Web.UI.WebControls.LinqDataSource> 例如，如果您將選取的屬性設定為`new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`，資料繫結控制項可以存取兩個屬性︰`SalesRegion`和`RevenueThousands`。       您使用`new`下表列出中根據條件來選取屬性函式。      |選取 |使用新的 |範例 |  |------------|----------------|-------------|  |單一屬性。 |`new`不需要。 |`Select=&quot;Category&quot;`|  |多個屬性。 |`new`所需。 |`Select=&quot;new(Cateogry, Name)&quot;`|  |單一或多個有別名的屬性。 |`new`所需。 |`Select=&quot;new(Category As CategoryGroup)&quot;`|      如果您想要啟用自動的資料修改，但不是想顯示從資料物件的所有屬性，請勿設定選取的屬性。 請改用管理透過資料繫結控制項的顯示。 當您使用<xref:System.Web.UI.WebControls.DetailsView>控制項或<xref:System.Web.UI.WebControls.GridView>控制項，您也必須設定<xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A>或<xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A>屬性`false`。</xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> </xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> </xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.DetailsView> 不會顯示在資料繫結控制項的任何值會儲存在檢視狀態。 它們會原封不動地傳遞至資料來源時執行資料更新。       分組資料的查詢中，您可以選取的屬性中包含彙總方法。 您可以使用下列的彙總方法:- `Count()`       -    `Average(` *資料行* `)`       -    `Sum(` *資料行* `)`       -    `Max(` *資料行* `)`       -    `Min(` *資料行* `)`       -    `Where(` *條件* `)`       -    `Any()`       -    `All(` *條件*`)`如需詳細資訊，請參閱[NIB: LinqDataSource Web 伺服器控制項概觀](http://msdn.microsoft.com/en-us/104cfc3f-7385-47d3-8a51-830dfa791136)和[How to︰ 群組和彙總資料使用 LinqDataSource控制](http://msdn.microsoft.com/en-us/b922cf69-251f-4158-b405-ea960993a1af)。       分組資料，您可以包含`Key`和`It`，動態建立所在屬性，在 選取的屬性。 `Key`屬性表示用來將資料分組，一個或多個屬性值。 例如，如果您依屬性分組`Category`、`Key`屬性會包含在每個唯一值`Category`屬性。 `It`屬性參考到資料群組中個別記錄的集合。 您可以反覆`It`屬性，以擷取已在群組作業中彙總的個別記錄。 例如，如果您依屬性分組`Category`、`It`屬性包含共用共通的值中的所有個別記錄`Category`屬性。       如果您包含`It`關鍵字在選取的屬性將資料分組時，您必須指派別名`It`關鍵字。 <xref:System.Web.UI.WebControls.LinqDataSource>控制項將會擲回例外狀況，如果`It`沒有別名。</xref:System.Web.UI.WebControls.LinqDataSource> 您可以指派別名`Key`關鍵字，但這不是必要。"
  example:
  - "The following example shows how to set the Select property to a subset of properties in the data object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/add/codesnippet/csharp/p-system.web.ui.webcontr_580_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_580_1.aspx)]  \n  \n The following example shows how to retrieve values in a property that has been used to group data, and to retrieve the average for the grouped records. The `Key` keyword contains the property that has been used for grouping data. In this example, `Key` will contain the shared values from the `ProductCategory` property.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_580_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_580_2.aspx)]"
  syntax:
    content: public string Select { get; set; }
    return:
      type: System.String
      description: "字串，用來建立 Select 子句。"
  overload: System.Web.UI.WebControls.LinqDataSource.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Selected
  id: Selected
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Selected
  nameWithType: LinqDataSource.Selected
  fullName: System.Web.UI.WebControls.LinqDataSource.Selected
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "資料擷取作業完成時發生。"
  remarks: "處理選取事件，以攔截任何例外狀況，從資料擷取作業或擷取作業完成之後，請檢查資料物件。 物件是可從<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>傳遞至事件處理常式的物件。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Selected;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Selecting
  id: Selecting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Selecting
  nameWithType: LinqDataSource.Selecting
  fullName: System.Web.UI.WebControls.LinqDataSource.Selecting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "擷取資料的作業之前發生。"
  remarks: "處理在 Selecting 事件才能執行下列工作:-修改參數來擷取資料。      -以程式設計方式產生查詢。      -修改排序或分頁的值。      -執行自訂排序或分頁。      -取消資料擷取作業。       <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>這個事件包含資料擷取作業的參數傳遞至事件處理常式的物件。</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> 您可以修改選取的事件處理常式的參數，才能執行查詢，或您可以建立新的結果集，並將其指派給<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>       繫結至<xref:System.Web.UI.WebControls.LinqDataSource>。</xref:System.Web.UI.WebControls.LinqDataSource>控制項可能會受限於您實作自訂排序，或為此事件處理常式中的分頁的能力 例如，當資料行標頭的<xref:System.Web.UI.WebControls.GridView>按一下控制項時，控制項執行自動排序這可能會覆寫任何排序您建立在事件處理常式。</xref:System.Web.UI.WebControls.GridView>       如果在 Selecting 事件的事件處理常式中擲回例外狀況，您必須處理該事件處理常式中的例外狀況。 例外狀況不會傳遞至事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Selected>事件 (透過<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>屬性<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>物件)。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selected> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>屬性包含在 Selecting 事件後就會擲回的例外狀況。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Selecting event. The handler creates a query that retrieves values from an array of string values in the Web page.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/csharp/e-system.web.ui.webcontr_69_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_69_1.vb)]  \n  \n The following example shows how to assign the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property to the object that is returned from a method that represents a stored procedure.  \n  \n [Visual Basic]  \n  \n```  \nProtected Sub LinqDataSource_Selecting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceSelectEventArgs)  \n    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  \n    e.Result = exampleContext.GetRegisteredCustomers()  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Selecting(object sender,   \n        LinqDataSourceSelectEventArgs e)  \n{  \n    ExampleDataContext exampleContext = new ExampleDataContext();  \n    e.Result = exampleContext.GetRegisteredCustomers();  \n}  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> Selecting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceSelectEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  id: SelectParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得資料擷取作業期間所使用的參數的集合。"
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>控制項 SelectParameters 集合中使用參數來在執行階段建立 Select 子句。</xref:System.Web.UI.WebControls.LinqDataSource> 當您想要在 Select 子句中使用執行階段值時，您可以將加入 SelectParameters 集合的參數。 例如，您可以將參數加入 SelectParameters 集合來代表使用者的設定檔中的屬性。 您接著可以來計算新值從資料來源使用該屬性和值。       如果您不需要在 Select 子句中的執行階段設定值，您不必使用 SelectParameters 集合。 您可以定義要在擷取的屬性<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 例如，若要傳回`FirstName`和`LastName`值從資料庫資料表時，設定<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>&quot;FirstName，LastName&quot;以不含任何參數。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       若要設定 SelectParameters 集合中的值，您加入內某個預留位置<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性，為具名參數。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 在 Select 子句中，名稱的前面上每個參數使用 @ 符號。       您無法使用 SelectParameters 集合中的參數來代表屬性名稱。 若要以動態方式設定<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性名稱的屬性，建立事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件和自訂<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>屬性視。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>"
  example:
  - "The following example shows how to use a user-supplied value to calculate a value in the returned data. The user can enter a value in the text box that represents the number of manufacturing days. That value is divided by a value from a database that represents the number of days to manufacture a product. The returned value indicates how many products can be manufactured during the specified number of days. The user's input is included in the Select command through the SelectParameters collection.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_129_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_129_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "用來建立 Select 子句的參數。"
  overload: System.Web.UI.WebControls.LinqDataSource.SelectParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  id: StoreOriginalValuesInViewState
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
  fullName: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，指出是否應該將資料來源的資料儲存在檢視狀態，以確定到資料已不變更另一個處理序之前更新或刪除。"
  remarks: "根據預設，當更新和刪除作業已啟用，<xref:System.Web.UI.WebControls.LinqDataSource>控制會儲存原始值的所有資料錄檢視狀態中。</xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource>控制項儲存的所有主索引鍵的值和所有屬性未都標記為`UpdateCheck.Never`中`Column`屬性。</xref:System.Web.UI.WebControls.LinqDataSource> 您設定`UpdateCheck`屬性`Column`屬性[!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]。       LINQ to SQL 更新或刪除資料之前，它會檢查在檢視狀態資料來源中的目前值的值。 如果值不相符，已變更的資料來源記錄。 在此情況下，LINQ to SQL 會擲回例外狀況並不繼續更新或刪除作業。 如需有關 LINQ to SQL 的詳細資訊，請參閱[LINQ to SQL](~/add/includes/ajax-current-ext-md.md)。       在檢視中儲存原始值狀態可能會造成頁面大小變得過大，而且可以公開給惡意使用者的機密資料。 您可以停用檢視狀態中將值儲存 StoreOriginalValuesInViewState 屬性設定為`false`。 如果您這樣做，您必須提供自己的方法來確保資料未變更。 如果您將 StoreOriginalValuesInViewState 屬性設定為`false`，原始的值不會保存在資料繫結控制項的檢視狀態。 在此情況下，LINQ to SQL 無法驗證資料的完整性。 LINQ to SQL 將會擲回例外狀況，指出資料衝突，即使資料來源中的資料實際變更。       如果基礎資料來源包含時間戳記欄位會自動更新更新期間，您可以儲存只有在檢視狀態中的值。 在此情況下，實體類別中的時間戳記屬性設定為`IsVersion=true`和所有屬性都會都設為`UpdateCheck.Never`。 因為每次在該記錄中資料的變更時，時間戳記欄位會自動更新資料庫，LINQ to SQL 決定從該值時，資料已經變更。 這有助於減少檢視狀態的大小，而會公開任何機密資料。 LINQ to SQL 會檢查資料的一致性藉由比較時間戳記值在檢視狀態，且在資料庫中的時間戳記值。 如需詳細資訊，請參閱[逐步解說︰ 使用時間戳記與檢查資料完整性 LinqDataSource 控制項](http://msdn.microsoft.com/en-us/e7700162-4f05-4130-81f7-3be1361027fa)。"
  syntax:
    content: public bool StoreOriginalValuesInViewState { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果值會儲存在檢視，狀態。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  id: System#Web#DynamicData#IDynamicDataSource#ContextType
  isEii: true
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "如需這個成員的說明，請參閱<xref href=&quot;System.Web.DynamicData.IDynamicDataSource&quot;> </xref>。"
  remarks: "這個成員是明確介面成員實作。 它可用時，才<xref:System.Web.UI.WebControls.LinqDataSource>執行個體轉換成<xref:System.Web.DynamicData.IDynamicDataSource>介面。</xref:System.Web.DynamicData.IDynamicDataSource> </xref:System.Web.UI.WebControls.LinqDataSource>"
  syntax:
    content: Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }
    return:
      type: System.Type
      description: "與類別相關聯的型別。"
  overload: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  id: System#Web#DynamicData#IDynamicDataSource#EntitySetName
  isEii: true
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "如需這個成員的說明，請參閱<xref href=&quot;System.Web.DynamicData.IDynamicDataSource&quot;> </xref>。"
  remarks: "這個成員是明確介面成員實作。 它可用時，才<xref:System.Web.UI.WebControls.LinqDataSource>執行個體轉換成<xref:System.Web.DynamicData.IDynamicDataSource>介面。</xref:System.Web.DynamicData.IDynamicDataSource> </xref:System.Web.UI.WebControls.LinqDataSource>"
  syntax:
    content: string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }
    return:
      type: System.String
      description: "實體的名稱。"
  overload: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.TableName
  id: TableName
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: TableName
  nameWithType: LinqDataSource.TableName
  fullName: System.Web.UI.WebControls.LinqDataSource.TableName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得或設定屬性或欄位名稱代表的資料集合的資料內容類別中。"
  remarks: "設定 TableName 屬性名稱的屬性或欄位，表示您想要擷取的資料。 當您要連接至資料庫資料表中時，屬性的名稱通常是資料表的名稱相同。 當您要連接到記憶體中的資料集合時，設定 TableName 屬性的屬性或欄位，傳回資料集合的名稱。       您可以指定 TableName 屬性，擷取作業會傳回任何類型的屬性。 如果屬性所表示之物件未實作<xref:System.Collections.IEnumerable>、<xref:System.Web.UI.WebControls.LinqDataSource>控制項自動包裝的執行個體中的物件<xref:System.Collections.IEnumerable>物件。</xref:System.Collections.IEnumerable> </xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Collections.IEnumerable>       若要啟用自動更新、 插入或刪除作業，指派給<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>屬性必須衍生自<xref:System.Data.Linq.DataContext>和指派給屬性必須衍生自<xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601> TableName 屬性</xref:System.Data.Linq.DataContext></xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>類別       如需如何從類別的執行個體中選取資料的資訊，請參閱<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>"
  example:
  - "The following example shows two <xref:System.Web.UI.WebControls.LinqDataSource> controls. In one <xref:System.Web.UI.WebControls.LinqDataSource> control, the TableName property is set to a property in a class. That property returns an array of strings. In the other <xref:System.Web.UI.WebControls.LinqDataSource> control, the TableName property is set to a property that represents a database table.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_811_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_811_1.aspx)]  \n  \n The class named `ExampleDataContext` that represents the database table is not shown in this example. For this example to work, you must create this class by adding a LINQ to SQL class named Example.dbml and dragging a table named Movie onto the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]. A class named `ExampleDataContext` with a property named `Movies` is generated.  \n  \n The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_811_2.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_811_2.vb)]"
  syntax:
    content: public string TableName { get; set; }
    return:
      type: System.String
      description: "字串，包含名稱的屬性，其中包含資料收集。"
  overload: System.Web.UI.WebControls.LinqDataSource.TableName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  id: Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Update(IDictionary,IDictionary,IDictionary)
  nameWithType: LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "執行更新作業。"
  remarks: "一般而言，您沒有從您的程式碼呼叫更新方法。 資料繫結控制項使用者採取動作來更新記錄時，會自動呼叫 Update 方法。 當您想要建立您自己的處理程序來更新資料時，明確地呼叫 Update 方法。"
  example:
  - "The following example shows how to programmatically update a record in the data source after the user clicks a button. The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains the key value, a <xref:System.Collections.Specialized.ListDictionary> object that contains the original values, and a <xref:System.Collections.Specialized.ListDictionary> object that contains the new values to the Update method.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Update#1](~/add/codesnippet/csharp/6a1b9704-8770-4c58-8934-_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/add/codesnippet/visualbasic/6a1b9704-8770-4c58-8934-_1.vb)]  \n  \n The following example shows the markup for the previous example.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Update#2](~/add/codesnippet/csharp/6a1b9704-8770-4c58-8934-_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/add/codesnippet/visualbasic/6a1b9704-8770-4c58-8934-_2.aspx)]"
  syntax:
    content: public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "若要更新的記錄資料列索引鍵值。"
    - id: values
      type: System.Collections.IDictionary
      description: "在資料來源中更新資料列的值。"
    - id: oldValues
      type: System.Collections.IDictionary
      description: "資料列的值評估為偵測資料衝突。"
    return:
      type: System.Int32
      description: "更新作業所影響的記錄數目。"
  overload: System.Web.UI.WebControls.LinqDataSource.Update*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Updated
  id: Updated
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Updated
  nameWithType: LinqDataSource.Updated
  fullName: System.Web.UI.WebControls.LinqDataSource.Updated
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "當更新作業已完成時發生。"
  remarks: "處理已更新事件，攔截任何例外狀況，從更新作業或更新作業完成之後，請檢查輸出參數的值。 輸出參數都是從<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>傳遞至事件處理常式的物件。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Updated;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  id: UpdateParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "此集合不是由<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>類別。"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "參數的集合。"
  overload: System.Web.UI.WebControls.LinqDataSource.UpdateParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Updating
  id: Updating
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Updating
  nameWithType: LinqDataSource.Updating
  fullName: System.Web.UI.WebControls.LinqDataSource.Updating
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "更新作業之前發生。"
  remarks: "處理更新事件，以驗證更新，以檢查資料類別，來變更值，更新作業之前，或取消更新作業中的資料驗證錯誤的物件。 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>傳遞至事件處理常式的物件包含的原始物件和更新的物件。</xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>       如果<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>物件包含的資料類別所擲回驗證例外狀況</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>的更新作業期間發生驗證錯誤 如果要更新的值不符合資料類別中屬性的型別，或如果未通過自訂的驗證檢查，就會發生驗證錯誤。 在更新事件的事件處理常式，您可以擷取驗證例外狀況，並採取適當的動作。       如果更新事件的事件處理常式中擲回例外狀況，您必須處理該事件處理常式中的例外狀況。 例外狀況不會傳遞至事件處理常式<xref:System.Web.UI.WebControls.LinqDataSource.Updated>事件 (透過<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>屬性<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>物件)。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Updated> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>屬性包含在更新事件後就會擲回的例外狀況。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Updating event. The code compares properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to see whether a value has changed. If the value has changed, a value of the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_16_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_16_1.cs)]  \n  \n The following example shows an event handler for the Updating event that retrieves validation exceptions.  \n  \n```vb#  \nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceUpdateEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Updating(object sender,   \n        LinqDataSourceUpdateEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```  \n  \n The previous example retrieves validation exceptions. An exception might be thrown if a value does not match the type of the property. It might also be thrown from a customized check such as the one in the following example. The `OnAgeChanging` method checks that the number for the `Age` property is not negative.  \n  \n```c#  \npartial void  OnAgeChanging(int? value)  \n{  \n    if (value < 0)  \n    {  \n        throw new Exception(\"Age cannot be a negative number.\");  \n    }  \n}  \n```  \n  \n```vb#  \nPrivate Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  \n    If (value < 0) Then  \n        Throw New Exception(\"Age cannot be a negative number.\")  \n    End If  \nEnd Sub  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> Updating;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs}
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Where
  id: Where
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Where
  nameWithType: LinqDataSource.Where
  fullName: System.Web.UI.WebControls.LinqDataSource.Where
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得或設定指定條件的值必須是要包含在擷取的資料中的記錄，則為 true。"
  remarks: "You use the Where property to specify the conditions for the record to be returned from a query. The syntax for the Where property is the same as the syntax for a LINQ Where clause in C#.  \n  \n You specify an expression that results in a Boolean value, and if the expression evaluates to `true` for a given row, the row is included in the result set. Expressions are composed of column names, comparison operators, and values to compare to, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where=\"Price > 50\"...>  \n```  \n  \n To specify multiple expressions linked by logical `AND` or `OR` operators, you use `&&` as a logical AND operator and `||` as a logical OR operator, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where=\"Price > 50 && Price < 100\"...>  \n<asp:LinqDataSource ... Where=\"Price <= 50 || Price >= 100\"...>  \n```  \n  \n If you want to test a property against a literal string value, the literal string value must be enclosed in double quotation marks. To do this in markup, enclose the Where clause value in single quotation marks, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where='Category = \"Sports\"' ... >  \n```  \n  \n To test against a literal string value in code, use escape characters that are appropriate to the language you are using in order to insert double quotation marks, as shown in the following example:  \n  \n```vb#  \nLinqDataSource1.Where = \"Category = \"\"Sports\"\"\"  \n```  \n  \n```c#  \nLinqDataSource1.Where = \"Category = \\\"Sports\\\"\";  \n```  \n  \n If you want to test whether a string is greater than or less than another string, you must use methods of the <xref:System.String> class instead of using `<` or `>` operators between the column name and the string value. The following examples show how to select rows that have Category values that are less than, less than or equal to, greater than, or greater than or equal to \"Sports\":  \n  \n```  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") < 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") <= 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") > 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") >= 0' ... >  \n```  \n  \n You can also use other methods of the <xref:System.String> class, such as <xref:System.String.StartsWith%2A>, <xref:System.String.EndsWith%2A>, and <xref:System.String.Contains%2A>. For more information about how to compare strings, see [Comparing Strings](~/add/includes/ajax-current-ext-md.md). For more information about Where clause syntax, see [C# Operators](~/add/includes/ajax-current-ext-md.md) and [where clause](~/add/includes/ajax-current-ext-md.md).  \n  \n In addition to filtering based on static values that you define when you create the Web page, you can filter based on dynamic values that are evaluated at run time. In that case, you include a named parameter in the Where property that acts as a placeholder for the value. You then add a parameter that has the matching name to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.  \n  \n Alternatively, you can set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `true` and define the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection. When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property is `true`, you do not have to include the named parameters in the Where property. Instead, the <xref:System.Web.UI.WebControls.LinqDataSource> control automatically generates the Where clause from the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> property.  \n  \n For more information about how to filter data, see [Walkthrough: Selecting and Filtering a Subset of Data with the LinqDataSource and GridView Controls](http://msdn.microsoft.com/en-us/c1cca3e8-86e4-4e69-a29f-1c05b91f2205)."
  example:
  - "The following example shows how to filter the data returned from a query based on a static condition.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_778_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_778_1.aspx)]  \n  \n The following example shows how to filter the data based on a value that is provided by the user at run time. In this example a <xref:System.Web.UI.WebControls.DropDownList> control and a <xref:System.Web.UI.WebControls.GridView> control are displayed on the page. When the user selects one of the values in the <xref:System.Web.UI.WebControls.DropDownList> control, the <xref:System.Web.UI.WebControls.LinqDataSource> control selects from the `Products` table only rows that have `UserPrice` values equal to the selected value. The <xref:System.Web.UI.WebControls.GridView> control then displays the filtered data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_778_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_778_2.aspx)]"
  syntax:
    content: public string Where { get; set; }
    return:
      type: System.String
      description: "字串，用來建立 Where 子句。"
  overload: System.Web.UI.WebControls.LinqDataSource.Where*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  id: WhereParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "取得參數的集合，這些用來建立 Where 子句。"
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>控制項 WhereParameters 集合中使用參數來建立 Where 子句，在執行階段。</xref:System.Web.UI.WebControls.LinqDataSource> 您將參數加入至 WhereParameters 集合當您想要以程式設計方式設定一或多個條件，在 where 子句。 比方說，您可能會搜尋資料庫資料表中記錄的值相等的姓氏<xref:System.Web.UI.WebControls.TextBox>控制項。</xref:System.Web.UI.WebControls.TextBox> 在此情況下，您可以將參數加入文字方塊值的 WhereParameters 集合。       如果您沒有在執行階段設定值，在 where 子句中，您不必使用 WhereParameters 集合。 您可以定義中所要擷取欄位<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>屬性。</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 例如，若要從資料庫資料表傳回值其中`LastName`equals&quot;Adams 」 在標記中，設定<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>屬性`&quot;LastName = &quot;Adams&quot;&quot;`不含任何參數。</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>       若要設定 WhereParameters 集合中的值，方法，您可以將名稱指派給每個參數，然後再新增中的預留位置<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>該參數的屬性。</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 在 where 子句中，與每個參數名稱的前面上 @ 符號。"
  example:
  - "The following example shows how to use the WhereParameters collection to dynamically create the Where clause. The <xref:System.Web.UI.WebControls.LinqDataSource> control returns all the records with a value in the `Price` column that is greater than the value selected by the user in a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_594_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_594_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "集合的參數，用來建立 Where 子句中的<xref:System.Web.UI.WebControls.LinqDataSource.Where*>屬性。</xref:System.Web.UI.WebControls.LinqDataSource.Where*>"
  overload: System.Web.UI.WebControls.LinqDataSource.WhereParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.ContextDataSource
  isExternal: false
  name: System.Web.UI.WebControls.ContextDataSource
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: LinqDataSource()
  nameWithType: LinqDataSource.LinqDataSource()
  fullName: System.Web.UI.WebControls.LinqDataSource.LinqDataSource()
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoPage
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoSort
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextCreated
  nameWithType: LinqDataSource.ContextCreated
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreated
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceStatusEventArgs>
  nameWithType: EventHandler<LinqDataSourceStatusEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
    name: LinqDataSourceStatusEventArgs
    nameWithType: LinqDataSourceStatusEventArgs
    fullName: LinqDataSourceStatusEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextCreating
  nameWithType: LinqDataSource.ContextCreating
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreating
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceContextEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceContextEventArgs>
  nameWithType: EventHandler<LinqDataSourceContextEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceContextEventArgs
    name: LinqDataSourceContextEventArgs
    nameWithType: LinqDataSourceContextEventArgs
    fullName: LinqDataSourceContextEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextDisposing
  nameWithType: LinqDataSource.ContextDisposing
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceDisposeEventArgs>
  nameWithType: EventHandler<LinqDataSourceDisposeEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs
    name: LinqDataSourceDisposeEventArgs
    nameWithType: LinqDataSourceDisposeEventArgs
    fullName: LinqDataSourceDisposeEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateQueryableView()
  nameWithType: LinqDataSource.CreateQueryableView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView()
- uid: System.Web.UI.WebControls.QueryableDataSourceView
  parent: System.Web.UI.WebControls
  isExternal: false
  name: QueryableDataSourceView
  nameWithType: QueryableDataSourceView
  fullName: System.Web.UI.WebControls.QueryableDataSourceView
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateView()
  nameWithType: LinqDataSource.CreateView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateView()
- uid: System.Web.UI.WebControls.LinqDataSourceView
  parent: System.Web.UI.WebControls
  isExternal: false
  name: LinqDataSourceView
  nameWithType: LinqDataSourceView
  fullName: System.Web.UI.WebControls.LinqDataSourceView
- uid: System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Delete(IDictionary,IDictionary)
  nameWithType: LinqDataSource.Delete(IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Delete(IDictionary,IDictionary)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Web.UI.WebControls.LinqDataSource.Deleted
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Deleted
  nameWithType: LinqDataSource.Deleted
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleted
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.ParameterCollection
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParameterCollection
  nameWithType: ParameterCollection
  fullName: System.Web.UI.WebControls.ParameterCollection
- uid: System.Web.UI.WebControls.LinqDataSource.Deleting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Deleting
  nameWithType: LinqDataSource.Deleting
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceDeleteEventArgs>
  nameWithType: EventHandler<LinqDataSourceDeleteEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs
    name: LinqDataSourceDeleteEventArgs
    nameWithType: LinqDataSourceDeleteEventArgs
    fullName: LinqDataSourceDeleteEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableDelete
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableInsert
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupBy
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Insert(IDictionary)
  nameWithType: LinqDataSource.Insert(IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Insert(IDictionary)
- uid: System.Web.UI.WebControls.LinqDataSource.Inserted
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Inserted
  nameWithType: LinqDataSource.Inserted
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserted
- uid: System.Web.UI.WebControls.LinqDataSource.Inserting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Inserting
  nameWithType: LinqDataSource.Inserting
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceInsertEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceInsertEventArgs>
  nameWithType: EventHandler<LinqDataSourceInsertEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
    name: LinqDataSourceInsertEventArgs
    nameWithType: LinqDataSourceInsertEventArgs
    fullName: LinqDataSourceInsertEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.InsertParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: LinqDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnInit(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnUnload(EventArgs)
  nameWithType: LinqDataSource.OnUnload(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnUnload(EventArgs)
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Select
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Select
  nameWithType: LinqDataSource.Select
  fullName: System.Web.UI.WebControls.LinqDataSource.Select
- uid: System.Web.UI.WebControls.LinqDataSource.Selected
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Selected
  nameWithType: LinqDataSource.Selected
  fullName: System.Web.UI.WebControls.LinqDataSource.Selected
- uid: System.Web.UI.WebControls.LinqDataSource.Selecting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Selecting
  nameWithType: LinqDataSource.Selecting
  fullName: System.Web.UI.WebControls.LinqDataSource.Selecting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceSelectEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceSelectEventArgs>
  nameWithType: EventHandler<LinqDataSourceSelectEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceSelectEventArgs
    name: LinqDataSourceSelectEventArgs
    nameWithType: LinqDataSourceSelectEventArgs
    fullName: LinqDataSourceSelectEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.SelectParameters
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
  fullName: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
- uid: System.Web.UI.WebControls.LinqDataSource.TableName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: TableName
  nameWithType: LinqDataSource.TableName
  fullName: System.Web.UI.WebControls.LinqDataSource.TableName
- uid: System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Update(IDictionary,IDictionary,IDictionary)
  nameWithType: LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
- uid: System.Web.UI.WebControls.LinqDataSource.Updated
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Updated
  nameWithType: LinqDataSource.Updated
  fullName: System.Web.UI.WebControls.LinqDataSource.Updated
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Updating
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Updating
  nameWithType: LinqDataSource.Updating
  fullName: System.Web.UI.WebControls.LinqDataSource.Updating
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceUpdateEventArgs>
  nameWithType: EventHandler<LinqDataSourceUpdateEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
    name: LinqDataSourceUpdateEventArgs
    nameWithType: LinqDataSourceUpdateEventArgs
    fullName: LinqDataSourceUpdateEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.Where
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Where
  nameWithType: LinqDataSource.Where
  fullName: System.Web.UI.WebControls.LinqDataSource.Where
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.WhereParameters
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: LinqDataSource
  nameWithType: LinqDataSource.LinqDataSource
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateQueryableView
  nameWithType: LinqDataSource.CreateQueryableView
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateView
  nameWithType: LinqDataSource.CreateView
- uid: System.Web.UI.WebControls.LinqDataSource.Delete*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Delete
  nameWithType: LinqDataSource.Delete
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Insert*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Insert
  nameWithType: LinqDataSource.Insert
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnInit
  nameWithType: LinqDataSource.OnInit
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnUnload
  nameWithType: LinqDataSource.OnUnload
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Select*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Select
  nameWithType: LinqDataSource.Select
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
- uid: System.Web.UI.WebControls.LinqDataSource.TableName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: TableName
  nameWithType: LinqDataSource.TableName
- uid: System.Web.UI.WebControls.LinqDataSource.Update*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Update
  nameWithType: LinqDataSource.Update
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Where*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Where
  nameWithType: LinqDataSource.Where
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
