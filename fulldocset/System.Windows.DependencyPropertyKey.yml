### YamlMime:ManagedReference
items:
- uid: System.Windows.DependencyPropertyKey
  id: DependencyPropertyKey
  children:
  - System.Windows.DependencyPropertyKey.DependencyProperty
  - System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  langs:
  - csharp
  name: DependencyPropertyKey
  nameWithType: DependencyPropertyKey
  fullName: System.Windows.DependencyPropertyKey
  type: Class
  summary: "提供有限的唯讀相依性屬性的寫入權限相依性屬性的識別項。"
  remarks: "取得做為傳回值的相依性屬性註冊呼叫使用方法<xref:System.Windows.DependencyProperty.RegisterReadOnly%2A>或<xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A> </xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> DependencyPropertyKey 執行個體       註冊相依性屬性的型別可用於呼叫的 DependencyPropertyKey<xref:System.Windows.DependencyObject.SetValue%2A>和<xref:System.Windows.DependencyObject.ClearValue%2A>，調整屬性的值做為類別邏輯的一部分。</xref:System.Windows.DependencyObject.ClearValue%2A> </xref:System.Windows.DependencyObject.SetValue%2A> 如果允許索引鍵的存取層級，相關的類別也可以使用索引鍵和相依性屬性。 比方說，您可以宣告為內部，索引鍵和相同的組件內的其他類型也可以設定該相依性屬性。       傳回唯讀相依性屬性註冊 DependencyPropertyKey 應該不能為 public，因為公開索引鍵會讓此屬性可設定，因此擊敗登錄為唯讀相依性屬性的點。 此外，公開索引鍵會導致不相符的可用的相依性屬性行為和其[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]屬性的包裝函式實作，也就是不正確的類別設計。       而不是公開本身的索引鍵，您應該改為公開<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>值做為 DependencyPropertyKey `public static readonly` <xref:System.Windows.DependencyProperty>上您的類別。</xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> 這可讓屬性以傳回特定屬性系統作業，例如列舉本機設定值有效的相依性屬性的識別項。 但是，因此取得的識別項不需要的完整功能<xref:System.Windows.DependencyProperty>許多屬性系統作業。</xref:System.Windows.DependencyProperty>"
  example:
  - "The following example registers a read-only dependency property, and also uses the key for two purposes in other class members: implementing the get \"wrapper\", and as the identifier for a protected determination operation that sets the value based on calculations of other property values.  \n  \n [!code-cs[WPFAquariumSln#RODP](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodp)]\n [!code-vb[WPFAquariumSln#RODP](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodp)]"
  syntax:
    content: public sealed class DependencyPropertyKey
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.DependencyPropertyKey.DependencyProperty
  id: DependencyProperty
  parent: System.Windows.DependencyPropertyKey
  langs:
  - csharp
  name: DependencyProperty
  nameWithType: DependencyPropertyKey.DependencyProperty
  fullName: System.Windows.DependencyPropertyKey.DependencyProperty
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "取得與此特製化的唯讀相依性屬性的識別項相關聯的相依性屬性識別碼。"
  remarks: "DependencyProperty 值可讓加入共同使用一些相同的介面所使用的讀寫相依性屬性的屬性系統作業的唯讀屬性的識別項。       若要實作唯讀相依性屬性的 get 屬性存取子，您應該建立，並公開 （expose） 為<xref:System.Windows.DependencyProperty>您的類別識別項</xref:System.Windows.DependencyProperty> 這有兩種用途:-您擁有類別需要<xref:System.Windows.DependencyProperty>為了實作 get 存取子屬性的包裝函式的識別項。</xref:System.Windows.DependencyProperty> 您使用<xref:System.Windows.DependencyProperty>做為參數的<xref:System.Windows.DependencyObject.GetValue%2A>實作 get 存取子的呼叫。</xref:System.Windows.DependencyObject.GetValue%2A> </xref:System.Windows.DependencyProperty>      -<xref:System.Windows.DependencyProperty>識別項會公開屬性系統相依性屬性，使依賴中繼資料的其他方法可以存取它之標準格式。</xref:System.Windows.DependencyProperty> 比方說，如果您呼叫<xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>上某些<xref:System.Windows.DependencyObject>，並且取得列舉型別在本機上設定屬性 （「 值 」 和 「 識別碼 」） 的識別碼傳回唯讀相依性屬性將會是您<xref:System.Windows.DependencyProperty>值而不是索引鍵。</xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyObject> </xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> 不會公開<xref:System.Windows.DependencyProperty>識別碼不會增加您以任何方式的唯讀相依性屬性的安全性，它只會牽涉到更造成不便同時用於後續的衍生的類別以及類別執行個體屬性的作業。</xref:System.Windows.DependencyProperty>       若要公開<xref:System.Windows.DependencyProperty>類別上的識別項，您呼叫 DependencyProperty 直接在您的金鑰。</xref:System.Windows.DependencyProperty> 使用此值以建立`public static readonly`<xref:System.Windows.DependencyProperty>類別，這與<xref:System.Windows.DependencyPropertyKey>.</xref:System.Windows.DependencyPropertyKey>上的識別項</xref:System.Windows.DependencyProperty>"
  example:
  - "The following example calls DependencyProperty to expose the <xref:System.Windows.DependencyProperty> identifier (`AquariumGraphicProperty`) for the `AquariumGraphic` read-only dependency property on a class. The example also shows the <xref:System.Windows.DependencyPropertyKey> creation (as an internal member) and the get accessor for `AquariumGraphic`.  \n  \n [!code-cs[WPFAquariumSln#RODP](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodp)]\n [!code-vb[WPFAquariumSln#RODP](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodp)]"
  syntax:
    content: public System.Windows.DependencyProperty DependencyProperty { get; }
    return:
      type: System.Windows.DependencyProperty
      description: "相關的相依性屬性的識別項。"
  overload: System.Windows.DependencyPropertyKey.DependencyProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  id: OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyPropertyKey
  langs:
  - csharp
  name: OverrideMetadata(Type,PropertyMetadata)
  nameWithType: DependencyPropertyKey.OverrideMetadata(Type,PropertyMetadata)
  fullName: System.Windows.DependencyPropertyKey.OverrideMetadata(Type,PropertyMetadata)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "覆寫此相依性屬性的識別項所表示之唯讀相依性屬性的中繼資料。"
  remarks: "覆寫唯讀相依性屬性的中繼資料基於相似的原因與覆寫中繼資料讀寫相依性屬性，並僅限於使用索引鍵的層級的存取，因為指定的中繼資料中的行為可能會變更設定的行為 （預設值，執行個體）。       為具有讀寫相依性屬性，覆寫唯讀相依性屬性的中繼資料，才應該在屬性 （這相當於特定的執行個體的註冊屬性的物件具現化的時間） 的屬性系統放在使用之前。 OverrideMetadata 呼叫執行應該只能在靜態建構函式的類型，提供本身為`forType`這個方法或對等初始化時，該類別的參數。       這個方法實際上會轉送至<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>方法，傳遞<xref:System.Windows.DependencyPropertyKey>做為索引鍵參數的執行個體。</xref:System.Windows.DependencyPropertyKey> </xref:System.Windows.DependencyProperty.OverrideMetadata%2A>"
  example:
  - "The following example overrides metadata for an existing read-only dependency property that a class inherits. In this case, the scenario goal was to add a coerce value callback that the base property metadata did not have. You could also override metadata for any of the other reasons that overriding metadata is typically appropriate (changing default value, adding <xref:System.Windows.FrameworkPropertyMetadataOptions> values, etc.)  \n  \n [!code-cs[WPFAquariumSln#RODPOverride](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodpoverride)]\n [!code-vb[WPFAquariumSln#RODPOverride](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]"
  syntax:
    content: public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);
    parameters:
    - id: forType
      type: System.Type
      description: "在此相依性屬性存在，而且應該覆寫中繼資料型別。"
    - id: typeMetadata
      type: System.Windows.PropertyMetadata
      description: "此類型提供的中繼資料。"
  overload: System.Windows.DependencyPropertyKey.OverrideMetadata*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "嘗試的中繼資料覆寫讀寫相依性屬性 (無法完成使用此簽章)。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "為存在於提供的型別中繼資料已建立的屬性。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.DependencyPropertyKey.DependencyProperty
  parent: System.Windows.DependencyPropertyKey
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyPropertyKey.DependencyProperty
  fullName: System.Windows.DependencyPropertyKey.DependencyProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyPropertyKey
  isExternal: false
  name: OverrideMetadata(Type,PropertyMetadata)
  nameWithType: DependencyPropertyKey.OverrideMetadata(Type,PropertyMetadata)
  fullName: System.Windows.DependencyPropertyKey.OverrideMetadata(Type,PropertyMetadata)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.PropertyMetadata
  parent: System.Windows
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.DependencyPropertyKey.DependencyProperty*
  parent: System.Windows.DependencyPropertyKey
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyPropertyKey.DependencyProperty
- uid: System.Windows.DependencyPropertyKey.OverrideMetadata*
  parent: System.Windows.DependencyPropertyKey
  isExternal: false
  name: OverrideMetadata
  nameWithType: DependencyPropertyKey.OverrideMetadata
