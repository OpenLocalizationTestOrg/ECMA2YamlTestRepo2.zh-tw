### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  id: ConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  langs:
  - csharp
  name: ConnectionPoint
  nameWithType: ConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint
  type: Class
  summary: "可做為基底類別，定義連接的點物件，可讓取用者控制項和共用資料的 Web 組件連接提供者控制。"
  remarks: "每個 Web 組件連接兩個共用資料的伺服器控制項所組成︰ 一個控制項是消費者，另一個方法是提供者。 如需 Web 組件連接，以及連接物件本身的基本元件的討論，請參閱<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>類別概觀。</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Web 組件中的每個連接都需要連接點。 提供者和消費者控制每個必須至少一個定義的 ConnectionPoint 物件 （每個 （選擇性） 可以有多個連接點），其中包含如何將控制項可以連接到另一個控制項，它可以共用的資料類型的詳細資料。 在實際的連線，該提供者有它自己的連接點物件 （衍生自基底 ConnectionPoint 類別），類型<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>執行個體，而且取用者有它自己的物件，<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>執行個體。</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       若要建立提供者連接點，開發人員必須加入回呼方法會傳回實作的介面執行個體的取用者的提供者。 它們必須標示的回呼方法，在原始程式碼與`ConnectionProvider`code 屬性 (請參閱<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>類別)。</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> 同樣地，若要建立消費者連接點，開發人員必須將方法加入至取用者接收介面執行個體，而他們必須將標記與該方法`ConnectionConsumer`屬性 (請參閱<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>類別)。</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>       當開發人員在網頁上建立連線時，也可以建立與靜態或動態的連接。 在網頁標記中宣告靜態連接。 宣告靜態連接時，開發人員可以將指定的連接點由消費者和提供者指派值給`ProviderConnectionPointID`和`ConsumerConnectionPointID`屬性內`<asp:webpartconnection>`項目標記。 這個方法是特別有用，如果有多個連接點定義內的消費者和提供者的控制項，因為它可讓靜態連線來識別要用於連線的連接點。       開發人員程式碼或透過使用者介面 (UI) 的使用者所提供以程式設計的方式，建立動態連接<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控制項。</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 若要在程式碼中建立的連接，開發人員必須取得的執行個體<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>藉由呼叫物件<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項。</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 呼叫這個方法之前，開發人員必須消費者和提供者伺服器控制項和其各自的連接點物件的參考。 若要取得提供者和消費者控制項的連接點的參考，開發人員先呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>和<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>方法<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控制項。</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> 這些方法會傳回適當的連接點物件，接著可以傳遞給建立連接的方法。       當提供者和消費者連接點物件都使用相同類型的介面，它們相容而且可用以構成直接連線至共用資料。 如果無法使用相同的介面型別，<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>物件必須用來轉譯成的型別，取用者可以使用從提供者介面執行個體。</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       抽象 ConnectionPoint 類別提供基底由消費者和提供者的控制項所共用的連接點的詳細資料。 多個屬性會包含這些詳細資料。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>屬性會指出連接點是否可以參與多個連線一次。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> 根據預設，提供者連接點可以參與多個連接，而消費者連接點不能。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>屬性會指出伺服器控制項的連接點相關聯的類型。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> 請注意，並非只有<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項可以形成連線; 任何伺服器控制項，可以參與連接，如果放在啟用 ASP.NET 控制項、 自訂控制項，或使用者控制項，<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>區域。</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>屬性會提供可顯示在 UI，以協助使用者建立連接的連接點的易記名稱。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>屬性做為本身的連接點物件的字串識別項。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>屬性指示了解哪些類型的介面執行個體的連接點。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 指定的連接點會提供或取用該介面的執行個體是否取決於它是否<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>或<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件。</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       ConnectionPoint 類別有一個方法。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>方法會傳回布林值，指出是否目前能夠參與連線的連接點。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>       ConnectionPoint 類別也有一個公用欄位， <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> 此欄位會包含用來識別連接中的預設連接點的值。      > [!NOTE] > 的屬性來指定連接點方法只能有一個必要的參數， `displayName`，因此可以建立預設的連接點屬性但未指定的識別碼。 在這種情況下，<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>欄位提供要使用的基底值。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>"
  example:
  - "The following code example demonstrates the creation of a Web Parts connection that includes the required ConnectionPoint objects. Because the ConnectionPoint class is an abstract base class, instances of its child classes--<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>--are the actual objects used to form a connection.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. You can also create the connection programmatically; the code for doing that is contained in the `Button1_Click` method. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the ConnectionPoint objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. Click the **Disconnect** button to terminate the existing connection. Use the **Display Mode** control to return the page to browse mode. Next, click the **Dynamic Connection** button to create a connection programmatically. Click the **Connection Point Details** button again, to indicate details about the two connection point objects."
  syntax:
    content: public abstract class ConnectionPoint
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  id: AllowsMultipleConnections
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "取得值，指出是否連接點支援多個同時連線。"
  remarks: "<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件具有其 AllowsMultipleConnections 屬性設定值設為`true`(由<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>類別)，因為預設的 Web 組件控制項可讓提供者連接點至多位取用者建立連接。</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute></xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       相反地，<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件具有其 AllowsMultipleConnections 屬性值設定為`false`(由<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>類別) 因為預設的 Web 組件控制項可讓取用者連接點，以建立一次只能有一個提供者的連接。</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       您可以變更預設行為有關多個連線，藉由指定不同的值給<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=fullName>屬性 （針對提供者） 或<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=fullName>屬性 （消費者） 對這兩個<xref:System.Attribute>使用連接屬性的類別。</xref:System.Attribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=fullName> 如果您啟用在同一時間連接至多個提供者的消費者連接點，您的程式碼必須處理任何產生的同步處理問題。"
  example:
  - "The following code example demonstrates the use of the AllowsMultipleConnections property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the AllowsMultipleConnections property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1358_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1358_1.aspx)]"
  syntax:
    content: public bool AllowsMultipleConnections { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果連接點支援多個連線;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  id: ControlType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "取得<xref:System.Type>與連接點相關聯的伺服器控制項。</xref:System.Type>"
  remarks: "ControlType 屬性的值通常是<xref:System.Web.UI.WebControls.WebParts.WebPart>型別。</xref:System.Web.UI.WebControls.WebParts.WebPart> 不過，因為使用者控制項或伺服器控制項的任何類型可以參與連線已正確啟用並放在<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>區域，ControlType 屬性可以傳回其中一個其他伺服器控制項類型也。</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>       當伺服器不控制<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項置於<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>區域，它們會包裝與<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>物件在執行階段，讓它們可以當做<xref:System.Web.UI.WebControls.WebParts.WebPart>控制項並加入連接中。</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> 但當連接中牽涉到這類控制項時，ControlType 屬性值不會傳回<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>輸入; 它會傳回的型別<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>物件的子控制項，也就是伺服器或使用者控制項的類型。</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart>"
  example:
  - "The following code example demonstrates the use of the ControlType property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the ControlType property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_622_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_622_1.aspx)]"
  syntax:
    content: public Type ControlType { get; }
    return:
      type: System.Type
      description: "A<xref:System.Type>代表的控制項類型。</xref:System.Type>"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  id: DefaultID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: DefaultID
  nameWithType: ConnectionPoint.DefaultID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "代表用來識別伺服器控制項相關聯的連接點集合內的預設連接點的字串。"
  remarks: "建立的連接點時，很可能在取用者或提供者的原始程式碼中指定的連接點識別碼<xref:System.Web.UI.WebControls.WebParts.WebPart>控制，請使用<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>或<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>屬性。</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.WebPart> 不過，當屬性加入至原始程式碼中的連接點`ID`參數是選擇性的。 如果未指定 ID 屬性中，DefaultID 欄位就會提供用來識別預設連接點的字串。       如果取用者或提供者中定義多個連接點，則必須指定每個連接點識別碼，以便建立連接時，就可以識別連接點。"
  syntax:
    content: public static readonly string DefaultID;
    return:
      type: System.String
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  id: DisplayName
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "取得做為代表使用者介面 (UI) 中的連接點的易記顯示名稱的字串。"
  remarks: "若要建立 Web 組件的連接，連接的提供者和消費者控制項必須每個指定至少一個連接點，讓他們能夠通訊及共用資料的方法。 若要識別這些連接點方法，開發人員會在選取的方法上指定的屬性。 提供者`ConnectionProvider`屬性設定於所選的回呼方法，並在取用者，`ConnectionConsumer`接收包含資料提供者介面的執行個體的方法上設定屬性。 對於這兩個屬性，永遠是必要項，不論哪一個多載宣告若要建立屬性的一個參數是`displayName`參數。 開發人員必須指派要當做連接點的易記顯示名稱的字串，該字串會成為 DisplayName 屬性的值。       DisplayName 屬性值會顯示在網頁的 UI 中，當使用者建立連接。 例如，當<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控制項會加入至頁面上，它會建立 UI，讓使用者能夠建立控制項之間的連接。</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 使用者將頁面切換成連接顯示模式，然後按一下連接的動詞命令之後<xref:System.Web.UI.WebControls.WebParts.WebPart>控制，即會出現 UI 的連線。</xref:System.Web.UI.WebControls.WebParts.WebPart> 連接可參與的每個控制項列在 UI 中，而每個控制項旁會顯示其可用的連接點的易記名稱的下拉式清單控制項中。 使用者必須選取至少一個連接點來建立連接。 連接點的清單中顯示的值是從 DisplayName 屬性中取得。 如果開發人員建立自訂的 UI 建立連接，它們可以使用 DisplayName 屬性類似的方式，來提供表示的連接點的易記名稱。"
  syntax:
    content: public string DisplayName { get; }
    return:
      type: System.String
      description: "包含的好記的顯示名稱的字串<xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionPoint&quot;></xref>物件。"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  id: GetEnabled(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: GetEnabled(Control)
  nameWithType: ConnectionPoint.GetEnabled(Control)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "傳回值，指出連接點是否可以參與連線。"
  remarks: "在基底 GetEnabled 方法<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>類別一律會傳回`true`，但是衍生的類別可以覆寫這個方法傳回`true`或`false`不同的時間為基礎的狀態`control`。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>"
  example:
  - "The following code example demonstrates the use of the GetEnabled method on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the GetEnabled method on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/a42b3e8f-70fc-455c-a13a-_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/a42b3e8f-70fc-455c-a13a-_1.aspx)]"
  syntax:
    content: public virtual bool GetEnabled (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref>或其他伺服器控制項的連接點與相關聯。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果控制項可以建立為參與連線; 連線點否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  id: ID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: ID
  nameWithType: ConnectionPoint.ID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "取得包含連接點識別碼的字串。"
  remarks: "當開發人員會宣告<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>或<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>屬性上控制項的原始程式碼中的方法，使方法可用來當做連接點，它不需要宣告`ID`連接點屬性的參數。</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> 只有所需的屬性`displayName`參數。 預設識別碼指派給連接點，使用中的值<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>欄位。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       如果只有一個方法正在做為連接點所用的控制項，則不需要指定的連接點的識別碼。 如果有多個方法指定為連接點，您必須指定每個; 識別碼否則，會擲回例外狀況。 藉由指派 ID 給每個連接點，您也能讓指定的宣告中網頁的連線，或在程式碼中建立時要使用的連接點。"
  example:
  - "The following code example demonstrates the use of the ID property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the ID property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1125_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1125_1.aspx)]"
  syntax:
    content: public string ID { get; }
    return:
      type: System.String
      description: "字串，包含連接點的識別項。"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  id: InterfaceType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "取得連線點所使用的介面類型。"
  remarks: "InterfaceType 屬性指出的介面類型的連接點使用。 這可協助判斷兩個控制項是否相容，並且能夠建立連接。 如果提供者連接點 InterfaceType 是不同的消費者連接點 InterfaceType 則不相容，兩個控制項 （亦即，它們無法直接連線至沒有轉換程式），和<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>物件必須用來建立連接。</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  example:
  - "The following code example demonstrates the use of the InterfaceType property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the InterfaceType property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_359_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_359_1.aspx)]"
  syntax:
    content: public Type InterfaceType { get; }
    return:
      type: System.Type
      description: "A<xref:System.Type>對應於所提供或由控制項的介面型別。</xref:System.Type>"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DefaultID
  nameWithType: ConnectionPoint.DefaultID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: GetEnabled(Control)
  nameWithType: ConnectionPoint.GetEnabled(Control)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(Control)
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ID
  nameWithType: ConnectionPoint.ID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: GetEnabled
  nameWithType: ConnectionPoint.GetEnabled
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ID
  nameWithType: ConnectionPoint.ID
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
