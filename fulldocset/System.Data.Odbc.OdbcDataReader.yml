### YamlMime:ManagedReference
items:
- uid: System.Data.Odbc.OdbcDataReader
  id: OdbcDataReader
  children:
  - System.Data.Odbc.OdbcDataReader.Close
  - System.Data.Odbc.OdbcDataReader.Depth
  - System.Data.Odbc.OdbcDataReader.Dispose(System.Boolean)
  - System.Data.Odbc.OdbcDataReader.FieldCount
  - System.Data.Odbc.OdbcDataReader.GetBoolean(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetByte(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetChar(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetDataTypeName(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetDate(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetDateTime(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetDecimal(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetDouble(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetEnumerator
  - System.Data.Odbc.OdbcDataReader.GetFieldType(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetFloat(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetGuid(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetInt16(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetInt32(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetInt64(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetName(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetOrdinal(System.String)
  - System.Data.Odbc.OdbcDataReader.GetSchemaTable
  - System.Data.Odbc.OdbcDataReader.GetString(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetTime(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetValue(System.Int32)
  - System.Data.Odbc.OdbcDataReader.GetValues(System.Object[])
  - System.Data.Odbc.OdbcDataReader.HasRows
  - System.Data.Odbc.OdbcDataReader.IsClosed
  - System.Data.Odbc.OdbcDataReader.IsDBNull(System.Int32)
  - System.Data.Odbc.OdbcDataReader.Item(System.Int32)
  - System.Data.Odbc.OdbcDataReader.Item(System.String)
  - System.Data.Odbc.OdbcDataReader.NextResult
  - System.Data.Odbc.OdbcDataReader.Read
  - System.Data.Odbc.OdbcDataReader.RecordsAffected
  langs:
  - csharp
  name: OdbcDataReader
  nameWithType: OdbcDataReader
  fullName: System.Data.Odbc.OdbcDataReader
  type: Class
  summary: "提供從資料來源讀取順向資料流的資料列的方式。 這個類別無法被繼承。"
  remarks: "若要建立 OdbcDataReader，您必須呼叫<xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A>方法<xref:System.Data.Odbc.OdbcCommand>物件，而不是直接使用建構函式。</xref:System.Data.Odbc.OdbcCommand> </xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A>       正在使用 OdbcDataReader，相關<xref:System.Data.Odbc.OdbcConnection>忙碌處理 OdbcDataReader，而且可以對任何其他作業的<xref:System.Data.Odbc.OdbcConnection>不關閉它。</xref:System.Data.Odbc.OdbcConnection> </xref:System.Data.Odbc.OdbcConnection> 這是之前，這個情況<xref:System.Data.Odbc.OdbcDataReader.Close%2A>呼叫方法 OdbcDataReader。</xref:System.Data.Odbc.OdbcDataReader.Close%2A> 例如，您無法擷取輸出參數，直到之後呼叫<xref:System.Data.Odbc.OdbcDataReader.Close%2A>.</xref:System.Data.Odbc.OdbcDataReader.Close%2A>       結果集，另一個處理序或執行緒正在讀取資料時，所做的變更可能會顯示使用者的 OdbcDataReader。 不過，精確的行為是驅動程式和相依的時間。       <xref:System.Data.Odbc.OdbcDataReader.IsClosed%2A>和<xref:System.Data.Odbc.OdbcDataReader.RecordsAffected%2A>是您可以呼叫的唯一屬性 OdbcDataReader 關閉之後。</xref:System.Data.Odbc.OdbcDataReader.RecordsAffected%2A></xref:System.Data.Odbc.OdbcDataReader.IsClosed%2A> 有時候，您必須呼叫<xref:System.Data.Odbc.OdbcDataReader.Close%2A>之前，您可以呼叫<xref:System.Data.Odbc.OdbcDataReader.RecordsAffected%2A>.</xref:System.Data.Odbc.OdbcDataReader.RecordsAffected%2A> </xref:System.Data.Odbc.OdbcDataReader.Close%2A>"
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcConnection>, an <xref:System.Data.Odbc.OdbcCommand>, and an OdbcDataReader. The example reads through the data, writing it out to the console. Finally, the example closes the OdbcDataReader, and then the <xref:System.Data.Odbc.OdbcConnection>.  \n  \n [!code-vb[Classic WebData OdbcDataReader#1](~/add/codesnippet/visualbasic/t-system.data.odbc.odbcd_0_1.vb)]\n [!code-cs[Classic WebData OdbcDataReader#1](~/add/codesnippet/csharp/t-system.data.odbc.odbcd_0_1.cs)]"
  syntax:
    content: 'public sealed class OdbcDataReader : System.Data.Common.DbDataReader'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Data.Common.DbDataReader
  implements: []
  inheritedMembers:
  - System.Data.Common.DbDataReader.Dispose
  - System.Data.Common.DbDataReader.GetData(System.Int32)
  - System.Data.Common.DbDataReader.GetDbDataReader(System.Int32)
  - System.Data.Common.DbDataReader.GetFieldValue``1(System.Int32)
  - System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)
  - System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32,System.``0hreading.Cancellation``0oken)
  - System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32)
  - System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32)
  - System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[])
  - System.Data.Common.DbDataReader.GetStream(System.Int32)
  - System.Data.Common.DbDataReader.GetTextReader(System.Int32)
  - System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)
  - System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  - System.Data.Common.DbDataReader.NextResultAsync
  - System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbDataReader.ReadAsync
  - System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbDataReader.System#Data#IDataRecord#GetData(System.Int32)
  - System.Data.Common.DbDataReader.VisibleFieldCount
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.Close
  id: Close
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: Close()
  nameWithType: OdbcDataReader.Close()
  fullName: System.Data.Odbc.OdbcDataReader.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "關閉<xref href=&quot;System.Data.Odbc.OdbcDataReader&quot;></xref>物件。"
  remarks: "當您完成時，您必須明確呼叫 Close 方法使用<xref:System.Data.Odbc.OdbcDataReader>使用相關聯<xref:System.Data.Odbc.OdbcConnection>用於其他用途。</xref:System.Data.Odbc.OdbcConnection> </xref:System.Data.Odbc.OdbcDataReader>      > [!CAUTION] > 沒有呼叫`Close`或`Dispose`連線、 DataReader 或在任何其他 managed 的物件上`Finalize`類別的方法。 在完成項中，您應該只需釋放類別直接擁有的 unmanaged 的資源。 如果您的類別未擁有任何 unmanaged 的資源，並包含`Finalize`類別定義中的方法。 如需詳細資訊，請參閱[回收](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcConnection>, an <xref:System.Data.Odbc.OdbcCommand>, and an <xref:System.Data.Odbc.OdbcDataReader>. The example reads through the data, writing it out to the console. Finally, the example closes the <xref:System.Data.Odbc.OdbcDataReader>, and then the <xref:System.Data.Odbc.OdbcConnection>.  \n  \n [!code-cs[Classic WebData IDataReader.Read Example#1](~/add/codesnippet/csharp/m-system.data.odbc.odbcd_4_1.cs)]\n [!code-vb[Classic WebData IDataReader.Read Example#1](~/add/codesnippet/visualbasic/m-system.data.odbc.odbcd_4_1.vb)]"
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Data.Odbc.OdbcDataReader.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.Depth
  id: Depth
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: Depth
  nameWithType: OdbcDataReader.Depth
  fullName: System.Data.Odbc.OdbcDataReader.Depth
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得值，指出目前資料列的巢狀深度。"
  remarks: "最外層的資料表具有深度為零。"
  syntax:
    content: public override int Depth { get; }
    return:
      type: System.Int32
      description: "目前資料列的巢狀深度。"
  overload: System.Data.Odbc.OdbcDataReader.Depth*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: OdbcDataReader.Dispose(Boolean)
  fullName: System.Data.Odbc.OdbcDataReader.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "即將加入。"
  overload: System.Data.Odbc.OdbcDataReader.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.FieldCount
  id: FieldCount
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: FieldCount
  nameWithType: OdbcDataReader.FieldCount
  fullName: System.Data.Odbc.OdbcDataReader.FieldCount
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得目前資料列中的資料行數目。"
  remarks: "包含隱藏的欄位。 使用<xref:System.Data.Common.DbDataReader.VisibleFieldCount%2A>以排除隱藏的欄位。</xref:System.Data.Common.DbDataReader.VisibleFieldCount%2A>       執行查詢，不傳回資料列之後，FieldCount 會傳回 0。"
  syntax:
    content: public override int FieldCount { get; }
    return:
      type: System.Int32
      description: "當未放置在有效的資料錄集，0;否則為目前的記錄中的資料行數目。 預設值為-1。"
  overload: System.Data.Odbc.OdbcDataReader.FieldCount*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "沒有目前連接到資料來源。"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetBoolean(System.Int32)
  id: GetBoolean(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetBoolean(Int32)
  nameWithType: OdbcDataReader.GetBoolean(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetBoolean(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得指定資料行的值做為布林值。"
  remarks: "轉換會依據的基礎功能的 ODBC 驅動程式所執行。 如果不支援的轉換方法呼叫將會失敗。       呼叫<xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>呼叫這個方法之前尋找 null 值。</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>"
  syntax:
    content: public override bool GetBoolean (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Boolean
      description: "布林值，是資料行的值。"
  overload: System.Data.Odbc.OdbcDataReader.GetBoolean*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetByte(System.Int32)
  id: GetByte(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetByte(Int32)
  nameWithType: OdbcDataReader.GetByte(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetByte(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得指定資料行的值做為位元組。"
  remarks: "轉換會依據的基礎功能的 ODBC 驅動程式所執行。 如果不支援的轉換，則方法呼叫會失敗。       呼叫<xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>呼叫這個方法之前尋找 null 值。</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>"
  syntax:
    content: public override byte GetByte (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Byte
      description: "指定的資料行做為位元組的值。"
  overload: System.Data.Odbc.OdbcDataReader.GetByte*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  id: GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetBytes(Int32,Int64,Byte[],Int32,Int32)
  nameWithType: OdbcDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "位元組資料流從指定的資料行位移讀取到緩衝區做為特定的緩衝區位移開頭的陣列。"
  remarks: "GetBytes 欄位中傳回可用位元組的數。 大部分的情況下這是欄位的確切的長度。 不過，傳回的數字可能小於欄位的實際長度如果 GetBytes 已經用來取得位元組的欄位。 這種情況下，比方說，如果可能<xref:System.Data.Odbc.OdbcDataReader>讀入緩衝區的大型資料結構。</xref:System.Data.Odbc.OdbcDataReader> 如需詳細資訊，請參閱`SequentialAccess` <xref:System.Data.CommandBehavior>。</xref:System.Data.CommandBehavior>設定       如果您傳遞 null 值的緩衝區，GetBytes 會傳回欄位的長度，以位元組為單位。       轉換會依據的基礎功能的 ODBC 驅動程式所執行。 如果不支援的轉換方法呼叫將會失敗。      > [!NOTE] > 將擲回任何例外狀況，如果值`bufferIndex`外部陣列。 將讀取任何資料，則方法會傳回 0。"
  syntax:
    content: public override long GetBytes (int i, long dataIndex, byte[] buffer, int bufferIndex, int length);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    - id: dataIndex
      type: System.Int64
      description: "要開始讀取的作業的欄位內的索引。"
    - id: buffer
      type: System.Byte[]
      description: "要讀入位元組資料流緩衝區。"
    - id: bufferIndex
      type: System.Int32
      description: "中的索引`buffer`所在開始寫入作業。"
    - id: length
      type: System.Int32
      description: "要讀取的位元組數目。"
    return:
      type: System.Int64
      description: "實際讀取的位元組數目。"
  overload: System.Data.Odbc.OdbcDataReader.GetBytes*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetChar(System.Int32)
  id: GetChar(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetChar(Int32)
  nameWithType: OdbcDataReader.GetChar(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetChar(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得指定資料行的值做為字元。"
  remarks: "轉換會依據的基礎功能的 ODBC 驅動程式所執行。 如果不支援的轉換，則方法呼叫會失敗。       呼叫<xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>呼叫這個方法之前尋找 null 值。</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>"
  syntax:
    content: public override char GetChar (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Char
      description: "指定為字元資料行的值。"
  overload: System.Data.Odbc.OdbcDataReader.GetChar*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  id: GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetChars(Int32,Int64,Char[],Int32,Int32)
  nameWithType: OdbcDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "字元資料流從指定的資料行位移讀取到緩衝區做為特定的緩衝區位移開頭的陣列。"
  remarks: "GetChars 欄位中傳回可用字元的數。 大部分的情況下這是欄位的確切的長度。 不過，傳回的數字可能小於欄位的實際長度如果 GetChars 已經用來從資料欄位取得字元。 這種情況下，比方說，如果可能<xref:System.Data.Odbc.OdbcDataReader>讀入緩衝區的大型資料結構。</xref:System.Data.Odbc.OdbcDataReader> 如需詳細資訊，請參閱`SequentialAccess` <xref:System.Data.CommandBehavior>。</xref:System.Data.CommandBehavior>設定       如果您傳遞 null 值的緩衝區，GetChars 會傳回欄位的長度，以字元為單位。       轉換會依據的基礎功能的 ODBC 驅動程式所執行。 如果不支援的轉換方法呼叫將會失敗。      > [!NOTE] > 將擲回任何例外狀況，如果值`bufferIndex`外部陣列。 將讀取任何資料，則方法會傳回 0。"
  syntax:
    content: public override long GetChars (int i, long dataIndex, char[] buffer, int bufferIndex, int length);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    - id: dataIndex
      type: System.Int64
      description: "若要開始讀取的作業所在的資料列內的索引。"
    - id: buffer
      type: System.Char[]
      description: "要將資料複製到其中的緩衝區。"
    - id: bufferIndex
      type: System.Int32
      description: "中的索引`buffer`所在開始寫入作業。"
    - id: length
      type: System.Int32
      description: "要讀取的字元數。"
    return:
      type: System.Int64
      description: "實際讀取的字元數目。"
  overload: System.Data.Odbc.OdbcDataReader.GetChars*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetDataTypeName(System.Int32)
  id: GetDataTypeName(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetDataTypeName(Int32)
  nameWithType: OdbcDataReader.GetDataTypeName(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetDataTypeName(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得來源的資料類型的名稱。"
  syntax:
    content: public override string GetDataTypeName (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.String
      description: "來源資料類型的名稱。"
  overload: System.Data.Odbc.OdbcDataReader.GetDataTypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetDate(System.Int32)
  id: GetDate(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetDate(Int32)
  nameWithType: OdbcDataReader.GetDate(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetDate(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得所指定的資料行的值<xref:System.DateTime>物件。</xref:System.DateTime>"
  syntax:
    content: public DateTime GetDate (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.DateTime
      description: "指定資料行的值<xref:System.DateTime>物件。</xref:System.DateTime>"
  overload: System.Data.Odbc.OdbcDataReader.GetDate*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetDateTime(System.Int32)
  id: GetDateTime(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetDateTime(Int32)
  nameWithType: OdbcDataReader.GetDateTime(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetDateTime(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得所指定的資料行的值<xref:System.DateTime>物件。</xref:System.DateTime>"
  remarks: "轉換會依據的基礎功能的 ODBC 驅動程式所執行。 如果不支援的轉換方法呼叫將會失敗。       呼叫<xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>呼叫這個方法之前尋找 null 值。</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>"
  syntax:
    content: public override DateTime GetDateTime (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.DateTime
      description: "指定資料行的值<xref:System.DateTime>物件。</xref:System.DateTime>"
  overload: System.Data.Odbc.OdbcDataReader.GetDateTime*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetDecimal(System.Int32)
  id: GetDecimal(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetDecimal(Int32)
  nameWithType: OdbcDataReader.GetDecimal(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetDecimal(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得所指定的資料行的值<xref:System.Decimal>物件。</xref:System.Decimal>"
  remarks: "轉換會依據的基礎功能的 ODBC 驅動程式所執行。 如果不支援的轉換方法呼叫將會失敗。       呼叫<xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>呼叫這個方法之前尋找 null 值。</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>       GetDecimal 有 28 最大有效位數。 嘗試擷取具有更多有效位數的十進位資料將會導致例外狀況。 一個解決方式是變更查詢以將十進位類型轉換成其中較小的資料類型或轉換為字串或二進位。"
  syntax:
    content: public override decimal GetDecimal (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Decimal
      description: "指定資料行的值<xref:System.Decimal>物件。</xref:System.Decimal>"
  overload: System.Data.Odbc.OdbcDataReader.GetDecimal*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetDouble(System.Int32)
  id: GetDouble(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetDouble(Int32)
  nameWithType: OdbcDataReader.GetDouble(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetDouble(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得指定資料行的值做為雙精確度浮點數。"
  remarks: "轉換會依據的基礎功能的 ODBC 驅動程式所執行。 如果不支援的轉換，則方法呼叫會失敗。       呼叫<xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>呼叫這個方法之前尋找 null 值。</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>"
  syntax:
    content: public override double GetDouble (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Double
      description: "指定的資料行做為雙精確度浮點數的值。"
  overload: System.Data.Odbc.OdbcDataReader.GetDouble*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetEnumerator
  id: GetEnumerator
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: OdbcDataReader.GetEnumerator()
  fullName: System.Data.Odbc.OdbcDataReader.GetEnumerator()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "傳回<xref:System.Collections.IEnumerator>可用來逐一查看資料讀取器中的資料列。</xref:System.Collections.IEnumerator>"
  remarks: "雖然您可以使用這個方法來擷取明確的列舉值，以語言支援`foreach`建構，它是簡單直接以逐一查看資料讀取器中的資料列使用迴圈建構。"
  syntax:
    content: public override System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>可用來逐一查看資料讀取器中的資料列。</xref:System.Collections.IEnumerator>"
  overload: System.Data.Odbc.OdbcDataReader.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetFieldType(System.Int32)
  id: GetFieldType(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetFieldType(Int32)
  nameWithType: OdbcDataReader.GetFieldType(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetFieldType(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得<xref:System.Type>也就是物件的資料型別。</xref:System.Type>"
  syntax:
    content: public override Type GetFieldType (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Type
      description: "<xref:System.Type>也就是物件的資料型別。</xref:System.Type>"
  overload: System.Data.Odbc.OdbcDataReader.GetFieldType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetFloat(System.Int32)
  id: GetFloat(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetFloat(Int32)
  nameWithType: OdbcDataReader.GetFloat(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetFloat(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得指定資料行的值做為單精確度浮點數。"
  remarks: "轉換會依據的基礎功能的 ODBC 驅動程式所執行。 如果不支援的轉換方法呼叫將會失敗。       呼叫<xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>呼叫這個方法之前尋找 null 值。</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>"
  syntax:
    content: public override float GetFloat (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Single
      description: "指定的資料行做為單精確度浮點數的值。"
  overload: System.Data.Odbc.OdbcDataReader.GetFloat*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetGuid(System.Int32)
  id: GetGuid(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetGuid(Int32)
  nameWithType: OdbcDataReader.GetGuid(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetGuid(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得指定資料行的值做為全域唯一識別碼 (GUID)。"
  remarks: "轉換會依據的基礎功能的 ODBC 驅動程式所執行。 如果不支援的轉換，則方法呼叫會失敗。       呼叫<xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>呼叫這個方法之前尋找 null 值。</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>"
  syntax:
    content: public override Guid GetGuid (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Guid
      description: "指定的資料行做為 GUID 值。"
  overload: System.Data.Odbc.OdbcDataReader.GetGuid*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetInt16(System.Int32)
  id: GetInt16(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetInt16(Int32)
  nameWithType: OdbcDataReader.GetInt16(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetInt16(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得指定資料行的值為 16 位元帶正負號的整數。"
  remarks: "轉換會依據的基礎功能的 ODBC 驅動程式所執行。 如果不支援的轉換，則方法呼叫會失敗。       呼叫<xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>呼叫這個方法之前尋找 null 值。</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>"
  syntax:
    content: public override short GetInt16 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Int16
      description: "指定的資料行做為 16 位元帶正負號的整數值。"
  overload: System.Data.Odbc.OdbcDataReader.GetInt16*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetInt32(System.Int32)
  id: GetInt32(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetInt32(Int32)
  nameWithType: OdbcDataReader.GetInt32(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetInt32(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得指定資料行的值做為 32 位元帶正負號的整數。"
  remarks: "轉換會依據的基礎功能的 ODBC 驅動程式所執行。 如果不支援的轉換，則方法呼叫會失敗。       呼叫<xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>呼叫這個方法之前尋找 null 值。</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>"
  syntax:
    content: public override int GetInt32 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Int32
      description: "指定的資料行做為 32 位元帶正負號的整數值。"
  overload: System.Data.Odbc.OdbcDataReader.GetInt32*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetInt64(System.Int32)
  id: GetInt64(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetInt64(Int32)
  nameWithType: OdbcDataReader.GetInt64(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetInt64(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得指定資料行的值做為 64 位元帶正負號的整數。"
  remarks: "轉換會依據的基礎功能的 ODBC 驅動程式所執行。 如果不支援的轉換，則方法呼叫會失敗。       呼叫<xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>呼叫這個方法之前尋找 null 值。</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>"
  syntax:
    content: public override long GetInt64 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Int64
      description: "指定的資料行做為 64 位元帶正負號的整數值。"
  overload: System.Data.Odbc.OdbcDataReader.GetInt64*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetName(System.Int32)
  id: GetName(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetName(Int32)
  nameWithType: OdbcDataReader.GetName(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetName(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得指定資料行的名稱。"
  syntax:
    content: public override string GetName (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.String
      description: "字串，指定資料行的名稱。"
  overload: System.Data.Odbc.OdbcDataReader.GetName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetOrdinal(System.String)
  id: GetOrdinal(System.String)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetOrdinal(String)
  nameWithType: OdbcDataReader.GetOrdinal(String)
  fullName: System.Data.Odbc.OdbcDataReader.GetOrdinal(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得資料行序數，給定的資料行的名稱。"
  remarks: "GetOrdinal 第一次執行區分大小寫的查閱。 如果失敗，進行第二個不區分大小寫的搜尋。 方法會擲回`IndexOutOfRange`例外狀況，如果找不到以零為起始的資料行序數。       GetOrdinal 是區分假名寬度。       因為根據序數進行查閱比具名查閱更有效率，很效率不佳，在迴圈內呼叫 GetOrdinal。 反而呼叫 GetOrdinal 一次，然後將結果指派給整數變數在迴圈中使用。"
  example:
  - "The following example demonstrates how to use the GetOrdinal method.  \n  \n [!code-vb[Classic WebData OdbcDataReader.GetOrdinal#1](~/add/codesnippet/visualbasic/m-system.data.odbc.odbcd_3_1.vb)]\n [!code-cs[Classic WebData OdbcDataReader.GetOrdinal#1](~/add/codesnippet/csharp/m-system.data.odbc.odbcd_3_1.cs)]"
  syntax:
    content: public override int GetOrdinal (string value);
    parameters:
    - id: value
      type: System.String
      description: "資料行的名稱。"
    return:
      type: System.Int32
      description: "以零為起始的資料行序數。"
  overload: System.Data.Odbc.OdbcDataReader.GetOrdinal*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetSchemaTable
  id: GetSchemaTable
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetSchemaTable()
  nameWithType: OdbcDataReader.GetSchemaTable()
  fullName: System.Data.Odbc.OdbcDataReader.GetSchemaTable()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "傳回<xref href=&quot;System.Data.DataTable&quot;></xref>描述的資料行中繼資料<xref href=&quot;System.Data.Odbc.OdbcDataReader&quot;> </xref>。"
  remarks: "GetSchemaTable 方法會傳回有關每個資料行的中繼資料以下列順序: |DataReader 資料行 |描述 |  |-----------------------|-----------------|  |ColumnName |資料行; 的名稱這可能不是唯一的。 如果無法判別資料行名稱，則會傳回 null 值。 這個名稱一律會反映目前的檢視或命令文字中的資料行的最新命名。 |  |ColumnOrdinal |資料行以零為起始的序數。 此資料行不能包含 null 值。 |  |ColumnSize |資料行中值的最大可能長度。 使用固定長度的資料類型的資料行，這是資料類型的大小。 |  |NumericPrecision |如果<xref:System.Data.DbType>是數值資料類型，這是資料行的最大有效位數。</xref:System.Data.DbType> 精確度取決於資料行的定義。 如果<xref:System.Data.DbType>不是數值資料類型，請勿使用此資料行中的資料。</xref:System.Data.DbType> 如果基礎的 ODBC 驅動程式會傳回非數值資料類型的精確度值，這個值會使用結構描述資料表中。 |  |NumericScale |如果<xref:System.Data.DbType>是<xref:System.Data.DbType>，小數點右邊的位數。</xref:System.Data.DbType> </xref:System.Data.DbType> 否則，這會是 null 值。 如果基礎的 ODBC 驅動程式會傳回非數值資料類型的精確度值，這個值會使用結構描述資料表中。 |  |資料型別 |對應至<xref:System.Data.DbType>common language runtime 類型。 |  |提供者類型 |基礎驅動程式類型。 |  |IsLong |`true`如果資料行包含二進位長物件 (BLOB)，其中包含很長的資料。</xref:System.Data.DbType> 非常長資料的定義是特定驅動程式。 |  |AllowDBNull |`true`如果取用者可以設為 null 值的資料行，或驅動程式無法判斷取用者是否可以設定為 null 值的資料行。 否則， `false`。 資料行可以包含 null 值，即使它不能設為 null 的值。 |  |IsReadOnly |`true`如果資料行不能修改過，否則`false`。 |  |IsRowVersion |如果資料行包含永續性資料列識別碼不能寫入，且有任何有意義以外的值來識別資料列設定。 |  |IsUnique |`true`︰ 基底資料表中的任何兩個資料列 （BaseTableName 中傳回的資料表） 可以有相同的值在此資料行中。 IsUnique 保證能夠`true`如果資料行代表本身的索引鍵或類型只適用於此資料行的 UNIQUE 條件約束。<br /><br /> `false`: 資料行可以包含基底資料表中重複的值。 此資料行的預設值是`false`。 |  |IsKey |`true`︰ 資料行是一組資料列集中的資料行的其中一個，結合在一起唯一識別資料列。 一組資料行的 IsKey 設`true`必須唯一識別資料列集中的資料列。 沒有這個資料行集是資料行的最小集合的需求。 這個資料行集可能會產生來自基底資料表主索引鍵、 唯一條件約束或唯一索引鍵。<br /><br /> `false`︰ 資料行不需要唯一識別資料列。 |  |IsAutoIncrement |`true`若資料行指派值給新的資料列，以固定遞增方式; 否則`false`。 此資料行的預設值是`false`。 |  |BaseSchemaName |包含資料行的資料來源中的結構描述名稱。 如果無法判斷基底目錄名稱，則為 NULL。 此資料行的預設值是 null 值。 |  |BaseCatalogName |包含資料行的資料存放區中的類別目錄名稱。 如果無法判斷基底目錄名稱，則為 NULL。 此資料行的預設值是 null 值。 |  |BaseTableName |資料表或檢視中包含資料行的資料存放區的名稱。 如果無法判斷基底資料表名稱，則為 null 值。 此資料行的預設值是 null 值。 |  |BaseColumnName |資料存放區中的資料行名稱。 這可能是如果原先使用別名 ColumnName 資料行中傳回的資料行名稱不同。 如果無法判斷基底的資料行名稱，或如果資料列集資料行衍生而來但不是完全相同，資料中的資料行存放區，則為 null 值。 此資料行的預設值是 null 值。 |      在結果集中的每個資料行都會傳回一個資料列。       .NET Framework Data Provider for ODBC 會假設中繼資料資訊是來自 ODBC 驅動程式，其中**SQLPrepare**， **SQLExecute**，或**SQLExecuteDirect**函式的呼叫。 「 SchemaOnly 」 的命令行為正常運作， **SQLPrepare**必須傳回必要的中繼資料資訊。 並非所有的 ODBC 驅動程式支援這項功能，或傳回中繼資料資訊。 在這些情況下，部分或全部 SchemaTable 中的資訊將會遺失。 在呼叫**SQLPrepare**，資料提供者會呼叫 ODBC **SQLColAttribute**函數來尋找查詢結果 （例如 IsLong、 IsUnique、 AllowDBNull、 BaseTableName、 BaseColumnName） 中的每個資料行的相關中繼資料資訊。 如果基礎驅動程式不會傳回此資訊的某些部分，不會正確設定 SchemaTable 中的對應值。       .NET Framework Data Provider for ODBC 也會呼叫**SQLPrimaryKeys**擷取每個資料表的索引鍵資訊。 如果基礎的 ODBC 驅動程式不支援此函式，此資料提供者會呼叫**SQLStatistics**並選擇其中一個唯一索引作為資料表的主索引鍵。 這可能不會永遠提供您想要的結果。       <xref:System.Data.Odbc.OdbcCommandBuilder>需要正確識別之資料表的主索引鍵，才能正確運作。</xref:System.Data.Odbc.OdbcCommandBuilder> 如果 BaseTableName 沒有傳回每個資料行在查詢結果中，.NET Framework Data Provider for ODBC 會嘗試剖析 SQL 陳述式，以尋找查詢所涉及的資料表名稱。 這適用於使用更新、 插入、 刪除和簡單的 SELECT 陳述式，而非預存程序或聯結為基礎的 SELECT 陳述式。 如果部分或所有的結構描述資訊缺少這個資料表，請<xref:System.Data.Odbc.OdbcCommandBuilder>將無法正常運作，因為它有足夠的結構描述資訊，以自動產生正確的 INSERT、 UPDATE 或 DELETE 陳述式。</xref:System.Data.Odbc.OdbcCommandBuilder>       若要確定中繼資料行傳回正確的資訊，您必須呼叫<xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A>行為參數設定為 KeyInfo。</xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A> 否則，有些結構描述資料表中的資料行可能會傳回預設值，null 或不正確的資料。       當您使用 oracle 的 ODBC.NET 透過 ODBC 驅動程式時，做為索引鍵無法辨識別名的索引鍵資料行。 這會影響 OdbcDataReader 的結構描述資料表中的 IsKey 和 IsUnique 資料行。 它也會影響產生更新邏輯 OdbcCommandBuilder 的能力。 請考慮不使用主索引鍵資料行的別名。      > [!NOTE] > Microsoft Jet ODBC 驅動程式一律會傳回唯一索引和主索引鍵資料行，為可為 null，不論是否可為 null 或不。 驅動程式也不會傳回主索引鍵的資訊。它只傳回唯一索引和資料行中，包括主索引鍵資料行，而不管它們之間的清單。"
  syntax:
    content: public override System.Data.DataTable GetSchemaTable ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>描述資料行中繼資料。"
  overload: System.Data.Odbc.OdbcDataReader.GetSchemaTable*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Data.Odbc.OdbcDataReader&quot;> </xref>已關閉。"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetString(System.Int32)
  id: GetString(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetString(Int32)
  nameWithType: OdbcDataReader.GetString(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetString(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得指定資料行值做<xref:System.String>.</xref:System.String>"
  remarks: "轉換會依據的基礎功能的 ODBC 驅動程式所執行。 如果不支援的轉換，則方法呼叫會失敗。       呼叫<xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>呼叫這個方法之前尋找 null 值。</xref:System.Data.Odbc.OdbcDataReader.IsDBNull%2A>"
  syntax:
    content: public override string GetString (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.String
      description: "<xref:System.String>.</xref:System.String>為指定的資料行的值"
  overload: System.Data.Odbc.OdbcDataReader.GetString*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetTime(System.Int32)
  id: GetTime(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetTime(Int32)
  nameWithType: OdbcDataReader.GetTime(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetTime(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得所指定的資料行的值<xref:System.TimeSpan>物件。</xref:System.TimeSpan>"
  syntax:
    content: public TimeSpan GetTime (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.TimeSpan
      description: "指定資料行的值<xref:System.TimeSpan>物件。</xref:System.TimeSpan>"
  overload: System.Data.Odbc.OdbcDataReader.GetTime*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetValue(System.Int32)
  id: GetValue(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetValue(Int32)
  nameWithType: OdbcDataReader.GetValue(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetValue(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得原生格式的指定序數的資料行的值。"
  remarks: "這個方法會傳回<xref:System.DBNull>null 資料庫資料行。</xref:System.DBNull>"
  syntax:
    content: public override object GetValue (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Object
      description: "要傳回的值。"
  overload: System.Data.Odbc.OdbcDataReader.GetValue*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.GetValues(System.Object[])
  id: GetValues(System.Object[])
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: GetValues(Object[])
  nameWithType: OdbcDataReader.GetValues(Object[])
  fullName: System.Data.Odbc.OdbcDataReader.GetValues(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "填入物件的陣列與目前資料列的資料行值。"
  remarks: "對於大部分的應用程式，<xref:System.Data.Odbc.OdbcDataReader.GetValues%2A>方法提供有效率的方法用來擷取所有資料行，而不是個別擷取每個資料行。</xref:System.Data.Odbc.OdbcDataReader.GetValues%2A>       您可以傳遞<xref:System.Object>陣列，其中包含產生的資料列中所包含的資料行數目少於。</xref:System.Object> 資料量<xref:System.Object>陣列，含有複製到陣列。</xref:System.Object> 您也可以傳遞<xref:System.Object>陣列的長度大於包含在產生的資料列中的資料行數目。</xref:System.Object>       這個方法會傳回<xref:System.DBNull>null 資料庫資料行。</xref:System.DBNull>"
  example:
  - >-
    [!code-vb[OdbcDataReader_GetValues#1](~/add/codesnippet/visualbasic/m-system.data.odbc.odbcd_5_1.vb)]
     [!code-cs[OdbcDataReader_GetValues#1](~/add/codesnippet/csharp/m-system.data.odbc.odbcd_5_1.cs)]
  syntax:
    content: public override int GetValues (object[] values);
    parameters:
    - id: values
      type: System.Object[]
      description: "類型的陣列<xref:System.Object>複製屬性資料行。</xref:System.Object>"
    return:
      type: System.Int32
      description: "執行個體數目<xref:System.Object>陣列中。</xref:System.Object>"
  overload: System.Data.Odbc.OdbcDataReader.GetValues*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.HasRows
  id: HasRows
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: HasRows
  nameWithType: OdbcDataReader.HasRows
  fullName: System.Data.Odbc.OdbcDataReader.HasRows
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得值，指出是否<xref href=&quot;System.Data.Odbc.OdbcDataReader&quot;></xref>包含一或多個資料列。"
  syntax:
    content: public override bool HasRows { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Data.Odbc.OdbcDataReader&quot;></xref>包含一或多個資料列，否則為<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Odbc.OdbcDataReader.HasRows*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.IsClosed
  id: IsClosed
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: IsClosed
  nameWithType: OdbcDataReader.IsClosed
  fullName: System.Data.Odbc.OdbcDataReader.IsClosed
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "指出是否<xref href=&quot;System.Data.Odbc.OdbcDataReader&quot;></xref>已關閉。"
  remarks: "IsClosed 和<xref:System.Data.Odbc.OdbcDataReader.RecordsAffected%2A>屬性之後，您可以呼叫<xref:System.Data.Odbc.OdbcDataReader>已關閉。</xref:System.Data.Odbc.OdbcDataReader> </xref:System.Data.Odbc.OdbcDataReader.RecordsAffected%2A>"
  syntax:
    content: public override bool IsClosed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Data.Odbc.OdbcDataReader&quot;></xref>已關閉，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Odbc.OdbcDataReader.IsClosed*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.IsDBNull(System.Int32)
  id: IsDBNull(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: IsDBNull(Int32)
  nameWithType: OdbcDataReader.IsDBNull(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.IsDBNull(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得值，指出資料行是否包含不存在或遺漏的值。"
  remarks: "若要避免引發錯誤，呼叫這個方法來尋找 null 資料行值，然後再呼叫的型別有 Get 的方法 (例如， <xref:System.Data.Odbc.OdbcDataReader.GetByte%2A>，<xref:System.Data.Odbc.OdbcDataReader.GetChar%2A>等等)。</xref:System.Data.Odbc.OdbcDataReader.GetChar%2A> </xref:System.Data.Odbc.OdbcDataReader.GetByte%2A>"
  syntax:
    content: public override bool IsDBNull (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的資料行值相當於<xref href=&quot;System.DBNull&quot;> </xref>，否則為<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Odbc.OdbcDataReader.IsDBNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: OdbcDataReader.Item(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.Item(Int32)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得值，指定資料行的原生格式資料行序數。"
  syntax:
    content: public override object this[int i] { get; }
    parameters:
    - id: i
      type: System.Int32
      description: "資料行序數。"
    return:
      type: System.Object
      description: "原生格式的指定資料行值。"
  overload: System.Data.Odbc.OdbcDataReader.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "傳遞的索引超出範圍 0- <xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.Item(System.String)
  id: Item(System.String)
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: Item(String)
  nameWithType: OdbcDataReader.Item(String)
  fullName: System.Data.Odbc.OdbcDataReader.Item(String)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "在原生格式的資料行名稱中取得指定資料行的值。"
  remarks: "第一次執行區分大小寫的查閱。 如果失敗，進行第二個不區分大小寫的搜尋。       這個方法是區分假名寬度。"
  syntax:
    content: public override object this[string value] { get; }
    parameters:
    - id: value
      type: System.String
      description: "資料行名稱。"
    return:
      type: System.Object
      description: "原生格式的指定資料行值。"
  overload: System.Data.Odbc.OdbcDataReader.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "找不到具有指定名稱的任何資料行。"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.NextResult
  id: NextResult
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: NextResult()
  nameWithType: OdbcDataReader.NextResult()
  fullName: System.Data.Odbc.OdbcDataReader.NextResult()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "往前推進<xref href=&quot;System.Data.Odbc.OdbcDataReader&quot;></xref>至下一個結果時讀取批次 SQL 陳述式的結果。"
  remarks: "用來處理多個可以執行批次 SQL 陳述式產生的結果。       根據預設，<xref:System.Data.Odbc.OdbcDataReader>位於第一個結果。</xref:System.Data.Odbc.OdbcDataReader>"
  syntax:
    content: public override bool NextResult ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果有多個結果集;否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Odbc.OdbcDataReader.NextResult*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.Read
  id: Read
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: Read()
  nameWithType: OdbcDataReader.Read()
  fullName: System.Data.Odbc.OdbcDataReader.Read()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "往前推進<xref href=&quot;System.Data.Odbc.OdbcDataReader&quot;></xref>到下一筆記錄。"
  remarks: "預設位置<xref:System.Data.Odbc.OdbcDataReader>是第一個資料錄之前。</xref:System.Data.Odbc.OdbcDataReader> 因此，您必須呼叫讀取存取的任何資料。       雖然<xref:System.Data.Odbc.OdbcDataReader>正在使用中，<xref:System.Data.Odbc.OdbcConnection>正忙於處理它，直到您呼叫<xref:System.Data.Odbc.OdbcDataReader.Close%2A>.</xref:System.Data.Odbc.OdbcDataReader.Close%2A></xref:System.Data.Odbc.OdbcConnection>關聯</xref:System.Data.Odbc.OdbcDataReader>"
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcConnection>, an <xref:System.Data.Odbc.OdbcCommand>, and an <xref:System.Data.Odbc.OdbcDataReader>. The example reads through the data, writing it out to the console. Finally, the example closes the <xref:System.Data.Odbc.OdbcDataReader>, and then the <xref:System.Data.Odbc.OdbcConnection>.  \n  \n [!code-cs[Classic WebData IDataReader.Read Example#1](~/add/codesnippet/csharp/m-system.data.odbc.odbcd_0_1.cs)]\n [!code-vb[Classic WebData IDataReader.Read Example#1](~/add/codesnippet/visualbasic/m-system.data.odbc.odbcd_0_1.vb)]"
  syntax:
    content: public override bool Read ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果有多個資料列。否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Odbc.OdbcDataReader.Read*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcDataReader.RecordsAffected
  id: RecordsAffected
  parent: System.Data.Odbc.OdbcDataReader
  langs:
  - csharp
  name: RecordsAffected
  nameWithType: OdbcDataReader.RecordsAffected
  fullName: System.Data.Odbc.OdbcDataReader.RecordsAffected
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "取得已變更、 插入或執行 SQL 陳述式所刪除的資料列數目。"
  remarks: "直到所有資料列會讀取，並關閉<xref:System.Data.Odbc.OdbcDataReader>.</xref:System.Data.Odbc.OdbcDataReader> RecordsAffected 屬性未設定       這個屬性的值是累計的。 比方說，如果兩筆記錄插入批次模式中，RecordsAffected 的值會是 2。       <xref:System.Data.Odbc.OdbcDataReader.IsClosed%2A>而且 RecordsAffected 之後，您可以呼叫的唯一屬性<xref:System.Data.Odbc.OdbcDataReader>已關閉。</xref:System.Data.Odbc.OdbcDataReader></xref:System.Data.Odbc.OdbcDataReader.IsClosed%2A>"
  syntax:
    content: public override int RecordsAffected { get; }
    return:
      type: System.Int32
      description: "變更、 插入或刪除的資料列數目。 SELECT 陳述式;-1如果任何資料列受到影響，或陳述式失敗，，0。"
  overload: System.Data.Odbc.OdbcDataReader.RecordsAffected*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbDataReader
  isExternal: false
  name: System.Data.Common.DbDataReader
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.Data.Odbc.OdbcDataReader.Close
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: Close()
  nameWithType: OdbcDataReader.Close()
  fullName: System.Data.Odbc.OdbcDataReader.Close()
- uid: System.Data.Odbc.OdbcDataReader.Depth
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: Depth
  nameWithType: OdbcDataReader.Depth
  fullName: System.Data.Odbc.OdbcDataReader.Depth
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.Odbc.OdbcDataReader.Dispose(System.Boolean)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: OdbcDataReader.Dispose(Boolean)
  fullName: System.Data.Odbc.OdbcDataReader.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Odbc.OdbcDataReader.FieldCount
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: FieldCount
  nameWithType: OdbcDataReader.FieldCount
  fullName: System.Data.Odbc.OdbcDataReader.FieldCount
- uid: System.Data.Odbc.OdbcDataReader.GetBoolean(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetBoolean(Int32)
  nameWithType: OdbcDataReader.GetBoolean(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetBoolean(Int32)
- uid: System.Data.Odbc.OdbcDataReader.GetByte(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetByte(Int32)
  nameWithType: OdbcDataReader.GetByte(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetByte(Int32)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Data.Odbc.OdbcDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetBytes(Int32,Int64,Byte[],Int32,Int32)
  nameWithType: OdbcDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Odbc.OdbcDataReader.GetChar(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetChar(Int32)
  nameWithType: OdbcDataReader.GetChar(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetChar(Int32)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Data.Odbc.OdbcDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetChars(Int32,Int64,Char[],Int32,Int32)
  nameWithType: OdbcDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
- uid: System.Char[]
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Odbc.OdbcDataReader.GetDataTypeName(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetDataTypeName(Int32)
  nameWithType: OdbcDataReader.GetDataTypeName(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetDataTypeName(Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Odbc.OdbcDataReader.GetDate(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetDate(Int32)
  nameWithType: OdbcDataReader.GetDate(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetDate(Int32)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Data.Odbc.OdbcDataReader.GetDateTime(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetDateTime(Int32)
  nameWithType: OdbcDataReader.GetDateTime(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetDateTime(Int32)
- uid: System.Data.Odbc.OdbcDataReader.GetDecimal(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetDecimal(Int32)
  nameWithType: OdbcDataReader.GetDecimal(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetDecimal(Int32)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Data.Odbc.OdbcDataReader.GetDouble(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetDouble(Int32)
  nameWithType: OdbcDataReader.GetDouble(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetDouble(Int32)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Data.Odbc.OdbcDataReader.GetEnumerator
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetEnumerator()
  nameWithType: OdbcDataReader.GetEnumerator()
  fullName: System.Data.Odbc.OdbcDataReader.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Data.Odbc.OdbcDataReader.GetFieldType(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetFieldType(Int32)
  nameWithType: OdbcDataReader.GetFieldType(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetFieldType(Int32)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.Odbc.OdbcDataReader.GetFloat(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetFloat(Int32)
  nameWithType: OdbcDataReader.GetFloat(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetFloat(Int32)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Data.Odbc.OdbcDataReader.GetGuid(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetGuid(Int32)
  nameWithType: OdbcDataReader.GetGuid(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetGuid(Int32)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Data.Odbc.OdbcDataReader.GetInt16(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetInt16(Int32)
  nameWithType: OdbcDataReader.GetInt16(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetInt16(Int32)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Data.Odbc.OdbcDataReader.GetInt32(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetInt32(Int32)
  nameWithType: OdbcDataReader.GetInt32(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetInt32(Int32)
- uid: System.Data.Odbc.OdbcDataReader.GetInt64(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetInt64(Int32)
  nameWithType: OdbcDataReader.GetInt64(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetInt64(Int32)
- uid: System.Data.Odbc.OdbcDataReader.GetName(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetName(Int32)
  nameWithType: OdbcDataReader.GetName(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetName(Int32)
- uid: System.Data.Odbc.OdbcDataReader.GetOrdinal(System.String)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetOrdinal(String)
  nameWithType: OdbcDataReader.GetOrdinal(String)
  fullName: System.Data.Odbc.OdbcDataReader.GetOrdinal(String)
- uid: System.Data.Odbc.OdbcDataReader.GetSchemaTable
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetSchemaTable()
  nameWithType: OdbcDataReader.GetSchemaTable()
  fullName: System.Data.Odbc.OdbcDataReader.GetSchemaTable()
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.Odbc.OdbcDataReader.GetString(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetString(Int32)
  nameWithType: OdbcDataReader.GetString(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetString(Int32)
- uid: System.Data.Odbc.OdbcDataReader.GetTime(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetTime(Int32)
  nameWithType: OdbcDataReader.GetTime(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetTime(Int32)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Data.Odbc.OdbcDataReader.GetValue(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetValue(Int32)
  nameWithType: OdbcDataReader.GetValue(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.GetValue(Int32)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Odbc.OdbcDataReader.GetValues(System.Object[])
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetValues(Object[])
  nameWithType: OdbcDataReader.GetValues(Object[])
  fullName: System.Data.Odbc.OdbcDataReader.GetValues(Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Odbc.OdbcDataReader.HasRows
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: HasRows
  nameWithType: OdbcDataReader.HasRows
  fullName: System.Data.Odbc.OdbcDataReader.HasRows
- uid: System.Data.Odbc.OdbcDataReader.IsClosed
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: IsClosed
  nameWithType: OdbcDataReader.IsClosed
  fullName: System.Data.Odbc.OdbcDataReader.IsClosed
- uid: System.Data.Odbc.OdbcDataReader.IsDBNull(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: IsDBNull(Int32)
  nameWithType: OdbcDataReader.IsDBNull(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.IsDBNull(Int32)
- uid: System.Data.Odbc.OdbcDataReader.Item(System.Int32)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: Item(Int32)
  nameWithType: OdbcDataReader.Item(Int32)
  fullName: System.Data.Odbc.OdbcDataReader.Item(Int32)
- uid: System.Data.Odbc.OdbcDataReader.Item(System.String)
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: Item(String)
  nameWithType: OdbcDataReader.Item(String)
  fullName: System.Data.Odbc.OdbcDataReader.Item(String)
- uid: System.Data.Odbc.OdbcDataReader.NextResult
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: NextResult()
  nameWithType: OdbcDataReader.NextResult()
  fullName: System.Data.Odbc.OdbcDataReader.NextResult()
- uid: System.Data.Odbc.OdbcDataReader.Read
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: Read()
  nameWithType: OdbcDataReader.Read()
  fullName: System.Data.Odbc.OdbcDataReader.Read()
- uid: System.Data.Odbc.OdbcDataReader.RecordsAffected
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: RecordsAffected
  nameWithType: OdbcDataReader.RecordsAffected
  fullName: System.Data.Odbc.OdbcDataReader.RecordsAffected
- uid: System.Data.Odbc.OdbcDataReader.Close*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: Close
  nameWithType: OdbcDataReader.Close
- uid: System.Data.Odbc.OdbcDataReader.Depth*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: Depth
  nameWithType: OdbcDataReader.Depth
- uid: System.Data.Odbc.OdbcDataReader.Dispose*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: Dispose
  nameWithType: OdbcDataReader.Dispose
- uid: System.Data.Odbc.OdbcDataReader.FieldCount*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: FieldCount
  nameWithType: OdbcDataReader.FieldCount
- uid: System.Data.Odbc.OdbcDataReader.GetBoolean*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetBoolean
  nameWithType: OdbcDataReader.GetBoolean
- uid: System.Data.Odbc.OdbcDataReader.GetByte*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetByte
  nameWithType: OdbcDataReader.GetByte
- uid: System.Data.Odbc.OdbcDataReader.GetBytes*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetBytes
  nameWithType: OdbcDataReader.GetBytes
- uid: System.Data.Odbc.OdbcDataReader.GetChar*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetChar
  nameWithType: OdbcDataReader.GetChar
- uid: System.Data.Odbc.OdbcDataReader.GetChars*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetChars
  nameWithType: OdbcDataReader.GetChars
- uid: System.Data.Odbc.OdbcDataReader.GetDataTypeName*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetDataTypeName
  nameWithType: OdbcDataReader.GetDataTypeName
- uid: System.Data.Odbc.OdbcDataReader.GetDate*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetDate
  nameWithType: OdbcDataReader.GetDate
- uid: System.Data.Odbc.OdbcDataReader.GetDateTime*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetDateTime
  nameWithType: OdbcDataReader.GetDateTime
- uid: System.Data.Odbc.OdbcDataReader.GetDecimal*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetDecimal
  nameWithType: OdbcDataReader.GetDecimal
- uid: System.Data.Odbc.OdbcDataReader.GetDouble*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetDouble
  nameWithType: OdbcDataReader.GetDouble
- uid: System.Data.Odbc.OdbcDataReader.GetEnumerator*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetEnumerator
  nameWithType: OdbcDataReader.GetEnumerator
- uid: System.Data.Odbc.OdbcDataReader.GetFieldType*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetFieldType
  nameWithType: OdbcDataReader.GetFieldType
- uid: System.Data.Odbc.OdbcDataReader.GetFloat*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetFloat
  nameWithType: OdbcDataReader.GetFloat
- uid: System.Data.Odbc.OdbcDataReader.GetGuid*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetGuid
  nameWithType: OdbcDataReader.GetGuid
- uid: System.Data.Odbc.OdbcDataReader.GetInt16*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetInt16
  nameWithType: OdbcDataReader.GetInt16
- uid: System.Data.Odbc.OdbcDataReader.GetInt32*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetInt32
  nameWithType: OdbcDataReader.GetInt32
- uid: System.Data.Odbc.OdbcDataReader.GetInt64*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetInt64
  nameWithType: OdbcDataReader.GetInt64
- uid: System.Data.Odbc.OdbcDataReader.GetName*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetName
  nameWithType: OdbcDataReader.GetName
- uid: System.Data.Odbc.OdbcDataReader.GetOrdinal*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetOrdinal
  nameWithType: OdbcDataReader.GetOrdinal
- uid: System.Data.Odbc.OdbcDataReader.GetSchemaTable*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetSchemaTable
  nameWithType: OdbcDataReader.GetSchemaTable
- uid: System.Data.Odbc.OdbcDataReader.GetString*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetString
  nameWithType: OdbcDataReader.GetString
- uid: System.Data.Odbc.OdbcDataReader.GetTime*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetTime
  nameWithType: OdbcDataReader.GetTime
- uid: System.Data.Odbc.OdbcDataReader.GetValue*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetValue
  nameWithType: OdbcDataReader.GetValue
- uid: System.Data.Odbc.OdbcDataReader.GetValues*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: GetValues
  nameWithType: OdbcDataReader.GetValues
- uid: System.Data.Odbc.OdbcDataReader.HasRows*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: HasRows
  nameWithType: OdbcDataReader.HasRows
- uid: System.Data.Odbc.OdbcDataReader.IsClosed*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: IsClosed
  nameWithType: OdbcDataReader.IsClosed
- uid: System.Data.Odbc.OdbcDataReader.IsDBNull*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: IsDBNull
  nameWithType: OdbcDataReader.IsDBNull
- uid: System.Data.Odbc.OdbcDataReader.Item*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: Item
  nameWithType: OdbcDataReader.Item
- uid: System.Data.Odbc.OdbcDataReader.NextResult*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: NextResult
  nameWithType: OdbcDataReader.NextResult
- uid: System.Data.Odbc.OdbcDataReader.Read*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: Read
  nameWithType: OdbcDataReader.Read
- uid: System.Data.Odbc.OdbcDataReader.RecordsAffected*
  parent: System.Data.Odbc.OdbcDataReader
  isExternal: false
  name: RecordsAffected
  nameWithType: OdbcDataReader.RecordsAffected
