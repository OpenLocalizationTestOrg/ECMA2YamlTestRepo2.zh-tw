### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.DragEventArgs
  id: DragEventArgs
  children:
  - System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)
  - System.Windows.Forms.DragEventArgs.AllowedEffect
  - System.Windows.Forms.DragEventArgs.Data
  - System.Windows.Forms.DragEventArgs.Effect
  - System.Windows.Forms.DragEventArgs.KeyState
  - System.Windows.Forms.DragEventArgs.X
  - System.Windows.Forms.DragEventArgs.Y
  langs:
  - csharp
  name: DragEventArgs
  nameWithType: DragEventArgs
  fullName: System.Windows.Forms.DragEventArgs
  type: Class
  summary: "提供資料給<xref href=&quot;System.Windows.Forms.Control.DragDrop&quot;> </xref>， <xref href=&quot;System.Windows.Forms.Control.DragEnter&quot;> </xref>，或<xref href=&quot;System.Windows.Forms.Control.DragOver&quot;></xref>事件。"
  remarks: "<xref:System.Windows.Forms.Control.DragDrop>使用者完成拖曳至控制項的物件，然後拖曳至其控制項透過放開滑鼠按鈕拖放作業時，就會發生事件。</xref:System.Windows.Forms.Control.DragDrop> <xref:System.Windows.Forms.Control.DragEnter>使用者移動滑鼠指標拖曳至控制項的物件，使用滑鼠拖曳指標時，就會發生事件。</xref:System.Windows.Forms.Control.DragEnter> <xref:System.Windows.Forms.Control.DragOver>事件發生於使用者拖曳的物件，使用滑鼠時將滑鼠指標移到控制項。</xref:System.Windows.Forms.Control.DragOver>       為 DragEventArgs 物件指定與此事件; 相關聯的任何資料SHIFT、 CTRL 和 ALT 鍵; 目前的狀態滑鼠指標位置。以及來源和目標的拖曳事件所允許的拖放效果。       事件模型的相關資訊，請參閱[事件](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the DragEventArgs class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/t-system.windows.forms.d_17_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/t-system.windows.forms.d_17_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/t-system.windows.forms.d_17_1.cs)]  \n  \n The following example illustrates how DragEventArgs are passed between the source and target of a drag-and-drop operation. In this example, a <xref:System.Windows.Forms.ListBox> control is the source of the data, and the <xref:System.Windows.Forms.RichTextBox> control is the target. The example assumes that the <xref:System.Windows.Forms.ListBox> control has been populated with a list of valid filenames. When the user drags one of the displayed filenames from the <xref:System.Windows.Forms.ListBox> control onto the <xref:System.Windows.Forms.RichTextBox> control, the file referenced in the filename is opened.  \n  \n The operation is initiated in the <xref:System.Windows.Forms.ListBox> control's MouseDown event. In the <xref:System.Windows.Forms.RichTextBox.DragEnter> event handler, the example uses the <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> method to verify that the data is in a format that the <xref:System.Windows.Forms.RichTextBox> control can display and then sets the <xref:System.Windows.Forms.DragDropEffects> property to specify that data should be copied from the source control to the target control. Finally, the <xref:System.Windows.Forms.RichTextBox> control's DragDrop event handler uses the <xref:System.Windows.Forms.IDataObject.GetData%2A> method to retrieve the filename to open.  \n  \n [!code-cs[RichTextDragDrop#1](~/add/codesnippet/csharp/t-system.windows.forms.d_17_2.cs)]\n [!code-vb[RichTextDragDrop#1](~/add/codesnippet/visualbasic/t-system.windows.forms.d_17_2.vb)]\n [!code-cpp[RichTextDragDrop#1](~/add/codesnippet/cpp/t-system.windows.forms.d_17_2.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class DragEventArgs : EventArgs
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)
  id: '#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)'
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
  nameWithType: DragEventArgs.DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
  fullName: System.Windows.Forms.DragEventArgs.DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.Forms.DragEventArgs&quot;></xref>類別。"
  syntax:
    content: public DragEventArgs (System.Windows.Forms.IDataObject data, int keyState, int x, int y, System.Windows.Forms.DragDropEffects allowedEffect, System.Windows.Forms.DragDropEffects effect);
    parameters:
    - id: data
      type: System.Windows.Forms.IDataObject
      description: "與此事件相關聯的資料。"
    - id: keyState
      type: System.Int32
      description: "SHIFT、 CTRL 和 ALT 鍵的目前狀態。"
    - id: x
      type: System.Int32
      description: "滑鼠游標，單位為像素 x 軸座標。"
    - id: y
      type: System.Int32
      description: "滑鼠游標，單位為像素的 y 座標。"
    - id: allowedEffect
      type: System.Windows.Forms.DragDropEffects
      description: "其中一個<xref href=&quot;System.Windows.Forms.DragDropEffects&quot;></xref>值。"
    - id: effect
      type: System.Windows.Forms.DragDropEffects
      description: "其中一個<xref href=&quot;System.Windows.Forms.DragDropEffects&quot;></xref>值。"
  overload: System.Windows.Forms.DragEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.AllowedEffect
  id: AllowedEffect
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: AllowedEffect
  nameWithType: DragEventArgs.AllowedEffect
  fullName: System.Windows.Forms.DragEventArgs.AllowedEffect
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得原始 （或來源） 拖曳事件所允許的拖放作業。"
  remarks: "當控制項的拖放作業會呼叫以起始<xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=fullName>方法，它會指定允許的作業的效果。</xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=fullName> 比方說，當您將檔案從來源，如果檔案是唯讀的 （或從唯讀的儲存媒體例如 CD），則來源會指示檔案可以複製，但未傳送到目標。       嘗試拖曳的資料上執行作業，您應該檢查此屬性可確保在允許的作業。"
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_303_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_303_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_303_1.cs)]"
  syntax:
    content: public System.Windows.Forms.DragDropEffects AllowedEffect { get; }
    return:
      type: System.Windows.Forms.DragDropEffects
      description: "其中一個<xref href=&quot;System.Windows.Forms.DragDropEffects&quot;></xref>值。"
  overload: System.Windows.Forms.DragEventArgs.AllowedEffect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.Data
  id: Data
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: Data
  nameWithType: DragEventArgs.Data
  fullName: System.Windows.Forms.DragEventArgs.Data
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得<xref href=&quot;System.Windows.Forms.IDataObject&quot;> </xref> ，其中包含與此事件相關聯的資料。"
  remarks: "在您的事件處理常式的主體中，您可以使用<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>方法來判斷資料是否符合的控制項被拖曳的資料格式的需求。</xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> 您也可以指定是否要嘗試將資料轉換成符合您的格式需求。 如果拖曳的資料符合您的格式需求，使用<xref:System.Windows.Forms.IDataObject.GetData%2A>方法來擷取資料。</xref:System.Windows.Forms.IDataObject.GetData%2A>"
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_79_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_79_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_79_1.cs)]"
  syntax:
    content: public System.Windows.Forms.IDataObject Data { get; }
    return:
      type: System.Windows.Forms.IDataObject
      description: "與此事件相關聯的資料。"
  overload: System.Windows.Forms.DragEventArgs.Data*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.Effect
  id: Effect
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: Effect
  nameWithType: DragEventArgs.Effect
  fullName: System.Windows.Forms.DragEventArgs.Effect
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得或設定拖放作業中的目標置放效果。"
  remarks: "根據預設，套用的效果會判斷滑鼠游標拖放作業的目標。 這非常有用意見反應提供給使用者，就會發生的作業。 例如，如果您按下 CTRL 鍵，當您拖曳檔案從來源時，指定<xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>表示目標將會嘗試執行複製作業。</xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>       若要使用自訂的資料指標的拖曳操作，請參閱<xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A?displayProperty=fullName>.</xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A?displayProperty=fullName>"
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the Effect is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_330_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_330_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_330_1.cs)]"
  syntax:
    content: public System.Windows.Forms.DragDropEffects Effect { get; set; }
    return:
      type: System.Windows.Forms.DragDropEffects
      description: "其中一個<xref href=&quot;System.Windows.Forms.DragDropEffects&quot;></xref>值。"
  overload: System.Windows.Forms.DragEventArgs.Effect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.KeyState
  id: KeyState
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: KeyState
  nameWithType: DragEventArgs.KeyState
  fullName: System.Windows.Forms.DragEventArgs.KeyState
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得 SHIFT、 CTRL 和 ALT 鍵的目前狀態，以及滑鼠按鍵的狀態。"
  remarks: "您可以進行特定的索引鍵的狀態而定的拖放作業的效果。 例如，您可能決定要複製或移動的資料取決拖放作業期間是否按下 CTRL 或 SHIFT 鍵。       KeyState 屬性中所設定的位元識別索引鍵或在作業期間已按下滑鼠按鈕。 例如，如果按下滑鼠左的按鈕時，會設定 KeyState 屬性中的第一個位元。 您可以使用位元 AND 運算子來測試指定的按鍵狀態。       下表列出可用來指定事件的值。      |值 |索引鍵 |  |-----------|---------|  | 1 （位元 0） |滑鼠左鍵。 |  | 2 （位元 1） |滑鼠右鍵。 |  | 4 （位元 2） |SHIFT 鍵。 |  | 8 （位元 3） |CTRL 鍵。 |  | 16 （位元 4） |滑鼠中間鍵。 |  | 32 （位元 5） |ALT 鍵。 |"
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_339_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_339_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_339_1.cs)]"
  syntax:
    content: public int KeyState { get; }
    return:
      type: System.Int32
      description: "SHIFT、 CTRL 和 ALT 鍵和滑鼠按鈕的目前狀態。"
  overload: System.Windows.Forms.DragEventArgs.KeyState*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.X
  id: X
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: X
  nameWithType: DragEventArgs.X
  fullName: System.Windows.Forms.DragEventArgs.X
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得螢幕座標中的滑鼠指標的 x 座標。"
  remarks: ''
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_210_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_210_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_210_1.cs)]"
  syntax:
    content: public int X { get; }
    return:
      type: System.Int32
      description: "滑鼠指標，單位為像素 x 軸座標。"
  overload: System.Windows.Forms.DragEventArgs.X*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.Y
  id: Y
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: Y
  nameWithType: DragEventArgs.Y
  fullName: System.Windows.Forms.DragEventArgs.Y
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得滑鼠指標的 y 座標在螢幕座標。"
  remarks: ''
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_56_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_56_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_56_1.cs)]"
  syntax:
    content: public int Y { get; }
    return:
      type: System.Int32
      description: "滑鼠指標，單位為像素的 y 座標。"
  overload: System.Windows.Forms.DragEventArgs.Y*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
  nameWithType: DragEventArgs.DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
  fullName: System.Windows.Forms.DragEventArgs.DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
- uid: System.Windows.Forms.IDataObject
  parent: System.Windows.Forms
  isExternal: false
  name: IDataObject
  nameWithType: IDataObject
  fullName: System.Windows.Forms.IDataObject
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.DragDropEffects
  parent: System.Windows.Forms
  isExternal: false
  name: DragDropEffects
  nameWithType: DragDropEffects
  fullName: System.Windows.Forms.DragDropEffects
- uid: System.Windows.Forms.DragEventArgs.AllowedEffect
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: AllowedEffect
  nameWithType: DragEventArgs.AllowedEffect
  fullName: System.Windows.Forms.DragEventArgs.AllowedEffect
- uid: System.Windows.Forms.DragEventArgs.Data
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Data
  nameWithType: DragEventArgs.Data
  fullName: System.Windows.Forms.DragEventArgs.Data
- uid: System.Windows.Forms.DragEventArgs.Effect
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Effect
  nameWithType: DragEventArgs.Effect
  fullName: System.Windows.Forms.DragEventArgs.Effect
- uid: System.Windows.Forms.DragEventArgs.KeyState
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: KeyState
  nameWithType: DragEventArgs.KeyState
  fullName: System.Windows.Forms.DragEventArgs.KeyState
- uid: System.Windows.Forms.DragEventArgs.X
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: X
  nameWithType: DragEventArgs.X
  fullName: System.Windows.Forms.DragEventArgs.X
- uid: System.Windows.Forms.DragEventArgs.Y
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Y
  nameWithType: DragEventArgs.Y
  fullName: System.Windows.Forms.DragEventArgs.Y
- uid: System.Windows.Forms.DragEventArgs.#ctor*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: DragEventArgs
  nameWithType: DragEventArgs.DragEventArgs
- uid: System.Windows.Forms.DragEventArgs.AllowedEffect*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: AllowedEffect
  nameWithType: DragEventArgs.AllowedEffect
- uid: System.Windows.Forms.DragEventArgs.Data*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Data
  nameWithType: DragEventArgs.Data
- uid: System.Windows.Forms.DragEventArgs.Effect*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Effect
  nameWithType: DragEventArgs.Effect
- uid: System.Windows.Forms.DragEventArgs.KeyState*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: KeyState
  nameWithType: DragEventArgs.KeyState
- uid: System.Windows.Forms.DragEventArgs.X*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: X
  nameWithType: DragEventArgs.X
- uid: System.Windows.Forms.DragEventArgs.Y*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Y
  nameWithType: DragEventArgs.Y
