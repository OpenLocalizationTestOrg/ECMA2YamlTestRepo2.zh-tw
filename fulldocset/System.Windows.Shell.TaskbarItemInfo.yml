### YamlMime:ManagedReference
items:
- uid: System.Windows.Shell.TaskbarItemInfo
  id: TaskbarItemInfo
  children:
  - System.Windows.Shell.TaskbarItemInfo.#ctor
  - System.Windows.Shell.TaskbarItemInfo.CreateInstanceCore
  - System.Windows.Shell.TaskbarItemInfo.Description
  - System.Windows.Shell.TaskbarItemInfo.DescriptionProperty
  - System.Windows.Shell.TaskbarItemInfo.Overlay
  - System.Windows.Shell.TaskbarItemInfo.OverlayProperty
  - System.Windows.Shell.TaskbarItemInfo.ProgressState
  - System.Windows.Shell.TaskbarItemInfo.ProgressStateProperty
  - System.Windows.Shell.TaskbarItemInfo.ProgressValue
  - System.Windows.Shell.TaskbarItemInfo.ProgressValueProperty
  - System.Windows.Shell.TaskbarItemInfo.ThumbButtonInfos
  - System.Windows.Shell.TaskbarItemInfo.ThumbButtonInfosProperty
  - System.Windows.Shell.TaskbarItemInfo.ThumbnailClipMargin
  - System.Windows.Shell.TaskbarItemInfo.ThumbnailClipMarginProperty
  langs:
  - csharp
  name: TaskbarItemInfo
  nameWithType: TaskbarItemInfo
  fullName: System.Windows.Shell.TaskbarItemInfo
  type: Class
  summary: "表示有關工作列縮圖的顯示方式。"
  remarks: "TaskbarItemInfo 類別提供的 managed 包裝函式[!INCLUDE[win7](~/add/includes/win7-md.md)]工作列功能。 如需 Windows shell 和原生工作列應用程式開發介面的詳細資訊，請參閱[工作列延伸](http://go.microsoft.com/fwlink/?LinkId=178479)。 TaskbarItemInfo 會公開為<xref:System.Windows.Window.TaskbarItemInfo%2A?displayProperty=fullName><xref:System.Windows.Window>.</xref:System.Windows.Window>上的相依性屬性</xref:System.Windows.Window.TaskbarItemInfo%2A?displayProperty=fullName>       [!INCLUDE[win7](~/add/includes/win7-md.md)]工作列可提供增強的功能，可讓您使用工作列項目來傳達給使用者的狀態，和最小化或隱藏視窗時，公開一般工作。 TaskbarItemInfo 類別所公開的功能也無法在 Windows 的版本比使用[!INCLUDE[win7](~/add/includes/win7-md.md)]。 使用 TaskbarItemInfo 類別的應用程式仍然可以執行在舊版的 Windows。不過，這些工作列增強功能是在較早的版本中無法使用。       在[!INCLUDE[win7](~/add/includes/win7-md.md)]，有些工作列功能可能無法使用，視使用者的設定而定。 比方說，是無法使用工作列功能如果[!INCLUDE[TLA#tla_aero](~/add/includes/tlasharptla-aero-md.md)]會停用，或如果以更高權限啟動應用程式。 您的應用程式應該提供其他方式與使用者互動，而不必中的增強型的工作列功能[!INCLUDE[win7](~/add/includes/win7-md.md)]。       程式圖示，在通知區域中，是在工作列最右邊，通常用來傳達給使用者的應用程式狀態。 根據預設，[!INCLUDE[win7](~/add/includes/win7-md.md)]工作列隱藏通知區域中的程式圖示。 不過，您可以設定<xref:System.Windows.Shell.TaskbarItemInfo.Overlay%2A>屬性新增至工作列按鈕狀態，例如線上的狀態訊息的應用程式中的映像。</xref:System.Windows.Shell.TaskbarItemInfo.Overlay%2A> 將重疊影像可讓使用者看到的應用程式狀態，即使無法查看通知區域中的程式圖示。 您也可以顯示進度的工作列按鈕中執行工作，藉由設定<xref:System.Windows.Shell.TaskbarItemInfo.ProgressState%2A>和<xref:System.Windows.Shell.TaskbarItemInfo.ProgressValue%2A>屬性。</xref:System.Windows.Shell.TaskbarItemInfo.ProgressValue%2A> </xref:System.Windows.Shell.TaskbarItemInfo.ProgressState%2A>       [!INCLUDE[win7](~/add/includes/win7-md.md)]工作列顯示縮圖的應用程式，當您移動滑鼠指標移至工作列按鈕時。 依預設會顯示整個應用程式視窗。 您可以指定特定部分的視窗，以顯示縮圖中，藉由設定<xref:System.Windows.Shell.TaskbarItemInfo.ThumbnailClipMargin%2A>屬性。</xref:System.Windows.Shell.TaskbarItemInfo.ThumbnailClipMargin%2A> 您也可以指定<xref:System.Windows.Shell.TaskbarItemInfo.Description%2A>工作列縮圖上方的工具提示中所顯示。</xref:System.Windows.Shell.TaskbarItemInfo.Description%2A> 當因為使用者設定而無法看到縮圖，就會顯示工具提示。       您可以提供一般工作的存取權，不需要切換至應用程式視窗的工作列縮圖中加入按鈕。 例如，視窗 Media Player 提供播放、 暫停，以及上一步 按鈕，可讓您控制從工作列縮圖的播放媒體，最小化應用程式時。 工作列縮圖中的按鈕都由<xref:System.Windows.Shell.ThumbButtonInfo>物件且包含在<xref:System.Windows.Shell.TaskbarItemInfo.ThumbButtonInfos%2A>集合。</xref:System.Windows.Shell.TaskbarItemInfo.ThumbButtonInfos%2A> </xref:System.Windows.Shell.ThumbButtonInfo>       下圖顯示的增強的功能[!INCLUDE[win7](~/add/includes/win7-md.md)]工作列。       ![工作列項目資訊範例](~/add/media/wpfshell-taskbariteminfo.png &quot;工作列項目資訊範例&quot;)Windows 工作列增強功能"
  example:
  - "The following example shows how to create a TaskbarItemInfo in markup. The TaskbarItemInfo contains a collection of <xref:System.Windows.Shell.ThumbButtonInfo> objects that provide access to the Play and Stop commands from the taskbar item.  \n  \n [!code-xml[Shell_TaskbarItemSample#010](~/add/codesnippet/xaml/shell_taskbaritemsample/mainwindow.xaml#010)]  \n  \n The following markup and code shows the previous example in its full context. The application uses a <xref:System.ComponentModel.BackgroundWorker> to count from 0 to 100 and displays its progress in the user interface. The task can be started and stopped from the taskbar preview. The progress is displayed in the taskbar button.  \n  \n [!code-xml[Shell_TaskbarItemSample#001](~/add/codesnippet/xaml/shell_taskbaritemsample/mainwindow.xaml#001)]  \n  \n [!code-cs[Shell_TaskbarItemSample#100](~/add/codesnippet/csharp/shell_taskbaritemsample/mainwindow.xaml.cs#100)]\n [!code-vb[Shell_TaskbarItemSample#100](~/add/codesnippet/visualbasic/shell_taskbaritemsample/mainwindow.xaml.vb#100)]"
  syntax:
    content: 'public sealed class TaskbarItemInfo : System.Windows.Freezable'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Freezable
  implements: []
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Freezable.CanFreeze
  - System.Windows.Freezable.Changed
  - System.Windows.Freezable.Clone
  - System.Windows.Freezable.CloneCore(System.Windows.Freezable)
  - System.Windows.Freezable.CloneCurrentValue
  - System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)
  - System.Windows.Freezable.CreateInstance
  - System.Windows.Freezable.Freeze
  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)
  - System.Windows.Freezable.FreezeCore(System.Boolean)
  - System.Windows.Freezable.GetAsFrozen
  - System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Freezable.GetCurrentValueAsFrozen
  - System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Freezable.IsFrozen
  - System.Windows.Freezable.OnChanged
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)
  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.Freezable.ReadPreamble
  - System.Windows.Freezable.WritePostscript
  - System.Windows.Freezable.WritePreamble
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Shell.TaskbarItemInfo.#ctor
  id: '#ctor'
  parent: System.Windows.Shell.TaskbarItemInfo
  langs:
  - csharp
  name: TaskbarItemInfo()
  nameWithType: TaskbarItemInfo.TaskbarItemInfo()
  fullName: System.Windows.Shell.TaskbarItemInfo.TaskbarItemInfo()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.Shell.TaskbarItemInfo&quot;></xref>類別。"
  syntax:
    content: public TaskbarItemInfo ();
    parameters: []
  overload: System.Windows.Shell.TaskbarItemInfo.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.TaskbarItemInfo.CreateInstanceCore
  id: CreateInstanceCore
  parent: System.Windows.Shell.TaskbarItemInfo
  langs:
  - csharp
  name: CreateInstanceCore()
  nameWithType: TaskbarItemInfo.CreateInstanceCore()
  fullName: System.Windows.Shell.TaskbarItemInfo.CreateInstanceCore()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  syntax:
    content: protected override System.Windows.Freezable CreateInstanceCore ();
    parameters: []
    return:
      type: System.Windows.Freezable
      description: "即將加入。"
  overload: System.Windows.Shell.TaskbarItemInfo.CreateInstanceCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.TaskbarItemInfo.Description
  id: Description
  parent: System.Windows.Shell.TaskbarItemInfo
  langs:
  - csharp
  name: Description
  nameWithType: TaskbarItemInfo.Description
  fullName: System.Windows.Shell.TaskbarItemInfo.Description
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "取得或設定工具列項目的工具提示文字。"
  remarks: "當滑鼠指標位於工作列按鈕上時，工具提示會顯示工作列縮圖上方。 如果因為使用者設定而未顯示工作列縮圖，仍會顯示工具提示。       下圖顯示工作列描述工具提示。       ![工作列項目資訊範例](~/add/media/wpfshell-taskbariteminfo.png &quot;工作列項目資訊範例&quot;)Windows 工作列描述"
  example:
  - "The following example shows how to create a <xref:System.Windows.Shell.TaskbarItemInfo> in markup and set the Description property. This example is part of a larger example provided for the <xref:System.Windows.Shell.TaskbarItemInfo> class.  \n  \n [!code-xml[Shell_TaskbarItemSample#010](~/add/codesnippet/xaml/shell_taskbaritemsample/mainwindow.xaml#010)]"
  syntax:
    content: public string Description { get; set; }
    return:
      type: System.String
      description: "工作列項目工具提示文字。 預設為空字串。"
  overload: System.Windows.Shell.TaskbarItemInfo.Description*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.TaskbarItemInfo.DescriptionProperty
  id: DescriptionProperty
  parent: System.Windows.Shell.TaskbarItemInfo
  langs:
  - csharp
  name: DescriptionProperty
  nameWithType: TaskbarItemInfo.DescriptionProperty
  fullName: System.Windows.Shell.TaskbarItemInfo.DescriptionProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "識別<xref:System.Windows.Shell.TaskbarItemInfo.Description*>相依性屬性。</xref:System.Windows.Shell.TaskbarItemInfo.Description*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty DescriptionProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.TaskbarItemInfo.Overlay
  id: Overlay
  parent: System.Windows.Shell.TaskbarItemInfo
  langs:
  - csharp
  name: Overlay
  nameWithType: TaskbarItemInfo.Overlay
  fullName: System.Windows.Shell.TaskbarItemInfo.Overlay
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "取得或設定顯示程式中的圖示上的工作列按鈕的影像。"
  remarks: "您可以將影像加入至傳達給使用者的應用程式狀態的工作列按鈕的程式圖示。 重疊會使用靜態或以動畫顯示<xref:System.Windows.Media.ImageSource>，位於右下角的工作列按鈕的圖示。</xref:System.Windows.Media.ImageSource> 如果使用者設定以顯示小圖示工作列，不會顯示重疊。       程式圖示，在通知區域中，是在工作列最右邊，通常用來傳達給使用者的應用程式狀態。 在[!INCLUDE[win7](~/add/includes/win7-md.md)]，通知區域中的程式圖示依預設，會隱藏，因此，小於適用於通訊的狀態。 您可以使用中的工作列按鈕覆疊[!INCLUDE[win7](~/add/includes/win7-md.md)]隱藏通知區域中的圖示時，通訊狀態。 您的應用程式可以偵測的 Windows 版本，並提供適用於作業系統的方式通知。       在適當的大小會轉譯重疊影像。 如果<xref:System.Windows.Media.ImageSource>代表<xref:System.Drawing.Icon>，也會使用適當的位元深度。</xref:System.Drawing.Icon> </xref:System.Windows.Media.ImageSource>       下圖顯示工作列重疊。       ![工作列項目資訊範例](~/add/media/wpfshell-taskbariteminfo.png &quot;工作列項目資訊範例&quot;)Windows 工作列覆疊"
  example:
  - "The following example shows how to create a <xref:System.Windows.Shell.TaskbarItemInfo> in markup and set the Overlay property. This example is part of a larger example provided for the <xref:System.Windows.Shell.TaskbarItemInfo> class.  \n  \n [!code-xml[Shell_TaskbarItemSample#010](~/add/codesnippet/xaml/shell_taskbaritemsample/mainwindow.xaml#010)]  \n  \n The following example shows how to set the Overlay property in code.  \n  \n [!code-cs[Shell_TaskbarItemSample#121](~/add/codesnippet/csharp/shell_taskbaritemsample/mainwindow.xaml.cs#121)]\n [!code-vb[Shell_TaskbarItemSample#121](~/add/codesnippet/visualbasic/shell_taskbaritemsample/mainwindow.xaml.vb#121)]"
  syntax:
    content: public System.Windows.Media.ImageSource Overlay { get; set; }
    return:
      type: System.Windows.Media.ImageSource
      description: "顯示程式中的圖示上的工作列按鈕的影像。 預設值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Shell.TaskbarItemInfo.Overlay*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.TaskbarItemInfo.OverlayProperty
  id: OverlayProperty
  parent: System.Windows.Shell.TaskbarItemInfo
  langs:
  - csharp
  name: OverlayProperty
  nameWithType: TaskbarItemInfo.OverlayProperty
  fullName: System.Windows.Shell.TaskbarItemInfo.OverlayProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "識別<xref:System.Windows.Shell.TaskbarItemInfo.Overlay*>相依性屬性。</xref:System.Windows.Shell.TaskbarItemInfo.Overlay*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty OverlayProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.TaskbarItemInfo.ProgressState
  id: ProgressState
  parent: System.Windows.Shell.TaskbarItemInfo
  langs:
  - csharp
  name: ProgressState
  nameWithType: TaskbarItemInfo.ProgressState
  fullName: System.Windows.Shell.TaskbarItemInfo.ProgressState
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "取得或設定值，指出進度列指示器顯示工作列按鈕中的方式。"
  remarks: "您可以藉由顯示進度列指示器中的通訊的長時間執行的工作進度[!INCLUDE[win7](~/add/includes/win7-md.md)]工作列按鈕。 指標的色彩取決於 ProgressState 屬性，其中包含的其中一個<xref:System.Windows.Shell.TaskbarItemProgressState>列舉值。</xref:System.Windows.Shell.TaskbarItemProgressState> ProgressState 時<xref:System.Windows.Shell.TaskbarItemProgressState>，指標為綠色。</xref:System.Windows.Shell.TaskbarItemProgressState> 當<xref:System.Windows.Shell.TaskbarItemProgressState>，指標為黃色。</xref:System.Windows.Shell.TaskbarItemProgressState> 時<xref:System.Windows.Shell.TaskbarItemProgressState>，指標是 red.</xref:System.Windows.Shell.TaskbarItemProgressState> 這兩種狀態，如<xref:System.Windows.Shell.TaskbarItemInfo.ProgressValue%2A>屬性會決定多少的工作列按鈕會填入進度列指示器。</xref:System.Windows.Shell.TaskbarItemInfo.ProgressValue%2A> <xref:System.Windows.Shell.TaskbarItemInfo.ProgressValue%2A>會忽略 ProgressState 的其他值。</xref:System.Windows.Shell.TaskbarItemInfo.ProgressValue%2A> <xref:System.Windows.Shell.TaskbarItemProgressState>顯示整個工作列按鈕推進綠色指示器。</xref:System.Windows.Shell.TaskbarItemProgressState> 任何指標會不顯示<xref:System.Windows.Shell.TaskbarItemProgressState>.</xref:System.Windows.Shell.TaskbarItemProgressState>       下圖顯示在工作列進度列指示器<xref:System.Windows.Shell.TaskbarItemProgressState>狀態。</xref:System.Windows.Shell.TaskbarItemProgressState>       ![工作列項目資訊範例](~/add/media/wpfshell-taskbariteminfo.png &quot;工作列項目資訊範例&quot;)Windows 工作列進度列指示器"
  example:
  - "The following example shows how to set the ProgressState property in code. The state is set in the handler of a <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted?displayProperty=fullName> event to indicate whether the background task was stopped by the user, ended with an error, or completed normally. This example is part of a larger example provided for the <xref:System.Windows.Shell.TaskbarItemInfo> class.  \n  \n [!code-cs[Shell_TaskbarItemSample#120](~/add/codesnippet/csharp/shell_taskbaritemsample/mainwindow.xaml.cs#120)]\n [!code-vb[Shell_TaskbarItemSample#120](~/add/codesnippet/visualbasic/shell_taskbaritemsample/mainwindow.xaml.vb#120)]"
  syntax:
    content: public System.Windows.Shell.TaskbarItemProgressState ProgressState { get; set; }
    return:
      type: System.Windows.Shell.TaskbarItemProgressState
      description: "列舉值，指出進度列指示器顯示工作列按鈕中的方式。 預設值是<xref href=&quot;System.Windows.Shell.TaskbarItemProgressState&quot;> </xref>。"
  overload: System.Windows.Shell.TaskbarItemInfo.ProgressState*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.TaskbarItemInfo.ProgressStateProperty
  id: ProgressStateProperty
  parent: System.Windows.Shell.TaskbarItemInfo
  langs:
  - csharp
  name: ProgressStateProperty
  nameWithType: TaskbarItemInfo.ProgressStateProperty
  fullName: System.Windows.Shell.TaskbarItemInfo.ProgressStateProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "識別<xref:System.Windows.Shell.TaskbarItemInfo.ProgressState*>相依性屬性。</xref:System.Windows.Shell.TaskbarItemInfo.ProgressState*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ProgressStateProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.TaskbarItemInfo.ProgressValue
  id: ProgressValue
  parent: System.Windows.Shell.TaskbarItemInfo
  langs:
  - csharp
  name: ProgressValue
  nameWithType: TaskbarItemInfo.ProgressValue
  fullName: System.Windows.Shell.TaskbarItemInfo.ProgressValue
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "取得或設定值，指出進度列指示器，工作列按鈕中的飽和度。"
  remarks: "ProgressValue 屬性被以 0.0 到 1.0 之間的值。 小、 較大的數字會強制這些範圍內。 <xref:System.Double>會強制轉型為 0。</xref:System.Double>       您可以藉由顯示進度列指示器中的通訊的長時間執行的工作進度[!INCLUDE[win7](~/add/includes/win7-md.md)]工作列按鈕。 指標的色彩由<xref:System.Windows.Shell.TaskbarItemInfo.ProgressState%2A>屬性，其中包含的其中一個<xref:System.Windows.Shell.TaskbarItemProgressState>列舉值。</xref:System.Windows.Shell.TaskbarItemProgressState> </xref:System.Windows.Shell.TaskbarItemInfo.ProgressState%2A> 如果<xref:System.Windows.Shell.TaskbarItemInfo.ProgressState%2A>屬性是<xref:System.Windows.Shell.TaskbarItemProgressState>， <xref:System.Windows.Shell.TaskbarItemProgressState>，或<xref:System.Windows.Shell.TaskbarItemProgressState>，ProgressValue 屬性決定進度列指示器的飽和度。</xref:System.Windows.Shell.TaskbarItemProgressState> </xref:System.Windows.Shell.TaskbarItemProgressState> </xref:System.Windows.Shell.TaskbarItemProgressState> </xref:System.Windows.Shell.TaskbarItemInfo.ProgressState%2A> <xref:System.Windows.Shell.TaskbarItemInfo.ProgressState%2A>.</xref:System.Windows.Shell.TaskbarItemInfo.ProgressState%2A>的某些值都會忽略 ProgressValue <xref:System.Windows.Shell.TaskbarItemProgressState>顯示整個工作列按鈕推進綠色指示器。</xref:System.Windows.Shell.TaskbarItemProgressState> 任何指標會不顯示<xref:System.Windows.Shell.TaskbarItemProgressState>.</xref:System.Windows.Shell.TaskbarItemProgressState>       下圖顯示工作列進度列指示器與 ProgressValue 的 82%。       ![工作列項目資訊範例](~/add/media/wpfshell-taskbariteminfo.png &quot;工作列項目資訊範例&quot;)Windows 工作列進度列指示器"
  example:
  - "The following example shows how to set the ProgressValue property in code. The value is set in the handler of a <xref:System.ComponentModel.BackgroundWorker.ProgressChanged?displayProperty=fullName> event to indicate the current progress of the background task. This example is part of a larger example provided for the <xref:System.Windows.Shell.TaskbarItemInfo> class.  \n  \n [!code-cs[Shell_TaskbarItemSample#130](~/add/codesnippet/csharp/shell_taskbaritemsample/mainwindow.xaml.cs#130)]\n [!code-vb[Shell_TaskbarItemSample#130](~/add/codesnippet/visualbasic/shell_taskbaritemsample/mainwindow.xaml.vb#130)]"
  syntax:
    content: public double ProgressValue { get; set; }
    return:
      type: System.Double
      description: "值，指出進度列指示器，工作列按鈕中的飽和度。 預設值為 0。"
  overload: System.Windows.Shell.TaskbarItemInfo.ProgressValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.TaskbarItemInfo.ProgressValueProperty
  id: ProgressValueProperty
  parent: System.Windows.Shell.TaskbarItemInfo
  langs:
  - csharp
  name: ProgressValueProperty
  nameWithType: TaskbarItemInfo.ProgressValueProperty
  fullName: System.Windows.Shell.TaskbarItemInfo.ProgressValueProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "識別<xref:System.Windows.Shell.TaskbarItemInfo.ProgressValue*>相依性屬性。</xref:System.Windows.Shell.TaskbarItemInfo.ProgressValue*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ProgressValueProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.TaskbarItemInfo.ThumbButtonInfos
  id: ThumbButtonInfos
  parent: System.Windows.Shell.TaskbarItemInfo
  langs:
  - csharp
  name: ThumbButtonInfos
  nameWithType: TaskbarItemInfo.ThumbButtonInfos
  fullName: System.Windows.Shell.TaskbarItemInfo.ThumbButtonInfos
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "取得或設定集合<xref href=&quot;System.Windows.Shell.ThumbButtonInfo&quot;></xref>相關聯的物件<xref href=&quot;System.Windows.Window&quot;> </xref>。"
  remarks: "您可以將按鈕加入至提供一般工作的使用者可存取，而不需要它們來切換至應用程式視窗的工作列縮圖。 例如，Windows Media Player 會提供應用程式最小化時，可讓使用者控制播放媒體從工作列縮圖的播放、 暫停、 轉寄、 及上一步 按鈕。 工作列縮圖中的按鈕都由<xref:System.Windows.Shell.ThumbButtonInfo>物件和 ThumbButtonInfos 集合中所含。</xref:System.Windows.Shell.ThumbButtonInfo>       [!INCLUDE[win7](~/add/includes/win7-md.md)]殼層工作列縮圖中允許最多七個按鈕。 如果超過七<xref:System.Windows.Shell.ThumbButtonInfo>物件加入至<xref:System.Windows.Shell.ThumbButtonInfoCollection>，其他的物件會被視為溢位。</xref:System.Windows.Shell.ThumbButtonInfoCollection> </xref:System.Windows.Shell.ThumbButtonInfo> 按鈕時<xref:System.Windows.Visibility>，它並沒有任何可見的項目，會導致保留任何空間</xref:System.Windows.Visibility> 在這種情況下，其他的按鈕，從<xref:System.Windows.Shell.ThumbButtonInfoCollection>顯示溢位。</xref:System.Windows.Shell.ThumbButtonInfoCollection>       下圖顯示工作列預覽，具有兩個捲動方塊按鈕的集合。       ![工作列項目資訊範例](~/add/media/wpfshell-taskbariteminfo.png &quot;工作列項目資訊範例&quot;)Windows 工作列捲動方塊按鈕"
  example:
  - "The following example shows how to create a <xref:System.Windows.Shell.TaskbarItemInfo> in markup. The <xref:System.Windows.Shell.TaskbarItemInfo> contains a collection of <xref:System.Windows.Shell.ThumbButtonInfo> objects that provide access to the Play and Stop commands from the taskbar item. This example is part of a larger example provided for the <xref:System.Windows.Shell.TaskbarItemInfo> class.  \n  \n [!code-xml[Shell_TaskbarItemSample#010](~/add/codesnippet/xaml/shell_taskbaritemsample/mainwindow.xaml#010)]"
  syntax:
    content: public System.Windows.Shell.ThumbButtonInfoCollection ThumbButtonInfos { get; set; }
    return:
      type: System.Windows.Shell.ThumbButtonInfoCollection
      description: "集合<xref href=&quot;System.Windows.Shell.ThumbButtonInfo&quot;></xref>相關聯的物件<xref href=&quot;System.Windows.Window&quot;> </xref>。 預設為空集合。"
  overload: System.Windows.Shell.TaskbarItemInfo.ThumbButtonInfos*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.TaskbarItemInfo.ThumbButtonInfosProperty
  id: ThumbButtonInfosProperty
  parent: System.Windows.Shell.TaskbarItemInfo
  langs:
  - csharp
  name: ThumbButtonInfosProperty
  nameWithType: TaskbarItemInfo.ThumbButtonInfosProperty
  fullName: System.Windows.Shell.TaskbarItemInfo.ThumbButtonInfosProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "識別<xref:System.Windows.Shell.TaskbarItemInfo.ThumbButtonInfos*>相依性屬性。</xref:System.Windows.Shell.TaskbarItemInfo.ThumbButtonInfos*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ThumbButtonInfosProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.TaskbarItemInfo.ThumbnailClipMargin
  id: ThumbnailClipMargin
  parent: System.Windows.Shell.TaskbarItemInfo
  langs:
  - csharp
  name: ThumbnailClipMargin
  nameWithType: TaskbarItemInfo.ThumbnailClipMargin
  fullName: System.Windows.Shell.TaskbarItemInfo.ThumbnailClipMargin
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "取得或設定值，這個值會指定應用程式視窗的工作列縮圖上顯示的工作區的一部分。"
  remarks: "根據預設，[!INCLUDE[win7](~/add/includes/win7-md.md)]工作列顯示應用程式視窗的工作區的縮放縮圖。 您可以設定 ThumbnailClipMargin 屬性，來指定用戶端視窗顯示縮圖中的裁剪的區域。 例如，這個屬性是如果您想要專注於視窗內容的縮圖，排除應用程式工具列時很有用。 這個屬性不能用於在看不到應用程式視窗中的縮圖中顯示內容。       指定藉由設定顯示縮圖中的區域<xref:System.Windows.Thickness>區域周圍的框線。</xref:System.Windows.Thickness> 框線會從用戶端視窗的邊緣，然後向內擴充，以指定的數量。 在框線內部的內容會顯示在縮圖。       下圖顯示定義 ThumbnailClipMargin 的框線。       ![縮圖裁剪邊界](~/add/media/wpfshell-clipmargin.png &quot;縮圖裁剪邊界&quot;)縮圖裁剪邊界框線下圖顯示裁剪的縮圖預覽。       ![工作列項目資訊範例](~/add/media/wpfshell-taskbariteminfo.png &quot;工作列項目資訊範例&quot;)Windows 工作列縮圖預覽"
  example:
  - "The following example shows how to create a <xref:System.Windows.Shell.TaskbarItemInfo> in markup and set the ThumbnailClipMargin property. This example is part of a larger example provided for the <xref:System.Windows.Shell.TaskbarItemInfo> class.  \n  \n [!code-xml[Shell_TaskbarItemSample#010](~/add/codesnippet/xaml/shell_taskbaritemsample/mainwindow.xaml#010)]"
  syntax:
    content: public System.Windows.Thickness ThumbnailClipMargin { get; set; }
    return:
      type: System.Windows.Thickness
      description: "值，指定應用程式視窗的工作列縮圖上顯示的工作區的一部分。 預設為空<xref href=&quot;System.Windows.Thickness&quot;> </xref>。"
  overload: System.Windows.Shell.TaskbarItemInfo.ThumbnailClipMargin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.TaskbarItemInfo.ThumbnailClipMarginProperty
  id: ThumbnailClipMarginProperty
  parent: System.Windows.Shell.TaskbarItemInfo
  langs:
  - csharp
  name: ThumbnailClipMarginProperty
  nameWithType: TaskbarItemInfo.ThumbnailClipMarginProperty
  fullName: System.Windows.Shell.TaskbarItemInfo.ThumbnailClipMarginProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "識別<xref:System.Windows.Shell.TaskbarItemInfo.ThumbnailClipMargin*>相依性屬性。</xref:System.Windows.Shell.TaskbarItemInfo.ThumbnailClipMargin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ThumbnailClipMarginProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Freezable
  isExternal: false
  name: System.Windows.Freezable
- uid: System.Windows.Shell.TaskbarItemInfo.#ctor
  parent: System.Windows.Shell.TaskbarItemInfo
  isExternal: false
  name: TaskbarItemInfo()
  nameWithType: TaskbarItemInfo.TaskbarItemInfo()
  fullName: System.Windows.Shell.TaskbarItemInfo.TaskbarItemInfo()
- uid: System.Windows.Shell.TaskbarItemInfo.CreateInstanceCore
  parent: System.Windows.Shell.TaskbarItemInfo
  isExternal: false
  name: CreateInstanceCore()
  nameWithType: TaskbarItemInfo.CreateInstanceCore()
  fullName: System.Windows.Shell.TaskbarItemInfo.CreateInstanceCore()
- uid: System.Windows.Shell.TaskbarItemInfo.Description
  parent: System.Windows.Shell.TaskbarItemInfo
  isExternal: false
  name: Description
  nameWithType: TaskbarItemInfo.Description
  fullName: System.Windows.Shell.TaskbarItemInfo.Description
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Shell.TaskbarItemInfo.DescriptionProperty
  parent: System.Windows.Shell.TaskbarItemInfo
  isExternal: false
  name: DescriptionProperty
  nameWithType: TaskbarItemInfo.DescriptionProperty
  fullName: System.Windows.Shell.TaskbarItemInfo.DescriptionProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Shell.TaskbarItemInfo.Overlay
  parent: System.Windows.Shell.TaskbarItemInfo
  isExternal: false
  name: Overlay
  nameWithType: TaskbarItemInfo.Overlay
  fullName: System.Windows.Shell.TaskbarItemInfo.Overlay
- uid: System.Windows.Media.ImageSource
  parent: System.Windows.Media
  isExternal: false
  name: ImageSource
  nameWithType: ImageSource
  fullName: System.Windows.Media.ImageSource
- uid: System.Windows.Shell.TaskbarItemInfo.OverlayProperty
  parent: System.Windows.Shell.TaskbarItemInfo
  isExternal: false
  name: OverlayProperty
  nameWithType: TaskbarItemInfo.OverlayProperty
  fullName: System.Windows.Shell.TaskbarItemInfo.OverlayProperty
- uid: System.Windows.Shell.TaskbarItemInfo.ProgressState
  parent: System.Windows.Shell.TaskbarItemInfo
  isExternal: false
  name: ProgressState
  nameWithType: TaskbarItemInfo.ProgressState
  fullName: System.Windows.Shell.TaskbarItemInfo.ProgressState
- uid: System.Windows.Shell.TaskbarItemProgressState
  parent: System.Windows.Shell
  isExternal: false
  name: TaskbarItemProgressState
  nameWithType: TaskbarItemProgressState
  fullName: System.Windows.Shell.TaskbarItemProgressState
- uid: System.Windows.Shell.TaskbarItemInfo.ProgressStateProperty
  parent: System.Windows.Shell.TaskbarItemInfo
  isExternal: false
  name: ProgressStateProperty
  nameWithType: TaskbarItemInfo.ProgressStateProperty
  fullName: System.Windows.Shell.TaskbarItemInfo.ProgressStateProperty
- uid: System.Windows.Shell.TaskbarItemInfo.ProgressValue
  parent: System.Windows.Shell.TaskbarItemInfo
  isExternal: false
  name: ProgressValue
  nameWithType: TaskbarItemInfo.ProgressValue
  fullName: System.Windows.Shell.TaskbarItemInfo.ProgressValue
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.Shell.TaskbarItemInfo.ProgressValueProperty
  parent: System.Windows.Shell.TaskbarItemInfo
  isExternal: false
  name: ProgressValueProperty
  nameWithType: TaskbarItemInfo.ProgressValueProperty
  fullName: System.Windows.Shell.TaskbarItemInfo.ProgressValueProperty
- uid: System.Windows.Shell.TaskbarItemInfo.ThumbButtonInfos
  parent: System.Windows.Shell.TaskbarItemInfo
  isExternal: false
  name: ThumbButtonInfos
  nameWithType: TaskbarItemInfo.ThumbButtonInfos
  fullName: System.Windows.Shell.TaskbarItemInfo.ThumbButtonInfos
- uid: System.Windows.Shell.ThumbButtonInfoCollection
  parent: System.Windows.Shell
  isExternal: false
  name: ThumbButtonInfoCollection
  nameWithType: ThumbButtonInfoCollection
  fullName: System.Windows.Shell.ThumbButtonInfoCollection
- uid: System.Windows.Shell.TaskbarItemInfo.ThumbButtonInfosProperty
  parent: System.Windows.Shell.TaskbarItemInfo
  isExternal: false
  name: ThumbButtonInfosProperty
  nameWithType: TaskbarItemInfo.ThumbButtonInfosProperty
  fullName: System.Windows.Shell.TaskbarItemInfo.ThumbButtonInfosProperty
- uid: System.Windows.Shell.TaskbarItemInfo.ThumbnailClipMargin
  parent: System.Windows.Shell.TaskbarItemInfo
  isExternal: false
  name: ThumbnailClipMargin
  nameWithType: TaskbarItemInfo.ThumbnailClipMargin
  fullName: System.Windows.Shell.TaskbarItemInfo.ThumbnailClipMargin
- uid: System.Windows.Thickness
  parent: System.Windows
  isExternal: false
  name: Thickness
  nameWithType: Thickness
  fullName: System.Windows.Thickness
- uid: System.Windows.Shell.TaskbarItemInfo.ThumbnailClipMarginProperty
  parent: System.Windows.Shell.TaskbarItemInfo
  isExternal: false
  name: ThumbnailClipMarginProperty
  nameWithType: TaskbarItemInfo.ThumbnailClipMarginProperty
  fullName: System.Windows.Shell.TaskbarItemInfo.ThumbnailClipMarginProperty
- uid: System.Windows.Shell.TaskbarItemInfo.#ctor*
  parent: System.Windows.Shell.TaskbarItemInfo
  isExternal: false
  name: TaskbarItemInfo
  nameWithType: TaskbarItemInfo.TaskbarItemInfo
- uid: System.Windows.Shell.TaskbarItemInfo.CreateInstanceCore*
  parent: System.Windows.Shell.TaskbarItemInfo
  isExternal: false
  name: CreateInstanceCore
  nameWithType: TaskbarItemInfo.CreateInstanceCore
- uid: System.Windows.Shell.TaskbarItemInfo.Description*
  parent: System.Windows.Shell.TaskbarItemInfo
  isExternal: false
  name: Description
  nameWithType: TaskbarItemInfo.Description
- uid: System.Windows.Shell.TaskbarItemInfo.Overlay*
  parent: System.Windows.Shell.TaskbarItemInfo
  isExternal: false
  name: Overlay
  nameWithType: TaskbarItemInfo.Overlay
- uid: System.Windows.Shell.TaskbarItemInfo.ProgressState*
  parent: System.Windows.Shell.TaskbarItemInfo
  isExternal: false
  name: ProgressState
  nameWithType: TaskbarItemInfo.ProgressState
- uid: System.Windows.Shell.TaskbarItemInfo.ProgressValue*
  parent: System.Windows.Shell.TaskbarItemInfo
  isExternal: false
  name: ProgressValue
  nameWithType: TaskbarItemInfo.ProgressValue
- uid: System.Windows.Shell.TaskbarItemInfo.ThumbButtonInfos*
  parent: System.Windows.Shell.TaskbarItemInfo
  isExternal: false
  name: ThumbButtonInfos
  nameWithType: TaskbarItemInfo.ThumbButtonInfos
- uid: System.Windows.Shell.TaskbarItemInfo.ThumbnailClipMargin*
  parent: System.Windows.Shell.TaskbarItemInfo
  isExternal: false
  name: ThumbnailClipMargin
  nameWithType: TaskbarItemInfo.ThumbnailClipMargin
