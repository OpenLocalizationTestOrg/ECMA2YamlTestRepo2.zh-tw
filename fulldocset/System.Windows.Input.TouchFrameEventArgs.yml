### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.TouchFrameEventArgs
  id: TouchFrameEventArgs
  children:
  - System.Windows.Input.TouchFrameEventArgs.GetPrimaryTouchPoint(System.Windows.IInputElement)
  - System.Windows.Input.TouchFrameEventArgs.GetTouchPoints(System.Windows.IInputElement)
  - System.Windows.Input.TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp
  - System.Windows.Input.TouchFrameEventArgs.Timestamp
  langs:
  - csharp
  name: TouchFrameEventArgs
  nameWithType: TouchFrameEventArgs
  fullName: System.Windows.Input.TouchFrameEventArgs
  type: Class
  summary: "提供資料給<xref href=&quot;System.Windows.Input.Touch.FrameReported&quot;></xref>事件。"
  remarks: "<xref:System.Windows.Input.Touch.FrameReported>事件是否包含在[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]支援與 Silverlight 的相容性。</xref:System.Windows.Input.Touch.FrameReported> 如果您不需要確保 Silverlight 與相容性，使用觸控事件，例如<xref:System.Windows.UIElement.TouchDown>和<xref:System.Windows.UIElement.TouchMove>上<xref:System.Windows.UIElement>， <xref:System.Windows.UIElement3D>，或<xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement> </xref:System.Windows.UIElement3D> </xref:System.Windows.UIElement> </xref:System.Windows.UIElement.TouchMove> </xref:System.Windows.UIElement.TouchDown>       若要取得使用 TouchFrameEventArgs<xref:System.Windows.Input.TouchPoint>與觸控事件的值。</xref:System.Windows.Input.TouchPoint> 從<xref:System.Windows.Input.TouchPoint>，您可以取得<xref:System.Windows.Input.TouchPoint.Position%2A>觸控的並判斷是否<xref:System.Windows.Input.TouchAction>已<xref:System.Windows.Input.TouchAction>， <xref:System.Windows.Input.TouchAction>，或<xref:System.Windows.Input.TouchAction>動作。</xref:System.Windows.Input.TouchAction> </xref:System.Windows.Input.TouchAction> </xref:System.Windows.Input.TouchAction> </xref:System.Windows.Input.TouchAction> </xref:System.Windows.Input.TouchPoint.Position%2A> </xref:System.Windows.Input.TouchPoint> 您也可以使用<xref:System.Windows.Input.TouchPoint>取得<xref:System.Windows.Input.TouchDevice>.</xref:System.Windows.Input.TouchDevice> </xref:System.Windows.Input.TouchPoint> 從<xref:System.Windows.Input.TouchDevice>，您可以判斷裝置<xref:System.Windows.Input.TouchDevice.Id%2A>並取得有關碰觸的項目資訊。</xref:System.Windows.Input.TouchDevice.Id%2A> </xref:System.Windows.Input.TouchDevice>"
  example:
  - "The following example handles the <xref:System.Windows.Input.Touch.FrameReported> event and accesses the touch data in the TouchFrameEventArgs. When a touch is pressed on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice> is captured to the <xref:System.Windows.Controls.Canvas>. When the touch is lifted, the <xref:System.Windows.Input.TouchDevice> is released. When a touch moves across the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice.Id%2A> is checked. If the move came from the first touch, its location is recorded. If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.  \n  \n This example is part of a larger example that is available in the <xref:System.Windows.Input.Touch> class overview.  \n  \n [!code-vb[TouchFrameSample#110](~/add/codesnippet/visualbasic/wpftouchframesample/mainwindow.xaml.vb#110)]\n [!code-cs[TouchFrameSample#110](~/add/codesnippet/csharp/wpftouchframesample/mainwindow.xaml.cs#110)]"
  syntax:
    content: 'public sealed class TouchFrameEventArgs : EventArgs'
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.TouchFrameEventArgs.GetPrimaryTouchPoint(System.Windows.IInputElement)
  id: GetPrimaryTouchPoint(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchFrameEventArgs
  langs:
  - csharp
  name: GetPrimaryTouchPoint(IInputElement)
  nameWithType: TouchFrameEventArgs.GetPrimaryTouchPoint(IInputElement)
  fullName: System.Windows.Input.TouchFrameEventArgs.GetPrimaryTouchPoint(IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "傳回目前觸控點的主要觸控裝置相對於指定的項目。"
  remarks: "在作用中的一組接觸的裝置，將第一個裝置設定為<xref:System.Windows.Input.TouchDevice.Activated>是主要的觸控式裝置。</xref:System.Windows.Input.TouchDevice.Activated> 例如，若兩隻手指放觸控螢幕，已關閉的第一個手指會以主要觸控式裝置。 如果第一個手指會消除第二個手指仍關閉時，就會變成主要觸控裝置`null`。"
  example:
  - "The following code processes the touch points that are retrieved from the <xref:System.Windows.Input.TouchFrameEventArgs>. When a touch is pressed on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice> is captured to the <xref:System.Windows.Controls.Canvas>. When the touch is lifted, the <xref:System.Windows.Input.TouchDevice> is released. When a touch moves across the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice.Id%2A> is checked. If the <xref:System.Windows.Input.TouchDevice.Id%2A> matches the <xref:System.Windows.Input.TouchDevice.Id%2A> of the primary touch point, which indicates the first touch, its location is recorded. If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.  \n  \n This example is part of a larger example that is available in the <xref:System.Windows.Input.Touch> class overview.  \n  \n [!code-vb[TouchFrameSample#120](~/add/codesnippet/visualbasic/wpftouchframesample/mainwindow.xaml.vb#120)]\n [!code-cs[TouchFrameSample#120](~/add/codesnippet/csharp/wpftouchframesample/mainwindow.xaml.cs#120)]"
  syntax:
    content: public System.Windows.Input.TouchPoint GetPrimaryTouchPoint (System.Windows.IInputElement relativeTo);
    parameters:
    - id: relativeTo
      type: System.Windows.IInputElement
      description: "定義之座標空間的項目。 若要使用 WPF 絕對座標，指定`relativeTo`為<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Windows.Input.TouchPoint
      description: "目前的主要位置<xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref>相對於指定的項目; 或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果主要<xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref>不在作用中。"
  overload: System.Windows.Input.TouchFrameEventArgs.GetPrimaryTouchPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchFrameEventArgs.GetTouchPoints(System.Windows.IInputElement)
  id: GetTouchPoints(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchFrameEventArgs
  langs:
  - csharp
  name: GetTouchPoints(IInputElement)
  nameWithType: TouchFrameEventArgs.GetTouchPoints(IInputElement)
  fullName: System.Windows.Input.TouchFrameEventArgs.GetTouchPoints(IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "傳回包含目前的觸控點，每個作用中的觸控式裝置相對於指定項目的集合。"
  remarks: ''
  example:
  - "The following code processes the touch points retrieved from the <xref:System.Windows.Input.TouchFrameEventArgs>. When a touch is pressed on the canvas, the <xref:System.Windows.Input.TouchDevice> is captured to the canvas. When the touch is raised, the <xref:System.Windows.Input.TouchDevice> is released. When a touch moves across the canvas, the <xref:System.Windows.Input.TouchDevice.Id%2A> is checked. If the <xref:System.Windows.Input.TouchDevice.Id%2A> matches the <xref:System.Windows.Input.TouchDevice.Id%2A> of the primary touch point, which indicates the first touch, its location is recorded. If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.  \n  \n This example is part of a larger example that is available in the <xref:System.Windows.Input.Touch> class overview.  \n  \n [!code-vb[TouchFrameSample#120](~/add/codesnippet/visualbasic/wpftouchframesample/mainwindow.xaml.vb#120)]\n [!code-cs[TouchFrameSample#120](~/add/codesnippet/csharp/wpftouchframesample/mainwindow.xaml.cs#120)]"
  syntax:
    content: public System.Windows.Input.TouchPointCollection GetTouchPoints (System.Windows.IInputElement relativeTo);
    parameters:
    - id: relativeTo
      type: System.Windows.IInputElement
      description: "定義之座標空間的項目。 若要使用 WPF 絕對座標，指定`relativeTo`為<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Windows.Input.TouchPointCollection
      description: "集合，包含目前<xref href=&quot;System.Windows.Input.TouchPoint&quot;></xref>的每個作用中<xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref>。"
  overload: System.Windows.Input.TouchFrameEventArgs.GetTouchPoints*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp
  id: SuspendMousePromotionUntilTouchUp
  parent: System.Windows.Input.TouchFrameEventArgs
  langs:
  - csharp
  name: SuspendMousePromotionUntilTouchUp()
  nameWithType: TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp()
  fullName: System.Windows.Input.TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "未實作這個成員。"
  remarks: "這個方法被提供 Silverlight 相容性。 裝置實作差異，因為它不是 WPF 中實作。"
  syntax:
    content: public void SuspendMousePromotionUntilTouchUp ();
    parameters: []
  overload: System.Windows.Input.TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.TouchFrameEventArgs.Timestamp
  id: Timestamp
  parent: System.Windows.Input.TouchFrameEventArgs
  langs:
  - csharp
  name: Timestamp
  nameWithType: TouchFrameEventArgs.Timestamp
  fullName: System.Windows.Input.TouchFrameEventArgs.Timestamp
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得這個事件的時間戳記。"
  syntax:
    content: public int Timestamp { get; }
    return:
      type: System.Int32
      description: "這個事件的時間戳記。"
  overload: System.Windows.Input.TouchFrameEventArgs.Timestamp*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.Windows.Input.TouchFrameEventArgs.GetPrimaryTouchPoint(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchFrameEventArgs
  isExternal: false
  name: GetPrimaryTouchPoint(IInputElement)
  nameWithType: TouchFrameEventArgs.GetPrimaryTouchPoint(IInputElement)
  fullName: System.Windows.Input.TouchFrameEventArgs.GetPrimaryTouchPoint(IInputElement)
- uid: System.Windows.Input.TouchPoint
  parent: System.Windows.Input
  isExternal: false
  name: TouchPoint
  nameWithType: TouchPoint
  fullName: System.Windows.Input.TouchPoint
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.TouchFrameEventArgs.GetTouchPoints(System.Windows.IInputElement)
  parent: System.Windows.Input.TouchFrameEventArgs
  isExternal: false
  name: GetTouchPoints(IInputElement)
  nameWithType: TouchFrameEventArgs.GetTouchPoints(IInputElement)
  fullName: System.Windows.Input.TouchFrameEventArgs.GetTouchPoints(IInputElement)
- uid: System.Windows.Input.TouchPointCollection
  parent: System.Windows.Input
  isExternal: false
  name: TouchPointCollection
  nameWithType: TouchPointCollection
  fullName: System.Windows.Input.TouchPointCollection
- uid: System.Windows.Input.TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp
  parent: System.Windows.Input.TouchFrameEventArgs
  isExternal: false
  name: SuspendMousePromotionUntilTouchUp()
  nameWithType: TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp()
  fullName: System.Windows.Input.TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp()
- uid: System.Windows.Input.TouchFrameEventArgs.Timestamp
  parent: System.Windows.Input.TouchFrameEventArgs
  isExternal: false
  name: Timestamp
  nameWithType: TouchFrameEventArgs.Timestamp
  fullName: System.Windows.Input.TouchFrameEventArgs.Timestamp
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Input.TouchFrameEventArgs.GetPrimaryTouchPoint*
  parent: System.Windows.Input.TouchFrameEventArgs
  isExternal: false
  name: GetPrimaryTouchPoint
  nameWithType: TouchFrameEventArgs.GetPrimaryTouchPoint
- uid: System.Windows.Input.TouchFrameEventArgs.GetTouchPoints*
  parent: System.Windows.Input.TouchFrameEventArgs
  isExternal: false
  name: GetTouchPoints
  nameWithType: TouchFrameEventArgs.GetTouchPoints
- uid: System.Windows.Input.TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp*
  parent: System.Windows.Input.TouchFrameEventArgs
  isExternal: false
  name: SuspendMousePromotionUntilTouchUp
  nameWithType: TouchFrameEventArgs.SuspendMousePromotionUntilTouchUp
- uid: System.Windows.Input.TouchFrameEventArgs.Timestamp*
  parent: System.Windows.Input.TouchFrameEventArgs
  isExternal: false
  name: Timestamp
  nameWithType: TouchFrameEventArgs.Timestamp
