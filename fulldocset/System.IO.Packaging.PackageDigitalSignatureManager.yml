### YamlMime:ManagedReference
items:
- uid: System.IO.Packaging.PackageDigitalSignatureManager
  id: PackageDigitalSignatureManager
  children:
  - System.IO.Packaging.PackageDigitalSignatureManager.#ctor(System.IO.Packaging.Package)
  - System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption
  - System.IO.Packaging.PackageDigitalSignatureManager.Countersign
  - System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate)
  - System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.Uri})
  - System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm
  - System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(System.Uri)
  - System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm
  - System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent
  - System.IO.Packaging.PackageDigitalSignatureManager.IsSigned
  - System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow
  - System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures
  - System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(System.Uri)
  - System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})
  - System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate)
  - System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector})
  - System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String)
  - System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject},System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference})
  - System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin
  - System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType
  - System.IO.Packaging.PackageDigitalSignatureManager.Signatures
  - System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat
  - System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping
  - System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)
  - System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)
  langs:
  - csharp
  name: PackageDigitalSignatureManager
  nameWithType: PackageDigitalSignatureManager
  fullName: System.IO.Packaging.PackageDigitalSignatureManager
  type: Class
  summary: "提供公用程式類別，用於建立及驗證數位簽章中<xref href=&quot;System.IO.Packaging.Package&quot;> </xref>。"
  remarks: "架構上建置的 PackageDigitalSignatureManager[!INCLUDE[TLA#tla_netframewk](~/add/includes/tlasharptla-netframewk-md.md)]數位簽章類別和執行一般工作中使用的數位簽章提供公用程式類別<xref:System.IO.Packaging.Package>項目。</xref:System.IO.Packaging.Package>       如需封裝的數位簽章的詳細資訊，請參閱 MSDN 文章︰ 數位簽章的架構，可在開放式封裝慣例的[http://go.microsoft.com/fwlink/?LinkId=74494](http://go.microsoft.com/fwlink/?LinkId=74494)。"
  example:
  - "The following example shows how to use the PackageDigitalSignatureManager.  For the complete sample, see [Creating a Package with a Digital Signature Sample](http://go.microsoft.com/fwlink/?LinkID=159966).  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public sealed class PackageDigitalSignatureManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.#ctor(System.IO.Packaging.Package)
  id: '#ctor(System.IO.Packaging.Package)'
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: PackageDigitalSignatureManager(Package)
  nameWithType: PackageDigitalSignatureManager.PackageDigitalSignatureManager(Package)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.PackageDigitalSignatureManager(Package)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "初始化的新執行個體<xref href=&quot;System.IO.Packaging.PackageDigitalSignatureManager&quot;></xref>類別與指定的<xref href=&quot;System.IO.Packaging.Package&quot;> </xref>。"
  remarks: "目標封裝相關聯的簽章管理員會在初始化期間設定。 設定之後，就無法變更與簽章管理員相關聯的套件。 視需要建立新的簽章的每個封裝管理員。"
  example:
  - "The following example shows how to use this constructor.  For the complete sample, see [Creating a Package with a Digital Signature Sample](http://go.microsoft.com/fwlink/?LinkID=159966).  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public PackageDigitalSignatureManager (System.IO.Packaging.Package package);
    parameters:
    - id: package
      type: System.IO.Packaging.Package
      description: "與此簽章管理員關聯的封裝。"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption
  id: CertificateOption
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: CertificateOption
  nameWithType: PackageDigitalSignatureManager.CertificateOption
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得或設定 X.509 憑證內嵌選項供<xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign*>來數位簽署封裝組件的方法。</xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign*>"
  remarks: "此屬性會指定以數位方式簽署組件時，儲存簽署者的 X.509 憑證。"
  example:
  - "The following example shows how to set this property in preparation to digitally sign the parts within a package.  For the complete sample, see [Creating a Package with a Digital Signature Sample](http://go.microsoft.com/fwlink/?LinkID=159966).  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.IO.Packaging.CertificateEmbeddingOption CertificateOption { get; set; }
    return:
      type: System.IO.Packaging.CertificateEmbeddingOption
      description: "其中一個<xref href=&quot;System.IO.Packaging.CertificateEmbeddingOption&quot;></xref>值。"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Countersign
  id: Countersign
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: Countersign()
  nameWithType: PackageDigitalSignatureManager.Countersign()
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Countersign()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "副署封裝以使用者選取的 X.509 憑證中的所有簽章。"
  remarks: "如果在呼叫中指定 X.509 憑證，則這個方法會開啟憑證選取對話方塊，提示使用者選擇要用於簽署的憑證。       在中設定的視窗控制代碼<xref:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow%2A>屬性再呼叫進行憑證選取對話方塊強制回應特定視窗的副署。</xref:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow%2A>"
  syntax:
    content: public System.IO.Packaging.PackageDigitalSignature Countersign ();
    parameters: []
    return:
      type: System.IO.Packaging.PackageDigitalSignature
      description: "已加入為副署; 簽章或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果找不到任何憑證，或使用者已取消憑證選取對話方塊。"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.Countersign*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate)
  id: Countersign(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: Countersign(X509Certificate)
  nameWithType: PackageDigitalSignatureManager.Countersign(X509Certificate)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Countersign(X509Certificate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "副署具有指定的 X.509 憑證的封裝中的所有簽章。"
  syntax:
    content: public System.IO.Packaging.PackageDigitalSignature Countersign (System.Security.Cryptography.X509Certificates.X509Certificate certificate);
    parameters:
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "要加入為副署簽章的 X.509 憑證。"
    return:
      type: System.IO.Packaging.PackageDigitalSignature
      description: "已加入為副署簽章。"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.Countersign*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>certificate</code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>"
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.Uri})
  id: Countersign(System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.Uri})
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: Countersign(X509Certificate,IEnumerable<Uri>)
  nameWithType: PackageDigitalSignatureManager.Countersign(X509Certificate,IEnumerable<Uri>)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Countersign(X509Certificate,IEnumerable<Uri>)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "副署簽章，以指定的 X.509 憑證的清單。"
  syntax:
    content: public System.IO.Packaging.PackageDigitalSignature Countersign (System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Collections.Generic.IEnumerable<Uri> signatures);
    parameters:
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "要副署每個指定的 X.509 憑證`signatures`。"
    - id: signatures
      type: System.Collections.Generic.IEnumerable{System.Uri}
      description: "副署的簽章中的清單。"
    return:
      type: System.IO.Packaging.PackageDigitalSignature
      description: "用來副署每個的數位簽章<code> signatures </code>。"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.Countersign*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Either the <code>certificate</code> or <code>signatures</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "封裝未包含任何簽署<xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref>物件。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "封裝未包含任何<xref href=&quot;System.IO.Packaging.PackageDigitalSignature&quot;></xref>組件。"
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm
  id: DefaultHashAlgorithm
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: DefaultHashAlgorithm
  nameWithType: PackageDigitalSignatureManager.DefaultHashAlgorithm
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]識別用來建立及驗證簽章的預設雜湊演算法的字串。"
  remarks: "標準的預設雜湊演算法<xref:System.IO.Packaging.PackageDigitalSignatureManager>類別是<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url>([!INCLUDE[TLA#tla_sha1](~/add/includes/ajax-current-ext-md.md)])。</xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url> </xref:System.IO.Packaging.PackageDigitalSignatureManager>       <xref:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm%2A>屬性取得或設定實際的雜湊演算法，這用來建立和驗證簽章。</xref:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm%2A>       DefaultHashAlgorithm 屬性通常用來重設<xref:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm%2A>屬性設回預設值在暫存的變更之後。</xref:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm%2A>"
  syntax:
    content: public static string DefaultHashAlgorithm { get; }
    return:
      type: System.String
      description: "A[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]識別用來建立及驗證簽章的預設雜湊演算法的字串。"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(System.Uri)
  id: GetSignature(System.Uri)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: GetSignature(Uri)
  nameWithType: PackageDigitalSignatureManager.GetSignature(Uri)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(Uri)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "傳回指定的簽章的數位簽章[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]。"
  syntax:
    content: public System.IO.Packaging.PackageDigitalSignature GetSignature (Uri signatureUri);
    parameters:
    - id: signatureUri
      type: System.Uri
      description: "[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]来傳回的數位簽章。"
    return:
      type: System.IO.Packaging.PackageDigitalSignature
      description: "指定的數位簽章<code> signatureUri </code>，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果的簽章指定<code> signatureUri </code>找不到。"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.GetSignature*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm
  id: HashAlgorithm
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: HashAlgorithm
  nameWithType: PackageDigitalSignatureManager.HashAlgorithm
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得或設定[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]識別碼<xref href=&quot;System.Security.Cryptography.HashAlgorithm&quot;></xref>用來建立及驗證簽章的執行個體。"
  remarks: "標準的數位簽章管理員的預設雜湊演算法識別項是<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url>(<xref:System.Security.Cryptography.SHA1>-安全雜湊演算法 1.0 版)。</xref:System.Security.Cryptography.SHA1> </xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url>       除非明確設定則為此屬性取得<xref:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm%2A>.</xref:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm%2A>相同的值       HashAlgorithm 屬性通常不會變更其預設值。 必須變更這個屬性，才會使用不同的已知的簽章，而且可存取<xref:System.Security.Cryptography.HashAlgorithm>遇到。</xref:System.Security.Cryptography.HashAlgorithm>  完成之後會使用不同的雜湊演算法的簽章，呼叫<xref:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm%2A>重設 HashAlgorithm 屬性設回預設值。</xref:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm%2A>"
  syntax:
    content: public string HashAlgorithm { get; set; }
    return:
      type: System.String
      description: "<xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;> </xref> [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]識別碼<xref href=&quot;System.Security.Cryptography.HashAlgorithm&quot;></xref>用來建立及驗證簽章的執行個體。"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "字串[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]設為<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "字串[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]設為空白。"
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent
  id: InvalidSignatureEvent
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: InvalidSignatureEvent
  nameWithType: PackageDigitalSignatureManager.InvalidSignatureEvent
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent
  type: Event
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "發生時<xref:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures*>遇到無效的簽章。</xref:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures*>"
  syntax:
    content: public event System.IO.Packaging.InvalidSignatureEventHandler InvalidSignatureEvent;
    return:
      type: System.IO.Packaging.InvalidSignatureEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.IsSigned
  id: IsSigned
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: IsSigned
  nameWithType: PackageDigitalSignatureManager.IsSigned
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.IsSigned
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得值，指出封裝是否包含任何簽章。"
  remarks: "IsSigned 屬性不會執行簽章驗證。 如果簽章是不存在，而且 IsSigned `true`，一或多個簽章可能無效。  呼叫<xref:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures%2A>確認簽章有效，且未變更。</xref:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures%2A>"
  example:
  - "The following example shows how to use the IsSigned property to determine if a package contains digital signatures.  For the complete sample, see [Creating a Package with a Digital Signature Sample](http://go.microsoft.com/fwlink/?LinkID=159966).  \n  \n [!code-vb[PackageDigitalSignature#PackageDigSigValidate](~/add/codesnippet/visualbasic/packagedigitalsignature/packagedigitalsignature.vb#packagedigsigvalidate)]\n [!code-cs[PackageDigitalSignature#PackageDigSigValidate](~/add/codesnippet/csharp/PackageDigitalSignature/PackageDigitalSignature.cs#packagedigsigvalidate)]"
  syntax:
    content: public bool IsSigned { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果封裝包含簽章。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.IsSigned*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow
  id: ParentWindow
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: ParentWindow
  nameWithType: PackageDigitalSignatureManager.ParentWindow
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得或設定顯示憑證選取對話方塊的父視窗控制代碼。"
  remarks: "憑證選取對話方塊會顯示只有當<xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign%2A>呼叫中包含任何憑證。</xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign%2A> 如果未不指定任何憑證，<xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign%2A>會顯示憑證選取對話方塊，可讓使用者選擇要用於簽署的憑證。</xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign%2A>"
  syntax:
    content: public IntPtr ParentWindow { get; set; }
    return:
      type: System.IntPtr
      description: "要用來顯示憑證選取對話方塊的父視窗的控制代碼。"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures
  id: RemoveAllSignatures
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: RemoveAllSignatures()
  nameWithType: PackageDigitalSignatureManager.RemoveAllSignatures()
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "從封裝移除所有數位簽章。"
  remarks: "這個方法也會從封裝移除所有的 X.509 憑證。  移除所有的簽章和憑證之後, 呼叫<xref:System.IO.Packaging.Package.Flush%2A>保存至存放區的所有變更。</xref:System.IO.Packaging.Package.Flush%2A>"
  syntax:
    content: public void RemoveAllSignatures ();
    parameters: []
  overload: System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(System.Uri)
  id: RemoveSignature(System.Uri)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: RemoveSignature(Uri)
  nameWithType: PackageDigitalSignatureManager.RemoveSignature(Uri)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(Uri)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "移除具有指定簽章的數位簽章[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]。"
  remarks: "如果它不由任何其他數位簽章參考，這個方法也會移除相關聯的 X.509 憑證。       移除簽章之後, 呼叫<xref:System.IO.Packaging.Package.Flush%2A>保存至存放區的變更。</xref:System.IO.Packaging.Package.Flush%2A>"
  syntax:
    content: public void RemoveSignature (Uri signatureUri);
    parameters:
    - id: signatureUri
      type: System.Uri
      description: "[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]的<xref href=&quot;System.IO.Packaging.PackageDigitalSignature&quot;></xref>移除。"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})
  id: Sign(System.Collections.Generic.IEnumerable{System.Uri})
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: Sign(IEnumerable<Uri>)
  nameWithType: PackageDigitalSignatureManager.Sign(IEnumerable<Uri>)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Sign(IEnumerable<Uri>)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "提示使用者提供 X.509 憑證，然後用來數位簽署封裝組件的指定的清單。"
  remarks: "若要使憑證選取對話方塊強制回應特定的視窗，設定<xref:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow%2A>屬性再呼叫登。</xref:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow%2A>       如果沒有任何預設憑證存放區中，符號將不會提示憑證。"
  example:
  - "The following example shows how to digitally sign a list of package parts.  For the complete sample, see the [Creating a Package with a Digital Signature Sample](http://go.microsoft.com/fwlink/?LinkID=159966).  \n  \n [!code-vb[PackageDigitalSignature#PackageDigSigSign](~/add/codesnippet/visualbasic/packagedigitalsignature/packagedigitalsignature.vb#packagedigsigsign)]\n [!code-cs[PackageDigitalSignature#PackageDigSigSign](~/add/codesnippet/csharp/PackageDigitalSignature/PackageDigitalSignature.cs#packagedigsigsign)]"
  syntax:
    content: public System.IO.Packaging.PackageDigitalSignature Sign (System.Collections.Generic.IEnumerable<Uri> parts);
    parameters:
    - id: parts
      type: System.Collections.Generic.IEnumerable{System.Uri}
      description: "清單[!INCLUDE[TLA#tla_uri#plural](~/add/includes/tlasharptla-urisharpplural-md.md)]如<xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref>来簽署項目。"
    return:
      type: System.IO.Packaging.PackageDigitalSignature
      description: "用來登入的清單的數位簽章<code> parts </code>。"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.Sign*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate)
  id: Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: Sign(IEnumerable<Uri>,X509Certificate)
  nameWithType: PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "簽署封裝組件，以指定的 X.509 憑證的清單。"
  remarks: ''
  example:
  - "The following example shows how to digitally sign a list of parts within a <xref:System.IO.Packaging.Package>.  For the complete example, see the [Creating a Package with a Digital Signature Sample](http://go.microsoft.com/fwlink/?LinkID=159966).  \n  \n [!code-vb[PackageDigitalSignature#PackageDigSigSign](~/add/codesnippet/visualbasic/packagedigitalsignature/packagedigitalsignature.vb#packagedigsigsign)]\n [!code-cs[PackageDigitalSignature#PackageDigSigSign](~/add/codesnippet/csharp/PackageDigitalSignature/PackageDigitalSignature.cs#packagedigsigsign)]"
  syntax:
    content: public System.IO.Packaging.PackageDigitalSignature Sign (System.Collections.Generic.IEnumerable<Uri> parts, System.Security.Cryptography.X509Certificates.X509Certificate certificate);
    parameters:
    - id: parts
      type: System.Collections.Generic.IEnumerable{System.Uri}
      description: "清單[!INCLUDE[TLA#tla_uri#plural](~/add/includes/tlasharptla-urisharpplural-md.md)]如<xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref>来簽署項目。"
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "要用來數位簽署每個指定的 X.509 憑證`parts`。"
    return:
      type: System.IO.Packaging.PackageDigitalSignature
      description: "用來簽署指定的清單的數位簽章<code> parts </code>; 或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果找不到憑證或使用者已按下 [取消] 憑證選取對話方塊中。"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.Sign*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector})
  id: Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector})
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>)
  nameWithType: PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "簽署封裝組件和封裝關聯性，以指定的 X.509 憑證的清單。"
  remarks: "之間`parts`和`relationshipSelectors`但必須至少一個項目，來簽署。"
  example:
  - "The following example shows how to digitally sign a list of package parts.  For the complete sample, see the [Creating a Package with a Digital Signature Sample](http://go.microsoft.com/fwlink/?LinkID=159966).  \n  \n [!code-vb[PackageDigitalSignature#PackageDigSigSign](~/add/codesnippet/visualbasic/packagedigitalsignature/packagedigitalsignature.vb#packagedigsigsign)]\n [!code-cs[PackageDigitalSignature#PackageDigSigSign](~/add/codesnippet/csharp/PackageDigitalSignature/PackageDigitalSignature.cs#packagedigsigsign)]"
  syntax:
    content: public System.IO.Packaging.PackageDigitalSignature Sign (System.Collections.Generic.IEnumerable<Uri> parts, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Collections.Generic.IEnumerable<System.IO.Packaging.PackageRelationshipSelector> relationshipSelectors);
    parameters:
    - id: parts
      type: System.Collections.Generic.IEnumerable{System.Uri}
      description: "清單[!INCLUDE[TLA#tla_uri#plural](~/add/includes/tlasharptla-urisharpplural-md.md)]如<xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref>来簽署的物件。"
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "要用來數位簽署每個指定的組件和關聯性的 X.509 憑證。"
    - id: relationshipSelectors
      type: System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector}
      description: "清單<xref href=&quot;System.IO.Packaging.PackageRelationship&quot;></xref>来簽署的物件。"
    return:
      type: System.IO.Packaging.PackageDigitalSignature
      description: "用於簽章中指定之項目的數位簽章<code> parts </code>和<code> relationshipSelectors </code>列出。"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.Sign*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "既不<code> parts </code>也<code> relationshipSelectors </code>指定要簽署的任何物件。"
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String)
  id: Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String)
  nameWithType: PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "簽署封裝組件和封裝關聯性，以指定的 X.509 憑證的清單和[!INCLUDE[TLA#tla_id](~/add/includes/tlasharptla-id-md.md)]。"
  remarks: "`parts`清單可以是空白或`null`如果`relationshipSelectors`包含至少一個項目。       `relationshipSelectors`清單可以是空白或`null`如果`parts`包含至少一個項目。       之間`parts`清單和`relationshipSelectors`必須至少一個項目，來簽署。"
  example:
  - "The following example shows how to digitally sign a list of package parts.  For the complete sample, see the [Creating a Package with a Digital Signature Sample](http://go.microsoft.com/fwlink/?LinkID=159966).  \n  \n [!code-vb[PackageDigitalSignature#PackageDigSigSign](~/add/codesnippet/visualbasic/packagedigitalsignature/packagedigitalsignature.vb#packagedigsigsign)]\n [!code-cs[PackageDigitalSignature#PackageDigSigSign](~/add/codesnippet/csharp/PackageDigitalSignature/PackageDigitalSignature.cs#packagedigsigsign)]"
  syntax:
    content: public System.IO.Packaging.PackageDigitalSignature Sign (System.Collections.Generic.IEnumerable<Uri> parts, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Collections.Generic.IEnumerable<System.IO.Packaging.PackageRelationshipSelector> relationshipSelectors, string signatureId);
    parameters:
    - id: parts
      type: System.Collections.Generic.IEnumerable{System.Uri}
      description: "清單[!INCLUDE[TLA#tla_uri#plural](~/add/includes/tlasharptla-urisharpplural-md.md)]如<xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref>来簽署的物件。"
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "要用來數位簽署每個指定的組件和關聯性的 X.509 憑證。"
    - id: relationshipSelectors
      type: System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector}
      description: "清單<xref href=&quot;System.IO.Packaging.PackageRelationship&quot;></xref>来簽署的物件。"
    - id: signatureId
      type: System.String
      description: "要與簽章產生關聯的識別字串。"
    return:
      type: System.IO.Packaging.PackageDigitalSignature
      description: "用於簽章中指定之項目的數位簽章<code> parts </code>和<code> relationshipSelectors </code>列出。"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.Sign*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "既不<code> parts </code>也<code> relationshipSelectors </code>指定要簽署的任何項目。"
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject},System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference})
  id: Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject},System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference})
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String,IEnumerable<DataObject>,IEnumerable<Reference>)
  nameWithType: PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String,IEnumerable<DataObject>,IEnumerable<Reference>)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String,IEnumerable<DataObject>,IEnumerable<Reference>)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "簽署封裝組件、 封裝關聯性或具有指定的 X.509 憑證和簽章的自訂物件的清單[!INCLUDE[TLA#tla_id](~/add/includes/tlasharptla-id-md.md)]。"
  remarks: "必須至少一個項目，來登入`parts`， `relationshipSelectors`， `signatureObjects`，或`objectReferences`。      > [!NOTE] > 條款`Object`， `Manifest`， `Reference`， `SignatureProperties`，和`Transform`兩個註解下列項目類型和 W3C XML 簽章語法和處理規格所定義的標記是指，請參閱[http://www.w3.org/TR/xmldsig-core/](http://www.w3.org/TR/xmldsig-core/)。       這個和其他<xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign%2A>方法多載會使用目前<xref:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping%2A>字典，其中定義`Transform`套用根據 封裝組件<xref:System.IO.Packaging.PackagePart.ContentType%2A>.</xref:System.IO.Packaging.PackagePart.ContentType%2A> </xref:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping%2A> </xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign%2A>  Microsoft 開放封裝慣例 (OPC) 規格目前允許只有兩個有效`Transform`演算法︰ C14 和 C14N。  W3C XML 簽章語法和處理標準不允許空白`Manifest`標記。  開放式封裝慣例規格也需要<xref:System.IO.Packaging.Package>-特定`Object`標記同時包含`Manifest`和`SignatureProperties`標記。</xref:System.IO.Packaging.Package>  每個`Manifest`標記此外也包含至少一個`Reference`標記。  這些標記可讓您要求每個簽章簽署至少一個<xref:System.IO.Packaging.PackagePart>（非空白的組件已標記） 或<xref:System.IO.Packaging.PackageRelationship>(非空白`relationshipSelectors`) 即使只需簽章簽署`signatureObjects`或`objectReferences`。</xref:System.IO.Packaging.PackageRelationship> </xref:System.IO.Packaging.PackagePart>       這個符號的方法就會忽略<xref:System.Security.Cryptography.Xml.Reference.DigestMethod%2A>每個相關聯的屬性<xref:System.Security.Cryptography.Xml.Reference>中定義`objectReferences`。</xref:System.Security.Cryptography.Xml.Reference> </xref:System.Security.Cryptography.Xml.Reference.DigestMethod%2A>       這個符號多載提供支援的產生[!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)]需要自訂的簽章`Object`標記。  提供任何`Object`標記來簽署，相對應`Reference`標記必須與提供[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]指定`Object`本機片段語法中的標記。  例如如果`Object`標記有識別碼為 「 myObject 」，在 URI`Reference`標記會是&quot;#myObject&quot;。  針對不帶正負號的物件，不`Reference`需要。"
  syntax:
    content: public System.IO.Packaging.PackageDigitalSignature Sign (System.Collections.Generic.IEnumerable<Uri> parts, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Collections.Generic.IEnumerable<System.IO.Packaging.PackageRelationshipSelector> relationshipSelectors, string signatureId, System.Collections.Generic.IEnumerable<System.Security.Cryptography.Xml.DataObject> signatureObjects, System.Collections.Generic.IEnumerable<System.Security.Cryptography.Xml.Reference> objectReferences);
    parameters:
    - id: parts
      type: System.Collections.Generic.IEnumerable{System.Uri}
      description: "清單[!INCLUDE[TLA#tla_uri#plural](~/add/includes/tlasharptla-urisharpplural-md.md)]如<xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref>来簽署的物件。"
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "要用來數位簽署每個指定的組件和關聯性的 X.509 憑證。"
    - id: relationshipSelectors
      type: System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector}
      description: "清單<xref href=&quot;System.IO.Packaging.PackageRelationship&quot;></xref>来簽署的物件。"
    - id: signatureId
      type: System.String
      description: "要與簽章產生關聯的識別字串。"
    - id: signatureObjects
      type: System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject}
      description: "要簽署的自訂資料物件的清單。"
    - id: objectReferences
      type: System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference}
      description: "要簽署的自訂物件的參考清單。"
    return:
      type: System.IO.Packaging.PackageDigitalSignature
      description: "用於簽章中指定之項目的數位簽章<code> parts </code>和<code> relationshipSelectors </code>列出。"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.Sign*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Neither <code>parts</code>, <code>relationshipSelectors</code>, <code>signatureObjects</code>, nor <code>objectReferences</code> specify any elements to sign."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A <> </> *> 的組件正在帶正負號的參考空白、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，或未定義<> *>。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "<code>signatureId</code>不是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>並不是有效[!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)]結構描述識別碼 （例如，開頭為前置數字）。"
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin
  id: SignatureOrigin
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: SignatureOrigin
  nameWithType: PackageDigitalSignatureManager.SignatureOrigin
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]簽章來源組件。"
  remarks: "SignatureOrigin[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]可能會因套件因為正式未定義的名稱。 雖然這項實作通常會使用相同的預設值，這個屬性所傳回的值會反映任何來源已存在於目前<xref:System.IO.Packaging.Package>.</xref:System.IO.Packaging.Package>"
  syntax:
    content: public Uri SignatureOrigin { get; }
    return:
      type: System.Uri
      description: "[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]簽章來源組件。"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType
  id: SignatureOriginRelationshipType
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: SignatureOriginRelationshipType
  nameWithType: PackageDigitalSignatureManager.SignatureOriginRelationshipType
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得預設簽章來源關係類型。"
  syntax:
    content: public static string SignatureOriginRelationshipType { get; }
    return:
      type: System.String
      description: "預設簽章來源關係類型。"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Signatures
  id: Signatures
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: Signatures
  nameWithType: PackageDigitalSignatureManager.Signatures
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Signatures
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得封裝中包含的所有簽章的集合。"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.IO.Packaging.PackageDigitalSignature> Signatures { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Packaging.PackageDigitalSignature}
      description: "所有的集合<xref href=&quot;System.IO.Packaging.PackageDigitalSignature&quot;></xref>物件。"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.Signatures*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat
  id: TimeFormat
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: TimeFormat
  nameWithType: PackageDigitalSignatureManager.TimeFormat
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得或設定用來建立簽章<xref:System.IO.Packaging.PackageDigitalSignature.SigningTime*>.</xref:System.IO.Packaging.PackageDigitalSignature.SigningTime*>的日期/時間格式"
  remarks: "TimeFormat 的預設值是&quot;YYYY-MM-DDThh:mm:ss.sTZD&quot;。       日期/時間格式會根據在 「 W3C 日期和時間格式 」 規格的語法[http://www.w3.org/TR/Note-datetime.html](http://www.w3.org/TR/Note-datetime.html)。 如下所示的元件必須存在，並使用的語法和所定義的標點符號。      |TimeFormat |描述 |範例 |  |----------------|-----------------|-------------|  |YYYY |年份 | 2005年 |  |YYYY MM |年份和月份 | 2005年-07 |  |YYYY MM DD |完成日期 | 2005年-07-28 |  |YYYY-MM-DDThh:mmTZD |完成日期加上小時和分鐘 | 2005年-07-28T19:20-01:00 |  |YYYY-MM-DDThh:mm:ssTZD |完成日期加上時、 分、 秒 | 2005年-07-28T19:20:45-01:00 |  |YYYY-MM-DDThh:mm:ss.sTZD|完成日期加上小時、 分鐘和含有十進位小數的秒數 | 2005年-07-28T19:20:45.75-01:00 |      其中: | | |  |-|-|  |YYYY | 四位數年份 (例如 2005) |  |MM | 兩位數月份 (01 = 年 1 月) |  |DD | 月份 (01 到 31) 的兩位數天數 |  |Thh | 兩位數小時 (從 00 到 23、 24 小時制的時間) |  | 公釐 | 兩位數的分鐘 (00 到 59) |  | ss | 兩位數的秒鐘 (00 到 59) |  | s | 一或多個代表第二個小數點後的幾位的數字 |  |TZD | 時區指示項 (Z 或 + hh: mm 或-hh: mm) |"
  syntax:
    content: public string TimeFormat { get; set; }
    return:
      type: System.String
      description: "用來建立簽章<xref:System.IO.Packaging.PackageDigitalSignature.SigningTime*>.</xref:System.IO.Packaging.PackageDigitalSignature.SigningTime*>的日期/時間格式"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping
  id: TransformMapping
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: TransformMapping
  nameWithType: PackageDigitalSignatureManager.TransformMapping
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "取得字典，其中包含每個定義<> *> 及其相關聯[!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)] <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref>。<> </>*> 識別項。"
  remarks: "簽署作業期間每個內容類型的相關聯的轉換演算法會先套用<xref:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm%2A>執行。</xref:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm%2A>       預設內容與轉換對應包括: |內容 |ContentType |轉換演算法識別項 |  |-------------|-----------------|------------------------------------|  |關聯性 |&quot;application/vnd.openxmlformats-package.relationships+xml&quot;|<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl>|  |數位簽章 |&quot;application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml&quot;|<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl>|</xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl></xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl>"
  syntax:
    content: public System.Collections.Generic.Dictionary<string,string> TransformMapping { get; }
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: "字典，其中包含每個定義<> *> 及其相關聯[!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)] <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref>。<> </>*> 識別項。"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)
  id: VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: VerifyCertificate(X509Certificate)
  nameWithType: PackageDigitalSignatureManager.VerifyCertificate(X509Certificate)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(X509Certificate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "驗證指定的 X.509 憑證。"
  syntax:
    content: public static System.Security.Cryptography.X509Certificates.X509ChainStatusFlags VerifyCertificate (System.Security.Cryptography.X509Certificates.X509Certificate certificate);
    parameters:
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "要驗證的 X.509 憑證。"
    return:
      type: System.Security.Cryptography.X509Certificates.X509ChainStatusFlags
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509ChainStatusFlags&quot;></xref>（值 0） 如果已成功; 驗證憑證否則，旗標的位元列舉的錯誤。"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)
  id: VerifySignatures(System.Boolean)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  langs:
  - csharp
  name: VerifySignatures(Boolean)
  nameWithType: PackageDigitalSignatureManager.VerifySignatures(Boolean)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(Boolean)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "確認封裝內所有已簽署的組件上的簽章。"
  remarks: "這個方法會驗證只數位簽章。它不會驗證相關的 X.509 憑證。  <xref:System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate%2A>方法可用來驗證 X.509 憑證。</xref:System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate%2A>"
  example:
  - "The following example shows how to use this method to validate all signed parts within a package.  For the complete sample, see [Creating a Package with a Digital Signature Sample](http://go.microsoft.com/fwlink/?LinkID=159966).  \n  \n [!code-vb[PackageDigitalSignature#PackageDigSigValidate](~/add/codesnippet/visualbasic/packagedigitalsignature/packagedigitalsignature.vb#packagedigsigvalidate)]\n [!code-cs[PackageDigitalSignature#PackageDigSigValidate](~/add/codesnippet/csharp/PackageDigitalSignature/PackageDigitalSignature.cs#packagedigsigvalidate)]"
  syntax:
    content: public System.IO.Packaging.VerifyResult VerifySignatures (bool exitOnFailure);
    parameters:
    - id: exitOnFailure
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>表示在第一次失敗; 結束否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>表示繼續並檢查所有簽章。"
    return:
      type: System.IO.Packaging.VerifyResult
      description: "<xref href=&quot;System.IO.Packaging.VerifyResult&quot;></xref>（值 0） 如果已成功; 驗證所有簽章否則，請識別錯誤的列舉。"
  overload: System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.IO.Packaging.PackageDigitalSignatureManager.#ctor(System.IO.Packaging.Package)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: PackageDigitalSignatureManager(Package)
  nameWithType: PackageDigitalSignatureManager.PackageDigitalSignatureManager(Package)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.PackageDigitalSignatureManager(Package)
- uid: System.IO.Packaging.Package
  parent: System.IO.Packaging
  isExternal: false
  name: Package
  nameWithType: Package
  fullName: System.IO.Packaging.Package
- uid: System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: CertificateOption
  nameWithType: PackageDigitalSignatureManager.CertificateOption
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption
- uid: System.IO.Packaging.CertificateEmbeddingOption
  parent: System.IO.Packaging
  isExternal: false
  name: CertificateEmbeddingOption
  nameWithType: CertificateEmbeddingOption
  fullName: System.IO.Packaging.CertificateEmbeddingOption
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Countersign
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Countersign()
  nameWithType: PackageDigitalSignatureManager.Countersign()
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Countersign()
- uid: System.IO.Packaging.PackageDigitalSignature
  parent: System.IO.Packaging
  isExternal: false
  name: PackageDigitalSignature
  nameWithType: PackageDigitalSignature
  fullName: System.IO.Packaging.PackageDigitalSignature
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Countersign(X509Certificate)
  nameWithType: PackageDigitalSignatureManager.Countersign(X509Certificate)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Countersign(X509Certificate)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate
  nameWithType: X509Certificate
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.Uri})
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Countersign(X509Certificate,IEnumerable<Uri>)
  nameWithType: PackageDigitalSignatureManager.Countersign(X509Certificate,IEnumerable<Uri>)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Countersign(X509Certificate,IEnumerable<Uri>)
- uid: System.Collections.Generic.IEnumerable{System.Uri}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Uri>
  nameWithType: IEnumerable<Uri>
  fullName: System.Collections.Generic.IEnumerable<System.Uri>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Uri>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: DefaultHashAlgorithm
  nameWithType: PackageDigitalSignatureManager.DefaultHashAlgorithm
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(System.Uri)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: GetSignature(Uri)
  nameWithType: PackageDigitalSignatureManager.GetSignature(Uri)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(Uri)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: HashAlgorithm
  nameWithType: PackageDigitalSignatureManager.HashAlgorithm
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm
- uid: System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: InvalidSignatureEvent
  nameWithType: PackageDigitalSignatureManager.InvalidSignatureEvent
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent
- uid: System.IO.Packaging.InvalidSignatureEventHandler
  parent: System.IO.Packaging
  isExternal: false
  name: InvalidSignatureEventHandler
  nameWithType: InvalidSignatureEventHandler
  fullName: System.IO.Packaging.InvalidSignatureEventHandler
- uid: System.IO.Packaging.PackageDigitalSignatureManager.IsSigned
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: IsSigned
  nameWithType: PackageDigitalSignatureManager.IsSigned
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.IsSigned
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: ParentWindow
  nameWithType: PackageDigitalSignatureManager.ParentWindow
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: RemoveAllSignatures()
  nameWithType: PackageDigitalSignatureManager.RemoveAllSignatures()
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures()
- uid: System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(System.Uri)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: RemoveSignature(Uri)
  nameWithType: PackageDigitalSignatureManager.RemoveSignature(Uri)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(Uri)
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Sign(IEnumerable<Uri>)
  nameWithType: PackageDigitalSignatureManager.Sign(IEnumerable<Uri>)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Sign(IEnumerable<Uri>)
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Sign(IEnumerable<Uri>,X509Certificate)
  nameWithType: PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate)
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector})
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>)
  nameWithType: PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>)
- uid: System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<PackageRelationshipSelector>
  nameWithType: IEnumerable<PackageRelationshipSelector>
  fullName: System.Collections.Generic.IEnumerable<System.IO.Packaging.PackageRelationshipSelector>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.IO.Packaging.PackageRelationshipSelector>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Packaging.PackageRelationshipSelector
    name: PackageRelationshipSelector
    nameWithType: PackageRelationshipSelector
    fullName: PackageRelationshipSelector
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String)
  nameWithType: PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String)
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject},System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference})
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String,IEnumerable<DataObject>,IEnumerable<Reference>)
  nameWithType: PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String,IEnumerable<DataObject>,IEnumerable<Reference>)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Sign(IEnumerable<Uri>,X509Certificate,IEnumerable<PackageRelationshipSelector>,String,IEnumerable<DataObject>,IEnumerable<Reference>)
- uid: System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<DataObject>
  nameWithType: IEnumerable<DataObject>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Cryptography.Xml.DataObject>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Cryptography.Xml.DataObject>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Cryptography.Xml.DataObject
    name: DataObject
    nameWithType: DataObject
    fullName: DataObject
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Reference>
  nameWithType: IEnumerable<Reference>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Cryptography.Xml.Reference>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Cryptography.Xml.Reference>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Cryptography.Xml.Reference
    name: Reference
    nameWithType: Reference
    fullName: Reference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: SignatureOrigin
  nameWithType: PackageDigitalSignatureManager.SignatureOrigin
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin
- uid: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: SignatureOriginRelationshipType
  nameWithType: PackageDigitalSignatureManager.SignatureOriginRelationshipType
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Signatures
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Signatures
  nameWithType: PackageDigitalSignatureManager.Signatures
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.Signatures
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Packaging.PackageDigitalSignature}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<PackageDigitalSignature>
  nameWithType: ReadOnlyCollection<PackageDigitalSignature>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IO.Packaging.PackageDigitalSignature>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.IO.Packaging.PackageDigitalSignature>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Packaging.PackageDigitalSignature
    name: PackageDigitalSignature
    nameWithType: PackageDigitalSignature
    fullName: PackageDigitalSignature
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: TimeFormat
  nameWithType: PackageDigitalSignatureManager.TimeFormat
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat
- uid: System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: TransformMapping
  nameWithType: PackageDigitalSignatureManager.TransformMapping
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: Dictionary<String,String>
  nameWithType: Dictionary<String,String>
  fullName: System.Collections.Generic.Dictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: VerifyCertificate(X509Certificate)
  nameWithType: PackageDigitalSignatureManager.VerifyCertificate(X509Certificate)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(X509Certificate)
- uid: System.Security.Cryptography.X509Certificates.X509ChainStatusFlags
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509ChainStatusFlags
  nameWithType: X509ChainStatusFlags
  fullName: System.Security.Cryptography.X509Certificates.X509ChainStatusFlags
- uid: System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: VerifySignatures(Boolean)
  nameWithType: PackageDigitalSignatureManager.VerifySignatures(Boolean)
  fullName: System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(Boolean)
- uid: System.IO.Packaging.VerifyResult
  parent: System.IO.Packaging
  isExternal: false
  name: VerifyResult
  nameWithType: VerifyResult
  fullName: System.IO.Packaging.VerifyResult
- uid: System.IO.Packaging.PackageDigitalSignatureManager.#ctor*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: PackageDigitalSignatureManager
  nameWithType: PackageDigitalSignatureManager.PackageDigitalSignatureManager
- uid: System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: CertificateOption
  nameWithType: PackageDigitalSignatureManager.CertificateOption
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Countersign*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Countersign
  nameWithType: PackageDigitalSignatureManager.Countersign
- uid: System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: DefaultHashAlgorithm
  nameWithType: PackageDigitalSignatureManager.DefaultHashAlgorithm
- uid: System.IO.Packaging.PackageDigitalSignatureManager.GetSignature*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: GetSignature
  nameWithType: PackageDigitalSignatureManager.GetSignature
- uid: System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: HashAlgorithm
  nameWithType: PackageDigitalSignatureManager.HashAlgorithm
- uid: System.IO.Packaging.PackageDigitalSignatureManager.IsSigned*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: IsSigned
  nameWithType: PackageDigitalSignatureManager.IsSigned
- uid: System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: ParentWindow
  nameWithType: PackageDigitalSignatureManager.ParentWindow
- uid: System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: RemoveAllSignatures
  nameWithType: PackageDigitalSignatureManager.RemoveAllSignatures
- uid: System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: RemoveSignature
  nameWithType: PackageDigitalSignatureManager.RemoveSignature
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Sign*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Sign
  nameWithType: PackageDigitalSignatureManager.Sign
- uid: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: SignatureOrigin
  nameWithType: PackageDigitalSignatureManager.SignatureOrigin
- uid: System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: SignatureOriginRelationshipType
  nameWithType: PackageDigitalSignatureManager.SignatureOriginRelationshipType
- uid: System.IO.Packaging.PackageDigitalSignatureManager.Signatures*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: Signatures
  nameWithType: PackageDigitalSignatureManager.Signatures
- uid: System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: TimeFormat
  nameWithType: PackageDigitalSignatureManager.TimeFormat
- uid: System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: TransformMapping
  nameWithType: PackageDigitalSignatureManager.TransformMapping
- uid: System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: VerifyCertificate
  nameWithType: PackageDigitalSignatureManager.VerifyCertificate
- uid: System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures*
  parent: System.IO.Packaging.PackageDigitalSignatureManager
  isExternal: false
  name: VerifySignatures
  nameWithType: PackageDigitalSignatureManager.VerifySignatures
