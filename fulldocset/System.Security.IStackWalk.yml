### YamlMime:ManagedReference
items:
- uid: System.Security.IStackWalk
  id: IStackWalk
  children:
  - System.Security.IStackWalk.Assert
  - System.Security.IStackWalk.Demand
  - System.Security.IStackWalk.Deny
  - System.Security.IStackWalk.PermitOnly
  langs:
  - csharp
  name: IStackWalk
  nameWithType: IStackWalk
  fullName: System.Security.IStackWalk
  type: Interface
  summary: "管理堆疊查核行程，判斷呼叫堆疊中的所有呼叫端是否具有存取受保護的資源的必要權限。"
  remarks: "部分信任程式碼一律會顯示安全性風險。 有時候可以代表沒有存取資源的權限的惡意程式碼執行動作操作。 如此一來，惡意程式碼可以達到比應該允許較高的安全性存取權。       通用語言執行平台可協助保護免於這些攻擊的 managed 程式碼所執行的所有呼叫堆疊查核行程。 堆疊查核行程要求所有呼叫堆疊中的程式碼必須都具有存取受保護的資源的權限。 因為嘗試攻擊的程式碼一定會某處呼叫堆疊中，將無法超過自己的安全性權限。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IStackWalk
  implements: []
  platform:
  - net462
- uid: System.Security.IStackWalk.Assert
  id: Assert
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Assert()
  nameWithType: IStackWalk.Assert()
  fullName: System.Security.IStackWalk.Assert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "即使堆疊中較高層的呼叫端未獲得存取資源的權限呼叫程式碼可以存取目前權限物件所識別之資源的判斷提示。"
  remarks: "呼叫判斷提示，就會停止在呼叫堆疊中較高的呼叫端的權限檢查。 因此，即使這些呼叫端沒有必要的權限，他們仍然可以存取資源。 判斷提示就會生效，只有當呼叫判斷提示的程式碼通過安全性檢查，它會判斷提示之權限。       判斷提示的呼叫是有效的直到呼叫程式碼會傳回其呼叫端或判斷提示的後續呼叫會呈現先前的判斷提示的效果不佳。 此外，<xref:System.Security.CodeAccessPermission.RevertAssert%2A>或<xref:System.Security.CodeAccessPermission.RevertAll%2A>移除暫止的判斷提示。</xref:System.Security.CodeAccessPermission.RevertAll%2A> </xref:System.Security.CodeAccessPermission.RevertAssert%2A>       判斷提示該權限的要求將會失敗，因為未授與權限會被忽略。 不過，如果在呼叫堆疊中較低的程式碼呼叫<xref:System.Security.IStackWalk.Demand%2A>該權限，<xref:System.Security.SecurityException>堆疊查核行程到達程式碼嘗試呼叫判斷提示時，會擲回。</xref:System.Security.SecurityException> </xref:System.Security.IStackWalk.Demand%2A> 這不會因為呼叫判斷提示的程式碼無法獲得的權限，即使它嘗試將它判斷提示。      > [!CAUTION] > 呼叫 Assert 移除所有的程式碼呼叫鏈結中，必須授存取指定的資源的權限的需求，因為它可以開啟安全性漏洞如果使用不正確或不正確。 因此，應該使用小心謹慎。"
  syntax:
    content: public void Assert ();
    parameters: []
  overload: System.Security.IStackWalk.Assert*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫程式碼並沒有<xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.IStackWalk.Demand
  id: Demand
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Demand()
  nameWithType: IStackWalk.Demand()
  fullName: System.Security.IStackWalk.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "決定在執行階段呼叫堆疊中的所有呼叫端獲得目前權限物件所指定的權限。"
  remarks: "這個方法通常可由安全程式庫來確定呼叫端擁有存取資源的權限。 例如，檔案中的類別安全類別庫呼叫的必要需求<xref:System.Security.Permissions.FileIOPermission>之前執行檔案作業的呼叫端要求。</xref:System.Security.Permissions.FileIOPermission>       不會檢查呼叫這個方法的程式碼的權限;檢查該程式碼的立即呼叫端從開始，然後進行堆疊。 要求執行成功，只有當沒有<xref:System.Security.SecurityException>，就會引發。</xref:System.Security.SecurityException>"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.IStackWalk.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫堆疊中較高層的呼叫端沒有目前的權限物件所指定的權限。       -或-呼叫堆疊中的呼叫端已呼叫<xref:System.Security.IStackWalk.Deny*>上目前的權限物件。</xref:System.Security.IStackWalk.Deny*>"
  platform:
  - net462
- uid: System.Security.IStackWalk.Deny
  id: Deny
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Deny()
  nameWithType: IStackWalk.Deny()
  fullName: System.Security.IStackWalk.Deny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "會導致每個<xref:System.Security.IStackWalk.Demand*>目前物件通過呼叫程式碼失敗。</xref:System.Security.IStackWalk.Demand*>"
  remarks: "這個方法會防止呼叫堆疊中較高層的呼叫端程式碼呼叫此方法，透過存取受保護的資源，即使這些呼叫端必須被授與存取權限。 呼叫堆疊通常會表示向下成長，使方法呼叫堆疊中較高層呼叫的方法較低的呼叫堆疊中。       拒絕可以限制程式設計人員的責任，或協助防止意外安全性漏洞，因為它可協助防止拒絕會從用來存取拒絕的權限所保護的資源呼叫的方法。 如果方法呼叫 Deny 權限，而且如果<xref:System.Security.IStackWalk.Demand%2A>到達 Deny 時，安全性檢查的呼叫堆疊中較低的呼叫端所叫用該權限時，將會失敗。</xref:System.Security.IStackWalk.Demand%2A>       拒絕權限未授與該權限的要求將會失敗，因為已忽略。"
  syntax:
    content: public void Deny ();
    parameters: []
  overload: System.Security.IStackWalk.Deny*
  exceptions: []
  platform:
  - net462
- uid: System.Security.IStackWalk.PermitOnly
  id: PermitOnly
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: PermitOnly()
  nameWithType: IStackWalk.PermitOnly()
  fullName: System.Security.IStackWalk.PermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "會導致每個<xref:System.Security.IStackWalk.Demand*>通過呼叫程式碼失敗，即使在呼叫堆疊中較高的程式碼授與權限來存取其他資源目前以外的所有物件。</xref:System.Security.IStackWalk.Demand*>"
  remarks: "PermitOnly 是類似於<xref:System.Security.IStackWalk.Deny%2A>，在於兩者會導致堆疊查核行程符合則成功時失敗。</xref:System.Security.IStackWalk.Deny%2A> 其差異在於，<xref:System.Security.IStackWalk.Deny%2A>指定權限，會導致堆疊查核行程失敗，但 PermitOnly 指定不會導致堆疊查核行程失敗的唯一權限。</xref:System.Security.IStackWalk.Deny%2A> 呼叫此方法，以確保您的程式碼，可用來存取指定的資源。       PermitOnly 會忽略該權限的要求將會失敗，因為未授與的權限。 不過，如果程式碼呼叫較低堆疊稍後呼叫<xref:System.Security.IStackWalk.Demand%2A>該權限，<xref:System.Security.SecurityException>堆疊查核行程到達程式碼嘗試呼叫 PermitOnly 時，會擲回。</xref:System.Security.SecurityException> </xref:System.Security.IStackWalk.Demand%2A> 這是因為呼叫 PermitOnly 的程式碼無法獲得的權限，即使它針對該權限來呼叫 PermitOnly。 呼叫堆疊通常會表示向下成長，使方法呼叫堆疊中較高層呼叫的方法較低的呼叫堆疊中。"
  syntax:
    content: public void PermitOnly ();
    parameters: []
  overload: System.Security.IStackWalk.PermitOnly*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Security.IStackWalk.Assert
  parent: System.Security.IStackWalk
  isExternal: false
  name: Assert()
  nameWithType: IStackWalk.Assert()
  fullName: System.Security.IStackWalk.Assert()
- uid: System.Security.IStackWalk.Demand
  parent: System.Security.IStackWalk
  isExternal: false
  name: Demand()
  nameWithType: IStackWalk.Demand()
  fullName: System.Security.IStackWalk.Demand()
- uid: System.Security.IStackWalk.Deny
  parent: System.Security.IStackWalk
  isExternal: false
  name: Deny()
  nameWithType: IStackWalk.Deny()
  fullName: System.Security.IStackWalk.Deny()
- uid: System.Security.IStackWalk.PermitOnly
  parent: System.Security.IStackWalk
  isExternal: false
  name: PermitOnly()
  nameWithType: IStackWalk.PermitOnly()
  fullName: System.Security.IStackWalk.PermitOnly()
- uid: System.Security.IStackWalk.Assert*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Assert
  nameWithType: IStackWalk.Assert
- uid: System.Security.IStackWalk.Demand*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Demand
  nameWithType: IStackWalk.Demand
- uid: System.Security.IStackWalk.Deny*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Deny
  nameWithType: IStackWalk.Deny
- uid: System.Security.IStackWalk.PermitOnly*
  parent: System.Security.IStackWalk
  isExternal: false
  name: PermitOnly
  nameWithType: IStackWalk.PermitOnly
