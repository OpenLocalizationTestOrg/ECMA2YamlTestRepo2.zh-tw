### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.SendMailErrorEventHandler
  id: SendMailErrorEventHandler
  langs:
  - csharp
  name: SendMailErrorEventHandler
  nameWithType: SendMailErrorEventHandler
  fullName: System.Web.UI.WebControls.SendMailErrorEventHandler
  type: Delegate
  summary: "代表處理方法<xref uid=&quot;langword_csharp_SendMailError&quot; name=&quot;SendMailError&quot; href=&quot;&quot;></xref>事件的控制項，例如<xref href=&quot;System.Web.UI.WebControls.ChangePassword&quot;></xref>控制項， <xref href=&quot;System.Web.UI.WebControls.CreateUserWizard&quot;> </xref>控制項，而<xref href=&quot;System.Web.UI.WebControls.PasswordRecovery&quot;></xref>控制項。"
  remarks: "當您建立 SendMailErrorEventHandler 委派時，您可以識別即將處理此事件的方法。 若要將事件與事件處理常式產生關聯，將委派的執行個體加入事件。 除非您移除委派，從事件，在事件發生時，會呼叫事件處理常式。 如需事件處理常式委派的詳細資訊，請參閱[中 ASP.NET Web Form 網頁的伺服器事件處理](~/add/includes/ajax-current-ext-md.md)。       處理`SendMailError`事件可讓您的 Web 應用程式繼續執行，即使當嘗試傳送電子郵件訊息時，就會發生例外狀況。 比方說，這非常有用，如果使用者目前正在處理透過多步驟的精靈時，會發生例外狀況。 最好是記錄錯誤、 顯示資訊的訊息給使用者，並允許使用者在完成精靈，而不是終止該應用程式。       如果您未建立事件處理常式<xref:System.Web.UI.WebControls.ChangePassword.SendMailError>事件，或如果您建立事件處理常式，但保留<xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A>屬性設定為`false`Web 應用程式會停止執行時傳送電子郵件，發生錯誤時，ASP.NET 會顯示錯誤訊息。</xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> </xref:System.Web.UI.WebControls.ChangePassword.SendMailError>       <xref:System.Web.UI.WebControls.ChangePassword.OnSendMailError%2A>方法也允許衍生的類別處理事件，而不是 SendMailErrorEventHandler。</xref:System.Web.UI.WebControls.ChangePassword.OnSendMailError%2A> 這是處理衍生自<xref:System.Web.UI.WebControls.ChangePassword>或<xref:System.Web.UI.WebControls.CreateUserWizard>.</xref:System.Web.UI.WebControls.CreateUserWizard></xref:System.Web.UI.WebControls.ChangePassword>類別中的事件的慣用的技巧       如需處理事件的詳細資訊，請參閱[中 ASP.NET Web Form 網頁的伺服器事件處理](../Topic/Server%20Event%20Handling%20in%20ASP.NET%20Web%20Forms%20Pages.md)。"
  example:
  - "The following code example demonstrates an ASP.NET page that uses a <xref:System.Web.UI.WebControls.ChangePassword> Web control, and includes an event handler for the <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> event named `SendMailError`. The code example assumes that the ASP.NET Web site has been configured to use ASP.NET membership and Forms authentication, and that a user has been created whose name and password are known to you. For more information, see [How to: Implement Simple Forms Authentication](~/add/includes/ajax-current-ext-md.md).  \n  \n If the password change succeeds, the code attempts to use SMTP to send an e-mail message to the user to confirm the change. This is done in the `SendingMail` event handler. For information about how to configure an SMTP server, see [NIB: How to: Install and Configure SMTP Virtual Servers in IIS 6.0](http://msdn.microsoft.com/en-us/ed204b58-24af-47d0-9687-60e5df5f17f8). For the purposes of this example, it is not necessary to configure an SMTP server; the example is constructed to test for a failure to send an e-mail message.  \n  \n If a mail server is not configured correctly or some other error occurs and the e-mail message cannot be sent, the `SendMailError` function is called. A message is displayed to the user. In addition, an event is logged to the Windows Application event log with the assumption that an event source named MySamplesSite already exists. See the code example below to create the specified event source. For more information about creating an event source, see [Server Event Handling in ASP.NET Web Forms Pages](../Topic/Server%20Event%20Handling%20in%20ASP.NET%20Web%20Forms%20Pages.md). The <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> property of the <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> object is set to `true` to indicate that the error has been handled.  \n  \n [!code-cs[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_389_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_389_1.aspx)]  \n  \n Use the following code example if you need to programmatically add the event source named MySamplesSite to your Application log. This event source must exist in order for the first code example to work correctly. The following code example requires Administrator privileges.  \n  \n [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_389_2.vb)]\n [!code-cs[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_389_2.cs)]"
  syntax:
    content: public delegate void SendMailErrorEventHandler(object sender, SendMailErrorEventArgs e);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
