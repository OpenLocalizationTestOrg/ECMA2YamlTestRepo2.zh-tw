### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.CngAlgorithm
  id: CngAlgorithm
  children:
  - System.Security.Cryptography.CngAlgorithm.#ctor(System.String)
  - System.Security.Cryptography.CngAlgorithm.Algorithm
  - System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256
  - System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384
  - System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521
  - System.Security.Cryptography.CngAlgorithm.ECDsaP256
  - System.Security.Cryptography.CngAlgorithm.ECDsaP384
  - System.Security.Cryptography.CngAlgorithm.ECDsaP521
  - System.Security.Cryptography.CngAlgorithm.Equals(System.Object)
  - System.Security.Cryptography.CngAlgorithm.Equals(System.Security.Cryptography.CngAlgorithm)
  - System.Security.Cryptography.CngAlgorithm.GetHashCode
  - System.Security.Cryptography.CngAlgorithm.MD5
  - System.Security.Cryptography.CngAlgorithm.op_Equality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)
  - System.Security.Cryptography.CngAlgorithm.op_Inequality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)
  - System.Security.Cryptography.CngAlgorithm.Rsa
  - System.Security.Cryptography.CngAlgorithm.Sha1
  - System.Security.Cryptography.CngAlgorithm.Sha256
  - System.Security.Cryptography.CngAlgorithm.Sha384
  - System.Security.Cryptography.CngAlgorithm.Sha512
  - System.Security.Cryptography.CngAlgorithm.ToString
  langs:
  - csharp
  name: CngAlgorithm
  nameWithType: CngAlgorithm
  fullName: System.Security.Cryptography.CngAlgorithm
  type: Class
  summary: "封裝加密演算法的名稱。"
  remarks: "CngAlgorithm 類別是一個公用程式類別。 它包含靜態屬性、 比較方法，以及由內部維護演算法名稱的字串。       靜態屬性傳回 CngAlgorithm 物件。 每個物件的內部字串會初始化為演算法名稱對應至靜態屬性的名稱。       您也可以使用這個類別來建立未涵蓋的靜態屬性的演算法類型的物件。       數個 Cryptography Next Generation (CNG) 類別 (例如<xref:System.Security.Cryptography.CngKey>) 接受 CngAlgorithm 物件透過`algorithm`參數。</xref:System.Security.Cryptography.CngKey> 當類別收到 CngAlgorithm 物件時，它會藉由呼叫物件的擷取內嵌的演算法名稱<xref:System.Security.Cryptography.CngAlgorithm.Algorithm%2A>屬性。</xref:System.Security.Cryptography.CngAlgorithm.Algorithm%2A>       因此，CngAlgorithm 可做為已知的演算法的列舉型別。 它可讓您使用強型別的值，而非字串中指定已知的演算法。"
  syntax:
    content: 'public sealed class CngAlgorithm : IEquatable<System.Security.Cryptography.CngAlgorithm>'
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Security.Cryptography.CngAlgorithm>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngAlgorithm.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  name: CngAlgorithm(String)
  nameWithType: CngAlgorithm.CngAlgorithm(String)
  fullName: System.Security.Cryptography.CngAlgorithm.CngAlgorithm(String)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>類別。"
  remarks: "執行個體<xref:System.Security.Cryptography.CngAlgorithm>類別在內部維護由所指定的演算法名稱`algorithm`參數。</xref:System.Security.Cryptography.CngAlgorithm>       這個建構函式的主要目的是類別的提供一種方法建立<xref:System.Security.Cryptography.CngAlgorithm>物件的演算法類型的未表示的靜態屬性<xref:System.Security.Cryptography.CngAlgorithm>類別。</xref:System.Security.Cryptography.CngAlgorithm> </xref:System.Security.Cryptography.CngAlgorithm> 這個功能可讓未來[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]版本、 service pack 及協力廠商開發人員將新的演算法，可以存取目前可用的演算法一樣。"
  syntax:
    content: public CngAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "要初始化之演算法的名稱。"
  overload: System.Security.Cryptography.CngAlgorithm.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>algorithm</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> algorithm </code>參數長度為 0 （零）。"
  platform:
  - net462
- uid: System.Security.Cryptography.CngAlgorithm.Algorithm
  id: Algorithm
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  name: Algorithm
  nameWithType: CngAlgorithm.Algorithm
  fullName: System.Security.Cryptography.CngAlgorithm.Algorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得演算法名稱目前<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>指定物件。"
  syntax:
    content: public string Algorithm { get; }
    return:
      type: System.String
      description: "內嵌的演算法名稱。"
  overload: System.Security.Cryptography.CngAlgorithm.Algorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256
  id: ECDiffieHellmanP256
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  name: ECDiffieHellmanP256
  nameWithType: CngAlgorithm.ECDiffieHellmanP256
  fullName: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>指定使用 P-256 曲線的 Elliptic Curve Diffie-hellman (ECDH) 金鑰交換演算法的物件。"
  syntax:
    content: public static System.Security.Cryptography.CngAlgorithm ECDiffieHellmanP256 { get; }
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "指定使用 P-256 曲線的 ECDH 演算法的物件。"
  overload: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384
  id: ECDiffieHellmanP384
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  name: ECDiffieHellmanP384
  nameWithType: CngAlgorithm.ECDiffieHellmanP384
  fullName: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>指定使用 P-384 曲線的 Elliptic Curve Diffie-hellman (ECDH) 金鑰交換演算法的物件。"
  syntax:
    content: public static System.Security.Cryptography.CngAlgorithm ECDiffieHellmanP384 { get; }
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "指定使用 P-384 曲線的 ECDH 演算法的物件。"
  overload: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521
  id: ECDiffieHellmanP521
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  name: ECDiffieHellmanP521
  nameWithType: CngAlgorithm.ECDiffieHellmanP521
  fullName: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>指定使用 P-521 曲線的 Elliptic Curve Diffie-hellman (ECDH) 金鑰交換演算法的物件。"
  syntax:
    content: public static System.Security.Cryptography.CngAlgorithm ECDiffieHellmanP521 { get; }
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "指定使用 P-521 曲線的 ECDH 演算法的物件。"
  overload: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngAlgorithm.ECDsaP256
  id: ECDsaP256
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  name: ECDsaP256
  nameWithType: CngAlgorithm.ECDsaP256
  fullName: System.Security.Cryptography.CngAlgorithm.ECDsaP256
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>指定橢圓曲線數位簽章演算法 (ECDSA) 使用 P-256 曲線的物件。"
  syntax:
    content: public static System.Security.Cryptography.CngAlgorithm ECDsaP256 { get; }
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "指定使用 P-256 曲線的 ECDSA 演算法的物件。"
  overload: System.Security.Cryptography.CngAlgorithm.ECDsaP256*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngAlgorithm.ECDsaP384
  id: ECDsaP384
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  name: ECDsaP384
  nameWithType: CngAlgorithm.ECDsaP384
  fullName: System.Security.Cryptography.CngAlgorithm.ECDsaP384
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>指定橢圓曲線數位簽章演算法 (ECDSA) 使用 P-384 曲線的物件。"
  syntax:
    content: public static System.Security.Cryptography.CngAlgorithm ECDsaP384 { get; }
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "指定使用 P-384 曲線的 ECDSA 演算法的物件。"
  overload: System.Security.Cryptography.CngAlgorithm.ECDsaP384*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngAlgorithm.ECDsaP521
  id: ECDsaP521
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  name: ECDsaP521
  nameWithType: CngAlgorithm.ECDsaP521
  fullName: System.Security.Cryptography.CngAlgorithm.ECDsaP521
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得新<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>指定橢圓曲線數位簽章演算法 (ECDSA) 使用 P-521 曲線的物件。"
  syntax:
    content: public static System.Security.Cryptography.CngAlgorithm ECDsaP521 { get; }
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "指定使用 P-521 曲線的 ECDSA 演算法的物件。"
  overload: System.Security.Cryptography.CngAlgorithm.ECDsaP521*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngAlgorithm.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: CngAlgorithm.Equals(Object)
  fullName: System.Security.Cryptography.CngAlgorithm.Equals(Object)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "比較指定的物件與目前<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>物件。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "要比較目前物件<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>物件。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> obj </code>參數是<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>指定相同的演算法為目前的物件; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.CngAlgorithm.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngAlgorithm.Equals(System.Security.Cryptography.CngAlgorithm)
  id: Equals(System.Security.Cryptography.CngAlgorithm)
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  name: Equals(CngAlgorithm)
  nameWithType: CngAlgorithm.Equals(CngAlgorithm)
  fullName: System.Security.Cryptography.CngAlgorithm.Equals(CngAlgorithm)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "比較指定<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>物件與目前<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>物件。"
  syntax:
    content: public bool Equals (System.Security.Cryptography.CngAlgorithm other);
    parameters:
    - id: other
      type: System.Security.Cryptography.CngAlgorithm
      description: "要比較目前物件<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>物件。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> other </code>參數指定相同的演算法為目前的物件; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.CngAlgorithm.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngAlgorithm.GetHashCode
  id: GetHashCode
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: CngAlgorithm.GetHashCode()
  fullName: System.Security.Cryptography.CngAlgorithm.GetHashCode()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "產生內嵌在目前的演算法名稱的雜湊值<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>物件。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "內嵌的演算法名稱的雜湊值。"
  overload: System.Security.Cryptography.CngAlgorithm.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngAlgorithm.MD5
  id: MD5
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  name: MD5
  nameWithType: CngAlgorithm.MD5
  fullName: System.Security.Cryptography.CngAlgorithm.MD5
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得新<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>指定 Message Digest 5 (MD5) 雜湊演算法的物件。"
  syntax:
    content: public static System.Security.Cryptography.CngAlgorithm MD5 { get; }
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "指定 MD5 演算法的物件。"
  overload: System.Security.Cryptography.CngAlgorithm.MD5*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngAlgorithm.op_Equality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)
  id: op_Equality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  name: op_Equality(CngAlgorithm,CngAlgorithm)
  nameWithType: CngAlgorithm.op_Equality(CngAlgorithm,CngAlgorithm)
  fullName: System.Security.Cryptography.CngAlgorithm.op_Equality(CngAlgorithm,CngAlgorithm)
  type: Operator
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "判斷兩個<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>物件指定相同的演算法名稱。"
  syntax:
    content: public static bool op_Equality (System.Security.Cryptography.CngAlgorithm left, System.Security.Cryptography.CngAlgorithm right);
    parameters:
    - id: left
      type: System.Security.Cryptography.CngAlgorithm
      description: "指定演算法名稱的物件。"
    - id: right
      type: System.Security.Cryptography.CngAlgorithm
      description: "要比較的物件所識別的第二個物件`left`參數。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果兩個物件指定相同的演算法名稱。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.CngAlgorithm.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngAlgorithm.op_Inequality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)
  id: op_Inequality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  name: op_Inequality(CngAlgorithm,CngAlgorithm)
  nameWithType: CngAlgorithm.op_Inequality(CngAlgorithm,CngAlgorithm)
  fullName: System.Security.Cryptography.CngAlgorithm.op_Inequality(CngAlgorithm,CngAlgorithm)
  type: Operator
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "判斷兩個<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>物件未指定相同的演算法。"
  syntax:
    content: public static bool op_Inequality (System.Security.Cryptography.CngAlgorithm left, System.Security.Cryptography.CngAlgorithm right);
    parameters:
    - id: left
      type: System.Security.Cryptography.CngAlgorithm
      description: "指定演算法名稱的物件。"
    - id: right
      type: System.Security.Cryptography.CngAlgorithm
      description: "要比較的物件所識別的第二個物件`left`參數。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果兩個物件未指定相同的演算法名稱。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.CngAlgorithm.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngAlgorithm.Rsa
  id: Rsa
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  name: Rsa
  nameWithType: CngAlgorithm.Rsa
  fullName: System.Security.Cryptography.CngAlgorithm.Rsa
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得新<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>指定 RSA 雜湊演算法的物件。"
  syntax:
    content: public static System.Security.Cryptography.CngAlgorithm Rsa { get; }
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "指定的 RSA 演算法的物件。"
  overload: System.Security.Cryptography.CngAlgorithm.Rsa*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngAlgorithm.Sha1
  id: Sha1
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  name: Sha1
  nameWithType: CngAlgorithm.Sha1
  fullName: System.Security.Cryptography.CngAlgorithm.Sha1
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得新<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>物件指定 Secure Hash Algorithm 1 (sha-1) 演算法。"
  syntax:
    content: public static System.Security.Cryptography.CngAlgorithm Sha1 { get; }
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "指定 sha-1 演算法的物件。"
  overload: System.Security.Cryptography.CngAlgorithm.Sha1*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngAlgorithm.Sha256
  id: Sha256
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  name: Sha256
  nameWithType: CngAlgorithm.Sha256
  fullName: System.Security.Cryptography.CngAlgorithm.Sha256
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得新<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>物件指定 Secure Hash Algorithm 256 (sha-256) 演算法。"
  syntax:
    content: public static System.Security.Cryptography.CngAlgorithm Sha256 { get; }
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "指定 sha-256 演算法的物件。"
  overload: System.Security.Cryptography.CngAlgorithm.Sha256*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngAlgorithm.Sha384
  id: Sha384
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  name: Sha384
  nameWithType: CngAlgorithm.Sha384
  fullName: System.Security.Cryptography.CngAlgorithm.Sha384
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得新<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>物件指定 Secure Hash Algorithm 384 (sha-384) 演算法。"
  syntax:
    content: public static System.Security.Cryptography.CngAlgorithm Sha384 { get; }
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "指定 sha-384 演算法的物件。"
  overload: System.Security.Cryptography.CngAlgorithm.Sha384*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngAlgorithm.Sha512
  id: Sha512
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  name: Sha512
  nameWithType: CngAlgorithm.Sha512
  fullName: System.Security.Cryptography.CngAlgorithm.Sha512
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得新<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>物件指定 Secure Hash Algorithm 512 (sha-512) 演算法。"
  syntax:
    content: public static System.Security.Cryptography.CngAlgorithm Sha512 { get; }
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "指定 sha-512 演算法的物件。"
  overload: System.Security.Cryptography.CngAlgorithm.Sha512*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngAlgorithm.ToString
  id: ToString
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  name: ToString()
  nameWithType: CngAlgorithm.ToString()
  fullName: System.Security.Cryptography.CngAlgorithm.ToString()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得演算法的名稱目前<xref href=&quot;System.Security.Cryptography.CngAlgorithm&quot;></xref>指定物件。"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "內嵌的演算法名稱。"
  overload: System.Security.Cryptography.CngAlgorithm.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Cryptography.CngAlgorithm.#ctor(System.String)
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: CngAlgorithm(String)
  nameWithType: CngAlgorithm.CngAlgorithm(String)
  fullName: System.Security.Cryptography.CngAlgorithm.CngAlgorithm(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.CngAlgorithm.Algorithm
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: Algorithm
  nameWithType: CngAlgorithm.Algorithm
  fullName: System.Security.Cryptography.CngAlgorithm.Algorithm
- uid: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: ECDiffieHellmanP256
  nameWithType: CngAlgorithm.ECDiffieHellmanP256
  fullName: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256
- uid: System.Security.Cryptography.CngAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: CngAlgorithm
  nameWithType: CngAlgorithm
  fullName: System.Security.Cryptography.CngAlgorithm
- uid: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: ECDiffieHellmanP384
  nameWithType: CngAlgorithm.ECDiffieHellmanP384
  fullName: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384
- uid: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: ECDiffieHellmanP521
  nameWithType: CngAlgorithm.ECDiffieHellmanP521
  fullName: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521
- uid: System.Security.Cryptography.CngAlgorithm.ECDsaP256
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: ECDsaP256
  nameWithType: CngAlgorithm.ECDsaP256
  fullName: System.Security.Cryptography.CngAlgorithm.ECDsaP256
- uid: System.Security.Cryptography.CngAlgorithm.ECDsaP384
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: ECDsaP384
  nameWithType: CngAlgorithm.ECDsaP384
  fullName: System.Security.Cryptography.CngAlgorithm.ECDsaP384
- uid: System.Security.Cryptography.CngAlgorithm.ECDsaP521
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: ECDsaP521
  nameWithType: CngAlgorithm.ECDsaP521
  fullName: System.Security.Cryptography.CngAlgorithm.ECDsaP521
- uid: System.Security.Cryptography.CngAlgorithm.Equals(System.Object)
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: Equals(Object)
  nameWithType: CngAlgorithm.Equals(Object)
  fullName: System.Security.Cryptography.CngAlgorithm.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.CngAlgorithm.Equals(System.Security.Cryptography.CngAlgorithm)
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: Equals(CngAlgorithm)
  nameWithType: CngAlgorithm.Equals(CngAlgorithm)
  fullName: System.Security.Cryptography.CngAlgorithm.Equals(CngAlgorithm)
- uid: System.Security.Cryptography.CngAlgorithm.GetHashCode
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: GetHashCode()
  nameWithType: CngAlgorithm.GetHashCode()
  fullName: System.Security.Cryptography.CngAlgorithm.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.CngAlgorithm.MD5
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: MD5
  nameWithType: CngAlgorithm.MD5
  fullName: System.Security.Cryptography.CngAlgorithm.MD5
- uid: System.Security.Cryptography.CngAlgorithm.op_Equality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: op_Equality(CngAlgorithm,CngAlgorithm)
  nameWithType: CngAlgorithm.op_Equality(CngAlgorithm,CngAlgorithm)
  fullName: System.Security.Cryptography.CngAlgorithm.op_Equality(CngAlgorithm,CngAlgorithm)
- uid: System.Security.Cryptography.CngAlgorithm.op_Inequality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: op_Inequality(CngAlgorithm,CngAlgorithm)
  nameWithType: CngAlgorithm.op_Inequality(CngAlgorithm,CngAlgorithm)
  fullName: System.Security.Cryptography.CngAlgorithm.op_Inequality(CngAlgorithm,CngAlgorithm)
- uid: System.Security.Cryptography.CngAlgorithm.Rsa
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: Rsa
  nameWithType: CngAlgorithm.Rsa
  fullName: System.Security.Cryptography.CngAlgorithm.Rsa
- uid: System.Security.Cryptography.CngAlgorithm.Sha1
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: Sha1
  nameWithType: CngAlgorithm.Sha1
  fullName: System.Security.Cryptography.CngAlgorithm.Sha1
- uid: System.Security.Cryptography.CngAlgorithm.Sha256
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: Sha256
  nameWithType: CngAlgorithm.Sha256
  fullName: System.Security.Cryptography.CngAlgorithm.Sha256
- uid: System.Security.Cryptography.CngAlgorithm.Sha384
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: Sha384
  nameWithType: CngAlgorithm.Sha384
  fullName: System.Security.Cryptography.CngAlgorithm.Sha384
- uid: System.Security.Cryptography.CngAlgorithm.Sha512
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: Sha512
  nameWithType: CngAlgorithm.Sha512
  fullName: System.Security.Cryptography.CngAlgorithm.Sha512
- uid: System.Security.Cryptography.CngAlgorithm.ToString
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: ToString()
  nameWithType: CngAlgorithm.ToString()
  fullName: System.Security.Cryptography.CngAlgorithm.ToString()
- uid: System.Security.Cryptography.CngAlgorithm.#ctor*
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: CngAlgorithm
  nameWithType: CngAlgorithm.CngAlgorithm
- uid: System.Security.Cryptography.CngAlgorithm.Algorithm*
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: Algorithm
  nameWithType: CngAlgorithm.Algorithm
- uid: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256*
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: ECDiffieHellmanP256
  nameWithType: CngAlgorithm.ECDiffieHellmanP256
- uid: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384*
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: ECDiffieHellmanP384
  nameWithType: CngAlgorithm.ECDiffieHellmanP384
- uid: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521*
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: ECDiffieHellmanP521
  nameWithType: CngAlgorithm.ECDiffieHellmanP521
- uid: System.Security.Cryptography.CngAlgorithm.ECDsaP256*
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: ECDsaP256
  nameWithType: CngAlgorithm.ECDsaP256
- uid: System.Security.Cryptography.CngAlgorithm.ECDsaP384*
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: ECDsaP384
  nameWithType: CngAlgorithm.ECDsaP384
- uid: System.Security.Cryptography.CngAlgorithm.ECDsaP521*
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: ECDsaP521
  nameWithType: CngAlgorithm.ECDsaP521
- uid: System.Security.Cryptography.CngAlgorithm.Equals*
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: Equals
  nameWithType: CngAlgorithm.Equals
- uid: System.Security.Cryptography.CngAlgorithm.GetHashCode*
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: GetHashCode
  nameWithType: CngAlgorithm.GetHashCode
- uid: System.Security.Cryptography.CngAlgorithm.MD5*
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: MD5
  nameWithType: CngAlgorithm.MD5
- uid: System.Security.Cryptography.CngAlgorithm.op_Equality*
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: op_Equality
  nameWithType: CngAlgorithm.op_Equality
- uid: System.Security.Cryptography.CngAlgorithm.op_Inequality*
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: op_Inequality
  nameWithType: CngAlgorithm.op_Inequality
- uid: System.Security.Cryptography.CngAlgorithm.Rsa*
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: Rsa
  nameWithType: CngAlgorithm.Rsa
- uid: System.Security.Cryptography.CngAlgorithm.Sha1*
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: Sha1
  nameWithType: CngAlgorithm.Sha1
- uid: System.Security.Cryptography.CngAlgorithm.Sha256*
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: Sha256
  nameWithType: CngAlgorithm.Sha256
- uid: System.Security.Cryptography.CngAlgorithm.Sha384*
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: Sha384
  nameWithType: CngAlgorithm.Sha384
- uid: System.Security.Cryptography.CngAlgorithm.Sha512*
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: Sha512
  nameWithType: CngAlgorithm.Sha512
- uid: System.Security.Cryptography.CngAlgorithm.ToString*
  parent: System.Security.Cryptography.CngAlgorithm
  isExternal: false
  name: ToString
  nameWithType: CngAlgorithm.ToString
