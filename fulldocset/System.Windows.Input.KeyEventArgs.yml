### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.KeyEventArgs
  id: KeyEventArgs
  children:
  - System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)
  - System.Windows.Input.KeyEventArgs.DeadCharProcessedKey
  - System.Windows.Input.KeyEventArgs.ImeProcessedKey
  - System.Windows.Input.KeyEventArgs.InputSource
  - System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  - System.Windows.Input.KeyEventArgs.IsDown
  - System.Windows.Input.KeyEventArgs.IsRepeat
  - System.Windows.Input.KeyEventArgs.IsToggled
  - System.Windows.Input.KeyEventArgs.IsUp
  - System.Windows.Input.KeyEventArgs.Key
  - System.Windows.Input.KeyEventArgs.KeyStates
  - System.Windows.Input.KeyEventArgs.SystemKey
  langs:
  - csharp
  name: KeyEventArgs
  nameWithType: KeyEventArgs
  fullName: System.Windows.Input.KeyEventArgs
  type: Class
  summary: "提供資料給<xref href=&quot;System.Windows.UIElement.KeyUp&quot;></xref>和<xref href=&quot;System.Windows.UIElement.KeyDown&quot;></xref>路由事件，以及相關附加事件和預覽事件。"
  remarks: "此事件資料類別搭配下列附加的事件:- <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>- <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>- <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>-<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>這個事件資料類別也會使用與基底項目上的下列路由事件。</xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> </xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> </xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> </xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> 這些路由的事件轉送，使其更容易存取一般項目模型中先前所列的附加的事件[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]。      - <xref:System.Windows.UIElement.KeyUp?displayProperty=fullName>- <xref:System.Windows.UIElement.KeyDown?displayProperty=fullName>- <xref:System.Windows.UIElement.PreviewKeyUp?displayProperty=fullName>- <xref:System.Windows.UIElement.PreviewKeyDown?displayProperty=fullName>- <xref:System.Windows.ContentElement.KeyUp?displayProperty=fullName>- <xref:System.Windows.ContentElement.KeyDown?displayProperty=fullName>- <xref:System.Windows.ContentElement.PreviewKeyUp?displayProperty=fullName>-<xref:System.Windows.ContentElement.PreviewKeyDown?displayProperty=fullName>附加的事件和基底的項目路由事件共用其事件資料，而反昇和通道之路由事件的版本也共用事件資料。</xref:System.Windows.ContentElement.PreviewKeyDown?displayProperty=fullName> </xref:System.Windows.ContentElement.PreviewKeyUp?displayProperty=fullName> </xref:System.Windows.ContentElement.KeyDown?displayProperty=fullName> </xref:System.Windows.ContentElement.KeyUp?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewKeyDown?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewKeyUp?displayProperty=fullName> </xref:System.Windows.UIElement.KeyDown?displayProperty=fullName> </xref:System.Windows.UIElement.KeyUp?displayProperty=fullName> 事件路由傳送，這可能會影響事件的處理的特性。 如需詳細資訊，請參閱[輸入概觀](~/add/includes/ajax-current-ext-md.md)。       索引鍵可以是最新和已切換之狀態或在清單中，並切換的狀態。 基於這個理由，決定是否已啟動的索引鍵或向下不只要檢查<xref:System.Windows.Input.KeyEventArgs.KeyStates%2A>值做為數值。</xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> 相反地，您應該檢查此值將它視為旗標列舉。 使用`AND`比較的第一個位元。 或者，使用協助程式屬性<xref:System.Windows.Input.KeyEventArgs.IsUp%2A>， <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>，和<xref:System.Windows.Input.KeyEventArgs.IsToggled%2A>來判斷是否指定索引鍵已啟動、 關閉，或已切換之。</xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> </xref:System.Windows.Input.KeyEventArgs.IsDown%2A> </xref:System.Windows.Input.KeyEventArgs.IsUp%2A>"
  syntax:
    content: 'public class KeyEventArgs : System.Windows.Input.KeyboardEventArgs'
  inheritance:
  - System.EventArgs
  - System.Windows.RoutedEventArgs
  - System.Windows.Input.InputEventArgs
  - System.Windows.Input.KeyboardEventArgs
  implements: []
  inheritedMembers:
  - System.Windows.Input.InputEventArgs.Device
  - System.Windows.Input.InputEventArgs.Timestamp
  - System.Windows.Input.KeyboardEventArgs.KeyboardDevice
  - System.Windows.RoutedEventArgs.Handled
  - System.Windows.RoutedEventArgs.OnSetSource(System.Object)
  - System.Windows.RoutedEventArgs.OriginalSource
  - System.Windows.RoutedEventArgs.RoutedEvent
  - System.Windows.RoutedEventArgs.Source
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)
  id: '#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)'
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
  nameWithType: KeyEventArgs.KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
  fullName: System.Windows.Input.KeyEventArgs.KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.Input.KeyEventArgs&quot;></xref>類別。"
  syntax:
    content: public KeyEventArgs (System.Windows.Input.KeyboardDevice keyboard, System.Windows.PresentationSource inputSource, int timestamp, System.Windows.Input.Key key);
    parameters:
    - id: keyboard
      type: System.Windows.Input.KeyboardDevice
      description: "此事件相關聯的邏輯鍵盤裝置。"
    - id: inputSource
      type: System.Windows.PresentationSource
      description: "輸入的來源。"
    - id: timestamp
      type: System.Int32
      description: "輸入發生的時間。"
    - id: key
      type: System.Windows.Input.Key
      description: "事件所參考的索引。"
  overload: System.Windows.Input.KeyEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey
  id: DeadCharProcessedKey
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: DeadCharProcessedKey
  nameWithType: KeyEventArgs.DeadCharProcessedKey
  fullName: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得屬於廢鍵來建立單一合併的字元的組合索引鍵。"
  remarks: "廢鍵，當按下，會產生任何可見的字元，但是會指出索引鍵是結合所產生的下一個字母按鍵的字元。  如果<xref:System.Windows.Input.KeyEventArgs.Key%2A>傳回<xref:System.Windows.Input.Key?displayProperty=fullName>，您可以使用這個屬性取得輸入的實際金鑰。</xref:System.Windows.Input.Key?displayProperty=fullName> </xref:System.Windows.Input.KeyEventArgs.Key%2A>"
  syntax:
    content: public System.Windows.Input.Key DeadCharProcessedKey { get; }
    return:
      type: System.Windows.Input.Key
      description: "屬於廢鍵來建立單一合併的字元的組合索引鍵。"
  overload: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.ImeProcessedKey
  id: ImeProcessedKey
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: ImeProcessedKey
  nameWithType: KeyEventArgs.ImeProcessedKey
  fullName: System.Windows.Input.KeyEventArgs.ImeProcessedKey
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得事件所參考的鍵盤按鍵，如果索引鍵將會處理[!INCLUDE[TLA#tla_ime](~/add/includes/ajax-current-ext-md.md)]。"
  syntax:
    content: public System.Windows.Input.Key ImeProcessedKey { get; }
    return:
      type: System.Windows.Input.Key
      description: "<xref href=&quot;System.Windows.Input.Key&quot;> </xref>事件所參考。"
  overload: System.Windows.Input.KeyEventArgs.ImeProcessedKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.InputSource
  id: InputSource
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: InputSource
  nameWithType: KeyEventArgs.InputSource
  fullName: System.Windows.Input.KeyEventArgs.InputSource
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得此輸入所提供的輸入的來源。"
  syntax:
    content: public System.Windows.PresentationSource InputSource { get; }
    return:
      type: System.Windows.PresentationSource
      description: "輸入的來源。"
  overload: System.Windows.Input.KeyEventArgs.InputSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  id: InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: KeyEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.KeyEventArgs.InvokeEventHandler(Delegate,Object)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "特定類型的方式，可以增加事件系統的效率，叫用事件處理常式。"
  remarks: "此實作會將泛型處理常式轉換為<xref:System.Windows.Input.KeyEventHandler>然後再叫用它。</xref:System.Windows.Input.KeyEventHandler> 如需這項實作模式及它的理由的詳細資訊，請參閱<xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A>和[路由傳送事件概觀](~/add/includes/ajax-current-ext-md.md)。</xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A>"
  syntax:
    content: protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);
    parameters:
    - id: genericHandler
      type: System.Delegate
      description: "若要以特定類型的方式呼叫泛型處理常式。"
    - id: genericTarget
      type: System.Object
      description: "要呼叫的處理常式上的目標。"
  overload: System.Windows.Input.KeyEventArgs.InvokeEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.IsDown
  id: IsDown
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: IsDown
  nameWithType: KeyEventArgs.IsDown
  fullName: System.Windows.Input.KeyEventArgs.IsDown
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得值，指出事件所參考的索引鍵是否已關閉狀態。"
  remarks: "<xref:System.Windows.Input.Keyboard>類別也提供鍵盤上的索引鍵的狀態資訊。</xref:System.Windows.Input.Keyboard> 比方說，<xref:System.Windows.Input.Keyboard.IsKeyDown%2A>方法會傳回指定之索引鍵是否已關閉。</xref:System.Windows.Input.Keyboard.IsKeyDown%2A>"
  example:
  - "The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is down by obtaining the state of the IsDown property.  \n  \n [!code-cs[keyargssnippetsample#KeyEventArgsIsDown](~/add/codesnippet/csharp/KeyArgsSnippetSample/Window1.xaml.cs#keyeventargsisdown)]\n [!code-vb[keyargssnippetsample#KeyEventArgsIsDown](~/add/codesnippet/visualbasic/keyargssnippetsample/window1.xaml.vb#keyeventargsisdown)]"
  syntax:
    content: public bool IsDown { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果金鑰已關閉。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.KeyEventArgs.IsDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.IsRepeat
  id: IsRepeat
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: IsRepeat
  nameWithType: KeyEventArgs.IsRepeat
  fullName: System.Windows.Input.KeyEventArgs.IsRepeat
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得值，指出事件所參考的鍵盤按鍵是否為重複的索引鍵。"
  remarks: ''
  example:
  - "The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is a repeated key by obtaining the state of the IsRepeat property.  \n  \n [!code-cs[keyargssnippetsample#KeyEventArgsIsRepeat](~/add/codesnippet/csharp/KeyArgsSnippetSample/Window1.xaml.cs#keyeventargsisrepeat)]\n [!code-vb[keyargssnippetsample#KeyEventArgsIsRepeat](~/add/codesnippet/visualbasic/keyargssnippetsample/window1.xaml.vb#keyeventargsisrepeat)]"
  syntax:
    content: public bool IsRepeat { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果索引鍵重複。，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。  沒有預設值。"
  overload: System.Windows.Input.KeyEventArgs.IsRepeat*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.IsToggled
  id: IsToggled
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: IsToggled
  nameWithType: KeyEventArgs.IsToggled
  fullName: System.Windows.Input.KeyEventArgs.IsToggled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得值，指出切換的狀態是否為參考事件的索引。"
  remarks: "<xref:System.Windows.Input.Keyboard>類別也提供鍵盤上的索引鍵的狀態資訊。</xref:System.Windows.Input.Keyboard> 比方說，<xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>方法會傳回指定之索引鍵是否會切換。</xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>"
  example:
  - "The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is toggled by obtaining the state of the IsToggled property.  \n  \n [!code-cs[keyargssnippetsample#KeyEventArgsIsToggled](~/add/codesnippet/csharp/KeyArgsSnippetSample/Window1.xaml.cs#keyeventargsistoggled)]\n [!code-vb[keyargssnippetsample#KeyEventArgsIsToggled](~/add/codesnippet/visualbasic/keyargssnippetsample/window1.xaml.vb#keyeventargsistoggled)]"
  syntax:
    content: public bool IsToggled { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果索引鍵會切換。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。  沒有預設值。"
  overload: System.Windows.Input.KeyEventArgs.IsToggled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.IsUp
  id: IsUp
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: IsUp
  nameWithType: KeyEventArgs.IsUp
  fullName: System.Windows.Input.KeyEventArgs.IsUp
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得值，指出事件所參考的金鑰是否為最新狀態。"
  remarks: "<xref:System.Windows.Input.Keyboard>類別也提供鍵盤上的索引鍵的狀態資訊。</xref:System.Windows.Input.Keyboard>  比方說，<xref:System.Windows.Input.Keyboard.IsKeyUp%2A>方法會傳回指定是否註冊。</xref:System.Windows.Input.Keyboard.IsKeyUp%2A>"
  example:
  - "The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is up by obtaining the state of the IsUp property.  \n  \n [!code-cs[keyargssnippetsample#KeyEventArgsIsUp](~/add/codesnippet/csharp/KeyArgsSnippetSample/Window1.xaml.cs#keyeventargsisup)]\n [!code-vb[keyargssnippetsample#KeyEventArgsIsUp](~/add/codesnippet/visualbasic/keyargssnippetsample/window1.xaml.vb#keyeventargsisup)]"
  syntax:
    content: public bool IsUp { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果金鑰已啟動。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。  沒有預設值。"
  overload: System.Windows.Input.KeyEventArgs.IsUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.Key
  id: Key
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: Key
  nameWithType: KeyEventArgs.Key
  fullName: System.Windows.Input.KeyEventArgs.Key
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得與事件相關聯的鍵盤按鍵。"
  remarks: ''
  example:
  - "The following example creates a <xref:System.Windows.Input.KeyEventHandler> and checks whether the key associated with the <xref:System.Windows.Input.KeyEventArgs> is the <xref:System.Windows.Input.Key> key.  \n  \n [!code-cs[keydown#KeyDownSample](~/add/codesnippet/csharp/KeyDown/Window1.xaml.cs#keydownsample)]\n [!code-vb[keydown#KeyDownSample](~/add/codesnippet/visualbasic/KeyDown/Window1.xaml.vb#keydownsample)]"
  syntax:
    content: public System.Windows.Input.Key Key { get; }
    return:
      type: System.Windows.Input.Key
      description: "<xref href=&quot;System.Windows.Input.Key&quot;> </xref>事件所參考。"
  overload: System.Windows.Input.KeyEventArgs.Key*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.KeyStates
  id: KeyStates
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: KeyStates
  nameWithType: KeyEventArgs.KeyStates
  fullName: System.Windows.Input.KeyEventArgs.KeyStates
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得與此事件相關聯的鍵盤按鍵的狀態。"
  remarks: "索引鍵可以是最新和已切換之狀態或在清單中，並切換的狀態。 基於這個理由，決定索引鍵是否向上或向下不只要檢查 KeyStates 值做為數值。 相反地，您應該檢查此值將它視為旗標列舉。 使用`AND`比較的第一個位元。 或者，使用協助程式屬性<xref:System.Windows.Input.KeyEventArgs.IsUp%2A>， <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>，和<xref:System.Windows.Input.KeyEventArgs.IsToggled%2A>來判斷是否指定索引鍵已啟動、 關閉，或已切換之。</xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> </xref:System.Windows.Input.KeyEventArgs.IsDown%2A> </xref:System.Windows.Input.KeyEventArgs.IsUp%2A>"
  example:
  - "The following example checks whether a key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is down by performing a bitwise `AND` comparison on the KeyStates of the key and the <xref:System.Windows.Input.KeyStates> enumeration value.  \n  \n [!code-cs[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/add/codesnippet/csharp/KeyArgsSnippetSample/Window1.xaml.cs#keyeventargskeystatesdown)]\n [!code-vb[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/add/codesnippet/visualbasic/keyargssnippetsample/window1.xaml.vb#keyeventargskeystatesdown)]"
  syntax:
    content: public System.Windows.Input.KeyStates KeyStates { get; }
    return:
      type: System.Windows.Input.KeyStates
      description: "索引鍵的狀態。"
  overload: System.Windows.Input.KeyEventArgs.KeyStates*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.SystemKey
  id: SystemKey
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: SystemKey
  nameWithType: KeyEventArgs.SystemKey
  fullName: System.Windows.Input.KeyEventArgs.SystemKey
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得事件所參考的鍵盤按鍵，如果索引鍵會由系統處理。"
  syntax:
    content: public System.Windows.Input.Key SystemKey { get; }
    return:
      type: System.Windows.Input.Key
      description: "<xref href=&quot;System.Windows.Input.Key&quot;> </xref>事件所參考。"
  overload: System.Windows.Input.KeyEventArgs.SystemKey*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.KeyboardEventArgs
  isExternal: false
  name: System.Windows.Input.KeyboardEventArgs
- uid: System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
  nameWithType: KeyEventArgs.KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
  fullName: System.Windows.Input.KeyEventArgs.KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
- uid: System.Windows.Input.KeyboardDevice
  parent: System.Windows.Input
  isExternal: false
  name: KeyboardDevice
  nameWithType: KeyboardDevice
  fullName: System.Windows.Input.KeyboardDevice
- uid: System.Windows.PresentationSource
  parent: System.Windows
  isExternal: false
  name: PresentationSource
  nameWithType: PresentationSource
  fullName: System.Windows.PresentationSource
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Input.Key
  parent: System.Windows.Input
  isExternal: false
  name: Key
  nameWithType: Key
  fullName: System.Windows.Input.Key
- uid: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: DeadCharProcessedKey
  nameWithType: KeyEventArgs.DeadCharProcessedKey
  fullName: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey
- uid: System.Windows.Input.KeyEventArgs.ImeProcessedKey
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: ImeProcessedKey
  nameWithType: KeyEventArgs.ImeProcessedKey
  fullName: System.Windows.Input.KeyEventArgs.ImeProcessedKey
- uid: System.Windows.Input.KeyEventArgs.InputSource
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: InputSource
  nameWithType: KeyEventArgs.InputSource
  fullName: System.Windows.Input.KeyEventArgs.InputSource
- uid: System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: KeyEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.KeyEventArgs.InvokeEventHandler(Delegate,Object)
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.KeyEventArgs.IsDown
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsDown
  nameWithType: KeyEventArgs.IsDown
  fullName: System.Windows.Input.KeyEventArgs.IsDown
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Input.KeyEventArgs.IsRepeat
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsRepeat
  nameWithType: KeyEventArgs.IsRepeat
  fullName: System.Windows.Input.KeyEventArgs.IsRepeat
- uid: System.Windows.Input.KeyEventArgs.IsToggled
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsToggled
  nameWithType: KeyEventArgs.IsToggled
  fullName: System.Windows.Input.KeyEventArgs.IsToggled
- uid: System.Windows.Input.KeyEventArgs.IsUp
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsUp
  nameWithType: KeyEventArgs.IsUp
  fullName: System.Windows.Input.KeyEventArgs.IsUp
- uid: System.Windows.Input.KeyEventArgs.Key
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: Key
  nameWithType: KeyEventArgs.Key
  fullName: System.Windows.Input.KeyEventArgs.Key
- uid: System.Windows.Input.KeyEventArgs.KeyStates
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: KeyStates
  nameWithType: KeyEventArgs.KeyStates
  fullName: System.Windows.Input.KeyEventArgs.KeyStates
- uid: System.Windows.Input.KeyStates
  parent: System.Windows.Input
  isExternal: false
  name: KeyStates
  nameWithType: KeyStates
  fullName: System.Windows.Input.KeyStates
- uid: System.Windows.Input.KeyEventArgs.SystemKey
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: SystemKey
  nameWithType: KeyEventArgs.SystemKey
  fullName: System.Windows.Input.KeyEventArgs.SystemKey
- uid: System.Windows.Input.KeyEventArgs.#ctor*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: KeyEventArgs
  nameWithType: KeyEventArgs.KeyEventArgs
- uid: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: DeadCharProcessedKey
  nameWithType: KeyEventArgs.DeadCharProcessedKey
- uid: System.Windows.Input.KeyEventArgs.ImeProcessedKey*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: ImeProcessedKey
  nameWithType: KeyEventArgs.ImeProcessedKey
- uid: System.Windows.Input.KeyEventArgs.InputSource*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: InputSource
  nameWithType: KeyEventArgs.InputSource
- uid: System.Windows.Input.KeyEventArgs.InvokeEventHandler*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: InvokeEventHandler
  nameWithType: KeyEventArgs.InvokeEventHandler
- uid: System.Windows.Input.KeyEventArgs.IsDown*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsDown
  nameWithType: KeyEventArgs.IsDown
- uid: System.Windows.Input.KeyEventArgs.IsRepeat*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsRepeat
  nameWithType: KeyEventArgs.IsRepeat
- uid: System.Windows.Input.KeyEventArgs.IsToggled*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsToggled
  nameWithType: KeyEventArgs.IsToggled
- uid: System.Windows.Input.KeyEventArgs.IsUp*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsUp
  nameWithType: KeyEventArgs.IsUp
- uid: System.Windows.Input.KeyEventArgs.Key*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: Key
  nameWithType: KeyEventArgs.Key
- uid: System.Windows.Input.KeyEventArgs.KeyStates*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: KeyStates
  nameWithType: KeyEventArgs.KeyStates
- uid: System.Windows.Input.KeyEventArgs.SystemKey*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: SystemKey
  nameWithType: KeyEventArgs.SystemKey
