### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.KeyGesture
  id: KeyGesture
  children:
  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)
  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)
  - System.Windows.Input.KeyGesture.DisplayString
  - System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)
  - System.Windows.Input.KeyGesture.Key
  - System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  - System.Windows.Input.KeyGesture.Modifiers
  langs:
  - csharp
  name: KeyGesture
  nameWithType: KeyGesture
  fullName: System.Windows.Input.KeyGesture
  type: Class
  summary: "定義可用來叫用命令的鍵盤組合。"
  remarks: "在大部分情況下，KeyGesture 必須有關聯的其中一個或多個<xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> 此規則的例外狀況是函式和數字鍵台金鑰，它可以是有效的 KeyGesture 本身。 例如，您可以使用只有 F12 鍵，以建立 KeyGesture，但使用 X KeyGesture 中的索引鍵它必須搭配輔助按鍵。       一般情況下，您可以使用<xref:System.Windows.Input.KeyBinding>繫結至 KeyGesture <xref:System.Windows.Input.ICommand>，如此 KeyGesture 發生時叫用命令。</xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.KeyBinding>       Keygesture[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]使用方式，通常在中設定的屬性[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]是<xref:System.Windows.Input.KeyBinding.Gesture%2A>，在其中筆勢代表標準的索引鍵和輔助按鍵的情況下。</xref:System.Windows.Input.KeyBinding.Gesture%2A> 您也可以設定<xref:System.Windows.Input.KeyBinding.Gesture%2A>只函式金鑰，或為修飾詞的屬性索引鍵組合。</xref:System.Windows.Input.KeyBinding.Gesture%2A> 不過，它是較常見設定<xref:System.Windows.Input.KeyBinding.Key%2A>預定的命令繫結會使用功能鍵以任何修飾詞，如果屬性或<xref:System.Windows.Input.KeyBinding.Modifiers%2A>預定的命令繫結是否僅輔助按鍵。</xref:System.Windows.Input.KeyBinding.Modifiers%2A> </xref:System.Windows.Input.KeyBinding.Key%2A>      <a name=&quot;xamlAttributeUsage_KeyGesture&quot;></a># # XAML 屬性使用方式```   <object property=&quot;oneOrMoreModifierKeys+key&quot;/>   - or -   <object property=&quot;functionKey&quot;/>   ``` <a name=&quot;xamlValues_KeyGesture&quot;> </a> # # XAML 值`functionKey`<xref:System.Windows.Input.Key>單一的金鑰值，必須是其中一種功能鍵 (F1-12) 或數字鍵台金鑰。</xref:System.Windows.Input.Key>                 `oneOrMoreModifierKeys`一或多個所定義的輔助按鍵<xref:System.Windows.Input.ModifierKeys>列舉型別，以&quot;+&quot;字元分隔。</xref:System.Windows.Input.ModifierKeys>       `key`    <xref:System.Windows.Input.Key>單一索引鍵的值。</xref:System.Windows.Input.Key>"
  example:
  - "The following example shows how to bind the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command to a KeyGesture using a <xref:System.Windows.Input.KeyBinding>.  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]  \n  \n The following example shows how to use KeyGesture in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. Note that the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage does not directly declare a `<KeyGesture>` element. That object element usage is not possible because KeyGesture does not expose a public default constructor. Instead, the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage uses the typeconverter behavior to declare an entire KeyGesture inline as the `Gesture` attribute value.  \n  \n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))]

      [System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.KeyGestureValueSerializer))]

      public class KeyGesture : System.Windows.Input.InputGesture
  inheritance:
  - System.Object
  - System.Windows.Input.InputGesture
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)
  id: '#ctor(System.Windows.Input.Key)'
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: KeyGesture(Key)
  nameWithType: KeyGesture.KeyGesture(Key)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>類別具有指定<xref href=&quot;System.Windows.Input.Key&quot;> </xref>。"
  remarks: "在大部分情況下，<xref:System.Windows.Input.KeyGesture>必須與一個或多個<xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture>  此規則的例外狀況是函式和數字鍵台金鑰，它可以是有效的<xref:System.Windows.Input.KeyGesture>單獨。</xref:System.Windows.Input.KeyGesture>"
  example:
  - "The following example shows how to use this constructor to create a <xref:System.Windows.Input.KeyGesture> and associate it with a <xref:System.Windows.Input.KeyBinding>.  The <xref:System.Windows.Input.KeyBinding> is then added to the <xref:System.Windows.Input.InputBindingCollection> of a <xref:System.Windows.Window>.  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithNoModifier](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithnomodifier)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithNoModifier](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithnomodifier)]"
  syntax:
    content: public KeyGesture (System.Windows.Input.Key key);
    parameters:
    - id: key
      type: System.Windows.Input.Key
      description: "與此筆勢相關聯的金鑰。"
  overload: System.Windows.Input.KeyGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>key</code>不是有效<xref href=&quot;System.Windows.Input.Key&quot;> </xref>。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>key</code>不是有效<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。"
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  id: '#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)'
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: KeyGesture(Key,ModifierKeys)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>類別具有指定<xref href=&quot;System.Windows.Input.Key&quot;></xref>和<xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>。"
  remarks: "在大部分情況下，<xref:System.Windows.Input.KeyGesture>必須與一個或多個<xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture> 此規則的例外狀況是函式和數字鍵台金鑰，它可以是有效的<xref:System.Windows.Input.KeyGesture>單獨。</xref:System.Windows.Input.KeyGesture>"
  example:
  - "The following example shows how to use this constructor to create a <xref:System.Windows.Input.KeyGesture> and associate it with a <xref:System.Windows.Input.KeyBinding>. The <xref:System.Windows.Input.KeyBinding> is then added to the <xref:System.Windows.Input.InputBindingCollection> of a <xref:System.Windows.Window>.  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]"
  syntax:
    content: public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);
    parameters:
    - id: key
      type: System.Windows.Input.Key
      description: "索引鍵相關聯的筆勢。"
    - id: modifiers
      type: System.Windows.Input.ModifierKeys
      description: "輔助按鍵和筆勢的相關聯。"
  overload: System.Windows.Input.KeyGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>modifiers</code>is not a valid <xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>       -or-       <code>key</code> is not a valid <xref href=&quot;System.Windows.Input.Key&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>key</code>和<code>modifiers</code>未形成有效<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。"
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)
  id: '#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)'
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: KeyGesture(Key,ModifierKeys,String)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys,String)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys,String)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>類別具有指定<xref href=&quot;System.Windows.Input.Key&quot;> </xref>， <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>，和顯示字串。"
  remarks: "<xref:System.Windows.Input.KeyGesture.DisplayString%2A>屬性設定為`displayString`參數。</xref:System.Windows.Input.KeyGesture.DisplayString%2A>"
  syntax:
    content: public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers, string displayString);
    parameters:
    - id: key
      type: System.Windows.Input.Key
      description: "索引鍵相關聯的筆勢。"
    - id: modifiers
      type: System.Windows.Input.ModifierKeys
      description: "輔助按鍵和筆勢的相關聯。"
    - id: displayString
      type: System.String
      description: "字串表示法<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。"
  overload: System.Windows.Input.KeyGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>modifiers</code>is not a valid <xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>       -or-       <code>key</code> is not a valid <xref href=&quot;System.Windows.Input.Key&quot;></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>displayString</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>key</code>和<code>modifiers</code>未形成有效<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。"
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.DisplayString
  id: DisplayString
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: DisplayString
  nameWithType: KeyGesture.DisplayString
  fullName: System.Windows.Input.KeyGesture.DisplayString
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得這個字串表示<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。"
  remarks: "如果未設定於建構函式顯示字串，則會傳回空字串。       如果這個屬性是空的<xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A>方法會傳回字串，來建立<xref:System.Windows.Input.KeyGesture.Key%2A>和<xref:System.Windows.Input.KeyGesture.Modifiers%2A>。</xref:System.Windows.Input.KeyGesture.Modifiers%2A> </xref:System.Windows.Input.KeyGesture.Key%2A> </xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A>"
  syntax:
    content: public string DisplayString { get; }
    return:
      type: System.String
      description: "顯示字串，這個<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。 預設值是<xref:System.String.Empty>.</xref:System.String.Empty>"
  overload: System.Windows.Input.KeyGesture.DisplayString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)
  id: GetDisplayStringForCulture(System.Globalization.CultureInfo)
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: GetDisplayStringForCulture(CultureInfo)
  nameWithType: KeyGesture.GetDisplayStringForCulture(CultureInfo)
  fullName: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(CultureInfo)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "傳回字串，可以用來顯示<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。"
  remarks: "如果所設定的顯示字串的建構函式，就會傳回字串。否則，字串會建立從<xref:System.Windows.Input.KeyGesture.Key%2A>和<xref:System.Windows.Input.KeyGesture.Modifiers%2A>與任何必要的轉換所控管指定<xref:System.Globalization.CultureInfo>物件。</xref:System.Globalization.CultureInfo> </xref:System.Windows.Input.KeyGesture.Modifiers%2A> </xref:System.Windows.Input.KeyGesture.Key%2A>"
  syntax:
    content: public string GetDisplayStringForCulture (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: "文化特性特定資訊。"
    return:
      type: System.String
      description: "要顯示的字串"
  overload: System.Windows.Input.KeyGesture.GetDisplayStringForCulture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.Key
  id: Key
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: Key
  nameWithType: KeyGesture.Key
  fullName: System.Windows.Input.KeyGesture.Key
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得與此相關聯的索引鍵<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。"
  remarks: "在大部分情況下，<xref:System.Windows.Input.KeyGesture>必須與一個或多個<xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture>  此規則的例外狀況是函式和數字鍵台金鑰，它可以是有效的<xref:System.Windows.Input.KeyGesture>單獨。</xref:System.Windows.Input.KeyGesture>"
  syntax:
    content: public System.Windows.Input.Key Key { get; }
    return:
      type: System.Windows.Input.Key
      description: "索引鍵相關聯的筆勢。  預設值是<xref href=&quot;System.Windows.Input.Key&quot;> </xref>。"
  overload: System.Windows.Input.KeyGesture.Key*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  id: Matches(System.Object,System.Windows.Input.InputEventArgs)
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: Matches(Object,InputEventArgs)
  nameWithType: KeyGesture.Matches(Object,InputEventArgs)
  fullName: System.Windows.Input.KeyGesture.Matches(Object,InputEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "決定是否此<xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>符合具有指定相關聯的輸入<xref href=&quot;System.Windows.Input.InputEventArgs&quot;></xref>物件。"
  remarks: '`targetElement`可用來做出更具體的決策，是否應叫用命令上的特定項目上。'
  example:
  - "The following example shows how to test whether a <xref:System.Windows.Input.KeyGesture> matches the input associated with an instance of an <xref:System.Windows.Input.InputEventArgs>. A <xref:System.Windows.UIElement.KeyDown> event handler is created that compares the event data with the <xref:System.Windows.Input.KeyGesture> by using the Matches method.  \n  \n [!code-cs[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keydownhandlerkeygesturematches)]\n [!code-vb[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keydownhandlerkeygesturematches)]"
  syntax:
    content: public override bool Matches (object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);
    parameters:
    - id: targetElement
      type: System.Object
      description: "目標。"
    - id: inputEventArgs
      type: System.Windows.Input.InputEventArgs
      description: "要比較此筆勢才能輸入的事件資料。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果事件資料符合這<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.KeyGesture.Matches*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.Modifiers
  id: Modifiers
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: Modifiers
  nameWithType: KeyGesture.Modifiers
  fullName: System.Windows.Input.KeyGesture.Modifiers
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得與此相關聯的輔助按鍵<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。"
  remarks: "在大部分情況下，<xref:System.Windows.Input.KeyGesture>必須與一個或多個<xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture> 此規則的例外狀況是函式和數字鍵台金鑰，它可以是有效的<xref:System.Windows.Input.KeyGesture>單獨。</xref:System.Windows.Input.KeyGesture> 例如，您可以建立<xref:System.Windows.Input.KeyGesture>藉由使用 F12 鍵，但使用 X 金鑰<xref:System.Windows.Input.KeyGesture>必須搭配輔助按鍵。</xref:System.Windows.Input.KeyGesture> </xref:System.Windows.Input.KeyGesture>"
  syntax:
    content: public System.Windows.Input.ModifierKeys Modifiers { get; }
    return:
      type: System.Windows.Input.ModifierKeys
      description: "輔助按鍵和筆勢的相關聯。 預設值是<xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>。"
  overload: System.Windows.Input.KeyGesture.Modifiers*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.InputGesture
  isExternal: false
  name: System.Windows.Input.InputGesture
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture(Key)
  nameWithType: KeyGesture.KeyGesture(Key)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key)
- uid: System.Windows.Input.Key
  parent: System.Windows.Input
  isExternal: false
  name: Key
  nameWithType: Key
  fullName: System.Windows.Input.Key
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture(Key,ModifierKeys)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys)
- uid: System.Windows.Input.ModifierKeys
  parent: System.Windows.Input
  isExternal: false
  name: ModifierKeys
  nameWithType: ModifierKeys
  fullName: System.Windows.Input.ModifierKeys
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture(Key,ModifierKeys,String)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys,String)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Input.KeyGesture.DisplayString
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: DisplayString
  nameWithType: KeyGesture.DisplayString
  fullName: System.Windows.Input.KeyGesture.DisplayString
- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: GetDisplayStringForCulture(CultureInfo)
  nameWithType: KeyGesture.GetDisplayStringForCulture(CultureInfo)
  fullName: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(CultureInfo)
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Windows.Input.KeyGesture.Key
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Key
  nameWithType: KeyGesture.Key
  fullName: System.Windows.Input.KeyGesture.Key
- uid: System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Matches(Object,InputEventArgs)
  nameWithType: KeyGesture.Matches(Object,InputEventArgs)
  fullName: System.Windows.Input.KeyGesture.Matches(Object,InputEventArgs)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.InputEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: InputEventArgs
  nameWithType: InputEventArgs
  fullName: System.Windows.Input.InputEventArgs
- uid: System.Windows.Input.KeyGesture.Modifiers
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Modifiers
  nameWithType: KeyGesture.Modifiers
  fullName: System.Windows.Input.KeyGesture.Modifiers
- uid: System.Windows.Input.KeyGesture.#ctor*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture
  nameWithType: KeyGesture.KeyGesture
- uid: System.Windows.Input.KeyGesture.DisplayString*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: DisplayString
  nameWithType: KeyGesture.DisplayString
- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: GetDisplayStringForCulture
  nameWithType: KeyGesture.GetDisplayStringForCulture
- uid: System.Windows.Input.KeyGesture.Key*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Key
  nameWithType: KeyGesture.Key
- uid: System.Windows.Input.KeyGesture.Matches*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Matches
  nameWithType: KeyGesture.Matches
- uid: System.Windows.Input.KeyGesture.Modifiers*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Modifiers
  nameWithType: KeyGesture.Modifiers
