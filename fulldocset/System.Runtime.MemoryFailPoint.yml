### YamlMime:ManagedReference
items:
- uid: System.Runtime.MemoryFailPoint
  id: MemoryFailPoint
  children:
  - System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  - System.Runtime.MemoryFailPoint.Dispose
  - System.Runtime.MemoryFailPoint.Finalize
  langs:
  - csharp
  name: MemoryFailPoint
  nameWithType: MemoryFailPoint
  fullName: System.Runtime.MemoryFailPoint
  type: Class
  summary: "將記憶體資源不足，無法執行作業前檢查。 這個類別無法被繼承。"
  remarks: "> [!NOTE]> 這個類別僅供進階程式開發中的使用。       建立 MemoryFailPoint 類別的執行個體建立記憶體閘道。 記憶體閘檢查足夠的資源，再起始活動需要大量的記憶體。 在檢查失敗會導致<xref:System.InsufficientMemoryException>擲回例外狀況。</xref:System.InsufficientMemoryException> 這個例外狀況會防止從正在啟動作業，並減少可能的失敗，因為缺少資源。 這樣做可讓您降低效能，以避免<xref:System.OutOfMemoryException>例外狀況，可能導致不適當的程式碼中的任意位置中的例外狀況處理的任何狀態損毀。</xref:System.OutOfMemoryException>      > [!IMPORTANT] > 這個型別實作<xref:System.IDisposable>介面。</xref:System.IDisposable> 當您完成使用類型時，您應該會處置它直接或間接。 若要直接處置的類型，呼叫其<xref:System.IDisposable.Dispose%2A>方法中的`try` / `catch`區塊。</xref:System.IDisposable.Dispose%2A> 若要為其配置間接，使用語言建構例如`using`（C# 中） 或`Using`（在 Visual Basic)。 如需詳細資訊，請參閱中的 「 使用物件的實作 IDisposable 」 一節<xref:System.IDisposable>介面 > 主題。</xref:System.IDisposable>       藉由擲回<xref:System.InsufficientMemoryException>例外狀況，應用程式可以區分作業將無法完成評估部分完成的作業可能已損毀的應用程式狀態。</xref:System.InsufficientMemoryException> 這可讓應用程式的封閉式擴大原則，這可能需要卸載目前頻率減少為<xref:System.AppDomain>或回收處理序。</xref:System.AppDomain>       MemoryFailPoint 檢查是否足夠的記憶體和連續虛擬位址空間可以在所有記憶體回收堆積，而且可能會增加分頁檔大小。  MemoryFailPoint 可讓長期記憶體可用性的閘道，存留期間不保證，但呼叫端應該一律使用<xref:System.Runtime.MemoryFailPoint.Dispose%2A>方法，以確保並釋出 MemoryFailPoint 相關聯的資源。</xref:System.Runtime.MemoryFailPoint.Dispose%2A>       若要使用的記憶體閘道，您必須建立 MemoryFailPoint 物件，並指定百萬位元組 (MB) 的記憶體數目預期在下次執行作業使用。 如果記憶體不足，無法使用，<xref:System.InsufficientMemoryException>擲回例外狀況。</xref:System.InsufficientMemoryException>       建構函式的參數必須是正整數。 負值會引發<xref:System.ArgumentOutOfRangeException>例外狀況。</xref:System.ArgumentOutOfRangeException>       MemoryFailPoint 16 MB 的資料粒度的運作方式。 任何小於 16 MB 的值會被視為 16 MB，和其他值會被視為 16 MB 的下一個最大倍數。"
  example:
  - "MemoryFailPoint enables an application to slow itself to avoid running out of memory in a corrupting manner.  It should be used within a lexical scope.  The following example launches threads to process items in a work queue.  Before each thread is launched, the available memory resources are checked using MemoryFailPoint.  If an exception is thrown, the main method waits until memory is available before launching the next thread.  \n  \n [!code-cs[MemoryFailPoint#1](~/add/codesnippet/csharp/t-system.runtime.memoryf_1.cs)]"
  syntax:
    content: 'public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable'
  inheritance:
  - System.Object
  - System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: MemoryFailPoint(Int32)
  nameWithType: MemoryFailPoint.MemoryFailPoint(Int32)
  fullName: System.Runtime.MemoryFailPoint.MemoryFailPoint(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "初始化的新執行個體<xref href=&quot;System.Runtime.MemoryFailPoint&quot;></xref>類別，指定順利執行所需的記憶體數量。"
  remarks: "可以憑應用程式所處理的工作項目使用的記憶體數量。  若要估計您應用程式需要處理要求的記憶體數量，請考慮使用<xref:System.GC.GetTotalMemory%2A?displayProperty=fullName>方法，以判斷數量記憶體可用之前與之後呼叫此方法會處理工作項目。</xref:System.GC.GetTotalMemory%2A?displayProperty=fullName> 請參閱<xref:System.Runtime.MemoryFailPoint>類別程式碼範例以動態方式決定的值`sizeInMegabytes`參數。</xref:System.Runtime.MemoryFailPoint>"
  example:
  - "The following example demonstrates how to determine the amount of memory a method requires when executing. This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.  \n  \n [!code-cs[MemoryFailPoint#2](~/add/codesnippet/csharp/m-system.runtime.memoryf_1.cs)]"
  syntax:
    content: public MemoryFailPoint (int sizeInMegabytes);
    parameters:
    - id: sizeInMegabytes
      type: System.Int32
      description: "所需的記憶體大小 （mb）。 這必須是正值。"
  overload: System.Runtime.MemoryFailPoint.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "指定的記憶體大小是負數。"
  - type: System.InsufficientMemoryException
    commentId: T:System.InsufficientMemoryException
    description: "沒有記憶體不足，無法開始執行的閘道所保護的程式碼。"
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.Dispose
  id: Dispose
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: Dispose()
  nameWithType: MemoryFailPoint.Dispose()
  fullName: System.Runtime.MemoryFailPoint.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "所使用的資源全部釋出<xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref>。"
  remarks: "當您完成使用<xref:System.Runtime.MemoryFailPoint>.</xref:System.Runtime.MemoryFailPoint>呼叫 Dispose Dispose 方法會使<xref:System.Runtime.MemoryFailPoint>中無法使用的狀態。</xref:System.Runtime.MemoryFailPoint> 在呼叫<xref:System.Runtime.MemoryFailPoint>，您必須釋放所有參考<xref:System.Runtime.MemoryFailPoint>讓記憶體回收行程可以回收記憶體的<xref:System.Runtime.MemoryFailPoint>所佔用。</xref:System.Runtime.MemoryFailPoint> </xref:System.Runtime.MemoryFailPoint> </xref:System.Runtime.MemoryFailPoint> 如需詳細資訊，請參閱[清除 Unmanaged 資源上](~/add/includes/ajax-current-ext-md.md)和[實作 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      > [!NOTE] > 永遠呼叫 Dispose 之後，再放開您的最後一個參考至<xref:System.Runtime.MemoryFailPoint>。</xref:System.Runtime.MemoryFailPoint> 否則，它所使用的資源將不會釋放直到記憶體回收行程呼叫<xref:System.Runtime.MemoryFailPoint>物件的`Finalize`方法。</xref:System.Runtime.MemoryFailPoint>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Runtime.MemoryFailPoint.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.Finalize
  id: Finalize
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: Finalize()
  nameWithType: MemoryFailPoint.Finalize()
  fullName: System.Runtime.MemoryFailPoint.Finalize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "確認釋出資源，並在記憶體回收行程回收時執行其他清除作業<xref href=&quot;System.Runtime.MemoryFailPoint&quot;></xref>物件。"
  remarks: "準備最終處理而目前的物件時，記憶體回收行程會呼叫 Finalize 方法。"
  syntax:
    content: ~MemoryFailPoint ();
    parameters: []
  overload: System.Runtime.MemoryFailPoint.Finalize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  isExternal: false
  name: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InsufficientMemoryException
  parent: System
  isExternal: false
  name: InsufficientMemoryException
  nameWithType: InsufficientMemoryException
  fullName: System.InsufficientMemoryException
- uid: System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: MemoryFailPoint(Int32)
  nameWithType: MemoryFailPoint.MemoryFailPoint(Int32)
  fullName: System.Runtime.MemoryFailPoint.MemoryFailPoint(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.MemoryFailPoint.Dispose
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Dispose()
  nameWithType: MemoryFailPoint.Dispose()
  fullName: System.Runtime.MemoryFailPoint.Dispose()
- uid: System.Runtime.MemoryFailPoint.Finalize
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Finalize()
  nameWithType: MemoryFailPoint.Finalize()
  fullName: System.Runtime.MemoryFailPoint.Finalize()
- uid: System.Runtime.MemoryFailPoint.#ctor*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: MemoryFailPoint
  nameWithType: MemoryFailPoint.MemoryFailPoint
- uid: System.Runtime.MemoryFailPoint.Dispose*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Dispose
  nameWithType: MemoryFailPoint.Dispose
- uid: System.Runtime.MemoryFailPoint.Finalize*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Finalize
  nameWithType: MemoryFailPoint.Finalize
