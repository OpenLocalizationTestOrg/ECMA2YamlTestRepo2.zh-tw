### YamlMime:ManagedReference
items:
- uid: System.Threading.HostExecutionContext
  id: HostExecutionContext
  children:
  - System.Threading.HostExecutionContext.#ctor
  - System.Threading.HostExecutionContext.#ctor(System.Object)
  - System.Threading.HostExecutionContext.CreateCopy
  - System.Threading.HostExecutionContext.Dispose
  - System.Threading.HostExecutionContext.Dispose(System.Boolean)
  - System.Threading.HostExecutionContext.State
  langs:
  - csharp
  name: HostExecutionContext
  nameWithType: HostExecutionContext
  fullName: System.Threading.HostExecutionContext
  type: Class
  summary: "封裝並散佈跨執行緒的主控件執行內容。"
  remarks: "HostExecutionContext 是較大的<xref:System.Threading.ExecutionContext>.</xref:System.Threading.ExecutionContext>的一部分 主機內容移轉或流動，與執行內容。"
  syntax:
    content: 'public class HostExecutionContext : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.#ctor
  id: '#ctor'
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: HostExecutionContext()
  nameWithType: HostExecutionContext.HostExecutionContext()
  fullName: System.Threading.HostExecutionContext.HostExecutionContext()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "初始化的新執行個體<xref href=&quot;System.Threading.HostExecutionContext&quot;></xref>類別。"
  remarks: "預設建構函式會建立主機執行內容的<xref:System.Threading.HostExecutionContext.State%2A>屬性值是`null`。</xref:System.Threading.HostExecutionContext.State%2A>"
  syntax:
    content: public HostExecutionContext ();
    parameters: []
  overload: System.Threading.HostExecutionContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: HostExecutionContext(Object)
  nameWithType: HostExecutionContext.HostExecutionContext(Object)
  fullName: System.Threading.HostExecutionContext.HostExecutionContext(Object)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "初始化的新執行個體<xref href=&quot;System.Threading.HostExecutionContext&quot;></xref>類別使用指定的狀態。"
  remarks: "<xref:System.Threading.HostExecutionContext>隨附於<xref:System.Threading.ExecutionContext>.</xref:System.Threading.ExecutionContext> </xref:System.Threading.HostExecutionContext> `state`代表一個安全控制代碼，其中包含`IUnknown`主控件的指標。"
  syntax:
    content: public HostExecutionContext (object state);
    parameters:
    - id: state
      type: System.Object
      description: "代表主機執行的內容狀態的物件。"
  overload: System.Threading.HostExecutionContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.CreateCopy
  id: CreateCopy
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: CreateCopy()
  nameWithType: HostExecutionContext.CreateCopy()
  fullName: System.Threading.HostExecutionContext.CreateCopy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "建立一份目前的主機執行內容。"
  remarks: "複製可以當做參數來<xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName>方法呼叫。</xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName>"
  syntax:
    content: public virtual System.Threading.HostExecutionContext CreateCopy ();
    parameters: []
    return:
      type: System.Threading.HostExecutionContext
      description: "A <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref>物件，代表目前執行緒的主機內容。"
  overload: System.Threading.HostExecutionContext.CreateCopy*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.Dispose
  id: Dispose
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: Dispose()
  nameWithType: HostExecutionContext.Dispose()
  fullName: System.Threading.HostExecutionContext.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "目前的執行個體所使用的資源全部釋出<xref href=&quot;System.Threading.HostExecutionContext&quot;></xref>類別。"
  remarks: "呼叫`Dispose`當您完成使用<xref:System.Threading.HostExecutionContext>.</xref:System.Threading.HostExecutionContext> `Dispose`方法會使<xref:System.Threading.HostExecutionContext>中無法使用的狀態。</xref:System.Threading.HostExecutionContext> 在呼叫`Dispose`，您必須釋放所有參考<xref:System.Threading.HostExecutionContext>讓記憶體回收行程可以回收記憶體的<xref:System.Threading.HostExecutionContext>所佔用。</xref:System.Threading.HostExecutionContext> </xref:System.Threading.HostExecutionContext>       如需詳細資訊，請參閱[清除 Unmanaged 資源上](~/add/includes/ajax-current-ext-md.md)和[實作 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      > [!NOTE] > 永遠呼叫`Dispose`釋放您的最後一個參考至<xref:System.Threading.HostExecutionContext>。</xref:System.Threading.HostExecutionContext>之前 否則，它所使用的資源將不會釋放直到記憶體回收行程呼叫<xref:System.Threading.HostExecutionContext>物件的`Finalize`方法。</xref:System.Threading.HostExecutionContext>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Threading.HostExecutionContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HostExecutionContext.Dispose(Boolean)
  fullName: System.Threading.HostExecutionContext.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "當在衍生類別中覆寫時，釋放所使用的 unmanaged 的資源<xref:System.Threading.WaitHandle>，並選擇性釋放 managed 的資源。</xref:System.Threading.WaitHandle>"
  remarks: "這個方法會呼叫<xref:System.Threading.HostExecutionContext.Dispose>方法多載和完成項。</xref:System.Threading.HostExecutionContext.Dispose> <xref:System.Threading.HostExecutionContext.Dispose>叫用這個受保護的方法與`disposing`參數設定為`true`。</xref:System.Threading.HostExecutionContext.Dispose> 完成項會叫用此方法時`disposing`設`false`。       當`disposing`參數是`true`，這個方法的任何 managed 物件所持有的資源全部釋出這個<xref:System.Threading.HostExecutionContext>參考。</xref:System.Threading.HostExecutionContext> 這個方法會叫用`Dispose`每個參考物件的方法。       這個方法可以被其他物件呼叫多次。 在覆寫這個方法，小心不要參考先前處置的早期呼叫中的物件。"
  syntax:
    content: public virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>表示釋放 managed 和 unmanaged 資源，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>表示只釋放 unmanaged 的資源。"
  overload: System.Threading.HostExecutionContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.State
  id: State
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: State
  nameWithType: HostExecutionContext.State
  fullName: System.Threading.HostExecutionContext.State
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "取得或設定主控件執行內容的狀態。"
  remarks: "狀態屬性值都代表一個安全控制代碼，其中包含`IUnknown`主控件的指標。"
  syntax:
    content: protected object State { get; set; }
    return:
      type: System.Object
      description: "代表主機執行的內容狀態的物件。"
  overload: System.Threading.HostExecutionContext.State*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Threading.HostExecutionContext.#ctor
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: HostExecutionContext()
  nameWithType: HostExecutionContext.HostExecutionContext()
  fullName: System.Threading.HostExecutionContext.HostExecutionContext()
- uid: System.Threading.HostExecutionContext.#ctor(System.Object)
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: HostExecutionContext(Object)
  nameWithType: HostExecutionContext.HostExecutionContext(Object)
  fullName: System.Threading.HostExecutionContext.HostExecutionContext(Object)
- uid: System.Threading.HostExecutionContext.CreateCopy
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: CreateCopy()
  nameWithType: HostExecutionContext.CreateCopy()
  fullName: System.Threading.HostExecutionContext.CreateCopy()
- uid: System.Threading.HostExecutionContext
  parent: System.Threading
  isExternal: false
  name: HostExecutionContext
  nameWithType: HostExecutionContext
  fullName: System.Threading.HostExecutionContext
- uid: System.Threading.HostExecutionContext.Dispose
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: Dispose()
  nameWithType: HostExecutionContext.Dispose()
  fullName: System.Threading.HostExecutionContext.Dispose()
- uid: System.Threading.HostExecutionContext.Dispose(System.Boolean)
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HostExecutionContext.Dispose(Boolean)
  fullName: System.Threading.HostExecutionContext.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.HostExecutionContext.State
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: State
  nameWithType: HostExecutionContext.State
  fullName: System.Threading.HostExecutionContext.State
- uid: System.Threading.HostExecutionContext.#ctor*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: HostExecutionContext
  nameWithType: HostExecutionContext.HostExecutionContext
- uid: System.Threading.HostExecutionContext.CreateCopy*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: CreateCopy
  nameWithType: HostExecutionContext.CreateCopy
- uid: System.Threading.HostExecutionContext.Dispose*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: Dispose
  nameWithType: HostExecutionContext.Dispose
- uid: System.Threading.HostExecutionContext.State*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: State
  nameWithType: HostExecutionContext.State
