### YamlMime:ManagedReference
items:
- uid: System.Windows.LocalValueEntry
  id: LocalValueEntry
  children:
  - System.Windows.LocalValueEntry.Equals(System.Object)
  - System.Windows.LocalValueEntry.GetHashCode
  - System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)
  - System.Windows.LocalValueEntry.op_Inequality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)
  - System.Windows.LocalValueEntry.Property
  - System.Windows.LocalValueEntry.Value
  langs:
  - csharp
  name: LocalValueEntry
  nameWithType: LocalValueEntry
  fullName: System.Windows.LocalValueEntry
  type: Struct
  summary: "表示屬性的識別項和屬性值的本機設定相依性屬性。"
  remarks: "取得<xref:System.Windows.LocalValueEnumerator.Current%2A><xref:System.Windows.LocalValueEnumerator>.</xref:System.Windows.LocalValueEnumerator>屬性</xref:System.Windows.LocalValueEnumerator.Current%2A>的值時，會傳回此類別的執行個體 所有 LocalValueEntry 屬性都是唯讀的。       這個類別具有公用建構函式。 若要取得您必須先呼叫這個類別的執行個體<xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>，然後取得的值<xref:System.Windows.LocalValueEnumerator.Current%2A>從傳回<xref:System.Windows.LocalValueEnumerator>.</xref:System.Windows.LocalValueEnumerator> </xref:System.Windows.LocalValueEnumerator.Current%2A> </xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>"
  example:
  - "The following example iterates locally set values of a <xref:System.Windows.DependencyObject> and queries LocalValueEntry properties.  \n  \n [!code-cs[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/csharp/DPClearValue/default.xaml.cs#iteratelocalvaluesandclear)]\n [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/visualbasic/DPClearValue/default.xaml.vb#iteratelocalvaluesandclear)]"
  syntax:
    content: public struct LocalValueEntry
  inheritance:
  - System.ValueType
  implements: []
  platform:
  - net462
- uid: System.Windows.LocalValueEntry.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.LocalValueEntry
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: LocalValueEntry.Equals(Object)
  fullName: System.Windows.LocalValueEntry.Equals(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "判斷兩個<xref href=&quot;System.Windows.LocalValueEntry&quot;></xref>執行個體會相等。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "<xref href=&quot;System.Windows.LocalValueEntry&quot;> </xref>要與目前比較<xref href=&quot;System.Windows.LocalValueEntry&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "這<> *> 實作比較的值<> *>，可能會比較的值和<> *>。<> </> *> 元件<xref href=&quot;System.Windows.LocalValueEntry&quot;></xref>是實值類型，因此一律為位元比較。 如<xref:System.Windows.LocalValueEntry.Value*>元件，此實作會使用位元比較如果它是實值類型。</xref:System.Windows.LocalValueEntry.Value*> 針對在本機上設定屬性有參考類型的行為會委託給該類型的等號比較決策機制，因為它只會使用內部 = = 運算子，在兩個值。 根據預設，這會是參考的值是否相等，因此將整個相等<xref href=&quot;System.Windows.LocalValueEntry&quot;></xref>就會變成參考相等。"
  overload: System.Windows.LocalValueEntry.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LocalValueEntry.GetHashCode
  id: GetHashCode
  parent: System.Windows.LocalValueEntry
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: LocalValueEntry.GetHashCode()
  fullName: System.Windows.LocalValueEntry.GetHashCode()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "傳回這個雜湊程式碼<xref href=&quot;System.Windows.LocalValueEntry&quot;> </xref>。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "帶正負號的 32 位元整數值。"
  overload: System.Windows.LocalValueEntry.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)
  id: op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)
  parent: System.Windows.LocalValueEntry
  langs:
  - csharp
  name: op_Equality(LocalValueEntry,LocalValueEntry)
  nameWithType: LocalValueEntry.op_Equality(LocalValueEntry,LocalValueEntry)
  fullName: System.Windows.LocalValueEntry.op_Equality(LocalValueEntry,LocalValueEntry)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "比較指定<xref href=&quot;System.Windows.LocalValueEntry&quot;></xref>執行個體，判斷它們是否相同。"
  remarks: "此實作中相等比較的值<xref:System.Windows.LocalValueEntry.Property%2A>，並可能會比較值的<xref:System.Windows.LocalValueEntry.Value%2A>。</xref:System.Windows.LocalValueEntry.Value%2A> </xref:System.Windows.LocalValueEntry.Property%2A> <xref:System.Windows.LocalValueEntry.Property%2A>元件<xref:System.Windows.LocalValueEntry>永遠是實值類型，因此這項比較一律為位元的值比較。</xref:System.Windows.LocalValueEntry> </xref:System.Windows.LocalValueEntry.Property%2A> 如<xref:System.Windows.LocalValueEntry.Value%2A>元件，此實作會使用位元比較如果它是實值類型。</xref:System.Windows.LocalValueEntry.Value%2A>       針對在本機上設定屬性有參考類型的行為會委託給該類型的等號比較決策機制，因為它使用`==`運算子對這兩個內部值。 根據預設，這是參考的值相等。"
  syntax:
    content: public static bool op_Equality (System.Windows.LocalValueEntry obj1, System.Windows.LocalValueEntry obj2);
    parameters:
    - id: obj1
      type: System.Windows.LocalValueEntry
      description: "要比較的第一個執行個體。"
    - id: obj2
      type: System.Windows.LocalValueEntry
      description: "要比較的第二個執行個體。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <code>obj1</code><xref href=&quot;System.Windows.LocalValueEntry&quot;></xref> is equal to the <code>obj2</code><xref href=&quot;System.Windows.LocalValueEntry&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.LocalValueEntry.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LocalValueEntry.op_Inequality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)
  id: op_Inequality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)
  parent: System.Windows.LocalValueEntry
  langs:
  - csharp
  name: op_Inequality(LocalValueEntry,LocalValueEntry)
  nameWithType: LocalValueEntry.op_Inequality(LocalValueEntry,LocalValueEntry)
  fullName: System.Windows.LocalValueEntry.op_Inequality(LocalValueEntry,LocalValueEntry)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "比較指定<xref href=&quot;System.Windows.LocalValueEnumerator&quot;></xref>執行個體，判斷它們是否不同。"
  syntax:
    content: public static bool op_Inequality (System.Windows.LocalValueEntry obj1, System.Windows.LocalValueEntry obj2);
    parameters:
    - id: obj1
      type: System.Windows.LocalValueEntry
      description: "要比較的第一個執行個體。"
    - id: obj2
      type: System.Windows.LocalValueEntry
      description: "要比較的第二個執行個體。"
    return:
      type: System.Boolean
      description: "這項實作比較的值<> *> 和<> *> 元件<xref href=&quot;System.Windows.LocalValueEntry&quot;> </xref>。 <> </> *> 元件<xref href=&quot;System.Windows.LocalValueEntry&quot;></xref>永遠是實值類型，因此這項比較一律為位元比較。如<> *> 元件，此實作會使用位元比較如果它是實值類型。       針對在本機上設定屬性有參考類型的行為會委託給該類型的等號比較決策機制，因為它使用<xref uid=&quot;langword_csharp_==&quot; name=&quot;==&quot; href=&quot;&quot;></xref>運算子對這兩個內部值。 根據預設，這是參考的值相等。"
  overload: System.Windows.LocalValueEntry.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LocalValueEntry.Property
  id: Property
  parent: System.Windows.LocalValueEntry
  langs:
  - csharp
  name: Property
  nameWithType: LocalValueEntry.Property
  fullName: System.Windows.LocalValueEntry.Property
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "取得本機設定的識別項由這個項目之相依性屬性。"
  remarks: "此屬性用於查詢的識別項的本機設定相依性屬性，並取得它的中繼資料。 取得中繼資料可能包含屬性的屬性是否支援屬性值繼承的初始預設值。"
  syntax:
    content: public System.Windows.DependencyProperty Property { get; }
    return:
      type: System.Windows.DependencyProperty
      description: "本機設定的識別項相依性屬性。"
  overload: System.Windows.LocalValueEntry.Property*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LocalValueEntry.Value
  id: Value
  parent: System.Windows.LocalValueEntry
  langs:
  - csharp
  name: Value
  nameWithType: LocalValueEntry.Value
  fullName: System.Windows.LocalValueEntry.Value
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "取得值的本機設定相依性屬性。"
  remarks: "若要判斷此值更特定的類型，檢查<xref:System.Windows.LocalValueEntry.Property%2A>目前<xref:System.Windows.LocalValueEntry>並取得其<xref:System.Windows.DependencyProperty.PropertyType%2A>.</xref:System.Windows.DependencyProperty.PropertyType%2A> </xref:System.Windows.LocalValueEntry> </xref:System.Windows.LocalValueEntry.Property%2A>"
  syntax:
    content: public object Value { get; }
    return:
      type: System.Object
      description: "本機設定的值當做物件的相依性屬性。"
  overload: System.Windows.LocalValueEntry.Value*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.Windows.LocalValueEntry.Equals(System.Object)
  parent: System.Windows.LocalValueEntry
  isExternal: false
  name: Equals(Object)
  nameWithType: LocalValueEntry.Equals(Object)
  fullName: System.Windows.LocalValueEntry.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.LocalValueEntry.GetHashCode
  parent: System.Windows.LocalValueEntry
  isExternal: false
  name: GetHashCode()
  nameWithType: LocalValueEntry.GetHashCode()
  fullName: System.Windows.LocalValueEntry.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)
  parent: System.Windows.LocalValueEntry
  isExternal: false
  name: op_Equality(LocalValueEntry,LocalValueEntry)
  nameWithType: LocalValueEntry.op_Equality(LocalValueEntry,LocalValueEntry)
  fullName: System.Windows.LocalValueEntry.op_Equality(LocalValueEntry,LocalValueEntry)
- uid: System.Windows.LocalValueEntry
  parent: System.Windows
  isExternal: false
  name: LocalValueEntry
  nameWithType: LocalValueEntry
  fullName: System.Windows.LocalValueEntry
- uid: System.Windows.LocalValueEntry.op_Inequality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)
  parent: System.Windows.LocalValueEntry
  isExternal: false
  name: op_Inequality(LocalValueEntry,LocalValueEntry)
  nameWithType: LocalValueEntry.op_Inequality(LocalValueEntry,LocalValueEntry)
  fullName: System.Windows.LocalValueEntry.op_Inequality(LocalValueEntry,LocalValueEntry)
- uid: System.Windows.LocalValueEntry.Property
  parent: System.Windows.LocalValueEntry
  isExternal: false
  name: Property
  nameWithType: LocalValueEntry.Property
  fullName: System.Windows.LocalValueEntry.Property
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.LocalValueEntry.Value
  parent: System.Windows.LocalValueEntry
  isExternal: false
  name: Value
  nameWithType: LocalValueEntry.Value
  fullName: System.Windows.LocalValueEntry.Value
- uid: System.Windows.LocalValueEntry.Equals*
  parent: System.Windows.LocalValueEntry
  isExternal: false
  name: Equals
  nameWithType: LocalValueEntry.Equals
- uid: System.Windows.LocalValueEntry.GetHashCode*
  parent: System.Windows.LocalValueEntry
  isExternal: false
  name: GetHashCode
  nameWithType: LocalValueEntry.GetHashCode
- uid: System.Windows.LocalValueEntry.op_Equality*
  parent: System.Windows.LocalValueEntry
  isExternal: false
  name: op_Equality
  nameWithType: LocalValueEntry.op_Equality
- uid: System.Windows.LocalValueEntry.op_Inequality*
  parent: System.Windows.LocalValueEntry
  isExternal: false
  name: op_Inequality
  nameWithType: LocalValueEntry.op_Inequality
- uid: System.Windows.LocalValueEntry.Property*
  parent: System.Windows.LocalValueEntry
  isExternal: false
  name: Property
  nameWithType: LocalValueEntry.Property
- uid: System.Windows.LocalValueEntry.Value*
  parent: System.Windows.LocalValueEntry
  isExternal: false
  name: Value
  nameWithType: LocalValueEntry.Value
