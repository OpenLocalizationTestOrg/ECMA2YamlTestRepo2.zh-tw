### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.ReflectionPermission
  id: ReflectionPermission
  children:
  - System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.ReflectionPermissionFlag)
  - System.Security.Permissions.ReflectionPermission.Copy
  - System.Security.Permissions.ReflectionPermission.Flags
  - System.Security.Permissions.ReflectionPermission.FromXml(System.Security.SecurityElement)
  - System.Security.Permissions.ReflectionPermission.Intersect(System.Security.IPermission)
  - System.Security.Permissions.ReflectionPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.Permissions.ReflectionPermission.IsUnrestricted
  - System.Security.Permissions.ReflectionPermission.ToXml
  - System.Security.Permissions.ReflectionPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: ReflectionPermission
  nameWithType: ReflectionPermission
  fullName: System.Security.Permissions.ReflectionPermission
  type: Class
  summary: "控制存取非公用類型和成員透過<xref href=&quot;System.Reflection&quot;></xref>應用程式開發介面。 控制某些功能<xref href=&quot;System.Reflection.Emit&quot;></xref>應用程式開發介面。"
  remarks: "沒有 ReflectionPermission，程式碼可以使用反映來存取物件的 public 成員。 程式碼與 ReflectionPermission 適當<xref:System.Security.Permissions.ReflectionPermissionFlag>旗標可以存取`protected`和`private`物件的成員。</xref:System.Security.Permissions.ReflectionPermissionFlag>      > [!CAUTION] > ReflectionPermission 可以提供存取非公用類型和成員，因為我們建議您不要不授與 ReflectionPermission 網際網路程式碼，除了與<xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName>旗標。</xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> <xref:System.Security.Permissions.ReflectionPermissionFlag>允許存取非公用成員，必須等於，非公用成員的授權集的限制或非公用成員的程式碼的授權集的子集。</xref:System.Security.Permissions.ReflectionPermissionFlag>       某些特定功能的反映發出，例如發出偵錯符號，需要與 ReflectionPermission<xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName>旗標。</xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName>       如需詳細資訊，請參閱<xref:System.Security.Permissions.ReflectionPermissionFlag>列舉型別。</xref:System.Security.Permissions.ReflectionPermissionFlag>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ReflectionPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements:
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers:
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: ReflectionPermission(PermissionState)
  nameWithType: ReflectionPermission.ReflectionPermission(PermissionState)
  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;></xref>使用完全限制或無限制的權限所指定的類別。"
  remarks: "會建立完全受限制 (`None`) 或`Unrestricted`中繼資料的存取。"
  example:
  - "The following code example shows the use of the ReflectionPermission constructor. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#7](~/add/codesnippet/visualbasic/a6514c98-a52a-4b79-a783-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#7](~/add/codesnippet/csharp/a6514c98-a52a-4b79-a783-_1.cs)]"
  syntax:
    content: public ReflectionPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "其中一個<xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref>值。"
  overload: System.Security.Permissions.ReflectionPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> state </code>參數不是有效的值<xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.ReflectionPermissionFlag)
  id: '#ctor(System.Security.Permissions.ReflectionPermissionFlag)'
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: ReflectionPermission(ReflectionPermissionFlag)
  nameWithType: ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)
  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;></xref>類別指定的存取權。"
  remarks: ''
  example:
  - "The following code example shows the use of the ReflectionPermission constructor. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#8](~/add/codesnippet/visualbasic/d03b017b-73f9-4633-80a5-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#8](~/add/codesnippet/csharp/d03b017b-73f9-4633-80a5-_1.cs)]"
  syntax:
    content: public ReflectionPermission (System.Security.Permissions.ReflectionPermissionFlag flag);
    parameters:
    - id: flag
      type: System.Security.Permissions.ReflectionPermissionFlag
      description: "其中一個<xref href=&quot;System.Security.Permissions.ReflectionPermissionFlag&quot;></xref>值。"
  overload: System.Security.Permissions.ReflectionPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> flag </code>參數不是有效的值<xref href=&quot;System.Security.Permissions.ReflectionPermissionFlag&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.Copy
  id: Copy
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: ReflectionPermission.Copy()
  fullName: System.Security.Permissions.ReflectionPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "建立並傳回目前權限的相同複本。"
  remarks: "一份權限表示與原始的權限資源相同的存取權。"
  example:
  - "The following code example shows the behavior of the Copy method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#5](~/add/codesnippet/visualbasic/m-system.security.permis_6_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#5](~/add/codesnippet/csharp/m-system.security.permis_6_1.cs)]"
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "一份目前的權限。"
  overload: System.Security.Permissions.ReflectionPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.Flags
  id: Flags
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: Flags
  nameWithType: ReflectionPermission.Flags
  fullName: System.Security.Permissions.ReflectionPermission.Flags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "取得或設定目前權限允許的反映類型。"
  remarks: ''
  example:
  - "The following code example shows the use of the Flags property. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#2](~/add/codesnippet/visualbasic/p-system.security.permis_7_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#2](~/add/codesnippet/csharp/p-system.security.permis_7_1.cs)]"
  syntax:
    content: public System.Security.Permissions.ReflectionPermissionFlag Flags { get; set; }
    return:
      type: System.Security.Permissions.ReflectionPermissionFlag
      description: "目前權限設定旗標。"
  overload: System.Security.Permissions.ReflectionPermission.Flags*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "嘗試將此屬性設定為無效的值。 請參閱<xref href=&quot;System.Security.Permissions.ReflectionPermissionFlag&quot;></xref>取得有效的值。"
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: ReflectionPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.ReflectionPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "重新建構具有指定狀態的 XML 編碼方式的權限。"
  remarks: ''
  example:
  - "The following code example shows the behavior of the FromXml method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#6](~/add/codesnippet/visualbasic/31379e48-984f-4b70-8613-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#6](~/add/codesnippet/csharp/31379e48-984f-4b70-8613-_1.cs)]"
  syntax:
    content: public override void FromXml (System.Security.SecurityElement esd);
    parameters:
    - id: esd
      type: System.Security.SecurityElement
      description: "XML 編碼用來重新建構權限。"
  overload: System.Security.Permissions.ReflectionPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>esd</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> esd </code>參數不是有效的權限項目。       -或- <code> esd </code>參數的版本號碼不正確。"
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: ReflectionPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "建立並傳回目前權限和指定的權限交集的權限。"
  remarks: "兩個權限的交集會描述一組共同兩者描述的作業的權限。 只有通過這兩個原始的使用權限的需求會通過交集。"
  example:
  - "The following code example shows the behavior of the Intersect method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#4](~/add/codesnippet/visualbasic/0231533f-ad3c-4735-a9a6-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#4](~/add/codesnippet/csharp/0231533f-ad3c-4735-a9a6-_1.cs)]"
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "要與目前權限產生交集的權限。 它必須是類型的相同與目前權限。"
    return:
      type: System.Security.IPermission
      description: "代表目前權限與指定權限交集的新權限。 這個新權限是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果交集是空的。"
  overload: System.Security.Permissions.ReflectionPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code>參數不是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>而且不屬於相同的類型與目前權限。"
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: ReflectionPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "判斷目前權限是否為指定的權限的子集。"
  remarks: "如果目前權限會指定一組完全包含所指定的權限的作業，目前的權限會是所指定權限的子集。 例如，表示 C:\\example.txt 的存取權限是到 c︰ 代表存取權限的子集\\\\。 如果此方法傳回`true`，目前的權限，表示沒有存取受保護的資源比指定的權限。"
  example:
  - "The following code example shows the behavior of the IsSubsetOf method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#2](~/add/codesnippet/visualbasic/4d20fd34-7dad-48da-8000-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#2](~/add/codesnippet/csharp/4d20fd34-7dad-48da-8000-_1.cs)]"
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "要測試子集關聯性的權限。 此權限必須是類型的相同與目前權限。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果目前權限是指定的權限的子集否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Permissions.ReflectionPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code>參數不是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>而且不屬於相同的類型與目前權限。"
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: ReflectionPermission.IsUnrestricted()
  fullName: System.Security.Permissions.ReflectionPermission.IsUnrestricted()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "傳回值，指出目前的權限是否不受限制。"
  remarks: "不受限制的權限，表示存取權限所保護的所有資源。"
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果目前權限不受限制;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Permissions.ReflectionPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.ToXml
  id: ToXml
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: ReflectionPermission.ToXml()
  fullName: System.Security.Permissions.ReflectionPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "建立權限和其目前狀態的 XML 編碼方式。"
  remarks: ''
  example:
  - "The following code example shows the behavior of the ToXml method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#6](~/add/codesnippet/visualbasic/m-system.security.permis_18_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#6](~/add/codesnippet/csharp/m-system.security.permis_18_1.cs)]"
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "權限，包括任何狀態資訊的 XML 編碼方式。"
  overload: System.Security.Permissions.ReflectionPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: ReflectionPermission.Union(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "建立權限聯集的目前的權限與指定權限。"
  remarks: "要聯集呼叫的結果是權限，表示代表的所有作業目前的權限和指定的權限。 傳遞其中一個權限的任何要求會傳遞它們的聯集。"
  example:
  - "The following code example shows the behavior of the Union method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#3](~/add/codesnippet/visualbasic/e04a2468-b512-4092-a730-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#3](~/add/codesnippet/csharp/e04a2468-b512-4092-a730-_1.cs)]"
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission other);
    parameters:
    - id: other
      type: System.Security.IPermission
      description: "與目前權限結合的權限。 它必須是類型的相同與目前權限。"
    return:
      type: System.Security.IPermission
      description: "新的權限，表示目前的權限與指定權限的聯集。"
  overload: System.Security.Permissions.ReflectionPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> other </code>參數不是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>而且不屬於相同的類型與目前權限。"
  platform:
  - net462
references:
- uid: System.Security.CodeAccessPermission
  isExternal: false
  name: System.Security.CodeAccessPermission
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: ReflectionPermission(PermissionState)
  nameWithType: ReflectionPermission.ReflectionPermission(PermissionState)
  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.ReflectionPermissionFlag)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: ReflectionPermission(ReflectionPermissionFlag)
  nameWithType: ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)
  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)
- uid: System.Security.Permissions.ReflectionPermissionFlag
  parent: System.Security.Permissions
  isExternal: false
  name: ReflectionPermissionFlag
  nameWithType: ReflectionPermissionFlag
  fullName: System.Security.Permissions.ReflectionPermissionFlag
- uid: System.Security.Permissions.ReflectionPermission.Copy
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Copy()
  nameWithType: ReflectionPermission.Copy()
  fullName: System.Security.Permissions.ReflectionPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.ReflectionPermission.Flags
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Flags
  nameWithType: ReflectionPermission.Flags
  fullName: System.Security.Permissions.ReflectionPermission.Flags
- uid: System.Security.Permissions.ReflectionPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: ReflectionPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.ReflectionPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Permissions.ReflectionPermission.Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: ReflectionPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.Intersect(IPermission)
- uid: System.Security.Permissions.ReflectionPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: ReflectionPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.ReflectionPermission.IsUnrestricted
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: ReflectionPermission.IsUnrestricted()
  fullName: System.Security.Permissions.ReflectionPermission.IsUnrestricted()
- uid: System.Security.Permissions.ReflectionPermission.ToXml
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: ToXml()
  nameWithType: ReflectionPermission.ToXml()
  fullName: System.Security.Permissions.ReflectionPermission.ToXml()
- uid: System.Security.Permissions.ReflectionPermission.Union(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: ReflectionPermission.Union(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.Union(IPermission)
- uid: System.Security.Permissions.ReflectionPermission.#ctor*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: ReflectionPermission
  nameWithType: ReflectionPermission.ReflectionPermission
- uid: System.Security.Permissions.ReflectionPermission.Copy*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Copy
  nameWithType: ReflectionPermission.Copy
- uid: System.Security.Permissions.ReflectionPermission.Flags*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Flags
  nameWithType: ReflectionPermission.Flags
- uid: System.Security.Permissions.ReflectionPermission.FromXml*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: FromXml
  nameWithType: ReflectionPermission.FromXml
- uid: System.Security.Permissions.ReflectionPermission.Intersect*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Intersect
  nameWithType: ReflectionPermission.Intersect
- uid: System.Security.Permissions.ReflectionPermission.IsSubsetOf*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: ReflectionPermission.IsSubsetOf
- uid: System.Security.Permissions.ReflectionPermission.IsUnrestricted*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: ReflectionPermission.IsUnrestricted
- uid: System.Security.Permissions.ReflectionPermission.ToXml*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: ToXml
  nameWithType: ReflectionPermission.ToXml
- uid: System.Security.Permissions.ReflectionPermission.Union*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Union
  nameWithType: ReflectionPermission.Union
