### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.KeyBinding
  id: KeyBinding
  children:
  - System.Windows.Input.KeyBinding.#ctor
  - System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)
  - System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  - System.Windows.Input.KeyBinding.CreateInstanceCore
  - System.Windows.Input.KeyBinding.Gesture
  - System.Windows.Input.KeyBinding.Key
  - System.Windows.Input.KeyBinding.KeyProperty
  - System.Windows.Input.KeyBinding.Modifiers
  - System.Windows.Input.KeyBinding.ModifiersProperty
  langs:
  - csharp
  name: KeyBinding
  nameWithType: KeyBinding
  fullName: System.Windows.Input.KeyBinding
  type: Class
  summary: "將繫結<xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>至<xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> (或另一個<xref:System.Windows.Input.ICommand>實作)。</xref:System.Windows.Input.ICommand>"
  remarks: "將按鍵<xref:System.Windows.Input.KeyGesture>與<xref:System.Windows.Input.ICommand>，例如<xref:System.Windows.Input.RoutedCommand>.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.KeyGesture> <xref:System.Windows.Input.RoutedCommand>主要的實作，<xref:System.Windows.Input.ICommand>介面[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]指揮系統。</xref:System.Windows.Input.ICommand></xref:System.Windows.Input.RoutedCommand>  在一般情況下，當<xref:System.Windows.Input.KeyGesture>執行此命令會叫用，雖然命令行為會進一步受特定命令的因素例如<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>值。</xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> </xref:System.Windows.Input.KeyGesture>  如需命令的詳細資訊，請參閱[指揮概觀](~/add/includes/ajax-current-ext-md.md)。       除了函式和數字鍵台的有效金鑰<xref:System.Windows.Input.KeyGesture>必須剛好包含一個<xref:System.Windows.Input.Key>和一個或多個<xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key> </xref:System.Windows.Input.KeyGesture>  函式和數字鍵台金鑰不需要輔助按鍵才能有效<xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> 您可指定了無效<xref:System.Windows.Input.KeyGesture>與無效的關聯筆勢，透過按鍵繫結關係和[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]或程式碼。</xref:System.Windows.Input.KeyGesture> 比方說，便可防止建立和繫結無法驗證<xref:System.Windows.Input.KeyGesture>，其中包含只找到索引鍵，或只修飾詞而沒有索引鍵。</xref:System.Windows.Input.KeyGesture> 這類按鍵會永遠不會嘗試叫用其相關聯的命令。       定義中的按鍵時[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]有兩種方式來指定<xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> 第一種方式，來建立在 KeyBinding[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]是定義<xref:System.Windows.Input.KeyBinding.Gesture%2A>按鍵繫結關係的項目，可讓一個語法來指定機碼和修飾詞，以單一字串，例如&quot;CTRL + P&quot;的屬性。</xref:System.Windows.Input.KeyBinding.Gesture%2A> 第二個方法是定義<xref:System.Windows.Input.KeyBinding.Key%2A>屬性和<xref:System.Windows.Input.KeyBinding.Modifiers%2A>KeyBinding 元素的屬性。</xref:System.Windows.Input.KeyBinding.Modifiers%2A> </xref:System.Windows.Input.KeyBinding.Key%2A> 這兩種設定<xref:System.Windows.Input.KeyGesture>相等並修改相同的基礎物件，但會有衝突，如果兩個可用。</xref:System.Windows.Input.KeyGesture>  在案例時<xref:System.Windows.Input.KeyBinding.Key%2A>， <xref:System.Windows.Input.KeyBinding.Modifiers%2A>，且<xref:System.Windows.Input.KeyBinding.Gesture%2A>屬性已設定完畢，的屬性定義上一次將會使用<xref:System.Windows.Input.KeyGesture>。</xref:System.Windows.Input.KeyGesture> </xref:System.Windows.Input.KeyBinding.Gesture%2A> </xref:System.Windows.Input.KeyBinding.Modifiers%2A> </xref:System.Windows.Input.KeyBinding.Key%2A> 您可能有的情況下其中例如<xref:System.Windows.Input.KeyBinding.Key%2A>組最後將會覆寫索引鍵元件上述筆勢的但保留筆勢的修飾詞相同。</xref:System.Windows.Input.KeyBinding.Key%2A> 一般情況下，建議您只使用<xref:System.Windows.Input.KeyBinding.Gesture%2A>屬性從[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]; 這將可避免模稜兩可，提供最有效率的語法，並可提供最直接的序列化表示。</xref:System.Windows.Input.KeyBinding.Gesture%2A>       按鍵可以定義特定物件或類別層級所註冊<xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A>的<xref:System.Windows.Input.CommandManager>類別。</xref:System.Windows.Input.CommandManager> </xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> 定義按鍵繫結關係的最常見方式是設定控制項範本內<xref:System.Windows.UIElement.InputBindings%2A>屬性[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]藉由宣告一或多個<xref:System.Windows.Input.MouseBinding>或按鍵繫結關係的項目。</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.UIElement.InputBindings%2A>"
  example:
  - "The following example creates a KeyBinding and adds it to the <xref:System.Windows.Input.InputBindingCollection> of the root window.  \n  \n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]  \n  \n [!code-cs[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerkeybindingcodebehind)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerkeybindingcodebehind)]"
  syntax:
    content: 'public class KeyBinding : System.Windows.Input.InputBinding'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Freezable
  - System.Windows.Input.InputBinding
  implements: []
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Freezable.CanFreeze
  - System.Windows.Freezable.Changed
  - System.Windows.Freezable.Clone
  - System.Windows.Freezable.CloneCurrentValue
  - System.Windows.Freezable.CreateInstance
  - System.Windows.Freezable.Freeze
  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)
  - System.Windows.Freezable.FreezeCore(System.Boolean)
  - System.Windows.Freezable.GetAsFrozen
  - System.Windows.Freezable.GetCurrentValueAsFrozen
  - System.Windows.Freezable.IsFrozen
  - System.Windows.Freezable.OnChanged
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)
  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.Freezable.ReadPreamble
  - System.Windows.Freezable.WritePostscript
  - System.Windows.Freezable.WritePreamble
  - System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.Command
  - System.Windows.Input.InputBinding.CommandParameter
  - System.Windows.Input.InputBinding.CommandParameterProperty
  - System.Windows.Input.InputBinding.CommandProperty
  - System.Windows.Input.InputBinding.CommandTarget
  - System.Windows.Input.InputBinding.CommandTargetProperty
  - System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.#ctor
  id: '#ctor'
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyBinding()
  nameWithType: KeyBinding.KeyBinding()
  fullName: System.Windows.Input.KeyBinding.KeyBinding()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.Input.KeyBinding&quot;></xref>類別。"
  syntax:
    content: public KeyBinding ();
    parameters: []
  overload: System.Windows.Input.KeyBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)'
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyBinding(ICommand,KeyGesture)
  nameWithType: KeyBinding.KeyBinding(ICommand,KeyGesture)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,KeyGesture)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.Input.KeyBinding&quot;></xref>類別使用指定<xref:System.Windows.Input.ICommand>和<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。</xref:System.Windows.Input.ICommand>"
  syntax:
    content: public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.KeyGesture gesture);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "與命令`gesture`。"
    - id: gesture
      type: System.Windows.Input.KeyGesture
      description: "要與建立關聯的按鍵組合`command`。"
  overload: System.Windows.Input.KeyBinding.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>command</code>or <code>gesture</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)'
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyBinding(ICommand,Key,ModifierKeys)
  nameWithType: KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.Input.KeyBinding&quot;></xref>類別使用指定<xref:System.Windows.Input.ICommand>和指定<xref href=&quot;System.Windows.Input.Key&quot;></xref>和<xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref> ，將其轉換成<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。</xref:System.Windows.Input.ICommand>"
  syntax:
    content: public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "要叫用的命令。"
    - id: key
      type: System.Windows.Input.Key
      description: "要與相關聯的索引鍵`command`。"
    - id: modifiers
      type: System.Windows.Input.ModifierKeys
      description: "相關聯的修飾詞`command`。"
  overload: System.Windows.Input.KeyBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.CreateInstanceCore
  id: CreateInstanceCore
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: CreateInstanceCore()
  nameWithType: KeyBinding.CreateInstanceCore()
  fullName: System.Windows.Input.KeyBinding.CreateInstanceCore()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "建立的執行個體<xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref>。"
  syntax:
    content: protected override System.Windows.Freezable CreateInstanceCore ();
    parameters: []
    return:
      type: System.Windows.Freezable
      description: "新的物件。"
  overload: System.Windows.Input.KeyBinding.CreateInstanceCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.Gesture
  id: Gesture
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: Gesture
  nameWithType: KeyBinding.Gesture
  fullName: System.Windows.Input.KeyBinding.Gesture
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得或設定與此相關聯的筆勢<xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref>。"
  remarks: "功能鍵和數字鍵台金鑰，除了<xref:System.Windows.Input.KeyGesture>必須包含<xref:System.Windows.Input.Key>和一個或多個<xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key> </xref:System.Windows.Input.KeyGesture>"
  example:
  - "The following example shows how to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand> using a <xref:System.Windows.Input.KeyBinding> (the markup and code examples specify different keys but are otherwise equivalent).  \n  \n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]"
  syntax:
    content: public override System.Windows.Input.InputGesture Gesture { get; set; }
    return:
      type: System.Windows.Input.InputGesture
      description: "索引鍵的順序。 預設值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.KeyBinding.Gesture*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "值<code> gesture </code>是設定為不是<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。"
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.Key
  id: Key
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: Key
  nameWithType: KeyBinding.Key
  fullName: System.Windows.Input.KeyBinding.Key
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得或設定<xref href=&quot;System.Windows.Input.Key&quot;></xref>的<xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>與此相關聯<xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref>。"
  remarks: "功能鍵和數字鍵台金鑰，除了<xref:System.Windows.Input.KeyGesture>必須包含<xref:System.Windows.Input.Key>和一個或多個<xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key> </xref:System.Windows.Input.KeyGesture>       定義時<xref:System.Windows.Input.KeyBinding>中[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]有兩種方式來指定<xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> </xref:System.Windows.Input.KeyBinding> 第一種方式，來建立<xref:System.Windows.Input.KeyBinding>中[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]是定義<xref:System.Windows.Input.KeyBinding.Gesture%2A>屬性<xref:System.Windows.Input.KeyBinding>元素，其可讓一語法，可指定以單一字串，例如&quot;CTRL + P&quot;的機碼和修飾詞。</xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.KeyBinding.Gesture%2A> </xref:System.Windows.Input.KeyBinding> 第二種方式是定義索引鍵屬性而<xref:System.Windows.Input.KeyBinding.Modifiers%2A>屬性<xref:System.Windows.Input.KeyBinding>項目。</xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.KeyBinding.Modifiers%2A> 這兩種設定<xref:System.Windows.Input.KeyGesture>相等並修改相同的基礎物件，但會有衝突，如果兩個可用。</xref:System.Windows.Input.KeyGesture>  在案例時索引鍵， <xref:System.Windows.Input.KeyBinding.Modifiers%2A>，且<xref:System.Windows.Input.KeyBinding.Gesture%2A>屬性已設定完畢，的屬性定義上一次將會使用<xref:System.Windows.Input.KeyGesture>。</xref:System.Windows.Input.KeyGesture> </xref:System.Windows.Input.KeyBinding.Gesture%2A> </xref:System.Windows.Input.KeyBinding.Modifiers%2A> 您可能可以有例如金鑰組最後將會覆寫索引鍵元件上述筆勢的但是保留相同的筆勢修飾詞。 一般情況下，建議您只使用<xref:System.Windows.Input.KeyBinding.Gesture%2A>屬性從[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]; 這將可避免模稜兩可，提供最有效率的語法，並可提供最直接的序列化表示。</xref:System.Windows.Input.KeyBinding.Gesture%2A>"
  syntax:
    content: public System.Windows.Input.Key Key { get; set; }
    return:
      type: System.Windows.Input.Key
      description: "索引鍵一部分<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。 預設值是<xref href=&quot;System.Windows.Input.Key&quot;> </xref>。"
  overload: System.Windows.Input.KeyBinding.Key*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.KeyProperty
  id: KeyProperty
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyProperty
  nameWithType: KeyBinding.KeyProperty
  fullName: System.Windows.Input.KeyBinding.KeyProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "識別<xref:System.Windows.Input.KeyBinding.Key*>相依性屬性。</xref:System.Windows.Input.KeyBinding.Key*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty KeyProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.Modifiers
  id: Modifiers
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: Modifiers
  nameWithType: KeyBinding.Modifiers
  fullName: System.Windows.Input.KeyBinding.Modifiers
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得或設定<xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>的<xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>與此相關聯<xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref>。"
  remarks: "功能鍵和數字鍵台金鑰，除了<xref:System.Windows.Input.KeyGesture>必須包含<xref:System.Windows.Input.Key>和一個或多個<xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key> </xref:System.Windows.Input.KeyGesture>       定義時<xref:System.Windows.Input.KeyBinding>中[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]有兩種方式來指定<xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture> </xref:System.Windows.Input.KeyBinding> 第一種方式，來建立<xref:System.Windows.Input.KeyBinding>中[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]是定義<xref:System.Windows.Input.KeyBinding.Gesture%2A>屬性<xref:System.Windows.Input.KeyBinding>元素，其可讓一語法，可指定以單一字串，例如&quot;CTRL + P&quot;的機碼和修飾詞。</xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.KeyBinding.Gesture%2A> </xref:System.Windows.Input.KeyBinding> 第二個方法是定義<xref:System.Windows.Input.KeyBinding.Key%2A>屬性和修飾詞屬性<xref:System.Windows.Input.KeyBinding>項目。</xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.KeyBinding.Key%2A> 這兩種設定<xref:System.Windows.Input.KeyGesture>相等並修改相同的基礎物件，但會有衝突，如果兩個可用。</xref:System.Windows.Input.KeyGesture>  在案例時的<xref:System.Windows.Input.KeyBinding.Key%2A>、 修飾詞和<xref:System.Windows.Input.KeyBinding.Gesture%2A>屬性都設，這上次定義的屬性將會使用<xref:System.Windows.Input.KeyGesture>。</xref:System.Windows.Input.KeyGesture> </xref:System.Windows.Input.KeyBinding.Gesture%2A> </xref:System.Windows.Input.KeyBinding.Key%2A> 您可能有的情況下其中例如<xref:System.Windows.Input.KeyBinding.Key%2A>組最後將會覆寫索引鍵元件上述筆勢的但保留筆勢的修飾詞相同。</xref:System.Windows.Input.KeyBinding.Key%2A> 一般情況下，建議您只使用<xref:System.Windows.Input.KeyBinding.Gesture%2A>屬性從[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]; 這將可避免模稜兩可，提供最有效率的語法，並可提供最直接的序列化表示。</xref:System.Windows.Input.KeyBinding.Gesture%2A>      <a name=&quot;xamlAttributeUsage_Modifiers&quot;></a># # XAML 屬性使用方式```   <object Modifiers=&quot;oneOrMoreModifierKeys&quot;/>      ``` <a name=&quot;xamlValues_Modifiers&quot;> </a> # # XAML 值*oneOrMoreModifierKeys*一或多個所定義的輔助按鍵<xref:System.Windows.Input.ModifierKeys>列舉型別，以&quot;+&quot;字元分隔。</xref:System.Windows.Input.ModifierKeys>      "
  syntax:
    content: public System.Windows.Input.ModifierKeys Modifiers { get; set; }
    return:
      type: System.Windows.Input.ModifierKeys
      description: "輔助按鍵的<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。  預設值是<xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>。"
  overload: System.Windows.Input.KeyBinding.Modifiers*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.ModifiersProperty
  id: ModifiersProperty
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: ModifiersProperty
  nameWithType: KeyBinding.ModifiersProperty
  fullName: System.Windows.Input.KeyBinding.ModifiersProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "識別<xref:System.Windows.Input.KeyBinding.Modifiers*>相依性屬性。</xref:System.Windows.Input.KeyBinding.Modifiers*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ModifiersProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.InputBinding
  isExternal: false
  name: System.Windows.Input.InputBinding
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Input.KeyBinding.#ctor
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding()
  nameWithType: KeyBinding.KeyBinding()
  fullName: System.Windows.Input.KeyBinding.KeyBinding()
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding(ICommand,KeyGesture)
  nameWithType: KeyBinding.KeyBinding(ICommand,KeyGesture)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,KeyGesture)
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.KeyGesture
  parent: System.Windows.Input
  isExternal: false
  name: KeyGesture
  nameWithType: KeyGesture
  fullName: System.Windows.Input.KeyGesture
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding(ICommand,Key,ModifierKeys)
  nameWithType: KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
- uid: System.Windows.Input.Key
  parent: System.Windows.Input
  isExternal: false
  name: Key
  nameWithType: Key
  fullName: System.Windows.Input.Key
- uid: System.Windows.Input.ModifierKeys
  parent: System.Windows.Input
  isExternal: false
  name: ModifierKeys
  nameWithType: ModifierKeys
  fullName: System.Windows.Input.ModifierKeys
- uid: System.Windows.Input.KeyBinding.CreateInstanceCore
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: CreateInstanceCore()
  nameWithType: KeyBinding.CreateInstanceCore()
  fullName: System.Windows.Input.KeyBinding.CreateInstanceCore()
- uid: System.Windows.Freezable
  parent: System.Windows
  isExternal: false
  name: Freezable
  nameWithType: Freezable
  fullName: System.Windows.Freezable
- uid: System.Windows.Input.KeyBinding.Gesture
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Gesture
  nameWithType: KeyBinding.Gesture
  fullName: System.Windows.Input.KeyBinding.Gesture
- uid: System.Windows.Input.InputGesture
  parent: System.Windows.Input
  isExternal: false
  name: InputGesture
  nameWithType: InputGesture
  fullName: System.Windows.Input.InputGesture
- uid: System.Windows.Input.KeyBinding.Key
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Key
  nameWithType: KeyBinding.Key
  fullName: System.Windows.Input.KeyBinding.Key
- uid: System.Windows.Input.KeyBinding.KeyProperty
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyProperty
  nameWithType: KeyBinding.KeyProperty
  fullName: System.Windows.Input.KeyBinding.KeyProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Input.KeyBinding.Modifiers
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Modifiers
  nameWithType: KeyBinding.Modifiers
  fullName: System.Windows.Input.KeyBinding.Modifiers
- uid: System.Windows.Input.KeyBinding.ModifiersProperty
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: ModifiersProperty
  nameWithType: KeyBinding.ModifiersProperty
  fullName: System.Windows.Input.KeyBinding.ModifiersProperty
- uid: System.Windows.Input.KeyBinding.#ctor*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding
  nameWithType: KeyBinding.KeyBinding
- uid: System.Windows.Input.KeyBinding.CreateInstanceCore*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: CreateInstanceCore
  nameWithType: KeyBinding.CreateInstanceCore
- uid: System.Windows.Input.KeyBinding.Gesture*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Gesture
  nameWithType: KeyBinding.Gesture
- uid: System.Windows.Input.KeyBinding.Key*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Key
  nameWithType: KeyBinding.Key
- uid: System.Windows.Input.KeyBinding.Modifiers*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Modifiers
  nameWithType: KeyBinding.Modifiers
