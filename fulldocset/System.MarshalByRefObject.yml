### YamlMime:ManagedReference
items:
- uid: System.MarshalByRefObject
  id: MarshalByRefObject
  children:
  - System.MarshalByRefObject.#ctor
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  langs:
  - csharp
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject
  fullName: System.MarshalByRefObject
  type: Class
  summary: "啟用物件存取跨應用程式中的應用程式定義域界限支援遠端執行功能。"
  remarks: "應用程式網域是一個或多個應用程式所在的作業系統處理程序中的分割區。 相同的應用程式定義域中的物件直接通訊。 不同的應用程式定義域中物件通訊跨應用程式網域界限，傳輸物件的複本，或使用 proxy 來交換訊息。       MarshalByRefObject 是跨應用程式定義域界限通訊交換訊息使用的 proxy 物件的基底類別。 不會繼承自 MarshalByRefObject 的物件會以隱含方式封送處理的值。 當遠端應用程式參考封送處理的值物件時，應用程式定義域界限之間傳遞物件的複本。       直接在本機應用程式定義域界限內存取 MarshalByRefObject 的物件。 第一次遠端應用程式定義域中的應用程式存取 MarshalByRefObject，proxy 會傳遞至遠端應用程式。 在 proxy 上的後續呼叫會封送處理回位於本機應用程式定義域中的物件。       型別來跨應用程式網域界限，且必須複製物件的狀態，因為物件的成員不是當初建立它們的應用程式網域外使用時，類型必須繼承自 MarshalByRefObject。       物件所衍生自 MarshalByRefObject 用於跨應用程式網域界限，您不應覆寫它的任何成員，也不應該在直接呼叫其方法。 執行階段會辨識，衍生自 MarshalByRefObject 類別應該封送處理跨應用程式定義域界限。"
  example:
  - "This section contains two code examples. The first code example shows how to create an instance of a class in another application domain. The second code example shows a simple class that can be used for remoting.  \n  \n **Example 1**  \n  \n The following code example shows the simplest way to execute code in another application domain. The example defines a class named `Worker` that inherits MarshalByRefObject, with a method that displays the name of the application domain in which it is executing. The example creates instances of `Worker` in the default application domain and in a new application domain.  \n  \n> [!NOTE]\n>  The assembly that contains `Worker` must be loaded into both application domains, but it could load other assemblies that would exist only in the new application domain.  \n  \n [!code-cpp[CreateInstanceAndUnwrap2#1](~/add/codesnippet/cpp/t-system.marshalbyrefobj_1.cpp)]\n [!code-cs[CreateInstanceAndUnwrap2#1](~/add/codesnippet/csharp/t-system.marshalbyrefobj_1.cs)]\n [!code-vb[CreateInstanceAndUnwrap2#1](~/add/codesnippet/visualbasic/t-system.marshalbyrefobj_1.vb)]  \n  \n **Example 2**  \n  \n The following example demonstrates a class derived from MarshalByRefObject that is used later in remoting.  \n  \n [!code-cpp[RemotingServices.SetObjectUriForMarshal#1](~/add/codesnippet/cpp/t-system.marshalbyrefobj_2.cpp)]\n [!code-cs[RemotingServices.SetObjectUriForMarshal#1](~/add/codesnippet/csharp/t-system.marshalbyrefobj_2.cs)]\n [!code-vb[RemotingServices.SetObjectUriForMarshal#1](~/add/codesnippet/visualbasic/t-system.marshalbyrefobj_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class MarshalByRefObject
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.MarshalByRefObject.#ctor
  id: '#ctor'
  parent: System.MarshalByRefObject
  langs:
  - csharp
  name: MarshalByRefObject()
  nameWithType: MarshalByRefObject.MarshalByRefObject()
  fullName: System.MarshalByRefObject.MarshalByRefObject()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新執行個體<xref href=&quot;System.MarshalByRefObject&quot;></xref>類別。"
  syntax:
    content: protected MarshalByRefObject ();
    parameters: []
  overload: System.MarshalByRefObject.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.MarshalByRefObject.CreateObjRef(System.Type)
  id: CreateObjRef(System.Type)
  parent: System.MarshalByRefObject
  langs:
  - csharp
  name: CreateObjRef(Type)
  nameWithType: MarshalByRefObject.CreateObjRef(Type)
  fullName: System.MarshalByRefObject.CreateObjRef(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "建立物件，包含要產生 proxy 用來與遠端物件通訊所需的所有相關資訊。"
  remarks: "例如<xref:System.AppDomain.CreateInstance%2A?displayProperty=fullName>和<xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=fullName>.</xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=fullName></xref:System.AppDomain.CreateInstance%2A?displayProperty=fullName>遠端物件建立方法會呼叫 TheCreateObjRef 方法 在大部分情況下，沒有需要覆寫這個方法。"
  syntax:
    content: public virtual System.Runtime.Remoting.ObjRef CreateObjRef (Type requestedType);
    parameters:
    - id: requestedType
      type: System.Type
      description: "<xref:System.Type>之物件的新<xref href=&quot;System.Runtime.Remoting.ObjRef&quot;></xref>會參考。</xref:System.Type>"
    return:
      type: System.Runtime.Remoting.ObjRef
      description: "若要產生 proxy 所需的資訊。"
  overload: System.MarshalByRefObject.CreateObjRef*
  exceptions:
  - type: System.Runtime.Remoting.RemotingException
    commentId: T:System.Runtime.Remoting.RemotingException
    description: "這個執行個體不是有效的遠端物件。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "立即呼叫者沒有基礎結構的權限。"
  platform:
  - net462
- uid: System.MarshalByRefObject.GetLifetimeService
  id: GetLifetimeService
  parent: System.MarshalByRefObject
  langs:
  - csharp
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: System.MarshalByRefObject.GetLifetimeService()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "擷取目前存留期間的服務物件可控制這個執行個體的存留期原則。"
  remarks: "如需存留時間服務的詳細資訊，請參閱<xref:System.Runtime.Remoting.Lifetime.LifetimeServices>類別。</xref:System.Runtime.Remoting.Lifetime.LifetimeServices>"
  syntax:
    content: public object GetLifetimeService ();
    parameters: []
    return:
      type: System.Object
      description: "型別的物件<xref href=&quot;System.Runtime.Remoting.Lifetime.ILease&quot;></xref>用來控制此執行個體的存留期原則。"
  overload: System.MarshalByRefObject.GetLifetimeService*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "立即呼叫者沒有基礎結構的權限。"
  platform:
  - net462
- uid: System.MarshalByRefObject.InitializeLifetimeService
  id: InitializeLifetimeService
  parent: System.MarshalByRefObject
  langs:
  - csharp
  name: InitializeLifetimeService()
  nameWithType: MarshalByRefObject.InitializeLifetimeService()
  fullName: System.MarshalByRefObject.InitializeLifetimeService()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得控制這個執行個體的存留期原則的存留期服務物件。"
  remarks: "如需存留時間服務的詳細資訊，請參閱<xref:System.Runtime.Remoting.Lifetime.LifetimeServices>類別。</xref:System.Runtime.Remoting.Lifetime.LifetimeServices>"
  example:
  - "The following code example demonstrates creating a lease.  \n  \n [!code-cpp[Classic MarshalByRefObject.InitializeLifetimeService Example#1](~/add/codesnippet/cpp/m-system.marshalbyrefobj_1.cpp)]\n [!code-vb[Classic MarshalByRefObject.InitializeLifetimeService Example#1](~/add/codesnippet/visualbasic/m-system.marshalbyrefobj_1.vb)]\n [!code-cs[Classic MarshalByRefObject.InitializeLifetimeService Example#1](~/add/codesnippet/csharp/m-system.marshalbyrefobj_1.cs)]"
  syntax:
    content: public virtual object InitializeLifetimeService ();
    parameters: []
    return:
      type: System.Object
      description: "型別的物件<xref href=&quot;System.Runtime.Remoting.Lifetime.ILease&quot;></xref>用來控制此執行個體的存留期原則。 這是目前存在的話，這個執行個體的服務物件的存留期否則，新的存留期間的服務物件初始化為值的&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime%2A?displayProperty=fullName&gt;屬性。"
  overload: System.MarshalByRefObject.InitializeLifetimeService*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "立即呼叫者沒有基礎結構的權限。"
  platform:
  - net462
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  id: MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  langs:
  - csharp
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: System.MarshalByRefObject.MemberwiseClone(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "建立目前的淺層複本<xref href=&quot;System.MarshalByRefObject&quot;></xref>物件。"
  remarks: "MemberwiseClone 方法來建立新建立的淺層複本<xref:System.MarshalByRefObject>物件，然後再複製目前的非靜態欄位<xref:System.MarshalByRefObject>物件至新的物件。</xref:System.MarshalByRefObject> </xref:System.MarshalByRefObject> 如果欄位是實值類型，則會執行位元欄位的複本。 如果欄位是參考類型，則會複製參考，但參考的物件不;因此，原始的物件和其複製參考相同的物件。       例如，請考慮呼叫，參考物件 A 和 B 的 X<xref:System.MarshalByRefObject>物件的參考物件 c。X 的淺層複本建立新的物件 X2 參考物件 A 和 b。相反地，X 的深層複本建立新物件 X2 A2 與 B2 a 的新物件和 B.B2 參考複本 C.使用實作類別的新物件 C2、<xref:System.ICloneable>介面來執行物件的淺層複本。</xref:System.ICloneable> </xref:System.MarshalByRefObject>       識別<xref:System.MarshalByRefObject>物件會定義為目標的遠端用戶端呼叫的遠端伺服器物件。</xref:System.MarshalByRefObject> 根據預設，成員的複製品的<xref:System.MarshalByRefObject>物件具有相同的識別碼，作為原始物件時，這通常不會對用戶端的遠端界限之間封送處理的伺服器端物件的複製正確的行為。</xref:System.MarshalByRefObject> 指定`false`，通常是適當的管理，刪除複製的身分識別，而造成複製跨遠端界限，封送處理時，指派新識別或`true`造成保留原始識別複製<xref:System.MarshalByRefObject>物件。</xref:System.MarshalByRefObject> MemberwiseClone 方法僅供開發人員實作遠端伺服器物件。"
  syntax:
    content: protected MarshalByRefObject MemberwiseClone (bool cloneIdentity);
    parameters:
    - id: cloneIdentity
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>若要刪除目前<xref href=&quot;System.MarshalByRefObject&quot;></xref>物件的身分識別，這會導致它會封送處理跨遠端界限時，指派新識別的物件。 值為<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>通常就已足夠。 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要複製目前<xref href=&quot;System.MarshalByRefObject&quot;></xref>物件的識別，其複本，這會導致遠端處理用戶端呼叫路由傳送至遠端伺服器物件。"
    return:
      type: System.MarshalByRefObject
      description: "目前的淺層複本<xref href=&quot;System.MarshalByRefObject&quot;></xref>物件。"
  overload: System.MarshalByRefObject.MemberwiseClone*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Runtime.Remoting.RemotingException
  parent: System.Runtime.Remoting
  isExternal: false
  name: RemotingException
  nameWithType: RemotingException
  fullName: System.Runtime.Remoting.RemotingException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.MarshalByRefObject.#ctor
  parent: System.MarshalByRefObject
  isExternal: false
  name: MarshalByRefObject()
  nameWithType: MarshalByRefObject.MarshalByRefObject()
  fullName: System.MarshalByRefObject.MarshalByRefObject()
- uid: System.MarshalByRefObject.CreateObjRef(System.Type)
  parent: System.MarshalByRefObject
  isExternal: false
  name: CreateObjRef(Type)
  nameWithType: MarshalByRefObject.CreateObjRef(Type)
  fullName: System.MarshalByRefObject.CreateObjRef(Type)
- uid: System.Runtime.Remoting.ObjRef
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjRef
  nameWithType: ObjRef
  fullName: System.Runtime.Remoting.ObjRef
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.MarshalByRefObject.GetLifetimeService
  parent: System.MarshalByRefObject
  isExternal: false
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: System.MarshalByRefObject.GetLifetimeService()
- uid: System.MarshalByRefObject.InitializeLifetimeService
  parent: System.MarshalByRefObject
  isExternal: false
  name: InitializeLifetimeService()
  nameWithType: MarshalByRefObject.InitializeLifetimeService()
  fullName: System.MarshalByRefObject.InitializeLifetimeService()
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  isExternal: false
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: System.MarshalByRefObject.MemberwiseClone(Boolean)
- uid: System.MarshalByRefObject
  parent: System
  isExternal: false
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject
  fullName: System.MarshalByRefObject
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.MarshalByRefObject.#ctor*
  parent: System.MarshalByRefObject
  isExternal: false
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject.MarshalByRefObject
- uid: System.MarshalByRefObject.CreateObjRef*
  parent: System.MarshalByRefObject
  isExternal: false
  name: CreateObjRef
  nameWithType: MarshalByRefObject.CreateObjRef
- uid: System.MarshalByRefObject.GetLifetimeService*
  parent: System.MarshalByRefObject
  isExternal: false
  name: GetLifetimeService
  nameWithType: MarshalByRefObject.GetLifetimeService
- uid: System.MarshalByRefObject.InitializeLifetimeService*
  parent: System.MarshalByRefObject
  isExternal: false
  name: InitializeLifetimeService
  nameWithType: MarshalByRefObject.InitializeLifetimeService
- uid: System.MarshalByRefObject.MemberwiseClone*
  parent: System.MarshalByRefObject
  isExternal: false
  name: MemberwiseClone
  nameWithType: MarshalByRefObject.MemberwiseClone
