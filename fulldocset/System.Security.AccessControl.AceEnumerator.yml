### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.AceEnumerator
  id: AceEnumerator
  children:
  - System.Security.AccessControl.AceEnumerator.Current
  - System.Security.AccessControl.AceEnumerator.MoveNext
  - System.Security.AccessControl.AceEnumerator.Reset
  - System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: AceEnumerator
  nameWithType: AceEnumerator
  fullName: System.Security.AccessControl.AceEnumerator
  type: Class
  summary: "存取控制清單 (ACL) 中提供了可逐一查看存取控制項目 (Ace)。"
  syntax:
    content: 'public sealed class AceEnumerator : System.Collections.IEnumerator'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerator
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.Current
  id: Current
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: AceEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "取得目前的項目中<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>集合。 這個屬性會取得物件的型別易記版本。"
  syntax:
    content: public System.Security.AccessControl.GenericAce Current { get; }
    return:
      type: System.Security.AccessControl.GenericAce
      description: "目前的項目<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>集合。"
  overload: System.Security.AccessControl.AceEnumerator.Current*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.MoveNext
  id: MoveNext
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: AceEnumerator.MoveNext()
  fullName: System.Security.AccessControl.AceEnumerator.MoveNext()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "將列舉值前移至下一個項目<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>集合。"
  remarks: "建立列舉值之後，或呼叫後<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>方法，列舉程式位於集合中，第一個項目之前和 MoveNext 方法的第一個呼叫移到集合的第一個元素的列舉值。</xref:System.Security.AccessControl.AceEnumerator.Reset%2A>       集合的末端後，後續呼叫 MoveNext 傳回`false`直到<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>稱為。</xref:System.Security.AccessControl.AceEnumerator.Reset%2A>       只要集合維持不變，列舉程式就持續有效。 如果對集合進行變更，例如加入、 修改或刪除項目，列舉程式會永久失效，且下次呼叫 MoveNext 或<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>擲回<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Security.AccessControl.AceEnumerator.Reset%2A>"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果列舉值成功前移至下一個元素;，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果列舉值已跳過集合結尾。"
  overload: System.Security.AccessControl.AceEnumerator.MoveNext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "建立列舉值之後，已修改集合。"
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.Reset
  id: Reset
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: AceEnumerator.Reset()
  fullName: System.Security.AccessControl.AceEnumerator.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "設定列舉值至它的初始位置，這是中的第一個項目之前<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>集合。"
  remarks: "只要集合維持不變，列舉程式就持續有效。 如果，例如加入、 修改或刪除元素，會對集合進行的列舉程式會永久失效，且下次呼叫<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>方法或重設方法會擲回<xref:System.InvalidOperationException></xref:System.InvalidOperationException></xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Security.AccessControl.AceEnumerator.Reset*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "建立列舉值之後，已修改集合。"
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: AceEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "取得目前的項目集合中。"
  remarks: "建立列舉值之後，或呼叫後<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>方法，您必須呼叫<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>方法，以將列舉值前進的第一個元素的集合，才能讀取 IEnumerator.Current; 值否則 IEnumerator.Current 未定義。</xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> </xref:System.Security.AccessControl.AceEnumerator.Reset%2A>       IEnumerator.Current 也擲回例外狀況，如果最後一個呼叫<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>傳回`false`，表示集合的結尾。</xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>       IEnumerator.Current 不會移動位置的列舉值，並對 IEnumerator.Current 連續呼叫會傳回相同的物件直到<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>或<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>稱為。</xref:System.Security.AccessControl.AceEnumerator.Reset%2A> </xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>       只要集合維持不變，列舉程式就持續有效。 如果對集合進行變更，例如加入、 修改或刪除項目，列舉程式會永久失效，並在下一個呼叫<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>或<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>擲回<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Security.AccessControl.AceEnumerator.Reset%2A> </xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> 如果之間修改集合<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>和 IEnumerator.Current，IEnumerator.Current 傳回的項目設定為時，即使列舉值已經無效。</xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "傳回目前的項目集合中。"
  overload: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "建立列舉值之後，已修改集合。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.AccessControl.AceEnumerator.Current
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Current
  nameWithType: AceEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.Current
- uid: System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericAce
  nameWithType: GenericAce
  fullName: System.Security.AccessControl.GenericAce
- uid: System.Security.AccessControl.AceEnumerator.MoveNext
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: AceEnumerator.MoveNext()
  fullName: System.Security.AccessControl.AceEnumerator.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.AceEnumerator.Reset
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Reset()
  nameWithType: AceEnumerator.Reset()
  fullName: System.Security.AccessControl.AceEnumerator.Reset()
- uid: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: AceEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.System.Collections.IEnumerator.Current
- uid: System.Security.AccessControl.AceEnumerator.Current*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Current
  nameWithType: AceEnumerator.Current
- uid: System.Security.AccessControl.AceEnumerator.MoveNext*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: AceEnumerator.MoveNext
- uid: System.Security.AccessControl.AceEnumerator.Reset*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Reset
  nameWithType: AceEnumerator.Reset
- uid: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: AceEnumerator.System.Collections.IEnumerator.Current
