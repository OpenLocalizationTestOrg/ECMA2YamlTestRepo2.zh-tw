### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Conversion
  id: Conversion
  children:
  - Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)
  - Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)
  - Microsoft.VisualBasic.Conversion.ErrorToString
  - Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)
  - Microsoft.VisualBasic.Conversion.Fix(System.Decimal)
  - Microsoft.VisualBasic.Conversion.Fix(System.Double)
  - Microsoft.VisualBasic.Conversion.Fix(System.Int16)
  - Microsoft.VisualBasic.Conversion.Fix(System.Int32)
  - Microsoft.VisualBasic.Conversion.Fix(System.Int64)
  - Microsoft.VisualBasic.Conversion.Fix(System.Object)
  - Microsoft.VisualBasic.Conversion.Fix(System.Single)
  - Microsoft.VisualBasic.Conversion.Hex(System.Byte)
  - Microsoft.VisualBasic.Conversion.Hex(System.Int16)
  - Microsoft.VisualBasic.Conversion.Hex(System.Int32)
  - Microsoft.VisualBasic.Conversion.Hex(System.Int64)
  - Microsoft.VisualBasic.Conversion.Hex(System.Object)
  - Microsoft.VisualBasic.Conversion.Hex(System.SByte)
  - Microsoft.VisualBasic.Conversion.Hex(System.UInt16)
  - Microsoft.VisualBasic.Conversion.Hex(System.UInt32)
  - Microsoft.VisualBasic.Conversion.Hex(System.UInt64)
  - Microsoft.VisualBasic.Conversion.Int(System.Decimal)
  - Microsoft.VisualBasic.Conversion.Int(System.Double)
  - Microsoft.VisualBasic.Conversion.Int(System.Int16)
  - Microsoft.VisualBasic.Conversion.Int(System.Int32)
  - Microsoft.VisualBasic.Conversion.Int(System.Int64)
  - Microsoft.VisualBasic.Conversion.Int(System.Object)
  - Microsoft.VisualBasic.Conversion.Int(System.Single)
  - Microsoft.VisualBasic.Conversion.Oct(System.Byte)
  - Microsoft.VisualBasic.Conversion.Oct(System.Int16)
  - Microsoft.VisualBasic.Conversion.Oct(System.Int32)
  - Microsoft.VisualBasic.Conversion.Oct(System.Int64)
  - Microsoft.VisualBasic.Conversion.Oct(System.Object)
  - Microsoft.VisualBasic.Conversion.Oct(System.SByte)
  - Microsoft.VisualBasic.Conversion.Oct(System.UInt16)
  - Microsoft.VisualBasic.Conversion.Oct(System.UInt32)
  - Microsoft.VisualBasic.Conversion.Oct(System.UInt64)
  - Microsoft.VisualBasic.Conversion.Str(System.Object)
  - Microsoft.VisualBasic.Conversion.Val(System.Char)
  - Microsoft.VisualBasic.Conversion.Val(System.Object)
  - Microsoft.VisualBasic.Conversion.Val(System.String)
  langs:
  - csharp
  name: Conversion
  nameWithType: Conversion
  fullName: Microsoft.VisualBasic.Conversion
  type: Class
  summary: "<xref uid=&quot;langword_csharp_Conversion&quot; name=&quot;Conversion&quot; href=&quot;&quot;> </xref>模組包含用來執行各種轉換作業的程序。"
  remarks: "這個模組支援的 Visual Basic 語言關鍵字和執行階段程式庫成員，將十進位數字轉換成其他的基底編號，字串、 數字的字串和一個資料輸入到另一個。"
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._0_1.vb)]"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Conversion
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)
  id: CTypeDynamic(System.Object,System.Type)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: CTypeDynamic(Object,Type)
  nameWithType: Conversion.CTypeDynamic(Object,Type)
  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object,Type)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "將物件轉換成指定的類型。"
  remarks: "`CTypeDynamic`方法將做為傳遞的物件轉換`Expression`參數所指定的類型`TargetType`參數。 如果物件是動態的物件，`CTypeDynamic`方法適用於可用的動態轉換。       `CTypeDynamic`方法適用於動態轉換根據本身的物件所定義的轉換語意。 如果動態的物件會繼承自<xref:System.Dynamic.DynamicObject>、`CTypeDynamic`方法第一次嘗試使用使用者定義的靜態轉換執行轉換。</xref:System.Dynamic.DynamicObject> 如果使用者定義的靜態轉換失敗，`CTypeDynamic`方法嘗試使用動態轉換執行轉換。 如果動態物件實作<xref:System.Dynamic.IDynamicMetaObjectProvider>、`CTypeDynamic`方法提供有透過使用者定義的靜態轉換優先順序與動態之間的轉換。</xref:System.Dynamic.IDynamicMetaObjectProvider>"
  example:
  - "The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.  \n  \n```vb#  \nImports System.Dynamic  \n  \nModule Module1  \n    Sub Main()  \n        Dim dyn As Object = New SampleDynamicObject  \n        Dim sampleString = CTypeDynamic(dyn, GetType(String))  \n        Console.WriteLine(sampleString)  \n    End Sub  \nEnd Module  \n  \nClass SampleDynamicObject  \n    Inherits DynamicObject  \n  \n    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  \n                                         ByRef result As Object) As Boolean  \n  \n        If binder.Type = GetType(String) Then  \n            result = \"Sample String\"  \n            Return True  \n        End If  \n  \n        Return False  \n    End Function  \nEnd Class  \n```"
  syntax:
    content: public static object CTypeDynamic (object Expression, Type TargetType);
    parameters:
    - id: Expression
      type: System.Object
      description: "要轉換的物件。"
    - id: TargetType
      type: System.Type
      description: "將物件轉換成的型別。"
    return:
      type: System.Object
      description: "在執行階段其類型為要求的目標類型的物件。"
  overload: Microsoft.VisualBasic.Conversion.CTypeDynamic*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)
  id: CTypeDynamic``1(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: CTypeDynamic(Object)
  nameWithType: Conversion.CTypeDynamic(Object)
  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: public static TargetType CTypeDynamic<TargetType> (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "即將加入。"
    return:
      type: TargetType
      description: "即將加入。"
  overload: Microsoft.VisualBasic.Conversion.CTypeDynamic<TargetType>*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.ErrorToString
  id: ErrorToString
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: ErrorToString()
  nameWithType: Conversion.ErrorToString()
  fullName: Microsoft.VisualBasic.Conversion.ErrorToString()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回指定的錯誤號碼對應的錯誤訊息。"
  remarks: "`ErrorToString`函式會檢查的屬性設定`Err`來識別最近的執行階段錯誤的物件。 傳回值`ErrorToString`函式對應至`Description`屬性`Err`物件。 如果沒有執行階段錯誤，`ErrorToString`傳回零長度字串 (&quot;&quot;)。       在 Visual Basic 6.0 或更早版本中提供此功能已`Error`函式。"
  example:
  - "The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.  \n  \n [!code-vb[VbVbalrCatRef#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._1_1.vb)]"
  syntax:
    content: public static string ErrorToString ();
    parameters: []
    return:
      type: System.String
      description: "對應至最新的執行階段錯誤的錯誤訊息。"
  overload: Microsoft.VisualBasic.Conversion.ErrorToString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ErrorNumber</code>已超出範圍。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)
  id: ErrorToString(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: ErrorToString(Int32)
  nameWithType: Conversion.ErrorToString(Int32)
  fullName: Microsoft.VisualBasic.Conversion.ErrorToString(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回指定的錯誤號碼對應的錯誤訊息。"
  remarks: "`ErrorToString`函式會檢查的屬性設定`Err`來識別最近的執行階段錯誤的物件。 傳回值`ErrorToString`函式對應至`Description`屬性`Err`物件。 如果`ErrorNumber`是有效的錯誤號碼，但未定義`ErrorToString`傳回字串`&quot;Application-defined or object-defined error.&quot;`如果`ErrorNumber`不正確，就會發生錯誤。 如果`ErrorNumber`省略，則對應至最新的訊息就會傳回執行階段錯誤。 如果沒有執行階段錯誤或`ErrorNumber`為 0，`ErrorToString`傳回零長度字串 (&quot;&quot;)。       在 Visual Basic 6.0 或更早版本中提供此功能已`Error`函式。"
  example:
  - "The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.  \n  \n [!code-vb[VbVbalrCatRef#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._191_1.vb)]"
  syntax:
    content: public static string ErrorToString (int ErrorNumber);
    parameters:
    - id: ErrorNumber
      type: System.Int32
      description: "選擇性。 任何有效的錯誤號碼。"
    return:
      type: System.String
      description: "錯誤訊息對應至指定的錯誤號碼。"
  overload: Microsoft.VisualBasic.Conversion.ErrorToString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ErrorNumber</code>已超出範圍。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Decimal)
  id: Fix(System.Decimal)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Decimal)
  nameWithType: Conversion.Fix(Decimal)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Decimal)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回數字的整數部分。"
  remarks: "同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。       之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數，大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。       `Fix(number)`相當於`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._62_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._62_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._62_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static decimal Fix (decimal Number);
    parameters:
    - id: Number
      type: System.Decimal
      description: "必要。 型別的數<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>或任何有效數值運算式。 如果`Number`包含<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>， <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>傳回。"
    return:
      type: System.Decimal
      description: "傳回數字的整數部分。"
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "未指定數字。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "數字不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Double)
  id: Fix(System.Double)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Double)
  nameWithType: Conversion.Fix(Double)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回數字的整數部分。"
  remarks: "同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。       之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數，大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。       `Fix(number)`相當於`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._43_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._43_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._43_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static double Fix (double Number);
    parameters:
    - id: Number
      type: System.Double
      description: "必要。 型別的數<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>或任何有效數值運算式。 如果`Number`包含<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>， <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>傳回。"
    return:
      type: System.Double
      description: "傳回數字的整數部分。"
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "未指定數字。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "數字不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int16)
  id: Fix(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Int16)
  nameWithType: Conversion.Fix(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回數字的整數部分。"
  remarks: "同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。       之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數，大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。       `Fix(number)`相當於`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._231_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._231_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._231_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static short Fix (short Number);
    parameters:
    - id: Number
      type: System.Int16
      description: "必要。 型別的數<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>或任何有效數值運算式。 如果`Number`包含<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>， <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>傳回。"
    return:
      type: System.Int16
      description: "傳回數字的整數部分。"
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "未指定數字。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "數字不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int32)
  id: Fix(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Int32)
  nameWithType: Conversion.Fix(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回數字的整數部分。"
  remarks: "同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。       之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數，大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。       `Fix(number)`相當於`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._70_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._70_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._70_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static int Fix (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "必要。 型別的數<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>或任何有效數值運算式。 如果`Number`包含<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>， <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>傳回。"
    return:
      type: System.Int32
      description: "傳回數字的整數部分。"
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "未指定數字。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "數字不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int64)
  id: Fix(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Int64)
  nameWithType: Conversion.Fix(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回數字的整數部分。"
  remarks: "同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。       之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數，大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。       `Fix(number)`相當於`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._85_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._85_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._85_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static long Fix (long Number);
    parameters:
    - id: Number
      type: System.Int64
      description: "必要。 型別的數<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>或任何有效數值運算式。 如果`Number`包含<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>， <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>傳回。"
    return:
      type: System.Int64
      description: "傳回數字的整數部分。"
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "未指定數字。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "數字不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Object)
  id: Fix(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Object)
  nameWithType: Conversion.Fix(Object)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回數字的整數部分。"
  remarks: "同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。       之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數，大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。       `Fix(number)`相當於`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._106_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._106_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._106_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static object Fix (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: "必要。 型別的數<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>或任何有效數值運算式。 如果`Number`包含<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>， <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>傳回。"
    return:
      type: System.Object
      description: "傳回數字的整數部分。"
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "未指定數字。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "數字不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Single)
  id: Fix(System.Single)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Single)
  nameWithType: Conversion.Fix(Single)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Single)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回數字的整數部分。"
  remarks: "同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。       之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數，大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。       `Fix(number)`相當於`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._79_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._79_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._79_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static float Fix (float Number);
    parameters:
    - id: Number
      type: System.Single
      description: "必要。 型別的數<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>或任何有效數值運算式。 如果`Number`包含<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>， <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>傳回。"
    return:
      type: System.Single
      description: "傳回數字的整數部分。"
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "未指定數字。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "數字不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Byte)
  id: Hex(System.Byte)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Byte)
  nameWithType: Conversion.Hex(Byte)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Byte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回代表數字的十六進位值的字串。"
  remarks: "如果`Number`還不是整數，它會計算前捨入到最接近的整數。      |||  |-|-|  |If `Number` is|Hex 傳回 |  |空白 |零 (0) |  |任何數值 |最多&16; 個十六進位字元 |      您可以直接由數字之前在適當的範圍，以表示十六進位數字`&H`。 例如，`&H10`表示十進位 16 的十六進位表示法。"
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._208_1.vb)]"
  syntax:
    content: public static string Hex (byte Number);
    parameters:
    - id: Number
      type: System.Byte
      description: "必要。 任何有效數值運算式或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回代表數字的十六進位值的字串。"
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>未指定。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int16)
  id: Hex(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Int16)
  nameWithType: Conversion.Hex(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回代表數字的十六進位值的字串。"
  remarks: "如果`Number`還不是整數，它會計算前捨入到最接近的整數。      |||  |-|-|  |If `Number` is|Hex 傳回 |  |空白 |零 (0) |  |任何數值 |最多&16; 個十六進位字元 |      您可以直接由數字之前在適當的範圍，以表示十六進位數字`&H`。 例如，`&H10`表示十進位 16 的十六進位表示法。"
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._128_1.vb)]"
  syntax:
    content: public static string Hex (short Number);
    parameters:
    - id: Number
      type: System.Int16
      description: "必要。 任何有效數值運算式或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回代表數字的十六進位值的字串。"
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>未指定。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int32)
  id: Hex(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Int32)
  nameWithType: Conversion.Hex(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回代表數字的十六進位值的字串。"
  remarks: "如果`Number`還不是整數，它會計算前捨入到最接近的整數。      |||  |-|-|  |If `Number` is|Hex 傳回 |  |空白 |零 (0) |  |任何數值 |最多&16; 個十六進位字元 |      您可以直接由數字之前在適當的範圍，以表示十六進位數字`&H`。 例如，`&H10`表示十進位 16 的十六進位表示法。"
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._102_1.vb)]"
  syntax:
    content: public static string Hex (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "必要。 任何有效數值運算式或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回代表數字的十六進位值的字串。"
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>未指定。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int64)
  id: Hex(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Int64)
  nameWithType: Conversion.Hex(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回代表數字的十六進位值的字串。"
  remarks: "如果`Number`還不是整數，它會計算前捨入到最接近的整數。      |||  |-|-|  |If `Number` is|Hex 傳回 |  |空白 |零 (0) |  |任何數值 |最多&16; 個十六進位字元 |      您可以直接由數字之前在適當的範圍，以表示十六進位數字`&H`。 例如，`&H10`表示十進位 16 的十六進位表示法。"
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._75_1.vb)]"
  syntax:
    content: public static string Hex (long Number);
    parameters:
    - id: Number
      type: System.Int64
      description: "必要。 任何有效數值運算式或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回代表數字的十六進位值的字串。"
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>未指定。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Object)
  id: Hex(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Object)
  nameWithType: Conversion.Hex(Object)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回代表數字的十六進位值的字串。"
  remarks: "如果`Number`還不是整數，它會計算前捨入到最接近的整數。      |||  |-|-|  |If `Number` is|Hex 傳回 |  |空白 |零 (0) |  |任何數值 |最多&16; 個十六進位字元 |      您可以直接由數字之前在適當的範圍，以表示十六進位數字`&H`。 例如，`&H10`表示十進位 16 的十六進位表示法。"
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._53_1.vb)]"
  syntax:
    content: public static string Hex (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: "必要。 任何有效數值運算式或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回代表數字的十六進位值的字串。"
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>未指定。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.SByte)
  id: Hex(System.SByte)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(SByte)
  nameWithType: Conversion.Hex(SByte)
  fullName: Microsoft.VisualBasic.Conversion.Hex(SByte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回代表數字的十六進位值的字串。"
  remarks: "如果`Number`還不是整數，它會計算前捨入到最接近的整數。      |||  |-|-|  |If `Number` is|Hex 傳回 |  |空白 |零 (0) |  |任何數值 |最多&16; 個十六進位字元 |      您可以直接由數字之前在適當的範圍，以表示十六進位數字`&H`。 例如，`&H10`表示十進位 16 的十六進位表示法。"
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._15_1.vb)]"
  syntax:
    content: public static string Hex (sbyte Number);
    parameters:
    - id: Number
      type: System.SByte
      description: "必要。 任何有效數值運算式或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回代表數字的十六進位值的字串。"
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>未指定。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt16)
  id: Hex(System.UInt16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(UInt16)
  nameWithType: Conversion.Hex(UInt16)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回代表數字的十六進位值的字串。"
  remarks: "如果`Number`還不是整數，它會計算前捨入到最接近的整數。      |||  |-|-|  |If `Number` is|Hex 傳回 |  |空白 |零 (0) |  |任何數值 |最多&16; 個十六進位字元 |      您可以直接由數字之前在適當的範圍，以表示十六進位數字`&H`。 例如，`&H10`表示十進位 16 的十六進位表示法。"
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._118_1.vb)]"
  syntax:
    content: public static string Hex (ushort Number);
    parameters:
    - id: Number
      type: System.UInt16
      description: "必要。 任何有效數值運算式或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回代表數字的十六進位值的字串。"
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>未指定。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt32)
  id: Hex(System.UInt32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(UInt32)
  nameWithType: Conversion.Hex(UInt32)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回代表數字的十六進位值的字串。"
  remarks: "如果`Number`還不是整數，它會計算前捨入到最接近的整數。      |||  |-|-|  |If `Number` is|Hex 傳回 |  |空白 |零 (0) |  |任何數值 |最多&16; 個十六進位字元 |      您可以直接由數字之前在適當的範圍，以表示十六進位數字`&H`。 例如，`&H10`表示十進位 16 的十六進位表示法。"
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._182_1.vb)]"
  syntax:
    content: public static string Hex (uint Number);
    parameters:
    - id: Number
      type: System.UInt32
      description: "必要。 任何有效數值運算式或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回代表數字的十六進位值的字串。"
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>未指定。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt64)
  id: Hex(System.UInt64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(UInt64)
  nameWithType: Conversion.Hex(UInt64)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回代表數字的十六進位值的字串。"
  remarks: "如果`Number`還不是整數，它會計算前捨入到最接近的整數。      |||  |-|-|  |If `Number` is|Hex 傳回 |  |空白 |零 (0) |  |任何數值 |最多&16; 個十六進位字元 |      您可以直接由數字之前在適當的範圍，以表示十六進位數字`&H`。 例如，`&H10`表示十進位 16 的十六進位表示法。"
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._119_1.vb)]"
  syntax:
    content: public static string Hex (ulong Number);
    parameters:
    - id: Number
      type: System.UInt64
      description: "必要。 任何有效數值運算式或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回代表數字的十六進位值的字串。"
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>未指定。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Decimal)
  id: Int(System.Decimal)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Decimal)
  nameWithType: Conversion.Int(Decimal)
  fullName: Microsoft.VisualBasic.Conversion.Int(Decimal)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回數字的整數部分。"
  remarks: "同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。       之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數，大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。       `Fix(number)`相當於`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._14_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._14_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._14_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static decimal Int (decimal Number);
    parameters:
    - id: Number
      type: System.Decimal
      description: "必要。 型別的數<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>或任何有效數值運算式。 如果`Number`包含<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>， <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>傳回。"
    return:
      type: System.Decimal
      description: "傳回數字的整數部分。"
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "未指定數字。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "數字不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Double)
  id: Int(System.Double)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Double)
  nameWithType: Conversion.Int(Double)
  fullName: Microsoft.VisualBasic.Conversion.Int(Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回數字的整數部分。"
  remarks: "同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。       之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數，大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。       `Fix(number)`相當於`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._202_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._202_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._202_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static double Int (double Number);
    parameters:
    - id: Number
      type: System.Double
      description: "必要。 型別的數<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>或任何有效數值運算式。 如果`Number`包含<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>， <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>傳回。"
    return:
      type: System.Double
      description: "傳回數字的整數部分。"
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "未指定數字。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "數字不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int16)
  id: Int(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Int16)
  nameWithType: Conversion.Int(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回數字的整數部分。"
  remarks: "同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。       之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數，大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。       `Fix(number)`相當於`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._161_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._161_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._161_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static short Int (short Number);
    parameters:
    - id: Number
      type: System.Int16
      description: "必要。 型別的數<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>或任何有效數值運算式。 如果`Number`包含<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>， <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>傳回。"
    return:
      type: System.Int16
      description: "傳回數字的整數部分。"
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "未指定數字。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "數字不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int32)
  id: Int(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Int32)
  nameWithType: Conversion.Int(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回數字的整數部分。"
  remarks: "同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。       之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數，大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。       `Fix(number)`相當於`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._234_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._234_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._234_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static int Int (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "必要。 型別的數<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>或任何有效數值運算式。 如果`Number`包含<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>， <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>傳回。"
    return:
      type: System.Int32
      description: "傳回數字的整數部分。"
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "未指定數字。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "數字不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int64)
  id: Int(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Int64)
  nameWithType: Conversion.Int(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回數字的整數部分。"
  remarks: "同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。       之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數，大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。       `Fix(number)`相當於`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._112_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._112_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._112_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static long Int (long Number);
    parameters:
    - id: Number
      type: System.Int64
      description: "必要。 型別的數<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>或任何有效數值運算式。 如果`Number`包含<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>， <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>傳回。"
    return:
      type: System.Int64
      description: "傳回數字的整數部分。"
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "未指定數字。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "數字不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Object)
  id: Int(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Object)
  nameWithType: Conversion.Int(Object)
  fullName: Microsoft.VisualBasic.Conversion.Int(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回數字的整數部分。"
  remarks: "同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。       之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數，大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。       `Fix(number)`相當於`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._111_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._111_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._111_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static object Int (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: "必要。 型別的數<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>或任何有效數值運算式。 如果`Number`包含<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>， <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>傳回。"
    return:
      type: System.Object
      description: "傳回數字的整數部分。"
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "未指定數字。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "數字不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Single)
  id: Int(System.Single)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Single)
  nameWithType: Conversion.Int(Single)
  fullName: Microsoft.VisualBasic.Conversion.Int(Single)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回數字的整數部分。"
  remarks: "同時`Int`和`Fix`函式中移除的小數部分`Number`並傳回產生的整數值。       之間的差異`Int`和`Fix`函式是，如果`Number`是負數，`Int`傳回小於或等於第一個負整數`Number`，而`Fix`傳回第一個負整數，大於或等於`Number`。 例如， `Int` -9，會將-8.4 和`Fix`-8.4 將-8。       `Fix(number)`相當於`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._49_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._49_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._49_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static float Int (float Number);
    parameters:
    - id: Number
      type: System.Single
      description: "必要。 型別的數<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>或任何有效數值運算式。 如果`Number`包含<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>， <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>傳回。"
    return:
      type: System.Single
      description: "傳回數字的整數部分。"
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "未指定數字。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "數字不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Byte)
  id: Oct(System.Byte)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Byte)
  nameWithType: Conversion.Oct(Byte)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Byte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串，代表數字的八進位值。"
  remarks: "如果`Number`還不是整數，它會計算前捨入到最接近的整數。      |||  |-|-|  |數字是否 |傳回年 10 月 |  |空白 |零 (0) |  |其他任何數字 |最多 22 八進位字元 |      您可以直接由數字之前在適當的範圍，以表示八進位數字`&O`。 例如，`&O10`是十進位 8 八進位標記法。"
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._109_1.vb)]"
  syntax:
    content: public static string Oct (byte Number);
    parameters:
    - id: Number
      type: System.Byte
      description: "必要。 任何有效數值運算式或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回字串，代表數字的八進位值。"
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>未指定。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int16)
  id: Oct(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Int16)
  nameWithType: Conversion.Oct(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串，代表數字的八進位值。"
  remarks: "如果`Number`還不是整數，它會計算前捨入到最接近的整數。      |||  |-|-|  |數字是否 |傳回年 10 月 |  |空白 |零 (0) |  |其他任何數字 |最多 22 八進位字元 |      您可以直接由數字之前在適當的範圍，以表示八進位數字`&O`。 例如，`&O10`是十進位 8 八進位標記法。"
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._151_1.vb)]"
  syntax:
    content: public static string Oct (short Number);
    parameters:
    - id: Number
      type: System.Int16
      description: "必要。 任何有效數值運算式或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回字串，代表數字的八進位值。"
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>未指定。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int32)
  id: Oct(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Int32)
  nameWithType: Conversion.Oct(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串，代表數字的八進位值。"
  remarks: "如果`Number`還不是整數，它會計算前捨入到最接近的整數。      |||  |-|-|  |數字是否 |傳回年 10 月 |  |空白 |零 (0) |  |其他任何數字 |最多 22 八進位字元 |      您可以直接由數字之前在適當的範圍，以表示八進位數字`&O`。 例如，`&O10`是十進位 8 八進位標記法。"
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._36_1.vb)]"
  syntax:
    content: public static string Oct (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "必要。 任何有效數值運算式或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回字串，代表數字的八進位值。"
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>未指定。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int64)
  id: Oct(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Int64)
  nameWithType: Conversion.Oct(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串，代表數字的八進位值。"
  remarks: "如果`Number`還不是整數，它會計算前捨入到最接近的整數。      |||  |-|-|  |數字是否 |傳回年 10 月 |  |空白 |零 (0) |  |其他任何數字 |最多 22 八進位字元 |      您可以直接由數字之前在適當的範圍，以表示八進位數字`&O`。 例如，`&O10`是十進位 8 八進位標記法。"
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._217_1.vb)]"
  syntax:
    content: public static string Oct (long Number);
    parameters:
    - id: Number
      type: System.Int64
      description: "必要。 任何有效數值運算式或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回字串，代表數字的八進位值。"
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>未指定。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Object)
  id: Oct(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Object)
  nameWithType: Conversion.Oct(Object)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串，代表數字的八進位值。"
  remarks: "如果`Number`還不是整數，它會計算前捨入到最接近的整數。      |||  |-|-|  |數字是否 |傳回年 10 月 |  |空白 |零 (0) |  |其他任何數字 |最多 22 八進位字元 |      您可以直接由數字之前在適當的範圍，以表示八進位數字`&O`。 例如，`&O10`是十進位 8 八進位標記法。"
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._233_1.vb)]"
  syntax:
    content: public static string Oct (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: "必要。 任何有效數值運算式或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回字串，代表數字的八進位值。"
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>未指定。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.SByte)
  id: Oct(System.SByte)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(SByte)
  nameWithType: Conversion.Oct(SByte)
  fullName: Microsoft.VisualBasic.Conversion.Oct(SByte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串，代表數字的八進位值。"
  remarks: "如果`Number`還不是整數，它會計算前捨入到最接近的整數。      |||  |-|-|  |數字是否 |傳回年 10 月 |  |空白 |零 (0) |  |其他任何數字 |最多 22 八進位字元 |      您可以直接由數字之前在適當的範圍，以表示八進位數字`&O`。 例如，`&O10`是十進位 8 八進位標記法。"
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._16_1.vb)]"
  syntax:
    content: public static string Oct (sbyte Number);
    parameters:
    - id: Number
      type: System.SByte
      description: "必要。 任何有效數值運算式或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回字串，代表數字的八進位值。"
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>未指定。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt16)
  id: Oct(System.UInt16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(UInt16)
  nameWithType: Conversion.Oct(UInt16)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串，代表數字的八進位值。"
  remarks: "如果`Number`還不是整數，它會計算前捨入到最接近的整數。      |||  |-|-|  |數字是否 |傳回年 10 月 |  |空白 |零 (0) |  |其他任何數字 |最多 22 八進位字元 |      您可以直接由數字之前在適當的範圍，以表示八進位數字`&O`。 例如，`&O10`是十進位 8 八進位標記法。"
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._28_1.vb)]"
  syntax:
    content: public static string Oct (ushort Number);
    parameters:
    - id: Number
      type: System.UInt16
      description: "必要。 任何有效數值運算式或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回字串，代表數字的八進位值。"
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>未指定。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt32)
  id: Oct(System.UInt32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(UInt32)
  nameWithType: Conversion.Oct(UInt32)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串，代表數字的八進位值。"
  remarks: "如果`Number`還不是整數，它會計算前捨入到最接近的整數。      |||  |-|-|  |數字是否 |傳回年 10 月 |  |空白 |零 (0) |  |其他任何數字 |最多 22 八進位字元 |      您可以直接由數字之前在適當的範圍，以表示八進位數字`&O`。 例如，`&O10`是十進位 8 八進位標記法。"
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._240_1.vb)]"
  syntax:
    content: public static string Oct (uint Number);
    parameters:
    - id: Number
      type: System.UInt32
      description: "必要。 任何有效數值運算式或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回字串，代表數字的八進位值。"
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>未指定。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt64)
  id: Oct(System.UInt64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(UInt64)
  nameWithType: Conversion.Oct(UInt64)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回字串，代表數字的八進位值。"
  remarks: "如果`Number`還不是整數，它會計算前捨入到最接近的整數。      |||  |-|-|  |數字是否 |傳回年 10 月 |  |空白 |零 (0) |  |其他任何數字 |最多 22 八進位字元 |      您可以直接由數字之前在適當的範圍，以表示八進位數字`&O`。 例如，`&O10`是十進位 8 八進位標記法。"
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._219_1.vb)]"
  syntax:
    content: public static string Oct (ulong Number);
    parameters:
    - id: Number
      type: System.UInt64
      description: "必要。 任何有效數值運算式或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式。"
    return:
      type: System.String
      description: "傳回字串，代表數字的八進位值。"
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>未指定。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Str(System.Object)
  id: Str(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Str(Object)
  nameWithType: Conversion.Str(Object)
  fullName: Microsoft.VisualBasic.Conversion.Str(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>數字表示。"
  remarks: "當數字轉換為字串時，前置空格一定會保留正負號的`Number`。 如果`Number`為正數，傳回的字串包含空格，而且加號會隱含。 減號 （-），且沒有前置空格，就會包含為負數。       使用`Format`將您要格式化為日期、 時間、 貨幣或其他使用者定義格式的數值轉換成函式。 不同於`Str`函式，`Format`函式不會加上正負號的前置空格`Number`。      > [!NOTE] >`Str`函式只會將句點 (`.`) 做為有效的十進位分隔符號。 如果使用不同的十進位分隔符號 （例如，在國際應用程式），使用`CStr`或`Format`函式來將數字轉換為字串。 若要取得特定文化特性中的數字的字串表示，使用數字的`ToString(IFormatProvider)`方法。 例如，使用<xref:System.Double.ToString%2A>轉換類型的值時`Double`為字串。</xref:System.Double.ToString%2A>"
  example:
  - "This example uses the `Str` function to return a `String` representation of a number. When a positive number is converted to a string, a leading space is always reserved for its sign.  \n  \n [!code-vb[VbVbalrStrings#1](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._24_1.vb)]"
  syntax:
    content: public static string Str (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: "必要。 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>包含任何有效數值運算式。"
    return:
      type: System.String
      description: "傳回<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>數字表示。"
  overload: Microsoft.VisualBasic.Conversion.Str*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>未指定。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>Number</code>不是數值類型。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Val(System.Char)
  id: Val(System.Char)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Val(Char)
  nameWithType: Conversion.Val(Char)
  fullName: Microsoft.VisualBasic.Conversion.Val(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回適當類型的數值形式包含在字串中的數字。"
  remarks: "`Val`函式停止讀取第一個字元無法辨識為數字部分的字串。 無法辨識符號和通常被視為數值，例如貨幣符號和逗號，部分的字元。 不過，此函式會辨識基數前置詞`&O`(如八進位) 和`&H`（針對十六進位方式）。 空格、 定位點和換行字元都會從引數。       下列呼叫會傳回 1615198 的值。      ```      Val(&quot; 1615 198th Street N.E.&quot;)    ```下列呼叫會傳回-1 的十進位值。      ```      Val(&quot;&HFFFF&quot;)    ```      > [!NOTE]>`Val`函式只會將句點 (`.`) 做為有效的十進位分隔符號。 當使用不同的小數分隔符號時，如同國際化應用程式，使用`CDbl`或`CInt`改為將字串轉換成數字。 若要將特定文化特性之數字的字串表示轉換為數值，使用 數值類型之`Parse(String, IFormatProvider)`方法。 例如，使用<xref:System.Double.Parse%2A?displayProperty=fullName>字串轉換成`Double`。</xref:System.Double.Parse%2A?displayProperty=fullName>      > [!NOTE] ><xref:System.InvalidCastException>可能在某些罕見的數字格式的回應中引發例外狀況。</xref:System.InvalidCastException> 例如，下列程式碼會引發這個例外狀況。   >> `&quot; These examples cause run-time errors.` >> `&quot;Console.WriteLine(Val(&quot;1.34%&quot;))` >> `&quot;Console.WriteLine(Val(&quot;1.34&&quot;))` >> 數目之間的衝突格式化為`Double`和`Integer`和`Long`會由編譯器所攔截類型字元，如果它未包含在字串中。   >    >  `&quot; These examples cause compiler errors.`   >    >  `&quot;Dim m = 1.34%`   >    >  `&quot;Dim n = 1.34&`"
  example:
  - "The following example uses the `Val` function to return the numbers contained in each string. `Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  \n  \n [!code-vb[VbVbalrFunctions#54](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._65_1.vb)]"
  syntax:
    content: public static int Val (char Expression);
    parameters:
    - id: Expression
      type: System.Char
      description: "必要。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>變數，或<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>值。 如果`Expression`的型別<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>，其值必須可轉換為<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>或<xref:System.ArgumentException>就會發生錯誤。</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "傳回適當類型的數值形式包含在字串中的數字。"
  overload: Microsoft.VisualBasic.Conversion.Val*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>InputStr</code>值太大。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Expression</code>是<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>輸入運算式，這不是轉換成<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Val(System.Object)
  id: Val(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Val(Object)
  nameWithType: Conversion.Val(Object)
  fullName: Microsoft.VisualBasic.Conversion.Val(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回適當類型的數值形式包含在字串中的數字。"
  remarks: "`Val`函式停止讀取第一個字元無法辨識為數字部分的字串。 無法辨識符號和通常被視為數值，例如貨幣符號和逗號，部分的字元。 不過，此函式會辨識基數前置詞`&O`(如八進位) 和`&H`（針對十六進位方式）。 空格、 定位點和換行字元會移除從引數。       下列呼叫會傳回 1234123 的值。      ```      Val(&quot; 1234 123th Street N.E.&quot;)    ```下列呼叫會傳回-1 的十進位值。      ```      Val(&quot;&HFFFF&quot;)    ```      > [!NOTE]>`Val`函式只會將句點 (`.`) 做為有效的十進位分隔符號。 會用到其他的十進位分隔符號，例如國際化應用程式，使用`CDbl`或`CInt`改為將字串轉換成數字。 若要將特定文化特性之數字的字串表示轉換為數值，使用 數值類型之`Parse(String, IFormatProvider)`方法。 例如，使用<xref:System.Double.Parse%2A?displayProperty=fullName>字串轉換成`Double`。</xref:System.Double.Parse%2A?displayProperty=fullName>      > [!NOTE] ><xref:System.InvalidCastException>可能在某些罕見的數字格式的回應中引發例外狀況。</xref:System.InvalidCastException> 例如，下列程式碼會引發這個例外狀況。   >> `&quot; These examples cause run-time errors.` >> `&quot;Console.WriteLine(Val(&quot;1.34%&quot;))` >> `&quot;Console.WriteLine(Val(&quot;1.34&&quot;))` >> 數目之間的衝突格式化為`Double`和`Integer`和`Long`衝突未包含在字串中，就會由編譯器所攔截類型字元。   >    >  `&quot; These examples cause compiler errors.`   >    >  `&quot;Dim m = 1.34%`   >    >  `&quot;Dim n = 1.34&`"
  example:
  - "The following example uses the `Val` function to return the numbers contained in each string. `Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  \n  \n [!code-vb[VbVbalrFunctions#54](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._98_1.vb)]"
  syntax:
    content: public static double Val (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "必要。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>變數，或<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>值。 如果`Expression`的型別<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>，其值必須可轉換為<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>或<xref:System.ArgumentException>就會發生錯誤。</xref:System.ArgumentException>"
    return:
      type: System.Double
      description: "傳回適當類型的數值形式包含在字串中的數字。"
  overload: Microsoft.VisualBasic.Conversion.Val*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>InputStr</code>值太大。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Expression</code>是<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>輸入運算式，這不是轉換成<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Val(System.String)
  id: Val(System.String)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Val(String)
  nameWithType: Conversion.Val(String)
  fullName: Microsoft.VisualBasic.Conversion.Val(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回適當類型的數值形式包含在字串中的數字。"
  remarks: "`Val`函式停止讀取第一個字元無法辨識為數字部分的字串。 無法辨識符號和通常被視為數值，例如貨幣符號和逗號，部分的字元。 不過，此函式會辨識基數前置詞`&O`(如八進位) 和`&H`（針對十六進位方式）。 空格、 定位點和換行字元會移除從引數。       下列呼叫會傳回 1234123 的值。      ```      Val(&quot; 1234 123th Street N.E.&quot;)    ```下列呼叫會傳回-1 的十進位值。      ```      Val(&quot;&HFFFF&quot;)    ```      > [!NOTE]>`Val`函式只會將句點 (`.`) 做為有效的十進位分隔符號。 會用到其他的十進位分隔符號，例如國際化應用程式，使用`CDbl`或`CInt`改為將字串轉換成數字。 若要將特定文化特性之數字的字串表示轉換為數值，使用 數值類型之`Parse(String, IFormatProvider)`方法。 例如，使用<xref:System.Double.Parse%2A?displayProperty=fullName>字串轉換成`Double`。</xref:System.Double.Parse%2A?displayProperty=fullName>      > [!NOTE] ><xref:System.InvalidCastException>可能在某些罕見的數字格式的回應中引發例外狀況。</xref:System.InvalidCastException> 例如，下列程式碼會引發這個例外狀況。   >> `&quot; These examples cause run-time errors.` >> `&quot;Console.WriteLine(Val(&quot;1.34%&quot;))` >> `&quot;Console.WriteLine(Val(&quot;1.34&&quot;))` >> 數目之間的衝突格式化為`Double`和`Integer`和`Long`衝突未包含在字串中，就會由編譯器所攔截類型字元。   >    >  `&quot; These examples cause compiler errors.`   >    >  `&quot;Dim m = 1.34%`   >    >  `&quot;Dim n = 1.34&`"
  example:
  - "The following example uses the `Val` function to return the numbers contained in each string. `Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  \n  \n [!code-vb[VbVbalrFunctions#54](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._227_1.vb)]"
  syntax:
    content: public static double Val (string InputStr);
    parameters:
    - id: InputStr
      type: System.String
      description: "必要。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>變數，或<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>值。 如果`Expression`的型別<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>，其值必須可轉換為<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>或<xref:System.ArgumentException>就會發生錯誤。</xref:System.ArgumentException>"
    return:
      type: System.Double
      description: "傳回適當類型的數值形式包含在字串中的數字。"
  overload: Microsoft.VisualBasic.Conversion.Val*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>InputStr</code>值太大。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Expression</code>是<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>輸入運算式，這不是轉換成<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.OverflowException
  isExternal: true
  name: System.OverflowException
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: CTypeDynamic(Object,Type)
  nameWithType: Conversion.CTypeDynamic(Object,Type)
  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: CTypeDynamic(Object)
  nameWithType: Conversion.CTypeDynamic(Object)
  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object)
- uid: TargetType
  isExternal: true
  name: TargetType
  nameWithType: TargetType
  fullName: TargetType
- uid: Microsoft.VisualBasic.Conversion.ErrorToString
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: ErrorToString()
  nameWithType: Conversion.ErrorToString()
  fullName: Microsoft.VisualBasic.Conversion.ErrorToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: ErrorToString(Int32)
  nameWithType: Conversion.ErrorToString(Int32)
  fullName: Microsoft.VisualBasic.Conversion.ErrorToString(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Decimal)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Decimal)
  nameWithType: Conversion.Fix(Decimal)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Double)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Double)
  nameWithType: Conversion.Fix(Double)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Int16)
  nameWithType: Conversion.Fix(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int16)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Int32)
  nameWithType: Conversion.Fix(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int32)
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Int64)
  nameWithType: Conversion.Fix(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Object)
  nameWithType: Conversion.Fix(Object)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Object)
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Single)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Single)
  nameWithType: Conversion.Fix(Single)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Byte)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Byte)
  nameWithType: Conversion.Hex(Byte)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Byte)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Int16)
  nameWithType: Conversion.Hex(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int16)
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Int32)
  nameWithType: Conversion.Hex(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int32)
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Int64)
  nameWithType: Conversion.Hex(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int64)
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Object)
  nameWithType: Conversion.Hex(Object)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Object)
- uid: Microsoft.VisualBasic.Conversion.Hex(System.SByte)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(SByte)
  nameWithType: Conversion.Hex(SByte)
  fullName: Microsoft.VisualBasic.Conversion.Hex(SByte)
- uid: System.SByte
  parent: System
  isExternal: true
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(UInt16)
  nameWithType: Conversion.Hex(UInt16)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt16)
- uid: System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(UInt32)
  nameWithType: Conversion.Hex(UInt32)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(UInt64)
  nameWithType: Conversion.Hex(UInt64)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt64)
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Microsoft.VisualBasic.Conversion.Int(System.Decimal)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Decimal)
  nameWithType: Conversion.Int(Decimal)
  fullName: Microsoft.VisualBasic.Conversion.Int(Decimal)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Double)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Double)
  nameWithType: Conversion.Int(Double)
  fullName: Microsoft.VisualBasic.Conversion.Int(Double)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Int16)
  nameWithType: Conversion.Int(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int16)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Int32)
  nameWithType: Conversion.Int(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int32)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Int64)
  nameWithType: Conversion.Int(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int64)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Object)
  nameWithType: Conversion.Int(Object)
  fullName: Microsoft.VisualBasic.Conversion.Int(Object)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Single)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Single)
  nameWithType: Conversion.Int(Single)
  fullName: Microsoft.VisualBasic.Conversion.Int(Single)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Byte)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Byte)
  nameWithType: Conversion.Oct(Byte)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Byte)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Int16)
  nameWithType: Conversion.Oct(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int16)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Int32)
  nameWithType: Conversion.Oct(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int32)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Int64)
  nameWithType: Conversion.Oct(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int64)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Object)
  nameWithType: Conversion.Oct(Object)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Object)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.SByte)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(SByte)
  nameWithType: Conversion.Oct(SByte)
  fullName: Microsoft.VisualBasic.Conversion.Oct(SByte)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(UInt16)
  nameWithType: Conversion.Oct(UInt16)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt16)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(UInt32)
  nameWithType: Conversion.Oct(UInt32)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt32)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(UInt64)
  nameWithType: Conversion.Oct(UInt64)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt64)
- uid: Microsoft.VisualBasic.Conversion.Str(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Str(Object)
  nameWithType: Conversion.Str(Object)
  fullName: Microsoft.VisualBasic.Conversion.Str(Object)
- uid: Microsoft.VisualBasic.Conversion.Val(System.Char)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Val(Char)
  nameWithType: Conversion.Val(Char)
  fullName: Microsoft.VisualBasic.Conversion.Val(Char)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: Microsoft.VisualBasic.Conversion.Val(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Val(Object)
  nameWithType: Conversion.Val(Object)
  fullName: Microsoft.VisualBasic.Conversion.Val(Object)
- uid: Microsoft.VisualBasic.Conversion.Val(System.String)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Val(String)
  nameWithType: Conversion.Val(String)
  fullName: Microsoft.VisualBasic.Conversion.Val(String)
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: CTypeDynamic
  nameWithType: Conversion.CTypeDynamic
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic<TargetType>*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: CTypeDynamic<TargetType>
  nameWithType: Conversion.CTypeDynamic<TargetType>
- uid: Microsoft.VisualBasic.Conversion.ErrorToString*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: ErrorToString
  nameWithType: Conversion.ErrorToString
- uid: Microsoft.VisualBasic.Conversion.Fix*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix
  nameWithType: Conversion.Fix
- uid: Microsoft.VisualBasic.Conversion.Hex*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex
  nameWithType: Conversion.Hex
- uid: Microsoft.VisualBasic.Conversion.Int*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int
  nameWithType: Conversion.Int
- uid: Microsoft.VisualBasic.Conversion.Oct*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct
  nameWithType: Conversion.Oct
- uid: Microsoft.VisualBasic.Conversion.Str*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Str
  nameWithType: Conversion.Str
- uid: Microsoft.VisualBasic.Conversion.Val*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Val
  nameWithType: Conversion.Val
