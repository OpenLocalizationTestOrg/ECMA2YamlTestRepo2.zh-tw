### YamlMime:ManagedReference
items:
- uid: System.Windows.Markup.DependencyPropertyConverter
  id: DependencyPropertyConverter
  children:
  - System.Windows.Markup.DependencyPropertyConverter.#ctor
  - System.Windows.Markup.DependencyPropertyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  - System.Windows.Markup.DependencyPropertyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  - System.Windows.Markup.DependencyPropertyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  - System.Windows.Markup.DependencyPropertyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  langs:
  - csharp
  name: DependencyPropertyConverter
  nameWithType: DependencyPropertyConverter
  fullName: System.Windows.Markup.DependencyPropertyConverter
  type: Class
  summary: "將轉換從字串到<xref href=&quot;System.Windows.DependencyProperty&quot;></xref>物件。"
  remarks: "DependencyPropertyConverter 類別只會將轉換從<xref:System.String><xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty>的執行個體</xref:System.String> 轉換的其他嘗試擲回例外狀況。       從轉換 DependencyPropertyConverter<xref:System.String>使用下列格式輸入︰ *typeName*`.`*propertyName*。</xref:System.String> 格式為*namespacePrefix*:*typeName*`.`*propertyName*也接受為舊版，但*namespacePrefix*︰ 會略過元件。 格式為*propertyName*也接受在某些情況下，此格式會依賴能夠評估環境的屬性，並且推論出*typeName*，由服務實作<xref:System.Xaml.IAmbientProvider>內容中。</xref:System.Xaml.IAmbientProvider>       由於傳統原因，此類別也支援從 BAML 記錄轉換，但這是實作詳細資料，而且不應該依賴在。       這個轉換子的行為特別導向周圍的單一 WPF XAML 處理案例︰ 讀取屬性值<xref:System.Windows.Setter.Property%2A>並產生<xref:System.Windows.DependencyProperty>值。</xref:System.Windows.DependencyProperty> </xref:System.Windows.Setter.Property%2A>      <a name=&quot;xamlTextUsage_DependencyPropertyConverter&quot;></a># # XAML 文字用法"
  syntax:
    content: 'public sealed class DependencyPropertyConverter : System.ComponentModel.TypeConverter'
  inheritance:
  - System.Object
  - System.ComponentModel.TypeConverter
  implements: []
  inheritedMembers:
  - System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)
  - System.ComponentModel.TypeConverter.CanConvertTo(System.Type)
  - System.ComponentModel.TypeConverter.ConvertFrom(System.Object)
  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.String)
  - System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)
  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.Object)
  - System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
  - System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  - System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)
  - System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)
  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported
  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  - System.ComponentModel.TypeConverter.GetProperties(System.Object)
  - System.ComponentModel.TypeConverter.GetPropertiesSupported
  - System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetStandardValues
  - System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetStandardValuesExclusive
  - System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetStandardValuesSupported
  - System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.IsValid(System.Object)
  - System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  platform:
  - net462
- uid: System.Windows.Markup.DependencyPropertyConverter.#ctor
  id: '#ctor'
  parent: System.Windows.Markup.DependencyPropertyConverter
  langs:
  - csharp
  name: DependencyPropertyConverter()
  nameWithType: DependencyPropertyConverter.DependencyPropertyConverter()
  fullName: System.Windows.Markup.DependencyPropertyConverter.DependencyPropertyConverter()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.Markup.DependencyPropertyConverter&quot;></xref>類別。"
  syntax:
    content: public DependencyPropertyConverter ();
    parameters: []
  overload: System.Windows.Markup.DependencyPropertyConverter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.DependencyPropertyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  id: CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  parent: System.Windows.Markup.DependencyPropertyConverter
  langs:
  - csharp
  name: CanConvertFrom(ITypeDescriptorContext,Type)
  nameWithType: DependencyPropertyConverter.CanConvertFrom(ITypeDescriptorContext,Type)
  fullName: System.Windows.Markup.DependencyPropertyConverter.CanConvertFrom(ITypeDescriptorContext,Type)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "判斷指定之類型的物件是否可以轉換的執行個體<xref href=&quot;System.Windows.DependencyProperty&quot;> </xref>。"
  remarks: "<xref:System.Windows.Markup.DependencyPropertyConverter>類別只能將字串轉換成<xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty>的執行個體</xref:System.Windows.Markup.DependencyPropertyConverter> 因此只有`sourceType`的<xref:System.String>傳回`true`。</xref:System.String>       `context`不會使用這項實作。"
  syntax:
    content: public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext context, Type sourceType);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "這個轉換子就要從中叫用的環境的相關資訊會提供格式內容。"
    - id: sourceType
      type: System.Type
      description: "轉換所評估的類型。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個轉換子可以執行作業。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Markup.DependencyPropertyConverter.CanConvertFrom*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.DependencyPropertyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  id: CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  parent: System.Windows.Markup.DependencyPropertyConverter
  langs:
  - csharp
  name: CanConvertTo(ITypeDescriptorContext,Type)
  nameWithType: DependencyPropertyConverter.CanConvertTo(ITypeDescriptorContext,Type)
  fullName: System.Windows.Markup.DependencyPropertyConverter.CanConvertTo(ITypeDescriptorContext,Type)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "判斷執行個體是否<xref href=&quot;System.Windows.DependencyProperty&quot;></xref>可以轉換成指定的型別。"
  remarks: "這個實作一律會傳回`false`。"
  syntax:
    content: public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "這個轉換子就要從中叫用的環境的相關資訊會提供格式內容。"
    - id: destinationType
      type: System.Type
      description: "轉換所評估的類型。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個轉換子可以執行作業。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Markup.DependencyPropertyConverter.CanConvertTo*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.DependencyPropertyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  id: ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  parent: System.Windows.Markup.DependencyPropertyConverter
  langs:
  - csharp
  name: ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
  nameWithType: DependencyPropertyConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
  fullName: System.Windows.Markup.DependencyPropertyConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "嘗試將指定的物件轉換成<xref href=&quot;System.Windows.DependencyProperty&quot;> </xref>，使用指定的內容。"
  remarks: "<xref:System.Windows.Markup.DependencyPropertyConverter>類別只能將字串轉換成<xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty>的執行個體</xref:System.Windows.Markup.DependencyPropertyConverter>       `culture`不會使用這項實作。       `context`提供必須為提供服務所需的適當評估。 這些包括<xref:System.Xaml.IAmbientProvider>， <xref:System.Windows.Markup.IXamlTypeResolver>，和<xref:System.Xaml.IXamlSchemaContextProvider>。</xref:System.Xaml.IXamlSchemaContextProvider> </xref:System.Windows.Markup.IXamlTypeResolver> </xref:System.Xaml.IAmbientProvider>"
  syntax:
    content: public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object source);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "這個轉換子就要從中叫用的環境的相關資訊會提供格式內容。"
    - id: culture
      type: System.Globalization.CultureInfo
      description: "文化特性特定資訊。"
    - id: source
      type: System.Object
      description: "要轉換的物件。"
    return:
      type: System.Object
      description: "轉換的物件。 如果轉換成功，這是<xref href=&quot;System.Windows.DependencyProperty&quot;> </xref>。"
  overload: System.Windows.Markup.DependencyPropertyConverter.ConvertFrom*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>source</code>無法轉換。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>context</code>or <code>source</code> are <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Markup.DependencyPropertyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  id: ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  parent: System.Windows.Markup.DependencyPropertyConverter
  langs:
  - csharp
  name: ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
  nameWithType: DependencyPropertyConverter.ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
  fullName: System.Windows.Markup.DependencyPropertyConverter.ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "嘗試轉換<xref href=&quot;System.Windows.DependencyProperty&quot;></xref>為指定的類型，使用指定的內容。 一律會擲回例外狀況。"
  remarks: "這個實作一律會擲回例外狀況。"
  syntax:
    content: public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "這個轉換子就要從中叫用的環境的相關資訊會提供格式內容。"
    - id: culture
      type: System.Globalization.CultureInfo
      description: "文化特性特定資訊。"
    - id: value
      type: System.Object
      description: "要轉換的物件。"
    - id: destinationType
      type: System.Type
      description: "要轉換的物件類型。"
    return:
      type: System.Object
      description: "一律會擲回例外狀況。"
  overload: System.Windows.Markup.DependencyPropertyConverter.ConvertTo*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "在所有情況下。"
  platform:
  - net462
references:
- uid: System.ComponentModel.TypeConverter
  isExternal: false
  name: System.ComponentModel.TypeConverter
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Markup.DependencyPropertyConverter.#ctor
  parent: System.Windows.Markup.DependencyPropertyConverter
  isExternal: false
  name: DependencyPropertyConverter()
  nameWithType: DependencyPropertyConverter.DependencyPropertyConverter()
  fullName: System.Windows.Markup.DependencyPropertyConverter.DependencyPropertyConverter()
- uid: System.Windows.Markup.DependencyPropertyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  parent: System.Windows.Markup.DependencyPropertyConverter
  isExternal: false
  name: CanConvertFrom(ITypeDescriptorContext,Type)
  nameWithType: DependencyPropertyConverter.CanConvertFrom(ITypeDescriptorContext,Type)
  fullName: System.Windows.Markup.DependencyPropertyConverter.CanConvertFrom(ITypeDescriptorContext,Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.ITypeDescriptorContext
  parent: System.ComponentModel
  isExternal: false
  name: ITypeDescriptorContext
  nameWithType: ITypeDescriptorContext
  fullName: System.ComponentModel.ITypeDescriptorContext
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.Markup.DependencyPropertyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  parent: System.Windows.Markup.DependencyPropertyConverter
  isExternal: false
  name: CanConvertTo(ITypeDescriptorContext,Type)
  nameWithType: DependencyPropertyConverter.CanConvertTo(ITypeDescriptorContext,Type)
  fullName: System.Windows.Markup.DependencyPropertyConverter.CanConvertTo(ITypeDescriptorContext,Type)
- uid: System.Windows.Markup.DependencyPropertyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  parent: System.Windows.Markup.DependencyPropertyConverter
  isExternal: false
  name: ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
  nameWithType: DependencyPropertyConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
  fullName: System.Windows.Markup.DependencyPropertyConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Windows.Markup.DependencyPropertyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  parent: System.Windows.Markup.DependencyPropertyConverter
  isExternal: false
  name: ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
  nameWithType: DependencyPropertyConverter.ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
  fullName: System.Windows.Markup.DependencyPropertyConverter.ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
- uid: System.Windows.Markup.DependencyPropertyConverter.#ctor*
  parent: System.Windows.Markup.DependencyPropertyConverter
  isExternal: false
  name: DependencyPropertyConverter
  nameWithType: DependencyPropertyConverter.DependencyPropertyConverter
- uid: System.Windows.Markup.DependencyPropertyConverter.CanConvertFrom*
  parent: System.Windows.Markup.DependencyPropertyConverter
  isExternal: false
  name: CanConvertFrom
  nameWithType: DependencyPropertyConverter.CanConvertFrom
- uid: System.Windows.Markup.DependencyPropertyConverter.CanConvertTo*
  parent: System.Windows.Markup.DependencyPropertyConverter
  isExternal: false
  name: CanConvertTo
  nameWithType: DependencyPropertyConverter.CanConvertTo
- uid: System.Windows.Markup.DependencyPropertyConverter.ConvertFrom*
  parent: System.Windows.Markup.DependencyPropertyConverter
  isExternal: false
  name: ConvertFrom
  nameWithType: DependencyPropertyConverter.ConvertFrom
- uid: System.Windows.Markup.DependencyPropertyConverter.ConvertTo*
  parent: System.Windows.Markup.DependencyPropertyConverter
  isExternal: false
  name: ConvertTo
  nameWithType: DependencyPropertyConverter.ConvertTo
