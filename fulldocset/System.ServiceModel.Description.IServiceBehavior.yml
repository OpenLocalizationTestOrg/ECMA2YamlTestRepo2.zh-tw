### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Description.IServiceBehavior
  id: IServiceBehavior
  children:
  - System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  - System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  - System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  langs:
  - csharp
  name: IServiceBehavior
  nameWithType: IServiceBehavior
  fullName: System.ServiceModel.Description.IServiceBehavior
  type: Interface
  summary: "提供一個機制來修改或插入自訂擴充整個服務，包括<xref href=&quot;System.ServiceModel.ServiceHostBase&quot;> </xref>。"
  remarks: "實作 IServiceBehavior 來修改、 檢查或擴充整個服務執行應用程式層級的某些方面:-使用<xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A>方法來變更執行階段屬性值或插入自訂延伸物件，例如錯誤處理常式、 訊息或參數攔截器、 安全性延伸模組和其他自訂延伸物件。</xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A>      -使用<xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A>方法之前檢查描述[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]建構執行的服務，以確認可以正確執行。</xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A>      -使用<xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A>方法將傳遞至繫結項目的服務的自訂資訊，讓它能夠正確支援服務。</xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A>       請 IServiceBehavior 物件可以利用其中任何一種方法，但通常只有一個為重要的;在這種情況下未使用的方法可以傳回不含值。      > [!NOTE] > 通過所有 IServiceBehavior 方法<xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>和<xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>物件當做參數。</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName> <xref:System.ServiceModel.Description.ServiceDescription>參數僅供檢查用途; 如果您修改這些物件的執行行為是未定義。</xref:System.ServiceModel.Description.ServiceDescription>       若要執行其適用的自訂工作，必須 IServiceBehavior 物件加入至<xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A>屬性在建構服務執行階段之前。</xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> 有三種方式來執行這項操作:-以程式設計方式加入自訂服務行為<xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A>屬性之前其中<xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=fullName>上呼叫方法<xref:System.ServiceModel.ServiceHost?displayProperty=fullName>物件。</xref:System.ServiceModel.ServiceHost?displayProperty=fullName> </xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A>      -建立實作 IServiceBehavior 的自訂屬性，並使用它來標示要修改的服務類別。 當<xref:System.ServiceModel.ServiceHost>建構物件時，[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]使用反映來探索服務類型的屬性。</xref:System.ServiceModel.ServiceHost> 如果任何屬性實作 IServiceBehavior，加入到<xref:System.ServiceModel.Description.ServiceDescription>.</xref:System.ServiceModel.Description.ServiceDescription>的行為集合      擴充<xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>類別，以支援應用程式或電腦組態檔中的行為的規格。</xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName> 請參閱 < 範例 > 一節，如需詳細資訊。       中的服務行為的範例[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]包含<xref:System.ServiceModel.ServiceBehaviorAttribute>屬性<xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=fullName>、<xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=fullName>和<xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=fullName>行為。</xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=fullName> </xref:System.ServiceModel.ServiceBehaviorAttribute>"
  example:
  - "The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application. In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.  \n  \n The following IServiceBehavior implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=fullName> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=fullName> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=fullName> of type `GreetingFault`.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public interface IServiceBehavior
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  id: AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  parent: System.ServiceModel.Description.IServiceBehavior
  langs:
  - csharp
  name: AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  nameWithType: IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  fullName: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "提供將自訂資料傳遞至繫結項目以支援合約實作的功能。"
  remarks: "使用自訂的資料將物件加入至 AddBindingParameters 方法`parameters`繫結項目可用來取得額外的資訊，使其能夠支援合約的集合。       這個方法會針對每個接聽 URI 呼叫一次。 例如，如果服務有四個端點，其中的兩個具有相同的接聽 URI，便會呼叫這個方法三次。 原因在於`bindingParameters`目標每個通道堆疊，而且沒有一個通道堆疊的每個接聽 URI。 由於每個呼叫都會收到該接聽 URI 上的這些端點，兩個呼叫會分別取得單一<xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName>，而一個呼叫會取得兩個集合<xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName>物件。</xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName>      > [!NOTE] > 所有<xref:System.ServiceModel.Description.IServiceBehavior>方法都會傳遞<xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>和<xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>物件當做參數。</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior> <xref:System.ServiceModel.Description.ServiceDescription>參數是供檢查和插入自訂項目只; 如果您要修改這些物件的執行行為是未定義。</xref:System.ServiceModel.Description.ServiceDescription>"
  syntax:
    content: public void AddBindingParameters (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint> endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);
    parameters:
    - id: serviceDescription
      type: System.ServiceModel.Description.ServiceDescription
      description: "服務的服務描述。"
    - id: serviceHostBase
      type: System.ServiceModel.ServiceHostBase
      description: "服務主機。"
    - id: endpoints
      type: System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint}
      description: "服務端點。"
    - id: bindingParameters
      type: System.ServiceModel.Channels.BindingParameterCollection
      description: "自訂繫結項目可存取的物件。"
  overload: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  id: ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  langs:
  - csharp
  name: ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "提供變更執行階段屬性值或插入自訂延伸物件，例如錯誤處理常式、 訊息或參數攔截器、 安全性延伸模組和其他自訂延伸物件的能力。"
  remarks: "實作 ApplyDispatchBehavior 方法，以檢查或修改<xref:System.ServiceModel.ServiceHostBase>為了支援某些自訂執行案例所建構的物件。</xref:System.ServiceModel.ServiceHostBase>      > [!NOTE] > 所有<xref:System.ServiceModel.Description.IServiceBehavior>方法都會傳遞<xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>和<xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>物件當做參數。</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior> <xref:System.ServiceModel.Description.ServiceDescription>參數是供檢查和插入自訂項目只; 如果您要修改這些物件的執行行為是未定義。</xref:System.ServiceModel.Description.ServiceDescription>"
  example:
  - "The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application. In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.  \n  \n The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=fullName> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=fullName> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=fullName> of type `GreetingFault`.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);
    parameters:
    - id: serviceDescription
      type: System.ServiceModel.Description.ServiceDescription
      description: "服務描述。"
    - id: serviceHostBase
      type: System.ServiceModel.ServiceHostBase
      description: "目前正在建立主機。"
  overload: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  id: Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  langs:
  - csharp
  name: Validate(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "提供檢查服務主機的能力和服務描述，以確認服務能夠順利執行。"
  remarks: "若要確認目前的服務是否可以正確執行根據您的情況使用驗證方法。      > [!NOTE] > 所有<xref:System.ServiceModel.Description.IServiceBehavior>方法都會傳遞<xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>和<xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>物件當做參數。</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior> <xref:System.ServiceModel.Description.ServiceDescription>參數是供檢查和插入自訂項目只; 如果您要修改這些物件的執行行為是未定義。</xref:System.ServiceModel.Description.ServiceDescription>"
  example:
  - "The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application. In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.  \n  \n The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=fullName> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=fullName> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=fullName> of type `GreetingFault`.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void Validate (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);
    parameters:
    - id: serviceDescription
      type: System.ServiceModel.Description.ServiceDescription
      description: "服務描述。"
    - id: serviceHostBase
      type: System.ServiceModel.ServiceHostBase
      description: "目前正在建構服務主機。"
  overload: System.ServiceModel.Description.IServiceBehavior.Validate*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  nameWithType: IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  fullName: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
- uid: System.ServiceModel.Description.ServiceDescription
  parent: System.ServiceModel.Description
  isExternal: false
  name: ServiceDescription
  nameWithType: ServiceDescription
  fullName: System.ServiceModel.Description.ServiceDescription
- uid: System.ServiceModel.ServiceHostBase
  parent: System.ServiceModel
  isExternal: false
  name: ServiceHostBase
  nameWithType: ServiceHostBase
  fullName: System.ServiceModel.ServiceHostBase
- uid: System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<ServiceEndpoint>
  nameWithType: Collection<ServiceEndpoint>
  fullName: System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.ServiceModel.Description.ServiceEndpoint>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Description.ServiceEndpoint
    name: ServiceEndpoint
    nameWithType: ServiceEndpoint
    fullName: ServiceEndpoint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Channels.BindingParameterCollection
  parent: System.ServiceModel.Channels
  isExternal: true
  name: BindingParameterCollection
  nameWithType: BindingParameterCollection
  fullName: System.ServiceModel.Channels.BindingParameterCollection
- uid: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
- uid: System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: Validate(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
- uid: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters*
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: AddBindingParameters
  nameWithType: IServiceBehavior.AddBindingParameters
- uid: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior*
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: ApplyDispatchBehavior
  nameWithType: IServiceBehavior.ApplyDispatchBehavior
- uid: System.ServiceModel.Description.IServiceBehavior.Validate*
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: Validate
  nameWithType: IServiceBehavior.Validate
