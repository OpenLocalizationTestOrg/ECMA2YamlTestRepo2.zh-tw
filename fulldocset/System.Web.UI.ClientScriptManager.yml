### YamlMime:ManagedReference
items:
- uid: System.Web.UI.ClientScriptManager
  id: ClientScriptManager
  children:
  - System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)
  - System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)
  - System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)
  - System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)
  - System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)
  - System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)
  - System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)
  - System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)
  - System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)
  - System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)
  - System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.ValidateEvent(System.String)
  - System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)
  langs:
  - csharp
  name: ClientScriptManager
  nameWithType: ClientScriptManager
  fullName: System.Web.UI.ClientScriptManager
  type: Class
  summary: "定義方法來管理 Web 應用程式中的用戶端指令碼。"
  remarks: "ClientScriptManager 類別用來管理用戶端指令碼，並將它們加入至 Web 應用程式。 您可以取得 ClientScriptManager 類別，從參考<xref:System.Web.UI.Page.ClientScript%2A>屬性<xref:System.Web.UI.Page>物件。</xref:System.Web.UI.Page> </xref:System.Web.UI.Page.ClientScript%2A>       您可以將用戶端指令碼加入網頁以宣告方式在頁面的 HTML 標記中包含指令碼。 不過，有很多情況下以動態方式加入用戶端指令碼會在需要時。 若要以動態方式加入指令碼，使用的<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>方法，則此<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>方法的<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>方法或<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>方法，會根據時間和方式想要新增指令碼。</xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> </xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> </xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> </xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> 如需詳細資訊，請參閱[如何︰ 加入用戶端指令碼以動態方式以 ASP.NET Web Pages](~/add/includes/ajax-current-ext-md.md)。       依索引鍵<xref:System.String>和<xref:System.Type>。</xref:System.Type> </xref:System.String> ClientScriptManager 類別唯一識別的指令碼 具有相同索引鍵和類型的指令碼會被視為重複。 使用指令碼類型有助於避免混淆類似的指令碼可能會在頁面上的使用中的不同使用者控制項。       ClientScriptManager 類別可以用來叫用用戶端回呼的情況下，最好從用戶端執行伺服端程式碼，但未執行回傳時。 這被指執行超出訊號範圍回呼伺服器。 在用戶端回呼，用戶端指令碼函式會傳送至 ASP.NET 網頁的非同步要求。 Web 網頁會執行其一般生命週期的修改的版本，以處理回呼。 使用<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>方法，以取得用戶端函式的參考，叫用時，會起始伺服器事件的用戶端回呼。</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> 如需詳細資訊，請參閱[實作用戶端回呼而不回傳](~/add/includes/ajax-current-ext-md.md)。      > [!NOTE] > 回呼指令碼將無法用在舊的瀏覽器不支援文件物件模型 (DOM)，而且會要求 ECMAScript 已啟用用戶端上。 若要檢查瀏覽器是否支援回呼，請使用<xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A>屬性，可透過存取<xref:System.Web.HttpRequest.Browser%2A>屬性的內建 ASP.NET<xref:System.Web.HttpContext.Request%2A>物件。</xref:System.Web.HttpContext.Request%2A> </xref:System.Web.HttpRequest.Browser%2A> </xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A>       使用<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>方法和<xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A>方法，以定義用戶端的回傳事件。</xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> 這些方法可讓用戶端指令碼函式，當叫用，會導致回傳至網頁伺服器。 用戶端的回傳事件不同的是從用戶端回呼網頁完成一般生命週期，以處理用戶端回傳事件。      > [!NOTE] > 如果您使用<xref:System.Web.UI.WebControls.Button>控制項和<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>屬性設定為`false`，則您可以使用<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>方法以傳回用戶端回傳事件<xref:System.Web.UI.WebControls.Button>控制項。</xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> </xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> </xref:System.Web.UI.WebControls.Button>       <xref:System.Web.UI.WebControls.Button.OnClientClick%2A>屬性<xref:System.Web.UI.WebControls.Button>控制項，<xref:System.Web.UI.WebControls.ImageButton>控制項和<xref:System.Web.UI.WebControls.LinkButton>控制項可以用來執行用戶端指令碼。</xref:System.Web.UI.WebControls.LinkButton> </xref:System.Web.UI.WebControls.ImageButton> </xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.WebControls.Button.OnClientClick%2A>"
  example:
  - "The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method of the ClientScriptManager class. Two client scripts are defined in the page: `PopupScript`, which displays an alert message when the page is loaded, and `ButtonClickScript`, which defines a client handler for an HTML button's `onClick` event.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/t-system.web.ui.clientsc_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/t-system.web.ui.clientsc_1.aspx)]"
  syntax:
    content: public sealed class ClientScriptManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)
  id: GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetCallbackEventReference(Control,String,String,String)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "取得用戶端函數時，叫用時，用戶端會起始回撥伺服器事件的參考。 這個多載方法的用戶端函式會包含指定的控制項、 引數、 用戶端指令碼和內容。"
  remarks: "GetCallbackEventReference 方法執行的頻外回呼伺服器頁面的一般生命週期的已修改的版本。 如需詳細資訊，請參閱[實作用戶端回呼而不回傳](~/add/includes/ajax-current-ext-md.md)。      > [!NOTE] > （5.0 或更新版本） 的 Microsoft Internet Explorer 瀏覽器時，指令碼回呼機制透過 Microsoft.XmlHttp COM 物件實作，而且需要瀏覽器設為 執行 ActiveX 控制項。 會使用其他瀏覽器，XMLHttpRequest 使用瀏覽器的本機文件物件模型 (DOM)。 若要檢查瀏覽器是否支援用戶端回呼，請使用<xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A>屬性。</xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> 若要檢查瀏覽器是否支援透過 HTTP 的 XML，請使用<xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A>屬性。</xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A> 兩個屬性都可透過存取<xref:System.Web.HttpRequest.Browser%2A>屬性的內建 ASP.NET<xref:System.Web.HttpContext.Request%2A>物件。</xref:System.Web.HttpContext.Request%2A> </xref:System.Web.HttpRequest.Browser%2A>       GetCallbackEventReference 多載<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>方法會執行以同步方式透過 HTTP 使用 XML 的回呼。</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> 當回呼案例中，以同步方式傳送資料，同步回呼就會立即傳回，而不會封鎖瀏覽器。 同步沒有兩個回呼可以在瀏覽器中同時執行。 如果第二個同步回呼一經引發，而另一個是目前有擱置中，第二個同步回呼取消第一個，並會傳回第二個的回呼。       若要以非同步方式傳送資料，請使用其中一個多載採用`useAsync`參數，這是布林值，以控制此行為。 在非同步案例中，您可以有多個暫止的回呼。不過，它們傳回的順序不會保證以符合它們初始化的順序。       此外，這個多載的<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>方法會指定用戶端函式可處理所產生的錯誤狀況的情況<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>方法。</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> </xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> 若要指定將用戶端錯誤回呼處理常式，請使用其中一個多載採用`clientErrorCallback`參數。       GetCallbackEventReference 方法會採用選擇性字串`argument`參數並傳回字串。 中傳送或接收多個值，串連輸入中的值或字串，會分別傳回。      > [!NOTE] > 避免使用指令碼回呼作業期間需要更新的網頁或控制項屬性的實作中的檢視狀態。 如果屬性不受網頁要求，您可以使用工作階段狀態。"
  example:
  - "The following code example demonstrates how to use two overloads of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method in a client callback scenario that increments integers.  \n  \n Two callback mechanisms are shown; the difference between them is the use of the `context` parameter. A `ReceiveServerData1` client callback function is provided using the `context` parameter. In contrast, the `ReceiveServerData2` client callback function is defined in a `<script>` block on the page. A <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is the server handler that increments the value that is passed to it and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the incremented value as a string. If the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method returns an error, then the `ProcessCallBackError` client function is called.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager7#1](~/add/codesnippet/csharp/0153bfa5-9a40-4257-b817-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager7#1](~/add/codesnippet/visualbasic/0153bfa5-9a40-4257-b817-_1.aspx)]"
  syntax:
    content: public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "伺服器<xref href=&quot;System.Web.UI.Control&quot;></xref>可處理用戶端回呼。 控制項必須實作<xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;></xref>介面，並提供<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>方法。</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: argument
      type: System.String
      description: "引數傳遞至伺服器從用戶端指令碼<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>方法。</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: clientCallback
      type: System.String
      description: "收到成功的伺服器事件的結果用戶端事件處理常式的名稱。"
    - id: context
      type: System.String
      description: "在起始回呼之前的用戶端評估用戶端指令碼。 指令碼的結果會傳回到用戶端事件處理常式。"
    return:
      type: System.String
      description: "叫用用戶端的回呼用戶端函式的名稱。"
  overload: System.Web.UI.ClientScriptManager.GetCallbackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Web.UI.Control&quot;></xref> specified is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.Control&quot;> </xref>指定未實作<xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;></xref>介面。"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)
  id: GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetCallbackEventReference(Control,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "取得用戶端函數時，叫用時，用戶端會起始回撥伺服器事件的參考。 這個多載方法的用戶端函式會包含指定的控制項、 引數、 用戶端指令碼、 內容和布林值。"
  remarks: "這個多載<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>方法需要`useAsync`參數，可讓您以非同步方式將值設定為執行用戶端回呼`true`。</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> 這個方法的多載版本，不需要`useAsync`參數將值設為`false`預設。       如需有關這個方法的詳細資訊，請參閱備註為多載<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>方法。</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>"
  syntax:
    content: public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "伺服器<xref href=&quot;System.Web.UI.Control&quot;></xref>可處理用戶端回呼。 控制項必須實作<xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;></xref>介面，並提供<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>方法。</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: argument
      type: System.String
      description: "引數傳遞至伺服器從用戶端指令碼<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>方法。</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: clientCallback
      type: System.String
      description: "收到成功的伺服器事件的結果用戶端事件處理常式的名稱。"
    - id: context
      type: System.String
      description: "在起始回呼之前的用戶端評估用戶端指令碼。 指令碼的結果會傳回到用戶端事件處理常式。"
    - id: useAsync
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>以非同步方式; 執行回呼<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>以同步方式執行的回呼。"
    return:
      type: System.String
      description: "叫用用戶端的回呼用戶端函式的名稱。"
  overload: System.Web.UI.ClientScriptManager.GetCallbackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Web.UI.Control&quot;></xref> specified is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.Control&quot;> </xref>指定未實作<xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;></xref>介面。"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)
  id: GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetCallbackEventReference(String,String,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(String,String,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(String,String,String,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "取得用戶端函數時，叫用時，用戶端會起始回撥伺服器事件的參考。 這個多載方法的用戶端函式會包含指定的目標、 引數、 用戶端指令碼、 內容、 錯誤處理常式和布林值。"
  remarks: "這個多載<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>方法會採用`target`字串參數，而不是<xref:System.Web.UI.Control>參數。</xref:System.Web.UI.Control> </xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> 當您想要回到以外的字串，包含回呼時，請使用此多載<xref:System.Web.UI.Control.UniqueID%2A>的控制項。</xref:System.Web.UI.Control.UniqueID%2A>       此外，這個多載的<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>方法需要`useAsync`和`clientErrorCallback`參數。</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> `useAsync`參數可讓您以非同步方式將值設定為執行用戶端回呼`true`。 這個方法的多載版本，不需要`useAsync`參數將值設為`false`預設。 `clientErrorCallback`參數可讓您定義時所呼叫的用戶端函式名稱的伺服器處理常式，<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>方法，這個方法會傳回錯誤。</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> 這個方法的多載版本，不需要`clientErrorCallback`參數將值設定為 null。       如需有關這個方法的詳細資訊，請參閱備註為多載<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>方法。</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>"
  example:
  - "The following code example demonstrates how to use two overloads of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method in a client callback scenario that increments integers.  \n  \n Two callback mechanisms are shown; the difference between them is the use of the `context` parameter. A `ReceiveServerData1` client callback function is provided using the `context` parameter. In contrast, the `ReceiveServerData2` client callback function is defined in a `<script>` block on the page. A <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is the server handler that increments the value that is passed to it and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the incremented value as a string. If the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method returns an error, then the client function `ProcessCallBackError` is called.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager7#1](~/add/codesnippet/csharp/b09113ee-01c3-4887-82a1-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager7#1](~/add/codesnippet/visualbasic/b09113ee-01c3-4887-82a1-_1.aspx)]"
  syntax:
    content: public string GetCallbackEventReference (string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);
    parameters:
    - id: target
      type: System.String
      description: "伺服器的名稱<xref href=&quot;System.Web.UI.Control&quot;></xref>可處理用戶端回呼。 控制項必須實作<xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;></xref>介面，並提供<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>方法。</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: argument
      type: System.String
      description: "引數傳遞至伺服器從用戶端指令碼<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>方法。</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: clientCallback
      type: System.String
      description: "收到成功的伺服器事件的結果用戶端事件處理常式的名稱。"
    - id: context
      type: System.String
      description: "在起始回呼之前的用戶端評估用戶端指令碼。 指令碼的結果會傳回到用戶端事件處理常式。"
    - id: clientErrorCallback
      type: System.String
      description: "伺服器事件處理常式中發生錯誤時接收結果用戶端事件處理常式的名稱。"
    - id: useAsync
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true &quot; name=&quot;true &quot; href=&quot;&quot;></xref>以非同步方式; 執行回呼<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>以同步方式執行的回呼。"
    return:
      type: System.String
      description: "叫用用戶端的回呼用戶端函式的名稱。"
  overload: System.Web.UI.ClientScriptManager.GetCallbackEventReference*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)
  id: GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetCallbackEventReference(Control,String,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "取得用戶端函數時，叫用時，用戶端會起始回撥伺服器事件的參考。 這個多載方法的用戶端函式會包含指定的控制項、 引數、 用戶端指令碼、 內容、 錯誤處理常式和布林值。"
  remarks: "這個多載<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>方法需要`useAsync`和`clientErrorCallback`參數。</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> `useAsync`參數可讓您以非同步方式將值設定為執行用戶端回呼`true`。 這個方法的多載版本，不需要`useAsync`參數將值設為`false`預設。 `clientErrorCallback`參數可讓您定義時所呼叫的用戶端函式名稱的伺服器處理常式 (<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>方法) 會傳回錯誤。</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> 這個方法的多載版本，不需要`clientErrorCallback`參數將值設定為 null。       如需有關這個方法的詳細資訊，請參閱備註為多載<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>方法。</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>"
  syntax:
    content: public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "伺服器<xref href=&quot;System.Web.UI.Control&quot;></xref>可處理用戶端回呼。 控制項必須實作<xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;></xref>介面，並提供<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>方法。</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: argument
      type: System.String
      description: "引數傳遞至伺服器從用戶端指令碼<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>方法。</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: clientCallback
      type: System.String
      description: "收到成功的伺服器事件的結果用戶端事件處理常式的名稱。"
    - id: context
      type: System.String
      description: "在起始回呼之前的用戶端評估用戶端指令碼。 指令碼的結果會傳回到用戶端事件處理常式。"
    - id: clientErrorCallback
      type: System.String
      description: "伺服器事件處理常式中發生錯誤時接收結果用戶端事件處理常式的名稱。"
    - id: useAsync
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true &quot; name=&quot;true &quot; href=&quot;&quot;></xref>以非同步方式; 執行回呼<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>以同步方式執行的回呼。"
    return:
      type: System.String
      description: "叫用用戶端的回呼用戶端函式的名稱。"
  overload: System.Web.UI.ClientScriptManager.GetCallbackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Web.UI.Control&quot;></xref> specified is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.Control&quot;> </xref>指定未實作<xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;></xref>介面。"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)
  id: GetPostBackClientHyperlink(System.Web.UI.Control,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackClientHyperlink(Control,String)
  nameWithType: ClientScriptManager.GetPostBackClientHyperlink(Control,String)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(Control,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "取得參考，具有<xref uid=&quot;langword_csharp_javascript:&quot; name=&quot;javascript:&quot; href=&quot;&quot;></xref>附加至其開頭，可以用於用戶端事件張貼至伺服器，針對指定的控制項並使用指定的事件引數。"
  remarks: "使用<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>方法需要處理實作回傳的控制項<xref:System.Web.UI.IPostBackEventHandler>介面。</xref:System.Web.UI.IPostBackEventHandler> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> 若要實作<xref:System.Web.UI.IPostBackEventHandler>介面<xref:System.Web.UI.Page>，使用指示詞。</xref:System.Web.UI.Page> </xref:System.Web.UI.IPostBackEventHandler>"
  example:
  - "The following code example demonstrates the use of the GetPostBackClientHyperlink method. The custom control, `MyControl`, implements the <xref:System.Web.UI.IPostBackEventHandler> interface. When the HTML anchor element on the page is clicked, the <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> method of the custom control is invoked.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager8#1](~/add/codesnippet/visualbasic/366d34c0-2826-48a7-a56d-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager8#1](~/add/codesnippet/csharp/366d34c0-2826-48a7-a56d-_1.aspx)]  \n  \n The following code example has the same functionality as the preceding one, except that instead of a custom control, the <xref:System.Web.UI.Page> class implements the <xref:System.Web.UI.IPostBackEventHandler> interface.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager8#2](~/add/codesnippet/csharp/366d34c0-2826-48a7-a56d-_2.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager8#2](~/add/codesnippet/visualbasic/366d34c0-2826-48a7-a56d-_2.aspx)]"
  syntax:
    content: public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "要處理回傳的伺服器控制項。"
    - id: argument
      type: System.String
      description: "參數傳遞至伺服器控制項。"
    return:
      type: System.String
      description: "字串，表示呼叫 JavaScript 回傳函式，其中包含目標控制項的 ID 與事件引數。"
  overload: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)
  id: GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackClientHyperlink(Control,String,Boolean)
  nameWithType: ClientScriptManager.GetPostBackClientHyperlink(Control,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(Control,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "取得參考，具有<xref uid=&quot;langword_csharp_javascript:&quot; name=&quot;javascript:&quot; href=&quot;&quot;></xref>附加至其開頭，可以在用戶端事件中用來針對指定控制項，以指定的事件引數和布林值表示是否要註冊的事件驗證回傳張貼至伺服器。"
  remarks: "使用<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>方法需要處理實作回傳的控制項<xref:System.Web.UI.IPostBackEventHandler>介面。</xref:System.Web.UI.IPostBackEventHandler> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> 若要實作<xref:System.Web.UI.IPostBackEventHandler>介面<xref:System.Web.UI.Page>，使用指示詞。</xref:System.Web.UI.Page> </xref:System.Web.UI.IPostBackEventHandler>"
  syntax:
    content: public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument, bool registerForEventValidation);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "要處理回傳的伺服器控制項。"
    - id: argument
      type: System.String
      description: "參數傳遞至伺服器控制項。"
    - id: registerForEventValidation
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要註冊回傳事件進行驗證。<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>未註冊驗證回傳事件。"
    return:
      type: System.String
      description: "字串，表示呼叫 JavaScript 回傳函式，其中包含目標控制項的 ID 與事件引數。"
  overload: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)
  id: GetPostBackEventReference(System.Web.UI.PostBackOptions)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackEventReference(PostBackOptions)
  nameWithType: ClientScriptManager.GetPostBackEventReference(PostBackOptions)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(PostBackOptions)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "傳回字串，可以用在用戶端事件導致回傳至伺服器。 將參考字串定義指定<xref href=&quot;System.Web.UI.PostBackOptions&quot;></xref>執行個體。"
  remarks: "若要實作<xref:System.Web.UI.IPostBackEventHandler>介面<xref:System.Web.UI.Page>，使用指示詞。</xref:System.Web.UI.Page> </xref:System.Web.UI.IPostBackEventHandler>       <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>方法可以與使用<xref:System.Web.UI.WebControls.Button>負責控制何時<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>屬性是`false`。</xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> </xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> 在此案例中，<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>方法會傳回用戶端回傳事件<xref:System.Web.UI.WebControls.Button>控制項。</xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>"
  syntax:
    content: public string GetPostBackEventReference (System.Web.UI.PostBackOptions options);
    parameters:
    - id: options
      type: System.Web.UI.PostBackOptions
      description: "A <xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref>定義回傳。"
    return:
      type: System.String
      description: "字串視為用戶端上的指令碼時，會起始用戶端回傳。"
  overload: System.Web.UI.ClientScriptManager.GetPostBackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref>參數<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)
  id: GetPostBackEventReference(System.Web.UI.Control,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackEventReference(Control,String)
  nameWithType: ClientScriptManager.GetPostBackEventReference(Control,String)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(Control,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "傳回字串，可以用在用戶端事件導致回傳至伺服器。 由處理回傳及其他事件資訊的字串引數的指定控制項定義的參考字串。"
  remarks: "若要實作<xref:System.Web.UI.IPostBackEventHandler>介面<xref:System.Web.UI.Page>，使用指示詞。</xref:System.Web.UI.Page> </xref:System.Web.UI.IPostBackEventHandler>       <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>方法可以與使用<xref:System.Web.UI.WebControls.Button>負責控制何時<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>屬性是`false`。</xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> </xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> 在此案例中，<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>方法會傳回用戶端回傳事件<xref:System.Web.UI.WebControls.Button>控制項。</xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>"
  example:
  - "The following code example demonstrates the use of the GetPostBackEventReference method. The custom control, `MyControl`, implements the <xref:System.Web.UI.IPostBackEventHandler> interface. When the button on the page is clicked, the <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> method of the custom control is invoked.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager8#1](~/add/codesnippet/visualbasic/13f44f5d-33c0-40e6-bb2f-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager8#1](~/add/codesnippet/csharp/13f44f5d-33c0-40e6-bb2f-_1.aspx)]  \n  \n The following code example has the same functionality as the preceding one, except that instead of a custom control, the <xref:System.Web.UI.Page> class implements the <xref:System.Web.UI.IPostBackEventHandler> interface.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager8#2](~/add/codesnippet/csharp/13f44f5d-33c0-40e6-bb2f-_2.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager8#2](~/add/codesnippet/visualbasic/13f44f5d-33c0-40e6-bb2f-_2.aspx)]"
  syntax:
    content: public string GetPostBackEventReference (System.Web.UI.Control control, string argument);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "伺服器<xref href=&quot;System.Web.UI.Control&quot;></xref>程序在伺服器上的回傳。"
    - id: argument
      type: System.String
      description: "傳遞至處理回傳之控制項的選擇性引數的字串。"
    return:
      type: System.String
      description: "字串視為在用戶端，指令碼時啟始回傳。"
  overload: System.Web.UI.ClientScriptManager.GetPostBackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The specified <xref href=&quot;System.Web.UI.Control&quot;></xref> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)
  id: GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackEventReference(PostBackOptions,Boolean)
  nameWithType: ClientScriptManager.GetPostBackEventReference(PostBackOptions,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(PostBackOptions,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "傳回字串，可以用在用戶端事件導致回傳至伺服器。 將參考字串定義指定<xref href=&quot;System.Web.UI.PostBackOptions&quot;></xref>物件。 （選擇性） 註冊事件參考以進行驗證。"
  remarks: "若要實作<xref:System.Web.UI.IPostBackEventHandler>介面<xref:System.Web.UI.Page>物件，請使用指示詞。</xref:System.Web.UI.Page> </xref:System.Web.UI.IPostBackEventHandler>       <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>方法可以與使用<xref:System.Web.UI.WebControls.Button>負責控制何時<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>屬性是`false`。</xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> </xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> 在此案例中，<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>方法會傳回用戶端回傳事件<xref:System.Web.UI.WebControls.Button>控制項。</xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>       如果`registerForEventValidation`是`true`，GetPostBackEventReference 方法呼叫<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29>方法，使用唯一的控制項 ID 表示已產生事件的用戶端控制項登錄事件參考以進行驗證。</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29>"
  syntax:
    content: public string GetPostBackEventReference (System.Web.UI.PostBackOptions options, bool registerForEventValidation);
    parameters:
    - id: options
      type: System.Web.UI.PostBackOptions
      description: "A <xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref>定義回傳。"
    - id: registerForEventValidation
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要註冊事件參考以進行驗證。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.String
      description: "字串視為用戶端上的指令碼時，會起始用戶端回傳。"
  overload: System.Web.UI.ClientScriptManager.GetPostBackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Web.UI.PostBackOptions&quot;></xref> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)
  id: GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackEventReference(Control,String,Boolean)
  nameWithType: ClientScriptManager.GetPostBackEventReference(Control,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(Control,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "傳回用戶端事件中導致回傳至伺服器的字串。 由處理回傳及其他事件資訊的字串引數的指定控制項定義的參考字串。 （選擇性） 註冊事件參考以進行驗證。"
  remarks: "若要實作<xref:System.Web.UI.IPostBackEventHandler>介面<xref:System.Web.UI.Page>，使用指示詞。</xref:System.Web.UI.Page> </xref:System.Web.UI.IPostBackEventHandler>       <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>方法可以與使用<xref:System.Web.UI.WebControls.Button>負責控制何時<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>屬性是`false`。</xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> </xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> 在此案例中，<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>方法會傳回用戶端回傳事件<xref:System.Web.UI.WebControls.Button>控制項。</xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>       如果`registerForEventValidation`為 true，<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29>方法呼叫<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29>方法，使用唯一的控制項 ID 表示已產生事件的用戶端控制項登錄事件參考以進行驗證。</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29>"
  syntax:
    content: public string GetPostBackEventReference (System.Web.UI.Control control, string argument, bool registerForEventValidation);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "伺服器<xref href=&quot;System.Web.UI.Control&quot;></xref>程序在伺服器上的回傳。"
    - id: argument
      type: System.String
      description: "要傳遞給選擇性引數的字串`control`。"
    - id: registerForEventValidation
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要註冊事件參考以進行驗證。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.String
      description: "字串視為在用戶端，指令碼時啟始回傳。"
  overload: System.Web.UI.ClientScriptManager.GetPostBackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The specified <xref href=&quot;System.Web.UI.Control&quot;></xref> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)
  id: GetWebResourceUrl(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetWebResourceUrl(Type,String)
  nameWithType: ClientScriptManager.GetWebResourceUrl(Type,String)
  fullName: System.Web.UI.ClientScriptManager.GetWebResourceUrl(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "取得資源的 URL 參考的組件中。"
  remarks: "GetWebResourceUrl 方法會傳回組件中內嵌資源的 URL 參考。 傳回的參考不是 URL 編碼。 資源可以是指令碼檔案、 影像或任何靜態檔案。 您指定將用來存取資源的物件為基礎的類型。       註冊頁面的 Web 資源是唯一識別由型別和名稱。 使用指定的型別和名稱組合只能有一個資源可以向頁面。 嘗試註冊已註冊的資源不會建立重複的已註冊的資源。       GetWebResourceUrl 方法用於搭配<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A>方法來存取的資源內嵌於組件。</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> 如需有關應用程式中使用的資源的詳細資訊，請參閱[ASP.NET Web 網頁資源概觀](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates the use of the GetWebResourceUrl method. The *type* parameter in this example is set to the type of class in the assembly containing the resource. The `resourceName` parameter is specified with the fully qualified path to the resource, which includes the default namespace.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager4#1](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_2_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager4#1](~/add/codesnippet/csharp/m-system.web.ui.clientsc_2_1.aspx)]  \n  \n The following code example demonstrates how to programmatically apply the <xref:System.Web.UI.WebResourceAttribute> metadata attribute to mark the assembly for the resources that will be served. Compile the following class in a class library with a default namespace set to `Samples.AspNet.CS.Controls` or `Samples.AspNet.VB.Controls`, depending on what language you are using.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager4#2](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_2_2.vb)]\n [!code-cs[System.Web.UI.ClientScriptManager4#2](~/add/codesnippet/csharp/m-system.web.ui.clientsc_2_2.cs)]  \n  \n This example requires a JavaScript file named `Script_include.js`. The .js file is an embedded resource in the assembly that contains the `ClientScriptResourceLabel` object. If you are using [!INCLUDE[vs_current_short](~/add/includes/ajax-current-ext-md.md)], in the Properties window of the class library project, set **Build Action** to **Embedded Resource** when the script file is selected. If you are compiling the library at the command line, use the  switch to embed the resource.  \n  \n```  \nfunction DoClick() {Form1.Message.value='Text from resource script.'}  \n```"
  syntax:
    content: public string GetWebResourceUrl (Type type, string resourceName);
    parameters:
    - id: type
      type: System.Type
      description: "資源類型。"
    - id: resourceName
      type: System.String
      description: "組件中資源的完整的名稱。"
    return:
      type: System.String
      description: "資源 URL 參考。"
  overload: System.Web.UI.ClientScriptManager.GetWebResourceUrl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The web resource name is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The web resource name has a length of zero."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)
  id: IsClientScriptBlockRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsClientScriptBlockRegistered(String)
  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "判斷是否已註冊的用戶端指令碼區塊<xref href=&quot;System.Web.UI.Page&quot;></xref>物件使用指定的索引鍵。"
  remarks: "呼叫這個方法之前先呼叫<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>方法，以避免註冊重複的指令碼。</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> 這是特別重要，此指令碼需要大量伺服器資源用來建立。       用戶端指令碼是唯一識別由其索引鍵和其類型。 具有相同索引鍵和類型的指令碼會被視為重複。       這個多載<xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>方法呼叫的多載，兩者`key`和`type`類型的參數設定為<xref:System.Web.UI.Page>物件</xref:System.Web.UI.Page></xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>"
  example:
  - >-
    [!code-cs[System.Web.UI.ClientScriptManager1#2](~/add/codesnippet/csharp/m-system.web.ui.clientsc_0_1.aspx)]
     [!code-vb[System.Web.UI.ClientScriptManager1#2](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_0_1.aspx)]
  syntax:
    content: public bool IsClientScriptBlockRegistered (string key);
    parameters:
    - id: key
      type: System.String
      description: "要搜尋的用戶端指令碼區塊的索引鍵。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果在用戶端指令碼區塊會註冊。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)
  id: IsClientScriptBlockRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsClientScriptBlockRegistered(Type,String)
  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "判斷是否已註冊的用戶端指令碼區塊<xref href=&quot;System.Web.UI.Page&quot;></xref>物件使用索引鍵和類型。"
  remarks: "呼叫這個方法之前先呼叫<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>方法，以避免註冊重複的指令碼。</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> 這是特別重要，此指令碼需要大量伺服器資源用來建立。       用戶端指令碼是唯一識別由其索引鍵和其類型。 具有相同索引鍵和類型的指令碼會被視為重複。 您指定將用來存取資源的物件為基礎的類型。 比方說，當使用`Page`存取資源，您指定的執行個體`Page`型別。"
  example:
  - "The following code example demonstrates the use of the IsClientScriptBlockRegistered method. Note that, if the logic to check for the existing client script block were removed, there would not be two duplicate client scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/b20ef5ac-aa44-4132-8ad3-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/b20ef5ac-aa44-4132-8ad3-_1.aspx)]"
  syntax:
    content: public bool IsClientScriptBlockRegistered (Type type, string key);
    parameters:
    - id: type
      type: System.Type
      description: "要搜尋的用戶端指令碼區塊的類型。"
    - id: key
      type: System.String
      description: "要搜尋的用戶端指令碼區塊的索引鍵。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果在用戶端指令碼區塊會註冊。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "用戶端指令碼型別是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)
  id: IsClientScriptIncludeRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsClientScriptIncludeRegistered(String)
  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "決定用戶端指令碼是否包含已向<xref href=&quot;System.Web.UI.Page&quot;></xref>物件使用指定的索引鍵。"
  remarks: "呼叫這個方法之前先呼叫<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>方法，以避免註冊重複的指令碼。</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> 這是特別重要，此指令碼需要大量伺服器資源用來建立。       用戶端指令碼包含可唯一識別索引鍵和其型別。 具有相同索引鍵和類型的指令碼會被視為重複。       這個多載<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>方法呼叫的多載，兩者`key`和`type`類型的參數設定為<xref:System.Web.UI.Page>物件。</xref:System.Web.UI.Page> </xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>"
  syntax:
    content: public bool IsClientScriptIncludeRegistered (string key);
    parameters:
    - id: key
      type: System.String
      description: "若要搜尋包含用戶端指令碼的索引鍵。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果用戶端指令碼包含，註冊。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)
  id: IsClientScriptIncludeRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsClientScriptIncludeRegistered(Type,String)
  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "決定用戶端指令碼是否包含已向<xref href=&quot;System.Web.UI.Page&quot;></xref>物件使用索引鍵和類型。"
  remarks: "呼叫這個方法之前先呼叫<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>包含方法，以避免註冊重複的用戶端指令碼。</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> 這是特別重要，此指令碼需要大量伺服器資源用來建立。       用戶端指令碼包含可唯一識別索引鍵和其型別。 具有相同索引鍵和類型的指令碼會被視為重複。 您指定將用來存取資源的物件為基礎的類型。 比方說，當使用 Page 執行個體來存取資源，您指定`Page`型別。"
  example:
  - "The following code example demonstrates the use of the IsClientScriptIncludeRegistered method. Note that, if the logic to check for the existing client script include were removed, there would not be two duplicate client scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager2#1](~/add/codesnippet/csharp/1a97f23b-4196-4af6-89d9-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager2#1](~/add/codesnippet/visualbasic/1a97f23b-4196-4af6-89d9-_1.aspx)]  \n  \n This example requires a JavaScript file named `Script_include.js`, with the following contents:  \n  \n```  \nfunction DoClick() {Form1.Message.value='Text from include script.'}  \n```"
  syntax:
    content: public bool IsClientScriptIncludeRegistered (Type type, string key);
    parameters:
    - id: type
      type: System.Type
      description: "要搜尋包含用戶端指令碼的類型。"
    - id: key
      type: System.String
      description: "若要搜尋包含用戶端指令碼的索引鍵。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果用戶端指令碼包含，註冊。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "用戶端指令碼包含型別是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)
  id: IsOnSubmitStatementRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsOnSubmitStatementRegistered(String)
  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "決定是否向 OnSubmit 陳述式<xref href=&quot;System.Web.UI.Page&quot;></xref>物件使用指定的索引鍵。"
  remarks: "呼叫這個方法之前先呼叫<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>方法，以避免註冊重複 OnSubmit 陳述式。</xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> 這是特別重要，如果陳述式就需要大量伺服器資源用來建立。       陳述式是以其索引鍵和其類型唯一識別。 具有相同索引鍵和類型的陳述式會被視為重複。       這個多載<xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>方法呼叫的多載，兩者`key`和`type`類型的參數設定為<xref:System.Web.UI.Page>物件</xref:System.Web.UI.Page></xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>"
  syntax:
    content: public bool IsOnSubmitStatementRegistered (string key);
    parameters:
    - id: key
      type: System.String
      description: "OnSubmit 陳述式來搜尋索引鍵。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果註冊 OnSubmit 陳述式。，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)
  id: IsOnSubmitStatementRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsOnSubmitStatementRegistered(Type,String)
  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "決定是否向 OnSubmit 陳述式<xref href=&quot;System.Web.UI.Page&quot;></xref>物件使用指定的索引鍵和類型。"
  remarks: "呼叫這個方法之前先呼叫<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>方法，以避免註冊重複的陳述式。</xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> 這是特別重要，如果陳述式就需要大量伺服器資源用來建立。       陳述式是以其索引鍵和其類型唯一識別。 具有相同索引鍵和類型的陳述式會被視為重複。 您指定將用來存取資源的物件為基礎的類型。 比方說，當使用`Page`存取資源，您指定的執行個體`Page`型別。"
  example:
  - "The following code example demonstrates the use of the IsOnSubmitStatementRegistered method. A script named `OnSubmitScript` is registered with the <xref:System.Web.UI.Page> so that when the page's form is submitted the script is invoked.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager3#1](~/add/codesnippet/visualbasic/081fc7d2-9213-49e8-ad42-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager3#1](~/add/codesnippet/csharp/081fc7d2-9213-49e8-ad42-_1.aspx)]"
  syntax:
    content: public bool IsOnSubmitStatementRegistered (Type type, string key);
    parameters:
    - id: type
      type: System.Type
      description: "若要搜尋 OnSubmit 陳述式的類型。"
    - id: key
      type: System.String
      description: "OnSubmit 陳述式來搜尋索引鍵。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果註冊 OnSubmit 陳述式。，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "OnSubmit 陳述式型別是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)
  id: IsStartupScriptRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsStartupScriptRegistered(String)
  nameWithType: ClientScriptManager.IsStartupScriptRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "決定是否註冊啟動指令碼<xref href=&quot;System.Web.UI.Page&quot;></xref>物件使用指定的索引鍵。"
  remarks: "呼叫這個方法之前先呼叫<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>方法，以避免註冊重複的指令碼。</xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> 這是特別重要，此指令碼需要大量伺服器資源用來建立。       啟動指令碼是唯一識別由其索引鍵和其類型。 具有相同索引鍵和類型的指令碼會被視為重複。       這個多載<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>方法呼叫的多載，這兩個字串`key`和`type`類型的參數設定為<xref:System.Web.UI.Page>物件</xref:System.Web.UI.Page></xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>"
  syntax:
    content: public bool IsStartupScriptRegistered (string key);
    parameters:
    - id: key
      type: System.String
      description: "若要搜尋的啟動指令碼索引鍵。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果註冊啟動指令碼;，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)
  id: IsStartupScriptRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsStartupScriptRegistered(Type,String)
  nameWithType: ClientScriptManager.IsStartupScriptRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "決定是否註冊啟動指令碼<xref href=&quot;System.Web.UI.Page&quot;></xref>物件使用指定的索引鍵和類型。"
  remarks: "呼叫這個方法之前先呼叫<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>方法，以避免註冊重複的指令碼。</xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> 這是特別重要，此指令碼需要大量伺服器資源用來建立。       用戶端啟動指令碼是唯一識別由其索引鍵和其類型。 具有相同索引鍵和類型的指令碼會被視為重複。"
  example:
  - "The following code example demonstrates the use of the IsStartupScriptRegistered method. Note that, if the logic to check for the existing startup script block were removed, there would not be two duplicate startup scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/31c56db0-942d-4a34-be1e-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/31c56db0-942d-4a34-be1e-_1.aspx)]"
  syntax:
    content: public bool IsStartupScriptRegistered (Type type, string key);
    parameters:
    - id: type
      type: System.Type
      description: "若要搜尋的啟動指令碼類型。"
    - id: key
      type: System.String
      description: "若要搜尋的啟動指令碼索引鍵。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果註冊啟動指令碼;，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "啟動指令碼類型是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)
  id: RegisterArrayDeclaration(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterArrayDeclaration(String,String)
  nameWithType: ClientScriptManager.RegisterArrayDeclaration(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "註冊 JavaScript 陣列宣告，與<xref href=&quot;System.Web.UI.Page&quot;></xref>物件使用的陣列名稱和陣列值。"
  remarks: "The RegisterArrayDeclaration checks to see whether a registered array exists with the same name as the name specified in the `arrayName` parameter and, if so, adds the values specified in the `arrayValue` parameter. Because the underlying storage mechanism is based on an <xref:System.Collections.ArrayList>, duplicates are allowed. If a registered array with the same name as the `arrayName` parameter does not exist, it is created and the values in the `arrayValue` parameter added to it.  \n  \n If you want string literals in the resulting JavaScript array, include single quotation marks (') or escaped double quotation marks (\\\\\") in the `arrayValue` parameter. The value of the `arrayValue` parameter should be a single element. If more than one value needs to be added to the array, make multiple calls using the RegisterArrayDeclaration method."
  example:
  - "The following code example demonstrates the use of the RegisterArrayDeclaration and <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> methods. The example registers an array and a hidden value and defines the `OnClick` event of an `<input>` button to calculate the sum of two values of the array and the hidden value.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager5#1](~/add/codesnippet/csharp/fb15aead-cb5d-4924-8be4-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager5#1](~/add/codesnippet/visualbasic/fb15aead-cb5d-4924-8be4-_1.aspx)]"
  syntax:
    content: public void RegisterArrayDeclaration (string arrayName, string arrayValue);
    parameters:
    - id: arrayName
      type: System.String
      description: "若要註冊陣列名稱。"
    - id: arrayValue
      type: System.String
      description: "陣列值的登錄值。"
  overload: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>arrayName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)
  id: RegisterClientScriptBlock(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterClientScriptBlock(Type,String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptBlock(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(Type,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "註冊的用戶端指令碼<xref href=&quot;System.Web.UI.Page&quot;></xref>物件使用型別、 金鑰和常值的指令碼。"
  remarks: "用戶端指令碼是唯一識別由其索引鍵和其類型。 具有相同索引鍵和類型的指令碼會被視為重複。 指定的型別和索引鍵組合只有一個指令碼可以向頁面。 嘗試註冊已註冊的指令碼不會建立指令碼的重複。       呼叫<xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>方法，以判斷是否與指定索引鍵和類型配對的用戶端指令碼已註冊，並避免不必要地嘗試要加入指令碼。</xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>       中的這個多載<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>方法，您必須確定提供的指令碼`script`參數會包裝在`<script>`項目區塊。</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>       <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>方法會將指令碼區塊所呈現頁面的頂端。</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> 指令碼區塊並非都能註冊它們的順序輸出。 如果指令碼區塊的順序很重要，使用<xref:System.Text.StringBuilder>要收集在單一字串中，指令碼的物件，然後再將它們登錄單一用戶端指令碼區塊中的所有。</xref:System.Text.StringBuilder>"
  example:
  - "The following code example demonstrates the use of the RegisterClientScriptBlock method.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager12#1](~/add/codesnippet/csharp/41f57bff-a479-4a3c-91bb-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager12#1](~/add/codesnippet/visualbasic/41f57bff-a479-4a3c-91bb-_1.aspx)]"
  syntax:
    content: public void RegisterClientScriptBlock (Type type, string key, string script);
    parameters:
    - id: type
      type: System.Type
      description: "若要註冊用戶端指令碼類型。"
    - id: key
      type: System.String
      description: "若要註冊用戶端指令碼索引鍵。"
    - id: script
      type: System.String
      description: "常值至註冊的用戶端指令碼。"
  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)
  id: RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterClientScriptBlock(Type,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterClientScriptBlock(Type,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(Type,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "註冊的用戶端指令碼<xref href=&quot;System.Web.UI.Page&quot;></xref>物件使用的類型、 金鑰、 指令碼常值和布林值，指出是否要加入指令碼標記。"
  remarks: "用戶端指令碼是唯一識別由其索引鍵和其類型。 具有相同索引鍵和類型的指令碼會被視為重複。 指定的型別和索引鍵組合只有一個指令碼可以向頁面。 嘗試註冊已註冊的指令碼不會建立指令碼的重複。       呼叫<xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>方法，以判斷是否已註冊的用戶端指令碼，具有給定索引鍵和類型配對。</xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> 這可讓您避免不必要地嘗試要加入指令碼。       中的這個多載<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>方法，您可以指出是否在指令碼中提供`script`參數會包裝與`<script>`所使用的項目區塊`addScriptTags`參數。</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> 設定`addScriptTags`至`true`表示指令碼標記將會自動加入。       <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>方法會將指令碼區塊所呈現頁面的頂端。</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> 指令碼區塊並非都能註冊它們的順序輸出。 如果指令碼區塊的順序很重要，使用<xref:System.Text.StringBuilder>要收集在單一字串中，指令碼的物件，然後再將它們登錄單一用戶端指令碼區塊中的所有。</xref:System.Text.StringBuilder>"
  example:
  - "The following code example demonstrates the use of the RegisterClientScriptBlock method. Note that the `addScriptTags` parameter is set to `true` so the beginning and closing script tags are not included with the `script` parameter.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/e4221441-a348-44c8-8a15-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/e4221441-a348-44c8-8a15-_1.aspx)]"
  syntax:
    content: public void RegisterClientScriptBlock (Type type, string key, string script, bool addScriptTags);
    parameters:
    - id: type
      type: System.Type
      description: "若要註冊用戶端指令碼類型。"
    - id: key
      type: System.String
      description: "若要註冊用戶端指令碼索引鍵。"
    - id: script
      type: System.String
      description: "常值至註冊的用戶端指令碼。"
    - id: addScriptTags
      type: System.Boolean
      description: "布林值，指出是否要加入指令碼標記。"
  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "用戶端指令碼區塊型別是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)
  id: RegisterClientScriptInclude(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterClientScriptInclude(String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptInclude(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "註冊的用戶端指令碼<xref href=&quot;System.Web.UI.Page&quot;></xref>物件使用的金鑰和 URL，讓指令碼從用戶端呼叫。"
  remarks: "用戶端指令碼包含可唯一識別索引鍵和其型別。 具有相同索引鍵和類型的指令碼會被視為重複。 指定的型別和索引鍵組合只有一個指令碼可以向頁面。 嘗試註冊已註冊的指令碼不會建立指令碼的重複。       呼叫<xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A>方法，以判斷是否包含具有指定索引鍵的用戶端指令碼和已註冊型別組，並避免不必要地嘗試要加入指令碼。</xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A>      > [!NOTE] > 來解決用戶端 URL，請使用<xref:System.Web.UI.Control.ResolveClientUrl%2A>方法。</xref:System.Web.UI.Control.ResolveClientUrl%2A> 這個方法會使用內容呼叫它來解析路徑的 URL。       這個多載<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>方法呼叫的多載， `key`、 `URL`，和`type`參數。</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>       方法會將指令碼區塊所呈現頁面的頂端。"
  example:
  - For related information, including syntax, usage, and an example, see <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>.
  syntax:
    content: public void RegisterClientScriptInclude (string key, string url);
    parameters:
    - id: key
      type: System.String
      description: "若要註冊，包括用戶端指令碼的索引鍵。"
    - id: url
      type: System.String
      description: "URL 的用戶端指令碼包含註冊。"
  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)
  id: RegisterClientScriptInclude(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterClientScriptInclude(Type,String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptInclude(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(Type,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "用戶端指令碼中包含的暫存器<xref href=&quot;System.Web.UI.Page&quot;></xref>物件使用的型別、 索引鍵和 URL。"
  remarks: "這個多載<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>方法會採用*金鑰*和*url*參數來識別指令碼，以及`type`包括參數來指定用戶端指令碼的識別。</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> 您指定將用來存取資源的物件為基礎的類型。 比方說，當使用`Page`存取資源，您指定的執行個體`Page`型別。      > [!NOTE] > 來解決用戶端 URL，請使用<xref:System.Web.UI.Control.ResolveClientUrl%2A>方法。</xref:System.Web.UI.Control.ResolveClientUrl%2A> 這個方法會使用內容呼叫它來解析路徑的 URL。       這個方法所呈現頁面的頂端加入指令碼區塊。"
  example:
  - "The following code example demonstrates the use of the RegisterClientScriptInclude method. Note that if the logic to check for the existing client script include were removed, there would still not be duplicate client scripts in the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager2#1](~/add/codesnippet/csharp/cbae2904-30a8-438b-9fac-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager2#1](~/add/codesnippet/visualbasic/cbae2904-30a8-438b-9fac-_1.aspx)]  \n  \n This example requires a JavaScript file named Script_include.js with the following contents:  \n  \n```  \nfunction DoClick() {Form1.Message.value='Text from include script.'}  \n```"
  syntax:
    content: public void RegisterClientScriptInclude (Type type, string key, string url);
    parameters:
    - id: type
      type: System.Type
      description: "註冊包含用戶端指令碼的類型。"
    - id: key
      type: System.String
      description: "若要註冊，包括用戶端指令碼的索引鍵。"
    - id: url
      type: System.String
      description: "URL 的用戶端指令碼包含註冊。"
  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "用戶端指令碼包含型別是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The URL is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The URL is empty."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)
  id: RegisterClientScriptResource(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterClientScriptResource(Type,String)
  nameWithType: ClientScriptManager.RegisterClientScriptResource(Type,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptResource(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "註冊的用戶端指令碼資源<xref href=&quot;System.Web.UI.Page&quot;></xref>物件使用的類型和資源的名稱。"
  remarks: "RegisterClientScriptResource 方法用於存取從透過 WebResource.axd HTTP 處理常式的組件編譯的資源。 RegisterClientScriptResource 方法註冊的指令碼<xref:System.Web.UI.Page>物件，並可防止重複的指令碼。</xref:System.Web.UI.Page> 這個方法會包裝與資源 URL 的內容`<script>`項目區塊。"
  example:
  - "The following code example demonstrates the use of the RegisterClientScriptResource method.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager4#1](~/add/codesnippet/visualbasic/e804ef10-67d2-47bd-8da2-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager4#1](~/add/codesnippet/csharp/e804ef10-67d2-47bd-8da2-_1.aspx)]  \n  \n The following code example demonstrates how to programmatically apply the <xref:System.Web.UI.WebResourceAttribute> metadata attribute to mark the assembly for the resources that will be served.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager4#2](~/add/codesnippet/visualbasic/e804ef10-67d2-47bd-8da2-_2.vb)]\n [!code-cs[System.Web.UI.ClientScriptManager4#2](~/add/codesnippet/csharp/e804ef10-67d2-47bd-8da2-_2.cs)]  \n  \n This example requires a JavaScript file named `Script_include.js`, with the following contents:  \n  \n```  \nfunction DoClick() {Form1.Message.value='Text from resource script.'}  \n```  \n  \n Compile the `Script_include.js` file as a resource in the `Samples.AspNet.CS.Controls` assembly that contains the `ClientScriptResourceLabel` class."
  syntax:
    content: public void RegisterClientScriptResource (Type type, string resourceName);
    parameters:
    - id: type
      type: System.Type
      description: "若要註冊用戶端指令碼資源的類型。"
    - id: resourceName
      type: System.String
      description: "若要註冊用戶端指令碼資源的名稱。"
  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptResource*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The client resource name is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The client resource name has a length of zero."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)
  id: RegisterExpandoAttribute(System.String,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterExpandoAttribute(String,String,String)
  nameWithType: ClientScriptManager.RegisterExpandoAttribute(String,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(String,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "註冊指定的控制項指定控制項 ID、 屬性名稱和屬性值的自訂 (expando) 屬性的名稱/值組。"
  remarks: "RegisterExpandoAttribute 方法註冊的名稱/值組做為自訂 (expando) 屬性，指定<xref:System.Web.UI.Control>。</xref:System.Web.UI.Control> Expando 屬性設為以動態方式從 JavaScript 保留呈現的控制項的標記的 XHTML 相容性。 引號和自訂 (expando) 屬性的值中的反斜線逸出。 如果您不想要逸出引號和反斜線，呼叫<xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>方法多載，並設定`encode`參數`false`。</xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>       如果找不到 expando 屬性，或找不到要加入至 expando 屬性的控制項，仍發出用戶端指令碼，但它不會影響的控制項。"
  syntax:
    content: public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue);
    parameters:
    - id: controlId
      type: System.String
      description: "<xref href=&quot;System.Web.UI.Control&quot;> </xref>包含自訂屬性的頁面上。"
    - id: attributeName
      type: System.String
      description: "若要註冊的自訂屬性的名稱。"
    - id: attributeValue
      type: System.String
      description: "自訂屬性的值。"
  overload: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)
  id: RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterExpandoAttribute(String,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterExpandoAttribute(String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(String,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "名稱/值組註冊為指定控制項 ID、 屬性名稱、 屬性值和布林值，指出是否要編碼屬性的值指定控制項的自訂 (expando) 屬性。"
  remarks: "RegisterExpandoAttribute 方法註冊的名稱/值組做為自訂 (expando) 屬性，指定<xref:System.Web.UI.Control>。</xref:System.Web.UI.Control> Expando 屬性設為以動態方式從 JavaScript 保留呈現的控制項的標記的 XHTML 相容性。 設定`encode`參數`true`如果您需要逸出引號和 expando 屬性的值中的反斜線。       如果找不到 expando 屬性，或找不到要加入至 expando 屬性的控制項，仍發出用戶端指令碼，但它不會影響的控制項。"
  example:
  - "The following code example demonstrates how to use the RegisterExpandoAttribute method of the <xref:System.Web.UI.ClientScriptManager> class. The client script in the rendered page sets the `title` attribute of a `<span>` element.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager6#1](~/add/codesnippet/visualbasic/fbe2457b-d4ba-44a2-ac6e-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager6#1](~/add/codesnippet/csharp/fbe2457b-d4ba-44a2-ac6e-_1.aspx)]"
  syntax:
    content: public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue, bool encode);
    parameters:
    - id: controlId
      type: System.String
      description: "<xref href=&quot;System.Web.UI.Control&quot;> </xref>包含自訂屬性的頁面上。"
    - id: attributeName
      type: System.String
      description: "若要註冊的自訂屬性的名稱。"
    - id: attributeValue
      type: System.String
      description: "自訂屬性的值。"
    - id: encode
      type: System.Boolean
      description: "布林值，指出是否要註冊的自訂屬性編碼。"
  overload: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)
  id: RegisterForEventValidation(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterForEventValidation(String)
  nameWithType: ClientScriptManager.RegisterForEventValidation(String)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "使用唯一的控制項 ID 表示產生事件的用戶端控制項註冊事件參考以進行驗證。"
  remarks: "如需詳細資訊和範例，請參閱<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>方法。</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>"
  example:
  - "The following example shows how to use the RegisterForEventValidation method and the <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> method in order to register a callback for validation, and how to validate that the callback originated from the page.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager9#2](~/add/codesnippet/csharp/m-system.web.ui.clientsc_1_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager9#2](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_1_1.aspx)]"
  syntax:
    content: public void RegisterForEventValidation (string uniqueId);
    parameters:
    - id: uniqueId
      type: System.String
      description: "表示產生事件的用戶端控制項的唯一識別碼。"
  overload: System.Web.UI.ClientScriptManager.RegisterForEventValidation*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)
  id: RegisterForEventValidation(System.Web.UI.PostBackOptions)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterForEventValidation(PostBackOptions)
  nameWithType: ClientScriptManager.RegisterForEventValidation(PostBackOptions)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(PostBackOptions)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "註冊具有之驗證事件參考<xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref>。"
  remarks: "如需詳細資訊和範例，請參閱<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>方法。</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>"
  syntax:
    content: public void RegisterForEventValidation (System.Web.UI.PostBackOptions options);
    parameters:
    - id: options
      type: System.Web.UI.PostBackOptions
      description: "A <xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref>物件，指定用戶端 JavaScript 啟始回傳事件的產生方式。"
  overload: System.Web.UI.ClientScriptManager.RegisterForEventValidation*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)
  id: RegisterForEventValidation(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterForEventValidation(String,String)
  nameWithType: ClientScriptManager.RegisterForEventValidation(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "表示產生事件的用戶端控制項唯一的控制項 ID 與事件引數以註冊事件參考以進行驗證。"
  remarks: ''
  example:
  - "The following code example demonstrates using the RegisterForEventValidation method and the <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> method to register a callback for validation and to validate that the callback originated from the page. To improve on the validation shown in the example, you could modify the validation `argument` parameter to contain information specific to the user such as an identity or role  \n  \n [!code-vb[System.Web.UI.ClientScriptManager9#1](~/add/codesnippet/visualbasic/b1669fea-2f0d-4c7f-a7ff-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager9#1](~/add/codesnippet/csharp/b1669fea-2f0d-4c7f-a7ff-_1.aspx)]  \n  \n The following code example demonstrates using the RegisterForEventValidation method to register a callback for validation.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager10#1](~/add/codesnippet/visualbasic/b1669fea-2f0d-4c7f-a7ff-_2.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager10#1](~/add/codesnippet/csharp/b1669fea-2f0d-4c7f-a7ff-_2.aspx)]"
  syntax:
    content: public void RegisterForEventValidation (string uniqueId, string argument);
    parameters:
    - id: uniqueId
      type: System.String
      description: "表示產生事件的用戶端控制項的唯一識別碼。"
    - id: argument
      type: System.String
      description: "與用戶端事件傳遞事件引數。"
  overload: System.Web.UI.ClientScriptManager.RegisterForEventValidation*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "呼叫方法之前<xref:System.Web.UI.Page.Render*>方法。</xref:System.Web.UI.Page.Render*>"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)
  id: RegisterHiddenField(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterHiddenField(String,String)
  nameWithType: ClientScriptManager.RegisterHiddenField(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterHiddenField(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "註冊隱藏的值與<xref href=&quot;System.Web.UI.Page&quot;></xref>物件。"
  remarks: "RegisterHiddenField 方法會建立隱藏`<input>`呈現的 HTML 網頁上的項目。"
  example:
  - "The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> and RegisterHiddenField methods. The example registers an array and a hidden value and defines the `OnClick` event of an `<input>` button to calculate the sum of two values of the array and the hidden value.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager5#1](~/add/codesnippet/csharp/0defa6d5-d8c8-43f1-af03-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager5#1](~/add/codesnippet/visualbasic/0defa6d5-d8c8-43f1-af03-_1.aspx)]"
  syntax:
    content: public void RegisterHiddenField (string hiddenFieldName, string hiddenFieldInitialValue);
    parameters:
    - id: hiddenFieldName
      type: System.String
      description: "若要註冊隱藏欄位的名稱。"
    - id: hiddenFieldInitialValue
      type: System.String
      description: "要註冊之欄位的初始值。"
  overload: System.Web.UI.ClientScriptManager.RegisterHiddenField*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>hiddenFieldName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)
  id: RegisterOnSubmitStatement(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterOnSubmitStatement(Type,String,String)
  nameWithType: ClientScriptManager.RegisterOnSubmitStatement(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(Type,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "註冊 OnSubmit 陳述式搭配<xref href=&quot;System.Web.UI.Page&quot;></xref>物件使用的型別、 金鑰，以及常值的指令碼。 在陳述式執行時<xref href=&quot;System.Web.UI.HtmlControls.HtmlForm&quot;></xref>送出。"
  remarks: "索引鍵和其型別可唯一識別 OnSubmit 陳述式。 具有相同索引鍵和類型的陳述式會被視為重複。 指定的型別和索引鍵組合的單獨一個陳述式可以向頁面。 嘗試註冊已註冊的陳述式不會建立重複的陳述式。       呼叫<xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>方法，以判斷是否 OnSubmit 陳述式已登錄指定的索引鍵和類型配對，並避免不必要地嘗試要加入指令碼。</xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>       `script` RegisterOnSubmitStatement 方法參數可以包含多個指令碼命令，只要它們是正確使用分號 （;） 分隔。       RegisterOnSubmitStatement 加入頁面送出，並讓您有機會取消送出之前執行的指令碼。       如需有關 HTML 表單和`OnSubmit`屬性，請參閱[World Wide Web Consortium (W3C) 網站](http://go.microsoft.com/fwlink/?linkid=37125)。"
  example:
  - "The following code example demonstrates the use of the RegisterOnSubmitStatement method.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager3#1](~/add/codesnippet/visualbasic/597b1063-1251-4d00-82f9-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager3#1](~/add/codesnippet/csharp/597b1063-1251-4d00-82f9-_1.aspx)]"
  syntax:
    content: public void RegisterOnSubmitStatement (Type type, string key, string script);
    parameters:
    - id: type
      type: System.Type
      description: "若要註冊 OnSubmit 陳述式的類型。"
    - id: key
      type: System.String
      description: "OnSubmit 陳述式，註冊索引鍵。"
    - id: script
      type: System.String
      description: "OnSubmit 陳述式，註冊指令碼常值。"
  overload: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)
  id: RegisterStartupScript(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterStartupScript(Type,String,String)
  nameWithType: ClientScriptManager.RegisterStartupScript(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterStartupScript(Type,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "註冊啟動指令碼與<xref href=&quot;System.Web.UI.Page&quot;></xref>物件使用的型別、 金鑰，以及常值的指令碼。"
  remarks: "用戶端指令碼是唯一識別由其索引鍵和其類型。 具有相同索引鍵和類型的指令碼會被視為重複。 指定的型別和索引鍵組合只有一個指令碼可以向頁面。 嘗試註冊已註冊的指令碼不會建立指令碼的重複。       呼叫<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>方法，以判斷是否與指定索引鍵和類型配對的啟動指令碼已註冊，並避免不必要地嘗試要加入指令碼。</xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>       中的這個多載<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>方法，您必須確定提供的指令碼`script`參數會包裝與`<script>`項目區塊。</xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>       所加入的指令碼區塊<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>方法執行時在網頁完成載入，但頁面之前<xref:System.Web.UI.Control.OnLoad%2A>就會引發事件。</xref:System.Web.UI.Control.OnLoad%2A> </xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> 指令碼區塊並非都能註冊它們的順序輸出。 如果指令碼區塊的順序很重要，使用<xref:System.Text.StringBuilder>要收集在單一字串中，指令碼的物件，然後再將它們登錄單一用戶端指令碼區塊中的所有。</xref:System.Text.StringBuilder>"
  example:
  - "The following code example demonstrates the use of the RegisterStartupScript method. Note that the beginning and closing script tags are included within the `script` parameter. To have the script tags added based on an additional parameter setting, see the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager11#1](~/add/codesnippet/csharp/77e56a73-ddd0-4c6d-99c5-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager11#1](~/add/codesnippet/visualbasic/77e56a73-ddd0-4c6d-99c5-_1.aspx)]"
  syntax:
    content: public void RegisterStartupScript (Type type, string key, string script);
    parameters:
    - id: type
      type: System.Type
      description: "若要註冊的啟動指令碼類型。"
    - id: key
      type: System.String
      description: "若要註冊的啟動指令碼索引鍵。"
    - id: script
      type: System.String
      description: "常值，以便註冊啟動指令碼。"
  overload: System.Web.UI.ClientScriptManager.RegisterStartupScript*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)
  id: RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterStartupScript(Type,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterStartupScript(Type,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterStartupScript(Type,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "註冊啟動指令碼與<xref href=&quot;System.Web.UI.Page&quot;></xref>物件使用的型別、 金鑰、 常值中，指令碼和布林值，指出是否要加入指令碼標記。"
  remarks: "啟動指令碼是唯一識別由其索引鍵和其類型。 具有相同索引鍵和類型的指令碼會被視為重複。 指定的型別和索引鍵組合只有一個指令碼可以向頁面。 嘗試註冊已註冊的指令碼不會建立指令碼的重複。       呼叫<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>方法，以判斷是否與指定索引鍵和類型配對的啟動指令碼已註冊，並避免不必要地嘗試要加入指令碼。</xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>       中的這個多載<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>方法，您可以指出是否在指令碼中提供`script`參數會包裝與`<script>`所使用的項目區塊`addScriptTags`參數。</xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> 設定`addScriptTags`至`true`表示指令碼標記將會自動加入。       所加入的指令碼區塊<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>方法執行時在網頁完成載入，但頁面之前<xref:System.Web.UI.Control.OnLoad%2A>就會引發事件。</xref:System.Web.UI.Control.OnLoad%2A> </xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> 指令碼區塊並非都能註冊它們的順序輸出。 如果指令碼區塊的順序很重要，使用<xref:System.Text.StringBuilder>要收集在單一字串中，指令碼的物件，然後再將它們登錄單一用戶端指令碼區塊中的所有。</xref:System.Text.StringBuilder>"
  example:
  - "The following code example demonstrates the use of the RegisterStartupScript method. Note that the `addScriptTags` parameter is set to `false` so the beginning and closing script tags are included with the `script` parameter.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/8a83f4c8-e8ef-4a4a-b8c6-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/8a83f4c8-e8ef-4a4a-b8c6-_1.aspx)]"
  syntax:
    content: public void RegisterStartupScript (Type type, string key, string script, bool addScriptTags);
    parameters:
    - id: type
      type: System.Type
      description: "若要註冊的啟動指令碼類型。"
    - id: key
      type: System.String
      description: "若要註冊的啟動指令碼索引鍵。"
    - id: script
      type: System.String
      description: "常值，以便註冊啟動指令碼。"
    - id: addScriptTags
      type: System.Boolean
      description: "布林值，指出是否要加入指令碼標記。"
  overload: System.Web.UI.ClientScriptManager.RegisterStartupScript*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.ValidateEvent(System.String)
  id: ValidateEvent(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: ValidateEvent(String)
  nameWithType: ClientScriptManager.ValidateEvent(String)
  fullName: System.Web.UI.ClientScriptManager.ValidateEvent(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "驗證已登錄事件驗證使用用戶端事件<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*>方法。</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*>"
  syntax:
    content: public void ValidateEvent (string uniqueId);
    parameters:
    - id: uniqueId
      type: System.String
      description: "表示產生事件的用戶端控制項的唯一識別碼。"
  overload: System.Web.UI.ClientScriptManager.ValidateEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)
  id: ValidateEvent(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: ValidateEvent(String,String)
  nameWithType: ClientScriptManager.ValidateEvent(String,String)
  fullName: System.Web.UI.ClientScriptManager.ValidateEvent(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "驗證已登錄事件驗證使用用戶端事件<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*>方法。</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*>"
  remarks: ''
  example:
  - "The following code example demonstrates using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method and the ValidateEvent method to register a callback for validation and to validate that the callback originated from the page. To improve on the validation shown here, you could modify the validation `argument` parameter to contain information specific to the user such as an identity or role  \n  \n [!code-vb[System.Web.UI.ClientScriptManager9#1](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_3_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager9#1](~/add/codesnippet/csharp/m-system.web.ui.clientsc_3_1.aspx)]"
  syntax:
    content: public void ValidateEvent (string uniqueId, string argument);
    parameters:
    - id: uniqueId
      type: System.String
      description: "表示產生事件的用戶端控制項的唯一識別碼。"
    - id: argument
      type: System.String
      description: "事件引數傳遞與用戶端事件。"
  overload: System.Web.UI.ClientScriptManager.ValidateEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>uniqueId</code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或空字串 (&quot;&quot;)。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetCallbackEventReference(Control,String,String,String)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetCallbackEventReference(Control,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetCallbackEventReference(String,String,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(String,String,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(String,String,String,String,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetCallbackEventReference(Control,String,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackClientHyperlink(Control,String)
  nameWithType: ClientScriptManager.GetPostBackClientHyperlink(Control,String)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(Control,String)
- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackClientHyperlink(Control,String,Boolean)
  nameWithType: ClientScriptManager.GetPostBackClientHyperlink(Control,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(Control,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackEventReference(PostBackOptions)
  nameWithType: ClientScriptManager.GetPostBackEventReference(PostBackOptions)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(PostBackOptions)
- uid: System.Web.UI.PostBackOptions
  parent: System.Web.UI
  isExternal: false
  name: PostBackOptions
  nameWithType: PostBackOptions
  fullName: System.Web.UI.PostBackOptions
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackEventReference(Control,String)
  nameWithType: ClientScriptManager.GetPostBackEventReference(Control,String)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(Control,String)
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackEventReference(PostBackOptions,Boolean)
  nameWithType: ClientScriptManager.GetPostBackEventReference(PostBackOptions,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(PostBackOptions,Boolean)
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackEventReference(Control,String,Boolean)
  nameWithType: ClientScriptManager.GetPostBackEventReference(Control,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(Control,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetWebResourceUrl(Type,String)
  nameWithType: ClientScriptManager.GetWebResourceUrl(Type,String)
  fullName: System.Web.UI.ClientScriptManager.GetWebResourceUrl(Type,String)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptBlockRegistered(String)
  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(String)
- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptBlockRegistered(Type,String)
  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(Type,String)
- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptIncludeRegistered(String)
  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(String)
- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptIncludeRegistered(Type,String)
  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(Type,String)
- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsOnSubmitStatementRegistered(String)
  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(String)
- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsOnSubmitStatementRegistered(Type,String)
  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(Type,String)
- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsStartupScriptRegistered(String)
  nameWithType: ClientScriptManager.IsStartupScriptRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(String)
- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsStartupScriptRegistered(Type,String)
  nameWithType: ClientScriptManager.IsStartupScriptRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(Type,String)
- uid: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterArrayDeclaration(String,String)
  nameWithType: ClientScriptManager.RegisterArrayDeclaration(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptBlock(Type,String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptBlock(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(Type,String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptBlock(Type,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterClientScriptBlock(Type,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(Type,String,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptInclude(String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptInclude(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptInclude(Type,String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptInclude(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(Type,String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptResource(Type,String)
  nameWithType: ClientScriptManager.RegisterClientScriptResource(Type,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptResource(Type,String)
- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterExpandoAttribute(String,String,String)
  nameWithType: ClientScriptManager.RegisterExpandoAttribute(String,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(String,String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterExpandoAttribute(String,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterExpandoAttribute(String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(String,String,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterForEventValidation(String)
  nameWithType: ClientScriptManager.RegisterForEventValidation(String)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(String)
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterForEventValidation(PostBackOptions)
  nameWithType: ClientScriptManager.RegisterForEventValidation(PostBackOptions)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(PostBackOptions)
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterForEventValidation(String,String)
  nameWithType: ClientScriptManager.RegisterForEventValidation(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterHiddenField(String,String)
  nameWithType: ClientScriptManager.RegisterHiddenField(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterHiddenField(String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterOnSubmitStatement(Type,String,String)
  nameWithType: ClientScriptManager.RegisterOnSubmitStatement(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(Type,String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterStartupScript(Type,String,String)
  nameWithType: ClientScriptManager.RegisterStartupScript(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterStartupScript(Type,String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterStartupScript(Type,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterStartupScript(Type,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterStartupScript(Type,String,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.ValidateEvent(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: ValidateEvent(String)
  nameWithType: ClientScriptManager.ValidateEvent(String)
  fullName: System.Web.UI.ClientScriptManager.ValidateEvent(String)
- uid: System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: ValidateEvent(String,String)
  nameWithType: ClientScriptManager.ValidateEvent(String,String)
  fullName: System.Web.UI.ClientScriptManager.ValidateEvent(String,String)
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetCallbackEventReference
  nameWithType: ClientScriptManager.GetCallbackEventReference
- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackClientHyperlink
  nameWithType: ClientScriptManager.GetPostBackClientHyperlink
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackEventReference
  nameWithType: ClientScriptManager.GetPostBackEventReference
- uid: System.Web.UI.ClientScriptManager.GetWebResourceUrl*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetWebResourceUrl
  nameWithType: ClientScriptManager.GetWebResourceUrl
- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptBlockRegistered
  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered
- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptIncludeRegistered
  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered
- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsOnSubmitStatementRegistered
  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered
- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsStartupScriptRegistered
  nameWithType: ClientScriptManager.IsStartupScriptRegistered
- uid: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterArrayDeclaration
  nameWithType: ClientScriptManager.RegisterArrayDeclaration
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptBlock
  nameWithType: ClientScriptManager.RegisterClientScriptBlock
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptInclude
  nameWithType: ClientScriptManager.RegisterClientScriptInclude
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptResource*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptResource
  nameWithType: ClientScriptManager.RegisterClientScriptResource
- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterExpandoAttribute
  nameWithType: ClientScriptManager.RegisterExpandoAttribute
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterForEventValidation
  nameWithType: ClientScriptManager.RegisterForEventValidation
- uid: System.Web.UI.ClientScriptManager.RegisterHiddenField*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterHiddenField
  nameWithType: ClientScriptManager.RegisterHiddenField
- uid: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterOnSubmitStatement
  nameWithType: ClientScriptManager.RegisterOnSubmitStatement
- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterStartupScript
  nameWithType: ClientScriptManager.RegisterStartupScript
- uid: System.Web.UI.ClientScriptManager.ValidateEvent*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: ValidateEvent
  nameWithType: ClientScriptManager.ValidateEvent
