### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlSecureResolver
  id: XmlSecureResolver
  children:
  - System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.PermissionSet)
  - System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.Policy.Evidence)
  - System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.String)
  - System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)
  - System.Xml.XmlSecureResolver.Credentials
  - System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)
  - System.Xml.XmlSecureResolver.GetEntityAsync(System.Uri,System.String,System.Type)
  - System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)
  langs:
  - csharp
  name: XmlSecureResolver
  nameWithType: XmlSecureResolver
  fullName: System.Xml.XmlSecureResolver
  type: Class
  summary: "可協助保護安全的另一個實作<xref href=&quot;System.Xml.XmlResolver&quot;></xref>包裝<xref href=&quot;System.Xml.XmlResolver&quot;></xref>物件，並限制資源的基礎<xref href=&quot;System.Xml.XmlResolver&quot;></xref>具有存取權。"
  remarks: "<xref:System.Xml.XmlUrlResolver>類別是預設的解析程式中所有類別<xref:System.Xml>命名空間。</xref:System.Xml> </xref:System.Xml.XmlUrlResolver> 它用來載入 XML 文件和解析外部資源，例如實體、 Dtd 或結構描述，以及匯入或 include 指示詞。       您可以藉由指定覆寫此預設<xref:System.Xml.XmlResolver>要使用的物件。</xref:System.Xml.XmlResolver> 例如，如果您想要限制的資源，基礎<xref:System.Xml.XmlResolver>都可以存取，您可以使用 XmlSecureResolver 物件。</xref:System.Xml.XmlResolver>       XmlSecureResolver 環繞的具體實作<xref:System.Xml.XmlResolver>，並限制資源的基礎<xref:System.Xml.XmlResolver>具有存取權。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver> 例如，XmlSecureResolver 能夠以禁止跨網域重新導向，請從內嵌的統一資源識別元 (URI) 參考，就會發生。       當您建構 XmlSecureResolver 物件時，您提供有效<xref:System.Xml.XmlResolver>實作以及的 URL 辨識項物件或可由 XmlSecureResolver 來判斷安全性權限集合的執行個體。</xref:System.Xml.XmlResolver> 可能是<xref:System.Security.PermissionSet?displayProperty=fullName>產生或現有的使用其中一種和<xref:System.Security.PermissionSet.PermitOnly%2A?displayProperty=fullName>上呼叫它來協助保護基礎<xref:System.Xml.XmlResolver>.</xref:System.Xml.XmlResolver> </xref:System.Security.PermissionSet.PermitOnly%2A?displayProperty=fullName> </xref:System.Security.PermissionSet?displayProperty=fullName>      > [!IMPORTANT] > XmlSecureResolver 物件可以包含使用者認證等機密資訊。 當快取 XmlSecureResolver 物件和應該不 XmlSecureResolver 物件傳遞至不受信任的元件，您應該非常小心。      > [!IMPORTANT] > 中的.NET Framework common language runtime (CLR) 上執行的程式碼和整合至 Microsoft SQL Server 2005 在 CLR 上執行的程式碼的安全性基礎結構的差異。 這可能會導致整合開發的.NET Framework CLR 的操作方式與在 SQL Server 上使用的程式碼 CLR 的情況下。 這些差異的其中一個會影響 XmlSecureResolver 類別，當您有 URL 為基礎的辨識項 (也就是當您使用<xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%28System.String%29>方法或<xref:System.Xml.XmlSecureResolver.%23ctor%2A>建構函式)。</xref:System.Xml.XmlSecureResolver.%23ctor%2A> </xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%28System.String%29> 原則解析的 SQL Server 的機制整合 CLR 不會使用<xref:System.Security.Policy.Url>或<xref:System.Security.Policy.Zone>資訊。</xref:System.Security.Policy.Zone> </xref:System.Security.Policy.Url> 相反地，它會授與組件載入時，伺服器會將新增 GUID 為基礎的權限。 當您在 SQL Server 中使用的 XmlSecureResolver 整合 CLR，直接透過使用指定的<xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet>提供任何必要的辨識項      ## 若要使用安全的解決器 1。  建立 XmlSecureResolver 的正確權限集合。      2.  建立<xref:System.Xml.XmlReaderSettings>使用 XmlSecureResolver 物件的物件。</xref:System.Xml.XmlReaderSettings>           [!code-vb[XmlSecureResolver_Samples #5a](~/add/codesnippet/visualbasic/t-system.xml.xmlsecurere_1.vb)][!code-cs[XmlSecureResolver_Samples #5a](~/add/codesnippet/csharp/t-system.xml.xmlsecurere_1.cs) ] 3。        傳遞<xref:System.Xml.XmlReaderSettings>物件<xref:System.Xml.XmlReader.Create%2A>方法，當您在建立時<xref:System.Xml.XmlReader>物件。</xref:System.Xml.XmlReader> </xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings>           [!code-vb[XmlSecureResolver_Samples&#5;b](~/add/codesnippet/visualbasic/t-system.xml.xmlsecurere_2.vb)][!code-cs[XmlSecureResolver_Samples&#5;b](~/add/codesnippet/csharp/t-system.xml.xmlsecurere_2.cs) ] # # 若要使用的 URL 使用限制存取<xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.String%29>建立允許存取您本機內部網路網站只能 XmlSecureResolver 物件建構函式。</xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.String%29>             [!code-vb[XmlSecureResolver_Samples #3](~/add/codesnippet/visualbasic/t-system.xml.xmlsecurere_3.vb)][!code-cs[XmlSecureResolver_Samples #3](~/add/codesnippet/csharp/t-system.xml.xmlsecurere_3.cs) ] # # 若要使用的權限限制存取設定 1。    建立<xref:System.Net.WebPermission>物件。</xref:System.Net.WebPermission>           [!code-vb[XmlSecureResolver_Samples #4a](~/add/codesnippet/visualbasic/t-system.xml.xmlsecurere_4.vb)][!code-cs[XmlSecureResolver_Samples #4a](~/add/codesnippet/csharp/t-system.xml.xmlsecurere_4.cs) ] 2。        指定您想要允許存取的 Url。           [!code-vb[XmlSecureResolver_Samples #4b](~/add/codesnippet/visualbasic/t-system.xml.xmlsecurere_5.vb)][!code-cs[XmlSecureResolver_Samples #4b](~/add/codesnippet/csharp/t-system.xml.xmlsecurere_5.cs) ] 3。        加入的 web 權限<xref:System.Security.PermissionSet>物件。</xref:System.Security.PermissionSet>           [!code-vb[C# 4 XmlSecureResolver_Samples](~/add/codesnippet/visualbasic/t-system.xml.xmlsecurere_6.vb)][!code-cs[XmlSecureResolver_Samples #4 c](~/add/codesnippet/csharp/t-system.xml.xmlsecurere_6.cs) ] 4。        使用<xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.Security.PermissionSet%29>建構函式建立的 XmlSecureResolver 物件使用的權限集。</xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.Security.PermissionSet%29>           [!code-vb[XmlSecureResolver_Samples&#4; d](~/add/codesnippet/visualbasic/t-system.xml.xmlsecurere_7.vb)][!code-cs[XmlSecureResolver_Samples&#4; d](~/add/codesnippet/csharp/t-system.xml.xmlsecurere_7.cs) ]看到<xref:System.Xml.XmlSecureResolver.%23ctor%2A>參考頁面的另一個範例。</xref:System.Xml.XmlSecureResolver.%23ctor%2A>            ## 使用辨識項來限制存取您可以使用<xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>建構函式，並指定<xref:System.Security.Policy.Evidence>.</xref:System.Security.Policy.Evidence></xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>限制存取 <xref:System.Security.Policy.Evidence>用來建立<xref:System.Security.PermissionSet>套用至基礎<xref:System.Xml.XmlResolver>。</xref:System.Xml.XmlResolver> </xref:System.Security.PermissionSet> </xref:System.Security.Policy.Evidence> XmlSecureResolver 呼叫<xref:System.Security.PermissionSet.PermitOnly%2A>上建立<xref:System.Security.PermissionSet>開啟任何資源之前。</xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet.PermitOnly%2A>       以下是一些常見案例和每個提供的辨識項型別:-如果您使用在完全信任環境中，建立辨識項使用您的組件︰ [!code-vb [XmlSecureResolver_Samples&#1;](~/add/codesnippet/visualbasic/t-system.xml.xmlsecurere_8.vb)][!code-cs[XmlSecureResolver_Samples&#1;](~/add/codesnippet/csharp/t-system.xml.xmlsecurere_8.cs) ] -如果您正在非完全信任環境中，您的程式碼或來自外部來源，並且您知道外部來源的源頭，並且有可驗證的 URI使用 URI 建立辨識項︰ [!code-vb [XmlSecureResolver_Samples&#2;](~/add/codesnippet/visualbasic/t-system.xml.xmlsecurere_9.vb)][!code-cs[XmlSecureResolver_Samples&#2;](~/add/codesnippet/csharp/t-system.xml.xmlsecurere_9.cs) ] -如果您在完全信任的環境中使用和您的程式碼或來自外部來源，但您不知道來源的外部來源，可能是︰ 設定`evidence`參數`null`。             這可讓任何資源的存取權。           -或者-如果您的應用程式需要某些資源的存取權，請自呼叫端要求識別項。      ## 若要使用安全的解析程式載入 XSLT 樣式表 1。  建立 XmlSecureResolver 的正確權限集合。      2.  傳遞至 XmlSecureResolver<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>           [!code-vb[XmlSecureResolver_Samples&#6;](~/add/codesnippet/visualbasic/t-system.xml.xmlsecurere_10.vb)][!code-cs[XmlSecureResolver_Samples&#6;      ](~/add/codesnippet/csharp/t-system.xml.xmlsecurere_10.cs)]"
  syntax:
    content: 'public class XmlSecureResolver : System.Xml.XmlResolver'
  inheritance:
  - System.Object
  - System.Xml.XmlResolver
  implements: []
  inheritedMembers:
  - System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)
  platform:
  - net462
- uid: System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.PermissionSet)
  id: '#ctor(System.Xml.XmlResolver,System.Security.PermissionSet)'
  parent: System.Xml.XmlSecureResolver
  langs:
  - csharp
  name: XmlSecureResolver(XmlResolver,PermissionSet)
  nameWithType: XmlSecureResolver.XmlSecureResolver(XmlResolver,PermissionSet)
  fullName: System.Xml.XmlSecureResolver.XmlSecureResolver(XmlResolver,PermissionSet)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "初始化的新執行個體<xref href=&quot;System.Xml.XmlSecureResolver&quot;></xref>類別<xref href=&quot;System.Xml.XmlResolver&quot;></xref>和<xref href=&quot;System.Security.PermissionSet&quot;></xref>指定。"
  remarks: ''
  example:
  - "The following example constructs an <xref:System.Xml.XmlSecureResolver> object by using a customized permission set.  \n  \n [!code-cs[XmlSecureResolver.cctor#1](~/add/codesnippet/csharp/e6fb0edb-66a8-45c7-82d0-_1.cs)]\n [!code-cpp[XmlSecureResolver.cctor#1](~/add/codesnippet/cpp/e6fb0edb-66a8-45c7-82d0-_1.cpp)]\n [!code-vb[XmlSecureResolver.cctor#1](~/add/codesnippet/visualbasic/e6fb0edb-66a8-45c7-82d0-_1.vb)]"
  syntax:
    content: public XmlSecureResolver (System.Xml.XmlResolver resolver, System.Security.PermissionSet permissionSet);
    parameters:
    - id: resolver
      type: System.Xml.XmlResolver
      description: "包裝的 XML 解析程式<xref href=&quot;System.Xml.XmlSecureResolver&quot;> </xref>。"
    - id: permissionSet
      type: System.Security.PermissionSet
      description: "權限設為套用至基礎<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>。 <xref href=&quot;System.Xml.XmlSecureResolver&quot;> </xref>呼叫&lt;xref:System.Security.PermissionSet.PermitOnly%2A?displayProperty=fullName&gt;方法上的權限集，然後再呼叫<xref:System.Xml.XmlSecureResolver.GetEntity*>基礎 XML 解析程式上的方法。</xref:System.Xml.XmlSecureResolver.GetEntity*>"
  overload: System.Xml.XmlSecureResolver.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.Policy.Evidence)
  id: '#ctor(System.Xml.XmlResolver,System.Security.Policy.Evidence)'
  parent: System.Xml.XmlSecureResolver
  langs:
  - csharp
  name: XmlSecureResolver(XmlResolver,Evidence)
  nameWithType: XmlSecureResolver.XmlSecureResolver(XmlResolver,Evidence)
  fullName: System.Xml.XmlSecureResolver.XmlSecureResolver(XmlResolver,Evidence)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "初始化的新執行個體<xref href=&quot;System.Xml.XmlSecureResolver&quot;></xref>類別<xref href=&quot;System.Xml.XmlResolver&quot;></xref>和<xref href=&quot;System.Security.Policy.Evidence&quot;></xref>指定。"
  remarks: "以下是一些可能的案例，以及每個案例所提供的辨識項型別:-如果您使用在完全信任環境中，建立辨識項使用您的組件︰ [!code-vb [XmlSecureResolver_Samples&#1;](~/add/codesnippet/visualbasic/74601da4-12bd-44fe-a117-_1.vb)][!code-cs[XmlSecureResolver_Samples&#1;](~/add/codesnippet/csharp/74601da4-12bd-44fe-a117-_1.cs) ] -如果您正在非完全信任環境中，您的程式碼或來自外部來源，並且您知道外部來源的源頭，並且有可驗證的 URI使用 URI 建立辨識項︰ [!code-vb [XmlSecureResolver_Samples&#2;](~/add/codesnippet/visualbasic/74601da4-12bd-44fe-a117-_2.vb)][!code-cs[XmlSecureResolver_Samples&#2;](~/add/codesnippet/csharp/74601da4-12bd-44fe-a117-_2.cs) ] -如果您在完全信任的環境中使用和您的程式碼或來自外部來源，但您不知道來源的外部來源，可能是︰ 設定`evidence`參數`null`。             這可讓任何資源的存取權。           -或者-如果您的應用程式需要某些資源的存取權，請自呼叫端要求識別項。"
  syntax:
    content: public XmlSecureResolver (System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);
    parameters:
    - id: resolver
      type: System.Xml.XmlResolver
      description: "包裝的 XML 解析程式<xref href=&quot;System.Xml.XmlSecureResolver&quot;> </xref>。"
    - id: evidence
      type: System.Security.Policy.Evidence
      description: "用來建立辨識項<xref href=&quot;System.Security.PermissionSet&quot;></xref>會套用至基礎<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>。 <xref href=&quot;System.Xml.XmlSecureResolver&quot;> </xref>呼叫&lt;xref:System.Security.PermissionSet.PermitOnly%2A?displayProperty=fullName&gt;方法上建立<xref href=&quot;System.Security.PermissionSet&quot;></xref>之前先呼叫<xref:System.Xml.XmlSecureResolver.GetEntity*>基礎<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>。</xref:System.Xml.XmlSecureResolver.GetEntity*>"
  overload: System.Xml.XmlSecureResolver.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.String)
  id: '#ctor(System.Xml.XmlResolver,System.String)'
  parent: System.Xml.XmlSecureResolver
  langs:
  - csharp
  name: XmlSecureResolver(XmlResolver,String)
  nameWithType: XmlSecureResolver.XmlSecureResolver(XmlResolver,String)
  fullName: System.Xml.XmlSecureResolver.XmlSecureResolver(XmlResolver,String)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "初始化的新執行個體<xref href=&quot;System.Xml.XmlSecureResolver&quot;></xref>類別<xref href=&quot;System.Xml.XmlResolver&quot;></xref>和提供的 URL。"
  remarks: >-
    > [!IMPORTANT]

    >  There are differences in the security infrastructure for code running on the .NET Framework common language runtime (CLR) and for code running on the CLR that is integrated within Microsoft SQL Server 2005. This can lead to cases where code developed for the .NET Framework CLR operates differently when used on the SQL Server integrated CLR. One of these differences affects the <xref:System.Xml.XmlSecureResolver> class when you have evidence that is based on a URL (that is, when you use the <xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%2A> method or the XmlSecureResolver constructor). The policy resolution mechanism of the SQL Server integrated CLR does not use the <xref:System.Security.Policy.Url> or <xref:System.Security.Policy.Zone> information. Instead, it grants permissions based on the GUID that the server adds when assemblies are loaded. When you use the <xref:System.Xml.XmlSecureResolver> in the SQL Server integrated CLR, provide any required evidence directly by using a specified <xref:System.Security.PermissionSet>.
  example:
  - "This example uses the XmlSecureResolver constructor to create an <xref:System.Xml.XmlSecureResolver> object that is allowed to access your local intranet site only.  \n  \n [!code-vb[XmlSecureResolver_Samples#3](~/add/codesnippet/visualbasic/m-system.xml.xmlsecurere_1.vb)]\n [!code-cs[XmlSecureResolver_Samples#3](~/add/codesnippet/csharp/m-system.xml.xmlsecurere_1.cs)]"
  syntax:
    content: public XmlSecureResolver (System.Xml.XmlResolver resolver, string securityUrl);
    parameters:
    - id: resolver
      type: System.Xml.XmlResolver
      description: "包裝的 XML 解析程式<xref href=&quot;System.Xml.XmlSecureResolver&quot;> </xref>。"
    - id: securityUrl
      type: System.String
      description: "用來建立 URL <xref href=&quot;System.Security.PermissionSet&quot;> </xref>會套用至基礎<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>。 <xref href=&quot;System.Xml.XmlSecureResolver&quot;> </xref>呼叫&lt;xref:System.Security.PermissionSet.PermitOnly%2A?displayProperty=fullName&gt;上建立<xref href=&quot;System.Security.PermissionSet&quot;></xref>之前先呼叫<xref:System.Xml.XmlSecureResolver.GetEntity*>基礎<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>。</xref:System.Xml.XmlSecureResolver.GetEntity*>"
  overload: System.Xml.XmlSecureResolver.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)
  id: CreateEvidenceForUrl(System.String)
  parent: System.Xml.XmlSecureResolver
  langs:
  - csharp
  name: CreateEvidenceForUrl(String)
  nameWithType: XmlSecureResolver.CreateEvidenceForUrl(String)
  fullName: System.Xml.XmlSecureResolver.CreateEvidenceForUrl(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "建立使用提供的 URL 辨識項。"
  remarks: >-
    > [!IMPORTANT]

    >  There are differences in the security infrastructure for code running on the .NET Framework common language runtime (CLR) and for code running on the CLR that is integrated within Microsoft SQL Server 2005. This can lead to cases where code developed for the .NET Framework CLR operates differently when used on the SQL Server integrated CLR. One of these differences affects the <xref:System.Xml.XmlSecureResolver> class when you have evidence that is based on a URL (that is, when you use the CreateEvidenceForUrl method or the <xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.String%29> constructor). The policy resolution mechanism of the SQL Server integrated CLR doesn't use the <xref:System.Security.Policy.Url> or <xref:System.Security.Policy.Zone> information. Instead, it grants permissions based on the GUID that the server adds when assemblies are loaded. When you use the <xref:System.Xml.XmlSecureResolver> in the SQL Server integrated CLR, provide any required evidence directly by using a specified <xref:System.Security.PermissionSet>.
  syntax:
    content: public static System.Security.Policy.Evidence CreateEvidenceForUrl (string securityUrl);
    parameters:
    - id: securityUrl
      type: System.String
      description: "用來建立辨識項的 URL。"
    return:
      type: System.Security.Policy.Evidence
      description: "依照預設原則所定義，從提供的 URL 產生之辨識項。"
  overload: System.Xml.XmlSecureResolver.CreateEvidenceForUrl*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlSecureResolver.Credentials
  id: Credentials
  parent: System.Xml.XmlSecureResolver
  langs:
  - csharp
  name: Credentials
  nameWithType: XmlSecureResolver.Credentials
  fullName: System.Xml.XmlSecureResolver.Credentials
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "設定用來驗證 web 要求的認證。"
  remarks: ''
  example:
  - "The following example uses an <xref:System.Xml.XmlSecureResolver> with default credentials to resolve and open network resources needed by the <xref:System.Xml.XmlTextReader>.  \n  \n [!code-cpp[XmlSecureResolver.Credentials#1](~/add/codesnippet/cpp/p-system.xml.xmlsecurere_1.cpp)]\n [!code-vb[XmlSecureResolver.Credentials#1](~/add/codesnippet/visualbasic/p-system.xml.xmlsecurere_1.vb)]\n [!code-cs[XmlSecureResolver.Credentials#1](~/add/codesnippet/csharp/p-system.xml.xmlsecurere_1.cs)]"
  syntax:
    content: public override System.Net.ICredentials Credentials { set; }
    return:
      type: System.Net.ICredentials
      description: "要用來驗證 web 要求的認證。 <xref href=&quot;System.Xml.XmlSecureResolver&quot;> </xref>設定指定的認證，於基礎<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>。 若未設定這個屬性，預設值為<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>; 也就是<xref href=&quot;System.Xml.XmlSecureResolver&quot;></xref>沒有使用者認證。"
  overload: System.Xml.XmlSecureResolver.Credentials*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)
  id: GetEntity(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlSecureResolver
  langs:
  - csharp
  name: GetEntity(Uri,String,Type)
  nameWithType: XmlSecureResolver.GetEntity(Uri,String,Type)
  fullName: System.Xml.XmlSecureResolver.GetEntity(Uri,String,Type)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "對應 URI 至包含實際資源的物件。 這個方法會暫時設定<xref href=&quot;System.Security.PermissionSet&quot;></xref>藉由呼叫建構函式中建立&lt;xref:System.Security.PermissionSet.PermitOnly%2A?displayProperty=fullName&gt;之前先呼叫<xref uid=&quot;langword_csharp_GetEntity&quot; name=&quot;GetEntity&quot; href=&quot;&quot;></xref>基礎<xref href=&quot;System.Xml.XmlResolver&quot;></xref>開啟資源。"
  remarks: >-
    > [!IMPORTANT]

    >  Your application can mitigate memory denial of service threats to the GetEntity method by implementing an <xref:System.Runtime.InteropServices.ComTypes.IStream> that limits the number of bytes read. This helps guard against situations where malicious code attempts to pass an infinite stream of bytes to the GetEntity method.
  syntax:
    content: public override object GetEntity (Uri absoluteUri, string role, Type ofObjectToReturn);
    parameters:
    - id: absoluteUri
      type: System.Uri
      description: "傳回從<xref:System.Xml.XmlSecureResolver.ResolveUri*>.</xref:System.Xml.XmlSecureResolver.ResolveUri*> URI"
    - id: role
      type: System.String
      description: "目前未使用。"
    - id: ofObjectToReturn
      type: System.Type
      description: "要傳回的物件類型。 目前的版本只傳回<xref:System.IO.Stream>物件。</xref:System.IO.Stream>"
    return:
      type: System.Object
      description: "透過呼叫所傳回的資料流<xref uid=&quot;langword_csharp_GetEntity&quot; name=&quot;GetEntity&quot; href=&quot;&quot;></xref>基礎<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>。 如果型別以外<xref:System.IO.Stream>指定，則方法會傳回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.IO.Stream>"
  overload: System.Xml.XmlSecureResolver.GetEntity*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "<code>ofObjectToReturn</code>既不是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>也未<xref:System.IO.Stream>型別。"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "指定的 URI 不是絕對 URI。"
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "<code>absoluteUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Exception
    commentId: T:System.Exception
    description: "沒有執行階段錯誤 （例如，中斷的伺服器連線）。"
  platform:
  - net462
- uid: System.Xml.XmlSecureResolver.GetEntityAsync(System.Uri,System.String,System.Type)
  id: GetEntityAsync(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlSecureResolver
  langs:
  - csharp
  name: GetEntityAsync(Uri,String,Type)
  nameWithType: XmlSecureResolver.GetEntityAsync(Uri,String,Type)
  fullName: System.Xml.XmlSecureResolver.GetEntityAsync(Uri,String,Type)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "以非同步方式對應 URI 至包含實際資源的物件。"
  syntax:
    content: public override System.Threading.Tasks.Task<object> GetEntityAsync (Uri absoluteUri, string role, Type ofObjectToReturn);
    parameters:
    - id: absoluteUri
      type: System.Uri
      description: "傳回從<xref:System.Xml.XmlSecureResolver.ResolveUri*>.</xref:System.Xml.XmlSecureResolver.ResolveUri*> URI"
    - id: role
      type: System.String
      description: "目前未使用。"
    - id: ofObjectToReturn
      type: System.Type
      description: "要傳回的物件類型。 目前的版本只傳回<xref:System.IO.Stream>物件。</xref:System.IO.Stream>"
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: "透過呼叫所傳回的資料流<xref uid=&quot;langword_csharp_GetEntity&quot; name=&quot;GetEntity&quot; href=&quot;&quot;></xref>基礎<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>。 如果型別以外<xref:System.IO.Stream>指定，則方法會傳回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.IO.Stream>"
  overload: System.Xml.XmlSecureResolver.GetEntityAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)
  id: ResolveUri(System.Uri,System.String)
  parent: System.Xml.XmlSecureResolver
  langs:
  - csharp
  name: ResolveUri(Uri,String)
  nameWithType: XmlSecureResolver.ResolveUri(Uri,String)
  fullName: System.Xml.XmlSecureResolver.ResolveUri(Uri,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "從基底和相對 Uri 的絕對 URI 解析藉由呼叫<xref uid=&quot;langword_csharp_ResolveUri&quot; name=&quot;ResolveUri&quot; href=&quot;&quot;></xref>基礎<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>。"
  syntax:
    content: public override Uri ResolveUri (Uri baseUri, string relativeUri);
    parameters:
    - id: baseUri
      type: System.Uri
      description: "用來解析相對 URI 的基底 URI。"
    - id: relativeUri
      type: System.String
      description: "要解析的 URI。 URI 可以是絕對或相對的。 如果絕對的這個值實際上取代`baseUri`值。 如果相對的它會結合`baseUri`將絕對 URI。"
    return:
      type: System.Uri
      description: "絕對 URI 或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果無法解析相對 URI (透過呼叫所傳回<xref uid=&quot;langword_csharp_ResolveUri&quot; name=&quot;ResolveUri&quot; href=&quot;&quot;></xref>基礎<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>)。"
  overload: System.Xml.XmlSecureResolver.ResolveUri*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>relativeUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Xml.XmlResolver
  isExternal: false
  name: System.Xml.XmlResolver
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.UriFormatException
  isExternal: true
  name: System.UriFormatException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.PermissionSet)
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: XmlSecureResolver(XmlResolver,PermissionSet)
  nameWithType: XmlSecureResolver.XmlSecureResolver(XmlResolver,PermissionSet)
  fullName: System.Xml.XmlSecureResolver.XmlSecureResolver(XmlResolver,PermissionSet)
- uid: System.Security.PermissionSet
  parent: System.Security
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
- uid: System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.Policy.Evidence)
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: XmlSecureResolver(XmlResolver,Evidence)
  nameWithType: XmlSecureResolver.XmlSecureResolver(XmlResolver,Evidence)
  fullName: System.Xml.XmlSecureResolver.XmlSecureResolver(XmlResolver,Evidence)
- uid: System.Security.Policy.Evidence
  parent: System.Security.Policy
  isExternal: false
  name: Evidence
  nameWithType: Evidence
  fullName: System.Security.Policy.Evidence
- uid: System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.String)
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: XmlSecureResolver(XmlResolver,String)
  nameWithType: XmlSecureResolver.XmlSecureResolver(XmlResolver,String)
  fullName: System.Xml.XmlSecureResolver.XmlSecureResolver(XmlResolver,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: CreateEvidenceForUrl(String)
  nameWithType: XmlSecureResolver.CreateEvidenceForUrl(String)
  fullName: System.Xml.XmlSecureResolver.CreateEvidenceForUrl(String)
- uid: System.Xml.XmlSecureResolver.Credentials
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: Credentials
  nameWithType: XmlSecureResolver.Credentials
  fullName: System.Xml.XmlSecureResolver.Credentials
- uid: System.Net.ICredentials
  parent: System.Net
  isExternal: true
  name: ICredentials
  nameWithType: ICredentials
  fullName: System.Net.ICredentials
- uid: System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: GetEntity(Uri,String,Type)
  nameWithType: XmlSecureResolver.GetEntity(Uri,String,Type)
  fullName: System.Xml.XmlSecureResolver.GetEntity(Uri,String,Type)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Xml.XmlSecureResolver.GetEntityAsync(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: GetEntityAsync(Uri,String,Type)
  nameWithType: XmlSecureResolver.GetEntityAsync(Uri,String,Type)
  fullName: System.Xml.XmlSecureResolver.GetEntityAsync(Uri,String,Type)
- uid: System.Threading.Tasks.Task{System.Object}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Object>
  nameWithType: Task<Object>
  fullName: System.Threading.Tasks.Task<System.Object>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: ResolveUri(Uri,String)
  nameWithType: XmlSecureResolver.ResolveUri(Uri,String)
  fullName: System.Xml.XmlSecureResolver.ResolveUri(Uri,String)
- uid: System.Xml.XmlSecureResolver.#ctor*
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: XmlSecureResolver
  nameWithType: XmlSecureResolver.XmlSecureResolver
- uid: System.Xml.XmlSecureResolver.CreateEvidenceForUrl*
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: CreateEvidenceForUrl
  nameWithType: XmlSecureResolver.CreateEvidenceForUrl
- uid: System.Xml.XmlSecureResolver.Credentials*
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: Credentials
  nameWithType: XmlSecureResolver.Credentials
- uid: System.Xml.XmlSecureResolver.GetEntity*
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: GetEntity
  nameWithType: XmlSecureResolver.GetEntity
- uid: System.Xml.XmlSecureResolver.GetEntityAsync*
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: GetEntityAsync
  nameWithType: XmlSecureResolver.GetEntityAsync
- uid: System.Xml.XmlSecureResolver.ResolveUri*
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: ResolveUri
  nameWithType: XmlSecureResolver.ResolveUri
