### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.RsaSecurityKey
  id: RsaSecurityKey
  children:
  - System.IdentityModel.Tokens.RsaSecurityKey.#ctor(System.Security.Cryptography.RSA)
  - System.IdentityModel.Tokens.RsaSecurityKey.DecryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.RsaSecurityKey.EncryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.RsaSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)
  - System.IdentityModel.Tokens.RsaSecurityKey.GetHashAlgorithmForSignature(System.String)
  - System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureDeformatter(System.String)
  - System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureFormatter(System.String)
  - System.IdentityModel.Tokens.RsaSecurityKey.HasPrivateKey
  - System.IdentityModel.Tokens.RsaSecurityKey.IsAsymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.RsaSecurityKey.IsSupportedAlgorithm(System.String)
  - System.IdentityModel.Tokens.RsaSecurityKey.IsSymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.RsaSecurityKey.KeySize
  langs:
  - csharp
  name: RsaSecurityKey
  nameWithType: RsaSecurityKey
  fullName: System.IdentityModel.Tokens.RsaSecurityKey
  type: Class
  summary: "表示使用 RSA 演算法產生的安全性金鑰。 這個類別無法被繼承。"
  syntax:
    content: 'public sealed class RsaSecurityKey : System.IdentityModel.Tokens.AsymmetricSecurityKey'
  inheritance:
  - System.Object
  - System.IdentityModel.Tokens.SecurityKey
  - System.IdentityModel.Tokens.AsymmetricSecurityKey
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.RsaSecurityKey.#ctor(System.Security.Cryptography.RSA)
  id: '#ctor(System.Security.Cryptography.RSA)'
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  langs:
  - csharp
  name: RsaSecurityKey(RSA)
  nameWithType: RsaSecurityKey.RsaSecurityKey(RSA)
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.RsaSecurityKey(RSA)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "初始化的新執行個體<xref href=&quot;System.IdentityModel.Tokens.RsaSecurityKey&quot;></xref>類別使用指定的 RSA 演算法。"
  syntax:
    content: public RsaSecurityKey (System.Security.Cryptography.RSA rsa);
    parameters:
    - id: rsa
      type: System.Security.Cryptography.RSA
      description: "<xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref>表示 RSA 演算法。"
  overload: System.IdentityModel.Tokens.RsaSecurityKey.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rsa</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.RsaSecurityKey.DecryptKey(System.String,System.Byte[])
  id: DecryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  langs:
  - csharp
  name: DecryptKey(String,Byte[])
  nameWithType: RsaSecurityKey.DecryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.DecryptKey(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "解密指定的加密的金鑰。"
  syntax:
    content: public override byte[] DecryptKey (string algorithm, byte[] keyData);
    parameters:
    - id: algorithm
      type: System.String
      description: "用來加密金鑰的密碼編譯演算法。 支援的演算法為<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap&quot;></xref>和<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap&quot;> </xref>。"
    - id: keyData
      type: System.Byte[]
      description: "陣列<xref:System.Byte>包含加密的金鑰。</xref:System.Byte>"
    return:
      type: System.Byte[]
      description: "陣列<xref:System.Byte>包含解密的金鑰。</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.RsaSecurityKey.DecryptKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<code>algorithm</code>不支援。 支援的演算法為<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap&quot;></xref>和<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap&quot;> </xref>。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyData</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.RsaSecurityKey.EncryptKey(System.String,System.Byte[])
  id: EncryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  langs:
  - csharp
  name: EncryptKey(String,Byte[])
  nameWithType: RsaSecurityKey.EncryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.EncryptKey(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "指定使用加密金鑰指定的演算法。"
  syntax:
    content: public override byte[] EncryptKey (string algorithm, byte[] keyData);
    parameters:
    - id: algorithm
      type: System.String
      description: "要加密與金鑰的密碼編譯演算法。"
    - id: keyData
      type: System.Byte[]
      description: "陣列<xref:System.Byte>包含金鑰。</xref:System.Byte>"
    return:
      type: System.Byte[]
      description: "陣列<xref:System.Byte>包含加密的金鑰。</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.RsaSecurityKey.EncryptKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<code>algorithm</code>不支援。 支援的演算法為<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap&quot;></xref>和<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap&quot;> </xref>。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyData</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)
  id: GetAsymmetricAlgorithm(System.String,System.Boolean)
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  langs:
  - csharp
  name: GetAsymmetricAlgorithm(String,Boolean)
  nameWithType: RsaSecurityKey.GetAsymmetricAlgorithm(String,Boolean)
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.GetAsymmetricAlgorithm(String,Boolean)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得指定的非對稱密碼編譯演算法。"
  syntax:
    content: public override System.Security.Cryptography.AsymmetricAlgorithm GetAsymmetricAlgorithm (string algorithm, bool requiresPrivateKey);
    parameters:
    - id: algorithm
      type: System.String
      description: "若要建立非對稱演算法。"
    - id: requiresPrivateKey
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>何時需要私密金鑰來建立演算法。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "<xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref>表示指定的非對稱密碼編譯演算法。"
  overload: System.IdentityModel.Tokens.RsaSecurityKey.GetAsymmetricAlgorithm*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<code>requiresPrivateKey </code>是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> ，私用的索引鍵而且無法使用。"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetHashAlgorithmForSignature(System.String)
  id: GetHashAlgorithmForSignature(System.String)
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  langs:
  - csharp
  name: GetHashAlgorithmForSignature(String)
  nameWithType: RsaSecurityKey.GetHashAlgorithmForSignature(String)
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.GetHashAlgorithmForSignature(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得產生數位簽章之雜湊的密碼編譯演算法。"
  syntax:
    content: public override System.Security.Cryptography.HashAlgorithm GetHashAlgorithmForSignature (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "雜湊演算法。 支援的演算法是<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature&quot;> </xref>。"
    return:
      type: System.Security.Cryptography.HashAlgorithm
      description: "A <xref href=&quot;System.Security.Cryptography.HashAlgorithm&quot;> </xref> ，產生數位簽章的雜湊。"
  overload: System.IdentityModel.Tokens.RsaSecurityKey.GetHashAlgorithmForSignature*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<code>algorithm </code>不支援。 支援的演算法是<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature&quot;> </xref>。"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureDeformatter(System.String)
  id: GetSignatureDeformatter(System.String)
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  langs:
  - csharp
  name: GetSignatureDeformatter(String)
  nameWithType: RsaSecurityKey.GetSignatureDeformatter(String)
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureDeformatter(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得數位簽章的變形項演算法。"
  syntax:
    content: public override System.Security.Cryptography.AsymmetricSignatureDeformatter GetSignatureDeformatter (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "要取得的執行個體之數位簽章變形項演算法。 支援的演算法是<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature&quot;> </xref>。"
    return:
      type: System.Security.Cryptography.AsymmetricSignatureDeformatter
      description: "<xref href=&quot;System.Security.Cryptography.AsymmetricSignatureDeformatter&quot;> </xref> ，表示數位簽章的變形項演算法。"
  overload: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureDeformatter*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<code>algorithm </code>不支援。 支援的演算法是<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature&quot;> </xref>。"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureFormatter(System.String)
  id: GetSignatureFormatter(System.String)
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  langs:
  - csharp
  name: GetSignatureFormatter(String)
  nameWithType: RsaSecurityKey.GetSignatureFormatter(String)
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureFormatter(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得數位簽章的格式器演算法。"
  syntax:
    content: public override System.Security.Cryptography.AsymmetricSignatureFormatter GetSignatureFormatter (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "要取得的執行個體之數位簽章格式器演算法。 支援的演算法是<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature&quot;> </xref>。"
    return:
      type: System.Security.Cryptography.AsymmetricSignatureFormatter
      description: "<xref href=&quot;System.Security.Cryptography.AsymmetricSignatureDeformatter&quot;> </xref> ，表示數位簽章的格式器演算法。"
  overload: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureFormatter*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<code>algorithm </code>不支援。 支援的演算法是<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature&quot;> </xref>。"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.RsaSecurityKey.HasPrivateKey
  id: HasPrivateKey
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  langs:
  - csharp
  name: HasPrivateKey()
  nameWithType: RsaSecurityKey.HasPrivateKey()
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.HasPrivateKey()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得值，指出是否可以使用私密金鑰。"
  syntax:
    content: public override bool HasPrivateKey ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>當私密金鑰，則可使用;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IdentityModel.Tokens.RsaSecurityKey.HasPrivateKey*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.RsaSecurityKey.IsAsymmetricAlgorithm(System.String)
  id: IsAsymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  langs:
  - csharp
  name: IsAsymmetricAlgorithm(String)
  nameWithType: RsaSecurityKey.IsAsymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.IsAsymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得值，指出指定的演算法是否會使用非對稱金鑰。"
  syntax:
    content: public override bool IsAsymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "密碼編譯演算法。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的演算法會使用非對稱金鑰。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IdentityModel.Tokens.RsaSecurityKey.IsAsymmetricAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.RsaSecurityKey.IsSupportedAlgorithm(System.String)
  id: IsSupportedAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  langs:
  - csharp
  name: IsSupportedAlgorithm(String)
  nameWithType: RsaSecurityKey.IsSupportedAlgorithm(String)
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.IsSupportedAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得值，指出這個類別是否支援指定的演算法。"
  syntax:
    content: public override bool IsSupportedAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "密碼編譯演算法。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的演算法是<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap&quot;> </xref>， <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap&quot;> </xref>，或<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature&quot;> </xref>，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IdentityModel.Tokens.RsaSecurityKey.IsSupportedAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.RsaSecurityKey.IsSymmetricAlgorithm(System.String)
  id: IsSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  langs:
  - csharp
  name: IsSymmetricAlgorithm(String)
  nameWithType: RsaSecurityKey.IsSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.IsSymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得值，指出指定的演算法是否會使用對稱金鑰。"
  syntax:
    content: public override bool IsSymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "密碼編譯演算法。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>當指定的演算法會使用對稱金鑰。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IdentityModel.Tokens.RsaSecurityKey.IsSymmetricAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.RsaSecurityKey.KeySize
  id: KeySize
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  langs:
  - csharp
  name: KeySize
  nameWithType: RsaSecurityKey.KeySize
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.KeySize
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得大小，以位元的金鑰。"
  remarks: "<xref:System.Security.Cryptography.RSACryptoServiceProvider>8 位元為增量來支援從 384 位元到 16384 位元的金鑰長度，如果您有 Microsoft Enhanced Cryptographic Provider 安裝。</xref:System.Security.Cryptography.RSACryptoServiceProvider> 如果您有 Microsoft 基礎密碼編譯提供者安裝，它可以支援增量為 8 位元的金鑰長度是從 384 位元到 512 位元。"
  syntax:
    content: public override int KeySize { get; }
    return:
      type: System.Int32
      description: "位元金鑰的大小。"
  overload: System.IdentityModel.Tokens.RsaSecurityKey.KeySize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: System.IdentityModel.Tokens.AsymmetricSecurityKey
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.IdentityModel.Tokens.RsaSecurityKey.#ctor(System.Security.Cryptography.RSA)
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: RsaSecurityKey(RSA)
  nameWithType: RsaSecurityKey.RsaSecurityKey(RSA)
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.RsaSecurityKey(RSA)
- uid: System.Security.Cryptography.RSA
  parent: System.Security.Cryptography
  isExternal: false
  name: RSA
  nameWithType: RSA
  fullName: System.Security.Cryptography.RSA
- uid: System.IdentityModel.Tokens.RsaSecurityKey.DecryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: DecryptKey(String,Byte[])
  nameWithType: RsaSecurityKey.DecryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.DecryptKey(String,Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Tokens.RsaSecurityKey.EncryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: EncryptKey(String,Byte[])
  nameWithType: RsaSecurityKey.EncryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.EncryptKey(String,Byte[])
- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: GetAsymmetricAlgorithm(String,Boolean)
  nameWithType: RsaSecurityKey.GetAsymmetricAlgorithm(String,Boolean)
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.GetAsymmetricAlgorithm(String,Boolean)
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetHashAlgorithmForSignature(System.String)
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: GetHashAlgorithmForSignature(String)
  nameWithType: RsaSecurityKey.GetHashAlgorithmForSignature(String)
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.GetHashAlgorithmForSignature(String)
- uid: System.Security.Cryptography.HashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Security.Cryptography.HashAlgorithm
- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureDeformatter(System.String)
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: GetSignatureDeformatter(String)
  nameWithType: RsaSecurityKey.GetSignatureDeformatter(String)
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureDeformatter(String)
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricSignatureDeformatter
  nameWithType: AsymmetricSignatureDeformatter
  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter
- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureFormatter(System.String)
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: GetSignatureFormatter(String)
  nameWithType: RsaSecurityKey.GetSignatureFormatter(String)
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureFormatter(String)
- uid: System.Security.Cryptography.AsymmetricSignatureFormatter
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricSignatureFormatter
  nameWithType: AsymmetricSignatureFormatter
  fullName: System.Security.Cryptography.AsymmetricSignatureFormatter
- uid: System.IdentityModel.Tokens.RsaSecurityKey.HasPrivateKey
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: HasPrivateKey()
  nameWithType: RsaSecurityKey.HasPrivateKey()
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.HasPrivateKey()
- uid: System.IdentityModel.Tokens.RsaSecurityKey.IsAsymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: IsAsymmetricAlgorithm(String)
  nameWithType: RsaSecurityKey.IsAsymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.IsAsymmetricAlgorithm(String)
- uid: System.IdentityModel.Tokens.RsaSecurityKey.IsSupportedAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: IsSupportedAlgorithm(String)
  nameWithType: RsaSecurityKey.IsSupportedAlgorithm(String)
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.IsSupportedAlgorithm(String)
- uid: System.IdentityModel.Tokens.RsaSecurityKey.IsSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: IsSymmetricAlgorithm(String)
  nameWithType: RsaSecurityKey.IsSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.IsSymmetricAlgorithm(String)
- uid: System.IdentityModel.Tokens.RsaSecurityKey.KeySize
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: KeySize
  nameWithType: RsaSecurityKey.KeySize
  fullName: System.IdentityModel.Tokens.RsaSecurityKey.KeySize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IdentityModel.Tokens.RsaSecurityKey.#ctor*
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: RsaSecurityKey
  nameWithType: RsaSecurityKey.RsaSecurityKey
- uid: System.IdentityModel.Tokens.RsaSecurityKey.DecryptKey*
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: DecryptKey
  nameWithType: RsaSecurityKey.DecryptKey
- uid: System.IdentityModel.Tokens.RsaSecurityKey.EncryptKey*
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: EncryptKey
  nameWithType: RsaSecurityKey.EncryptKey
- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetAsymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: GetAsymmetricAlgorithm
  nameWithType: RsaSecurityKey.GetAsymmetricAlgorithm
- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetHashAlgorithmForSignature*
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: GetHashAlgorithmForSignature
  nameWithType: RsaSecurityKey.GetHashAlgorithmForSignature
- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureDeformatter*
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: GetSignatureDeformatter
  nameWithType: RsaSecurityKey.GetSignatureDeformatter
- uid: System.IdentityModel.Tokens.RsaSecurityKey.GetSignatureFormatter*
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: GetSignatureFormatter
  nameWithType: RsaSecurityKey.GetSignatureFormatter
- uid: System.IdentityModel.Tokens.RsaSecurityKey.HasPrivateKey*
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: HasPrivateKey
  nameWithType: RsaSecurityKey.HasPrivateKey
- uid: System.IdentityModel.Tokens.RsaSecurityKey.IsAsymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: IsAsymmetricAlgorithm
  nameWithType: RsaSecurityKey.IsAsymmetricAlgorithm
- uid: System.IdentityModel.Tokens.RsaSecurityKey.IsSupportedAlgorithm*
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: IsSupportedAlgorithm
  nameWithType: RsaSecurityKey.IsSupportedAlgorithm
- uid: System.IdentityModel.Tokens.RsaSecurityKey.IsSymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: IsSymmetricAlgorithm
  nameWithType: RsaSecurityKey.IsSymmetricAlgorithm
- uid: System.IdentityModel.Tokens.RsaSecurityKey.KeySize*
  parent: System.IdentityModel.Tokens.RsaSecurityKey
  isExternal: false
  name: KeySize
  nameWithType: RsaSecurityKey.KeySize
