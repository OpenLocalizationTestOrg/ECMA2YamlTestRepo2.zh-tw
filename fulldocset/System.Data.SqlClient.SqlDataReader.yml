### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlDataReader
  id: SqlDataReader
  children:
  - System.Data.SqlClient.SqlDataReader.Close
  - System.Data.SqlClient.SqlDataReader.Connection
  - System.Data.SqlClient.SqlDataReader.Depth
  - System.Data.SqlClient.SqlDataReader.FieldCount
  - System.Data.SqlClient.SqlDataReader.GetBoolean(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetByte(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetChar(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetDataTypeName(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetDateTime(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetDecimal(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetDouble(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetEnumerator
  - System.Data.SqlClient.SqlDataReader.GetFieldType(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.``0hreading.Cancellation``0oken)
  - System.Data.SqlClient.SqlDataReader.GetFloat(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetGuid(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetInt16(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetInt32(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetInt64(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetName(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetOrdinal(System.String)
  - System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(System.Object[])
  - System.Data.SqlClient.SqlDataReader.GetSchemaTable
  - System.Data.SqlClient.SqlDataReader.GetSqlBinary(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlBoolean(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlByte(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlBytes(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlChars(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlDateTime(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlDecimal(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlDouble(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlGuid(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlInt16(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlInt32(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlInt64(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlMoney(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlSingle(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlString(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlValue(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlValues(System.Object[])
  - System.Data.SqlClient.SqlDataReader.GetSqlXml(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetString(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetTimeSpan(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetValues(System.Object[])
  - System.Data.SqlClient.SqlDataReader.GetXmlReader(System.Int32)
  - System.Data.SqlClient.SqlDataReader.HasRows
  - System.Data.SqlClient.SqlDataReader.IsClosed
  - System.Data.SqlClient.SqlDataReader.IsCommandBehavior(System.Data.CommandBehavior)
  - System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)
  - System.Data.SqlClient.SqlDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlDataReader.Item(System.Int32)
  - System.Data.SqlClient.SqlDataReader.Item(System.String)
  - System.Data.SqlClient.SqlDataReader.NextResult
  - System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlDataReader.Read
  - System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlDataReader.RecordsAffected
  - System.Data.SqlClient.SqlDataReader.System#Data#IDataRecord#GetData(System.Int32)
  - System.Data.SqlClient.SqlDataReader.VisibleFieldCount
  langs:
  - csharp
  name: SqlDataReader
  nameWithType: SqlDataReader
  fullName: System.Data.SqlClient.SqlDataReader
  type: Class
  summary: "提供從 SQL Server 資料庫中讀取順向資料流的資料列的方式。 這個類別無法被繼承。"
  remarks: "若要建立 SqlDataReader，您必須呼叫<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>方法<xref:System.Data.SqlClient.SqlCommand>物件，而不是直接使用建構函式。</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>       正在使用 SqlDataReader，相關<xref:System.Data.SqlClient.SqlConnection>忙碌中提供的 SqlDataReader 中，而且可以對任何其他作業的<xref:System.Data.SqlClient.SqlConnection>不關閉它。</xref:System.Data.SqlClient.SqlConnection> </xref:System.Data.SqlClient.SqlConnection> 這是之前，這個情況<xref:System.Data.SqlClient.SqlDataReader.Close%2A>呼叫方法 SqlDataReader。</xref:System.Data.SqlClient.SqlDataReader.Close%2A> 例如，您無法擷取輸出參數，直到之後呼叫<xref:System.Data.SqlClient.SqlDataReader.Close%2A>.</xref:System.Data.SqlClient.SqlDataReader.Close%2A>       結果集，另一個處理序或執行緒正在讀取資料時，所做的變更可能會顯示使用者的`SqlDataReader`。 不過，精確的行為取決於時間點。       <xref:System.Data.SqlClient.SqlDataReader.IsClosed%2A>和<xref:System.Data.SqlClient.SqlDataReader.RecordsAffected%2A>屬性，您可以呼叫關閉 SqlDataReader 之後。</xref:System.Data.SqlClient.SqlDataReader.RecordsAffected%2A></xref:System.Data.SqlClient.SqlDataReader.IsClosed%2A> 雖然<xref:System.Data.SqlClient.SqlDataReader.RecordsAffected%2A>屬性可能是存取 SqlDataReader 存在時，務必呼叫<xref:System.Data.SqlClient.SqlDataReader.Close%2A>傳回的值之前<xref:System.Data.SqlClient.SqlDataReader.RecordsAffected%2A>保證精確的傳回值。</xref:System.Data.SqlClient.SqlDataReader.RecordsAffected%2A> </xref:System.Data.SqlClient.SqlDataReader.Close%2A> </xref:System.Data.SqlClient.SqlDataReader.RecordsAffected%2A>       使用循序存取時 (<xref:System.Data.CommandBehavior?displayProperty=fullName>)、<xref:System.InvalidOperationException>如果 SqlDataReader 位置進階和另一個讀取作業嘗試在前一個資料行上就會引發。</xref:System.InvalidOperationException> </xref:System.Data.CommandBehavior?displayProperty=fullName>      > [!NOTE] > 以獲得最佳效能，SqlDataReader 可以避免建立不必要的物件或進行不必要資料複本。 因此，多個方法等呼叫<xref:System.Data.SqlClient.SqlDataReader.GetValue%2A>傳回相同物件的參考。</xref:System.Data.SqlClient.SqlDataReader.GetValue%2A> 如果您要修改基礎值的方法，例如<xref:System.Data.SqlClient.SqlDataReader.GetValue%2A>.</xref:System.Data.SqlClient.SqlDataReader.GetValue%2A>所傳回的物件，使用警告"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, a <xref:System.Data.SqlClient.SqlCommand>, and a SqlDataReader. The example reads through the data, writing it out to the console window. The code then closes the SqlDataReader. The <xref:System.Data.SqlClient.SqlConnection> is closed automatically at the end of the `using` code block.  \n  \n [!code-cs[Classic WebData SqlDataReader.Read Example#1](~/add/codesnippet/csharp/t-system.data.sqlclient._3_1.cs)]\n [!code-vb[Classic WebData SqlDataReader.Read Example#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._3_1.vb)]"
  syntax:
    content: 'public class SqlDataReader : System.Data.Common.DbDataReader, IDisposable'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Data.Common.DbDataReader
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Data.Common.DbDataReader.Dispose
  - System.Data.Common.DbDataReader.Dispose(System.Boolean)
  - System.Data.Common.DbDataReader.GetData(System.Int32)
  - System.Data.Common.DbDataReader.GetDbDataReader(System.Int32)
  - System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)
  - System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)
  - System.Data.Common.DbDataReader.NextResultAsync
  - System.Data.Common.DbDataReader.ReadAsync
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.Close
  id: Close
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: Close()
  nameWithType: SqlDataReader.Close()
  fullName: System.Data.SqlClient.SqlDataReader.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "關閉<xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref>物件。"
  remarks: "當您透過使用時，您必須明確呼叫 Close 方法<xref:System.Data.SqlClient.SqlDataReader>使用相關聯<xref:System.Data.SqlClient.SqlConnection>用於其他用途。</xref:System.Data.SqlClient.SqlConnection> </xref:System.Data.SqlClient.SqlDataReader>       `Close`方法填入輸出參數，傳回值的值和`RecordsAffected`，增加關閉所花費的時間`SqlDataReader`用來處理大型或複雜的查詢。 當傳回值和受影響的查詢記錄的數字皆屬於不顯著，關閉所花費的時間`SqlDataReader`藉由呼叫，可降低<xref:System.Data.SqlClient.SqlCommand.Cancel%2A>方法相關聯的<xref:System.Data.SqlClient.SqlCommand>物件之前先呼叫`Close`方法。</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand.Cancel%2A>      > [!CAUTION] > 沒有呼叫`Close`或`Dispose`連線、 DataReader 或在任何其他 managed 的物件上`Finalize`類別的方法。 在完成項中，您應該只需釋放類別直接擁有的 unmanaged 的資源。 如果您的類別未擁有任何 unmanaged 的資源，並包含`Finalize`類別定義中的方法。 如需詳細資訊，請參閱[回收](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, a `SqlCommand`, and a <xref:System.Data.SqlClient.SqlDataReader>. The example reads through the data, writing it out to the console window. The code then closes the <xref:System.Data.SqlClient.SqlDataReader>. The <xref:System.Data.SqlClient.SqlConnection> is closed automatically at the end of the `using` code block.  \n  \n [!code-vb[Classic WebData SqlDataReader.Close Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._11_1.vb)]\n [!code-cs[Classic WebData SqlDataReader.Close Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._11_1.cs)]"
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Data.SqlClient.SqlDataReader.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.Connection
  id: Connection
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: Connection
  nameWithType: SqlDataReader.Connection
  fullName: System.Data.SqlClient.SqlDataReader.Connection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>聯<xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>。"
  syntax:
    content: protected System.Data.SqlClient.SqlConnection Connection { get; }
    return:
      type: System.Data.SqlClient.SqlConnection
      description: "<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>聯<xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlDataReader.Connection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.Depth
  id: Depth
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: Depth
  nameWithType: SqlDataReader.Depth
  fullName: System.Data.SqlClient.SqlDataReader.Depth
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得值，指出目前資料列的巢狀深度。"
  remarks: "最外層的資料表具有深度為零。 .NET Framework Data Provider for SQL Server 不支援巢狀結構，並一律會傳回零。"
  syntax:
    content: public override int Depth { get; }
    return:
      type: System.Int32
      description: "目前資料列的巢狀深度。"
  overload: System.Data.SqlClient.SqlDataReader.Depth*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.FieldCount
  id: FieldCount
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: FieldCount
  nameWithType: SqlDataReader.FieldCount
  fullName: System.Data.SqlClient.SqlDataReader.FieldCount
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得目前資料列中的資料行數目。"
  remarks: "執行的查詢，本質上，不會傳回資料列 （例如刪除查詢），將 FieldCount 設為 0。 不過。 這應不會傳回 0 個資料列的查詢與混淆 (例如 SELECT \\* FROM*資料表*WHERE 1 = 2） 在此情況下 FieldCount 傳回資料表，包括隱藏的欄位中的資料行數目。 使用<xref:System.Data.SqlClient.SqlDataReader.VisibleFieldCount%2A>以排除隱藏的欄位。</xref:System.Data.SqlClient.SqlDataReader.VisibleFieldCount%2A>"
  syntax:
    content: public override int FieldCount { get; }
    return:
      type: System.Int32
      description: "當未置於有效資料錄集，0;否則為目前的資料列中的資料行數目。 預設值為-1。"
  overload: System.Data.SqlClient.SqlDataReader.FieldCount*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "沒有目前連接的 SQL Server 執行個體。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetBoolean(System.Int32)
  id: GetBoolean(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetBoolean(Int32)
  nameWithType: SqlDataReader.GetBoolean(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetBoolean(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得指定資料行的值做為布林值。"
  remarks: "不會進行轉換;因此，擷取的資料必須已經是布林值，也會產生例外狀況。       呼叫<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>呼叫這個方法之前檢查是否有 null 值。</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public override bool GetBoolean (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Boolean
      description: "資料行的值。"
  overload: System.Data.SqlClient.SqlDataReader.GetBoolean*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetByte(System.Int32)
  id: GetByte(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetByte(Int32)
  nameWithType: SqlDataReader.GetByte(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetByte(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得指定資料行的值做為位元組。"
  remarks: "不會進行轉換;因此，擷取的資料必須已經是一個位元組。       呼叫<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>呼叫這個方法之前檢查是否有 null 值。</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public override byte GetByte (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Byte
      description: "指定的資料行做為位元組的值。"
  overload: System.Data.SqlClient.SqlDataReader.GetByte*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  id: GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetBytes(Int32,Int64,Byte[],Int32,Int32)
  nameWithType: SqlDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "位元組資料流從指定的資料行位移讀取到指定的緩衝區位移處開始的陣列緩衝區。"
  remarks: "GetBytes 欄位中傳回可用位元組的數。 大部分的情況下這是欄位的確切的長度。 不過，傳回的數字可能小於欄位的實際長度如果`GetBytes`已經使用來取得位元組的欄位。 這種情況下，比方說，如果可能<xref:System.Data.SqlClient.SqlDataReader>讀入緩衝區的大型資料結構。</xref:System.Data.SqlClient.SqlDataReader> 如需詳細資訊，請參閱`SequentialAccess` <xref:System.Data.CommandBehavior>。</xref:System.Data.CommandBehavior>設定       如果您要傳入的緩衝區`null`，GetBytes 傳回整個欄位的長度，以位元組為單位，不剩餘大小的緩衝區位移參數為基礎。       不會進行轉換;因此，擷取的資料必須已經是位元組陣列。"
  syntax:
    content: public override long GetBytes (int i, long dataIndex, byte[] buffer, int bufferIndex, int length);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    - id: dataIndex
      type: System.Int64
      description: "要從其中開始讀取的作業的欄位內的索引。"
    - id: buffer
      type: System.Byte[]
      description: "要讀入位元組資料流緩衝區。"
    - id: bufferIndex
      type: System.Int32
      description: "中的索引`buffer`所在開始寫入作業。"
    - id: length
      type: System.Int32
      description: "要複製至緩衝區的最大長度。"
    return:
      type: System.Int64
      description: "實際讀取的位元組數目。"
  overload: System.Data.SqlClient.SqlDataReader.GetBytes*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetChar(System.Int32)
  id: GetChar(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetChar(Int32)
  nameWithType: SqlDataReader.GetChar(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetChar(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得指定資料行的值做為單一字元。"
  remarks: "不支援<xref:System.Data.SqlClient>.</xref:System.Data.SqlClient>"
  syntax:
    content: public override char GetChar (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Char
      description: "指定資料行的值。"
  overload: System.Data.SqlClient.SqlDataReader.GetChar*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  id: GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetChars(Int32,Int64,Char[],Int32,Int32)
  nameWithType: SqlDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "字元資料流從指定的資料行位移讀取到緩衝區做為指定的緩衝區位移開頭的陣列。"
  remarks: "GetChars 欄位中傳回可用字元的數。 這通常是欄位的確切的長度。 不過，傳回的數字可能小於欄位的實際長度如果`GetChars`已經使用從欄位取得字元。 這種情況下，比方說，如果可能<xref:System.Data.SqlClient.SqlDataReader>讀入緩衝區的大型資料結構。</xref:System.Data.SqlClient.SqlDataReader> 如需詳細資訊，請參閱`SequentialAccess` <xref:System.Data.CommandBehavior>。</xref:System.Data.CommandBehavior>設定       如果欄位的結束為止，實際讀取的字元數目可以小於所要求的長度。 如果您要傳入的緩衝區`null`，GetChars 以字元為單位的其餘根據緩衝區的位移參數大小不會傳回整個欄位的長度。       不會進行轉換;因此。 擷取的資料必須已經是字元陣列。      > [!NOTE] > GetChars 方法會傳回 0 時`dataIndex`是負數。"
  syntax:
    content: public override long GetChars (int i, long dataIndex, char[] buffer, int bufferIndex, int length);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    - id: dataIndex
      type: System.Int64
      description: "要從其中開始讀取的作業的欄位內的索引。"
    - id: buffer
      type: System.Char[]
      description: "要讀入位元組資料流緩衝區。"
    - id: bufferIndex
      type: System.Int32
      description: "中的索引`buffer`所在開始寫入作業。"
    - id: length
      type: System.Int32
      description: "要複製至緩衝區的最大長度。"
    return:
      type: System.Int64
      description: "實際讀取的字元數目。"
  overload: System.Data.SqlClient.SqlDataReader.GetChars*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetDataTypeName(System.Int32)
  id: GetDataTypeName(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetDataTypeName(Int32)
  nameWithType: SqlDataReader.GetDataTypeName(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDataTypeName(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得字串，表示指定的資料行的資料類型。"
  remarks: "傳回的後端資料類型的名稱。       `numeric`是針對 SQL Server 中的同義字`decimal`資料型別。 `GetDataTypeName`會傳回 「 小數點 」 定義為十進位或數值資料行。"
  syntax:
    content: public override string GetDataTypeName (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "要尋找的資料行以零為起始的序數位置。"
    return:
      type: System.String
      description: "字串，代表指定之資料行的資料類型。"
  overload: System.Data.SqlClient.SqlDataReader.GetDataTypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetDateTime(System.Int32)
  id: GetDateTime(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetDateTime(Int32)
  nameWithType: SqlDataReader.GetDateTime(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDateTime(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得所指定的資料行的值<xref:System.DateTime>物件。</xref:System.DateTime>"
  remarks: "不會進行轉換;因此，擷取的資料必須已經是<xref:System.DateTime>物件。</xref:System.DateTime>       呼叫<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>呼叫這個方法之前檢查是否有 null 值。</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public override DateTime GetDateTime (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.DateTime
      description: "指定資料行的值。"
  overload: System.Data.SqlClient.SqlDataReader.GetDateTime*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(System.Int32)
  id: GetDateTimeOffset(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetDateTimeOffset(Int32)
  nameWithType: SqlDataReader.GetDateTimeOffset(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "擷取所指定的資料行的值<xref:System.DateTimeOffset>物件。</xref:System.DateTimeOffset>"
  remarks: "不會進行轉換;因此，擷取的資料必須已經是<xref:System.DateTimeOffset>物件。</xref:System.DateTimeOffset>       呼叫<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>呼叫這個方法之前檢查是否有 null 值。</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public virtual DateTimeOffset GetDateTimeOffset (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.DateTimeOffset
      description: "指定資料行的值。"
  overload: System.Data.SqlClient.SqlDataReader.GetDateTimeOffset*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetDecimal(System.Int32)
  id: GetDecimal(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetDecimal(Int32)
  nameWithType: SqlDataReader.GetDecimal(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDecimal(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得所指定的資料行的值<xref:System.Decimal>物件。</xref:System.Decimal>"
  remarks: "不會進行轉換;因此，擷取的資料必須已經是<xref:System.Decimal>物件。</xref:System.Decimal>       呼叫<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>呼叫這個方法之前檢查是否有 null 值。</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public override decimal GetDecimal (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Decimal
      description: "指定資料行的值。"
  overload: System.Data.SqlClient.SqlDataReader.GetDecimal*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetDouble(System.Int32)
  id: GetDouble(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetDouble(Int32)
  nameWithType: SqlDataReader.GetDouble(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDouble(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得指定資料行的值做為雙精確度浮點數。"
  remarks: "不會進行轉換。 因此，擷取的資料必須已經是雙精確度浮點數。       呼叫<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>呼叫這個方法之前檢查是否有 null 值。</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public override double GetDouble (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Double
      description: "指定資料行的值。"
  overload: System.Data.SqlClient.SqlDataReader.GetDouble*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetEnumerator
  id: GetEnumerator
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SqlDataReader.GetEnumerator()
  fullName: System.Data.SqlClient.SqlDataReader.GetEnumerator()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "傳回<xref:System.Collections.IEnumerator>逐一<xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>。</xref:System.Collections.IEnumerator>"
  remarks: "雖然您可以使用這個方法來擷取明確的列舉值，以語言支援`foreach`建構，它是簡單直接以逐一查看資料讀取器中的資料列使用迴圈建構。"
  syntax:
    content: public override System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Data.SqlClient.SqlDataReader.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetFieldType(System.Int32)
  id: GetFieldType(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetFieldType(Int32)
  nameWithType: SqlDataReader.GetFieldType(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetFieldType(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得<xref:System.Type>也就是物件的資料型別。</xref:System.Type>"
  syntax:
    content: public override Type GetFieldType (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Type
      description: "<xref:System.Type>也就是物件的資料型別。</xref:System.Type> 如果類型不存在於用戶端，在使用者定義型別 (UDT) 從資料庫中，傳回**GetFieldType**會傳回 null。"
  overload: System.Data.SqlClient.SqlDataReader.GetFieldType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)
  id: GetFieldValue``1(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetFieldValue(Int32)
  nameWithType: SqlDataReader.GetFieldValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetFieldValue(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: public override T GetFieldValue<T> (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "即將加入。"
    return:
      type: T
      description: "即將加入。"
  overload: System.Data.SqlClient.SqlDataReader.GetFieldValue<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.``0hreading.Cancellation``0oken)
  id: GetFieldValueAsync``1(System.Int32,System.``0hreading.Cancellation``0oken)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetFieldValueAsync(Int32,CancellationToken)
  nameWithType: SqlDataReader.GetFieldValueAsync(Int32,CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync(Int32,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: public override System.Threading.Tasks.Task<T> GetFieldValueAsync<T> (int i, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: i
      type: System.Int32
      description: "即將加入。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "即將加入。"
    return:
      type: System.Threading.Tasks.Task{T}
      description: "即將加入。"
  overload: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetFloat(System.Int32)
  id: GetFloat(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetFloat(Int32)
  nameWithType: SqlDataReader.GetFloat(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetFloat(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得指定資料行的值做為單精確度浮點數。"
  remarks: "不會進行轉換。 因此，擷取的資料必須是單精確度浮點數。       呼叫<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>呼叫這個方法之前檢查是否有 null 值。</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public override float GetFloat (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Single
      description: "指定資料行的值。"
  overload: System.Data.SqlClient.SqlDataReader.GetFloat*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetGuid(System.Int32)
  id: GetGuid(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetGuid(Int32)
  nameWithType: SqlDataReader.GetGuid(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetGuid(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得指定資料行的值做為全域唯一識別碼 (GUID)。"
  remarks: "不會進行轉換;因此，擷取的資料必須是 GUID。       呼叫<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>呼叫這個方法之前檢查是否有 null 值。</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public override Guid GetGuid (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Guid
      description: "指定資料行的值。"
  overload: System.Data.SqlClient.SqlDataReader.GetGuid*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetInt16(System.Int32)
  id: GetInt16(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetInt16(Int32)
  nameWithType: SqlDataReader.GetInt16(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetInt16(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得指定資料行的值為 16 位元帶正負號的整數。"
  remarks: "不會進行轉換;因此，擷取的資料必須是 16 位元帶正負號的整數。       呼叫<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>呼叫這個方法之前檢查是否有 null 值。</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public override short GetInt16 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Int16
      description: "指定資料行的值。"
  overload: System.Data.SqlClient.SqlDataReader.GetInt16*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetInt32(System.Int32)
  id: GetInt32(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetInt32(Int32)
  nameWithType: SqlDataReader.GetInt32(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetInt32(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得指定資料行的值做為 32 位元帶正負號的整數。"
  remarks: "不會進行轉換;因此，擷取的資料必須是 32 位元帶正負號的整數。       呼叫<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>呼叫這個方法之前檢查是否有 null 值。</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public override int GetInt32 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Int32
      description: "指定資料行的值。"
  overload: System.Data.SqlClient.SqlDataReader.GetInt32*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetInt64(System.Int32)
  id: GetInt64(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetInt64(Int32)
  nameWithType: SqlDataReader.GetInt64(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetInt64(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得指定資料行的值做為 64 位元帶正負號的整數。"
  remarks: "不會進行轉換;因此，擷取的資料必須是 64 位元帶正負號的整數。       呼叫<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>呼叫這個方法之前檢查是否有 null 值。</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public override long GetInt64 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Int64
      description: "指定資料行的值。"
  overload: System.Data.SqlClient.SqlDataReader.GetInt64*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetName(System.Int32)
  id: GetName(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetName(Int32)
  nameWithType: SqlDataReader.GetName(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetName(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得指定資料行的名稱。"
  syntax:
    content: public override string GetName (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.String
      description: "指定資料行名稱。"
  overload: System.Data.SqlClient.SqlDataReader.GetName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetOrdinal(System.String)
  id: GetOrdinal(System.String)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetOrdinal(String)
  nameWithType: SqlDataReader.GetOrdinal(String)
  fullName: System.Data.SqlClient.SqlDataReader.GetOrdinal(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得資料行序數，給定的資料行的名稱。"
  remarks: "`GetOrdinal`第一次執行區分大小寫的查閱。 如果失敗，第二個，就會發生不區分大小寫的搜尋 (不區分大小寫的比較是使用資料庫定序)。 比較會受到特定文化特性大小寫規則，就會發生非預期的結果。 例如，在土耳其文，下列範例會產生錯誤結果因為土耳其文中的檔案系統不會使用語言大小寫規則的字母 &quot;i&quot; 中 「 檔案 」。 方法會擲回`IndexOutOfRange`例外狀況，如果找不到以零為起始的資料行序數。       `GetOrdinal`不會區分假名寬度。       因為根據序數進行查閱比具名查閱更有效率，很效率不佳，呼叫`GetOrdinal`在迴圈內。 呼叫以節省時間`GetOrdinal`一次，將結果指派給整數變數在迴圈中使用。"
  example:
  - "The following example demonstrates how to use the GetOrdinal method.  \n  \n [!code-cs[Classic WebData SqlDataReader.GetOrdinal#1](~/add/codesnippet/csharp/m-system.data.sqlclient._27_1.cs)]\n [!code-vb[Classic WebData SqlDataReader.GetOrdinal#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._27_1.vb)]"
  syntax:
    content: public override int GetOrdinal (string name);
    parameters:
    - id: name
      type: System.String
      description: "資料行的名稱。"
    return:
      type: System.Int32
      description: "以零為起始的資料行序數。"
  overload: System.Data.SqlClient.SqlDataReader.GetOrdinal*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "指定的名稱不是有效的資料行名稱。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(System.Int32)
  id: GetProviderSpecificFieldType(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetProviderSpecificFieldType(Int32)
  nameWithType: SqlDataReader.GetProviderSpecificFieldType(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>也就是基礎提供者特有的欄位類型的表示法。"
  syntax:
    content: public override Type GetProviderSpecificFieldType (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "<xref:System.Int32>代表資料行序數。</xref:System.Int32>"
    return:
      type: System.Type
      description: "取得<xref:System.Object>也就是基礎提供者特有的欄位類型的表示法。</xref:System.Object>"
  overload: System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(System.Int32)
  id: GetProviderSpecificValue(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetProviderSpecificValue(Int32)
  nameWithType: SqlDataReader.GetProviderSpecificValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>也就是基礎提供者特定值的表示法。"
  syntax:
    content: public override object GetProviderSpecificValue (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "<xref:System.Int32>代表資料行序數。</xref:System.Int32>"
    return:
      type: System.Object
      description: "<xref:System.Object>也就是基礎提供者特定值的表示法。</xref:System.Object>"
  overload: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(System.Object[])
  id: GetProviderSpecificValues(System.Object[])
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetProviderSpecificValues(Object[])
  nameWithType: SqlDataReader.GetProviderSpecificValues(Object[])
  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得做為基礎的提供者特定的值表示的物件陣列。"
  syntax:
    content: public override int GetProviderSpecificValues (object[] values);
    parameters:
    - id: values
      type: System.Object[]
      description: "陣列<xref:System.Object>要複製的資料行值。</xref:System.Object>"
    return:
      type: System.Int32
      description: "做為基礎的提供者特定的值表示的物件陣列。"
  overload: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSchemaTable
  id: GetSchemaTable
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSchemaTable()
  nameWithType: SqlDataReader.GetSchemaTable()
  fullName: System.Data.SqlClient.SqlDataReader.GetSchemaTable()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "傳回<xref href=&quot;System.Data.DataTable&quot;></xref>描述的資料行中繼資料<xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>。"
  remarks: "對於 GetSchemaTable 方法會傳回有關每個資料行的中繼資料以下列順序: |DataReader 資料行 |描述 |  |-----------------------|-----------------|  |AllowDBNull |如果取用者可以設為 null 值的資料行，或如果無法判斷提供者，取用者是否可以設定為 null 值的資料行設定。 否則，未設定。 資料行可以包含 null 值，即使它不能設為 null 的值。 |  |BaseCatalogName |包含資料行的資料存放區中的類別目錄名稱。 如果無法判斷基底目錄名稱，則為 NULL。 此資料行的預設值是 null 值。 |  |BaseColumnName |資料存放區中的資料行名稱。 這可能是不同的資料行名稱傳回 ColumnName 資料行中原先使用別名。 如果無法判斷基底的資料行名稱，或如果資料列集資料行衍生而來但不是完全相同，資料中的資料行存放區，則為 null 值。 此資料行的預設值是 null 值。 |  |BaseSchemaName |包含資料行的資料存放區中的結構描述名稱。 如果無法判斷基底結構描述名稱，則為 null 值。 此資料行的預設值是 null 值。 |  |BaseServerName |<xref:System.Data.SqlClient.SqlDataReader>所使用的 Microsoft SQL server 執行個體的名稱。 |  |BaseTableName |資料表或檢視中包含資料行的資料存放區的名稱。</xref:System.Data.SqlClient.SqlDataReader> 如果無法判斷基底資料表名稱，則為 null 值。 此資料行的預設值是 null 值。 |  |ColumnName |資料行; 的名稱這可能不是唯一的。 如果無法判別，則會傳回 null 值。 這個名稱一律會反映目前的檢視或命令文字中的資料行的最新重新命名。 |  |ColumnOrdinal |資料行以零為起始的序數。 此資料行不能包含 null 值。 |  |ColumnSize |資料行中值的最大可能長度。 使用固定長度的資料類型的資料行，這是資料類型的大小。 如`nvarchar(MAX)`， `varchar(MAX)`，和`varbinary(MAX)`資料行儲存在 SQL Server 資料庫，大小上限是 2 GB。 如果這些資料行儲存及存取檔案，最大大小的限制會加上檔案系統。 此值變更時使用`Type System Version`連接字串中的關鍵字。  新的類型，就會表示為舊版型別。 MAX 資料類型傳回的標準 4k `nvarchar` 8000 `varchar`。 如需詳細資訊，請參閱 SQL Server 線上叢書 》 中的 TRANSACT-SQL 參考。 |  |M e |傳回字串，代表指定之資料行的資料類型。 |  |IsAliased |`true`︰ 資料行名稱是別名。<br /><br /> `false`︰ 資料行名稱不是別名。 |  |IsAutoIncrement |`true`︰ 資料行至新的資料列，以固定遞增方式指派值。<br /><br /> `false`︰ 資料行不會指派值給新的資料列，以固定遞增方式。 此資料行的預設值是`false`。 |  |IsColumnSet |`true`︰ 資料行是疏鬆資料行的資料行集的成員。 |  |IsExpression |`true`︰ 資料行是運算式。<br /><br /> `false`︰ 資料行不是運算式。 |  |IsHidden |`true`︰ 隱藏資料行。<br /><br /> `false`︰ 無法隱藏此資料行。 |  |IsIdentity |`true`︰ 資料行是識別資料行。<br /><br /> `false`: 資料行不是識別資料行。 |  |IsKey |`true`︰ 資料行是一組資料列集中的資料行的其中一個，結合在一起唯一識別資料列。 與資料行集中`IsKey`設`true`必須唯一識別資料列集中的資料列。 沒有這個資料行集是資料行的最小集合的需求。 這個資料行集可能會產生來自基底資料表主索引鍵、 唯一條件約束或唯一索引鍵。<br /><br /> `false`︰ 資料行不需要唯一識別資料列。 |  |IsLong |`true`︰ 資料行包含二進位長物件 (BLOB)，其中包含很長的資料。 非常長資料的定義是特定提供者。<br /><br /> `false`︰ 資料行不包含二進位長物件 (BLOB)，其中包含很長的資料。 |  |IsReadOnly |`true`︰ 無法修改資料行。<br /><br /> `false`︰ 可以修改資料行。 |  |IsRowVersion |`true`︰ 資料行包含永續性資料列識別碼不能寫入，且有任何有意義以外的值來識別資料列。<br /><br /> `false`︰ 資料行不包含永續性的資料列識別碼不能寫入，且沒有有意義值除了識別資料列。 |  |IsUnique |`true`︰ 資料行是類型`timestamp`。<br /><br /> `false`︰ 資料行的類型不是`timestamp`。 |  |NonVersionedProviderType |不論目前的資料行的類型`Type System Version`連接字串中指定。 傳回的值是從<xref:System.Data.SqlDbType>列舉型別。 |  |NumericPrecision |如果`ProviderType`是數值資料類型，這是資料行的最大有效位數。</xref:System.Data.SqlDbType> 精確度取決於資料行的定義。 如果`ProviderType`不是數值資料類型，這是 255。 |  |NumericScale |如果`ProviderType`DBTYPE_DECIMAL 或 DBTYPE_NUMERIC，小數點右邊的位數。 否則，這是 255。 |  |ProviderSpecificDataType |傳回提供者特定資料類型為基礎的資料行`Type System Version`連接字串中的關鍵字。 |  |提供者類型 |資料行的資料類型的指標。 如果資料行的資料類型而有所不同逐列，這必須是物件。 此資料行不能包含 null 值。 |  |UdtAssemblyQualifiedName |如果資料行是使用者定義型別 (UDT)，這是根據<xref:System.Type.AssemblyQualifiedName%2A>.</xref:System.Type.AssemblyQualifiedName%2A> UDT 的組件的限定的名稱 如果資料行不是 UDT，這個值是 null。 |  |XmlSchemaCollectionDatabase |這個 XML 執行個體的結構描述集合所在位置，如果資料列包含 XML 資料行的相關資訊的資料庫名稱。 這個值是`null`(`Nothing`在 Visual Basic 中) 如果在目前資料庫中定義之集合。 它也是 null 是否有任何結構描述集合，在此情況下`XmlSchemaCollectionName`和`XmlSchemaCollectionOwningSchema`資料行也是 null。 |  |XmlSchemaCollectionName |這個 XML 執行個體，如果資料列包含 XML 資料行的相關資訊的結構描述集合名稱。 這個值是`null`(`Nothing`在 Visual Basic 中) 如果沒有相關聯的結構描述集合。 如果值為 null，`XmlSchemaCollectionDatabase`和`XmlSchemaCollectionOwningSchema`資料行也是 null。 |  |Xmlschemacollectionowningschema 不 |這個 XML 執行個體的結構描述集合所在位置，如果資料列包含 XML 資料行的相關資訊主控關聯式結構描述。 這個值是`null`(`Nothing`在 Visual Basic 中) 如果在目前資料庫中定義之集合。 它也是 null 是否有任何結構描述集合，在此情況下`XmlSchemaCollectionDatabase`和`XmlSchemaCollectionName`資料行也是 null。 |     > [!NOTE] > 來確保中繼資料行傳回正確的資訊，您必須呼叫<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>與`behavior`參數設定為`KeyInfo`。</xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> 否則，有些結構描述資料表中的資料行可能會傳回預設值，null 或不正確的資料。"
  syntax:
    content: public override System.Data.DataTable GetSchemaTable ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>描述資料行中繼資料。"
  overload: System.Data.SqlClient.SqlDataReader.GetSchemaTable*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>已關閉。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBinary(System.Int32)
  id: GetSqlBinary(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlBinary(Int32)
  nameWithType: SqlDataReader.GetSqlBinary(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBinary(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得所指定的資料行的值<xref href=&quot;System.Data.SqlTypes.SqlBinary&quot;> </xref>。"
  remarks: "不會進行轉換;因此擷取的資料必須已經是二進位結構，或產生例外狀況。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlBinary GetSqlBinary (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Data.SqlTypes.SqlBinary
      description: "表示為資料行的值<xref href=&quot;System.Data.SqlTypes.SqlBinary&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlBinary*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBoolean(System.Int32)
  id: GetSqlBoolean(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlBoolean(Int32)
  nameWithType: SqlDataReader.GetSqlBoolean(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBoolean(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得所指定的資料行的值<xref href=&quot;System.Data.SqlTypes.SqlBoolean&quot;> </xref>。"
  remarks: "不會進行轉換;因此，擷取的資料必須已經是布林值，也會產生例外狀況。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlBoolean GetSqlBoolean (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Data.SqlTypes.SqlBoolean
      description: "資料行的值。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlBoolean*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlByte(System.Int32)
  id: GetSqlByte(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlByte(Int32)
  nameWithType: SqlDataReader.GetSqlByte(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlByte(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得所指定的資料行的值<xref href=&quot;System.Data.SqlTypes.SqlByte&quot;> </xref>。"
  remarks: "不會進行轉換;因此擷取的資料必須已經是一個位元組或會產生例外狀況。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlByte GetSqlByte (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Data.SqlTypes.SqlByte
      description: "表示為資料行的值<xref href=&quot;System.Data.SqlTypes.SqlByte&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlByte*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBytes(System.Int32)
  id: GetSqlBytes(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlBytes(Int32)
  nameWithType: SqlDataReader.GetSqlBytes(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBytes(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得所指定的資料行的值<xref href=&quot;System.Data.SqlTypes.SqlBytes&quot;> </xref>。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlBytes GetSqlBytes (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Data.SqlTypes.SqlBytes
      description: "表示為資料行的值<xref href=&quot;System.Data.SqlTypes.SqlBytes&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlBytes*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlChars(System.Int32)
  id: GetSqlChars(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlChars(Int32)
  nameWithType: SqlDataReader.GetSqlChars(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlChars(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得所指定的資料行的值<xref href=&quot;System.Data.SqlTypes.SqlChars&quot;> </xref>。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlChars GetSqlChars (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Data.SqlTypes.SqlChars
      description: "表示為資料行的值<xref href=&quot;System.Data.SqlTypes.SqlChars&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlChars*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDateTime(System.Int32)
  id: GetSqlDateTime(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlDateTime(Int32)
  nameWithType: SqlDataReader.GetSqlDateTime(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDateTime(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得所指定的資料行的值<xref href=&quot;System.Data.SqlTypes.SqlDateTime&quot;> </xref>。"
  remarks: "不會進行轉換;因此，擷取的資料必須已經是日期/時間值，也會產生例外狀況。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlDateTime GetSqlDateTime (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Data.SqlTypes.SqlDateTime
      description: "表示為資料行的值<xref href=&quot;System.Data.SqlTypes.SqlDateTime&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlDateTime*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDecimal(System.Int32)
  id: GetSqlDecimal(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlDecimal(Int32)
  nameWithType: SqlDataReader.GetSqlDecimal(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDecimal(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得所指定的資料行的值<xref href=&quot;System.Data.SqlTypes.SqlDecimal&quot;> </xref>。"
  remarks: "不會進行轉換;因此，擷取的資料必須已經是十進位的值，也會產生例外狀況。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlDecimal GetSqlDecimal (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Data.SqlTypes.SqlDecimal
      description: "表示為資料行的值<xref href=&quot;System.Data.SqlTypes.SqlDecimal&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlDecimal*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDouble(System.Int32)
  id: GetSqlDouble(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlDouble(Int32)
  nameWithType: SqlDataReader.GetSqlDouble(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDouble(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得所指定的資料行的值<xref href=&quot;System.Data.SqlTypes.SqlDouble&quot;> </xref>。"
  remarks: "不會進行轉換;因此，擷取的資料必須已經是雙精確度浮點數，也會產生例外狀況。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlDouble GetSqlDouble (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "表示為資料行的值<xref href=&quot;System.Data.SqlTypes.SqlDouble&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlDouble*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlGuid(System.Int32)
  id: GetSqlGuid(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlGuid(Int32)
  nameWithType: SqlDataReader.GetSqlGuid(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlGuid(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得所指定的資料行的值<xref href=&quot;System.Data.SqlTypes.SqlGuid&quot;> </xref>。"
  remarks: "不會進行轉換;因此，擷取的資料必須已經是 GUID，也會產生例外狀況。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlGuid GetSqlGuid (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Data.SqlTypes.SqlGuid
      description: "表示為資料行的值<xref href=&quot;System.Data.SqlTypes.SqlGuid&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlGuid*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt16(System.Int32)
  id: GetSqlInt16(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlInt16(Int32)
  nameWithType: SqlDataReader.GetSqlInt16(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt16(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得所指定的資料行的值<xref href=&quot;System.Data.SqlTypes.SqlInt16&quot;> </xref>。"
  remarks: "不會進行轉換;因此，擷取的資料必須已經是 16 位元帶正負號的整數，也會產生例外狀況。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlInt16 GetSqlInt16 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Data.SqlTypes.SqlInt16
      description: "表示為資料行的值<xref href=&quot;System.Data.SqlTypes.SqlInt16&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlInt16*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt32(System.Int32)
  id: GetSqlInt32(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlInt32(Int32)
  nameWithType: SqlDataReader.GetSqlInt32(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt32(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得所指定的資料行的值<xref href=&quot;System.Data.SqlTypes.SqlInt32&quot;> </xref>。"
  remarks: "不會進行轉換;因此擷取的資料必須已經是 32 位元帶正負號的整數，或會產生例外狀況。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlInt32 GetSqlInt32 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Data.SqlTypes.SqlInt32
      description: "表示為資料行的值<xref href=&quot;System.Data.SqlTypes.SqlInt32&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlInt32*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt64(System.Int32)
  id: GetSqlInt64(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlInt64(Int32)
  nameWithType: SqlDataReader.GetSqlInt64(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt64(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得所指定的資料行的值<xref href=&quot;System.Data.SqlTypes.SqlInt64&quot;> </xref>。"
  remarks: "不會進行轉換;因此，擷取的資料必須已經是 64 位元帶正負號的整數，也會產生例外狀況。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlInt64 GetSqlInt64 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Data.SqlTypes.SqlInt64
      description: "表示為資料行的值<xref href=&quot;System.Data.SqlTypes.SqlInt64&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlInt64*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlMoney(System.Int32)
  id: GetSqlMoney(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlMoney(Int32)
  nameWithType: SqlDataReader.GetSqlMoney(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlMoney(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得所指定的資料行的值<xref href=&quot;System.Data.SqlTypes.SqlMoney&quot;> </xref>。"
  remarks: "不會進行轉換;因此，擷取的資料必須已經是十進位的值，也會產生例外狀況。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlMoney GetSqlMoney (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Data.SqlTypes.SqlMoney
      description: "表示為資料行的值<xref href=&quot;System.Data.SqlTypes.SqlMoney&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlMoney*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlSingle(System.Int32)
  id: GetSqlSingle(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlSingle(Int32)
  nameWithType: SqlDataReader.GetSqlSingle(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlSingle(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得所指定的資料行的值<xref href=&quot;System.Data.SqlTypes.SqlSingle&quot;> </xref>。"
  remarks: "不會進行轉換;因此，擷取的資料必須已經是單精確度浮點數，也會產生例外狀況。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlSingle GetSqlSingle (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Data.SqlTypes.SqlSingle
      description: "表示為資料行的值<xref href=&quot;System.Data.SqlTypes.SqlSingle&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlSingle*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlString(System.Int32)
  id: GetSqlString(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlString(Int32)
  nameWithType: SqlDataReader.GetSqlString(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlString(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得所指定的資料行的值<xref href=&quot;System.Data.SqlTypes.SqlString&quot;> </xref>。"
  remarks: "不會進行轉換;因此，擷取的資料必須已經是一個字串，也會產生例外狀況。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlString GetSqlString (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Data.SqlTypes.SqlString
      description: "表示為資料行的值<xref href=&quot;System.Data.SqlTypes.SqlString&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlString*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlValue(System.Int32)
  id: GetSqlValue(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlValue(Int32)
  nameWithType: SqlDataReader.GetSqlValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlValue(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "傳回指定的資料行中的資料值，做為 SQL Server 類型。"
  remarks: "GetSqlValue 傳回的資料使用原生 SQL Server 型別。 若要使用擷取資料的.NET Framework 型別，請參閱<xref:System.Data.SqlClient.SqlDataReader.GetValue%2A>.</xref:System.Data.SqlClient.SqlDataReader.GetValue%2A>"
  syntax:
    content: public virtual object GetSqlValue (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Object
      description: "表示為資料行的值<xref href=&quot;System.Data.SqlDbType&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlValue*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlValues(System.Object[])
  id: GetSqlValues(System.Object[])
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlValues(Object[])
  nameWithType: SqlDataReader.GetSqlValues(Object[])
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlValues(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "填滿的陣列<xref:System.Object>，其中包含在記錄中，所有資料行的值表示為 SQL Server 類型。</xref:System.Object>"
  remarks: "在單一呼叫中，使用 SQL 類型系統，而不 CLR 型別系統記錄中傳回所有資料行的值。 長度<xref:System.Object>陣列不需要符合的記錄中的資料行數目。</xref:System.Object> 您可以傳遞<xref:System.Object>陣列，其中包含記錄中包含的資料行數目少於。</xref:System.Object> 資料量<xref:System.Object>陣列，含有複製到的資料行序數 0 為起始的陣列。</xref:System.Object> 您也可以傳遞<xref:System.Object>陣列，其長度都是多個資料行包含在產生的資料列數目。</xref:System.Object> 任何其餘的資料行是不變。"
  syntax:
    content: public virtual int GetSqlValues (object[] values);
    parameters:
    - id: values
      type: System.Object[]
      description: "陣列<xref:System.Object>要將值複製到其中。</xref:System.Object> 資料行值會表示 SQL Server 類型。"
    return:
      type: System.Int32
      description: "表示複製的資料行數目的整數。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlValues*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>values</code>為 null。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlXml(System.Int32)
  id: GetSqlXml(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlXml(Int32)
  nameWithType: SqlDataReader.GetSqlXml(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlXml(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得指定資料行的值做為 XML 值。"
  remarks: "不會進行轉換;因此，擷取的資料必須是 XML 值。       呼叫<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>呼叫這個方法之前檢查是否有 null 值。</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlXml GetSqlXml (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Data.SqlTypes.SqlXml
      description: "A <xref href=&quot;System.Data.SqlTypes.SqlXml&quot;> </xref>包含對應的欄位內所儲存的 XML 值。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlXml*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "傳遞的索引超出範圍 0 到<xref:System.Data.DataTableReader.FieldCount*>-1</xref:System.Data.DataTableReader.FieldCount*>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "嘗試讀取或存取資料行中關閉<xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "擷取的資料與不相容<xref href=&quot;System.Data.SqlTypes.SqlXml&quot;></xref>型別。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)
  id: GetStream(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetStream(Int32)
  nameWithType: SqlDataReader.GetStream(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetStream(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "擷取二進位檔、 映像、 varbinary、 UDT，以及為<xref:System.IO.Stream>.</xref:System.IO.Stream> variant 資料類型"
  remarks: "<xref:System.IO.Stream.ReadTimeout%2A>預設值為<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>; 但您可以修改<xref:System.IO.Stream.ReadTimeout%2A>透過 GetStream。</xref:System.IO.Stream.ReadTimeout%2A> </xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A></xref:System.IO.Stream.ReadTimeout%2A>       Null 值會傳回空白 （零個位元組） 為<xref:System.IO.Stream>.</xref:System.IO.Stream>       <xref:System.Data.SqlClient.SqlDataReader.GetBytes%2A>將會引發<xref:System.InvalidOperationException>GetStream 所傳回的物件上使用時的例外狀況時<xref:System.Data.CommandBehavior>作用中。</xref:System.Data.CommandBehavior> </xref:System.InvalidOperationException></xref:System.Data.SqlClient.SqlDataReader.GetBytes%2A>       <xref:System.Data.SqlClient.SqlException>從<xref:System.IO.Stream>擲回<xref:System.IO.IOException>例外狀況，請參閱內部例外狀況<xref:System.Data.SqlClient.SqlException>。</xref:System.Data.SqlClient.SqlException></xref:System.IO.IOException>為</xref:System.IO.Stream>所引發的例外狀況</xref:System.Data.SqlClient.SqlException>       下列<xref:System.IO.Stream>成員並不是適用於 GetStream 所傳回的物件:-BeginWrite-EndWrite-長度-位置-搜尋-SetLength-寫入-WriteByte-WriteTimeout 時連線屬性`ContextConnection=true`，GetStream 只支援連續的兩個同步的資料擷取 (<xref:System.Data.CommandBehavior>) 和非循序 (<xref:System.Data.CommandBehavior>) 存取。</xref:System.Data.CommandBehavior> </xref:System.Data.CommandBehavior> </xref:System.IO.Stream>       如需詳細資訊，請參閱[SqlClient 串流支援](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public override System.IO.Stream GetStream (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.IO.Stream
      description: "資料流物件。"
  overload: System.Data.SqlClient.SqlDataReader.GetStream*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "連接會卸除或關閉期間擷取資料。       <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>擷取資料時已關閉。       沒有可供讀取的資料 (例如，第一個<> *> 沒有呼叫，或傳回 false)。     嘗試讀取先前讀取中的資料行循序模式。     沒有進行中的非同步作業。這適用於所有 Get*以循序模式執行，因為它們無法讀取資料流時呼叫的方法。"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "嘗試讀取不存在的資料行。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "傳回型別不是下列類型之一:-二進位-映像-varbinary-udt"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetString(System.Int32)
  id: GetString(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetString(Int32)
  nameWithType: SqlDataReader.GetString(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetString(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得指定資料行的值做為字串。"
  remarks: "不會進行轉換;因此，擷取的資料必須是字串。       呼叫<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>呼叫這個方法之前檢查是否有 null 值。</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public override string GetString (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.String
      description: "指定資料行的值。"
  overload: System.Data.SqlClient.SqlDataReader.GetString*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)
  id: GetTextReader(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetTextReader(Int32)
  nameWithType: SqlDataReader.GetTextReader(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetTextReader(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "為<xref:System.IO.TextReader>.</xref:System.IO.TextReader>擷取 Char、 NChar、 NText、 NVarChar、 text、 varChar 和 Variant 資料類型"
  remarks: "<xref:System.Data.SqlClient.SqlException>從<xref:System.IO.TextReader>擲回<xref:System.IO.IOException>例外狀況，請參閱內部例外狀況<xref:System.Data.SqlClient.SqlException>。</xref:System.Data.SqlClient.SqlException></xref:System.IO.IOException>為</xref:System.IO.TextReader>所引發的例外狀況</xref:System.Data.SqlClient.SqlException>       Null 值會傳回空白 （零個位元組） 為<xref:System.IO.TextReader>.</xref:System.IO.TextReader>       <xref:System.Data.SqlClient.SqlDataReader.GetChars%2A>將會引發<xref:System.InvalidOperationException>GetTextReader 所傳回的物件上使用時的例外狀況時<xref:System.Data.CommandBehavior>作用中。</xref:System.Data.CommandBehavior> </xref:System.InvalidOperationException></xref:System.Data.SqlClient.SqlDataReader.GetChars%2A>       當連接屬性`ContextConnection=true`，GetTextReader 只支援連續的兩個同步的資料擷取 (<xref:System.Data.CommandBehavior>) 和非循序 (<xref:System.Data.CommandBehavior>) 存取。</xref:System.Data.CommandBehavior> </xref:System.Data.CommandBehavior>       如需詳細資訊，請參閱[SqlClient 串流支援](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public override System.IO.TextReader GetTextReader (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "要擷取的資料行。"
    return:
      type: System.IO.TextReader
      description: "傳回的物件。"
  overload: System.Data.SqlClient.SqlDataReader.GetTextReader*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "連接會卸除或關閉期間擷取資料。       <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>擷取資料時已關閉。       沒有可供讀取的資料 (例如，第一個<> *> 沒有呼叫，或傳回 false)。     嘗試讀取先前讀取中的資料行循序模式。     沒有進行中的非同步作業。這適用於所有 Get*以循序模式執行，因為它們無法讀取資料流時呼叫的方法。"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "嘗試讀取不存在的資料行。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "傳回型別不是下列類型之一:-char-nchar ntext-nvarchar-文字為 varchar"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetTimeSpan(System.Int32)
  id: GetTimeSpan(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetTimeSpan(Int32)
  nameWithType: SqlDataReader.GetTimeSpan(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetTimeSpan(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "擷取所指定的資料行的值<xref:System.TimeSpan>物件。</xref:System.TimeSpan>"
  remarks: "不會進行轉換;因此，擷取的資料必須已經是<xref:System.TimeSpan>物件。</xref:System.TimeSpan>       呼叫<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>呼叫這個方法之前檢查是否有 null 值。</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>"
  syntax:
    content: public virtual TimeSpan GetTimeSpan (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.TimeSpan
      description: "指定資料行的值。"
  overload: System.Data.SqlClient.SqlDataReader.GetTimeSpan*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定的轉換無效。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)
  id: GetValue(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetValue(Int32)
  nameWithType: SqlDataReader.GetValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetValue(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "原生格式取得指定資料行的值。"
  remarks: "GetValue 傳回使用.NET Framework 類型的資料。"
  syntax:
    content: public override object GetValue (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Object
      description: "這個方法會傳回<xref href=&quot;System.DBNull&quot;> </xref> null 資料庫資料行。"
  overload: System.Data.SqlClient.SqlDataReader.GetValue*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetValues(System.Object[])
  id: GetValues(System.Object[])
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetValues(Object[])
  nameWithType: SqlDataReader.GetValues(Object[])
  fullName: System.Data.SqlClient.SqlDataReader.GetValues(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "填入物件的陣列與目前資料列的資料行值。"
  remarks: "對於大部分的應用程式，這個方法會提供有效率的方法來擷取所有資料行，而不是個別擷取每個資料行。       您可以傳遞<xref:System.Object>陣列，其中包含產生的資料列中所包含的資料行數目少於。</xref:System.Object> 資料量<xref:System.Object>陣列，含有複製到陣列。</xref:System.Object> 您也可以傳遞<xref:System.Object>陣列，其長度都是多個資料行包含在產生的資料列數目。</xref:System.Object>       這個方法會傳回<xref:System.DBNull>null 資料庫資料行。</xref:System.DBNull>"
  example:
  - "The following example demonstrates using a correctly sized  array  to read all values from the current row in the supplied <xref:System.Data.SqlClient.SqlDataReader>. In addition, the sample demonstrates using a fixed-sized array that could be either smaller or larger than the number of available columns.  \n  \n [!code-cs[DataWorks DataTableReader.GetValueObject#2](~/add/codesnippet/csharp/m-system.data.sqlclient._28_1.cs)]\n [!code-vb[DataWorks DataTableReader.GetValueObject#2](~/add/codesnippet/visualbasic/m-system.data.sqlclient._28_1.vb)]"
  syntax:
    content: public override int GetValues (object[] values);
    parameters:
    - id: values
      type: System.Object[]
      description: "陣列<xref:System.Object>複製屬性資料行。</xref:System.Object>"
    return:
      type: System.Int32
      description: "執行個體數目<xref:System.Object>陣列中。</xref:System.Object>"
  overload: System.Data.SqlClient.SqlDataReader.GetValues*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetXmlReader(System.Int32)
  id: GetXmlReader(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetXmlReader(Int32)
  nameWithType: SqlDataReader.GetXmlReader(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetXmlReader(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "擷取 XML 類型的資料做<xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>為"
  remarks: "<xref:System.Xml.XmlReader>GetXmlReader 所傳回的物件不支援非同步作業。</xref:System.Xml.XmlReader> 如果您需要<xref:System.Xml.XmlReader>轉型將 XML 資料行上的伺服器和使用<xref:System.Data.SqlClient.SqlDataReader.GetTextReader%2A>與<xref:System.Xml.XmlReader.Create%2A>.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Data.SqlClient.SqlDataReader.GetTextReader%2A> nvarchar （max）、</xref:System.Xml.XmlReader>非同步作業       <xref:System.Data.SqlClient.SqlException>從<xref:System.Xml.XmlReader>擲回<xref:System.Xml.XmlException>例外狀況，請參閱內部例外狀況<xref:System.Data.SqlClient.SqlException>。</xref:System.Data.SqlClient.SqlException></xref:System.Xml.XmlException>為</xref:System.Xml.XmlReader>所引發的例外狀況</xref:System.Data.SqlClient.SqlException>       <xref:System.Data.SqlClient.SqlDataReader.GetChars%2A>將會引發<xref:System.InvalidOperationException>GetXmlReader 所傳回的物件上使用時的例外狀況時<xref:System.Data.CommandBehavior>作用中。</xref:System.Data.CommandBehavior> </xref:System.InvalidOperationException></xref:System.Data.SqlClient.SqlDataReader.GetChars%2A>       如需詳細資訊，請參閱[SqlClient 串流支援](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public virtual System.Xml.XmlReader GetXmlReader (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "指定資料行的值。"
    return:
      type: System.Xml.XmlReader
      description: "傳回的物件。"
  overload: System.Data.SqlClient.SqlDataReader.GetXmlReader*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "連接會卸除或關閉期間擷取資料。       <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>擷取資料時已關閉。       沒有可供讀取的資料 (例如，第一個<> *> 沒有呼叫，或傳回 false)。     嘗試讀取循序模式中的先前讀取資料行。     沒有進行中的非同步作業。這適用於所有 Get*以循序模式執行，因為它們無法讀取資料流時呼叫的方法。"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "嘗試讀取不存在的資料行。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "傳回的型別不是 xml。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.HasRows
  id: HasRows
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: HasRows
  nameWithType: SqlDataReader.HasRows
  fullName: System.Data.SqlClient.SqlDataReader.HasRows
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得值，指出是否<xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref>包含一或多個資料列。"
  syntax:
    content: public override bool HasRows { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref>包含一或多個資料列，否則為<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlDataReader.HasRows*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.IsClosed
  id: IsClosed
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: IsClosed
  nameWithType: SqlDataReader.IsClosed
  fullName: System.Data.SqlClient.SqlDataReader.IsClosed
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "擷取布林值，指出是否指定<xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref>執行個體已關閉。"
  remarks: "不可能從讀取<xref:System.Data.SqlClient.SqlDataReader>已關閉的執行個體。</xref:System.Data.SqlClient.SqlDataReader>"
  syntax:
    content: public override bool IsClosed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定<xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref>執行個體已關閉，否則為<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlDataReader.IsClosed*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.IsCommandBehavior(System.Data.CommandBehavior)
  id: IsCommandBehavior(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: IsCommandBehavior(CommandBehavior)
  nameWithType: SqlDataReader.IsCommandBehavior(CommandBehavior)
  fullName: System.Data.SqlClient.SqlDataReader.IsCommandBehavior(CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "決定是否指定<xref href=&quot;System.Data.CommandBehavior&quot;></xref>符合<xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> 。"
  remarks: "此成員支援.NET Framework 基礎結構，並不是直接從您的程式碼使用。"
  syntax:
    content: protected bool IsCommandBehavior (System.Data.CommandBehavior condition);
    parameters:
    - id: condition
      type: System.Data.CommandBehavior
      description: "A <xref href=&quot;System.Data.CommandBehavior&quot;> </xref>列舉型別。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定<xref href=&quot;System.Data.CommandBehavior&quot;></xref>為 true， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>否則。"
  overload: System.Data.SqlClient.SqlDataReader.IsCommandBehavior*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)
  id: IsDBNull(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: IsDBNull(Int32)
  nameWithType: SqlDataReader.IsDBNull(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.IsDBNull(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得值，指出資料行是否包含不存在或遺漏的值。"
  remarks: "呼叫這個方法來檢查是否有 null 資料行值，然後再呼叫的型別有 get 的方法 (例如， <xref:System.Data.SqlClient.SqlDataReader.GetByte%2A>， <xref:System.Data.SqlClient.SqlDataReader.GetChar%2A>，依此類推) 以避免引發錯誤。</xref:System.Data.SqlClient.SqlDataReader.GetChar%2A> </xref:System.Data.SqlClient.SqlDataReader.GetByte%2A>       [!code-vb[SqlDataReader_IsDbNull&#1;](~/add/codesnippet/visualbasic/m-system.data.sqlclient._29_1.vb)][!code-cs[SqlDataReader_IsDbNull&#1;  ](~/add/codesnippet/csharp/m-system.data.sqlclient._29_1.cs)]"
  syntax:
    content: public override bool IsDBNull (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的資料行值相當於<xref href=&quot;System.DBNull&quot;> </xref>，否則為<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlDataReader.IsDBNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  id: IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: IsDBNullAsync(Int32,CancellationToken)
  nameWithType: SqlDataReader.IsDBNullAsync(Int32,CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.IsDBNullAsync(Int32,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同步版本<xref:System.Data.SqlClient.SqlDataReader.IsDBNull*>，此 cmdlet 會取得值，指出資料行是否包含不存在或遺漏的值。</xref:System.Data.SqlClient.SqlDataReader.IsDBNull*>       取消語彙基元可以用來要求此作業會放棄命令逾時之前捨棄。 例外狀況將經由傳回的 Task 物件回報。"
  remarks: "如需詳細資訊，請參閱[SqlClient 串流支援](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public override System.Threading.Tasks.Task<bool> IsDBNullAsync (int i, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: i
      type: System.Int32
      description: "要擷取之以零起始的資料行。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消指令，傳播應該取消作業的通知。 這不保證取消。 如果設定為<xref uid=&quot;langword_csharp_CancellationToken.None&quot; name=&quot;CancellationToken.None&quot; href=&quot;&quot;></xref>會使這個方法相當於<xref:System.Data.SqlClient.SqlDataReader.IsDBNull*>.</xref:System.Data.SqlClient.SqlDataReader.IsDBNull*> 傳回的工作必須標示為已取消。"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的資料行值相當於<xref uid=&quot;langword_csharp_DBNull&quot; name=&quot;DBNull&quot; href=&quot;&quot;></xref>否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlDataReader.IsDBNullAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "連接會卸除或關閉期間擷取資料。       <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>擷取資料時已關閉。       沒有可供讀取的資料 (例如，第一個<> *> 沒有呼叫，或傳回 false)。     嘗試讀取循序模式中的先前讀取資料行。     沒有進行中的非同步作業。這適用於所有 Get*以循序模式執行，因為它們無法讀取資料流時呼叫的方法。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>指定連接字串中。"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "嘗試讀取不存在的資料行。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: SqlDataReader.Item(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.Item(Int32)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得值，指定資料行的原生格式資料行序數。"
  syntax:
    content: public override object this[int i] { get; }
    parameters:
    - id: i
      type: System.Int32
      description: "以零為起始的資料行序數。"
    return:
      type: System.Object
      description: "原生格式的指定資料行值。"
  overload: System.Data.SqlClient.SqlDataReader.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "傳遞的索引超出範圍 0- <xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.Item(System.String)
  id: Item(System.String)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: Item(String)
  nameWithType: SqlDataReader.Item(String)
  fullName: System.Data.SqlClient.SqlDataReader.Item(String)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "在原生格式的資料行名稱中取得指定資料行的值。"
  remarks: "第一次執行區分大小寫的查閱。 如果失敗，就會建立第二個不區分大小寫的搜尋 (不區分大小寫的比較是使用資料庫定序)。 比較會受到特定文化特性大小寫規則，就會發生非預期的結果。 例如，在土耳其文，下列範例會產生錯誤結果因為土耳其文中的檔案系統不會使用語言大小寫規則的字母 &quot;i&quot; 中 「 檔案 」。       這個方法是區分假名寬度。"
  syntax:
    content: public override object this[string name] { get; }
    parameters:
    - id: name
      type: System.String
      description: "資料行名稱。"
    return:
      type: System.Object
      description: "原生格式的指定資料行值。"
  overload: System.Data.SqlClient.SqlDataReader.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "找不到具有指定名稱的任何資料行。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.NextResult
  id: NextResult
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: NextResult()
  nameWithType: SqlDataReader.NextResult()
  fullName: System.Data.SqlClient.SqlDataReader.NextResult()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "讀取批次 TRANSACT-SQL 陳述式的結果時，請將資料讀取器前移至下一個結果。"
  remarks: "用來處理多個結果，可以藉由執行 TRANSACT-SQL 批次陳述式產生。       根據預設，資料讀取器上的第一個結果。"
  syntax:
    content: public override bool NextResult ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果有多個結果集;否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlDataReader.NextResult*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)
  id: NextResultAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: NextResultAsync(CancellationToken)
  nameWithType: SqlDataReader.NextResultAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.NextResultAsync(CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同步版本<xref:System.Data.SqlClient.SqlDataReader.NextResult*>，其中將資料讀取器前移至下一個結果，讀取批次的結果時[!INCLUDE[tsql](~/add/includes/tsql-md.md)]陳述式。</xref:System.Data.SqlClient.SqlDataReader.NextResult*>       取消語彙基元可以用來要求此作業會放棄命令逾時之前捨棄。  例外狀況將經由傳回的 Task 物件回報。"
  remarks: "如需有關非同步程式設計中[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]，請參閱[進行非同步程式設計](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public override System.Threading.Tasks.Task<bool> NextResultAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消指令。"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "表示非同步作業的工作。"
  overload: System.Data.SqlClient.SqlDataReader.NextResultAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "工作完成前相同的執行個體多次呼叫 NextResultAsync。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>指定連接字串中。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: '[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]執行命令文字時傳回錯誤。'
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.Read
  id: Read
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: Read()
  nameWithType: SqlDataReader.Read()
  fullName: System.Data.SqlClient.SqlDataReader.Read()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "往前推進<xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref>到下一筆記錄。"
  remarks: "預設位置<xref:System.Data.SqlClient.SqlDataReader>是第一個資料錄之前。</xref:System.Data.SqlClient.SqlDataReader> 因此，您必須呼叫讀取開始存取任何資料。       只有一個`SqlDataReader`每個相關聯<xref:System.Data.SqlClient.SqlConnection>可能開啟了一次，而且任何嘗試開啟另一個將會失敗，直到關閉第一個。</xref:System.Data.SqlClient.SqlConnection> 同樣地，雖然`SqlDataReader`正在使用中，相關聯`SqlConnection`正忙於處理直到您呼叫<xref:System.Data.SqlClient.SqlDataReader.Close%2A>.</xref:System.Data.SqlClient.SqlDataReader.Close%2A>"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, a <xref:System.Data.SqlClient.SqlCommand>, and a <xref:System.Data.SqlClient.SqlDataReader>. The example reads through the data, writing it out to the console window. The code then closes the <xref:System.Data.SqlClient.SqlDataReader>. The <xref:System.Data.SqlClient.SqlConnection> is closed automatically at the end of the `using` code block.  \n  \n [!code-cs[Classic WebData SqlDataReader.Read Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._26_1.cs)]\n [!code-vb[Classic WebData SqlDataReader.Read Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._26_1.vb)]"
  syntax:
    content: public override bool Read ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果有多個資料列。否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlDataReader.Read*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: '[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]執行命令文字時傳回錯誤。'
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)
  id: ReadAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: ReadAsync(CancellationToken)
  nameWithType: SqlDataReader.ReadAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.ReadAsync(CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同步版本<xref:System.Data.SqlClient.SqlDataReader.Read*>，哪一個進階功能<xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref>到下一筆記錄。</xref:System.Data.SqlClient.SqlDataReader.Read*>       取消語彙基元可以用來要求此作業會放棄命令逾時之前捨棄。 例外狀況將經由傳回的 Task 物件回報。"
  remarks: "如果`behavior`參數<xref:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync%2A>設`Default`，ReadAsync 傳回工作之前讀取整個資料列。</xref:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync%2A>       如需詳細資訊，包括程式碼範例，關於中非同步程式設計[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]，請參閱[進行非同步程式設計](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public override System.Threading.Tasks.Task<bool> ReadAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消指令。"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "表示非同步作業的工作。"
  overload: System.Data.SqlClient.SqlDataReader.ReadAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "工作完成前相同的執行個體多次呼叫 ReadAsync。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>指定連接字串中。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: '[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]執行命令文字時傳回錯誤。'
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.RecordsAffected
  id: RecordsAffected
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: RecordsAffected
  nameWithType: SqlDataReader.RecordsAffected
  fullName: System.Data.SqlClient.SqlDataReader.RecordsAffected
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得已變更、 插入或執行 TRANSACT-SQL 陳述式所刪除的資料列數目。"
  remarks: "直到所有資料列會讀取，並關閉<xref:System.Data.SqlClient.SqlDataReader>.</xref:System.Data.SqlClient.SqlDataReader> RecordsAffected 屬性未設定       這個屬性的值是累計的。 例如，如果兩筆記錄會在批次模式中，值插入`RecordsAffected`將兩個。       <xref:System.Data.SqlClient.SqlDataReader.IsClosed%2A>而且 RecordsAffected 之後，您可以呼叫的唯一屬性<xref:System.Data.SqlClient.SqlDataReader>已關閉。</xref:System.Data.SqlClient.SqlDataReader></xref:System.Data.SqlClient.SqlDataReader.IsClosed%2A>"
  syntax:
    content: public override int RecordsAffected { get; }
    return:
      type: System.Int32
      description: "資料列數目的變更、 插入或刪除。如果沒有資料列受到影響的 0 或陳述式失敗。與 SELECT 陳述式的-1。"
  overload: System.Data.SqlClient.SqlDataReader.RecordsAffected*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.System#Data#IDataRecord#GetData(System.Int32)
  id: System#Data#IDataRecord#GetData(System.Int32)
  isEii: true
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: System.Data.IDataRecord.GetData(Int32)
  nameWithType: SqlDataReader.System.Data.IDataRecord.GetData(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.System.Data.IDataRecord.GetData(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "傳回<xref href=&quot;System.Data.IDataReader&quot;></xref>所指定的資料行序數。"
  remarks: "這個成員是明確介面成員實作。 它可用時，才<xref:System.Data.SqlClient.SqlDataReader>執行個體轉換成<xref:System.IDataRecord>介面。</xref:System.IDataRecord> </xref:System.Data.SqlClient.SqlDataReader>"
  syntax:
    content: System.Data.IDataReader IDataRecord.GetData (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "資料行序數。"
    return:
      type: System.Data.IDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref>序數指定之資料行的執行個體。"
  overload: System.Data.SqlClient.SqlDataReader.System#Data#IDataRecord#GetData*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.VisibleFieldCount
  id: VisibleFieldCount
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: VisibleFieldCount
  nameWithType: SqlDataReader.VisibleFieldCount
  fullName: System.Data.SqlClient.SqlDataReader.VisibleFieldCount
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得的欄位數目<xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref>不隱藏的。"
  remarks: "這個值用來判斷中有多少欄位<xref:System.Data.SqlClient.SqlDataReader>可見。</xref:System.Data.SqlClient.SqlDataReader> 例如，部分的主索引鍵上的 SELECT 會傳回金鑰的其餘部分做為隱藏欄位。 隱藏的欄位永遠會附加在可見欄位。"
  syntax:
    content: public override int VisibleFieldCount { get; }
    return:
      type: System.Int32
      description: "沒有隱藏的欄位數目。"
  overload: System.Data.SqlClient.SqlDataReader.VisibleFieldCount*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbDataReader
  isExternal: false
  name: System.Data.Common.DbDataReader
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Data.SqlClient.SqlException
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlException
  nameWithType: SqlException
  fullName: System.Data.SqlClient.SqlException
- uid: System.Data.SqlClient.SqlDataReader.Close
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Close()
  nameWithType: SqlDataReader.Close()
  fullName: System.Data.SqlClient.SqlDataReader.Close()
- uid: System.Data.SqlClient.SqlDataReader.Connection
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Connection
  nameWithType: SqlDataReader.Connection
  fullName: System.Data.SqlClient.SqlDataReader.Connection
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlDataReader.Depth
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Depth
  nameWithType: SqlDataReader.Depth
  fullName: System.Data.SqlClient.SqlDataReader.Depth
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlDataReader.FieldCount
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: FieldCount
  nameWithType: SqlDataReader.FieldCount
  fullName: System.Data.SqlClient.SqlDataReader.FieldCount
- uid: System.Data.SqlClient.SqlDataReader.GetBoolean(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetBoolean(Int32)
  nameWithType: SqlDataReader.GetBoolean(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetBoolean(Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlDataReader.GetByte(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetByte(Int32)
  nameWithType: SqlDataReader.GetByte(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetByte(Int32)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetBytes(Int32,Int64,Byte[],Int32,Int32)
  nameWithType: SqlDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SqlClient.SqlDataReader.GetChar(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetChar(Int32)
  nameWithType: SqlDataReader.GetChar(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetChar(Int32)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetChars(Int32,Int64,Char[],Int32,Int32)
  nameWithType: SqlDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
- uid: System.Char[]
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SqlClient.SqlDataReader.GetDataTypeName(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDataTypeName(Int32)
  nameWithType: SqlDataReader.GetDataTypeName(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDataTypeName(Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlDataReader.GetDateTime(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDateTime(Int32)
  nameWithType: SqlDataReader.GetDateTime(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDateTime(Int32)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDateTimeOffset(Int32)
  nameWithType: SqlDataReader.GetDateTimeOffset(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(Int32)
- uid: System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.Data.SqlClient.SqlDataReader.GetDecimal(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDecimal(Int32)
  nameWithType: SqlDataReader.GetDecimal(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDecimal(Int32)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Data.SqlClient.SqlDataReader.GetDouble(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDouble(Int32)
  nameWithType: SqlDataReader.GetDouble(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDouble(Int32)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Data.SqlClient.SqlDataReader.GetEnumerator
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetEnumerator()
  nameWithType: SqlDataReader.GetEnumerator()
  fullName: System.Data.SqlClient.SqlDataReader.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Data.SqlClient.SqlDataReader.GetFieldType(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFieldType(Int32)
  nameWithType: SqlDataReader.GetFieldType(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetFieldType(Int32)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFieldValue(Int32)
  nameWithType: SqlDataReader.GetFieldValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetFieldValue(Int32)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.``0hreading.Cancellation``0oken)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFieldValueAsync(Int32,CancellationToken)
  nameWithType: SqlDataReader.GetFieldValueAsync(Int32,CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync(Int32,CancellationToken)
- uid: System.Threading.Tasks.Task{T}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<T>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Data.SqlClient.SqlDataReader.GetFloat(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFloat(Int32)
  nameWithType: SqlDataReader.GetFloat(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetFloat(Int32)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Data.SqlClient.SqlDataReader.GetGuid(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetGuid(Int32)
  nameWithType: SqlDataReader.GetGuid(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetGuid(Int32)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Data.SqlClient.SqlDataReader.GetInt16(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetInt16(Int32)
  nameWithType: SqlDataReader.GetInt16(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetInt16(Int32)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Data.SqlClient.SqlDataReader.GetInt32(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetInt32(Int32)
  nameWithType: SqlDataReader.GetInt32(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetInt32(Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetInt64(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetInt64(Int32)
  nameWithType: SqlDataReader.GetInt64(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetInt64(Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetName(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetName(Int32)
  nameWithType: SqlDataReader.GetName(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetName(Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetOrdinal(System.String)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetOrdinal(String)
  nameWithType: SqlDataReader.GetOrdinal(String)
  fullName: System.Data.SqlClient.SqlDataReader.GetOrdinal(String)
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetProviderSpecificFieldType(Int32)
  nameWithType: SqlDataReader.GetProviderSpecificFieldType(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetProviderSpecificValue(Int32)
  nameWithType: SqlDataReader.GetProviderSpecificValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(Int32)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(System.Object[])
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetProviderSpecificValues(Object[])
  nameWithType: SqlDataReader.GetProviderSpecificValues(Object[])
  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SqlClient.SqlDataReader.GetSchemaTable
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSchemaTable()
  nameWithType: SqlDataReader.GetSchemaTable()
  fullName: System.Data.SqlClient.SqlDataReader.GetSchemaTable()
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBinary(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlBinary(Int32)
  nameWithType: SqlDataReader.GetSqlBinary(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBinary(Int32)
- uid: System.Data.SqlTypes.SqlBinary
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlBinary
  nameWithType: SqlBinary
  fullName: System.Data.SqlTypes.SqlBinary
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBoolean(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlBoolean(Int32)
  nameWithType: SqlDataReader.GetSqlBoolean(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBoolean(Int32)
- uid: System.Data.SqlTypes.SqlBoolean
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlBoolean
  nameWithType: SqlBoolean
  fullName: System.Data.SqlTypes.SqlBoolean
- uid: System.Data.SqlClient.SqlDataReader.GetSqlByte(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlByte(Int32)
  nameWithType: SqlDataReader.GetSqlByte(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlByte(Int32)
- uid: System.Data.SqlTypes.SqlByte
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlByte
  nameWithType: SqlByte
  fullName: System.Data.SqlTypes.SqlByte
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBytes(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlBytes(Int32)
  nameWithType: SqlDataReader.GetSqlBytes(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBytes(Int32)
- uid: System.Data.SqlTypes.SqlBytes
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlBytes
  nameWithType: SqlBytes
  fullName: System.Data.SqlTypes.SqlBytes
- uid: System.Data.SqlClient.SqlDataReader.GetSqlChars(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlChars(Int32)
  nameWithType: SqlDataReader.GetSqlChars(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlChars(Int32)
- uid: System.Data.SqlTypes.SqlChars
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlChars
  nameWithType: SqlChars
  fullName: System.Data.SqlTypes.SqlChars
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDateTime(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlDateTime(Int32)
  nameWithType: SqlDataReader.GetSqlDateTime(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDateTime(Int32)
- uid: System.Data.SqlTypes.SqlDateTime
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlDateTime
  nameWithType: SqlDateTime
  fullName: System.Data.SqlTypes.SqlDateTime
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDecimal(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlDecimal(Int32)
  nameWithType: SqlDataReader.GetSqlDecimal(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDecimal(Int32)
- uid: System.Data.SqlTypes.SqlDecimal
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlDecimal
  nameWithType: SqlDecimal
  fullName: System.Data.SqlTypes.SqlDecimal
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDouble(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlDouble(Int32)
  nameWithType: SqlDataReader.GetSqlDouble(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDouble(Int32)
- uid: System.Data.SqlTypes.SqlDouble
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlDouble
  nameWithType: SqlDouble
  fullName: System.Data.SqlTypes.SqlDouble
- uid: System.Data.SqlClient.SqlDataReader.GetSqlGuid(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlGuid(Int32)
  nameWithType: SqlDataReader.GetSqlGuid(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlGuid(Int32)
- uid: System.Data.SqlTypes.SqlGuid
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlGuid
  nameWithType: SqlGuid
  fullName: System.Data.SqlTypes.SqlGuid
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt16(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlInt16(Int32)
  nameWithType: SqlDataReader.GetSqlInt16(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt16(Int32)
- uid: System.Data.SqlTypes.SqlInt16
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlInt16
  nameWithType: SqlInt16
  fullName: System.Data.SqlTypes.SqlInt16
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt32(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlInt32(Int32)
  nameWithType: SqlDataReader.GetSqlInt32(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt32(Int32)
- uid: System.Data.SqlTypes.SqlInt32
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlInt32
  nameWithType: SqlInt32
  fullName: System.Data.SqlTypes.SqlInt32
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt64(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlInt64(Int32)
  nameWithType: SqlDataReader.GetSqlInt64(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt64(Int32)
- uid: System.Data.SqlTypes.SqlInt64
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlInt64
  nameWithType: SqlInt64
  fullName: System.Data.SqlTypes.SqlInt64
- uid: System.Data.SqlClient.SqlDataReader.GetSqlMoney(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlMoney(Int32)
  nameWithType: SqlDataReader.GetSqlMoney(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlMoney(Int32)
- uid: System.Data.SqlTypes.SqlMoney
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlMoney
  nameWithType: SqlMoney
  fullName: System.Data.SqlTypes.SqlMoney
- uid: System.Data.SqlClient.SqlDataReader.GetSqlSingle(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlSingle(Int32)
  nameWithType: SqlDataReader.GetSqlSingle(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlSingle(Int32)
- uid: System.Data.SqlTypes.SqlSingle
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlSingle
  nameWithType: SqlSingle
  fullName: System.Data.SqlTypes.SqlSingle
- uid: System.Data.SqlClient.SqlDataReader.GetSqlString(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlString(Int32)
  nameWithType: SqlDataReader.GetSqlString(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlString(Int32)
- uid: System.Data.SqlTypes.SqlString
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlString
  nameWithType: SqlString
  fullName: System.Data.SqlTypes.SqlString
- uid: System.Data.SqlClient.SqlDataReader.GetSqlValue(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlValue(Int32)
  nameWithType: SqlDataReader.GetSqlValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlValue(Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetSqlValues(System.Object[])
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlValues(Object[])
  nameWithType: SqlDataReader.GetSqlValues(Object[])
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlValues(Object[])
- uid: System.Data.SqlClient.SqlDataReader.GetSqlXml(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlXml(Int32)
  nameWithType: SqlDataReader.GetSqlXml(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlXml(Int32)
- uid: System.Data.SqlTypes.SqlXml
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlXml
  nameWithType: SqlXml
  fullName: System.Data.SqlTypes.SqlXml
- uid: System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetStream(Int32)
  nameWithType: SqlDataReader.GetStream(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetStream(Int32)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Data.SqlClient.SqlDataReader.GetString(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetString(Int32)
  nameWithType: SqlDataReader.GetString(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetString(Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetTextReader(Int32)
  nameWithType: SqlDataReader.GetTextReader(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetTextReader(Int32)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Data.SqlClient.SqlDataReader.GetTimeSpan(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetTimeSpan(Int32)
  nameWithType: SqlDataReader.GetTimeSpan(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetTimeSpan(Int32)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetValue(Int32)
  nameWithType: SqlDataReader.GetValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetValue(Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetValues(System.Object[])
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetValues(Object[])
  nameWithType: SqlDataReader.GetValues(Object[])
  fullName: System.Data.SqlClient.SqlDataReader.GetValues(Object[])
- uid: System.Data.SqlClient.SqlDataReader.GetXmlReader(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetXmlReader(Int32)
  nameWithType: SqlDataReader.GetXmlReader(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetXmlReader(Int32)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Data.SqlClient.SqlDataReader.HasRows
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: HasRows
  nameWithType: SqlDataReader.HasRows
  fullName: System.Data.SqlClient.SqlDataReader.HasRows
- uid: System.Data.SqlClient.SqlDataReader.IsClosed
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsClosed
  nameWithType: SqlDataReader.IsClosed
  fullName: System.Data.SqlClient.SqlDataReader.IsClosed
- uid: System.Data.SqlClient.SqlDataReader.IsCommandBehavior(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsCommandBehavior(CommandBehavior)
  nameWithType: SqlDataReader.IsCommandBehavior(CommandBehavior)
  fullName: System.Data.SqlClient.SqlDataReader.IsCommandBehavior(CommandBehavior)
- uid: System.Data.CommandBehavior
  parent: System.Data
  isExternal: false
  name: CommandBehavior
  nameWithType: CommandBehavior
  fullName: System.Data.CommandBehavior
- uid: System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsDBNull(Int32)
  nameWithType: SqlDataReader.IsDBNull(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.IsDBNull(Int32)
- uid: System.Data.SqlClient.SqlDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsDBNullAsync(Int32,CancellationToken)
  nameWithType: SqlDataReader.IsDBNullAsync(Int32,CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.IsDBNullAsync(Int32,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Boolean>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.SqlClient.SqlDataReader.Item(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Item(Int32)
  nameWithType: SqlDataReader.Item(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.Item(Int32)
- uid: System.Data.SqlClient.SqlDataReader.Item(System.String)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Item(String)
  nameWithType: SqlDataReader.Item(String)
  fullName: System.Data.SqlClient.SqlDataReader.Item(String)
- uid: System.Data.SqlClient.SqlDataReader.NextResult
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: NextResult()
  nameWithType: SqlDataReader.NextResult()
  fullName: System.Data.SqlClient.SqlDataReader.NextResult()
- uid: System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: NextResultAsync(CancellationToken)
  nameWithType: SqlDataReader.NextResultAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.NextResultAsync(CancellationToken)
- uid: System.Data.SqlClient.SqlDataReader.Read
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Read()
  nameWithType: SqlDataReader.Read()
  fullName: System.Data.SqlClient.SqlDataReader.Read()
- uid: System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: ReadAsync(CancellationToken)
  nameWithType: SqlDataReader.ReadAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.ReadAsync(CancellationToken)
- uid: System.Data.SqlClient.SqlDataReader.RecordsAffected
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: RecordsAffected
  nameWithType: SqlDataReader.RecordsAffected
  fullName: System.Data.SqlClient.SqlDataReader.RecordsAffected
- uid: System.Data.SqlClient.SqlDataReader.System#Data#IDataRecord#GetData(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: System.Data.IDataRecord.GetData(Int32)
  nameWithType: SqlDataReader.System.Data.IDataRecord.GetData(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.System.Data.IDataRecord.GetData(Int32)
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.SqlClient.SqlDataReader.VisibleFieldCount
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: VisibleFieldCount
  nameWithType: SqlDataReader.VisibleFieldCount
  fullName: System.Data.SqlClient.SqlDataReader.VisibleFieldCount
- uid: System.Data.SqlClient.SqlDataReader.Close*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Close
  nameWithType: SqlDataReader.Close
- uid: System.Data.SqlClient.SqlDataReader.Connection*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Connection
  nameWithType: SqlDataReader.Connection
- uid: System.Data.SqlClient.SqlDataReader.Depth*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Depth
  nameWithType: SqlDataReader.Depth
- uid: System.Data.SqlClient.SqlDataReader.FieldCount*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: FieldCount
  nameWithType: SqlDataReader.FieldCount
- uid: System.Data.SqlClient.SqlDataReader.GetBoolean*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetBoolean
  nameWithType: SqlDataReader.GetBoolean
- uid: System.Data.SqlClient.SqlDataReader.GetByte*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetByte
  nameWithType: SqlDataReader.GetByte
- uid: System.Data.SqlClient.SqlDataReader.GetBytes*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetBytes
  nameWithType: SqlDataReader.GetBytes
- uid: System.Data.SqlClient.SqlDataReader.GetChar*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetChar
  nameWithType: SqlDataReader.GetChar
- uid: System.Data.SqlClient.SqlDataReader.GetChars*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetChars
  nameWithType: SqlDataReader.GetChars
- uid: System.Data.SqlClient.SqlDataReader.GetDataTypeName*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDataTypeName
  nameWithType: SqlDataReader.GetDataTypeName
- uid: System.Data.SqlClient.SqlDataReader.GetDateTime*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDateTime
  nameWithType: SqlDataReader.GetDateTime
- uid: System.Data.SqlClient.SqlDataReader.GetDateTimeOffset*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDateTimeOffset
  nameWithType: SqlDataReader.GetDateTimeOffset
- uid: System.Data.SqlClient.SqlDataReader.GetDecimal*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDecimal
  nameWithType: SqlDataReader.GetDecimal
- uid: System.Data.SqlClient.SqlDataReader.GetDouble*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDouble
  nameWithType: SqlDataReader.GetDouble
- uid: System.Data.SqlClient.SqlDataReader.GetEnumerator*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetEnumerator
  nameWithType: SqlDataReader.GetEnumerator
- uid: System.Data.SqlClient.SqlDataReader.GetFieldType*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFieldType
  nameWithType: SqlDataReader.GetFieldType
- uid: System.Data.SqlClient.SqlDataReader.GetFieldValue<T>*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFieldValue<T>
  nameWithType: SqlDataReader.GetFieldValue<T>
- uid: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync<T>*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFieldValueAsync<T>
  nameWithType: SqlDataReader.GetFieldValueAsync<T>
- uid: System.Data.SqlClient.SqlDataReader.GetFloat*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFloat
  nameWithType: SqlDataReader.GetFloat
- uid: System.Data.SqlClient.SqlDataReader.GetGuid*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetGuid
  nameWithType: SqlDataReader.GetGuid
- uid: System.Data.SqlClient.SqlDataReader.GetInt16*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetInt16
  nameWithType: SqlDataReader.GetInt16
- uid: System.Data.SqlClient.SqlDataReader.GetInt32*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetInt32
  nameWithType: SqlDataReader.GetInt32
- uid: System.Data.SqlClient.SqlDataReader.GetInt64*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetInt64
  nameWithType: SqlDataReader.GetInt64
- uid: System.Data.SqlClient.SqlDataReader.GetName*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetName
  nameWithType: SqlDataReader.GetName
- uid: System.Data.SqlClient.SqlDataReader.GetOrdinal*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetOrdinal
  nameWithType: SqlDataReader.GetOrdinal
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetProviderSpecificFieldType
  nameWithType: SqlDataReader.GetProviderSpecificFieldType
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetProviderSpecificValue
  nameWithType: SqlDataReader.GetProviderSpecificValue
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetProviderSpecificValues
  nameWithType: SqlDataReader.GetProviderSpecificValues
- uid: System.Data.SqlClient.SqlDataReader.GetSchemaTable*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSchemaTable
  nameWithType: SqlDataReader.GetSchemaTable
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBinary*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlBinary
  nameWithType: SqlDataReader.GetSqlBinary
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBoolean*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlBoolean
  nameWithType: SqlDataReader.GetSqlBoolean
- uid: System.Data.SqlClient.SqlDataReader.GetSqlByte*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlByte
  nameWithType: SqlDataReader.GetSqlByte
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBytes*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlBytes
  nameWithType: SqlDataReader.GetSqlBytes
- uid: System.Data.SqlClient.SqlDataReader.GetSqlChars*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlChars
  nameWithType: SqlDataReader.GetSqlChars
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDateTime*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlDateTime
  nameWithType: SqlDataReader.GetSqlDateTime
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDecimal*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlDecimal
  nameWithType: SqlDataReader.GetSqlDecimal
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDouble*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlDouble
  nameWithType: SqlDataReader.GetSqlDouble
- uid: System.Data.SqlClient.SqlDataReader.GetSqlGuid*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlGuid
  nameWithType: SqlDataReader.GetSqlGuid
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt16*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlInt16
  nameWithType: SqlDataReader.GetSqlInt16
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt32*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlInt32
  nameWithType: SqlDataReader.GetSqlInt32
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt64*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlInt64
  nameWithType: SqlDataReader.GetSqlInt64
- uid: System.Data.SqlClient.SqlDataReader.GetSqlMoney*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlMoney
  nameWithType: SqlDataReader.GetSqlMoney
- uid: System.Data.SqlClient.SqlDataReader.GetSqlSingle*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlSingle
  nameWithType: SqlDataReader.GetSqlSingle
- uid: System.Data.SqlClient.SqlDataReader.GetSqlString*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlString
  nameWithType: SqlDataReader.GetSqlString
- uid: System.Data.SqlClient.SqlDataReader.GetSqlValue*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlValue
  nameWithType: SqlDataReader.GetSqlValue
- uid: System.Data.SqlClient.SqlDataReader.GetSqlValues*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlValues
  nameWithType: SqlDataReader.GetSqlValues
- uid: System.Data.SqlClient.SqlDataReader.GetSqlXml*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlXml
  nameWithType: SqlDataReader.GetSqlXml
- uid: System.Data.SqlClient.SqlDataReader.GetStream*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetStream
  nameWithType: SqlDataReader.GetStream
- uid: System.Data.SqlClient.SqlDataReader.GetString*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetString
  nameWithType: SqlDataReader.GetString
- uid: System.Data.SqlClient.SqlDataReader.GetTextReader*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetTextReader
  nameWithType: SqlDataReader.GetTextReader
- uid: System.Data.SqlClient.SqlDataReader.GetTimeSpan*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetTimeSpan
  nameWithType: SqlDataReader.GetTimeSpan
- uid: System.Data.SqlClient.SqlDataReader.GetValue*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetValue
  nameWithType: SqlDataReader.GetValue
- uid: System.Data.SqlClient.SqlDataReader.GetValues*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetValues
  nameWithType: SqlDataReader.GetValues
- uid: System.Data.SqlClient.SqlDataReader.GetXmlReader*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetXmlReader
  nameWithType: SqlDataReader.GetXmlReader
- uid: System.Data.SqlClient.SqlDataReader.HasRows*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: HasRows
  nameWithType: SqlDataReader.HasRows
- uid: System.Data.SqlClient.SqlDataReader.IsClosed*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsClosed
  nameWithType: SqlDataReader.IsClosed
- uid: System.Data.SqlClient.SqlDataReader.IsCommandBehavior*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsCommandBehavior
  nameWithType: SqlDataReader.IsCommandBehavior
- uid: System.Data.SqlClient.SqlDataReader.IsDBNull*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsDBNull
  nameWithType: SqlDataReader.IsDBNull
- uid: System.Data.SqlClient.SqlDataReader.IsDBNullAsync*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsDBNullAsync
  nameWithType: SqlDataReader.IsDBNullAsync
- uid: System.Data.SqlClient.SqlDataReader.Item*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Item
  nameWithType: SqlDataReader.Item
- uid: System.Data.SqlClient.SqlDataReader.NextResult*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: NextResult
  nameWithType: SqlDataReader.NextResult
- uid: System.Data.SqlClient.SqlDataReader.NextResultAsync*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: NextResultAsync
  nameWithType: SqlDataReader.NextResultAsync
- uid: System.Data.SqlClient.SqlDataReader.Read*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Read
  nameWithType: SqlDataReader.Read
- uid: System.Data.SqlClient.SqlDataReader.ReadAsync*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: ReadAsync
  nameWithType: SqlDataReader.ReadAsync
- uid: System.Data.SqlClient.SqlDataReader.RecordsAffected*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: RecordsAffected
  nameWithType: SqlDataReader.RecordsAffected
- uid: System.Data.SqlClient.SqlDataReader.System#Data#IDataRecord#GetData*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: System.Data.IDataRecord.GetData
  nameWithType: SqlDataReader.System.Data.IDataRecord.GetData
- uid: System.Data.SqlClient.SqlDataReader.VisibleFieldCount*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: VisibleFieldCount
  nameWithType: SqlDataReader.VisibleFieldCount
