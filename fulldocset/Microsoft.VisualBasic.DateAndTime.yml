### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.DateAndTime
  id: DateAndTime
  children:
  - Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)
  - Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)
  - Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  - Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  - Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  - Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  - Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)
  - Microsoft.VisualBasic.DateAndTime.DateString
  - Microsoft.VisualBasic.DateAndTime.DateValue(System.String)
  - Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)
  - Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)
  - Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)
  - Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)
  - Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)
  - Microsoft.VisualBasic.DateAndTime.Now
  - Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)
  - Microsoft.VisualBasic.DateAndTime.TimeOfDay
  - Microsoft.VisualBasic.DateAndTime.Timer
  - Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)
  - Microsoft.VisualBasic.DateAndTime.TimeString
  - Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)
  - Microsoft.VisualBasic.DateAndTime.Today
  - Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)
  - Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)
  - Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)
  langs:
  - csharp
  name: DateAndTime
  nameWithType: DateAndTime
  fullName: Microsoft.VisualBasic.DateAndTime
  type: Class
  summary: "<xref uid=&quot;langword_csharp_DateAndTime&quot; name=&quot;DateAndTime&quot; href=&quot;&quot;> </xref>模組包含的程序和日期和時間運算中使用的屬性。"
  remarks: "這個模組支援的 Visual Basic 語言關鍵字和取得目前的日期或時間、 執行日期計算傳回日期或時間、 日期或時間，設定或的持續期間的處理程序的執行階段程式庫成員。"
  example:
  - "This example uses the `Today` property to return the current system date.  \n  \n```  \nDim thisDate As Date  \nthisDate = Today   \n```"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class DateAndTime
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)
  id: DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DateAdd(DateInterval,Double,DateTime)
  nameWithType: DateAndTime.DateAdd(DateInterval,Double,DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.DateAdd(DateInterval,Double,DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，其中包含已新增指定的時間間隔的日期和時間值。"
  remarks: "您可以使用`DateAdd`函式來加入或減去指定的時間間隔開始日期。 例如，您可以計算從目前或前的 45 分鐘的時間現在的 30 天的日期。       若要加上天數來`DateValue`，您可以使用`DateInterval.Day`， `DateInterval.DayOfYear`，或`DateInterval.Weekday`。 這些會被視為對等項目因為`DayOfYear`和`Weekday`不是有意義的時間間隔。       `DateAdd`函式永遠不會傳回無效的日期。 如有必要，產生日期的日期部分會向下調整為當月最後一天產生結果的年。 下列範例會將一個月至年 1 月 31 日︰```vb#   Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)   ```在此範例中，`DateAdd`傳回`#2/28/1995#`，而非`#2/31/1995#`。 如果`DateValue`是`#1/31/1996#`，它會傳回`#2/29/1996#`因為 1996年是否為閏年。      > [!NOTE]  >   `DateAdd`會使用目前的行事曆設定從<xref:System.Globalization.CultureInfo.CurrentCulture%2A>屬性<xref:System.Globalization.CultureInfo>類別<xref:System.Globalization>命名空間。</xref:System.Globalization> </xref:System.Globalization.CultureInfo> </xref:System.Globalization.CultureInfo.CurrentCulture%2A> 預設值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值取決於**控制台**設定。</xref:System.Globalization.CultureInfo.CurrentCulture%2A>       因為每個`Date`值會受到<xref:System.DateTime>結構，其方法提供您加入的時間間隔中的其他選項。</xref:System.DateTime> 例如，您可以在其中加入小數的天數，為四捨五入到最接近的毫秒，`Date`變數，如下所示︰ ```vb#   Dim NextTime As Date = Now        &quot; Current date and time.   NextTime = NextTime.AddDays(3.4)  &quot; Increment by 3 2/5 days.   ``` `Interval`引數可以有下列設定的其中一個。      |列舉值 |字串 |若要加入的時間間隔單位 |  |-----------------------|------------|----------------------------------|  |`DateInterval.Day`|d|一天。截斷為整數值 |  |`DateInterval.DayOfYear`|y|一天。截斷為整數值 |  |`DateInterval.Hour`|h|小時。四捨五入為最接近的毫秒數 |  |`DateInterval.Minute`|n|分鐘;四捨五入為最接近的毫秒數 |  |`DateInterval.Month`|m|月份;截斷為整數值 |  |`DateInterval.Quarter`|q|每季;截斷為整數值 |  |`DateInterval.Second`|s|第二個。四捨五入為最接近的毫秒數 |  |`DateInterval.Weekday`|w|一天。截斷為整數值 |  |`DateInterval.WeekOfYear`|ww|一週。截斷為整數值 |  |`DateInterval.Year`|yyyy|年份，截斷為整數值 |"
  example:
  - "This example takes a date and, using the `DateAdd` function, displays a corresponding date a specified number of months in the future.  \n  \n [!code-vb[VbVbalrFunctions#25](~/add/codesnippet/visualbasic/1a306149-706d-46fd-9b1a-_1.vb)]"
  syntax:
    content: public static DateTime DateAdd (Microsoft.VisualBasic.DateInterval Interval, double Number, DateTime DateValue);
    parameters:
    - id: Interval
      type: Microsoft.VisualBasic.DateInterval
      description: "必要。 <xref uid=&quot;langword_csharp_DateInterval&quot; name=&quot;DateInterval&quot; href=&quot;&quot;></xref>列舉值或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式，表示您想要加入的時間間隔。"
    - id: Number
      type: System.Double
      description: "必要。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>. 浮點運算式，表示您想要加入的間隔數。 `Number`可以是正數 （取得將來的日期/時間值） 或負數 （取得過去的日期/時間值）。 它可以包含小數部分時`Interval`指定小時、 分鐘或秒數。 其他值`Interval`、 任何小數部份`Number`會被忽略。"
    - id: DateValue
      type: System.DateTime
      description: "必要。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>. 代表的日期和時間的間隔是可加入運算式。 `DateValue`本身不會變更呼叫程式中。"
    return:
      type: System.DateTime
      description: "傳回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，其中包含已新增指定的時間間隔的日期和時間值。"
  overload: Microsoft.VisualBasic.DateAndTime.DateAdd*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>DateValue</code>不是可強迫<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Interval</code>不正確。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "計算的日期年 1 月 1 年的 1 日或更晚年 12 月 31 日 23:59:59 之間的 00:00:00 之前為 9999。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)
  id: DateAdd(System.String,System.Double,System.Object)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DateAdd(String,Double,Object)
  nameWithType: DateAndTime.DateAdd(String,Double,Object)
  fullName: Microsoft.VisualBasic.DateAndTime.DateAdd(String,Double,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，其中包含已新增指定的時間間隔的日期和時間值。"
  remarks: "您可以使用`DateAdd`函式來加入或減去指定的時間間隔開始日期。 例如，您可以計算從目前或前的 45 分鐘的時間現在的 30 天的日期。       若要加上天數來`DateValue`，您可以使用`DateInterval.Day`， `DateInterval.DayOfYear`，或`DateInterval.Weekday`。 這些會被視為對等項目因為`DayOfYear`和`Weekday`不是有意義的時間間隔。       `DateAdd`函式永遠不會傳回無效的日期。 如有必要，產生日期的日期部分會向下調整為當月最後一天產生結果的年。 下列範例會將一個月至年 1 月 31 日︰```vb#   Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)   ```在此範例中，`DateAdd`傳回`#2/28/1995#`，而非`#2/31/1995#`。 如果`DateValue`是`#1/31/1996#`，它會傳回`#2/29/1996#`因為 1996年是否為閏年。      > [!NOTE]  >   `DateAdd`會使用目前的行事曆設定從<xref:System.Globalization.CultureInfo.CurrentCulture%2A>屬性<xref:System.Globalization.CultureInfo>類別<xref:System.Globalization>命名空間。</xref:System.Globalization> </xref:System.Globalization.CultureInfo> </xref:System.Globalization.CultureInfo.CurrentCulture%2A> 預設值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值取決於**控制台**設定。</xref:System.Globalization.CultureInfo.CurrentCulture%2A>       因為每個`Date`值會受到<xref:System.DateTime>結構，其方法提供您加入的時間間隔中的其他選項。</xref:System.DateTime> 例如，您可以在其中加入小數的天數，為四捨五入到最接近的毫秒，`Date`變數，如下所示︰ ```vb#   Dim NextTime As Date = Now        &quot; Current date and time.   NextTime = NextTime.AddDays(3.4)  &quot; Increment by 3 2/5 days.   ``` `Interval`引數可以有下列設定的其中一個。      |列舉值 |字串 |若要加入的時間間隔單位 |  |-----------------------|------------|----------------------------------|  |`DateInterval.Day`|d|一天。截斷為整數值 |  |`DateInterval.DayOfYear`|y|一天。截斷為整數值 |  |`DateInterval.Hour`|h|小時。四捨五入為最接近的毫秒數 |  |`DateInterval.Minute`|n|分鐘;四捨五入為最接近的毫秒數 |  |`DateInterval.Month`|m|月份;截斷為整數值 |  |`DateInterval.Quarter`|q|每季;截斷為整數值 |  |`DateInterval.Second`|s|第二個。四捨五入為最接近的毫秒數 |  |`DateInterval.Weekday`|w|一天。截斷為整數值 |  |`DateInterval.WeekOfYear`|ww|一週。截斷為整數值 |  |`DateInterval.Year`|yyyy|年份，截斷為整數值 |"
  example:
  - "This example takes a date and, using the `DateAdd` function, displays a corresponding date a specified number of months in the future.  \n  \n [!code-vb[VbVbalrFunctions#25](~/add/codesnippet/visualbasic/8ee426fa-d573-45a5-a0f5-_1.vb)]"
  syntax:
    content: public static DateTime DateAdd (string Interval, double Number, object DateValue);
    parameters:
    - id: Interval
      type: System.String
      description: "必要。 <xref uid=&quot;langword_csharp_DateInterval&quot; name=&quot;DateInterval&quot; href=&quot;&quot;></xref>列舉值或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式，表示您想要加入的時間間隔。"
    - id: Number
      type: System.Double
      description: "必要。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>. 浮點運算式，表示您想要加入的間隔數。 `Number`可以是正數 （取得將來的日期/時間值） 或負數 （取得過去的日期/時間值）。 它可以包含小數部分時`Interval`指定小時、 分鐘或秒數。 其他值`Interval`、 任何小數部份`Number`會被忽略。"
    - id: DateValue
      type: System.Object
      description: "必要。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>. 代表的日期和時間的間隔是可加入運算式。 `DateValue`本身不會變更呼叫程式中。"
    return:
      type: System.DateTime
      description: "傳回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，其中包含已新增指定的時間間隔的日期和時間值。"
  overload: Microsoft.VisualBasic.DateAndTime.DateAdd*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>DateValue</code>不是可強迫<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Interval</code>不正確。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "計算的日期年 1 月 1 年的 1 日或更晚年 12 月 31 日 23:59:59 之間的 00:00:00 之前為 9999。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  id: DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DateDiff(DateInterval,DateTime,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DateDiff(DateInterval,DateTime,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DateDiff(DateInterval,DateTime,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>值，指定兩個時間間隔數<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值。"
  remarks: "您可以使用`DateDiff`函式來判斷兩個日期/時間值之間有多少個指定的時間間隔。 例如，您可能會使用`DateDiff`來計算兩個日期或今天和年度最後一天之間的週數之間的天數。      ## 行為-**參數的處理方式。** `DateDiff`值減去`Date1`值`Date2`產生差異。 呼叫端程式中變更這兩個值。      -**傳回值。** 因為`Date1`和`Date2`屬於`Date`資料型別，保存日期和時間值精確度為 100 奈秒刻度系統計時器。 不過，`DateDiff`一律會傳回做為時間間隔數`Long`值。           如果`Date1`代表更新的日期和時間會比`Date2`，`DateDiff`傳回負數。      -**每隔天。** 如果`Interval`設`DateInterval.DayOfYear`，它會被視為相同`DateInterval.Day`，因為`DayOfYear`不是時間間隔的有意義的單元。      -**每隔週。** 如果`Interval`設`DateInterval.WeekOfYear`，傳回值表示包含的一週的第一天之間的週數`Date1`和包含的一週的第一天`Date2`。 下列範例示範如何從不同的結果會產生。 `DateInterval.Weekday`。           [!code-vb[VbVbalrFunctions #60](~/add/codesnippet/visualbasic/e9b06095-1039-4b68-96e4-_1.vb) ]在上述範例中，`DateDiff`傳回 0 到`wD`因為兩個日期之間的差異是不超過 7 天，但它會傳回 1 到`wY`因為七天之間差異的第一週天數。      -**較大的間隔。** 如果`Interval`設`DateInterval.Year`，傳回值會計算完全從的年份部分`Date1`和`Date2`。 同樣地，傳回的值為`DateInterval.Month`計算年和月的部分引數，以及完全從`DateInterval.Quarter`從包含兩個日期的季數。           例如，當比較年 12 月 31 日的年，1 年 1 月`DateDiff`會針對傳回 1 `DateInterval.Year`， `DateInterval.Quarter`，或`DateInterval.Month`，即使已耗用最多只能有一天。           文化特性，例如日文具有多個紀元，`DateDiff`方法不會傳回年份差異，如果差異跨越兩個或多個紀元。 相反地，您可以計算所傳回的值之間的差異<xref:System.DateTime.Year%2A>屬性，如下列範例所示︰ `date2.Year - date1.Year`。</xref:System.DateTime.Year%2A>      -**其他間隔。** 因為每個`Date`值會受到<xref:System.DateTime>結構，其方法讓您尋找時間間隔中的其他選項。</xref:System.DateTime> 例如，您可以使用`Subtract`任一其多載形式的方法︰<xref:System.DateTime.Subtract%2A?displayProperty=fullName>減去<xref:System.TimeSpan>從`Date`變數傳回另一個`Date`值，和<xref:System.DateTime.Subtract%2A?displayProperty=fullName>減去`Date`傳回<xref:System.TimeSpan>.</xref:System.TimeSpan>值</xref:System.DateTime.Subtract%2A?displayProperty=fullName></xref:System.TimeSpan></xref:System.DateTime.Subtract%2A?displayProperty=fullName> 您可以找出所需，如下列範例所示的毫秒數的處理序的時間。           [!code-vb[VbVbalrFunctions&#61;](~/add/codesnippet/visualbasic/e9b06095-1039-4b68-96e4-_2.vb) ] `Interval`引數可以有下列設定的其中一個。      |列舉值 |字串值 |時差單位 |  |-----------------------|------------------|-----------------------------|  |`DateInterval.Day`|&quot;d&quot;|日 |  |`DateInterval.DayOfYear`|&quot;y&quot;|日 |  |`DateInterval.Hour`|&quot;h&quot;|小時 |  |`DateInterval.Minute`|&quot;n&quot;|分鐘 |  |`DateInterval.Month`|&quot;m&quot;|月 |  |`DateInterval.Quarter`|&quot;問:&quot;|季 |  |`DateInterval.Second`|&quot;s&quot;|第二個 |  |`DateInterval.Weekday`|&quot;w&quot;|週 |  |`DateInterval.WeekOfYear`|&quot;ww&quot;|日曆週 |  |`DateInterval.Year`|&quot;yyyy&quot;|年份 |      `DayOfWeek`引數可以有下列設定的其中一個。      |列舉值 |值 |描述 |  |-----------------------|-----------|-----------------|  |`FirstDayOfWeek.System`|0|系統設定中指定的週第一天 |  |`FirstDayOfWeek.Sunday`|1|星期日 （預設值） |  |`FirstDayOfWeek.Monday`|2|星期一 （符合 iso 8601 標準，區段 3.17） |  |`FirstDayOfWeek.Tuesday`|3|星期二 |  |`FirstDayOfWeek.Wednesday`|4|星期三 |  |`FirstDayOfWeek.Thursday`|5|星期四 |  |`FirstDayOfWeek.Friday`|6|星期五 |  |`FirstDayOfWeek.Saturday`|7|星期六 |      `WeekOfYear`引數可以有下列設定的其中一個。      |列舉值 |值 |描述 |  |-----------------------|-----------|-----------------|  |`FirstWeekOfYear.System`|0|系統設定中指定的年中的第一週 |  |`FirstWeekOfYear.Jan1`|1|一週發生在哪個年 1 月 1 （預設值） |  |`FirstWeekOfYear.FirstFourDays`|2|在新的一年 （符合 ISO 8601 標準，節 3.17） 中有至少四天的每週 |  |`FirstWeekOfYear.FirstFullWeek`|3|在新的一年中的第一個星期 |"
  example:
  - "This example uses the `DateDiff` function to display the number of days between a given date and today.  \n  \n [!code-vb[VbVbalrFunctions#26](~/add/codesnippet/visualbasic/e9b06095-1039-4b68-96e4-_3.vb)]"
  syntax:
    content: public static long DateDiff (Microsoft.VisualBasic.DateInterval Interval, DateTime Date1, DateTime Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);
    parameters:
    - id: Interval
      type: Microsoft.VisualBasic.DateInterval
      description: "必要。 <xref uid=&quot;langword_csharp_DateInterval&quot; name=&quot;DateInterval&quot; href=&quot;&quot;></xref>列舉值或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式，表示您想要使用做為之間差異的單位的時間間隔`Date1`和`Date2`。"
    - id: Date1
      type: System.DateTime
      description: "必要。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>. 您想要在計算中使用第一個日期/時間值。"
    - id: Date2
      type: System.DateTime
      description: "必要。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>. 您要用來計算第二個日期/時間值。"
    - id: DayOfWeek
      type: Microsoft.VisualBasic.FirstDayOfWeek
      description: "選擇性。 值，從選擇<xref uid=&quot;langword_csharp_FirstDayOfWeek&quot; name=&quot;FirstDayOfWeek&quot; href=&quot;&quot;></xref>列舉，指定一週的第一天。 如果未指定， <xref uid=&quot;langword_csharp_FirstDayOfWeek.Sunday&quot; name=&quot;FirstDayOfWeek.Sunday&quot; href=&quot;&quot;> </xref>用。"
    - id: WeekOfYear
      type: Microsoft.VisualBasic.FirstWeekOfYear
      description: "選擇性。 值，從選擇<xref uid=&quot;langword_csharp_FirstWeekOfYear&quot; name=&quot;FirstWeekOfYear&quot; href=&quot;&quot;></xref>列舉，指定年份的第一週。 如果未指定， <xref uid=&quot;langword_csharp_FirstWeekOfYear.Jan1&quot; name=&quot;FirstWeekOfYear.Jan1&quot; href=&quot;&quot;> </xref>用。"
    return:
      type: System.Int64
      description: "傳回<xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>值，指定兩個時間間隔數<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值。"
  overload: Microsoft.VisualBasic.DateAndTime.DateDiff*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Date1</code><code>Date2</code>，或<code>DayofWeek</code>超出範圍。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>Date1</code>或<code>Date2</code>的類型無效。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  id: DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DateDiff(String,Object,Object,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DateDiff(String,Object,Object,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DateDiff(String,Object,Object,FirstDayOfWeek,FirstWeekOfYear)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>值，指定兩個時間間隔數<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值。"
  remarks: "您可以使用`DateDiff`函式來判斷兩個日期/時間值之間有多少個指定的時間間隔。 例如，您可能會使用`DateDiff`來計算兩個日期或今天和年度最後一天之間的週數之間的天數。      ## 行為-**參數的處理方式。** `DateDiff`值減去`Date1`值`Date2`產生差異。 呼叫端程式中變更這兩個值。      -**傳回值。** 因為`Date1`和`Date2`屬於`Date`資料型別，保存日期和時間值精確度為 100 奈秒刻度系統計時器。 不過，`DateDiff`一律會傳回做為時間間隔數`Long`值。           如果`Date1`代表更新的日期和時間會比`Date2`，`DateDiff`傳回負數。      -**每隔天。** 如果`Interval`設`DateInterval.DayOfYear`，它會被視為相同`DateInterval.Day`，因為`DayOfYear`不是時間間隔的有意義的單元。      -**每隔週。** 如果`Interval`設`DateInterval.WeekOfYear`，傳回值表示包含的一週的第一天之間的週數`Date1`和包含的一週的第一天`Date2`。 下列範例示範如何從不同的結果會產生。 `DateInterval.Weekday`。           [!code-vb[VbVbalrFunctions #60](~/add/codesnippet/visualbasic/46a9da0a-21fc-441c-a532-_1.vb) ]在上述範例中，`DateDiff`傳回 0 到`wD`因為兩個日期之間的差異是不超過 7 天，但它會傳回 1 到`wY`因為七天之間差異的第一週天數。      -**較大的間隔。** 如果`Interval`設`DateInterval.Year`，傳回值會計算完全從的年份部分`Date1`和`Date2`。 同樣地，傳回的值為`DateInterval.Month`計算年和月的部分引數，以及完全從`DateInterval.Quarter`從包含兩個日期的季數。           例如，當比較年 12 月 31 日的年，1 年 1 月`DateDiff`會針對傳回 1 `DateInterval.Year`， `DateInterval.Quarter`，或`DateInterval.Month`，即使已耗用最多只能有一天。           文化特性，例如日文具有多個紀元，`DateDiff`方法不會傳回年份差異，如果差異跨越兩個或多個紀元。 相反地，您可以計算所傳回的值之間的差異<xref:System.DateTime.Year%2A>屬性，如下列範例所示︰ `date2.Year - date1.Year`。</xref:System.DateTime.Year%2A>      -**其他間隔。** 因為每個`Date`值會受到<xref:System.DateTime>結構，其方法讓您尋找時間間隔中的其他選項。</xref:System.DateTime> 例如，您可以使用`Subtract`任一其多載形式的方法︰<xref:System.DateTime.Subtract%2A?displayProperty=fullName>減去<xref:System.TimeSpan>從`Date`變數傳回另一個`Date`值，和<xref:System.DateTime.Subtract%2A?displayProperty=fullName>減去`Date`傳回<xref:System.TimeSpan>.</xref:System.TimeSpan>值</xref:System.DateTime.Subtract%2A?displayProperty=fullName></xref:System.TimeSpan></xref:System.DateTime.Subtract%2A?displayProperty=fullName> 您可以找出所需，如下列範例所示的毫秒數的處理序的時間。           [!code-vb[VbVbalrFunctions&#61;](~/add/codesnippet/visualbasic/46a9da0a-21fc-441c-a532-_2.vb) ] `Interval`引數可以有下列設定的其中一個。      |列舉值 |字串值 |時差單位 |  |-----------------------|------------------|-----------------------------|  |`DateInterval.Day`|&quot;d&quot;|日 |  |`DateInterval.DayOfYear`|&quot;y&quot;|日 |  |`DateInterval.Hour`|&quot;h&quot;|小時 |  |`DateInterval.Minute`|&quot;n&quot;|分鐘 |  |`DateInterval.Month`|&quot;m&quot;|月 |  |`DateInterval.Quarter`|&quot;問:&quot;|季 |  |`DateInterval.Second`|&quot;s&quot;|第二個 |  |`DateInterval.Weekday`|&quot;w&quot;|週 |  |`DateInterval.WeekOfYear`|&quot;ww&quot;|日曆週 |  |`DateInterval.Year`|&quot;yyyy&quot;|年份 |      `DayOfWeek`引數可以有下列設定的其中一個。      |列舉值 |值 |描述 |  |-----------------------|-----------|-----------------|  |`FirstDayOfWeek.System`|0|系統設定中指定的週第一天 |  |`FirstDayOfWeek.Sunday`|1|星期日 （預設值） |  |`FirstDayOfWeek.Monday`|2|星期一 （符合 iso 8601 標準，區段 3.17） |  |`FirstDayOfWeek.Tuesday`|3|星期二 |  |`FirstDayOfWeek.Wednesday`|4|星期三 |  |`FirstDayOfWeek.Thursday`|5|星期四 |  |`FirstDayOfWeek.Friday`|6|星期五 |  |`FirstDayOfWeek.Saturday`|7|星期六 |      `WeekOfYear`引數可以有下列設定的其中一個。      |列舉值 |值 |描述 |  |-----------------------|-----------|-----------------|  |`FirstWeekOfYear.System`|0|系統設定中指定的年中的第一週 |  |`FirstWeekOfYear.Jan1`|1|一週發生在哪個年 1 月 1 （預設值） |  |`FirstWeekOfYear.FirstFourDays`|2|在新的一年 （符合 ISO 8601 標準，節 3.17） 中有至少四天的每週 |  |`FirstWeekOfYear.FirstFullWeek`|3|在新的一年中的第一個星期 |"
  example:
  - "This example uses the `DateDiff` function to display the number of days between a given date and today.  \n  \n [!code-vb[VbVbalrFunctions#26](~/add/codesnippet/visualbasic/46a9da0a-21fc-441c-a532-_3.vb)]"
  syntax:
    content: public static long DateDiff (string Interval, object Date1, object Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);
    parameters:
    - id: Interval
      type: System.String
      description: "必要。 <xref uid=&quot;langword_csharp_DateInterval&quot; name=&quot;DateInterval&quot; href=&quot;&quot;></xref>列舉值或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式，表示您想要使用做為之間差異的單位的時間間隔`Date1`和`Date2`。"
    - id: Date1
      type: System.Object
      description: "必要。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>. 您想要在計算中使用第一個日期/時間值。"
    - id: Date2
      type: System.Object
      description: "必要。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>. 您要用來計算第二個日期/時間值。"
    - id: DayOfWeek
      type: Microsoft.VisualBasic.FirstDayOfWeek
      description: "選擇性。 值，從選擇<xref uid=&quot;langword_csharp_FirstDayOfWeek&quot; name=&quot;FirstDayOfWeek&quot; href=&quot;&quot;></xref>列舉，指定一週的第一天。 如果未指定， <xref uid=&quot;langword_csharp_FirstDayOfWeek.Sunday&quot; name=&quot;FirstDayOfWeek.Sunday&quot; href=&quot;&quot;> </xref>用。"
    - id: WeekOfYear
      type: Microsoft.VisualBasic.FirstWeekOfYear
      description: "選擇性。 值，從選擇<xref uid=&quot;langword_csharp_FirstWeekOfYear&quot; name=&quot;FirstWeekOfYear&quot; href=&quot;&quot;></xref>列舉，指定年份的第一週。 如果未指定， <xref uid=&quot;langword_csharp_FirstWeekOfYear.Jan1&quot; name=&quot;FirstWeekOfYear.Jan1&quot; href=&quot;&quot;> </xref>用。"
    return:
      type: System.Int64
      description: "傳回<xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>值，指定兩個時間間隔數<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值。"
  overload: Microsoft.VisualBasic.DateAndTime.DateDiff*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Date1</code><code>Date2</code>，或<code>DayofWeek</code>超出範圍。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>Date1</code>或<code>Date2</code>的類型無效。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  id: DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DatePart(DateInterval,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DatePart(DateInterval,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DatePart(DateInterval,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，其中包含指定的元件指定<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值。"
  remarks: "您可以使用`DatePart`函式評估的日期/時間值和傳回特定的元件。 例如，您可能會使用`DatePart`來計算每週或目前的小時。       如果您選擇`DateInterval.Weekday`如`Interval`引數，則傳回的值是一致的值`FirstDayOfWeek`列舉型別。 如果您選擇`DateInterval.WeekOfYear`，`DatePart`使用<xref:System.Globalization.Calendar>和<xref:System.Globalization.CultureInfo>類別<xref:System.Globalization>命名空間，以判斷目前的設定。</xref:System.Globalization> </xref:System.Globalization.CultureInfo> </xref:System.Globalization.Calendar>       `FirstDayOfWeekValue`引數會影響使用的計算`DateInterval.Weekday`和`DateInterval.WeekOfYear``Interval`設定。 `FirstWeekOfYearValue`引數會影響指定的計算`DateInterval.WeekOfYear`如`Interval`。       因為每個`Date`值會受到<xref:System.DateTime>結構，其方法讓您在擷取日期/時間部分的其他選項。</xref:System.DateTime> 例如，您可以取得的完整日期值`Date`變數，具有時間值設定為午夜，如下所示︰ ```vb#   Dim CurrDatTim As Date = Now   &quot; Current date and time.   Dim LastMidnight As Date = CurrDatTim.Date   &quot; At midnight.   ``` `Interval`引數可以有下列設定的其中一個。      |列舉值 |字串 |要傳回的日期/時間值的一部分 |  |-----------------------|------------|----------------------------------------|  |`DateInterval.Day`|d|一天的月份 (1 到 31) |  |`DateInterval.DayOfYear`|y|年 (1 到 366) 中的日 |  |`DateInterval.Hour`|h|小時 |  |`DateInterval.Minute`|n|分鐘 |  |`DateInterval.Month`|m|月 |  |`DateInterval.Quarter`|q|季 |  |`DateInterval.Second`|s|第二個 |  |`DateInterval.Weekday`|w|星期幾 (1 到 7) |  |`DateInterval.WeekOfYear`|ww|一週的年份 (1 到 53) |  |`DateInterval.Year`|yyyy|年份 |      `FirstDayOfWeekValue`引數可以有下列設定的其中一個。      |列舉值 |值 |描述 |  |-----------------------|-----------|-----------------|  |`FirstDayOfWeek.System`|0|系統設定中指定的週第一天 |  |`FirstDayOfWeek.Sunday`|1|星期日 （預設值） |  |`FirstDayOfWeek.Monday`|2|星期一 （符合 iso 8601 標準，區段 3.17） |  |`FirstDayOfWeek.Tuesday`|3|星期二 |  |`FirstDayOfWeek.Wednesday`|4|星期三 |  |`FirstDayOfWeek.Thursday`|5|星期四 |  |`FirstDayOfWeek.Friday`|6|星期五 |  |`FirstDayOfWeek.Saturday`|7|星期六 |      `FirstWeekOfYearValue`引數可以有下列設定的其中一個。      |列舉值 |值 |描述 |  |-----------------------|-----------|-----------------|  |`FirstWeekOfYear.System`|0|系統設定中指定的年中的第一週 |  |`FirstWeekOfYear.Jan1`|1|一週發生在哪個年 1 月 1 （預設值） |  |`FirstWeekOfYear.FirstFourDays`|2|在新的一年 （符合 ISO 8601 標準，節 3.17） 中有至少四天的每週 |  |`FirstWeekOfYear.FirstFullWeek`|3|在新的一年中的第一個星期 |"
  example:
  - "This example takes a date and, using the `DatePart` function, displays the quarter of the year in which it occurs.  \n  \n [!code-vb[VbVbalrFunctions#27](~/add/codesnippet/visualbasic/982d49dd-7819-40e1-9b19-_1.vb)]"
  syntax:
    content: public static int DatePart (Microsoft.VisualBasic.DateInterval Interval, DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);
    parameters:
    - id: Interval
      type: Microsoft.VisualBasic.DateInterval
      description: "必要。 <xref uid=&quot;langword_csharp_DateInterval&quot; name=&quot;DateInterval&quot; href=&quot;&quot;></xref>列舉值或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式，表示您想要傳回的日期/時間值的一部分。"
    - id: DateValue
      type: System.DateTime
      description: "必要。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>您想要評估的值。"
    - id: FirstDayOfWeekValue
      type: Microsoft.VisualBasic.FirstDayOfWeek
      description: "選擇性。 值，從選擇<xref uid=&quot;langword_csharp_FirstDayOfWeek&quot; name=&quot;FirstDayOfWeek&quot; href=&quot;&quot;></xref>列舉，指定一週的第一天。 如果未指定， <xref uid=&quot;langword_csharp_FirstDayOfWeek.Sunday&quot; name=&quot;FirstDayOfWeek.Sunday&quot; href=&quot;&quot;> </xref>用。"
    - id: FirstWeekOfYearValue
      type: Microsoft.VisualBasic.FirstWeekOfYear
      description: "選擇性。 值，從選擇<xref uid=&quot;langword_csharp_FirstWeekOfYear&quot; name=&quot;FirstWeekOfYear&quot; href=&quot;&quot;></xref>列舉，指定年份的第一週。 如果未指定， <xref uid=&quot;langword_csharp_FirstWeekOfYear.Jan1&quot; name=&quot;FirstWeekOfYear.Jan1&quot; href=&quot;&quot;> </xref>用。"
    return:
      type: System.Int32
      description: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，其中包含指定的元件指定<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值。"
  overload: Microsoft.VisualBasic.DateAndTime.DatePart*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Interval</code>不正確。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>DateValue</code>不是可強迫<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  id: DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DatePart(String,Object,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DatePart(String,Object,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DatePart(String,Object,FirstDayOfWeek,FirstWeekOfYear)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，其中包含指定的元件指定<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值。"
  remarks: "您可以使用`DatePart`函式評估的日期/時間值和傳回特定的元件。 例如，您可能會使用`DatePart`來計算每週或目前的小時。       如果您選擇`DateInterval.Weekday`如`Interval`引數，則傳回的值是一致的值`FirstDayOfWeek`列舉型別。 如果您選擇`DateInterval.WeekOfYear`，`DatePart`使用<xref:System.Globalization.Calendar>和<xref:System.Globalization.CultureInfo>類別<xref:System.Globalization>命名空間，以判斷目前的設定。</xref:System.Globalization> </xref:System.Globalization.CultureInfo> </xref:System.Globalization.Calendar>       `FirstDayOfWeekValue`引數會影響使用的計算`DateInterval.Weekday`和`DateInterval.WeekOfYear``Interval`設定。 `FirstWeekOfYearValue`引數會影響指定的計算`DateInterval.WeekOfYear`如`Interval`。       因為每個`Date`值會受到<xref:System.DateTime>結構，其方法讓您在擷取日期/時間部分的其他選項。</xref:System.DateTime> 例如，您可以取得的完整日期值`Date`變數，具有時間值設定為午夜，如下所示︰ ```vb#   Dim CurrDatTim As Date = Now   &quot; Current date and time.   Dim LastMidnight As Date = CurrDatTim.Date   &quot; At midnight.   ``` `Interval`引數可以有下列設定的其中一個。      |列舉值 |字串 |要傳回的日期/時間值的一部分 |  |-----------------------|------------|----------------------------------------|  |`DateInterval.Day`|d|一天的月份 (1 到 31) |  |`DateInterval.DayOfYear`|y|年 (1 到 366) 中的日 |  |`DateInterval.Hour`|h|小時 |  |`DateInterval.Minute`|n|分鐘 |  |`DateInterval.Month`|m|月 |  |`DateInterval.Quarter`|q|季 |  |`DateInterval.Second`|s|第二個 |  |`DateInterval.Weekday`|w|星期幾 (1 到 7) |  |`DateInterval.WeekOfYear`|ww|一週的年份 (1 到 53) |  |`DateInterval.Year`|yyyy|年份 |      `FirstDayOfWeekValue`引數可以有下列設定的其中一個。      |列舉值 |值 |描述 |  |-----------------------|-----------|-----------------|  |`FirstDayOfWeek.System`|0|系統設定中指定的週第一天 |  |`FirstDayOfWeek.Sunday`|1|星期日 （預設值） |  |`FirstDayOfWeek.Monday`|2|星期一 （符合 iso 8601 標準，區段 3.17） |  |`FirstDayOfWeek.Tuesday`|3|星期二 |  |`FirstDayOfWeek.Wednesday`|4|星期三 |  |`FirstDayOfWeek.Thursday`|5|星期四 |  |`FirstDayOfWeek.Friday`|6|星期五 |  |`FirstDayOfWeek.Saturday`|7|星期六 |      `FirstWeekOfYearValue`引數可以有下列設定的其中一個。      |列舉值 |值 |描述 |  |-----------------------|-----------|-----------------|  |`FirstWeekOfYear.System`|0|系統設定中指定的年中的第一週 |  |`FirstWeekOfYear.Jan1`|1|一週發生在哪個年 1 月 1 （預設值） |  |`FirstWeekOfYear.FirstFourDays`|2|在新的一年 （符合 ISO 8601 標準，節 3.17） 中有至少四天的每週 |  |`FirstWeekOfYear.FirstFullWeek`|3|在新的一年中的第一個星期 |"
  example:
  - "This example takes a date and, using the `DatePart` function, displays the quarter of the year in which it occurs.  \n  \n [!code-vb[VbVbalrFunctions#27](~/add/codesnippet/visualbasic/682455c0-1619-4c4c-8238-_1.vb)]"
  syntax:
    content: public static int DatePart (string Interval, object DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);
    parameters:
    - id: Interval
      type: System.String
      description: "必要。 <xref uid=&quot;langword_csharp_DateInterval&quot; name=&quot;DateInterval&quot; href=&quot;&quot;></xref>列舉值或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>運算式，表示您想要傳回的日期/時間值的一部分。"
    - id: DateValue
      type: System.Object
      description: "必要。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>您想要評估的值。"
    - id: DayOfWeek
      type: Microsoft.VisualBasic.FirstDayOfWeek
      description: "選擇性。 值，從選擇<xref uid=&quot;langword_csharp_FirstDayOfWeek&quot; name=&quot;FirstDayOfWeek&quot; href=&quot;&quot;></xref>列舉，指定一週的第一天。 如果未指定， <xref uid=&quot;langword_csharp_FirstDayOfWeek.Sunday&quot; name=&quot;FirstDayOfWeek.Sunday&quot; href=&quot;&quot;> </xref>用。"
    - id: WeekOfYear
      type: Microsoft.VisualBasic.FirstWeekOfYear
      description: "選擇性。 值，從選擇<xref uid=&quot;langword_csharp_FirstWeekOfYear&quot; name=&quot;FirstWeekOfYear&quot; href=&quot;&quot;></xref>列舉，指定年份的第一週。 如果未指定， <xref uid=&quot;langword_csharp_FirstWeekOfYear.Jan1&quot; name=&quot;FirstWeekOfYear.Jan1&quot; href=&quot;&quot;> </xref>用。"
    return:
      type: System.Int32
      description: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，其中包含指定的元件指定<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值。"
  overload: Microsoft.VisualBasic.DateAndTime.DatePart*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Interval</code>不正確。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>DateValue</code>不是可強迫<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)
  id: DateSerial(System.Int32,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DateSerial(Int32,Int32,Int32)
  nameWithType: DateAndTime.DateSerial(Int32,Int32,Int32)
  fullName: Microsoft.VisualBasic.DateAndTime.DateSerial(Int32,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，代表指定的年、 月、 日和與時間資訊設定為午夜 (00:&00;:00)。"
  remarks: "在 Windows 98 或 Windows 2000 中，兩位數年份的`Year`引數會解譯為根據使用者定義的電腦設定。 預設設定是從 0 到 29 值會解譯為年份 2000年 – 2029，，和從 30 到 99 的值會解譯為年份 1930年 – 1999年。 如需所有其他`Year`引數，使用四位數年份，例如 1924年。       舊版的 Windows 解譯兩位數年份，根據先前所述的預設值。 為了確保此函數會傳回適當的值，請使用四位數`Year`。       下列範例會示範負值，零，而正數引數值。 在這裡，`DateSerial`函式會傳回`Date`代表年度目前年度，則前 10 年 3 月的第一天前一天換句話說，十 2 年月的最後一天。      ```vb#   Dim EndFeb As Date = DateSerial(-10, 3, 0)   ```如果有任一個`Month`或`Day`超過其正常範圍，它會套用到適當下一個較大的單位。 例如，如果您指定了 32 天，它會評估為一個月，以及一到四天，根據的值`Month`。 如果`Year`是大於 9999，或如果任何引數超出範圍-2,147,483,648 到 2,147,483,647，<xref:System.ArgumentException>就會發生錯誤。</xref:System.ArgumentException> 如果三個引數所指定的日期早於年 1 月 1 年的 1 日或更晚年 12 月 31 日 23:59:59 之間的 00:00:00 到 9999，<xref:System.ArgumentOutOfRangeException>就會發生錯誤。</xref:System.ArgumentOutOfRangeException>       `Date`資料型別包含時間元件。 `DateSerial`所有為 0 時，這些設定，使傳回的值代表計算每日開始。       因為每個`Date`值會受到<xref:System.DateTime>結構，其方法提供您其他的選項組合`Date`值。</xref:System.DateTime> 例如，您可以使用其中一個多載<xref:System.DateTime.%23ctor%2A>建構函式來擴展`Date`變數使用的元件所需的組合。</xref:System.DateTime.%23ctor%2A> 下列範例會設定`NewDateTime`1978 年 6 的十分之一的之前早上 8:30 秒來︰```vb#   Dim NewDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)   ```"
  example:
  - "This example uses the `DateSerial` function to return the date for the specified year, month, and day.  \n  \n [!code-vb[VbVbalrFunctions#28](~/add/codesnippet/visualbasic/2c6c2f83-8b90-492d-bf33-_1.vb)]"
  syntax:
    content: public static DateTime DateSerial (int Year, int Month, int Day);
    parameters:
    - id: Year
      type: System.Int32
      description: "必要。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>從 1 到 9999 的運算式。 不過，也接受這個範圍以下的值。 如果`Year`是 0 到 99，將它解譯為正在執行 1930年之間 2029，以下的 < 備註 > 一節中所述。 如果`Year`小於 1，它會從目前年份減去。"
    - id: Month
      type: System.Int32
      description: "必要。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>從 1 到 12 的運算式。 不過，也接受這個範圍以外的值。 值`Month`位移 1，並套用至導出年的 1 月。 也就是說，(`Month` -1) 加入至年 1 月。 如有必要，則會重新計算年。 下列的結果將說明這種效果︰ 如果`Month`為 1，結果是計算年的 1 月。       如果`Month`為 0，則結果為前一年的 12 月。       如果`Month`為-1，結果就是前一年的&11; 月版。       如果`Month`為 13，則結果為年 1 月 1 年。"
    - id: Day
      type: System.Int32
      description: "必要。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>從 1 到 31 的運算式。 不過，也接受這個範圍以外的值。 值`Day`位移 1，並套用至導出的月份的第一天。 也就是說，(`Day` -1) 加入至當月第一。 如有必要，就會重新計算的月份和年份。 下列的結果將說明這種效果︰ 如果`Day`為 1，結果是計算月份的第一天。       如果`Day`為 0，則結果為上一個月份的最後一天。       如果`Day`為-1，結果是上一個月份的倒數第二天。       如果`Day`已的過了目前的月份，而結果結尾下個月的適當日期。 例如，如果`Month`為 4 和`Day`為 31，則結果為 1 年。"
    return:
      type: System.DateTime
      description: "傳回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，代表指定的年、 月、 日和與時間資訊設定為午夜 (00:&00;:00)。"
  overload: Microsoft.VisualBasic.DateAndTime.DateSerial*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DateString
  id: DateString
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DateString
  nameWithType: DateAndTime.DateString
  fullName: Microsoft.VisualBasic.DateAndTime.DateString
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回或設定<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>代表您系統的目前日期的值。"
  remarks: "`DateString`傳回系統日期 MM dd yyyy 格式會使用縮寫的月份名稱。 日期的可接受的格式為 M d yyyy，M，d y，/yyyy m/y。 這是針對使用雙位元組字元集 (DBCS) 以外的所有系統地區設定，則為 true。 如果系統地區設定使用雙位元組字元集， `DateString` yyyy MM dd 格式傳回系統日期。 系統地區設定使用設定的**時鐘、 語言和地區**中的項目**控制台**。       **請注意**`DateString`屬性只能在 yyyy MM dd 格式傳回系統日期`zh`（簡體中文）， `ko` （韓文），和`ja`（日文） 的系統地區設定，如果您正在執行 Silverlight 中的 Visual Basic。       取得或設定目前的系統時間為`String`，使用<xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A>屬性。</xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A>       若要取得目前的系統日期或時間，格式為您的地區設定或自訂格式，提供<xref:Microsoft.VisualBasic.DateAndTime.Now%2A>屬性<xref:Microsoft.VisualBasic.Strings.Format%2A>函式，指定預先定義或使用者定義的日期/時間格式。</xref:Microsoft.VisualBasic.Strings.Format%2A> </xref:Microsoft.VisualBasic.DateAndTime.Now%2A> 下列範例為其示範。      ```   MsgBox(&quot;The formatted date is &quot; & Format(Now, &quot;dddd, d MMM yyyy&quot;))   ```若要存取目前的系統日期做為`Date`，使用<xref:Microsoft.VisualBasic.DateAndTime.Today%2A>屬性。</xref:Microsoft.VisualBasic.DateAndTime.Today%2A>      > [!IMPORTANT] > 設定系統日期或時間需要 unmanaged 程式碼權限，這可能會影響在部分信任情況下執行。 如需詳細資訊，請參閱<xref:System.Security.Permissions.SecurityPermission>和[程式碼存取權限](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)。</xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "The following example uses the `DateString` property to display the current system date.  \n  \n [!code-vb[VbVbalrDateProperties#1](~/add/codesnippet/visualbasic/VbVbalrDateProperties/Module1.vb#1)]"
  syntax:
    content: public static string DateString { get; set; }
    return:
      type: System.String
      description: "傳回或設定<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>代表您系統的目前日期的值。"
  overload: Microsoft.VisualBasic.DateAndTime.DateString*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "用來設定的值的格式無效<xref uid=&quot;langword_csharp_DateString&quot; name=&quot;DateString&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DateValue(System.String)
  id: DateValue(System.String)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DateValue(String)
  nameWithType: DateAndTime.DateValue(String)
  fullName: Microsoft.VisualBasic.DateAndTime.DateValue(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，其中包含表示字串，並將設定為午夜的時間資訊的日期資訊 (00:&00;:00)。"
  remarks: "如果`StringDate`只包含數字 1 到 12 由有效的日期分隔符號分隔`DateValue`可辨識的順序，如月、 日和年，根據指定的系統的簡短日期格式。 `DateValue`會使用目前的行事曆設定從<xref:System.Globalization.CultureInfo.CurrentCulture%2A>屬性<xref:System.Globalization.CultureInfo>類別<xref:System.Globalization>命名空間。</xref:System.Globalization> </xref:System.Globalization.CultureInfo> </xref:System.Globalization.CultureInfo.CurrentCulture%2A> 預設值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值取決於**控制台**設定。</xref:System.Globalization.CultureInfo.CurrentCulture%2A> 您可以藉由設定覆寫的簡短日期格式<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>屬性<xref:System.Globalization.DateTimeFormatInfo>類別<xref:System.Globalization>命名空間。</xref:System.Globalization> </xref:System.Globalization.DateTimeFormatInfo> </xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>       `DateValue`會辨識長、 縮寫，且數字格式的月份名稱。 例如，除了可辨識的 12/30/1991年和 12/30/91 `DateValue` 1991 年 12 月 30 和 1991 年 12 月 30，也會辨識。       如果年份部分的`StringDate`省略，則`DateValue`會使用您的電腦的系統日期的目前年份。       如果`StringDate`引數包含時間資訊`DateValue`不包含它的傳回值中。 不過，如果`StringDate`包含無效的時間資訊，例如&quot;89:&98;&quot;<xref:System.InvalidCastException>就會發生錯誤。</xref:System.InvalidCastException>"
  example:
  - "This example uses the `DateValue` function to convert a string to a date. You can also use date literals to directly assign a date to an `Object` or `Date` variable, for example, `oldDate = #2/12/69#`.  \n  \n [!code-vb[VbVbalrFunctions#29](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._84_1.vb)]"
  syntax:
    content: public static DateTime DateValue (string StringDate);
    parameters:
    - id: StringDate
      type: System.String
      description: "必要。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表示日期/時間值從 1 月 1 年的 1 年 12 月 31 日 23:59:59 之間的 00:00:00 到 9999 的運算式。"
    return:
      type: System.DateTime
      description: "<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，其中包含表示字串，並將設定為午夜的時間資訊的日期資訊 (00:&00;:00)。"
  overload: Microsoft.VisualBasic.DateAndTime.DateValue*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>StringDate</code>包含無效的時間資訊。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)
  id: Day(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Day(DateTime)
  nameWithType: DateAndTime.Day(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Day(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值從 1 到 31，代表當月日期。"
  remarks: "如果您使用`Day`函式，您可能必須限定`Microsoft.VisualBasic`命名空間，因為<xref:System.Windows.Forms>命名空間會定義<xref:System.Windows.Forms.Day>列舉型別。</xref:System.Windows.Forms.Day> </xref:System.Windows.Forms> 下列範例會示範如何合格`Day`解析模稜兩可能︰```vb#   Dim thisDay As Integer = Microsoft.VisualBasic.DateAndTime.Day(Now)   ```您也可以藉由呼叫取得的月份天數`DatePart`並指定`DateInterval.Day`如*間隔*引數。"
  example:
  - "The following example uses the `Day` function to obtain the day of the month from a specified date. In the development environment, the date literal is displayed in standard short format (such as \"02/12/1969\") using the locale settings of your code.  \n  \n [!code-vb[VbVbalrFunctions#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._126_1.vb)]  \n  \n `Day` is qualified to distinguish it from the <xref:System.Windows.Forms.Day?displayProperty=fullName> enumeration."
  syntax:
    content: public static int Day (DateTime DateValue);
    parameters:
    - id: DateValue
      type: System.DateTime
      description: "必要。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>您要從中擷取日期值。"
    return:
      type: System.Int32
      description: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值從 1 到 31，代表當月日期。"
  overload: Microsoft.VisualBasic.DateAndTime.Day*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)
  id: Hour(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Hour(DateTime)
  nameWithType: DateAndTime.Hour(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Hour(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>從 0 到 23 代表當天的小時值。"
  remarks: "您也可以藉由呼叫取得當天的小時`DatePart`並指定`DateInterval.Hour`如`Interval`引數。"
  example:
  - "This example uses the `Hour` function to obtain the hour from a specified time. In the development environment, the time literal is displayed in short time format using the locale settings of your code.  \n  \n [!code-vb[VbVbalrFunctions#32](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._192_1.vb)]"
  syntax:
    content: public static int Hour (DateTime TimeValue);
    parameters:
    - id: TimeValue
      type: System.DateTime
      description: "必要。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>您要從中擷取小時的值。"
    return:
      type: System.Int32
      description: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>從 0 到 23 代表當天的小時值。"
  overload: Microsoft.VisualBasic.DateAndTime.Hour*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)
  id: Minute(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Minute(DateTime)
  nameWithType: DateAndTime.Minute(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Minute(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值從 0 到 59 代表小時的分鐘數。"
  remarks: "您也可以藉由呼叫取得在一小時的分鐘數`DatePart`並指定`DateInterval.Minute`如`Interval`引數。"
  example:
  - "This example uses the `Minute` function to obtain the minute of the hour from a specified time. In the development environment, the time literal is displayed in short time format using the locale settings of your code.  \n  \n [!code-vb[VbVbalrFunctions#42](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._195_1.vb)]"
  syntax:
    content: public static int Minute (DateTime TimeValue);
    parameters:
    - id: TimeValue
      type: System.DateTime
      description: "必要。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>要從中擷取分鐘值。"
    return:
      type: System.Int32
      description: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值從 0 到 59 代表小時的分鐘數。"
  overload: Microsoft.VisualBasic.DateAndTime.Minute*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)
  id: Month(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Month(DateTime)
  nameWithType: DateAndTime.Month(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Month(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值從 1 到 12，代表當年的月份。"
  remarks: "您也可以藉由呼叫取得當年月份`DatePart`並指定`DateInterval.Month`如`Interval`引數。"
  example:
  - "This example uses the `Month` function to obtain the month from a specified date. In the development environment, the date literal is displayed in short date format using the locale settings of your code.  \n  \n [!code-vb[VbVbalrFunctions#43](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._213_1.vb)]"
  syntax:
    content: public static int Month (DateTime DateValue);
    parameters:
    - id: DateValue
      type: System.DateTime
      description: "必要。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>您要從中擷取月份的值。"
    return:
      type: System.Int32
      description: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值從 1 到 12，代表當年的月份。"
  overload: Microsoft.VisualBasic.DateAndTime.Month*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)
  id: MonthName(System.Int32,System.Boolean)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: MonthName(Int32,Boolean)
  nameWithType: DateAndTime.MonthName(Int32,Boolean)
  fullName: Microsoft.VisualBasic.DateAndTime.MonthName(Int32,Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>值，其中包含指定之月份的名稱。"
  remarks: "所傳回的字串`MonthName`不是只在輸入的引數，同時也取決於**地區選項**指定在 Windows 中設定**控制台**。      > [!NOTE]  >   `MonthName`會使用目前的行事曆設定從<xref:System.Globalization.CultureInfo.CurrentCulture%2A>屬性<xref:System.Globalization.CultureInfo>類別<xref:System.Globalization>命名空間。</xref:System.Globalization> </xref:System.Globalization.CultureInfo> </xref:System.Globalization.CultureInfo.CurrentCulture%2A> 預設值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值取決於**控制台**設定。</xref:System.Globalization.CultureInfo.CurrentCulture%2A>"
  example:
  - "This example uses the `MonthName` function to determine the name of the month, by the integer given. The Boolean value will determine whether the full name (`False`) or the abbreviated name (`True`) will be displayed.  \n  \n [!code-vb[VbVbalrFunctions#44](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._194_1.vb)]"
  syntax:
    content: public static string MonthName (int Month, bool Abbreviate = false);
    parameters:
    - id: Month
      type: System.Int32
      description: "必要。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. 月份，從 1 到 13; 數字表示法1 表示年 1 月和 12 表示十二月。 您可以使用值 13 13 個月的行事曆。 如果您的系統使用 12 個月的行事曆和`Month`為 13， <xref uid=&quot;langword_csharp_MonthName&quot; name=&quot;MonthName&quot; href=&quot;&quot;> </xref>會傳回空字串。"
    - id: Abbreviate
      type: System.Boolean
      description: "選擇性。 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，指出是否為縮寫月份名稱。 如果省略，預設值是<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>，這表示月份名稱不縮寫。"
    return:
      type: System.String
      description: "傳回<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>值，其中包含指定之月份的名稱。"
  overload: Microsoft.VisualBasic.DateAndTime.MonthName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Month</code>小於 1 或大於 13。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Now
  id: Now
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Now
  nameWithType: DateAndTime.Now
  fullName: Microsoft.VisualBasic.DateAndTime.Now
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，其中包含目前的日期和時間，根據您的系統。"
  remarks: "若要設定系統日期，使用<xref:Microsoft.VisualBasic.DateAndTime.Today%2A>屬性。</xref:Microsoft.VisualBasic.DateAndTime.Today%2A> 若要設定系統時間，請使用<xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>屬性。</xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>"
  example:
  - "The following example uses the `Now` property to return the current system date and time.  \n  \n [!code-vb[VbVbalrDateProperties#4](~/add/codesnippet/visualbasic/VbVbalrDateProperties/Module1.vb#4)]"
  syntax:
    content: public static DateTime Now { get; }
    return:
      type: System.DateTime
      description: "傳回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，其中包含目前的日期和時間，根據您的系統。"
  overload: Microsoft.VisualBasic.DateAndTime.Now*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)
  id: Second(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Second(DateTime)
  nameWithType: DateAndTime.Second(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Second(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>從 0 到 59 代表一分鐘內的第二個值。"
  remarks: "您也可以藉由呼叫取得一分鐘內的第二個`DatePart`並指定`DateInterval.Second`如`Interval`引數。"
  example:
  - "The following example uses the `Second` function to obtain the second of the minute from a specified time. In the development environment, the time literal is displayed in short time format using the locale settings of your code.  \n  \n [!code-vb[VbVbalrFunctions#46](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._54_1.vb)]"
  syntax:
    content: public static int Second (DateTime TimeValue);
    parameters:
    - id: TimeValue
      type: System.DateTime
      description: "必要。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>您要從中擷取第二個值。"
    return:
      type: System.Int32
      description: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>從 0 到 59 代表一分鐘內的第二個值。"
  overload: Microsoft.VisualBasic.DateAndTime.Second*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.TimeOfDay
  id: TimeOfDay
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: TimeOfDay
  nameWithType: DateAndTime.TimeOfDay
  fullName: Microsoft.VisualBasic.DateAndTime.TimeOfDay
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回或設定<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，內含您系統的目前時間。"
  remarks: "`Date`資料型別包括日期元件。 傳回系統時間，當`TimeOfDay`將這些都設定為 1，因此傳回的值表示 1 年的第一天。 設定系統時間，當`TimeOfDay`會忽略日期元件。       若要存取目前的系統時間為`String`，使用<xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A>屬性。</xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A>       若要取得或設定目前的系統日期，使用<xref:Microsoft.VisualBasic.DateAndTime.Today%2A>屬性。</xref:Microsoft.VisualBasic.DateAndTime.Today%2A>      > [!IMPORTANT] > 設定系統日期或時間需要 unmanaged 程式碼權限，這可能會影響在部分信任情況下執行。 如需詳細資訊，請參閱<xref:System.Security.Permissions.SecurityPermission>和[程式碼存取權限](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)。</xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "This example uses the `TimeOfDay` property to return the current system time.  \n  \n [!code-vb[VbVbalrDateProperties#3](~/add/codesnippet/visualbasic/VbVbalrDateProperties/Module1.vb#3)]"
  syntax:
    content: public static DateTime TimeOfDay { get; set; }
    return:
      type: System.DateTime
      description: "傳回或設定<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，內含您系統的目前時間。"
  overload: Microsoft.VisualBasic.DateAndTime.TimeOfDay*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Timer
  id: Timer
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Timer
  nameWithType: DateAndTime.Timer
  fullName: Microsoft.VisualBasic.DateAndTime.Timer
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>午夜起過的值，表示秒數。"
  remarks: "`Timer`屬性傳回最新的午夜起的秒和毫秒數。 秒數是傳回的值，不可或缺的一部分而毫秒數的小數部分。"
  example:
  - "This example uses the `Timer` property to pause the application. It can perform other processing during the pause.  \n  \n [!code-vb[VbVbalrTimerProperty#1](~/add/codesnippet/visualbasic/VbVbalrTimerProperty/Form1.vb#1)]  \n  \n Note that you must qualify the `Timer` property with the <xref:Microsoft.VisualBasic?displayProperty=fullName> namespace, because `Timer` is also a defined class in the <xref:System.Threading?displayProperty=fullName>, <xref:System.Timers?displayProperty=fullName>, and <xref:System.Windows.Forms?displayProperty=fullName> namespaces."
  syntax:
    content: public static double Timer { get; }
    return:
      type: System.Double
      description: "傳回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>午夜起過的值，表示秒數。"
  overload: Microsoft.VisualBasic.DateAndTime.Timer*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)
  id: TimeSerial(System.Int32,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: TimeSerial(Int32,Int32,Int32)
  nameWithType: DateAndTime.TimeSerial(Int32,Int32,Int32)
  fullName: Microsoft.VisualBasic.DateAndTime.TimeSerial(Int32,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，表示指定的時、 分和秒，而且日期資訊設相對於 1 年 1 月。"
  remarks: "下列範例會示範負值，零，而正數引數值。 `TimeSerial`函式會傳回代表正午或上午 8:45:00 前三個小時前 15 分鐘的時間。      ```vb#   Dim alarmTime As Date = TimeSerial(12 - 3, -15, 0)   ```如果有任一個`Minute`或`Second`超過其正常範圍，它會套用到適當下一個較大的單位。 例如，如果您指定 75 分鐘時，它會評估為 1 小時 15 分鐘。       `TimeSerial`這是一天中的秒數減少模數 86,400 的總秒數。 因此，傳回的時間一律為 00:00:00 和 23:59:59 之間。       `Date`資料型別包括日期元件。 `TimeSerial`所有為 1 時，這些設定，使傳回的值表示 1 年的第一天。 不過，如果引數的值導致計算出的時間超過 24 小時，一天就會遞增視。 在下列範例中，值`Hour`和`Minute`產生結合超過 24 小時的時間。      ```vb#   MsgBox(TimeSerial(23, 75, 0))    &quot; The preceding statement displays &quot;1/2/0001 12:15:00 AM&quot;.   ```如果引數的值導致計算時間為負值，日期資訊設為 1/1/0001 和時間資訊調整為 00:00:00 和 23:59:59 之間。 不過，如果計算的時間為小於負數 24 小時，<xref:System.ArgumentOutOfRangeException>就會發生錯誤。</xref:System.ArgumentOutOfRangeException>       因為每個`Date`值會受到<xref:System.DateTime?displayProperty=fullName>結構，其方法提供您其他的選項組合`Date`值。</xref:System.DateTime?displayProperty=fullName> 例如，您可以運用的其中一個多載<xref:System.DateTime.%23ctor%2A>建構函式來擴展`Date`變數使用的元件所需的組合。</xref:System.DateTime.%23ctor%2A> 下列範例會設定`newDateTime`1978 年 6 的十分之一的之前早上 8:30 秒來︰```vb#   Dim newDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)   ```"
  example:
  - "The following example uses the `TimeSerial` function to return a time for the specified hour, minute, and second.  \n  \n [!code-vb[VbVbalrFunctions#50](~/add/codesnippet/visualbasic/4788d161-48a1-4476-aa26-_1.vb)]"
  syntax:
    content: public static DateTime TimeSerial (int Hour, int Minute, int Second);
    parameters:
    - id: Hour
      type: System.Int32
      description: "必要。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>從 0 到 23 的運算式。 不過，也接受這個範圍以外的值。"
    - id: Minute
      type: System.Int32
      description: "必要。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>從 0 到 59 的運算式。 不過，也接受這個範圍以外的值。 值`Minute`會加入到導出的小時，因此負數的值會指定該小時之前的分鐘數。"
    - id: Second
      type: System.Int32
      description: "必要。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>從 0 到 59 的運算式。 不過，也接受這個範圍以外的值。 值`Second`加入導出的分鐘數，因此負數的值會指定該分鐘之前的秒數。"
    return:
      type: System.DateTime
      description: "傳回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，表示指定的時、 分和秒，而且日期資訊設相對於 1 年 1 月。"
  overload: Microsoft.VisualBasic.DateAndTime.TimeSerial*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "引數超出範圍-2,147,483,648 到 2,147,483,647"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "計算的時間為小於負的 24 小時。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.TimeString
  id: TimeString
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: TimeString
  nameWithType: DateAndTime.TimeString
  fullName: Microsoft.VisualBasic.DateAndTime.TimeString
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回或設定<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>值，代表您系統的目前時間。"
  remarks: "`TimeString`一律傳回的系統時間為&quot;Hh: mm:，&quot;這是 24 小時制格式。 此格式是文化特性而異，這表示不會變更即使您變更**地區選項**中**控制台**。       取得或設定目前的系統日期做為`String`，使用<xref:Microsoft.VisualBasic.DateAndTime.DateString%2A>屬性。</xref:Microsoft.VisualBasic.DateAndTime.DateString%2A>       若要取得目前的系統日期或時間，格式為您的地區設定或自訂格式，提供<xref:Microsoft.VisualBasic.DateAndTime.Now%2A>屬性<xref:Microsoft.VisualBasic.Strings.Format%2A>函式，指定預先定義或使用者定義的日期/時間格式。</xref:Microsoft.VisualBasic.Strings.Format%2A> </xref:Microsoft.VisualBasic.DateAndTime.Now%2A> 下列範例為其示範。      ```   MsgBox(&quot;The formatted time is &quot; & Format(Now, &quot;hh.mm.ss.fff tt&quot;))   ```若要存取目前的系統時間為`Date`，使用<xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>屬性。</xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>      > [!IMPORTANT] > 設定系統日期或時間需要 unmanaged 程式碼權限，這可能會影響在部分信任情況下執行。 如需詳細資訊，請參閱<xref:System.Security.Permissions.SecurityPermission>和[程式碼存取權限](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)。</xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "This example uses the `TimeString` property to display the current system time.  \n  \n [!code-vb[VbVbalrDateProperties#2](~/add/codesnippet/visualbasic/VbVbalrDateProperties/Module1.vb#2)]"
  syntax:
    content: public static string TimeString { get; set; }
    return:
      type: System.String
      description: "傳回或設定<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>值，代表您系統的目前時間。"
  overload: Microsoft.VisualBasic.DateAndTime.TimeString*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "用來設定的值的格式無效<xref uid=&quot;langword_csharp_TimeString&quot; name=&quot;TimeString&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)
  id: TimeValue(System.String)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: TimeValue(String)
  nameWithType: DateAndTime.TimeValue(String)
  fullName: Microsoft.VisualBasic.DateAndTime.TimeValue(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，其中包含表示字串，而且日期資訊設為 1 年 1 月的時間資訊。"
  remarks: "您可以輸入有效的時間使用 12 小時制或 24 小時制。 例如，`&quot;2:24 P.M.&quot;`和`&quot;14:24&quot;`都有效`StringTime`引數。       如果`StringTime`引數包含日期的詳細資訊，`TimeValue`不包含它的傳回值中。 不過，如果`StringTime`包含無效的日期資訊，例如&quot;年 1 月 32&quot;，<xref:System.InvalidCastException>就會發生錯誤。</xref:System.InvalidCastException>"
  example:
  - "The following example uses the `TimeValue` function to convert a string to a time. You can also use date literals to directly assign a time to a `Date` variable.  \n  \n [!code-vb[VbVbalrFunctions#51](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._232_1.vb)]"
  syntax:
    content: public static DateTime TimeValue (string StringTime);
    parameters:
    - id: StringTime
      type: System.String
      description: "必要。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表示日期/時間值從 1 月 1 年的 1 年 12 月 31 日 23:59:59 之間的 00:00:00 到 9999 的運算式。"
    return:
      type: System.DateTime
      description: "傳回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，其中包含表示字串，而且日期資訊設為 1 年 1 月的時間資訊。"
  overload: Microsoft.VisualBasic.DateAndTime.TimeValue*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>StringTime</code>包含無效的日期資訊。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Today
  id: Today
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Today
  nameWithType: DateAndTime.Today
  fullName: Microsoft.VisualBasic.DateAndTime.Today
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回或設定<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，內含您系統的目前日期。"
  remarks: "`Date`資料型別包含時間元件。 當傳回系統日期，`Today`設定所有這些為 0，因此傳回的值表示午夜 (00: 00:00)。 設定系統日期時`Today`會忽略時間元件。       若要存取目前的系統日期做為`String`，使用<xref:Microsoft.VisualBasic.DateAndTime.DateString%2A>屬性。</xref:Microsoft.VisualBasic.DateAndTime.DateString%2A>       若要取得或設定目前的系統時間，使用<xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>屬性。</xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>      > [!IMPORTANT] > 設定系統日期或時間需要 unmanaged 程式碼權限，這可能會影響在部分信任情況下執行。 如需詳細資訊，請參閱<xref:System.Security.Permissions.SecurityPermission>和[程式碼存取權限](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)。</xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "This example uses the `Today` property to return the current system date.  \n  \n [!code-vb[VbVbalrDateProperties#5](~/add/codesnippet/visualbasic/VbVbalrDateProperties/Module1.vb#5)]"
  syntax:
    content: public static DateTime Today { get; set; }
    return:
      type: System.DateTime
      description: "傳回或設定<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，內含您系統的目前日期。"
  overload: Microsoft.VisualBasic.DateAndTime.Today*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)
  id: Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Weekday(DateTime,FirstDayOfWeek)
  nameWithType: DateAndTime.Weekday(DateTime,FirstDayOfWeek)
  fullName: Microsoft.VisualBasic.DateAndTime.Weekday(DateTime,FirstDayOfWeek)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，內含代表星期幾的數字。"
  remarks: "所傳回的值`Weekday`函式對應至值`FirstDayOfWeek`列舉; 也就是說，1 代表星期日，7 代表星期六。      > [!NOTE]  >   `Weekday`會使用目前的行事曆設定從<xref:System.Globalization.CultureInfo.CurrentCulture%2A>屬性<xref:System.Globalization.CultureInfo>類別<xref:System.Globalization>命名空間。</xref:System.Globalization> </xref:System.Globalization.CultureInfo> </xref:System.Globalization.CultureInfo.CurrentCulture%2A> 預設值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值取決於**控制台**設定。</xref:System.Globalization.CultureInfo.CurrentCulture%2A>       `DayOfWeek`引數可以有下列設定的其中一個。      |列舉值 |值 |描述 |  |-----------------------|-----------|-----------------|  |`FirstDayOfWeek.System`|0|系統設定中指定的週第一天 |  |`FirstDayOfWeek.Sunday`|1|星期日 （預設值） |  |`FirstDayOfWeek.Monday`|2|星期一 （符合 iso 8601 標準，區段 3.17） |  |`FirstDayOfWeek.Tuesday`|3|星期二 |  |`FirstDayOfWeek.Wednesday`|4|星期三 |  |`FirstDayOfWeek.Thursday`|5|星期四 |  |`FirstDayOfWeek.Friday`|6|星期五 |  |`FirstDayOfWeek.Saturday`|7|星期六 |"
  example:
  - "The following example uses the `Weekday` function to obtain the day of the week from a specified date.  \n  \n [!code-vb[VbVbalrFunctions#57](~/add/codesnippet/visualbasic/369e7ed8-1790-4eb8-9e17-_1.vb)]"
  syntax:
    content: public static int Weekday (DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday);
    parameters:
    - id: DateValue
      type: System.DateTime
      description: "必要。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>您要決定的一週天數的值。"
    - id: DayOfWeek
      type: Microsoft.VisualBasic.FirstDayOfWeek
      description: "選擇性。 值，從選擇<xref uid=&quot;langword_csharp_FirstDayOfWeek&quot; name=&quot;FirstDayOfWeek&quot; href=&quot;&quot;></xref>列舉，指定一週的第一天。 如果未指定， <xref uid=&quot;langword_csharp_FirstDayOfWeek.Sunday&quot; name=&quot;FirstDayOfWeek.Sunday&quot; href=&quot;&quot;> </xref>用。"
    return:
      type: System.Int32
      description: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，內含代表星期幾的數字。"
  overload: Microsoft.VisualBasic.DateAndTime.Weekday*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>DayOfWeek</code>小於 0 或大於 7。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)
  id: WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: WeekdayName(Int32,Boolean,FirstDayOfWeek)
  nameWithType: DateAndTime.WeekdayName(Int32,Boolean,FirstDayOfWeek)
  fullName: Microsoft.VisualBasic.DateAndTime.WeekdayName(Int32,Boolean,FirstDayOfWeek)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>值，其中包含指定的週間日名稱。"
  remarks: "所傳回的字串`WeekdayName`不是只在輸入的引數，同時也取決於**地區選項**指定在 Windows 中設定**控制台**。      > [!NOTE]  >   `WeekdayName`會使用目前的行事曆設定從<xref:System.Globalization.CultureInfo.CurrentCulture%2A>屬性<xref:System.Globalization.CultureInfo>類別<xref:System.Globalization>命名空間。</xref:System.Globalization> </xref:System.Globalization.CultureInfo> </xref:System.Globalization.CultureInfo.CurrentCulture%2A> 預設值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值取決於**控制台**設定。</xref:System.Globalization.CultureInfo.CurrentCulture%2A>       `FirstDayOfWeekValue`引數可以有下列設定的其中一個。      |列舉值 |值 |描述 |  |-----------------------|-----------|-----------------|  |`FirstDayOfWeek.System`|0|指定系統中的每週第一天設定 （預設值） |  |`FirstDayOfWeek.Sunday`|1|星期日 |  |`FirstDayOfWeek.Monday`|2|星期一 （符合 iso 8601 標準，區段 3.17） |  |`FirstDayOfWeek.Tuesday`|3|星期二 |  |`FirstDayOfWeek.Wednesday`|4|星期三 |  |`FirstDayOfWeek.Thursday`|5|星期四 |  |`FirstDayOfWeek.Friday`|6|星期五 |  |`FirstDayOfWeek.Saturday`|7|星期六 |"
  example:
  - "The following example uses the `Weekday` function to obtain the day of the week from a specified date, and then the `WeekDayName` function to obtain the name of the weekday from its number.  \n  \n [!code-vb[VbVbalrFunctions#58](~/add/codesnippet/visualbasic/3ef2fbeb-749b-412a-a8c7-_1.vb)]"
  syntax:
    content: public static string WeekdayName (int Weekday, bool Abbreviate = false, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.System);
    parameters:
    - id: Weekday
      type: System.Int32
      description: "必要。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. 星期幾，從 1 到 7; 數值表示法1 表示當週的第一天，而 7 表示當週的最後一天。 第一個和最後一天的身分識別，而設定的`FirstDayOfWeekValue`。"
    - id: Abbreviate
      type: System.Boolean
      description: "選擇性。 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，指出是否為縮寫的工作日名稱。 如果省略，預設值是<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>，不縮寫的工作日名稱表示。"
    - id: FirstDayOfWeekValue
      type: Microsoft.VisualBasic.FirstDayOfWeek
      description: "選擇性。 值，從選擇<xref uid=&quot;langword_csharp_FirstDayOfWeek&quot; name=&quot;FirstDayOfWeek&quot; href=&quot;&quot;></xref>列舉，指定一週的第一天。 如果未指定， <xref uid=&quot;langword_csharp_FirstDayOfWeek.System&quot; name=&quot;FirstDayOfWeek.System&quot; href=&quot;&quot;> </xref>用。"
    return:
      type: System.String
      description: "傳回<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>值，其中包含指定的週間日名稱。"
  overload: Microsoft.VisualBasic.DateAndTime.WeekdayName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Weekday</code>小於 1 或大於 7 或<code>FirstDayOfWeekValue</code>小於 0 或大於 7。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)
  id: Year(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Year(DateTime)
  nameWithType: DateAndTime.Year(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Year(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>從 1 到 9999 代表年份的值。"
  remarks: "您也可以藉由呼叫取得年份`DatePart`並指定`DateInterval.Year`如`Interval`引數。"
  example:
  - "The following example uses the `Year` function to obtain the year from a specified date. In the development environment, the date literal is displayed in short date format using the locale settings of your code.  \n  \n [!code-vb[VbVbalrFunctions#59](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._223_1.vb)]"
  syntax:
    content: public static int Year (DateTime DateValue);
    parameters:
    - id: DateValue
      type: System.DateTime
      description: "必要。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>您要從中擷取年份的值。"
    return:
      type: System.Int32
      description: "傳回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>從 1 到 9999 代表年份的值。"
  overload: Microsoft.VisualBasic.DateAndTime.Year*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateAdd(DateInterval,Double,DateTime)
  nameWithType: DateAndTime.DateAdd(DateInterval,Double,DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.DateAdd(DateInterval,Double,DateTime)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.VisualBasic.DateInterval
  parent: Microsoft.VisualBasic
  isExternal: false
  name: DateInterval
  nameWithType: DateInterval
  fullName: Microsoft.VisualBasic.DateInterval
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateAdd(String,Double,Object)
  nameWithType: DateAndTime.DateAdd(String,Double,Object)
  fullName: Microsoft.VisualBasic.DateAndTime.DateAdd(String,Double,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateDiff(DateInterval,DateTime,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DateDiff(DateInterval,DateTime,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DateDiff(DateInterval,DateTime,DateTime,FirstDayOfWeek,FirstWeekOfYear)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.FirstDayOfWeek
  parent: Microsoft.VisualBasic
  isExternal: false
  name: FirstDayOfWeek
  nameWithType: FirstDayOfWeek
  fullName: Microsoft.VisualBasic.FirstDayOfWeek
- uid: Microsoft.VisualBasic.FirstWeekOfYear
  parent: Microsoft.VisualBasic
  isExternal: false
  name: FirstWeekOfYear
  nameWithType: FirstWeekOfYear
  fullName: Microsoft.VisualBasic.FirstWeekOfYear
- uid: Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateDiff(String,Object,Object,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DateDiff(String,Object,Object,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DateDiff(String,Object,Object,FirstDayOfWeek,FirstWeekOfYear)
- uid: Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DatePart(DateInterval,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DatePart(DateInterval,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DatePart(DateInterval,DateTime,FirstDayOfWeek,FirstWeekOfYear)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DatePart(String,Object,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DatePart(String,Object,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DatePart(String,Object,FirstDayOfWeek,FirstWeekOfYear)
- uid: Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateSerial(Int32,Int32,Int32)
  nameWithType: DateAndTime.DateSerial(Int32,Int32,Int32)
  fullName: Microsoft.VisualBasic.DateAndTime.DateSerial(Int32,Int32,Int32)
- uid: Microsoft.VisualBasic.DateAndTime.DateString
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateString
  nameWithType: DateAndTime.DateString
  fullName: Microsoft.VisualBasic.DateAndTime.DateString
- uid: Microsoft.VisualBasic.DateAndTime.DateValue(System.String)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateValue(String)
  nameWithType: DateAndTime.DateValue(String)
  fullName: Microsoft.VisualBasic.DateAndTime.DateValue(String)
- uid: Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Day(DateTime)
  nameWithType: DateAndTime.Day(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Day(DateTime)
- uid: Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Hour(DateTime)
  nameWithType: DateAndTime.Hour(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Hour(DateTime)
- uid: Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Minute(DateTime)
  nameWithType: DateAndTime.Minute(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Minute(DateTime)
- uid: Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Month(DateTime)
  nameWithType: DateAndTime.Month(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Month(DateTime)
- uid: Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: MonthName(Int32,Boolean)
  nameWithType: DateAndTime.MonthName(Int32,Boolean)
  fullName: Microsoft.VisualBasic.DateAndTime.MonthName(Int32,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.DateAndTime.Now
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Now
  nameWithType: DateAndTime.Now
  fullName: Microsoft.VisualBasic.DateAndTime.Now
- uid: Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Second(DateTime)
  nameWithType: DateAndTime.Second(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Second(DateTime)
- uid: Microsoft.VisualBasic.DateAndTime.TimeOfDay
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeOfDay
  nameWithType: DateAndTime.TimeOfDay
  fullName: Microsoft.VisualBasic.DateAndTime.TimeOfDay
- uid: Microsoft.VisualBasic.DateAndTime.Timer
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Timer
  nameWithType: DateAndTime.Timer
  fullName: Microsoft.VisualBasic.DateAndTime.Timer
- uid: Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeSerial(Int32,Int32,Int32)
  nameWithType: DateAndTime.TimeSerial(Int32,Int32,Int32)
  fullName: Microsoft.VisualBasic.DateAndTime.TimeSerial(Int32,Int32,Int32)
- uid: Microsoft.VisualBasic.DateAndTime.TimeString
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeString
  nameWithType: DateAndTime.TimeString
  fullName: Microsoft.VisualBasic.DateAndTime.TimeString
- uid: Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeValue(String)
  nameWithType: DateAndTime.TimeValue(String)
  fullName: Microsoft.VisualBasic.DateAndTime.TimeValue(String)
- uid: Microsoft.VisualBasic.DateAndTime.Today
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Today
  nameWithType: DateAndTime.Today
  fullName: Microsoft.VisualBasic.DateAndTime.Today
- uid: Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Weekday(DateTime,FirstDayOfWeek)
  nameWithType: DateAndTime.Weekday(DateTime,FirstDayOfWeek)
  fullName: Microsoft.VisualBasic.DateAndTime.Weekday(DateTime,FirstDayOfWeek)
- uid: Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: WeekdayName(Int32,Boolean,FirstDayOfWeek)
  nameWithType: DateAndTime.WeekdayName(Int32,Boolean,FirstDayOfWeek)
  fullName: Microsoft.VisualBasic.DateAndTime.WeekdayName(Int32,Boolean,FirstDayOfWeek)
- uid: Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Year(DateTime)
  nameWithType: DateAndTime.Year(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Year(DateTime)
- uid: Microsoft.VisualBasic.DateAndTime.DateAdd*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateAdd
  nameWithType: DateAndTime.DateAdd
- uid: Microsoft.VisualBasic.DateAndTime.DateDiff*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateDiff
  nameWithType: DateAndTime.DateDiff
- uid: Microsoft.VisualBasic.DateAndTime.DatePart*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DatePart
  nameWithType: DateAndTime.DatePart
- uid: Microsoft.VisualBasic.DateAndTime.DateSerial*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateSerial
  nameWithType: DateAndTime.DateSerial
- uid: Microsoft.VisualBasic.DateAndTime.DateString*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateString
  nameWithType: DateAndTime.DateString
- uid: Microsoft.VisualBasic.DateAndTime.DateValue*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateValue
  nameWithType: DateAndTime.DateValue
- uid: Microsoft.VisualBasic.DateAndTime.Day*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Day
  nameWithType: DateAndTime.Day
- uid: Microsoft.VisualBasic.DateAndTime.Hour*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Hour
  nameWithType: DateAndTime.Hour
- uid: Microsoft.VisualBasic.DateAndTime.Minute*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Minute
  nameWithType: DateAndTime.Minute
- uid: Microsoft.VisualBasic.DateAndTime.Month*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Month
  nameWithType: DateAndTime.Month
- uid: Microsoft.VisualBasic.DateAndTime.MonthName*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: MonthName
  nameWithType: DateAndTime.MonthName
- uid: Microsoft.VisualBasic.DateAndTime.Now*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Now
  nameWithType: DateAndTime.Now
- uid: Microsoft.VisualBasic.DateAndTime.Second*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Second
  nameWithType: DateAndTime.Second
- uid: Microsoft.VisualBasic.DateAndTime.TimeOfDay*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeOfDay
  nameWithType: DateAndTime.TimeOfDay
- uid: Microsoft.VisualBasic.DateAndTime.Timer*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Timer
  nameWithType: DateAndTime.Timer
- uid: Microsoft.VisualBasic.DateAndTime.TimeSerial*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeSerial
  nameWithType: DateAndTime.TimeSerial
- uid: Microsoft.VisualBasic.DateAndTime.TimeString*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeString
  nameWithType: DateAndTime.TimeString
- uid: Microsoft.VisualBasic.DateAndTime.TimeValue*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeValue
  nameWithType: DateAndTime.TimeValue
- uid: Microsoft.VisualBasic.DateAndTime.Today*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Today
  nameWithType: DateAndTime.Today
- uid: Microsoft.VisualBasic.DateAndTime.Weekday*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Weekday
  nameWithType: DateAndTime.Weekday
- uid: Microsoft.VisualBasic.DateAndTime.WeekdayName*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: WeekdayName
  nameWithType: DateAndTime.WeekdayName
- uid: Microsoft.VisualBasic.DateAndTime.Year*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Year
  nameWithType: DateAndTime.Year
