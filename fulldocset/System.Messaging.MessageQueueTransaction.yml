### YamlMime:ManagedReference
items:
- uid: System.Messaging.MessageQueueTransaction
  id: MessageQueueTransaction
  children:
  - System.Messaging.MessageQueueTransaction.#ctor
  - System.Messaging.MessageQueueTransaction.Abort
  - System.Messaging.MessageQueueTransaction.Begin
  - System.Messaging.MessageQueueTransaction.Commit
  - System.Messaging.MessageQueueTransaction.Dispose
  - System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)
  - System.Messaging.MessageQueueTransaction.Finalize
  - System.Messaging.MessageQueueTransaction.Status
  langs:
  - csharp
  name: MessageQueueTransaction
  nameWithType: MessageQueueTransaction
  fullName: System.Messaging.MessageQueueTransaction
  type: Class
  summary: "提供訊息佇列內部交易。"
  remarks: "若要傳送或接收訊息的交易的一部份，您可以使用 MessageQueueTransaction 類別建立的交易，並將它傳遞給的多載<xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName>方法或<xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName>採用方法`transaction`參數。</xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName> </xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName> 當做交易之一部分傳送的訊息必須傳送至交易式佇列。 使用指定的交易必須接收從交易式佇列接收訊息。       除了<xref:System.Messaging.MessageQueue.Receive%2A>方法，您可以接收訊息與指定的識別項或指定的相互關聯識別項。</xref:System.Messaging.MessageQueue.Receive%2A> 請參閱<xref:System.Messaging.MessageQueue.ReceiveById%2A>和<xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A>選擇性地從交易式佇列接收訊息的詳細資訊的方法。</xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> </xref:System.Messaging.MessageQueue.ReceiveById%2A>       如果交易已認可，則會移除傳送至交易式佇列的訊息。 同樣地，從交易式佇列接收的訊息會傳回佇列中，如果交易已回復。       如果您 MessageQueueTransaction 具現化，並將它傳遞至適用於多載的<xref:System.Messaging.MessageQueue.Send%2A>方法或<xref:System.Messaging.MessageQueue.Receive%2A>方法傳送至非交易式佇列的訊息或接收來自非交易式佇列，該方法的訊息會擲回的例外狀況，指出 「 錯誤用法交易 」。</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue.Send%2A>       [Visual Basic]      MessageQueueTransaction 執行緒 apartment 感知的功能，因此，如果已 apartment 狀態`STA`，您無法使用多個執行緒中的交易。 Visual Basic 會將主執行緒的狀態`STA`，因此您必須先套用<xref:System.MTAThreadAttribute>中`Main`副程式。</xref:System.MTAThreadAttribute> 否則，傳送異動式訊息，使用另一個執行緒就會擲回<xref:System.Messaging.MessageQueueException>例外狀況。</xref:System.Messaging.MessageQueueException> 您套用<xref:System.MTAThreadAttribute>使用下列的片段。</xref:System.MTAThreadAttribute>      ```   <System.MTAThreadAttribute>    public sub Main()   ```      ```vb#      ```"
  syntax:
    content: 'public class MessageQueueTransaction : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.#ctor
  id: '#ctor'
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: MessageQueueTransaction()
  nameWithType: MessageQueueTransaction.MessageQueueTransaction()
  fullName: System.Messaging.MessageQueueTransaction.MessageQueueTransaction()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "初始化的新執行個體<xref href=&quot;System.Messaging.MessageQueueTransaction&quot;></xref>類別。"
  remarks: "這個建構函式設定<xref:System.Messaging.MessageQueueTransaction.Status%2A>屬性`Initialized`。</xref:System.Messaging.MessageQueueTransaction.Status%2A>"
  syntax:
    content: public MessageQueueTransaction ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Abort
  id: Abort
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Abort()
  nameWithType: MessageQueueTransaction.Abort()
  fullName: System.Messaging.MessageQueueTransaction.Abort()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "復原暫止的內部交易。"
  remarks: "中止標示<xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</xref:System.Messaging.MessageQueueTransaction.Begin%2A>呼叫處開始的程序沒有成功完成       一般而言，一個會呼叫<xref:System.Messaging.MessageQueueTransaction.Begin%2A>內`Try...Catch`例外狀況處理區塊中，將呼叫<xref:System.Messaging.MessageQueueTransaction.Commit%2A>中`Try`子句，而且在中止呼叫`Catch`子句。</xref:System.Messaging.MessageQueueTransaction.Commit%2A> </xref:System.Messaging.MessageQueueTransaction.Begin%2A>       中止回復整個交易。 這包括傳送或接收至<xref:System.Messaging.MessageQueueTransaction.Begin%2A>。</xref:System.Messaging.MessageQueueTransaction.Begin%2A>呼叫之後的所有訊息"
  syntax:
    content: public void Abort ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Abort*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "您嘗試復原的內部交易尚未啟動。"
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "將內部訊息佇列發生錯誤。"
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Begin
  id: Begin
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Begin()
  nameWithType: MessageQueueTransaction.Begin()
  fullName: System.Messaging.MessageQueueTransaction.Begin()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "開始新的訊息佇列內部交易。"
  remarks: "開始會認可或回復，根據成功的交易處理的開始標記。 如果在處理期間發生例外狀況，會回復整個交易。 這包括所有的訊息傳送或接收 Begin 呼叫之後。       一般而言，其中一個會呼叫內開始`Try...Catch`例外狀況處理區塊中，將呼叫<xref:System.Messaging.MessageQueueTransaction.Commit%2A>中`Try`子句，而呼叫<xref:System.Messaging.MessageQueueTransaction.Abort%2A>中`Catch`子句。</xref:System.Messaging.MessageQueueTransaction.Abort%2A> </xref:System.Messaging.MessageQueueTransaction.Commit%2A>"
  syntax:
    content: public void Begin ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Begin*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已啟動交易。"
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "將內部訊息佇列發生錯誤。"
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Commit
  id: Commit
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Commit()
  nameWithType: MessageQueueTransaction.Commit()
  fullName: System.Messaging.MessageQueueTransaction.Commit()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "認可擱置中的內部交易。"
  remarks: "認可標示<xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</xref:System.Messaging.MessageQueueTransaction.Begin%2A>呼叫處開始處理成功完成 如果發生例外狀況的呼叫之間<xref:System.Messaging.MessageQueueTransaction.Begin%2A>且認可的呼叫，整個交易都會回復。</xref:System.Messaging.MessageQueueTransaction.Begin%2A> 這包括傳送或接收至<xref:System.Messaging.MessageQueueTransaction.Begin%2A>。</xref:System.Messaging.MessageQueueTransaction.Begin%2A>呼叫之後的所有訊息       一般而言，一個會呼叫<xref:System.Messaging.MessageQueueTransaction.Begin%2A>內`Try...Catch`例外狀況處理區塊中，放在認可呼叫`Try`子句，而呼叫<xref:System.Messaging.MessageQueueTransaction.Abort%2A>中`Catch`子句。</xref:System.Messaging.MessageQueueTransaction.Abort%2A> </xref:System.Messaging.MessageQueueTransaction.Begin%2A>"
  syntax:
    content: public void Commit ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Commit*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "您嘗試認可的交易尚未啟動。"
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "將內部訊息佇列發生錯誤。"
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Dispose
  id: Dispose
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Dispose()
  nameWithType: MessageQueueTransaction.Dispose()
  fullName: System.Messaging.MessageQueueTransaction.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "所使用的資源全部釋出<xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref>。"
  remarks: "呼叫 Dispose 允許所使用的資源<xref:System.Messaging.MessageQueueTransaction>都重新配置用於其他用途。</xref:System.Messaging.MessageQueueTransaction> 如需有關`Dispose`，請參閱[清除 Unmanaged 資源上](~/add/includes/ajax-current-ext-md.md)。       任何暫止的內部交易都回復處置。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MessageQueueTransaction.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueTransaction.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "所使用的 unmanaged 的資源釋出<xref href=&quot;System.Messaging.MessageQueueTransaction&quot;></xref>並選擇性釋放 managed 的資源。"
  remarks: "這個方法會呼叫公用<xref:System.Messaging.MessageQueueTransaction.Dispose%2A>方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> </xref:System.Messaging.MessageQueueTransaction.Dispose%2A> `Dispose`叫用受保護`Dispose(Boolean)`方法`disposing`參數設定為`true`。 <xref:System.Object.Finalize%2A>叫用`Dispose`與`disposing`設`false`。</xref:System.Object.Finalize%2A>       當`disposing`參數是`true`，這個方法的任何 managed 物件所持有的資源全部釋出這個<xref:System.Messaging.MessageQueueTransaction>參考。</xref:System.Messaging.MessageQueueTransaction> 這個方法會叫用`Dispose`每個參考物件的方法。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>表示釋放 managed 和 unmanaged 資源，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>表示只釋放 unmanaged 的資源。"
  overload: System.Messaging.MessageQueueTransaction.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Finalize
  id: Finalize
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Finalize()
  nameWithType: MessageQueueTransaction.Finalize()
  fullName: System.Messaging.MessageQueueTransaction.Finalize()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "釋放目前的執行個體所持有的資源。"
  remarks: "這個方法會覆寫<xref:System.Object.Finalize%2A?displayProperty=fullName>.</xref:System.Object.Finalize%2A?displayProperty=fullName> 應用程式程式碼不應該呼叫這個方法。物件的 Finalize 方法會自動叫用記憶體回收期間，除非已停用記憶體回收行程的最終處理的呼叫所<xref:System.GC.SuppressFinalize%2A?displayProperty=fullName>方法。</xref:System.GC.SuppressFinalize%2A?displayProperty=fullName>       如需詳細資訊，請參閱[Finalize 方法和解構函式](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70)，[清除 Unmanaged 資源上](~/add/includes/ajax-current-ext-md.md)，和[覆寫 Finalize 方法](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)。"
  syntax:
    content: ~MessageQueueTransaction ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Status
  id: Status
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Status
  nameWithType: MessageQueueTransaction.Status
  fullName: System.Messaging.MessageQueueTransaction.Status
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得交易的狀態。"
  remarks: "執行個體時<xref:System.Messaging.MessageQueueTransaction>已建立類別，建構函式來設定狀態`Initialized`。</xref:System.Messaging.MessageQueueTransaction> 呼叫之後<xref:System.Messaging.MessageQueueTransaction.Begin%2A>之前呼叫，但<xref:System.Messaging.MessageQueueTransaction.Commit%2A>或<xref:System.Messaging.MessageQueueTransaction.Abort%2A>，狀態是  `Pending`。</xref:System.Messaging.MessageQueueTransaction.Abort%2A> </xref:System.Messaging.MessageQueueTransaction.Commit%2A> </xref:System.Messaging.MessageQueueTransaction.Begin%2A>"
  syntax:
    content: public System.Messaging.MessageQueueTransactionStatus Status { get; }
    return:
      type: System.Messaging.MessageQueueTransactionStatus
      description: "其中一個<xref href=&quot;System.Messaging.MessageQueueTransactionStatus&quot;></xref>值，指出是否在交易已認可，中止時，初始化，或已暫止。"
  overload: System.Messaging.MessageQueueTransaction.Status*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.Messaging.MessageQueueTransaction.#ctor
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: MessageQueueTransaction()
  nameWithType: MessageQueueTransaction.MessageQueueTransaction()
  fullName: System.Messaging.MessageQueueTransaction.MessageQueueTransaction()
- uid: System.Messaging.MessageQueueTransaction.Abort
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Abort()
  nameWithType: MessageQueueTransaction.Abort()
  fullName: System.Messaging.MessageQueueTransaction.Abort()
- uid: System.Messaging.MessageQueueTransaction.Begin
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Begin()
  nameWithType: MessageQueueTransaction.Begin()
  fullName: System.Messaging.MessageQueueTransaction.Begin()
- uid: System.Messaging.MessageQueueTransaction.Commit
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Commit()
  nameWithType: MessageQueueTransaction.Commit()
  fullName: System.Messaging.MessageQueueTransaction.Commit()
- uid: System.Messaging.MessageQueueTransaction.Dispose
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Dispose()
  nameWithType: MessageQueueTransaction.Dispose()
  fullName: System.Messaging.MessageQueueTransaction.Dispose()
- uid: System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MessageQueueTransaction.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueTransaction.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.MessageQueueTransaction.Finalize
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Finalize()
  nameWithType: MessageQueueTransaction.Finalize()
  fullName: System.Messaging.MessageQueueTransaction.Finalize()
- uid: System.Messaging.MessageQueueTransaction.Status
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Status
  nameWithType: MessageQueueTransaction.Status
  fullName: System.Messaging.MessageQueueTransaction.Status
- uid: System.Messaging.MessageQueueTransactionStatus
  parent: System.Messaging
  isExternal: false
  name: MessageQueueTransactionStatus
  nameWithType: MessageQueueTransactionStatus
  fullName: System.Messaging.MessageQueueTransactionStatus
- uid: System.Messaging.MessageQueueTransaction.#ctor*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: MessageQueueTransaction
  nameWithType: MessageQueueTransaction.MessageQueueTransaction
- uid: System.Messaging.MessageQueueTransaction.Abort*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Abort
  nameWithType: MessageQueueTransaction.Abort
- uid: System.Messaging.MessageQueueTransaction.Begin*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Begin
  nameWithType: MessageQueueTransaction.Begin
- uid: System.Messaging.MessageQueueTransaction.Commit*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Commit
  nameWithType: MessageQueueTransaction.Commit
- uid: System.Messaging.MessageQueueTransaction.Dispose*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Dispose
  nameWithType: MessageQueueTransaction.Dispose
- uid: System.Messaging.MessageQueueTransaction.Finalize*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Finalize
  nameWithType: MessageQueueTransaction.Finalize
- uid: System.Messaging.MessageQueueTransaction.Status*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Status
  nameWithType: MessageQueueTransaction.Status
