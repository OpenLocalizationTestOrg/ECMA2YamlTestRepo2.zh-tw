### YamlMime:ManagedReference
items:
- uid: System.Security.Claims.Claim
  id: Claim
  children:
  - System.Security.Claims.Claim.#ctor(System.IO.BinaryReader)
  - System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim)
  - System.Security.Claims.Claim.#ctor(System.IO.BinaryReader,System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim,System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.Claim.#ctor(System.String,System.String)
  - System.Security.Claims.Claim.#ctor(System.String,System.String,System.String)
  - System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String)
  - System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String)
  - System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.Claim.Clone
  - System.Security.Claims.Claim.Clone(System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.Claim.CustomSerializationData
  - System.Security.Claims.Claim.Issuer
  - System.Security.Claims.Claim.OriginalIssuer
  - System.Security.Claims.Claim.Properties
  - System.Security.Claims.Claim.Subject
  - System.Security.Claims.Claim.ToString
  - System.Security.Claims.Claim.Type
  - System.Security.Claims.Claim.Value
  - System.Security.Claims.Claim.ValueType
  - System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter,System.Byte[])
  langs:
  - csharp
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
  type: Class
  summary: "表示的宣告。"
  remarks: "宣告是由簽發者主旨有關的陳述式。 宣告表示主體的屬性，可用於驗證和授權的作業內容。 主體和簽發者是這兩個實體的身分識別案例的一部分。 一些典型的例子的主旨是︰ 使用者、 應用程式或服務、 裝置或電腦。 簽發者的一些典型範例是︰ 作業系統、 應用程式。 服務、 角色提供者、 身分識別提供者或同盟提供者。 簽發者傳遞宣告發行安全性權杖，通常透過安全性權杖服務 (STS)。 (在 WIF，您可以藉由衍生自建置 STS<xref:System.IdentityModel.SecurityTokenService>類別)</xref:System.IdentityModel.SecurityTokenService>在某些情況下，主體屬性儲存在資源直接可以擴充的收到來自簽發者的宣告集合。 宣告可以評估以判斷資料的存取權限及其他授權的過程中保護的資源，並也可用來進行，或有關主旨 express 驗證決策。       從.NET 4.5 開始，Windows Identity Foundation (WIF) 類別，實作宣告型身分識別，已完全整合到.NET Framework。 宣告概念是由宣告類別實作。       下列程式碼說明宣告類別的重要屬性:-<xref:System.Security.Claims.Claim.Type%2A>屬性是包含宣告的語意資訊的字串 (通常是 URI)，它會告訴您的宣告值的表示。</xref:System.Security.Claims.Claim.Type%2A> 例如，具有宣告類型的宣告<xref:System.Security.Claims.ClaimTypes.GivenName>(「 http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname 」) 代表使用者的名字。</xref:System.Security.Claims.ClaimTypes.GivenName> 值<xref:System.Security.Claims.Claim.Type%2A>屬性可以是其中一個定義中的已知宣告型別<xref:System.Security.Claims.ClaimTypes>類別，或它可以是任意 URI 所定義的簽發者。</xref:System.Security.Claims.ClaimTypes> </xref:System.Security.Claims.Claim.Type%2A> 例如，&quot;urn: spendinglimit&quot;的宣告類型可能代表使用者屬性的簽發者的商務內容中有意義。      -<xref:System.Security.Claims.Claim.Value%2A>屬性包含宣告的值。</xref:System.Security.Claims.Claim.Value%2A> 為了減少相依性並簡化管理，在 WIF 中的宣告的值是僅以字串表示。 對於更複雜的數值類型，建議您使用標準的 XML 結構描述類型，表示值是預定要序列化成以及從字串還原序列化的方式。      -<xref:System.Security.Claims.Claim.ValueType%2A>屬性包含識別值的類型資訊的字串。</xref:System.Security.Claims.Claim.ValueType%2A> 這個屬性應該用來了解值的格式，並提供如何將它還原序列化的相關資訊。 如果您的方案需要複雜的實值類型，建議您使用標準的 XML 結構描述型別中<xref:System.Security.Claims.Claim.ValueType%2A>屬性，指出如何<xref:System.Security.Claims.Claim.Value%2A>屬性是用來序列化，從字串還原序列化。</xref:System.Security.Claims.Claim.Value%2A> </xref:System.Security.Claims.Claim.ValueType%2A>      -<xref:System.Security.Claims.Claim.Subject%2A>屬性是<xref:System.Security.Claims.ClaimsIdentity>物件，表示宣告主體。</xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.Claim.Subject%2A> 宣告主體相關的宣告會判斷提示是實體 （通常要求資源的存取權限的使用者）。 <xref:System.Security.Claims.ClaimsIdentity>包含，其屬性，包括描述屬性的宣告的集合和屬性主體為要通過證明，由一或多個簽發者。</xref:System.Security.Claims.ClaimsIdentity>      -<xref:System.Security.Claims.Claim.Issuer%2A>屬性包含之實體的發出宣告的名稱。</xref:System.Security.Claims.Claim.Issuer%2A> 宣告簽發者都會在 WIF 的字串，包含取自由簽發者名稱登錄所維護的已知的簽發者清單的名稱。 簽發者名稱登錄是從<xref:System.IdentityModel.Tokens.IssuerNameRegistry>類別</xref:System.IdentityModel.Tokens.IssuerNameRegistry>衍生類別的執行個體 簽發者名稱登錄的名稱相關聯助憶鍵來驗證相對應的簽發者所產生的語彙基元的簽章所需的加密編譯內容。 例如， <xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry>.NET 4.5 現成可用類別會將每個簽發者的助憶鍵名稱關聯其相對應的 X.509 憑證。</xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry> 在啟動時由簽發者名稱登錄通常建置的已知的簽發者清單。 使用的清單<xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry>應用程式組態檔中指定。</xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry>      -<xref:System.Security.Claims.Claim.OriginalIssuer%2A>屬性包含原始簽發宣告之實體的名稱。</xref:System.Security.Claims.Claim.OriginalIssuer%2A> 這個屬性被設計為 dbtype_iunknown，宣告才會透過多個簽發者呈現至 RP 應用程式中，用戶端例如同盟案例。 您可以檢查<xref:System.Security.Claims.Claim.OriginalIssuer%2A>屬性來判斷原本發出宣告的實體。</xref:System.Security.Claims.Claim.OriginalIssuer%2A> 名稱來自已知的簽發者簽發者名稱登錄中，如同的情況所維護的清單<xref:System.Security.Claims.Claim.Issuer%2A>屬性。</xref:System.Security.Claims.Claim.Issuer%2A>"
  example:
  - "The following example extracts the claims associated to the authenticated user performing an HTTP request and writes them in the HTTP response. The current user is read from the <xref:System.Web.HttpContext> as a <xref:System.Security.Claims.ClaimsPrincipal> and the claims are read from it. The claims are then written to HTTP the response.  \n  \n```c#  \nClaimsPrincipal principal = HttpContext.Current.User as ClaimsPrincipal;  \nif (null != principal)  \n{  \n   foreach (Claim claim in principal.Claims)  \n   {  \n      Response.Write(\"CLAIM TYPE: \" + claim.Type + \"; CLAIM VALUE: \" + claim.Value + \"</br>\");  \n   }  \n  \n}  \n  \n```"
  syntax:
    content: public class Claim
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.IO.BinaryReader)
  id: '#ctor(System.IO.BinaryReader)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(BinaryReader)
  nameWithType: Claim.Claim(BinaryReader)
  fullName: System.Security.Claims.Claim.Claim(BinaryReader)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: public Claim (System.IO.BinaryReader reader);
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "即將加入。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim)
  id: '#ctor(System.Security.Claims.Claim)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(Claim)
  nameWithType: Claim.Claim(Claim)
  fullName: System.Security.Claims.Claim.Claim(Claim)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Claims.Claim&quot;></xref>類別。"
  syntax:
    content: protected Claim (System.Security.Claims.Claim other);
    parameters:
    - id: other
      type: System.Security.Claims.Claim
      description: "安全性宣告。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.IO.BinaryReader,System.Security.Claims.ClaimsIdentity)
  id: '#ctor(System.IO.BinaryReader,System.Security.Claims.ClaimsIdentity)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(BinaryReader,ClaimsIdentity)
  nameWithType: Claim.Claim(BinaryReader,ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(BinaryReader,ClaimsIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Claims.Claim&quot;></xref>類別指定的讀取器和主旨。"
  syntax:
    content: public Claim (System.IO.BinaryReader reader, System.Security.Claims.ClaimsIdentity subject);
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "二進位讀取器。"
    - id: subject
      type: System.Security.Claims.ClaimsIdentity
      description: "這個宣告描述的主旨。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim,System.Security.Claims.ClaimsIdentity)
  id: '#ctor(System.Security.Claims.Claim,System.Security.Claims.ClaimsIdentity)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(Claim,ClaimsIdentity)
  nameWithType: Claim.Claim(Claim,ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(Claim,ClaimsIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Claims.Claim&quot;></xref>類別指定的安全性宣告和主旨。"
  syntax:
    content: protected Claim (System.Security.Claims.Claim other, System.Security.Claims.ClaimsIdentity subject);
    parameters:
    - id: other
      type: System.Security.Claims.Claim
      description: "安全性宣告。"
    - id: subject
      type: System.Security.Claims.ClaimsIdentity
      description: "這個宣告描述的主旨。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(String,String)
  nameWithType: Claim.Claim(String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Claims.Claim&quot;></xref>類別具有指定的宣告類型和值。"
  remarks: "<xref:System.Security.Claims.Claim.Subject%2A>屬性設定為`null`。</xref:System.Security.Claims.Claim.Subject%2A> <xref:System.Security.Claims.Claim.Issuer%2A><xref:System.Security.Claims.Claim.OriginalIssuer%2A>屬性會設為<xref:System.Security.Claims.ClaimsIdentity.DefaultIssuer>.</xref:System.Security.Claims.ClaimsIdentity.DefaultIssuer></xref:System.Security.Claims.Claim.OriginalIssuer%2A>和</xref:System.Security.Claims.Claim.Issuer%2A> <xref:System.Security.Claims.Claim.ValueType%2A>屬性設定為<xref:System.Security.Claims.ClaimValueTypes.String?displayProperty=fullName></xref:System.Security.Claims.ClaimValueTypes.String?displayProperty=fullName></xref:System.Security.Claims.Claim.ValueType%2A>"
  syntax:
    content: public Claim (string type, string value);
    parameters:
    - id: type
      type: System.String
      description: "宣告類型。"
    - id: value
      type: System.String
      description: "宣告值。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(String,String,String)
  nameWithType: Claim.Claim(String,String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Claims.Claim&quot;></xref>類別指定的宣告類型、 值和實值型別。"
  remarks: "<xref:System.Security.Claims.Claim.Subject%2A>屬性設定為`null`。</xref:System.Security.Claims.Claim.Subject%2A> <xref:System.Security.Claims.Claim.Issuer%2A><xref:System.Security.Claims.Claim.OriginalIssuer%2A>屬性會設為<xref:System.Security.Claims.ClaimsIdentity.DefaultIssuer>.</xref:System.Security.Claims.ClaimsIdentity.DefaultIssuer></xref:System.Security.Claims.Claim.OriginalIssuer%2A>和</xref:System.Security.Claims.Claim.Issuer%2A>"
  syntax:
    content: public Claim (string type, string value, string valueType);
    parameters:
    - id: type
      type: System.String
      description: "宣告類型。"
    - id: value
      type: System.String
      description: "宣告值。"
    - id: valueType
      type: System.String
      description: "宣告值類型。 如果這個參數是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，然後<xref href=&quot;System.Security.Claims.ClaimValueTypes.String&quot;></xref>用。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(String,String,String,String)
  nameWithType: Claim.Claim(String,String,String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Claims.Claim&quot;></xref>與指定的宣告類型、 值、 值類型和簽發者的類別。"
  remarks: "<xref:System.Security.Claims.Claim.Subject%2A>屬性設定為`null`。</xref:System.Security.Claims.Claim.Subject%2A> <xref:System.Security.Claims.Claim.OriginalIssuer%2A>屬性設定的值根據`issuer`參數。</xref:System.Security.Claims.Claim.OriginalIssuer%2A>"
  syntax:
    content: public Claim (string type, string value, string valueType, string issuer);
    parameters:
    - id: type
      type: System.String
      description: "宣告類型。"
    - id: value
      type: System.String
      description: "宣告值。"
    - id: valueType
      type: System.String
      description: "宣告值類型。 如果這個參數是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，然後<xref href=&quot;System.Security.Claims.ClaimValueTypes.String&quot;></xref>用。"
    - id: issuer
      type: System.String
      description: "宣告簽發者。 如果這個參數是空的或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，然後<xref href=&quot;System.Security.Claims.ClaimsIdentity.DefaultIssuer&quot;></xref>用。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String,System.String)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(String,String,String,String,String)
  nameWithType: Claim.Claim(String,String,String,String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String,String,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Claims.Claim&quot;></xref>與指定的宣告類型、 值、 實值型別、 簽發者和原始簽發者的類別。"
  remarks: "<xref:System.Security.Claims.Claim.Subject%2A>屬性設定為`null`。</xref:System.Security.Claims.Claim.Subject%2A>"
  syntax:
    content: public Claim (string type, string value, string valueType, string issuer, string originalIssuer);
    parameters:
    - id: type
      type: System.String
      description: "宣告類型。"
    - id: value
      type: System.String
      description: "宣告值。"
    - id: valueType
      type: System.String
      description: "宣告值類型。 如果這個參數是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，然後<xref href=&quot;System.Security.Claims.ClaimValueTypes.String&quot;></xref>用。"
    - id: issuer
      type: System.String
      description: "宣告簽發者。 如果這個參數是空的或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，然後<xref href=&quot;System.Security.Claims.ClaimsIdentity.DefaultIssuer&quot;></xref>用。"
    - id: originalIssuer
      type: System.String
      description: "宣告的原始簽發者。 如果這個參數是空的或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，然後在<> *> 屬性設定的值為<> *> 屬性。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)
  id: '#ctor(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(String,String,String,String,String,ClaimsIdentity)
  nameWithType: Claim.Claim(String,String,String,String,String,ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(String,String,String,String,String,ClaimsIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Claims.Claim&quot;></xref>類別指定的宣告類型、 值、 實值型別、 簽發者、 原始簽發者和主旨。"
  syntax:
    content: public Claim (string type, string value, string valueType, string issuer, string originalIssuer, System.Security.Claims.ClaimsIdentity subject);
    parameters:
    - id: type
      type: System.String
      description: "宣告類型。"
    - id: value
      type: System.String
      description: "宣告值。"
    - id: valueType
      type: System.String
      description: "宣告值類型。 如果這個參數是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，然後<xref href=&quot;System.Security.Claims.ClaimValueTypes.String&quot;></xref>用。"
    - id: issuer
      type: System.String
      description: "宣告簽發者。 如果這個參數是空的或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，然後<xref href=&quot;System.Security.Claims.ClaimsIdentity.DefaultIssuer&quot;></xref>用。"
    - id: originalIssuer
      type: System.String
      description: "宣告的原始簽發者。 如果這個參數是空的或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，然後在<> *> 屬性設定的值為<> *> 屬性。"
    - id: subject
      type: System.Security.Claims.ClaimsIdentity
      description: "這個宣告描述的主旨。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.Claim.Clone
  id: Clone
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Clone()
  nameWithType: Claim.Clone()
  fullName: System.Security.Claims.Claim.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "傳回新<xref href=&quot;System.Security.Claims.Claim&quot;></xref>從這個物件複製的物件。 新的宣告並沒有主體。"
  remarks: "這是淺層複製作業。 <xref:System.Security.Claims.Claim.Subject%2A>屬性的新<xref:System.Security.Claims.Claim>物件設定為`null`。</xref:System.Security.Claims.Claim> </xref:System.Security.Claims.Claim.Subject%2A>"
  syntax:
    content: public virtual System.Security.Claims.Claim Clone ();
    parameters: []
    return:
      type: System.Security.Claims.Claim
      description: "新的宣告物件。"
  overload: System.Security.Claims.Claim.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.Clone(System.Security.Claims.ClaimsIdentity)
  id: Clone(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Clone(ClaimsIdentity)
  nameWithType: Claim.Clone(ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Clone(ClaimsIdentity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "傳回新<xref href=&quot;System.Security.Claims.Claim&quot;></xref>從這個物件複製的物件。 新宣告主體設定為指定的 ClaimsIdentity。"
  remarks: "這是淺層複製作業。 <xref:System.Security.Claims.Claim.Subject%2A>屬性的新<xref:System.Security.Claims.Claim>物件設定的值為`identity`參數。</xref:System.Security.Claims.Claim> </xref:System.Security.Claims.Claim.Subject%2A>"
  syntax:
    content: public virtual System.Security.Claims.Claim Clone (System.Security.Claims.ClaimsIdentity identity);
    parameters:
    - id: identity
      type: System.Security.Claims.ClaimsIdentity
      description: "新宣告的預期的主旨。"
    return:
      type: System.Security.Claims.Claim
      description: "新的宣告物件。"
  overload: System.Security.Claims.Claim.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.CustomSerializationData
  id: CustomSerializationData
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: CustomSerializationData
  nameWithType: Claim.CustomSerializationData
  fullName: System.Security.Claims.Claim.CustomSerializationData
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual byte[] CustomSerializationData { get; }
    return:
      type: System.Byte[]
      description: "傳回<xref:System.Byte>.</xref:System.Byte>"
  overload: System.Security.Claims.Claim.CustomSerializationData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.Issuer
  id: Issuer
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Issuer
  nameWithType: Claim.Issuer
  fullName: System.Security.Claims.Claim.Issuer
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得宣告的簽發者。"
  remarks: "簽發者屬性的值是取自簽發者名稱登錄所維護的已知的簽發者清單的名稱。 簽發者名稱登錄是從<xref:System.IdentityModel.Tokens.IssuerNameRegistry>類別</xref:System.IdentityModel.Tokens.IssuerNameRegistry>衍生類別的執行個體 簽發者名稱登錄的名稱相關聯助憶鍵 （簽發者名稱） 與已驗證所需的簽章的權杖簽發者; 所產生的加密編譯內容例如，X.509 憑證。"
  syntax:
    content: public string Issuer { get; }
    return:
      type: System.String
      description: "指的是宣告簽發者名稱。"
  overload: System.Security.Claims.Claim.Issuer*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.OriginalIssuer
  id: OriginalIssuer
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: OriginalIssuer
  nameWithType: Claim.OriginalIssuer
  fullName: System.Security.Claims.Claim.OriginalIssuer
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得宣告的原始簽發者。"
  remarks: "包含原始簽發宣告之實體的名稱。 這個屬性被設計為 dbtype_iunknown，宣告才會透過多個簽發者呈現至 RP 應用程式中，用戶端例如同盟案例。       OriginalIssuer 屬性的值是取自簽發者名稱登錄所維護的已知的簽發者清單的名稱。 簽發者名稱登錄是從<xref:System.IdentityModel.Tokens.IssuerNameRegistry>類別</xref:System.IdentityModel.Tokens.IssuerNameRegistry>衍生類別的執行個體 簽發者名稱登錄的名稱相關聯助憶鍵 （簽發者名稱） 與已驗證所需的簽章的權杖簽發者; 所產生的加密編譯內容例如，X.509 憑證。       委派和同盟案例中，除了<xref:System.Security.Claims.Claim.Issuer%2A>屬性和 OriginalIssuer 屬性通常會有相同的值。</xref:System.Security.Claims.Claim.Issuer%2A> 如果 OriginalIssuer 屬性的值不同的值從<xref:System.Security.Claims.Claim.Issuer%2A>屬性宣告的原始簽發者首次發出和後續重新發行者所發行。</xref:System.Security.Claims.Claim.Issuer%2A>"
  syntax:
    content: public string OriginalIssuer { get; }
    return:
      type: System.String
      description: "指的是宣告的原始簽發者名稱。"
  overload: System.Security.Claims.Claim.OriginalIssuer*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.Properties
  id: Properties
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Properties
  nameWithType: Claim.Properties
  fullName: System.Security.Claims.Claim.Properties
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得字典，其中包含與此宣告相關聯的其他屬性。"
  remarks: "Properties 屬性提供名稱 / 值組的字典，讓中繼資料或其他資訊要與它相關聯的宣告。 產生的 SAML 權杖的宣告，此字典可以包含索引鍵指定的<xref:System.Security.Claims.ClaimProperties>類別</xref:System.Security.Claims.ClaimProperties>中的常數"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,string> Properties { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "字典，其中包含與此宣告相關聯的其他屬性。 屬性會表示為名稱 / 值組。"
  overload: System.Security.Claims.Claim.Properties*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.Subject
  id: Subject
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Subject
  nameWithType: Claim.Subject
  fullName: System.Security.Claims.Claim.Subject
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得宣告的主體。"
  remarks: "主體是了解哪種判斷提示宣告的實體。 一些典型的範例包括使用者、 應用程式或服務、 裝置或電腦。 主旨是以來表示<xref:System.Security.Claims.ClaimsIdentity>，其中包含描述該宣告的集合</xref:System.Security.Claims.ClaimsIdentity>"
  syntax:
    content: public System.Security.Claims.ClaimsIdentity Subject { get; }
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "宣告主體。"
  overload: System.Security.Claims.Claim.Subject*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.ToString
  id: ToString
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: ToString()
  nameWithType: Claim.ToString()
  fullName: System.Security.Claims.Claim.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "傳回這個字串表示<xref href=&quot;System.Security.Claims.Claim&quot;></xref>物件。"
  remarks: '所傳回的字串包含<xref:System.Security.Claims.Claim.Type%2A>的值和<xref:System.Security.Claims.Claim.Value%2A>屬性，以下列格式:。 」類型︰ 值 」。</xref:System.Security.Claims.Claim.Value%2A> </xref:System.Security.Claims.Claim.Type%2A>'
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "這個字串表示<xref href=&quot;System.Security.Claims.Claim&quot;></xref>物件。"
  overload: System.Security.Claims.Claim.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.Type
  id: Type
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Type
  nameWithType: Claim.Type
  fullName: System.Security.Claims.Claim.Type
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得宣告的宣告型別。"
  remarks: "此型別屬性會提供語意宣告的內容，也就是指出宣告是關於。 例如，具有宣告類型的宣告<xref:System.Security.Claims.ClaimTypes.GivenName>(「 http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname 」) 代表使用者的名字。</xref:System.Security.Claims.ClaimTypes.GivenName> 宣告類型通常是 URI;不過，您並不限於任何特定格式以外，它必須是可表示為字串。 只有一般的需求是宣告簽發者和宣告取用者必須同意相關宣告的意義。 常數，用來使用 Windows Identity Foundation (WIF) 的已知宣告型別都是透過<xref:System.Security.Claims.ClaimTypes>類別。</xref:System.Security.Claims.ClaimTypes> 宣告值係由<xref:System.Security.Claims.Claim.Value%2A>屬性。</xref:System.Security.Claims.Claim.Value%2A>"
  syntax:
    content: public string Type { get; }
    return:
      type: System.String
      description: "宣告類型。"
  overload: System.Security.Claims.Claim.Type*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.Value
  id: Value
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Value
  nameWithType: Claim.Value
  fullName: System.Security.Claims.Claim.Value
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得宣告的值。"
  remarks: "宣告的值是僅以字串表示。 對於更複雜的數值類型，建議您使用標準的 XML 結構描述類型，表示值用來進行序列化和還原序列化與字串的方式。       <xref:System.Security.Claims.Claim.ValueType%2A>屬性提供值的相關的基礎語法的類型資訊。</xref:System.Security.Claims.Claim.ValueType%2A> <xref:System.Security.Claims.Claim.Type%2A>屬性提供值的語意資訊; 亦即，它提供值的意義，並指出宣告消費者如何解譯它。</xref:System.Security.Claims.Claim.Type%2A>"
  syntax:
    content: public string Value { get; }
    return:
      type: System.String
      description: "宣告值。"
  overload: System.Security.Claims.Claim.Value*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.ValueType
  id: ValueType
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: ValueType
  nameWithType: Claim.ValueType
  fullName: System.Security.Claims.Claim.ValueType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得宣告的值型別。"
  remarks: "ValueType 屬性包含識別值的型別資訊的字串。 這個屬性可用來了解值的格式，並提供如何序列化和還原序列化值的相關資訊。 如果您的方案需要複雜的實值類型，建議的 ValueType 屬性中使用標準的 XML 結構描述類型，以指出如何<xref:System.Security.Claims.Claim.Value%2A>屬性用來進行序列化和從字串還原序列化。</xref:System.Security.Claims.Claim.Value%2A>"
  syntax:
    content: public string ValueType { get; }
    return:
      type: System.String
      description: "宣告值類型。"
  overload: System.Security.Claims.Claim.ValueType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter)
  id: WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: WriteTo(BinaryWriter)
  nameWithType: Claim.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.Claim.WriteTo(BinaryWriter)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: public virtual void WriteTo (System.IO.BinaryWriter writer);
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "即將加入。"
  overload: System.Security.Claims.Claim.WriteTo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter,System.Byte[])
  id: WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: WriteTo(BinaryWriter,Byte[])
  nameWithType: Claim.WriteTo(BinaryWriter,Byte[])
  fullName: System.Security.Claims.Claim.WriteTo(BinaryWriter,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "將這個<xref href=&quot;System.Security.Claims.Claim&quot;></xref>至寫入器。"
  syntax:
    content: protected virtual void WriteTo (System.IO.BinaryWriter writer, byte[] userData);
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "寫入器寫入這個宣告"
    - id: userData
      type: System.Byte[]
      description: "宣告的使用者資料"
  overload: System.Security.Claims.Claim.WriteTo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Claims.Claim.#ctor(System.IO.BinaryReader)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(BinaryReader)
  nameWithType: Claim.Claim(BinaryReader)
  fullName: System.Security.Claims.Claim.Claim(BinaryReader)
- uid: System.IO.BinaryReader
  parent: System.IO
  isExternal: true
  name: BinaryReader
  nameWithType: BinaryReader
  fullName: System.IO.BinaryReader
- uid: System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(Claim)
  nameWithType: Claim.Claim(Claim)
  fullName: System.Security.Claims.Claim.Claim(Claim)
- uid: System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: false
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: System.Security.Claims.Claim.#ctor(System.IO.BinaryReader,System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(BinaryReader,ClaimsIdentity)
  nameWithType: Claim.Claim(BinaryReader,ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(BinaryReader,ClaimsIdentity)
- uid: System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
- uid: System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim,System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(Claim,ClaimsIdentity)
  nameWithType: Claim.Claim(Claim,ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(Claim,ClaimsIdentity)
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(String,String)
  nameWithType: Claim.Claim(String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(String,String,String)
  nameWithType: Claim.Claim(String,String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String,String)
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(String,String,String,String)
  nameWithType: Claim.Claim(String,String,String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String,String,String)
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(String,String,String,String,String)
  nameWithType: Claim.Claim(String,String,String,String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String,String,String,String)
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(String,String,String,String,String,ClaimsIdentity)
  nameWithType: Claim.Claim(String,String,String,String,String,ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(String,String,String,String,String,ClaimsIdentity)
- uid: System.Security.Claims.Claim.Clone
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Clone()
  nameWithType: Claim.Clone()
  fullName: System.Security.Claims.Claim.Clone()
- uid: System.Security.Claims.Claim.Clone(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Clone(ClaimsIdentity)
  nameWithType: Claim.Clone(ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Clone(ClaimsIdentity)
- uid: System.Security.Claims.Claim.CustomSerializationData
  parent: System.Security.Claims.Claim
  isExternal: false
  name: CustomSerializationData
  nameWithType: Claim.CustomSerializationData
  fullName: System.Security.Claims.Claim.CustomSerializationData
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Claims.Claim.Issuer
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Issuer
  nameWithType: Claim.Issuer
  fullName: System.Security.Claims.Claim.Issuer
- uid: System.Security.Claims.Claim.OriginalIssuer
  parent: System.Security.Claims.Claim
  isExternal: false
  name: OriginalIssuer
  nameWithType: Claim.OriginalIssuer
  fullName: System.Security.Claims.Claim.OriginalIssuer
- uid: System.Security.Claims.Claim.Properties
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Properties
  nameWithType: Claim.Properties
  fullName: System.Security.Claims.Claim.Properties
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,String>
  nameWithType: IDictionary<String,String>
  fullName: System.Collections.Generic.IDictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.Claim.Subject
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Subject
  nameWithType: Claim.Subject
  fullName: System.Security.Claims.Claim.Subject
- uid: System.Security.Claims.Claim.ToString
  parent: System.Security.Claims.Claim
  isExternal: false
  name: ToString()
  nameWithType: Claim.ToString()
  fullName: System.Security.Claims.Claim.ToString()
- uid: System.Security.Claims.Claim.Type
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Type
  nameWithType: Claim.Type
  fullName: System.Security.Claims.Claim.Type
- uid: System.Security.Claims.Claim.Value
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Value
  nameWithType: Claim.Value
  fullName: System.Security.Claims.Claim.Value
- uid: System.Security.Claims.Claim.ValueType
  parent: System.Security.Claims.Claim
  isExternal: false
  name: ValueType
  nameWithType: Claim.ValueType
  fullName: System.Security.Claims.Claim.ValueType
- uid: System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: WriteTo(BinaryWriter)
  nameWithType: Claim.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.Claim.WriteTo(BinaryWriter)
- uid: System.IO.BinaryWriter
  parent: System.IO
  isExternal: true
  name: BinaryWriter
  nameWithType: BinaryWriter
  fullName: System.IO.BinaryWriter
- uid: System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.Claim
  isExternal: false
  name: WriteTo(BinaryWriter,Byte[])
  nameWithType: Claim.WriteTo(BinaryWriter,Byte[])
  fullName: System.Security.Claims.Claim.WriteTo(BinaryWriter,Byte[])
- uid: System.Security.Claims.Claim.#ctor*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim
  nameWithType: Claim.Claim
- uid: System.Security.Claims.Claim.Clone*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Clone
  nameWithType: Claim.Clone
- uid: System.Security.Claims.Claim.CustomSerializationData*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: CustomSerializationData
  nameWithType: Claim.CustomSerializationData
- uid: System.Security.Claims.Claim.Issuer*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Issuer
  nameWithType: Claim.Issuer
- uid: System.Security.Claims.Claim.OriginalIssuer*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: OriginalIssuer
  nameWithType: Claim.OriginalIssuer
- uid: System.Security.Claims.Claim.Properties*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Properties
  nameWithType: Claim.Properties
- uid: System.Security.Claims.Claim.Subject*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Subject
  nameWithType: Claim.Subject
- uid: System.Security.Claims.Claim.ToString*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: ToString
  nameWithType: Claim.ToString
- uid: System.Security.Claims.Claim.Type*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Type
  nameWithType: Claim.Type
- uid: System.Security.Claims.Claim.Value*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Value
  nameWithType: Claim.Value
- uid: System.Security.Claims.Claim.ValueType*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: ValueType
  nameWithType: Claim.ValueType
- uid: System.Security.Claims.Claim.WriteTo*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: WriteTo
  nameWithType: Claim.WriteTo
