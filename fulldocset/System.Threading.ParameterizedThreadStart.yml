### YamlMime:ManagedReference
items:
- uid: System.Threading.ParameterizedThreadStart
  id: ParameterizedThreadStart
  langs:
  - csharp
  name: ParameterizedThreadStart
  nameWithType: ParameterizedThreadStart
  fullName: System.Threading.ParameterizedThreadStart
  type: Delegate
  summary: "代表在執行的方法<xref href=&quot;System.Threading.Thread&quot;> </xref>。"
  remarks: "建立 managed 的執行緒時，所表示的執行緒執行的方法:-<xref:System.Threading.ThreadStart>委派傳遞給<xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName>建構函式。</xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName> </xref:System.Threading.ThreadStart>  任何方法沒有參數並傳回`void`在 C# 或`Sub`在 Visual Basic 中的程序可以表示的委派。      -A ParameterizedThreadStart 委派傳遞給<xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName>建構函式。</xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName> 具有單一參數類型的任何方法<xref:System.Object>，而且可傳回 void，在 C# 或 Visual Basic 中的子程序可代表委派。</xref:System.Object>       執行緒不會開始執行之前<xref:System.Threading.Thread.Start%2A?displayProperty=fullName>方法呼叫。</xref:System.Threading.Thread.Start%2A?displayProperty=fullName> <xref:System.Threading.ThreadStart>或 ParameterizedThreadStart 委派執行緒上叫用，委派所表示之方法的第一行中開始執行。</xref:System.Threading.ThreadStart> 如果是 ParameterizedThreadStart 委派物件傳遞至<xref:System.Threading.Thread.Start%28System.Object%29>方法傳遞給委派。</xref:System.Threading.Thread.Start%28System.Object%29>      > [!NOTE] > 可以省略 Visual Basic 和 C# 使用者<xref:System.Threading.ThreadStart>或 ParameterizedThreadStart 委派建構函式建立執行緒時。</xref:System.Threading.ThreadStart> 在 Visual Basic 使用`AddressOf`運算子傳遞自己的方法時<xref:System.Threading.Thread.%23ctor%2A>建構函式，例如`Dim t As New Thread(AddressOf ThreadProc)`。</xref:System.Threading.Thread.%23ctor%2A> 在 C# 中，只需要指定執行緒的程序的名稱。 編譯器會選擇正確的委派建構函式。      > [!NOTE] > 的第一個參數的建構函式建立時 ParameterizedThreadStart 委派執行個體方法的 c + + 中，是執行個體變數。 對於靜態方法，建構函式的第一個參數為零。 對於靜態方法，委派建構函式只需要一個參數︰ 回呼方法，類別名稱所限定的位址。       ParameterizedThreadStart 委派，並<xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>輕鬆地將資料傳遞給執行緒的程序，但這項技術是不是類型安全，因為任何物件可以傳遞至<xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>。</xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>方法多載請</xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> 將執行緒的程序與資料欄位放入背景工作物件是更穩固的方式，將資料傳遞給執行緒的程序。 如需詳細資訊，請參閱[建立執行緒和開始時間傳遞資料](~/add/includes/ajax-current-ext-md.md)。       ParameterizedThreadStart 委派支援只有一個參數。 您可以將多個資料欄位至 ParameterizedThreadStart 藉由下列其中一個參數:-的陣列。      的如果所有資料的項目都是相同類型集合類型。      位元組型別，例如<xref:System.Tuple%602>或<xref:System.Tuple%604>.</xref:System.Tuple%604> </xref:System.Tuple%602>"
  example:
  - "The following code example uses a ParameterizedThreadStart delegate with to execute a static method and an instance method. The first ParameterizedThreadStart delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method. Both methods match the ParameterizedThreadStart delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.  \n  \n> [!NOTE]\n>  The Visual Basic and C# compilers infer the ParameterizedThreadStart delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor. Thus, there is no explicit constructor call in the code.  \n  \n [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/cpp/t-system.threading.param_1.cpp)]\n [!code-vb[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/visualbasic/t-system.threading.param_1.vb)]\n [!code-cs[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/csharp/t-system.threading.param_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public delegate void ParameterizedThreadStart(object obj);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
