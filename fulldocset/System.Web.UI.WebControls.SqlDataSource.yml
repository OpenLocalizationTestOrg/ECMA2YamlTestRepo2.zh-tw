### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.SqlDataSource
  id: SqlDataSource
  children:
  - System.Web.UI.WebControls.SqlDataSource.#ctor
  - System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String)
  - System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String,System.String)
  - System.Web.UI.WebControls.SqlDataSource.CacheDuration
  - System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy
  - System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency
  - System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter
  - System.Web.UI.WebControls.SqlDataSource.ConflictDetection
  - System.Web.UI.WebControls.SqlDataSource.ConnectionString
  - System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(System.String)
  - System.Web.UI.WebControls.SqlDataSource.DataSourceMode
  - System.Web.UI.WebControls.SqlDataSource.Delete
  - System.Web.UI.WebControls.SqlDataSource.DeleteCommand
  - System.Web.UI.WebControls.SqlDataSource.DeleteCommandType
  - System.Web.UI.WebControls.SqlDataSource.Deleted
  - System.Web.UI.WebControls.SqlDataSource.DeleteParameters
  - System.Web.UI.WebControls.SqlDataSource.Deleting
  - System.Web.UI.WebControls.SqlDataSource.EnableCaching
  - System.Web.UI.WebControls.SqlDataSource.FilterExpression
  - System.Web.UI.WebControls.SqlDataSource.Filtering
  - System.Web.UI.WebControls.SqlDataSource.FilterParameters
  - System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory
  - System.Web.UI.WebControls.SqlDataSource.GetView(System.String)
  - System.Web.UI.WebControls.SqlDataSource.GetViewNames
  - System.Web.UI.WebControls.SqlDataSource.Insert
  - System.Web.UI.WebControls.SqlDataSource.InsertCommand
  - System.Web.UI.WebControls.SqlDataSource.InsertCommandType
  - System.Web.UI.WebControls.SqlDataSource.Inserted
  - System.Web.UI.WebControls.SqlDataSource.Inserting
  - System.Web.UI.WebControls.SqlDataSource.InsertParameters
  - System.Web.UI.WebControls.SqlDataSource.LoadViewState(System.Object)
  - System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString
  - System.Web.UI.WebControls.SqlDataSource.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.SqlDataSource.ProviderName
  - System.Web.UI.WebControls.SqlDataSource.SaveViewState
  - System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)
  - System.Web.UI.WebControls.SqlDataSource.SelectCommand
  - System.Web.UI.WebControls.SqlDataSource.SelectCommandType
  - System.Web.UI.WebControls.SqlDataSource.Selected
  - System.Web.UI.WebControls.SqlDataSource.Selecting
  - System.Web.UI.WebControls.SqlDataSource.SelectParameters
  - System.Web.UI.WebControls.SqlDataSource.SortParameterName
  - System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency
  - System.Web.UI.WebControls.SqlDataSource.TrackViewState
  - System.Web.UI.WebControls.SqlDataSource.Update
  - System.Web.UI.WebControls.SqlDataSource.UpdateCommand
  - System.Web.UI.WebControls.SqlDataSource.UpdateCommandType
  - System.Web.UI.WebControls.SqlDataSource.Updated
  - System.Web.UI.WebControls.SqlDataSource.UpdateParameters
  - System.Web.UI.WebControls.SqlDataSource.Updating
  langs:
  - csharp
  name: SqlDataSource
  nameWithType: SqlDataSource
  fullName: System.Web.UI.WebControls.SqlDataSource
  type: Class
  summary: "表示資料繫結控制項的 SQL 資料庫。"
  remarks: "本主題內容:-[簡介](#introduction)      -   [資料連接](#data_connections)      -   [執行資料作業](#performing_data_operations)      -   [資料提供者](#data_provider)      -   [快取](#caching)      -   [額外的功能](#additional_features)      -   [資料來源檢視](#data_source_view)      -   [宣告式語法](#declarative_syntax)<a name=&quot;introduction&quot;> </a> # # 簡介 SqlDataSource 資料來源控制項表示資料繫結控制項 SQL 關聯式資料庫中的資料。       從關聯式資料庫擷取資料，並且將顯示、 編輯和排序資料以少量或沒有程式碼在網頁上的，您可以在資料繫結控制項搭配使用 SqlDataSource 控制項。      <a name=&quot;data_connections&quot;></a># # 資料連接來連接到資料庫，則必須將<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>屬性設為有效的連接字串。</xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> SqlDataSource 可以支援任何 SQL 關聯式資料庫可以連接到使用的 ADO.NET 提供者，例如`SqlClient`， `OleDb`， `Odbc`，或`OracleClient`提供者。 如需如何保護連接字串資訊，請參閱[How To︰ 使用資料來源的控制項時的安全連接字串](~/add/includes/ajax-current-ext-md.md)。       若要從基礎資料庫中擷取資料，設定<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>SQL 查詢的屬性。</xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 如果 SqlDataSource 相關聯的資料庫支援預存程序，您可以設定<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>預存程序名稱的屬性。</xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 您指定的 SQL 查詢也可以是參數化的查詢。 您可以加入<xref:System.Web.UI.WebControls.Parameter>參數化查詢相關聯的物件<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>集合。</xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.Parameter> 如需有關參數化的 SQL 查詢，其語法的詳細資訊，請參閱[使用參數與篩選的資料來源控制項](~/add/includes/ajax-current-ext-md.md)。       SqlDataSource 控制項擷取資料時<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法呼叫。</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 這個方法會提供以程式設計方式存取所指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>屬性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>繫結至 SqlDataSource 控制項自動呼叫方法時其<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>方法呼叫。</xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> </xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 如果您設定<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSourceID%2A>屬性的資料繫結控制項，控制項自動繫結至資料來自資料來源，視需要。</xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSourceID%2A> 設定`DataSourceID`屬性是建議的方法繫結<xref:System.Web.UI.WebControls.ObjectDataSource>資料繫結控制項的控制項。</xref:System.Web.UI.WebControls.ObjectDataSource> 或者，您可以使用`DataSource`屬性，但接著您必須明確地呼叫<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>資料繫結控制項的方法。</xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> 資料繫結控制項，可以使用 SqlDataSource 的一些範例包括<xref:System.Web.UI.WebControls.DataGrid>， <xref:System.Web.UI.WebControls.DetailsView>， <xref:System.Web.UI.WebControls.DataList>，和<xref:System.Web.UI.WebControls.DropDownList>。</xref:System.Web.UI.WebControls.DropDownList> </xref:System.Web.UI.WebControls.DataList> </xref:System.Web.UI.WebControls.DetailsView> </xref:System.Web.UI.WebControls.DataGrid> 您可以呼叫<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法，以程式設計方式在任何時間，來擷取基礎資料庫中的資料。</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>       在宣告式和程式設計 ASP.NET 案例中，您可以設定<xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A>id SqlDataSource 控制項的資料繫結控制項的屬性。</xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> 您也可以指派至 SqlDataSource 類別的執行個體<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A>資料繫結控制項的屬性。</xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A> 如需繫結至資料來源控制項的資料繫結控制項的詳細資訊，請參閱[ASP.NET 資料存取選項](http://msdn.microsoft.com/en-us/a5ff235e-397f-4bbe-9bfe-2720b6e7ab9d)。      <a name=&quot;performing_data_operations&quot;></a># # 執行資料作業取決於基礎功能資料庫產品和 SqlDataSource 類別的執行個體的組態，您可以執行資料作業，例如更新、 插入和刪除。 若要執行這些資料作業，設定適當的命令文字和任何您想要執行的作業相關聯的參數。 比方說，更新作業中，設定<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>SQL 字串或預存程序名稱的屬性和加入任何必要的參數，以便<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>集合。</xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> 在執行更新時<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>呼叫方法時，可以明確地您的程式碼也會自動由資料繫結控制項。</xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> 遵循相同的一般模式<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>和<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>作業。</xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> </xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>       SQL 查詢和使用中的命令<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>， <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>， <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>，和<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>屬性可以參數化。</xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> </xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> </xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> </xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 這表示查詢或命令可以使用預留位置，而不是常值，將預留位置繫結至應用程式或使用者定義的變數。 您可以在 SQL 查詢中結合參數，工作階段變數時，會在 Web Form 網頁的查詢字串傳遞的值，而其他伺服器控制項，以及其他更多的屬性值。 如需如何使用 SqlDataSource SQL 查詢中使用參數的詳細資訊，請參閱[使用參數與篩選的資料來源控制項](../Topic/Using%20Parameters%20with%20Data%20Source%20Controls%20for%20Filtering.md)和[使用參數與 SqlDataSource 控制項](~/add/includes/ajax-current-ext-md.md)。      > [!NOTE] > 根據預設，如果其中一個參數為`null`當您執行`Select`命令時，會傳回任何資料，就會擲回任何例外狀況。 您可以變更此行為，藉由設定<xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A>屬性`false`。</xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A>      <a name=&quot;data_provider&quot;></a># # 資料提供者根據預設，SqlDataSource 控制項搭配.NET Framework Data Provider for SQL Server，但 SqlDataSource 不是 Microsoft SQL Server 特有。 您可以連接的 SqlDataSource 控制項與受管理的 ADO.NET 提供者是任何資料庫產品。 當搭配<xref:System.Data.OleDb?displayProperty=fullName>提供者，SqlDataSource 可以使用任何 OLE DB 相容資料庫。</xref:System.Data.OleDb?displayProperty=fullName> 當搭配<xref:System.Data.Odbc?displayProperty=fullName>提供者，SqlDataSource 可以搭配任何 ODBC 驅動程式和資料庫，包括 IBM DB2、 MySQL 和 PostgreSQL。</xref:System.Data.Odbc?displayProperty=fullName> 當搭配<xref:System.Data.OracleClient?displayProperty=fullName>提供者，SqlDataSource 可與 Oracle 8.1.7 資料庫及更新版本。</xref:System.Data.OracleClient?displayProperty=fullName> 允許的提供者清單中註冊`DbProviderFactories`組態檔，請在 Machine.config 或 Web.config 檔案中區段。 如需詳細資訊，請參閱[使用 SqlDataSource 控制項的選取資料](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;caching&quot;></a># # 快取如果您顯示資料在頁面上使用 SqlDataSource 控制項，您可以使用資料快取的資料來源控制項的功能，以增加網頁的效能。 快取可減少資料庫伺服器，但會犧牲 Web 伺服器上記憶體的處理負載在大部分情況下，這是理想的取捨。 SqlDataSource 自動會快取的資料時<xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A>屬性設定為`true`和<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>屬性設定為快取會儲存資料快取項目會被捨棄之前的秒數。</xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> 您也可以指定<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>和選擇性<xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A>值。</xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A> </xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>      <a name=&quot;additional_features&quot;></a># # 額外的功能 SqlDataSource 提供額外的功能，如下表所示。      |功能 |需求 |  |----------------|------------------|  |快取 |<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>屬性設定為<xref:System.Web.UI.WebControls.SqlDataSourceMode>值<xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A>屬性`true`，和<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>屬性，根據您想要針對您快取資料的快取行為。 |  |刪除 |設定<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>屬性可用來刪除資料的 SQL 陳述式。</xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> </xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> </xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> </xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 這個陳述式通常參數化。 |  |篩選 |設定<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceMode>值。</xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 將<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>屬性設定為用來呼叫<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法時，篩選資料的篩選運算式。 |  |插入 |設定<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>來插入資料的 SQL 陳述式的屬性。</xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> </xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> </xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 這個陳述式通常參數化。 |  |分頁 |Not 目前支援 SqlDataSource，但是<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>屬性設<xref:System.Web.UI.WebControls.SqlDataSourceMode>值時，某些資料繫結控制項，例如<xref:System.Web.UI.WebControls.GridView>，會支援分頁。 |  |選取 |用來擷取資料的 SQL 陳述式中設定<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>屬性。 |  |排序 |將<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>屬性設為<xref:System.Web.UI.WebControls.SqlDataSourceMode>。 |  |更新 |設定<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>屬性用來更新資料的 SQL 陳述式。</xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> </xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> </xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>   </xref:System.Web.UI.WebControls.GridView></xref:System.Web.UI.WebControls.SqlDataSourceMode></xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 這個陳述式通常參數化。 |     <a name=&quot;data_source_view&quot;> </a> # # 資料來源檢視與所有的資料來源控制項，SqlDataSource 控制項是相關聯的資料來源檢視類別。 SqlDataSource 控制項，則只有一個相關聯<xref:System.Web.UI.WebControls.SqlDataSourceView>，一律會命名為`Table`。</xref:System.Web.UI.WebControls.SqlDataSourceView>       沒有任何視覺化呈現的 SqlDataSource 控制項，它會實作成控制項，以便您可以建立以宣告方式，並選擇性地允許它參與的狀態管理。 如此一來，SqlDataSource 不支援視覺化功能，例如所提供的適用<xref:System.Web.UI.DataSourceControl.EnableTheming%2A>或<xref:System.Web.UI.DataSourceControl.SkinID%2A>屬性。</xref:System.Web.UI.DataSourceControl.SkinID%2A> </xref:System.Web.UI.DataSourceControl.EnableTheming%2A>      <a name=&quot;declarative_syntax&quot;></a>    ## Declarative Syntax      ```   <asp:SqlDataSource       CacheDuration=&quot;string|Infinite&quot;       CacheExpirationPolicy=&quot;Absolute|Sliding&quot;       CacheKeyDependency=&quot;string&quot;       CancelSelectOnNullParameter=&quot;True|False&quot;       ConflictDetection=&quot;OverwriteChanges|CompareAllValues&quot;       ConnectionString=&quot;string&quot;       DataSourceMode=&quot;DataReader|DataSet&quot;       DeleteCommand=&quot;string&quot;       DeleteCommandType=&quot;Text|StoredProcedure&quot;       EnableCaching=&quot;True|False&quot;       EnableTheming=&quot;True|False&quot;       EnableViewState=&quot;True|False&quot;       FilterExpression=&quot;string&quot;       ID=&quot;string&quot;       InsertCommand=&quot;string&quot;       InsertCommandType=&quot;Text|StoredProcedure&quot;       OldValuesParameterFormatString=&quot;string&quot;       OnDataBinding=&quot;DataBinding event handler&quot;       OnDeleted=&quot;Deleted event handler&quot;       OnDeleting=&quot;Deleting event handler&quot;       OnDisposed=&quot;Disposed event handler&quot;       OnFiltering=&quot;Filtering event handler&quot;       OnInit=&quot;Init event handler&quot;       OnInserted=&quot;Inserted event handler&quot;       OnInserting=&quot;Inserting event handler&quot;       OnLoad=&quot;Load event handler&quot;       OnPreRender=&quot;PreRender event handler&quot;       OnSelected=&quot;Selected event handler&quot;       OnSelecting=&quot;Selecting event handler&quot;       OnUnload=&quot;Unload event handler&quot;       OnUpdated=&quot;Updated event handler&quot;       OnUpdating=&quot;Updating event handler&quot;       ProviderName=&quot;string|System.Data.Odbc|System.Data.OleDb|           System.Data.OracleClient|System.Data.SqlClient|           Microsoft.SqlServerCe.Client&quot;       runat=&quot;server&quot;       SelectCommand=&quot;string&quot;       SelectCommandType=&quot;Text|StoredProcedure&quot;       SkinID=&quot;string&quot;       SortParameterName=&quot;string&quot;       SqlCacheDependency=&quot;string&quot;       UpdateCommand=&quot;string&quot;       UpdateCommandType=&quot;Text|StoredProcedure&quot;       Visible=&quot;True|False&quot;   >           <DeleteParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </DeleteParameters>           <FilterParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </FilterParameters>           <InsertParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </InsertParameters>           <SelectParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </SelectParameters>           <UpdateParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </UpdateParameters>   </asp:SqlDataSource>   ```"
  example:
  - "A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://go.microsoft.com/fwlink/?LinkId=192424).  \n  \n This section contains four code examples:  \n  \n-   The first code example demonstrates how to display data from SQL Server in a <xref:System.Web.UI.WebControls.GridView> control using declarative syntax.  \n  \n-   The second code example demonstrates how to display data from an ODBC-compliant database in a <xref:System.Web.UI.WebControls.GridView> control using declarative syntax.  \n  \n-   The third code example demonstrates how to display and update data in a <xref:System.Web.UI.WebControls.GridView> control.  \n  \n-   The fourth code example demonstrates how to display and update data in a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n    > [!NOTE]\n    >  These examples show how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n The following code example demonstrates how to use a SqlDataSource control declaratively to retrieve data from SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_58_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_58_1.aspx)]  \n  \n The following code example demonstrates how to use a SqlDataSource control declaratively to retrieve data from an ODBC-compliant database and display it in a <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property is the name of the .NET Framework Data Provider for ODBC, which is <xref:System.Data.Odbc?displayProperty=fullName>.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_3odbc#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_58_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_3odbc#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_58_2.aspx)]  \n  \n The following code example demonstrates a common display and update scenario with the <xref:System.Web.UI.WebControls.GridView> control. As with the previous examples, data from the Northwind database is displayed in the <xref:System.Web.UI.WebControls.GridView> control. Additionally, because an <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> property is specified and the <xref:System.Web.UI.WebControls.GridView.AutoGenerateEditButton%2A> property is set to `true`, you can edit and update the records with no additional code. The <xref:System.Web.UI.WebControls.GridView> control automatically handles adding parameters to the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method when the **Update** button in the <xref:System.Web.UI.WebControls.GridView> control is clicked.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_5sql#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_58_3.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_5sql#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_58_3.aspx)]  \n  \n The following code example demonstrates a common display and update scenario with the <xref:System.Web.UI.WebControls.DropDownList> and <xref:System.Web.UI.WebControls.TextBox> controls. The <xref:System.Web.UI.WebControls.DropDownList> control does not automatically add update parameters to the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection nor call the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method, so you must do so. The update parameters are specified declaratively and you can add an event handler to perform the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> operation when an event is raised.  \n  \n> [!IMPORTANT]\n>  This example includes a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_58_4.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_58_4.aspx)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Selecting")]

      [System.ComponentModel.DefaultProperty("SelectQuery")]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.SqlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.SqlDataSource))]

      [System.Web.UI.ParseChildren(true)]

      [System.Web.UI.PersistChildren(false)]

      public class SqlDataSource : System.Web.UI.DataSourceControl
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.DataSourceControl
  implements: []
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnPreRender(System.EventArgs)
  - System.Web.UI.Control.OnUnload(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.DataSourceControl.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.DataSourceControl.ClientID
  - System.Web.UI.DataSourceControl.ClientIDMode
  - System.Web.UI.DataSourceControl.Controls
  - System.Web.UI.DataSourceControl.CreateControlCollection
  - System.Web.UI.DataSourceControl.EnableTheming
  - System.Web.UI.DataSourceControl.FindControl(System.String)
  - System.Web.UI.DataSourceControl.Focus
  - System.Web.UI.DataSourceControl.HasControls
  - System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent(System.EventArgs)
  - System.Web.UI.DataSourceControl.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.DataSourceControl.SkinID
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#ContainsListCollection
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#GetList
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetView(System.String)
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetViewNames
  - System.Web.UI.DataSourceControl.Visible
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SqlDataSource()
  nameWithType: SqlDataSource.SqlDataSource()
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "初始化的新執行個體<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>類別。"
  syntax:
    content: public SqlDataSource ();
    parameters: []
  overload: System.Web.UI.WebControls.SqlDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SqlDataSource(String,String)
  nameWithType: SqlDataSource.SqlDataSource(String,String)
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource(String,String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "初始化的新執行個體<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>具有指定的連接字串和 Select 命令類別。"
  remarks: "由於不同的資料庫產品使用不同的 SQL 的語法須`selectCommand`取決於目前 ADO.NET 提供者正在使用中，以識別<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>屬性。</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 如果 SQL 字串是參數型的查詢或命令，參數的預留位置也取決於所使用的 ADO.NET 提供者。 例如，如果提供者是<xref:System.Data.SqlClient?displayProperty=fullName>，這是預設提供者<xref:System.Web.UI.WebControls.SqlDataSource>類別，參數的預留位置是`&quot;@parameterName&quot;`。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 不過，如果提供者設定為<xref:System.Data.Odbc?displayProperty=fullName>或<xref:System.Data.OleDb?displayProperty=fullName>，參數的預留位置是`&quot;?&quot;`。</xref:System.Data.OleDb?displayProperty=fullName> </xref:System.Data.Odbc?displayProperty=fullName> 如需參數化的 SQL 查詢和命令的詳細資訊，請參閱[使用參數與 SqlDataSource 控制項](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>值可以是 SQL 字串或預存程序的名稱，如果資料來源支援預存程序。</xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>"
  example:
  - "The following code example demonstrates how to create a <xref:System.Web.UI.WebControls.SqlDataSource> control using the SqlDataSource constructor. The example is unusual in that the <xref:System.Web.UI.WebControls.SqlDataSource> control is being used not on a Web Forms page, but in the implementation of a middle-tier object as a simple way for a business object to interact with a database. The example uses a connection string that is stored in the Web.config file.  \n  \n This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ObjectDataSource> class.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#3](~/add/codesnippet/csharp/m-system.web.ui.webcontr_142_1.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#3](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_142_1.vb)]"
  syntax:
    content: public SqlDataSource (string connectionString, string selectCommand);
    parameters:
    - id: connectionString
      type: System.String
      description: "用來連接至基礎資料庫的連接字串。"
    - id: selectCommand
      type: System.String
      description: "SQL 查詢，用來從基礎資料庫中擷取資料。 SQL 查詢是否參數化的 SQL 字串，您可能需要加入<xref href=&quot;System.Web.UI.WebControls.Parameter&quot;></xref>物件加入至<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*>集合。</xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*>"
  overload: System.Web.UI.WebControls.SqlDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SqlDataSource(String,String,String)
  nameWithType: SqlDataSource.SqlDataSource(String,String,String)
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource(String,String,String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "初始化的新執行個體<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>具有指定的連接字串和 Select 命令類別。"
  remarks: "由於不同的資料庫產品使用不同的 SQL 的語法須`selectCommand`取決於目前 ADO.NET 提供者正在使用中，以識別`providerName`參數。 如果 SQL 字串是參數型的查詢或命令，參數的預留位置也取決於所使用的 ADO.NET 提供者。 例如，如果提供者是<xref:System.Data.SqlClient?displayProperty=fullName>，這是預設提供者<xref:System.Web.UI.WebControls.SqlDataSource>類別，參數的預留位置是`&quot;@parameterName&quot;`。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 不過，如果提供者設定為<xref:System.Data.Odbc?displayProperty=fullName>或<xref:System.Data.OleDb?displayProperty=fullName>，參數的預留位置是`&quot;?&quot;`。</xref:System.Data.OleDb?displayProperty=fullName> </xref:System.Data.Odbc?displayProperty=fullName> 如需參數化的 SQL 查詢和命令的詳細資訊，請參閱[使用參數與 SqlDataSource 控制項](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>屬性可以是 SQL 字串或預存程序的名稱，如果資料來源支援預存程序。</xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>"
  syntax:
    content: public SqlDataSource (string providerName, string connectionString, string selectCommand);
    parameters:
    - id: providerName
      type: System.String
      description: "資料提供者的名稱， <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>使用。 如果沒有提供者設定， <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>的 Microsoft SQL Server，預設使用的 ADO.NET 提供者。"
    - id: connectionString
      type: System.String
      description: "用來連接至基礎資料庫的連接字串。"
    - id: selectCommand
      type: System.String
      description: "SQL 查詢，用來從基礎資料庫中擷取資料。 SQL 查詢是否參數化的 SQL 字串，您可能需要加入<xref href=&quot;System.Web.UI.WebControls.Parameter&quot;></xref>物件加入至<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*>集合。</xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*>"
  overload: System.Web.UI.WebControls.SqlDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.CacheDuration
  id: CacheDuration
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: CacheDuration
  nameWithType: SqlDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheDuration
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定以秒為單位，資料來源控制項會快取資料所擷取的時間長度<xref:System.Web.UI.WebControls.SqlDataSource.Select*>方法。</xref:System.Web.UI.WebControls.SqlDataSource.Select*>"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>控制項支援的資料快取。</xref:System.Web.UI.WebControls.SqlDataSource> 雖然快取資料，則<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法會擷取資料，從快取，而不是從基礎資料庫。</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 當快取到期時，<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法會從基礎資料庫中，擷取資料，並再次快取資料。</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>       <xref:System.Web.UI.WebControls.SqlDataSource>控制項會自動快取資料時<xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A>屬性設定為`true`和 CacheDuration 屬性設為值大於 0，表示快取會儲存資料快取項目會被捨棄之前的秒數。</xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> </xref:System.Web.UI.WebControls.SqlDataSource> 值為 0 指出無限長的快取。       快取的行為取決於持續時間的組合和<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>屬性。</xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> 如果<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>屬性設定為<xref:System.Web.UI.DataSourceCacheExpiry>值<xref:System.Web.UI.WebControls.SqlDataSource>會快取資料的第一個資料擷取作業、 保留它在記憶體中，最多 CacheDuration 屬性所指定的時間量。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.DataSourceCacheExpiry> </xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> 需要記憶體時，可能會持續時間的時間之前釋放資料。 下次執行作業，然後會重新整理快取。 如果<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>屬性設定為<xref:System.Web.UI.DataSourceCacheExpiry>資料來源控制項的值，會快取資料，在第一項資料擷取作業，但保留快取中的每個後續作業的時間間隔會重設。</xref:System.Web.UI.DataSourceCacheExpiry> </xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> 快取過期，如果自上次是等於 CacheDuration 值的時間沒有活動<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>作業。</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>       <xref:System.Web.UI.WebControls.SqlDataSource>控制項可以快取資料，只有當它在時<xref:System.Web.UI.WebControls.SqlDataSourceMode>模式。</xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource> A<xref:System.NotSupportedException>所擲回例外狀況<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法，如果<xref:System.Web.UI.WebControls.SqlDataSource>控制設為 <xref:System.Web.UI.WebControls.SqlDataSourceMode>值和快取也會啟用。</xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> </xref:System.NotSupportedException>      > [!IMPORTANT] > 時您使用用戶端模擬 Microsoft Windows 驗證下的，第一位使用者存取資料時，會快取資料。 如果另一個使用者要求相同的資料時，會從快取中擷取的資料。 資料不會擷取藉由另一個呼叫資料庫來驗證使用者的存取資料。 如果您預期有一個以上使用者存取資料，而且您希望每個擷取資料來驗證由資料庫的安全性組態，請勿使用快取。"
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database in Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control, with data caching enabled. The CacheDuration is set to 20 seconds and, because the <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value by default, users of this page will see fresh data every 20 seconds.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_599_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_599_1.aspx)]"
  syntax:
    content: public virtual int CacheDuration { get; set; }
    return:
      type: System.Int32
      description: "的秒數<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>快取的結果<xref:System.Web.UI.WebControls.SqlDataSource.Select*>作業。</xref:System.Web.UI.WebControls.SqlDataSource.Select*> 預設值為 0。 值不可為負數。"
  overload: System.Web.UI.WebControls.SqlDataSource.CacheDuration*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy
  id: CacheExpirationPolicy
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: CacheExpirationPolicy
  nameWithType: SqlDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定快取到期行為，與持續時間，結合時，描述資料來源控制項所使用的快取行為。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>控制項支援的資料快取。</xref:System.Web.UI.WebControls.SqlDataSource> 雖然快取資料，則<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法會擷取資料，從快取，而不是從基礎資料庫。</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 當快取到期時，<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法會從基礎資料庫中，擷取資料，並再次快取資料。</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>       快取的行為由多種<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>和 CacheExpirationPolicy 設定。</xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> 如果 CacheExpirationPolicy 屬性設定為<xref:System.Web.UI.DataSourceCacheExpiry>值<xref:System.Web.UI.WebControls.SqlDataSource>會快取資料的第一個資料擷取作業、 保留在記憶體中所指定的時間長度<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>屬性，然後再捨棄它之後的時間也已屆滿。</xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.DataSourceCacheExpiry> 下次執行作業，然後會重新整理快取。 如果 CacheExpirationPolicy 屬性設定為<xref:System.Web.UI.DataSourceCacheExpiry>資料來源控制項的值，會快取資料，在第一項資料擷取作業，但保留快取中的每個後續作業的時間間隔會重設。</xref:System.Web.UI.DataSourceCacheExpiry> 快取過期，如果相當的時間沒有活動<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>值自上次<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>作業。</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> </xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>       <xref:System.Web.UI.WebControls.SqlDataSource>控制項可以快取資料中的時，才<xref:System.Web.UI.WebControls.SqlDataSourceMode>模式。</xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource> A<xref:System.NotSupportedException>所擲回例外狀況<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法，如果<xref:System.Web.UI.WebControls.SqlDataSource>控制設為 <xref:System.Web.UI.WebControls.SqlDataSourceMode>值和快取也會啟用。</xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> </xref:System.NotSupportedException>      > [!IMPORTANT] > 時您使用用戶端模擬 Microsoft Windows 驗證下的，第一位使用者存取資料時，會快取資料。 如果另一個使用者要求相同的資料時，會從快取中擷取的資料。 資料不會擷取藉由另一個呼叫資料庫來驗證使用者的存取資料。 如果您預期有一個以上使用者存取資料，而且您希望每個擷取資料來驗證由資料庫的安全性組態，請勿使用快取。"
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database in Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control, with data caching enabled. Because the CacheExpirationPolicy property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value, users will not see fresh data even though the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> value is 20 seconds. The cached data is refreshed only if there is no activity on the page for more than 20 seconds since the last page load.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_19sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_249_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_19sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_249_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }
    return:
      type: System.Web.UI.DataSourceCacheExpiry
      description: "其中一個<xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;></xref>值。 預設值是<xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;></xref>值。"
  overload: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency
  id: CacheKeyDependency
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: CacheKeyDependency
  nameWithType: SqlDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定使用者定義索引鍵相依性連結的所有資料快取物件所建立的資料來源控制項。 金鑰已過期時，所有快取物件明確已過期。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>控制項支援的資料快取。</xref:System.Web.UI.WebControls.SqlDataSource> 雖然快取資料，則<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法會擷取資料，從快取，而不是從基礎資料庫。</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 當快取到期時，<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法會從基礎資料庫中，擷取資料，並再次快取資料。</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>       您可以設定要建立所建立的所有快取項目之間的相依性的 CacheKeyDependency 屬性<xref:System.Web.UI.WebControls.SqlDataSource>控制項和索引鍵。</xref:System.Web.UI.WebControls.SqlDataSource> 您以程式設計的方式可以在任何時間過期所有快取項目索引鍵設定為已過期。       <xref:System.Web.UI.WebControls.SqlDataSource>控制項可以快取資料中的時，才<xref:System.Web.UI.WebControls.SqlDataSourceMode>模式。</xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource> A<xref:System.NotSupportedException>所擲回例外狀況<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法，如果<xref:System.Web.UI.WebControls.SqlDataSource>控制設為 <xref:System.Web.UI.WebControls.SqlDataSourceMode>值和快取也會啟用。</xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> </xref:System.NotSupportedException>       唯一的快取項目建立的每個組合<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>， <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>，和<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>屬性。</xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> </xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 多個<xref:System.Web.UI.WebControls.SqlDataSource>控制項可以使用相同的快取項目在案例中控制項載入相同的資料來自相同的基礎資料庫的位置。</xref:System.Web.UI.WebControls.SqlDataSource>      > [!IMPORTANT] > 時您使用用戶端模擬 Microsoft Windows 驗證下的，第一位使用者存取資料時，會快取資料。 如果另一個使用者要求相同的資料時，會從快取中擷取的資料。 資料不會擷取藉由另一個呼叫資料庫來驗證使用者的存取資料。 如果您預期有一個以上使用者存取資料，而且您希望每個擷取資料來驗證由資料庫的安全性組態，請勿使用快取。"
  syntax:
    content: public virtual string CacheKeyDependency { get; set; }
    return:
      type: System.String
      description: "可識別的所有快取物件的索引鍵建立<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>。"
  overload: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter
  id: CancelSelectOnNullParameter
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: CancelSelectOnNullParameter
  nameWithType: SqlDataSource.CancelSelectOnNullParameter
  fullName: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，指出當任何參數時，是否要取消資料擷取作業中包含<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*>集合評估為<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*>"
  remarks: "屬性是 CancelSelectOnNullParameter 值儲存在檢視狀態。"
  syntax:
    content: public virtual bool CancelSelectOnNullParameter { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果參數包含在取消資料擷取作業則<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*>集合評估後會<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*> 預設值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.ConflictDetection
  id: ConflictDetection
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: ConflictDetection
  nameWithType: SqlDataSource.ConflictDetection
  fullName: System.Web.UI.WebControls.SqlDataSource.ConflictDetection
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，該值指出如何<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控制項執行更新和刪除資料列的資料在基礎資料庫變更期間作業的時間。"
  remarks: "ConflictDetection 屬性可讓您決定是否要將舊的和新值的參數套用至`Update`方法。 例如，如果命令是所指定<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>屬性會傳回<xref:System.Data.DataTable>物件與資料行`Name`和`Number`和 ConflictDetection 屬性設定為<xref:System.Web.UI.ConflictOptions>值的建立參數`Name`和`Number`如`Update`方法。</xref:System.Web.UI.ConflictOptions> </xref:System.Data.DataTable> </xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 如果 ConflictDetection 屬性設定為<xref:System.Web.UI.ConflictOptions>值的建立參數`Name`， `Number`， `original_Name`，和`original_Number`。</xref:System.Web.UI.ConflictOptions> (取決於原始值參數的完整名稱<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>屬性。)</xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A><xref:System.Web.UI.WebControls.SqlDataSource>控制項，然後決定如果`Update`方法中指定<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>屬性具有相符的參數。</xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> </xref:System.Web.UI.WebControls.SqlDataSource>       並行存取控制是用來控制如何讀取和多個用戶端存取和管理相同的資料時，存放區中變更資料的資料存放區的技術。 例如，一個用戶端讀取資料並呈現給使用者，而另一個用戶端讀取相同的資料，並提供給不同的使用者。 如果兩個使用者更新的資料，並送出至資料存放區，無法預料的結果可能會發生，因為兩個用戶端可能會更新為相同的資料不同的值。 這被視為衝突。 ConflictDetection 屬性設定為<xref:System.Web.UI.ConflictOptions>值，您`Update`方法可以再比較舊的和新值給原始資料來源來偵測衝突，以及處理它們，視。</xref:System.Web.UI.ConflictOptions>       ConflictDetection 屬性委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>"
  syntax:
    content: public System.Web.UI.ConflictOptions ConflictDetection { get; set; }
    return:
      type: System.Web.UI.ConflictOptions
      description: "其中一個<xref href=&quot;System.Web.UI.ConflictOptions&quot;></xref>值。 預設值是<xref href=&quot;System.Web.UI.ConflictOptions&quot;></xref>值。"
  overload: System.Web.UI.WebControls.SqlDataSource.ConflictDetection*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.ConnectionString
  id: ConnectionString
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: ConnectionString
  nameWithType: SqlDataSource.ConnectionString
  fullName: System.Web.UI.WebControls.SqlDataSource.ConnectionString
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定 ADO.NET 提供者特定連接字串<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控制項用來連接至基礎資料庫。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>控制項可以搭配各種不同的 ADO.NET 提供者和用來連接到基礎資料來源的連接字串語法是特定提供者。</xref:System.Web.UI.WebControls.SqlDataSource>       當您設定<xref:System.Web.UI.WebControls.SqlDataSource>控制項，您設定<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>的資料庫類型的屬性 (預設值是<xref:System.Data.SqlClient?displayProperty=fullName>)，並且 ConnectionString 屬性設定為包含的資訊，才能連接到資料庫的連接字串。</xref:System.Data.SqlClient?displayProperty=fullName> </xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> </xref:System.Web.UI.WebControls.SqlDataSource> 連接字串的內容資料庫存取資料來源控制項的類型而有所不同。 例如，<xref:System.Web.UI.WebControls.SqlDataSource>控制項需要伺服器名稱、 資料庫 （目錄） 名稱和如何連接到 SQL Server 時，驗證使用者的相關資訊。</xref:System.Web.UI.WebControls.SqlDataSource> 連接字串的內容的相關資訊，請參閱<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>屬性的<xref:System.Data.SqlClient.SqlConnection>類別、<xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A><xref:System.Data.OracleClient.OracleConnection>類別、<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>內容<xref:System.Data.OleDb.OleDbConnection>類別或<xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A>屬性<xref:System.Data.Odbc.OdbcConnection>類別</xref:System.Data.Odbc.OdbcConnection>的</xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A></xref:System.Data.OleDb.OleDbConnection></xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A></xref:System.Data.OracleClient.OracleConnection>屬性</xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A></xref:System.Data.SqlClient.SqlConnection></xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>       如果您變更 ConnectionString 屬性，<xref:System.Web.UI.IDataSource.DataSourceChanged>引發事件時，造成繫結至任何控制項<xref:System.Web.UI.WebControls.SqlDataSource>重新繫結的控制項。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.IDataSource.DataSourceChanged>      > [!IMPORTANT] > 儲存連接字串的相關資訊，請參閱[How To︰ 使用資料來源的控制項時，保護連接字串](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to set the ConnectionString property to connect to a Microsoft SQL Server database and display the results of the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property in a <xref:System.Web.UI.WebControls.GridView> control. The second code example demonstrates a more complex scenario, where a <xref:System.Web.UI.WebControls.SqlDataSource> control is used to display and update data in a password-protected Microsoft Access database. In each case, the `connectionStrings` element of the Web.config file is shown first, followed by the ASP.NET page that contains the <xref:System.Web.UI.WebControls.SqlDataSource> control.  \n  \n The following code example demonstrates how to set the ConnectionString property to connect to a SQL Server database and display the results of the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property in a <xref:System.Web.UI.WebControls.GridView> control.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_749_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_749_2.aspx)]  \n  \n The following code example demonstrates a more complex scenario than the preceding code example, where a <xref:System.Web.UI.WebControls.SqlDataSource> control is used to display and update data in a password-protected Access database. Because the <xref:System.Web.UI.WebControls.SqlDataSource> is used with Access, the <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property is set to the <xref:System.Data.OleDb> provider, and the ConnectionString property is set to an appropriate connection string for a UNC-shared Access database. A <xref:System.Web.UI.WebControls.GridView> control displays orders with shipment dates. You can update an order by checking the appropriate check box, and then clicking the **Update** button.  \n  \n> [!IMPORTANT]\n>  This example includes a password in plain text only for illustration purposes. In a production application, connection strings that include passwords should be encrypted. For more information, see [Protecting Connection Information](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_22sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_749_3.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_22sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_749_3.aspx)]  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_22sql#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_749_4.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_22sql#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_749_4.aspx)]"
  syntax:
    content: public virtual string ConnectionString { get; set; }
    return:
      type: System.String
      description: ".NET Framework 資料提供者特定字串<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>用來連接到它所代表的 SQL 資料庫。 預設為空字串 (&quot;&quot;)。"
  overload: System.Web.UI.WebControls.SqlDataSource.ConnectionString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(System.String)
  id: CreateDataSourceView(System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: CreateDataSourceView(String)
  nameWithType: SqlDataSource.CreateDataSourceView(String)
  fullName: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "建立資料來源檢視物件與資料來源控制項相關聯。"
  remarks: "類別衍生自<xref:System.Web.UI.WebControls.SqlDataSource>類別可以覆寫 CreateDataSourceView 方法傳回強型別的資料來源檢視物件。</xref:System.Web.UI.WebControls.SqlDataSource>"
  syntax:
    content: protected virtual System.Web.UI.WebControls.SqlDataSourceView CreateDataSourceView (string viewName);
    parameters:
    - id: viewName
      type: System.String
      description: "資料來源檢視的名稱。"
    return:
      type: System.Web.UI.WebControls.SqlDataSourceView
      description: "A <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;> </xref>相關聯<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>。"
  overload: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.DataSourceMode
  id: DataSourceMode
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: DataSourceMode
  nameWithType: SqlDataSource.DataSourceMode
  fullName: System.Web.UI.WebControls.SqlDataSource.DataSourceMode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定資料擷取模式<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控制項用來擷取資料。"
  remarks: "資料擷取模式，識別如何<xref:System.Web.UI.WebControls.SqlDataSource>控制項從基礎資料庫中擷取資料。</xref:System.Web.UI.WebControls.SqlDataSource>       當 DataSourceMode 屬性設定為<xref:System.Web.UI.WebControls.SqlDataSourceMode>值，將資料載入至<xref:System.Data.DataSet>物件和儲存在伺服器上的記憶體。</xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.SqlDataSourceMode> 這可讓在使用者介面控制項，例如案例<xref:System.Web.UI.WebControls.GridView>，提供排序、 篩選和分頁功能。</xref:System.Web.UI.WebControls.GridView>       當 DataSourceMode 屬性設定為<xref:System.Web.UI.WebControls.SqlDataSourceMode>值，以擷取資料<xref:System.Data.IDataReader>物件，它是一個順向唯讀資料指標。</xref:System.Data.IDataReader> </xref:System.Web.UI.WebControls.SqlDataSourceMode> 特定型別的<xref:System.Data.IDataReader>物件相依於最終資料提供者，<xref:System.Web.UI.WebControls.SqlDataSource>用途，由<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>屬性。</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> </xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.IDataReader> 根據預設，<xref:System.Web.UI.WebControls.SqlDataSource>控制項所使用的提供者的 Microsoft SQL Server， <xref:System.Data.SqlClient?displayProperty=fullName>，而且資料讀取器<xref:System.Data.SqlClient.SqlDataReader>物件。</xref:System.Data.SqlClient.SqlDataReader> </xref:System.Data.SqlClient?displayProperty=fullName> </xref:System.Web.UI.WebControls.SqlDataSource>       如果您變更 DataSourceMode 屬性<xref:System.Web.UI.IDataSource.DataSourceChanged>引發事件時，造成繫結至任何控制項<xref:System.Web.UI.WebControls.SqlDataSource>重新繫結。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.IDataSource.DataSourceChanged>       將 datasourcemode 設為屬性的值儲存在檢視狀態。"
  example:
  - "The following code example demonstrates how to set the DataSourceMode property of the <xref:System.Web.UI.WebControls.SqlDataSource> control to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value for a scenario with a <xref:System.Web.UI.WebControls.ListBox> control that requires no sorting, paging, nor filtering.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_5_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_5_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceMode DataSourceMode { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceMode
      description: "其中一個<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceMode&quot;></xref>值。 預設值是<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceMode&quot;></xref>值。"
  overload: System.Web.UI.WebControls.SqlDataSource.DataSourceMode*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "DataSourceMode 屬性不是其中一個值中定義<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceMode&quot;> </xref>。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Delete
  id: Delete
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Delete()
  nameWithType: SqlDataSource.Delete()
  fullName: System.Web.UI.WebControls.SqlDataSource.Delete()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "執行 delete 作業使用<> *> 的 SQL 字串和任何參數，位於<> *> 集合。"
  remarks: "執行刪除作業之前，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.SqlDataSource.Deleting>事件。</xref:System.Web.UI.WebControls.SqlDataSource.Deleting> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> 您可以處理這個事件來檢查參數的值，並執行任何前置處理之前刪除作業。       在作業完成之後，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.SqlDataSource.Deleted>事件。</xref:System.Web.UI.WebControls.SqlDataSource.Deleted> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A> 您可以處理這個事件來檢查任何傳回值和錯誤碼，並執行任何後續處理。       Delete 方法提供以程式設計方式存取`Delete`方法。 如果<xref:System.Web.UI.WebControls.SqlDataSource>控制項是與資料繫結控制項產生關聯，將資料繫結控制項自動呼叫**刪除**方法。</xref:System.Web.UI.WebControls.SqlDataSource>       Delete 方法會委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A>方法<xref:System.Web.UI.WebControls.SqlDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> 若要執行此作業，<xref:System.Web.UI.WebControls.SqlDataSourceView>建置<xref:System.Data.Common.DbCommand>物件使用<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>文字和任何相關聯<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>值，然後再執行<xref:System.Data.Common.DbCommand>對基礎資料庫。</xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> </xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSourceView>"
  example:
  - "The following code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> text to delete an order from the Northwind database. Initially, data is retrieved from the Orders table and displayed in a <xref:System.Web.UI.WebControls.DropDownList> control. You must explicitly declare the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> property and call the Delete method when using data-bound controls, such as the <xref:System.Web.UI.WebControls.DropDownList> (unlike other controls, such as <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView>, which automatically populate the parameters and call the Delete method on a data source control). In this example, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is delegated to the private `OnDelete` event handler, which explicitly calls the Delete method of the <xref:System.Web.UI.WebControls.SqlDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_3_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_3_1.aspx)]"
  syntax:
    content: public int Delete ();
    parameters: []
    return:
      type: System.Int32
      description: "值，表示從基礎資料庫中刪除的資料列數目。"
  overload: System.Web.UI.WebControls.SqlDataSource.Delete*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>無法建立與基礎資料來源的連線。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommand
  id: DeleteCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: DeleteCommand
  nameWithType: SqlDataSource.DeleteCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteCommand
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定 SQL 字串<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控制項用來從基礎資料庫中刪除資料。"
  remarks: "DeleteCommand 代表 SQL 查詢或預存程序的名稱，並且由<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>方法。</xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>       由於不同的資料庫產品使用不同種類的 SQL，SQL 字串的語法取決於目前 ADO.NET 提供者正在使用中，以識別<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>屬性。</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 如果 SQL 字串是參數型的查詢或命令，參數的語法也會取決於所使用的 ADO.NET 提供者中。 例如，如果提供者是<xref:System.Data.SqlClient?displayProperty=fullName>，這是預設提供者<xref:System.Web.UI.WebControls.SqlDataSource>類別，參數的語法是`&quot;@parameterName&quot;`。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 不過，如果提供者設定為<xref:System.Data.Odbc?displayProperty=fullName>或<xref:System.Data.OleDb?displayProperty=fullName>，參數的預留位置是`&quot;?&quot;`。</xref:System.Data.OleDb?displayProperty=fullName> </xref:System.Data.Odbc?displayProperty=fullName> 如需參數化的 SQL 查詢和命令的詳細資訊，請參閱[使用參數與 SqlDataSource 控制項](~/add/includes/ajax-current-ext-md.md)。       DeleteCommand 屬性可以是 SQL 字串或預存程序，如果支援資料庫名稱的預存程序。       DeleteCommand 屬性委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>      > [!IMPORTANT] > 基於安全性考量，DeleteCommand 屬性不是儲存在檢視狀態。 很可能在用戶端上檢視狀態的內容進行解碼，因為檢視中儲存機密資訊的資料庫結構狀態可能會導致資訊洩漏的弱點。"
  example:
  - "The following code example demonstrates how to set the DeleteCommand text to delete an order from the Northwind database Orders table. Data is retrieved from the Orders table and displayed in a <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.GridView> renders a **Delete** button automatically when the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`. Additionally, when the **Delete** button is clicked, the <xref:System.Web.UI.WebControls.GridView> control automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> collection and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> method. Finally, because this code example deletes data, an event handler is added to attempt to back up the database to disk before the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> operation is performed.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_45_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_45_1.aspx)]"
  syntax:
    content: public string DeleteCommand { get; set; }
    return:
      type: System.String
      description: "SQL 字串<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>使用刪除資料。"
  overload: System.Web.UI.WebControls.SqlDataSource.DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType
  id: DeleteCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: DeleteCommandType
  nameWithType: SqlDataSource.DeleteCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，指出是否在文字<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand*>屬性是 SQL 陳述式或預存程序的名稱。</xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand*>"
  remarks: "DeleteCommandType 屬性委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType%2A>"
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandType
      description: "其中一個<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref>值。 預設值是<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref>值。"
  overload: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Deleted
  id: Deleted
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Deleted
  nameWithType: SqlDataSource.Deleted
  fullName: System.Web.UI.WebControls.SqlDataSource.Deleted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "刪除作業完成時發生。"
  remarks: "處理刪除事件，以刪除作業完成之後，請檢查輸出參數的值。 輸出參數都是從<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>與事件相關聯的物件。</xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>       如需處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteParameters
  id: DeleteParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: DeleteParameters
  nameWithType: SqlDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得參數集合，其中包含所使用的參數<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand*>屬性從<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>與其相關聯物件<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控制項。</xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand*>"
  remarks: "如果<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>屬性包含參數化的 SQL 查詢、 DeleteParameters 集合包含任何<xref:System.Web.UI.WebControls.Parameter>對應於 SQL 字串中的參數預留位置的物件。</xref:System.Web.UI.WebControls.Parameter> </xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>      > [!NOTE] >，確定沒有<xref:System.Web.UI.WebControls.BoundField>您繫結至資料繫結控制項中的控制項<xref:System.Web.UI.WebControls.SqlDataSource>控制項的名稱會符合任何 DeleteParameters 集合中的參數名稱。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.BoundField> 可能會產生參數繫結的欄位會從 SQL 命令，並 「 未提供參數 」 的錯誤排除具有相同的名稱。       如果<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>屬性設定為<xref:System.Web.UI.ConflictOptions>值資料的舊的和新值，會建立參數。</xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> 舊值的參數會根據名為<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>屬性。</xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>       ADO.NET 提供者，根據 DeleteParameters 集合中的參數的順序可能很重要。 <xref:System.Data.OleDb?displayProperty=fullName>和<xref:System.Data.Odbc?displayProperty=fullName>提供者建立關聯的參數在參數化 SQL 查詢中出現的順序根據集合中的參數。</xref:System.Data.Odbc?displayProperty=fullName> </xref:System.Data.OleDb?displayProperty=fullName> <xref:System.Data.SqlClient?displayProperty=fullName>提供者，這是預設的 ADO.NET 提供者的<xref:System.Web.UI.WebControls.SqlDataSource>控制項，將集合中的參數使用 SQL 查詢中預留位置比對參數的名稱。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 如需參數化的 SQL 查詢和命令的詳細資訊，請參閱[使用參數與 SqlDataSource 控制項](~/add/includes/ajax-current-ext-md.md)。       DeleteParameters 屬性擷取<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A>屬性所包含的<xref:System.Web.UI.WebControls.SqlDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A>      > [!IMPORTANT] > 值插入參數不需要驗證，可能會造成安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Deleting>事件來執行查詢之前驗證參數值。</xref:System.Web.UI.WebControls.SqlDataSource.Deleting> 如需詳細資訊，請參閱[指令碼擅用概觀](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> text to delete an order from the Northwind database. Initially, data is retrieved from the Orders table and displayed in a <xref:System.Web.UI.WebControls.DropDownList> control. You must explicitly declare DeleteParameters property and call the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> method when using data-bound controls, such as <xref:System.Web.UI.WebControls.DropDownList> (unlike other controls, such as <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView>, which automatically populate the parameters and call <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> on a data source control). In this example, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is delegated to the private `OnDelete` event handler, which explicitly calls the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> method of the <xref:System.Web.UI.WebControls.SqlDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_121_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_121_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> ，其中包含所使用的參數<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand*>屬性。</xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand*>"
  overload: System.Web.UI.WebControls.SqlDataSource.DeleteParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Deleting
  id: Deleting
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Deleting
  nameWithType: SqlDataSource.Deleting
  fullName: System.Web.UI.WebControls.SqlDataSource.Deleting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "刪除作業之前發生。"
  remarks: "處理刪除事件，以執行額外的初始化作業專屬於您的應用程式，來驗證參數的值，或若要變更參數值之前<xref:System.Web.UI.WebControls.SqlDataSource>控制項執行刪除作業。</xref:System.Web.UI.WebControls.SqlDataSource>       基礎資料來源的連接尚未開啟時，會呼叫事件處理常式委派。 因此，您無法在作業取消直接藉由呼叫<xref:System.Data.Common.DbCommand.Cancel%2A>方法<xref:System.Data.Common.DbCommand>所公開的物件<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>物件。</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> </xref:System.Data.Common.DbCommand> </xref:System.Data.Common.DbCommand.Cancel%2A> 您可以不過，將資料庫作業取消藉由設定<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>物件`true`。</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> </xref:System.ComponentModel.CancelEventArgs.Cancel%2A>       如需處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "The following code example demonstrates how to handle the Deleting event that is raised before a <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> operation occurs. Because this example deletes data from the Northwind database, an <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> handler is added to attempt to back up the database to disk before the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> operation is performed.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_101_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_101_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.EnableCaching
  id: EnableCaching
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: EnableCaching
  nameWithType: SqlDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.SqlDataSource.EnableCaching
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，指出是否<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控制項已啟用快取的資料。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>控制項支援的資料快取。</xref:System.Web.UI.WebControls.SqlDataSource> 雖然快取資料，則<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法會擷取資料，從快取，而不是從基礎資料庫。</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 當快取到期時，<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法會從基礎資料庫中，擷取資料，並再次快取資料。</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>       <xref:System.Web.UI.WebControls.SqlDataSource>控制項會自動快取資料，當 EnableCaching 屬性設定為`true`和<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>屬性設定為值大於 0，表示快取區儲存資料，然後再擷取最新的組的秒數。</xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.SqlDataSource>      > [!IMPORTANT] > 時您使用用戶端模擬 Microsoft Windows 驗證下的，第一位使用者存取資料時，會快取資料。 如果另一個使用者要求相同的資料時，會從快取中擷取的資料。 資料不會擷取藉由另一個呼叫資料庫來驗證使用者的存取資料。 如果您預期有一個以上使用者存取資料，而且您希望每個擷取資料來驗證由資料庫的安全性組態，請勿使用快取。"
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database in Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control, with data caching enabled. The EnableCaching property is set to `true` and the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> is set to 20 seconds. Because the <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> field by default, users of this page will see fresh data every 20 seconds.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_591_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_591_1.aspx)]"
  syntax:
    content: public virtual bool EnableCaching { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果資料快取的資料來源控制項; 已啟用否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.SqlDataSource.EnableCaching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "EnableCaching 屬性設定為<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>支援時，快取不<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.FilterExpression
  id: FilterExpression
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: FilterExpression
  nameWithType: SqlDataSource.FilterExpression
  fullName: System.Web.UI.WebControls.SqlDataSource.FilterExpression
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定篩選運算式時套用<xref:System.Web.UI.WebControls.SqlDataSource.Select*>方法呼叫。</xref:System.Web.UI.WebControls.SqlDataSource.Select*>"
  remarks: "FilterExpression 屬性值是格式字串運算式 (由處理字串<xref:System.String.Format%2A?displayProperty=fullName>方法)，為每個替代參數包含在字串中使用 FilterExpression 集合中的值。</xref:System.String.Format%2A?displayProperty=fullName> 篩選運算式語法是相同的語法可接受的<xref:System.Data.DataView.RowFilter%2A>屬性，因為篩選運算式會套用至<xref:System.Data.DataView.RowFilter%2A>屬性<xref:System.Data.DataView>傳回從執行物件<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法。</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> </xref:System.Data.DataView> </xref:System.Data.DataView.RowFilter%2A> </xref:System.Data.DataView.RowFilter%2A> 如需詳細資訊，請參閱<xref:System.Data.DataColumn.Expression%2A>.</xref:System.Data.DataColumn.Expression%2A>       如果您加入參數，以便<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>集合，您也可以包含格式字串預留位置 (例如，`&quot;{0}&quot;)`中替換參數值的運算式。</xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 根據中的參數索引來取代預留位置<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>集合。</xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 如果在物件<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>集合是`null`，物件將會取代為空字串。</xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>       您可以在 FilterExpression 屬性中包含參數。 如果參數是字串或字元類型，請使用單引號括住參數。 如果參數是數值類型，就不需要引號。 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>集合包含評估 FilterExpression 屬性中找到的預留位置的參數。</xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>       <xref:System.Web.UI.WebControls.SqlDataSource>控制項支援篩選的資料中的時，才<xref:System.Web.UI.WebControls.SqlDataSourceMode>模式。</xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource>       FilterExpression 屬性委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>"
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database and filter it using a FilterExpression string and the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection. The FilterExpression property is applied any time the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method is executed to retrieve data. In this example, the FilterExpression contains a placeholder for a filter parameter, which is contained in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection. In addition, the filter parameter is a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> property of the <xref:System.Web.UI.WebControls.DropDownList> control. Because the <xref:System.Web.UI.WebControls.DropDownList> control has its <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> property set to `true`, any change in the selection for the <xref:System.Web.UI.WebControls.DropDownList> control causes the page to post information back to the server and the <xref:System.Web.UI.WebControls.GridView> control to rebind to the data source control with the new filter.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_89_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_89_1.aspx)]"
  syntax:
    content: public string FilterExpression { get; set; }
    return:
      type: System.String
      description: "表示使用擷取資料時套用的篩選運算式的字串<xref:System.Web.UI.WebControls.SqlDataSource.Select*>方法。</xref:System.Web.UI.WebControls.SqlDataSource.Select*>"
  overload: System.Web.UI.WebControls.SqlDataSource.FilterExpression*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "FilterExpression 屬性已設定和<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>處於<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceMode&quot;></xref>模式。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Filtering
  id: Filtering
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Filtering
  nameWithType: SqlDataSource.Filtering
  fullName: System.Web.UI.WebControls.SqlDataSource.Filtering
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "篩選作業之前發生。"
  remarks: "處理篩選事件，以執行驗證作業篩選參數值之前<xref:System.Web.UI.WebControls.SqlDataSource>控制項執行篩選作業。</xref:System.Web.UI.WebControls.SqlDataSource> 您可以取消<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法藉由設定<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs>物件`true`。</xref:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs> </xref:System.ComponentModel.CancelEventArgs.Cancel%2A> </xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 引發事件時，才<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>屬性設定。</xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>       篩選事件委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.Filtering?displayProperty=fullName>事件<xref:System.Web.UI.WebControls.SqlDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.Filtering?displayProperty=fullName>       如需處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.FilterParameters
  id: FilterParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: FilterParameters
  nameWithType: SqlDataSource.FilterParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.FilterParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得與任何參數預留位置中相關聯的參數集合<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression*>字串。</xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression*>"
  remarks: "放集合中的參數相關聯的任何參數中指定的<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>屬性。</xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> 中所指定的參數預留位置<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>屬性相符放集合中的參數物件的順序時<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法呼叫。</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> </xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>       放屬性擷取<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>屬性所包含的<xref:System.Web.UI.WebControls.SqlDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>      > [!IMPORTANT] > 值插入參數不需要驗證，可能會造成安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>事件來執行查詢之前驗證參數值。</xref:System.Web.UI.WebControls.SqlDataSource.Filtering> 如需詳細資訊，請參閱[指令碼擅用概觀](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database and filter it using the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and FilterParameters properties. The <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSource> control is applied anytime the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method is executed to retrieve data. In this example, the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property contains a placeholder for a filter parameter, which is contained in the FilterParameters collection. In addition, the filter parameter is a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> property of the <xref:System.Web.UI.WebControls.DropDownList> control. Because the <xref:System.Web.UI.WebControls.DropDownList> control has its <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> property set to `true`, any change in the <xref:System.Web.UI.WebControls.DropDownList> selection causes the page to post information back to the server and the <xref:System.Web.UI.WebControls.GridView> control to rebind to the data source control with the new filter.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1207_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1207_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> ，其中包含關聯中找到的任何參數預留位置的參數集<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression*>屬性。</xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression*>"
  overload: System.Web.UI.WebControls.SqlDataSource.FilterParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory
  id: GetDbProviderFactory
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: GetDbProviderFactory()
  nameWithType: SqlDataSource.GetDbProviderFactory()
  fullName: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "傳回<xref href=&quot;System.Data.Common.DbProviderFactory&quot;></xref>所識別的 ADO.NET 提供者相關聯的物件<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName*>屬性。</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName*>"
  remarks: "<xref:System.Data.Common.DbProviderFactory>屬性供<xref:System.Web.UI.WebControls.SqlDataSource>控制項來建立與資料庫互動時的正確的 ADO.NET 連接、 命令和參數物件。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.Common.DbProviderFactory>"
  syntax:
    content: protected virtual System.Data.Common.DbProviderFactory GetDbProviderFactory ();
    parameters: []
    return:
      type: System.Data.Common.DbProviderFactory
      description: "A <xref href=&quot;System.Data.Common.DbProviderFactory&quot;> </xref>代表所識別的 ADO.NET 提供者，否則和執行個體<xref href=&quot;System.Data.SqlClient&quot;> </xref>，如果沒有提供者設定。"
  overload: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.GetView(System.String)
  id: GetView(System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: GetView(String)
  nameWithType: SqlDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.SqlDataSource.GetView(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得與資料來源控制項相關聯的具名的資料來源檢視。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>控制項支援只有一個資料來源檢視。</xref:System.Web.UI.WebControls.SqlDataSource> 如同所有的資料來源檢視物件，<xref:System.Web.UI.WebControls.SqlDataSourceView>定義其功能與資料來源控制項相關聯的物件時，會執行所有的工作都是從基礎資料庫中，擷取資料所需，且執行作業，例如排序、 插入、 刪除和更新。</xref:System.Web.UI.WebControls.SqlDataSourceView>"
  syntax:
    content: protected override System.Web.UI.DataSourceView GetView (string viewName);
    parameters:
    - id: viewName
      type: System.String
      description: "要擷取之檢視的名稱。 因為<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>只支援一個檢視，`viewName`會被忽略。"
    return:
      type: System.Web.UI.DataSourceView
      description: "<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;> </xref>名為&quot;Table&quot;相關聯<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>。"
  overload: System.Web.UI.WebControls.SqlDataSource.GetView*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>viewName</code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或以外`Table`。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.GetViewNames
  id: GetViewNames
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: GetViewNames()
  nameWithType: SqlDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.SqlDataSource.GetViewNames()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得集合，表示清單的檢視表物件的名稱相關聯的<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控制項。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>控制項只支援一個檢視其基礎的資料，名為`&quot;Table&quot;`。</xref:System.Web.UI.WebControls.SqlDataSource> GetViewNames 方法會傳回此一檢視名稱的單一項目集合。"
  syntax:
    content: protected override System.Collections.ICollection GetViewNames ();
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>，其中包含相關聯的檢視表名稱<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>。</xref:System.Collections.ICollection>"
  overload: System.Web.UI.WebControls.SqlDataSource.GetViewNames*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Insert
  id: Insert
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Insert()
  nameWithType: SqlDataSource.Insert()
  fullName: System.Web.UI.WebControls.SqlDataSource.Insert()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "執行插入作業使用<> *> 的 SQL 字串和任何參數，位於<> *> 集合。"
  remarks: "在執行插入作業之前，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.SqlDataSource.Inserting>事件。</xref:System.Web.UI.WebControls.SqlDataSource.Inserting> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> 您可以處理這個事件來檢查參數的值，並執行插入作業之前任何前置處理。 若要執行插入作業<xref:System.Web.UI.WebControls.SqlDataSourceView>物件組建<xref:System.Data.Common.DbCommand>物件使用<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>文字和任何相關聯<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>屬性，然後執行<xref:System.Data.Common.DbCommand>對基礎資料庫物件。</xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> </xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSourceView>       在作業完成之後，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>事件。</xref:System.Web.UI.WebControls.SqlDataSource.Inserted> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> 您可以處理這個事件來檢查任何傳回值和錯誤碼，並執行任何後續處理。       Insert 方法會提供以程式設計方式存取`Insert`方法。 如果<xref:System.Web.UI.WebControls.SqlDataSource>控制項是與資料繫結控制項產生關聯，將資料繫結控制項自動呼叫`Insert`方法。</xref:System.Web.UI.WebControls.SqlDataSource>       Insert 方法會委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A>方法<xref:System.Web.UI.WebControls.SqlDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A>      > [!IMPORTANT] > 值插入參數不需要驗證，可能會造成安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>事件來執行查詢之前驗證參數值。</xref:System.Web.UI.WebControls.SqlDataSource.Filtering> 如需詳細資訊，請參閱[指令碼擅用概觀](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control and a simple Web Forms page. The current data in the Data table is displayed in the <xref:System.Web.UI.WebControls.DropDownList> control. You can add new records by entering values in the <xref:System.Web.UI.WebControls.TextBox> controls, and then clicking the **Insert** button. When the **Insert** button is clicked, the specified values are inserted into the database, and then the <xref:System.Web.UI.WebControls.DropDownList> is refreshed.  \n  \n> [!IMPORTANT]\n>  This example includes a text box that accepts user input, which is a potential security threat and values are inserted into parameters without validation, which is also a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](../Topic/Script%20Exploits%20Overview.md).  \n  \n> [!NOTE]\n>  This example shows how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_101_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_101_1.aspx)]"
  syntax:
    content: public int Insert ();
    parameters: []
    return:
      type: System.Int32
      description: "值，表示基礎資料庫中插入的資料列數目。"
  overload: System.Web.UI.WebControls.SqlDataSource.Insert*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>無法建立與基礎資料來源的連線。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommand
  id: InsertCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: InsertCommand
  nameWithType: SqlDataSource.InsertCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertCommand
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定 SQL 字串<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控制項使用基礎資料庫中插入資料。"
  remarks: "InsertCommand 代表 SQL 查詢或預存程序的名稱，並且由<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>方法。</xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>       由於不同的資料庫產品使用不同種類的 SQL，SQL 字串的語法取決於目前 ADO.NET 提供者正在使用中，以識別<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>屬性。</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 如果 SQL 字串是參數型的查詢或命令，參數的預留位置也取決於所使用的 ADO.NET 提供者。 例如，如果提供者是<xref:System.Data.SqlClient?displayProperty=fullName>，這是預設提供者<xref:System.Web.UI.WebControls.SqlDataSource>類別，參數的預留位置是`&quot;@parameterName&quot;`。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 不過，如果提供者設定為<xref:System.Data.Odbc?displayProperty=fullName>或<xref:System.Data.OleDb?displayProperty=fullName>，參數的預留位置是`&quot;?&quot;`。</xref:System.Data.OleDb?displayProperty=fullName> </xref:System.Data.Odbc?displayProperty=fullName> 如需參數化的 SQL 查詢和命令的詳細資訊，請參閱[使用參數與 SqlDataSource 控制項](~/add/includes/ajax-current-ext-md.md)。       如果資料來源支援預存程序，InsertCommand 可以是 SQL 字串或預存程序的名稱。       這個屬性會委派至<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceView>相關聯<xref:System.Web.UI.WebControls.SqlDataSource>控制項。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>      > [!IMPORTANT] > 屬性並未存放 InsertCommand 基於安全性目的，是檢視狀態。 很可能在用戶端上檢視狀態的內容進行解碼，因為檢視中儲存機密資訊的資料庫結構狀態可能會導致資訊洩漏的弱點。      > [!IMPORTANT] > 值插入參數不需要驗證，可能會造成安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>事件來執行查詢之前驗證參數值。</xref:System.Web.UI.WebControls.SqlDataSource.Filtering> 如需詳細資訊，請參閱[指令碼擅用概觀](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control and a simple Web Forms page. The second code example demonstrates how to retrieve data from Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control and how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row into the <xref:System.Web.UI.WebControls.GridView> control and as a form to insert new records.  \n  \n> [!NOTE]\n>  These examples show how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n The following code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control and a simple Web Forms page. The current data in the Data table is displayed in the <xref:System.Web.UI.WebControls.DropDownList> control. You can add new records by entering values into the <xref:System.Web.UI.WebControls.TextBox> controls, and then clicking the **Insert** button. When the **Insert** button is clicked, the specified values are inserted into the database, and the <xref:System.Web.UI.WebControls.DropDownList> control is refreshed.  \n  \n> [!IMPORTANT]\n>  This example includes a text box that accepts user input, which is a potential security threat, and values are inserted into parameters without validation, which is also a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](../Topic/Script%20Exploits%20Overview.md).  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_805_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_805_1.aspx)]  \n  \n The following code example demonstrates how to retrieve data from SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control and how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> control and as a form to insert new records.  \n  \n Initially, the data is displayed in the <xref:System.Web.UI.WebControls.GridView> control, and the selected row of the <xref:System.Web.UI.WebControls.GridView> is also displayed in the <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls use different data source controls; the one that is associated with the <xref:System.Web.UI.WebControls.DetailsView> has the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties, which ensures that the selected row of the <xref:System.Web.UI.WebControls.GridView> is displayed.  \n  \n If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. If you insert a record, the <xref:System.Web.UI.WebControls.DetailsView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection with values from the bound columns and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> method. The <xref:System.Web.UI.WebControls.DetailsView> can infer the correct parameters from any <xref:System.Web.UI.WebControls.BoundField> object and a parameter for the <xref:System.Web.UI.WebControls.TemplateField> object when the ASP.NET two-way data-binding syntax is used. In this example, an additional parameter is added in the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> event handler to handle the primary key that is returned by the stored procedure.  \n  \n Finally, after data is inserted into the database by the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event, the value of the primary key of the inserted row is displayed and the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_805_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_805_2.aspx)]"
  syntax:
    content: public string InsertCommand { get; set; }
    return:
      type: System.String
      description: "SQL 字串<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>用於插入資料。"
  overload: System.Web.UI.WebControls.SqlDataSource.InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommandType
  id: InsertCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: InsertCommandType
  nameWithType: SqlDataSource.InsertCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertCommandType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，指出是否在文字<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand*>屬性是 SQL 陳述式或預存程序的名稱。</xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand*>"
  remarks: "InsertCommandType 屬性委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType%2A>"
  example:
  - "The following code example demonstrates how to retrieve data from a Microsoft SQL Server database and display it in a <xref:System.Web.UI.WebControls.GridView> control. It also demonstrates how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> and as a form to insert new records.  \n  \n The <xref:System.Web.UI.WebControls.GridView> control displays a set of data and the <xref:System.Web.UI.WebControls.DetailsView> displays the details for a particular row. If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. The stored procedure name is set in the <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> property and identified as a stored procedure by setting the InsertCommandType property to the <xref:System.Web.UI.WebControls.SqlDataSourceCommandType> value.  \n  \n After data is inserted into the database by the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event, the value of the primary key of the inserted row is displayed, and the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_948_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_948_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandType
      description: "其中一個<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref>值。 預設值是<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref>值。"
  overload: System.Web.UI.WebControls.SqlDataSource.InsertCommandType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Inserted
  id: Inserted
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Inserted
  nameWithType: SqlDataSource.Inserted
  fullName: System.Web.UI.WebControls.SqlDataSource.Inserted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "完成插入作業時發生。"
  remarks: "處理插入事件之後插入作業已完成檢查輸出參數的值。 輸出參數都是從<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>與事件相關聯的物件。</xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>       如需處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "The following code example demonstrates how to retrieve data from Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control and how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> and as a form to insert new records.  \n  \n> [!NOTE]\n>  This example shows how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n Initially, the data is displayed in the <xref:System.Web.UI.WebControls.GridView> control, and the selected row of the <xref:System.Web.UI.WebControls.GridView> is also displayed in the <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls use different data source controls; the one that is associated with the <xref:System.Web.UI.WebControls.DetailsView> has the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties, which ensures that the selected row of the <xref:System.Web.UI.WebControls.GridView> is displayed.  \n  \n If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. If you insert a record, the <xref:System.Web.UI.WebControls.DetailsView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection with values from the bound columns and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> method. The <xref:System.Web.UI.WebControls.DetailsView> can infer the correct parameters from any <xref:System.Web.UI.WebControls.BoundField> object and a parameter for the <xref:System.Web.UI.WebControls.TemplateField> object when the ASP.NET two-way data-binding syntax is used. In this example, an additional parameter is added in the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> event handler to handle the primary key that is returned by the stored procedure.  \n  \n Finally, after data is inserted into the database by the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the Inserted event, the value of the primary key of the inserted row is displayed, and the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_73_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_73_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Inserting
  id: Inserting
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Inserting
  nameWithType: SqlDataSource.Inserting
  fullName: System.Web.UI.WebControls.SqlDataSource.Inserting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "插入作業之前發生。"
  remarks: "處理插入事件來執行額外的初始化作業專屬於您的應用程式，來驗證參數的值，或若要變更參數值之前<xref:System.Web.UI.WebControls.SqlDataSource>控制項執行插入作業。</xref:System.Web.UI.WebControls.SqlDataSource> 基礎資料來源的連接尚未開啟時，會呼叫事件處理常式委派。 因此，您無法在作業取消直接藉由呼叫<xref:System.Data.Common.DbCommand.Cancel%2A>方法<xref:System.Data.Common.DbCommand>所公開的物件<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>屬性。</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> </xref:System.Data.Common.DbCommand> </xref:System.Data.Common.DbCommand.Cancel%2A> 您可以不過，將資料庫作業取消藉由設定<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>物件`true`。</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> </xref:System.ComponentModel.CancelEventArgs.Cancel%2A>       如需處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "The following code example demonstrates how to retrieve data from Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control and how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> and as a form to insert new records.  \n  \n> [!NOTE]\n>  This example shows how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n Initially, the data is displayed in the <xref:System.Web.UI.WebControls.GridView> control, and the selected row of the <xref:System.Web.UI.WebControls.GridView> is also displayed in the <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls use different data source controls; the one that is associated with the <xref:System.Web.UI.WebControls.DetailsView> has the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties, which ensures that the selected row of the <xref:System.Web.UI.WebControls.GridView> is displayed.  \n  \n If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. If you insert a record, the <xref:System.Web.UI.WebControls.DetailsView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection with values from the bound columns and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> method. The <xref:System.Web.UI.WebControls.DetailsView> can infer the correct parameters from any <xref:System.Web.UI.WebControls.BoundField> object and a parameter for the <xref:System.Web.UI.WebControls.TemplateField> when the ASP.NET two-way data-binding syntax is used. In this example, an additional parameter is added in the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> event handler to handle the primary key that is returned by the stored procedure.  \n  \n Finally, after data is inserted into the database by the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event, the value of the primary key of the inserted row is displayed, and the `DataBind` method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_151_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_151_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.InsertParameters
  id: InsertParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: InsertParameters
  nameWithType: SqlDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得參數集合，其中包含所使用的參數<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand*>屬性從<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>與其相關聯物件<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控制項。</xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand*>"
  remarks: "InsertParameters 屬性擷取<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A>屬性所包含的<xref:System.Web.UI.WebControls.SqlDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A>       如果<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>屬性包含參數化的 SQL 查詢、 InsertParameters 集合包含任何<xref:System.Web.UI.WebControls.Parameter>對應於 SQL 字串中的參數預留位置的物件。</xref:System.Web.UI.WebControls.Parameter> </xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>       ADO.NET 提供者，根據 InsertParameters 集合中的參數的順序可能十分重要。 <xref:System.Data.OleDb?displayProperty=fullName>和<xref:System.Data.Odbc?displayProperty=fullName>提供者將出現在參數化 SQL 查詢中參數的順序根據集合中的參數產生關聯。</xref:System.Data.Odbc?displayProperty=fullName> </xref:System.Data.OleDb?displayProperty=fullName> <xref:System.Data.SqlClient?displayProperty=fullName>提供者，這是預設的 ADO.NET 提供者的<xref:System.Web.UI.WebControls.SqlDataSource>控制項，將產生關聯，parameters 集合中的 SQL 查詢中的預留位置別名參數的名稱相符。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 如需參數化的 SQL 查詢和命令的詳細資訊，請參閱[使用參數與 SqlDataSource 控制項](~/add/includes/ajax-current-ext-md.md)。      > [!IMPORTANT] > 值插入參數不需要驗證，可能會造成安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>事件來執行查詢之前驗證參數值。</xref:System.Web.UI.WebControls.SqlDataSource.Filtering> 如需詳細資訊，請參閱[指令碼擅用概觀](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control and a simple Web Forms page. The current data in the Data table is displayed in the <xref:System.Web.UI.WebControls.DropDownList> control. You can add new records by entering values in the <xref:System.Web.UI.WebControls.TextBox> controls, and then clicking the **Insert** button. When the **Insert** button is clicked, the specified values are inserted into the database, and the <xref:System.Web.UI.WebControls.DropDownList> control is refreshed.  \n  \n> [!IMPORTANT]\n>  This example includes a text box that accepts user input, which is a potential security threat, and values are inserted into parameters without validation, which is also a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](../Topic/Script%20Exploits%20Overview.md).  \n  \n> [!NOTE]\n>  This example shows how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_596_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_596_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> ，其中包含所使用的參數<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand*>屬性。</xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand*>"
  overload: System.Web.UI.WebControls.SqlDataSource.InsertParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.LoadViewState(System.Object)
  id: LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: LoadViewState(Object)
  nameWithType: SqlDataSource.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.SqlDataSource.LoadViewState(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "載入中的屬性狀態<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>需要保存的控制項。"
  remarks: "LoadViewState 方法用來載入先前儲存的檢視狀態的<xref:System.Web.UI.WebControls.SqlDataSource>控制項。</xref:System.Web.UI.WebControls.SqlDataSource>"
  syntax:
    content: protected override void LoadViewState (object savedState);
    parameters:
    - id: savedState
      type: System.Object
      description: "物件，代表狀態的<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>。"
  overload: System.Web.UI.WebControls.SqlDataSource.LoadViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString
  id: OldValuesParameterFormatString
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: OldValuesParameterFormatString
  nameWithType: SqlDataSource.OldValuesParameterFormatString
  fullName: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定要套用至傳遞給任何參數的名稱的格式字串<> *> 或<> *> 方法。"
  remarks: "參數格式字串只會套用到主索引鍵，例如，藉以`DataKeyNames`屬性相關聯的資料繫結控制項，或在刪除和更新案例其中<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>屬性設定為<xref:System.Web.UI.ConflictOptions>值和一組`oldValues`會傳遞至相對應的資料方法。</xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> 在此情況下，格式字串套用至每個參數名稱`oldValues`集合。       您可能會在此變更的參數屬性的兩個常見的案例如下:-若要在區別在更新舊的和新值。 當<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>屬性設定為<xref:System.Web.UI.ConflictOptions>值參數的原始和新的值都會加入<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> 而格式化的字串，不會為每個資料欄位建立具有相同名稱的兩個參數。 藉由變更原始值參數的名稱，您可以比較原始資料來源偵測衝突，並比較索引鍵值的資料。      -有些視覺化設計工具會實作特定的命名配置，針對原始值和索引鍵。"
  syntax:
    content: public string OldValuesParameterFormatString { get; set; }
    return:
      type: System.String
      description: "字串，表示格式字串套用至任何名稱<code> oldValues </code>參數傳遞給<> *> 或<> *> 方法。 預設為&quot;{0}&quot;。"
  overload: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: SqlDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSource.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "新增<xref href=&quot;System.Web.UI.Page.LoadComplete&quot;></xref>事件處理常式來<xref href=&quot;System.Web.UI.Page&quot;></xref>包含控制項<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控制項。"
  remarks: "已加入之事件處理常式<xref:System.Web.UI.WebControls.SqlDataSource>物件更新<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>和<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>值。</xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource> 如果更新了值，<xref:System.Web.UI.IDataSource.DataSourceChanged>引發事件時，造成繫結至任何控制項<xref:System.Web.UI.WebControls.SqlDataSource>重新繫結的控制項。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.IDataSource.DataSourceChanged>"
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件資料。</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.SqlDataSource.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.ProviderName
  id: ProviderName
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: ProviderName
  nameWithType: SqlDataSource.ProviderName
  fullName: System.Web.UI.WebControls.SqlDataSource.ProviderName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定.NET Framework 資料提供者的名稱<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控制項用來連接到基礎資料來源。"
  remarks: ".NET Framework 包含下列資料提供者:-<xref:System.Data.SqlClient?displayProperty=fullName>提供者是.NET Framework Data Provider for SQL Server 的預設值。</xref:System.Data.SqlClient?displayProperty=fullName>      -<xref:System.Data.OleDb?displayProperty=fullName>提供者是.NET Framework Data Provider for OLE DB。</xref:System.Data.OleDb?displayProperty=fullName>      -<xref:System.Data.Odbc?displayProperty=fullName>提供者是.NET Framework Data Provider for ODBC。</xref:System.Data.Odbc?displayProperty=fullName>      -<xref:System.Data.OracleClient?displayProperty=fullName>提供者是.NET Framework Data Provider for Oracle。</xref:System.Data.OracleClient?displayProperty=fullName>       ProviderName 屬性永遠不會設定為未受管理的 ADO.NET 提供者的名稱這類`MSDAORA`。 如需詳細資訊，請參閱[使用 SqlDataSource 控制項的選取資料](~/add/includes/ajax-current-ext-md.md)。       如果您變更的 ProviderName 屬性，<xref:System.Web.UI.IDataSource.DataSourceChanged>引發事件時，造成繫結至任何控制項<xref:System.Web.UI.WebControls.SqlDataSource>重新繫結。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.IDataSource.DataSourceChanged>       可用的提供者的清單中指定`DbProviderFactories`小節的`system.data`Machine.config 檔案的區段。"
  example:
  - "This section contains two code examples. The first code demonstrates how to connect to a SQL Server database using the default .NET Framework Data Provider for SQL Server for the <xref:System.Web.UI.WebControls.SqlDataSource> control, the <xref:System.Data.SqlClient?displayProperty=fullName>. The second code example demonstrates how to connect to an ODBC database using the .NET Framework Data Provider for ODBC, the <xref:System.Data.Odbc?displayProperty=fullName>.  \n  \n The following code example demonstrates how to connect to a SQL Server database using the default data provider for the <xref:System.Web.UI.WebControls.SqlDataSource> control, the <xref:System.Data.SqlClient?displayProperty=fullName>. Whenever the ProviderName property is not explicitly set, the default provider is used. The <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> property is provider-specific.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1309_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1309_1.aspx)]  \n  \n The following code example, which is functionally the same as the preceding code example, demonstrates how to connect to an ODBC database using the .NET Framework Data Provider for ODBC, the <xref:System.Data.Odbc?displayProperty=fullName>. The <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> property is set to the name of an ODBC data source name (DSN) that is used to connect to the ODBC database.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_1odbc#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1309_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_1odbc#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1309_2.aspx)]"
  syntax:
    content: public virtual string ProviderName { get; set; }
    return:
      type: System.String
      description: "資料提供者的名稱， <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>使用; 否則 Microsoft SQL Server，如果沒有提供者設定的 ADO.NET 提供者。 預設為 Microsoft SQL Server 的 ADO.NET 提供者。"
  overload: System.Web.UI.WebControls.SqlDataSource.ProviderName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SaveViewState
  id: SaveViewState
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SaveViewState()
  nameWithType: SqlDataSource.SaveViewState()
  fullName: System.Web.UI.WebControls.SqlDataSource.SaveViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "儲存目前的檢視狀態<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控制項。"
  syntax:
    content: protected override object SaveViewState ();
    parameters: []
    return:
      type: System.Object
      description: "物件，包含的儲存的狀態<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>。"
  overload: System.Web.UI.WebControls.SqlDataSource.SaveViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)
  id: Select(System.Web.UI.DataSourceSelectArguments)
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Select(DataSourceSelectArguments)
  nameWithType: SqlDataSource.Select(DataSourceSelectArguments)
  fullName: System.Web.UI.WebControls.SqlDataSource.Select(DataSourceSelectArguments)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "從基礎資料庫中擷取資料，使用<> *> 的 SQL 字串和任何參數，位於<> *> 集合。"
  remarks: "Select 方法期間會自動呼叫<xref:System.Web.UI.Control.PreRender>頁面生命週期的階段。</xref:System.Web.UI.Control.PreRender> 呼叫此方法已經附加至的資料繫結控制項<xref:System.Web.UI.WebControls.SqlDataSource>透過控制其<xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A>屬性。</xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> </xref:System.Web.UI.WebControls.SqlDataSource>       <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>方法會傳回<xref:System.Data.DataView>物件，如果<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>屬性設定為<xref:System.Web.UI.WebControls.SqlDataSourceMode>值。</xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> </xref:System.Data.DataView> </xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>方法會傳回<xref:System.Data.IDataReader>物件，如果<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>屬性設定為<xref:System.Web.UI.WebControls.SqlDataSourceMode>值。</xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> </xref:System.Data.IDataReader> </xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> 關閉<xref:System.Data.IDataReader>當您完成讀取資料的物件。</xref:System.Data.IDataReader>       在執行 Select 作業之前，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.SqlDataSource.Selecting>事件。</xref:System.Web.UI.WebControls.SqlDataSource.Selecting> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A> 您可以處理這個事件來檢查參數的值，並執行 Select 作業之前的任何處理。       選取的作業完成後，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.SqlDataSource.Selected>事件。</xref:System.Web.UI.WebControls.SqlDataSource.Selected> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A> 您可以處理這個事件來檢查任何傳回值和錯誤碼，並執行任何後續處理。       如果<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>屬性設定為<xref:System.Web.UI.WebControls.SqlDataSourceMode?displayProperty=fullName>和啟用快取、<xref:System.Web.UI.WebControls.SqlDataSource>物件擷取的資料，並選取作業期間，將資料儲存至快取。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceMode?displayProperty=fullName> </xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 快取，已捨棄，或重新整理會根據建立指定之組合的快取行為<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>屬性。</xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> </xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>      > [!IMPORTANT] > 時您使用用戶端模擬 Microsoft Windows 驗證下的，第一位使用者存取資料時，會快取資料。 如果另一個使用者要求相同的資料時，會從快取中擷取的資料。 資料不會擷取藉由另一個呼叫資料庫來驗證使用者的存取資料。 如果您預期一個以上的使用者存取資料，且您希望每個擷取資料，由資料庫的安全性設定來加以驗證，請勿使用快取。       如果<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>屬性設定為<xref:System.Web.UI.WebControls.SqlDataSourceMode?displayProperty=fullName>和<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>指定屬性、 篩選條件運算式會評估與任何提供<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>屬性和結果篩選條件會套用至資料的清單選取作業期間。</xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> </xref:System.Web.UI.WebControls.SqlDataSourceMode?displayProperty=fullName> </xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>       選取方法會委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>方法<xref:System.Web.UI.WebControls.SqlDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> 若要執行資料擷取作業，<xref:System.Web.UI.WebControls.SqlDataSourceView>建置<xref:System.Data.Common.DbCommand>物件使用<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>文字和任何相關聯<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>值，然後再執行<xref:System.Data.Common.DbCommand>對基礎資料庫。</xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> </xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSourceView>      > [!IMPORTANT] > 值插入參數不需要驗證，可能會造成安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>事件來執行查詢之前驗證參數值。</xref:System.Web.UI.WebControls.SqlDataSource.Filtering> 如需詳細資訊，請參閱[指令碼擅用概觀](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following examples show how to programmatically call the Select method and set values based on the result of the query. The following example shows the declarative code for the Web controls.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource.Select#1](~/add/codesnippet/csharp/475f4e1e-4832-4407-9121-_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource.Select#1](~/add/codesnippet/visualbasic/475f4e1e-4832-4407-9121-_1.aspx)]  \n  \n The following example shows how to programmatically call the Select method. The <xref:System.Web.UI.WebControls.SqlDataSource> control returns an integer. The value of the integer is used to set the text of a <xref:System.Web.UI.WebControls.Label> control and to determine whether to display a <xref:System.Web.UI.WebControls.HyperLink> control.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource.Select#2](~/add/codesnippet/visualbasic/475f4e1e-4832-4407-9121-_2.vb)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource.Select#2](~/add/codesnippet/csharp/475f4e1e-4832-4407-9121-_2.cs)]"
  syntax:
    content: public System.Collections.IEnumerable Select (System.Web.UI.DataSourceSelectArguments arguments);
    parameters:
    - id: arguments
      type: System.Web.UI.DataSourceSelectArguments
      description: "A <xref href=&quot;System.Web.UI.DataSourceSelectArguments&quot;> </xref>物件，用來要求擷取基本的資料以外的資料作業。"
    return:
      type: System.Collections.IEnumerable
      description: "<xref:System.Collections.IEnumerable>資料列的清單。</xref:System.Collections.IEnumerable>"
  overload: System.Web.UI.WebControls.SqlDataSource.Select*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>物件無法建立與基礎資料來源的連線。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommand
  id: SelectCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SelectCommand
  nameWithType: SqlDataSource.SelectCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectCommand
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定 SQL 字串<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控制項用來從基礎資料庫中擷取資料。"
  remarks: "代表 SQL 查詢或預存程序中，名稱的 SelectCommand 屬性，並且由<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法來從 SQL Server 資料庫擷取資料。</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 如果您選取的命令中使用星號 （*），以選取所有資料行，而且如果您使用自動產生程式碼來執行更新或刪除作業，請確定沒有資料行中有空格的名稱。       由於不同的資料庫產品使用不同種類的 SQL，SQL 字串的語法取決於目前 ADO.NET 提供者正在使用中，以識別<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>屬性。</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 如果 SQL 字串是參數型的查詢或命令，參數的預留位置也取決於所使用的 ADO.NET 提供者。 例如，如果提供者是<xref:System.Data.SqlClient?displayProperty=fullName>，這是預設提供者<xref:System.Web.UI.WebControls.SqlDataSource>類別，參數的預留位置是`&quot;@parameterName&quot;`。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 不過，如果提供者設定為<xref:System.Data.Odbc?displayProperty=fullName>或<xref:System.Data.OleDb?displayProperty=fullName>，參數的預留位置是`&quot;?&quot;`。</xref:System.Data.OleDb?displayProperty=fullName> </xref:System.Data.Odbc?displayProperty=fullName> 如需參數化的 SQL 查詢和命令的詳細資訊，請參閱[使用參數與 SqlDataSource 控制項](~/add/includes/ajax-current-ext-md.md)。       如果資料來源支援預存程序，SelectCommand 屬性可以是 SQL 字串或預存程序的名稱。       SelectCommand 屬性委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>      > [!IMPORTANT] > 基於安全性考量，的 SelectCommand 屬性不會儲存為檢視狀態。 很可能在用戶端上檢視狀態的內容進行解碼，因為檢視中儲存機密資訊的資料庫結構狀態可能會導致資訊洩漏的弱點。      > [!IMPORTANT] > 值插入參數不需要驗證，可能會造成安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>事件來執行查詢之前驗證參數值。</xref:System.Web.UI.WebControls.SqlDataSource.Filtering> 如需詳細資訊，請參閱[指令碼擅用概觀](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to set the SelectCommand text to a basic SQL query to retrieve data from an ODBC-compliant database and display it in a <xref:System.Web.UI.WebControls.GridView> control. The second code example demonstrates how to set the SelectCommand text to the name of a stored procedure and the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> property to the <xref:System.Web.UI.WebControls.SqlDataSourceCommandType> value to retrieve data from a Microsoft SQL Server database and display it in a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n In both examples, there is no need to explicitly call the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method because the data-bound controls that are attached to the data source control through the <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> property will automatically call the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method during the <xref:System.Web.UI.Control.PreRender> phase.  \n  \n The following code example demonstrates how to set the SelectCommand text to a basic SQL query to retrieve data from an ODBC-compliant database and display it in a <xref:System.Web.UI.WebControls.GridView> control.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_4odbc#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1253_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_4odbc#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1253_1.aspx)]  \n  \n The following code example demonstrates how to set the SelectCommand text to the name of a stored procedure and the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> property to the <xref:System.Web.UI.WebControls.SqlDataSourceCommandType> value to retrieve data from a SQL Server database and display it in a <xref:System.Web.UI.WebControls.DropDownList> control. The SelectCommand property can be an SQL query or the name of a stored procedure, if the data source supports stored procedures.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1253_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1253_2.aspx)]"
  syntax:
    content: public string SelectCommand { get; set; }
    return:
      type: System.String
      description: "SQL 字串或預存程序的名稱， <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>用來擷取資料。"
  overload: System.Web.UI.WebControls.SqlDataSource.SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommandType
  id: SelectCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SelectCommandType
  nameWithType: SqlDataSource.SelectCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectCommandType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，指出是否在文字<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand*>屬性是 SQL 查詢或預存程序的名稱。</xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand*>"
  remarks: "SelectCommandType 屬性委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType%2A>"
  example:
  - "The following code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> text to the name of a stored procedure and the SelectCommandType property to the <xref:System.Web.UI.WebControls.SqlDataSourceCommandType> value, in order to retrieve data from a Microsoft SQL Server database and display it in a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_358_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_358_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandType
      description: "其中一個<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref>值。 預設值是<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref>值。"
  overload: System.Web.UI.WebControls.SqlDataSource.SelectCommandType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Selected
  id: Selected
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Selected
  nameWithType: SqlDataSource.Selected
  fullName: System.Web.UI.WebControls.SqlDataSource.Selected
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "資料擷取作業完成時發生。"
  remarks: "處理資料擷取作業完成之後，請檢查輸出參數的值選取事件。 輸出參數都是從<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>與事件相關聯的物件。</xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>       如需處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Selecting
  id: Selecting
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Selecting
  nameWithType: SqlDataSource.Selecting
  fullName: System.Web.UI.WebControls.SqlDataSource.Selecting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "資料擷取作業之前發生。"
  remarks: "處理執行額外的初始化作業專屬於您的應用程式，來驗證參數的值在 Selecting 事件或變更參數值之前<xref:System.Web.UI.WebControls.SqlDataSource>控制項執行選取的作業。</xref:System.Web.UI.WebControls.SqlDataSource> 選取的引數都是從<xref:System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs>與事件相關聯的物件。</xref:System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs>       如需處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SelectParameters
  id: SelectParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SelectParameters
  nameWithType: SqlDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得參數集合，其中包含所使用的參數<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand*>屬性從<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>與其相關聯物件<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控制項。</xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand*>"
  remarks: "如果<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>屬性包含參數化的 SQL 查詢、 SelectParameters 集合包含任何<xref:System.Web.UI.WebControls.Parameter>對應於 SQL 字串中的參數預留位置的物件。</xref:System.Web.UI.WebControls.Parameter> </xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>       ADO.NET 提供者，根據 SelectParameters 集合中的參數的順序可能十分重要。 <xref:System.Data.OleDb?displayProperty=fullName>和<xref:System.Data.Odbc?displayProperty=fullName>提供者將出現在參數化 SQL 查詢中參數的順序根據集合中的參數產生關聯。</xref:System.Data.Odbc?displayProperty=fullName> </xref:System.Data.OleDb?displayProperty=fullName> <xref:System.Data.SqlClient?displayProperty=fullName>提供者，這是預設的 ADO.NET 提供者的<xref:System.Web.UI.WebControls.SqlDataSource>控制項，將產生關聯，parameters 集合中的 SQL 查詢中的預留位置別名參數的名稱相符。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 如需參數化的 SQL 查詢和命令的詳細資訊，請參閱[使用參數與 SqlDataSource 控制項](~/add/includes/ajax-current-ext-md.md)。       SelectParameters 屬性擷取<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A>屬性所包含的<xref:System.Web.UI.WebControls.SqlDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A>      > [!IMPORTANT] > 值插入參數不需要驗證，可能會造成安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Selecting>事件來執行查詢之前驗證參數值。</xref:System.Web.UI.WebControls.SqlDataSource.Selecting> 如需詳細資訊，請參閱[指令碼擅用概觀](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database in Microsoft SQL Server by setting the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property to an SQL query. The SQL query is parameterized and the placeholder in the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property is matched to the <xref:System.Web.UI.WebControls.ControlParameter> object that is added to the SelectParameters collection. The <xref:System.Web.UI.WebControls.DropDownList> control, which the <xref:System.Web.UI.WebControls.ControlParameter> is bound to, acts as a filter for what is displayed in the <xref:System.Web.UI.WebControls.ListBox> control.  \n  \n For information about other types of parameters you can use, see the <xref:System.Web.UI.WebControls.Parameter> class overview.  \n  \n> [!NOTE]\n>  Because the parameter is used in a WHERE clause, the use of the SelectParameters property in the code example is functionally equivalent to using the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1230_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1230_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> ，其中包含所使用的參數<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand*>屬性。</xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand*>"
  overload: System.Web.UI.WebControls.SqlDataSource.SelectParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SortParameterName
  id: SortParameterName
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SortParameterName
  nameWithType: SqlDataSource.SortParameterName
  fullName: System.Web.UI.WebControls.SqlDataSource.SortParameterName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定用來排序擷取的資料時使用預存程序執行資料擷取預存程序參數的名稱。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>會評估屬性只有當 SQL 命令也就是包含<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>屬性是預存程序的名稱。</xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> 在此情況下，如果 SortParameterName 屬性設定，它會包含用來排序結果的預存程序參數的名稱。       如果<xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A>屬性設定，它會附加至<xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>屬性。</xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A>"
  syntax:
    content: public string SortParameterName { get; set; }
    return:
      type: System.String
      description: "用來排序擷取的資料時使用預存程序執行資料擷取預存程序參數的名稱。"
  overload: System.Web.UI.WebControls.SqlDataSource.SortParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency
  id: SqlCacheDependency
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SqlCacheDependency
  nameWithType: SqlDataSource.SqlCacheDependency
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定以分號分隔的字串，表示哪些資料庫和資料表，以使用 Microsoft SQL Server 的快取相依性。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>控制項支援根據選擇性的到期原則<xref:System.Web.Caching.SqlCacheDependency>（服務必須設定為資料庫伺服器） 的資料快取的物件。</xref:System.Web.Caching.SqlCacheDependency> </xref:System.Web.UI.WebControls.SqlDataSource>       SqlCacheDependency 字串會識別資料庫和資料表，根據所使用的相同格式`@ Page`指示詞，其中字串的第一個部分是 Microsoft SQL Server 資料庫的連接字串，後面接著冒號分隔符號和最後的資料庫資料表名稱 (例如， `&quot;connectionstring1:table1&quot;`)。 如果 SqlCacheDependency 屬性相依於多個資料表中，連接字串和資料表名稱組以分號分隔 (例如， `&quot;connectionstring1:table1&quot;;connectionstring2:table2&quot;`)。      > [!IMPORTANT] > 時您使用用戶端模擬 Microsoft Windows 驗證下的，第一位使用者存取資料時，會快取資料。 如果另一個使用者要求相同的資料時，會從快取中擷取的資料。 資料不會擷取藉由另一個呼叫資料庫來驗證使用者的存取資料。 如果您預期有一個以上使用者存取資料，而且您希望每個擷取資料來驗證由資料庫的安全性組態，請勿使用快取。"
  example:
  - "The following code example demonstrates how to create a SQL Server cache dependency and set the SqlCacheDependency property of a <xref:System.Web.UI.WebControls.SqlDataSource> control. In this example, the database is polled every 120 seconds. If the data in the Northwind Traders Employees table changes during that time, any data that is cached by the <xref:System.Web.UI.WebControls.SqlDataSource> control and displayed by the <xref:System.Web.UI.WebControls.GridView> control is refreshed by the <xref:System.Web.UI.WebControls.SqlDataSource> control the next time the database is polled.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_23sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_795_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_23sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_795_1.aspx)]"
  syntax:
    content: public virtual string SqlCacheDependency { get; set; }
    return:
      type: System.String
      description: "字串，表示哪些資料庫和資料表中，以使用 SQL Server 的快取相依性。"
  overload: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.TrackViewState
  id: TrackViewState
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: TrackViewState()
  nameWithType: SqlDataSource.TrackViewState()
  fullName: System.Web.UI.WebControls.SqlDataSource.TrackViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "追蹤檢視狀態變更為<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控制，好讓這些變更可以儲存在<xref href=&quot;System.Web.UI.StateBag&quot;></xref>控制項物件。"
  remarks: "TrackViewState 方法會覆寫來標示的起點開始追蹤並儲存變更至控制項的控制項檢視狀態的一部分。"
  syntax:
    content: protected override void TrackViewState ();
    parameters: []
  overload: System.Web.UI.WebControls.SqlDataSource.TrackViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Update
  id: Update
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Update()
  nameWithType: SqlDataSource.Update()
  fullName: System.Web.UI.WebControls.SqlDataSource.Update()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "執行更新作業使用<> *> 的 SQL 字串和任何參數，位於<> *> 集合。"
  remarks: "更新方法會自動呼叫<xref:System.Web.UI.WebControls.GridView>， <xref:System.Web.UI.WebControls.DetailsView>，和<xref:System.Web.UI.WebControls.FormView>控制在回傳期間，如果資料已經變更。</xref:System.Web.UI.WebControls.FormView> </xref:System.Web.UI.WebControls.DetailsView> </xref:System.Web.UI.WebControls.GridView> 對於其他控制項中已經變更的資料，Update 方法可以明確呼叫在回傳期間<xref:System.Windows.Forms.Form.Load>事件。</xref:System.Windows.Forms.Form.Load>       在執行更新作業之前，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.SqlDataSource.Updating>事件。</xref:System.Web.UI.WebControls.SqlDataSource.Updating> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A> 您可以處理這個事件來檢查參數的值，並執行更新作業之前任何前置處理。       更新作業完成後，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A>呼叫方法來引發<xref:System.Web.UI.WebControls.SqlDataSource.Updated>事件。</xref:System.Web.UI.WebControls.SqlDataSource.Updated> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A> 您可以處理這個事件來檢查任何傳回值和錯誤碼，並執行任何後續處理。       更新方法會委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A>方法<xref:System.Web.UI.WebControls.SqlDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A> 若要執行更新作業，<xref:System.Web.UI.WebControls.SqlDataSourceView>建置<xref:System.Data.Common.DbCommand>物件使用<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>文字和任何相關聯<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>屬性，然後執行<xref:System.Data.Common.DbCommand>對基礎資料庫物件。</xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> </xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSourceView>      > [!IMPORTANT] > 值插入參數不需要驗證，可能會造成安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Updating>事件來執行查詢之前驗證參數值。</xref:System.Web.UI.WebControls.SqlDataSource.Updating> 如需詳細資訊，請參閱[指令碼擅用概觀](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use a <xref:System.Web.UI.WebControls.SqlDataSource> control to display data in a <xref:System.Web.UI.WebControls.DropDownList> control and update data when the **Submit** button is clicked. The second code example demonstrates how to display data that is retrieved from a Microsoft SQL Server database in a <xref:System.Web.UI.WebControls.DropDownList> control and update the record using a <xref:System.Web.UI.WebControls.TextBox> control.  \n  \n The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.SqlDataSource> control to display data in a <xref:System.Web.UI.WebControls.DropDownList> control and update data when the **Submit** button is clicked. The <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> property is set with a parameterized SQL statement, and two <xref:System.Web.UI.WebControls.ControlParameter> parameters are added to the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection. When the **Submit** button is clicked, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is handled to call the Update method explicitly.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_109_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_109_1.aspx)]  \n  \n The following code example demonstrates how to display data that is retrieved from a SQL Server database in a <xref:System.Web.UI.WebControls.DropDownList> control and update the record using a <xref:System.Web.UI.WebControls.TextBox> control. The example shows how you can use a <xref:System.Data.Common.DbTransaction> object to add transaction context when using the <xref:System.Web.UI.WebControls.SqlDataSource> control to update data.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_109_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_109_2.aspx)]"
  syntax:
    content: public int Update ();
    parameters: []
    return:
      type: System.Int32
      description: "值，表示基礎資料庫中更新的資料列數目。"
  overload: System.Web.UI.WebControls.SqlDataSource.Update*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>無法建立與基礎資料來源的連線。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommand
  id: UpdateCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: UpdateCommand
  nameWithType: SqlDataSource.UpdateCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateCommand
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定 SQL 字串<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控制項使用更新基礎資料庫中的資料。"
  remarks: "UpdateCommand 代表 SQL 查詢或預存程序的名稱，並且由<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>方法。</xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>       由於不同的資料庫產品使用不同種類的 SQL，SQL 字串的語法取決於目前 ADO.NET 提供者正在使用中，以識別<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>屬性。</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 如果 SQL 字串是參數型的查詢或命令，參數的預留位置也取決於所使用的 ADO.NET 提供者。 例如，如果提供者是<xref:System.Data.SqlClient?displayProperty=fullName>，這是預設提供者<xref:System.Web.UI.WebControls.SqlDataSource>類別，參數的預留位置是`&quot;@parameterName&quot;`。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 不過，如果提供者設定為<xref:System.Data.Odbc?displayProperty=fullName>或<xref:System.Data.OleDb?displayProperty=fullName>，參數的預留位置是`&quot;?&quot;`。</xref:System.Data.OleDb?displayProperty=fullName> </xref:System.Data.Odbc?displayProperty=fullName> 如需參數化的 SQL 查詢和命令的詳細資訊，請參閱[使用參數與 SqlDataSource 控制項](~/add/includes/ajax-current-ext-md.md)。       如果資料來源支援預存程序，UpdateCommand 屬性可以是 SQL 字串或預存程序的名稱。       UpdateCommand 屬性委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>      > [!IMPORTANT] > 屬性並未存放 UpdateCommand 基於安全性目的，是檢視狀態。 很可能在用戶端上檢視狀態的內容進行解碼，因為檢視中儲存機密資訊的資料庫結構狀態可能會導致資訊洩漏的弱點。      > [!IMPORTANT] > 值插入參數不需要驗證，可能會造成安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>事件來執行查詢之前驗證參數值。</xref:System.Web.UI.WebControls.SqlDataSource.Filtering> 如需詳細資訊，請參閱[指令碼擅用概觀](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to set the UpdateCommand property of the <xref:System.Web.UI.WebControls.SqlDataSource> control and update data in a Microsoft SQL Server database using the <xref:System.Web.UI.WebControls.GridView> control. The second code example demonstrates how to update data in an ODBC database using the <xref:System.Web.UI.WebControls.GridView> control.  \n  \n The following code example demonstrates how to set the UpdateCommand property of the <xref:System.Web.UI.WebControls.SqlDataSource> control and update data in a SQL Server database using the <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.GridView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection, inferring the parameters from the <xref:System.Web.UI.WebControls.BoundField> objects, and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method when the **Update** link on the editable <xref:System.Web.UI.WebControls.GridView> is selected. This example also includes some post-processing: after a record is updated, a notification e-mail message is sent.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_301_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_301_1.aspx)]  \n  \n The following code example, which is functionally identical to the preceding code example, demonstrates how to update data in an ODBC database using the <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> is set to the ADO.NET provider for ODBC, the <xref:System.Data.Odbc?displayProperty=fullName>, and the <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> property is set to the name of an ODBC data source name (DSN).  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_301_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_301_2.aspx)]"
  syntax:
    content: public string UpdateCommand { get; set; }
    return:
      type: System.String
      description: "SQL 字串<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>用來更新資料。"
  overload: System.Web.UI.WebControls.SqlDataSource.UpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType
  id: UpdateCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: UpdateCommandType
  nameWithType: SqlDataSource.UpdateCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得或設定值，指出是否在文字<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand*>屬性是 SQL 陳述式或預存程序的名稱。</xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand*>"
  remarks: "UpdateCommandType 屬性委派給<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType%2A>"
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandType
      description: "其中一個<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref>值。 預設值是<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref>值。"
  overload: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Updated
  id: Updated
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Updated
  nameWithType: SqlDataSource.Updated
  fullName: System.Web.UI.WebControls.SqlDataSource.Updated
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "更新作業完成時發生。"
  remarks: "處理更新作業已完成之後，請檢查輸出參數的值已更新事件。 輸出參數都是從<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>與事件相關聯的物件。</xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>       如需處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "The following code example demonstrates how to display and update data that is retrieved from an ODBC database in a <xref:System.Web.UI.WebControls.GridView> control. After a record is successfully updated, the Updated event is handled by an event handler to perform a post-processing step where an e-mail notification is sent.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_103_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_103_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateParameters
  id: UpdateParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: UpdateParameters
  nameWithType: SqlDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得參數集合，其中包含所使用的參數<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand*>屬性從<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>相關聯的控制項<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控制項。</xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand*>"
  remarks: "如果<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>屬性包含參數化的 SQL 查詢、 UpdateParameters 集合包含任何<xref:System.Web.UI.WebControls.Parameter>對應於 SQL 字串中的參數預留位置的物件。</xref:System.Web.UI.WebControls.Parameter> </xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>       參數名稱可能會受到<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>屬性，特別是如果此名稱會識別主索引鍵，例如使用指定的索引鍵`DataKeyNames`屬性，將資料繫結控制項，或在刪除和更新案例其中<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>屬性設定為<xref:System.Web.UI.ConflictOptions>值和一組`oldValues`會傳遞至相對應的資料方法。</xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> </xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> 在此情況下，格式字串套用至每個參數名稱`oldValues`集合。       UpdateParameters 集合中的參數的順序可能會很重要，根據的 ADO.NET 提供者。 <xref:System.Data.OleDb?displayProperty=fullName>和<xref:System.Data.Odbc?displayProperty=fullName>提供者將出現在參數化 SQL 查詢中參數的順序根據集合中的參數產生關聯。</xref:System.Data.Odbc?displayProperty=fullName> </xref:System.Data.OleDb?displayProperty=fullName> <xref:System.Data.SqlClient?displayProperty=fullName>提供者，這是預設的 ADO.NET 提供者的<xref:System.Web.UI.WebControls.SqlDataSource>控制項，將產生關聯，parameters 集合中的 SQL 查詢中的預留位置別名參數的名稱相符。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 如需參數化的 SQL 查詢和命令的詳細資訊，請參閱[使用參數與 SqlDataSource 控制項](~/add/includes/ajax-current-ext-md.md)。       UpdateParameters 屬性擷取<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A>屬性所包含的<xref:System.Web.UI.WebControls.SqlDataSourceView>與其相關聯物件<xref:System.Web.UI.WebControls.SqlDataSource>控制項。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A>      > [!IMPORTANT] > 值插入參數不需要驗證，可能會造成安全性威脅。 使用<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>事件來執行查詢之前驗證參數值。</xref:System.Web.UI.WebControls.SqlDataSource.Filtering> 如需詳細資訊，請參閱[指令碼擅用概觀](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.SqlDataSource> control to display data in a <xref:System.Web.UI.WebControls.DropDownList> control and update data when the **Submit** button is clicked. The <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> is set with a parameterized SQL statement and two <xref:System.Web.UI.WebControls.ControlParameter> parameters are added to the UpdateParameters collection. When the **Submit** button is clicked, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is handled to call the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method explicitly.  \n  \n> [!IMPORTANT]\n>  This example includes a text box that accepts user input, which is a potential security threat, and values are inserted into parameters without validation, which is also a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](../Topic/Script%20Exploits%20Overview.md).  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1200_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1200_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> ，其中包含所使用的參數<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand*>屬性。</xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand*>"
  overload: System.Web.UI.WebControls.SqlDataSource.UpdateParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Updating
  id: Updating
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Updating
  nameWithType: SqlDataSource.Updating
  fullName: System.Web.UI.WebControls.SqlDataSource.Updating
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "更新作業之前發生。"
  remarks: "處理更新事件，以執行額外的初始化作業專屬於您的應用程式，來驗證參數的值，或若要變更參數值之前<xref:System.Web.UI.WebControls.SqlDataSource>控制項執行更新作業。</xref:System.Web.UI.WebControls.SqlDataSource> 基礎資料來源的連接尚未開啟時，會呼叫事件處理常式委派。 因此，您無法直接取消<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>資料庫作業，藉由呼叫<xref:System.Data.Common.DbCommand.Cancel%2A>方法<xref:System.Data.Common.DbCommand>所公開的物件<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>物件。</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> </xref:System.Data.Common.DbCommand> </xref:System.Data.Common.DbCommand.Cancel%2A> </xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> 您可以不過，將資料庫作業取消藉由設定<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>屬性<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>至`true`。</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> </xref:System.ComponentModel.CancelEventArgs.Cancel%2A>       如需處理事件的詳細資訊，請參閱[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。      > [!IMPORTANT] > 值插入參數不需要驗證，可能會造成安全性威脅。 使用 更新事件來執行查詢之前驗證參數值。 如需詳細資訊，請參閱[指令碼擅用概觀](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates how to display data that is retrieved from a Microsoft SQL Server database in a <xref:System.Web.UI.WebControls.DropDownList> control and update the record using a <xref:System.Web.UI.WebControls.TextBox> control. The example shows how you can use a <xref:System.Data.Common.DbTransaction> object to add transaction context when using the <xref:System.Web.UI.WebControls.SqlDataSource> control to update data.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_75_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_75_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.DataSourceControl
  isExternal: false
  name: System.Web.UI.DataSourceControl
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlDataSource()
  nameWithType: SqlDataSource.SqlDataSource()
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource()
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlDataSource(String,String)
  nameWithType: SqlDataSource.SqlDataSource(String,String)
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String,System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlDataSource(String,String,String)
  nameWithType: SqlDataSource.SqlDataSource(String,String,String)
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource(String,String,String)
- uid: System.Web.UI.WebControls.SqlDataSource.CacheDuration
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: SqlDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheDuration
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: SqlDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy
- uid: System.Web.UI.DataSourceCacheExpiry
  parent: System.Web.UI
  isExternal: false
  name: DataSourceCacheExpiry
  nameWithType: DataSourceCacheExpiry
  fullName: System.Web.UI.DataSourceCacheExpiry
- uid: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: SqlDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CancelSelectOnNullParameter
  nameWithType: SqlDataSource.CancelSelectOnNullParameter
  fullName: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.SqlDataSource.ConflictDetection
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ConflictDetection
  nameWithType: SqlDataSource.ConflictDetection
  fullName: System.Web.UI.WebControls.SqlDataSource.ConflictDetection
- uid: System.Web.UI.ConflictOptions
  parent: System.Web.UI
  isExternal: false
  name: ConflictOptions
  nameWithType: ConflictOptions
  fullName: System.Web.UI.ConflictOptions
- uid: System.Web.UI.WebControls.SqlDataSource.ConnectionString
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ConnectionString
  nameWithType: SqlDataSource.ConnectionString
  fullName: System.Web.UI.WebControls.SqlDataSource.ConnectionString
- uid: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CreateDataSourceView(String)
  nameWithType: SqlDataSource.CreateDataSourceView(String)
  fullName: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(String)
- uid: System.Web.UI.WebControls.SqlDataSourceView
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceView
  nameWithType: SqlDataSourceView
  fullName: System.Web.UI.WebControls.SqlDataSourceView
- uid: System.Web.UI.WebControls.SqlDataSource.DataSourceMode
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DataSourceMode
  nameWithType: SqlDataSource.DataSourceMode
  fullName: System.Web.UI.WebControls.SqlDataSource.DataSourceMode
- uid: System.Web.UI.WebControls.SqlDataSourceMode
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceMode
  nameWithType: SqlDataSourceMode
  fullName: System.Web.UI.WebControls.SqlDataSourceMode
- uid: System.Web.UI.WebControls.SqlDataSource.Delete
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Delete()
  nameWithType: SqlDataSource.Delete()
  fullName: System.Web.UI.WebControls.SqlDataSource.Delete()
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteCommand
  nameWithType: SqlDataSource.DeleteCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteCommand
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteCommandType
  nameWithType: SqlDataSource.DeleteCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType
- uid: System.Web.UI.WebControls.SqlDataSourceCommandType
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceCommandType
  nameWithType: SqlDataSourceCommandType
  fullName: System.Web.UI.WebControls.SqlDataSourceCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.Deleted
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Deleted
  nameWithType: SqlDataSource.Deleted
  fullName: System.Web.UI.WebControls.SqlDataSource.Deleted
- uid: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceStatusEventHandler
  nameWithType: SqlDataSourceStatusEventHandler
  fullName: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: SqlDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.ParameterCollection
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParameterCollection
  nameWithType: ParameterCollection
  fullName: System.Web.UI.WebControls.ParameterCollection
- uid: System.Web.UI.WebControls.SqlDataSource.Deleting
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Deleting
  nameWithType: SqlDataSource.Deleting
  fullName: System.Web.UI.WebControls.SqlDataSource.Deleting
- uid: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceCommandEventHandler
  nameWithType: SqlDataSourceCommandEventHandler
  fullName: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
- uid: System.Web.UI.WebControls.SqlDataSource.EnableCaching
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: SqlDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.SqlDataSource.EnableCaching
- uid: System.Web.UI.WebControls.SqlDataSource.FilterExpression
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: FilterExpression
  nameWithType: SqlDataSource.FilterExpression
  fullName: System.Web.UI.WebControls.SqlDataSource.FilterExpression
- uid: System.Web.UI.WebControls.SqlDataSource.Filtering
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Filtering
  nameWithType: SqlDataSource.Filtering
  fullName: System.Web.UI.WebControls.SqlDataSource.Filtering
- uid: System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceFilteringEventHandler
  nameWithType: SqlDataSourceFilteringEventHandler
  fullName: System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler
- uid: System.Web.UI.WebControls.SqlDataSource.FilterParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: FilterParameters
  nameWithType: SqlDataSource.FilterParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.FilterParameters
- uid: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetDbProviderFactory()
  nameWithType: SqlDataSource.GetDbProviderFactory()
  fullName: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory()
- uid: System.Data.Common.DbProviderFactory
  parent: System.Data.Common
  isExternal: false
  name: DbProviderFactory
  nameWithType: DbProviderFactory
  fullName: System.Data.Common.DbProviderFactory
- uid: System.Web.UI.WebControls.SqlDataSource.GetView(System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetView(String)
  nameWithType: SqlDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.SqlDataSource.GetView(String)
- uid: System.Web.UI.DataSourceView
  parent: System.Web.UI
  isExternal: false
  name: DataSourceView
  nameWithType: DataSourceView
  fullName: System.Web.UI.DataSourceView
- uid: System.Web.UI.WebControls.SqlDataSource.GetViewNames
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetViewNames()
  nameWithType: SqlDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.SqlDataSource.GetViewNames()
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Web.UI.WebControls.SqlDataSource.Insert
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Insert()
  nameWithType: SqlDataSource.Insert()
  fullName: System.Web.UI.WebControls.SqlDataSource.Insert()
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertCommand
  nameWithType: SqlDataSource.InsertCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertCommand
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertCommandType
  nameWithType: SqlDataSource.InsertCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.Inserted
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Inserted
  nameWithType: SqlDataSource.Inserted
  fullName: System.Web.UI.WebControls.SqlDataSource.Inserted
- uid: System.Web.UI.WebControls.SqlDataSource.Inserting
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Inserting
  nameWithType: SqlDataSource.Inserting
  fullName: System.Web.UI.WebControls.SqlDataSource.Inserting
- uid: System.Web.UI.WebControls.SqlDataSource.InsertParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: SqlDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertParameters
- uid: System.Web.UI.WebControls.SqlDataSource.LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: LoadViewState(Object)
  nameWithType: SqlDataSource.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.SqlDataSource.LoadViewState(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: OldValuesParameterFormatString
  nameWithType: SqlDataSource.OldValuesParameterFormatString
  fullName: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString
- uid: System.Web.UI.WebControls.SqlDataSource.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: SqlDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSource.OnInit(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.SqlDataSource.ProviderName
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ProviderName
  nameWithType: SqlDataSource.ProviderName
  fullName: System.Web.UI.WebControls.SqlDataSource.ProviderName
- uid: System.Web.UI.WebControls.SqlDataSource.SaveViewState
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SaveViewState()
  nameWithType: SqlDataSource.SaveViewState()
  fullName: System.Web.UI.WebControls.SqlDataSource.SaveViewState()
- uid: System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Select(DataSourceSelectArguments)
  nameWithType: SqlDataSource.Select(DataSourceSelectArguments)
  fullName: System.Web.UI.WebControls.SqlDataSource.Select(DataSourceSelectArguments)
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Web.UI.DataSourceSelectArguments
  parent: System.Web.UI
  isExternal: false
  name: DataSourceSelectArguments
  nameWithType: DataSourceSelectArguments
  fullName: System.Web.UI.DataSourceSelectArguments
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectCommand
  nameWithType: SqlDataSource.SelectCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectCommand
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectCommandType
  nameWithType: SqlDataSource.SelectCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.Selected
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Selected
  nameWithType: SqlDataSource.Selected
  fullName: System.Web.UI.WebControls.SqlDataSource.Selected
- uid: System.Web.UI.WebControls.SqlDataSource.Selecting
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Selecting
  nameWithType: SqlDataSource.Selecting
  fullName: System.Web.UI.WebControls.SqlDataSource.Selecting
- uid: System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceSelectingEventHandler
  nameWithType: SqlDataSourceSelectingEventHandler
  fullName: System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler
- uid: System.Web.UI.WebControls.SqlDataSource.SelectParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: SqlDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectParameters
- uid: System.Web.UI.WebControls.SqlDataSource.SortParameterName
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SortParameterName
  nameWithType: SqlDataSource.SortParameterName
  fullName: System.Web.UI.WebControls.SqlDataSource.SortParameterName
- uid: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlCacheDependency
  nameWithType: SqlDataSource.SqlCacheDependency
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency
- uid: System.Web.UI.WebControls.SqlDataSource.TrackViewState
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: TrackViewState()
  nameWithType: SqlDataSource.TrackViewState()
  fullName: System.Web.UI.WebControls.SqlDataSource.TrackViewState()
- uid: System.Web.UI.WebControls.SqlDataSource.Update
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Update()
  nameWithType: SqlDataSource.Update()
  fullName: System.Web.UI.WebControls.SqlDataSource.Update()
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateCommand
  nameWithType: SqlDataSource.UpdateCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateCommand
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateCommandType
  nameWithType: SqlDataSource.UpdateCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.Updated
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Updated
  nameWithType: SqlDataSource.Updated
  fullName: System.Web.UI.WebControls.SqlDataSource.Updated
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: SqlDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.SqlDataSource.Updating
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Updating
  nameWithType: SqlDataSource.Updating
  fullName: System.Web.UI.WebControls.SqlDataSource.Updating
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlDataSource
  nameWithType: SqlDataSource.SqlDataSource
- uid: System.Web.UI.WebControls.SqlDataSource.CacheDuration*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: SqlDataSource.CacheDuration
- uid: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: SqlDataSource.CacheExpirationPolicy
- uid: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: SqlDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CancelSelectOnNullParameter
  nameWithType: SqlDataSource.CancelSelectOnNullParameter
- uid: System.Web.UI.WebControls.SqlDataSource.ConflictDetection*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ConflictDetection
  nameWithType: SqlDataSource.ConflictDetection
- uid: System.Web.UI.WebControls.SqlDataSource.ConnectionString*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ConnectionString
  nameWithType: SqlDataSource.ConnectionString
- uid: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CreateDataSourceView
  nameWithType: SqlDataSource.CreateDataSourceView
- uid: System.Web.UI.WebControls.SqlDataSource.DataSourceMode*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DataSourceMode
  nameWithType: SqlDataSource.DataSourceMode
- uid: System.Web.UI.WebControls.SqlDataSource.Delete*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Delete
  nameWithType: SqlDataSource.Delete
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommand*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteCommand
  nameWithType: SqlDataSource.DeleteCommand
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteCommandType
  nameWithType: SqlDataSource.DeleteCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteParameters*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: SqlDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.SqlDataSource.EnableCaching*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: SqlDataSource.EnableCaching
- uid: System.Web.UI.WebControls.SqlDataSource.FilterExpression*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: FilterExpression
  nameWithType: SqlDataSource.FilterExpression
- uid: System.Web.UI.WebControls.SqlDataSource.FilterParameters*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: FilterParameters
  nameWithType: SqlDataSource.FilterParameters
- uid: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetDbProviderFactory
  nameWithType: SqlDataSource.GetDbProviderFactory
- uid: System.Web.UI.WebControls.SqlDataSource.GetView*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetView
  nameWithType: SqlDataSource.GetView
- uid: System.Web.UI.WebControls.SqlDataSource.GetViewNames*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetViewNames
  nameWithType: SqlDataSource.GetViewNames
- uid: System.Web.UI.WebControls.SqlDataSource.Insert*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Insert
  nameWithType: SqlDataSource.Insert
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommand*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertCommand
  nameWithType: SqlDataSource.InsertCommand
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommandType*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertCommandType
  nameWithType: SqlDataSource.InsertCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.InsertParameters*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: SqlDataSource.InsertParameters
- uid: System.Web.UI.WebControls.SqlDataSource.LoadViewState*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: LoadViewState
  nameWithType: SqlDataSource.LoadViewState
- uid: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: OldValuesParameterFormatString
  nameWithType: SqlDataSource.OldValuesParameterFormatString
- uid: System.Web.UI.WebControls.SqlDataSource.OnInit*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: OnInit
  nameWithType: SqlDataSource.OnInit
- uid: System.Web.UI.WebControls.SqlDataSource.ProviderName*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ProviderName
  nameWithType: SqlDataSource.ProviderName
- uid: System.Web.UI.WebControls.SqlDataSource.SaveViewState*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SaveViewState
  nameWithType: SqlDataSource.SaveViewState
- uid: System.Web.UI.WebControls.SqlDataSource.Select*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Select
  nameWithType: SqlDataSource.Select
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommand*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectCommand
  nameWithType: SqlDataSource.SelectCommand
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommandType*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectCommandType
  nameWithType: SqlDataSource.SelectCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.SelectParameters*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: SqlDataSource.SelectParameters
- uid: System.Web.UI.WebControls.SqlDataSource.SortParameterName*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SortParameterName
  nameWithType: SqlDataSource.SortParameterName
- uid: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlCacheDependency
  nameWithType: SqlDataSource.SqlCacheDependency
- uid: System.Web.UI.WebControls.SqlDataSource.TrackViewState*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: TrackViewState
  nameWithType: SqlDataSource.TrackViewState
- uid: System.Web.UI.WebControls.SqlDataSource.Update*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Update
  nameWithType: SqlDataSource.Update
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommand*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateCommand
  nameWithType: SqlDataSource.UpdateCommand
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateCommandType
  nameWithType: SqlDataSource.UpdateCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateParameters*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: SqlDataSource.UpdateParameters
