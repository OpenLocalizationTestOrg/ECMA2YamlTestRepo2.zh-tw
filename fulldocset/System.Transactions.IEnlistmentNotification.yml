### YamlMime:ManagedReference
items:
- uid: System.Transactions.IEnlistmentNotification
  id: IEnlistmentNotification
  children:
  - System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)
  - System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)
  - System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)
  - System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)
  langs:
  - csharp
  name: IEnlistmentNotification
  nameWithType: IEnlistmentNotification
  fullName: System.Transactions.IEnlistmentNotification
  type: Interface
  summary: "描述資源管理員應該在登記參與時，交易管理員提供兩階段認可通知回呼實作的介面。"
  remarks: "資源管理員可以參與交易的順序，它必須在交易管理員的交易中登記。 <xref:System.Transactions.Transaction>類別會定義一組方法名稱開頭為`Enlist`可提供這項功能。</xref:System.Transactions.Transaction> 不同`Enlist`方法會對應至不同類型的資源管理員可能具有的編列。       這個類別描述資源管理員應該在登記參與時，交易管理員提供兩階段認可通知回呼實作的介面。 IEnlistmentNotification 介面的每個資源管理員的實作，您應該將它使用登錄<xref:System.Transactions.Transaction.EnlistVolatile%2A>方法或<xref:System.Transactions.Transaction.EnlistDurable%2A>方法<xref:System.Transactions.Transaction>類別，根據您的資源是變動性或永久性。</xref:System.Transactions.Transaction> </xref:System.Transactions.Transaction.EnlistDurable%2A> </xref:System.Transactions.Transaction.EnlistVolatile%2A> 登記和 2PC 的詳細資訊，請參閱[編列的資源，以在交易中的參與者身分](~/add/includes/ajax-current-ext-md.md)和[認可的交易中單一和多重階段](~/add/includes/ajax-current-ext-md.md)分別。       交易管理員在兩階段認可通訊協定的不同階段告知登記的物件，透過下列方法。      |方法 |描述 |  |------------|-----------------|  |<xref:System.Transactions.IEnlistmentNotification.Prepare%2A>|已登錄的物件的方法回呼，交易管理員的交易，在第一階段時用作交易管理員詢問參與者是否能認可的交易。 |  |<xref:System.Transactions.IEnlistmentNotification.Commit%2A>|這個方法的已登錄的物件作為回呼由交易管理員在交易的第二個階段交易已認可。 |  |<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>|這個方法的已登錄的物件作為回呼，交易管理員交易的第二個階段交易已中止 （亦即已回復）。 |  |<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>|這個方法的已登錄的物件作為回呼，交易管理員交易的第二個階段的交易處於不確定。 |     > [!NOTE] > 您應該注意，循序或依特定順序，不可能會傳送通知。</xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> </xref:System.Transactions.IEnlistmentNotification.Rollback%2A> </xref:System.Transactions.IEnlistmentNotification.Commit%2A> </xref:System.Transactions.IEnlistmentNotification.Prepare%2A>"
  example:
  - "The following example shows an implementation of this interface, as well as enlisting the object as a participant in a transaction using the <xref:System.Transactions.Transaction.EnlistVolatile%2A> method.  \n  \n [!code-cs[Tx_Enlist#1](~/add/codesnippet/csharp/t-system.transactions.ie_1.cs)]\n [!code-vb[Tx_Enlist#1](~/add/codesnippet/visualbasic/t-system.transactions.ie_1.vb)]"
  syntax:
    content: public interface IEnlistmentNotification
  implements: []
  platform:
  - net462
- uid: System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)
  id: Commit(System.Transactions.Enlistment)
  parent: System.Transactions.IEnlistmentNotification
  langs:
  - csharp
  name: Commit(Enlistment)
  nameWithType: IEnlistmentNotification.Commit(Enlistment)
  fullName: System.Transactions.IEnlistmentNotification.Commit(Enlistment)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "告知登記物件正在認可交易。"
  remarks: "它會指示所有參與者都来認可的交易時，交易管理員會呼叫這個方法登記之物件的承諾，第二個階段。       資源管理員應該執行任何工作需要完成交易，然後通知完成藉由呼叫 TM<xref:System.Transactions.Enlistment.Done%2A>方法`enlistment`參數。</xref:System.Transactions.Enlistment.Done%2A>       如果資源管理員已登錄永久，但不會回應呼叫<xref:System.Transactions.Enlistment.Done%2A>方法時，交易管理員不確定資源管理員已收到認可呼叫。</xref:System.Transactions.Enlistment.Done%2A> 因此，交易管理員會持續等候回應，以及維護與此交易相關資訊。  如果<xref:System.Transactions.Enlistment.Done%2A>是永遠不會呼叫，此項資訊是周圍無限期地保留在記憶體中或在整個系統資源。</xref:System.Transactions.Enlistment.Done%2A> 這會導致無法回收資源。 如果是分散式交易，這可能最後會填滿中止 MSDTC 程序的 MSDTC 記錄檔。 如果是交易受<xref:System.Transactions>，這會導致記憶體耗用量，資源管理員的程序的漸進式且持續增加。</xref:System.Transactions> 因此，很重要，您呼叫<xref:System.Transactions.Enlistment.Done%2A>方法，一旦您的資源管理員透過您準備工作。</xref:System.Transactions.Enlistment.Done%2A>"
  syntax:
    content: public void Commit (System.Transactions.Enlistment enlistment);
    parameters:
    - id: enlistment
      type: System.Transactions.Enlistment
      description: "<xref href=&quot;System.Transactions.Enlistment&quot;> </xref>用來將回應傳送至交易管理員物件。"
  overload: System.Transactions.IEnlistmentNotification.Commit*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)
  id: InDoubt(System.Transactions.Enlistment)
  parent: System.Transactions.IEnlistmentNotification
  langs:
  - csharp
  name: InDoubt(Enlistment)
  nameWithType: IEnlistmentNotification.InDoubt(Enlistment)
  fullName: System.Transactions.IEnlistmentNotification.InDoubt(Enlistment)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "通知登記處於不確定的交易狀態的物件。"
  remarks: "這個方法是針對動態資源呼叫，當交易管理員已叫用單一長期的資源，以單一階段認可作業，然後長期的資源的連線中斷之前取得交易結果。 此時，無法安全地判定交易結果。       因為 InDoubt 視為交易的最後狀態，您不應該呼叫<xref:System.Transactions.IEnlistmentNotification.Commit%2A>或<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>之後呼叫 InDoubt。</xref:System.Transactions.IEnlistmentNotification.Rollback%2A> </xref:System.Transactions.IEnlistmentNotification.Commit%2A>      > [!NOTE] > 動態資源的這個方法的實作應該執行任何修復或內含項目作業其了解上受影響的資料。  它也必須呼叫<xref:System.Transactions.Enlistment.Done%2A>上的方法上`enlistment`完成其工作時的參數。</xref:System.Transactions.Enlistment.Done%2A>       如果資源管理員已登錄永久，但不會回應呼叫<xref:System.Transactions.Enlistment.Done%2A>方法時，交易管理員不確定資源管理員已收到 InDoubt 呼叫。</xref:System.Transactions.Enlistment.Done%2A> 因此，交易管理員會持續等候回應，以及維護與此交易相關資訊。  如果<xref:System.Transactions.Enlistment.Done%2A>是永遠不會呼叫，此項資訊是周圍無限期地保留在記憶體中或在整個系統資源。</xref:System.Transactions.Enlistment.Done%2A> 這會導致無法回收資源。 如果是分散式交易，這可能最後會填滿中止 MSDTC 程序的 MSDTC 記錄檔。 如果是交易受<xref:System.Transactions>，這會導致記憶體耗用量，資源管理員的程序的漸進式且持續增加。</xref:System.Transactions> 因此，很重要，您呼叫<xref:System.Transactions.Enlistment.Done%2A>方法，一旦您的資源管理員透過您準備工作。</xref:System.Transactions.Enlistment.Done%2A>"
  syntax:
    content: public void InDoubt (System.Transactions.Enlistment enlistment);
    parameters:
    - id: enlistment
      type: System.Transactions.Enlistment
      description: "<xref href=&quot;System.Transactions.Enlistment&quot;> </xref>用來將回應傳送至交易管理員物件。"
  overload: System.Transactions.IEnlistmentNotification.InDoubt*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)
  id: Prepare(System.Transactions.PreparingEnlistment)
  parent: System.Transactions.IEnlistmentNotification
  langs:
  - csharp
  name: Prepare(PreparingEnlistment)
  nameWithType: IEnlistmentNotification.Prepare(PreparingEnlistment)
  fullName: System.Transactions.IEnlistmentNotification.Prepare(PreparingEnlistment)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "通知登記的承諾正在準備交易的物件。"
  remarks: "交易管理員時呼叫這個方法的已登錄的資源管理員的階段 1 承諾，它會要求參與者是否能認可的交易。       當您在實作長期的資源管理員時，您應該記錄您在這個階段準備記錄。 記錄應該包含所有必要的資訊來執行復原。 這包括<xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A>屬性，傳遞至中的交易管理員<xref:System.Transactions.TransactionManager.Reenlist%2A>方法在復原期間。</xref:System.Transactions.TransactionManager.Reenlist%2A> </xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A> 如需復原的詳細資訊，請參閱[執行復原](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)。       資源管理員應該先完成所有工作都必須完成之前先呼叫<xref:System.Transactions.PreparingEnlistment.Prepared%2A>方法`preparingEnlistment`參數，以指定的承諾票數。</xref:System.Transactions.PreparingEnlistment.Prepared%2A> 您應該確定這接收認可、 復原或在不確定的任何第 2 階段通知這類之前完成。 這是因為第 2 階段通知只能在呼叫相同執行緒上的內嵌<xref:System.Transactions.PreparingEnlistment.Prepared%2A>階段 1 中的方法。</xref:System.Transactions.PreparingEnlistment.Prepared%2A> 因此，您不應該執行之後執行任何工作<xref:System.Transactions.PreparingEnlistment.Prepared%2A>呼叫 （例如，釋放鎖定），您希望接收第 2 階段通知之前已完成。</xref:System.Transactions.PreparingEnlistment.Prepared%2A>       您也可以呼叫的方法`preparingEnlistment`參數來指出投票，以進行回復。       如果您想要觀察，並做出回應的交易，進度的物件不參與它，此方法的實作應該呼叫<xref:System.Transactions.Enlistment.Done%2A>方法`preparingEnlistment`完成其工作時的參數。</xref:System.Transactions.Enlistment.Done%2A> 如此一來，您的資源管理員不會收到任何第 2 個階段的通知。"
  syntax:
    content: public void Prepare (System.Transactions.PreparingEnlistment preparingEnlistment);
    parameters:
    - id: preparingEnlistment
      type: System.Transactions.PreparingEnlistment
      description: "A <xref href=&quot;System.Transactions.PreparingEnlistment&quot;> </xref>用來將回應傳送至交易管理員物件。"
  overload: System.Transactions.IEnlistmentNotification.Prepare*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)
  id: Rollback(System.Transactions.Enlistment)
  parent: System.Transactions.IEnlistmentNotification
  langs:
  - csharp
  name: Rollback(Enlistment)
  nameWithType: IEnlistmentNotification.Rollback(Enlistment)
  fullName: System.Transactions.IEnlistmentNotification.Rollback(Enlistment)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "通知正在復原交易登記的物件 （中止）。"
  remarks: "當交易正在回復 （中止），因為一個或多個交易參與者無法認可交易時，交易管理員會呼叫這個方法的登記的物件。       資源管理員應該執行任何工作需要完成交易，然後通知完成藉由呼叫 TM<xref:System.Transactions.Enlistment.Done%2A>方法`enlistment`參數。</xref:System.Transactions.Enlistment.Done%2A>       如果資源管理員已登錄永久，但不會回應呼叫<xref:System.Transactions.Enlistment.Done%2A>方法時，交易管理員不確定資源管理員已收到復原呼叫。</xref:System.Transactions.Enlistment.Done%2A> 因此，交易管理員會持續等候回應，以及維護與此交易相關資訊。  如果<xref:System.Transactions.Enlistment.Done%2A>是永遠不會呼叫，此項資訊是周圍無限期地保留在記憶體中或在整個系統資源。</xref:System.Transactions.Enlistment.Done%2A> 這會導致無法回收資源。 如果是分散式交易，這可能最後會填滿中止 MSDTC 程序的 MSDTC 記錄檔。 如果是交易受<xref:System.Transactions>，這會導致記憶體耗用量，資源管理員的程序的漸進式且持續增加。</xref:System.Transactions> 因此，很重要，您呼叫<xref:System.Transactions.Enlistment.Done%2A>方法，一旦您的資源管理員透過您準備工作。</xref:System.Transactions.Enlistment.Done%2A>"
  syntax:
    content: public void Rollback (System.Transactions.Enlistment enlistment);
    parameters:
    - id: enlistment
      type: System.Transactions.Enlistment
      description: "A <xref href=&quot;System.Transactions.Enlistment&quot;> </xref>用來將回應傳送至交易管理員物件。"
  overload: System.Transactions.IEnlistmentNotification.Rollback*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: Commit(Enlistment)
  nameWithType: IEnlistmentNotification.Commit(Enlistment)
  fullName: System.Transactions.IEnlistmentNotification.Commit(Enlistment)
- uid: System.Transactions.Enlistment
  parent: System.Transactions
  isExternal: false
  name: Enlistment
  nameWithType: Enlistment
  fullName: System.Transactions.Enlistment
- uid: System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: InDoubt(Enlistment)
  nameWithType: IEnlistmentNotification.InDoubt(Enlistment)
  fullName: System.Transactions.IEnlistmentNotification.InDoubt(Enlistment)
- uid: System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: Prepare(PreparingEnlistment)
  nameWithType: IEnlistmentNotification.Prepare(PreparingEnlistment)
  fullName: System.Transactions.IEnlistmentNotification.Prepare(PreparingEnlistment)
- uid: System.Transactions.PreparingEnlistment
  parent: System.Transactions
  isExternal: false
  name: PreparingEnlistment
  nameWithType: PreparingEnlistment
  fullName: System.Transactions.PreparingEnlistment
- uid: System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: Rollback(Enlistment)
  nameWithType: IEnlistmentNotification.Rollback(Enlistment)
  fullName: System.Transactions.IEnlistmentNotification.Rollback(Enlistment)
- uid: System.Transactions.IEnlistmentNotification.Commit*
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: Commit
  nameWithType: IEnlistmentNotification.Commit
- uid: System.Transactions.IEnlistmentNotification.InDoubt*
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: InDoubt
  nameWithType: IEnlistmentNotification.InDoubt
- uid: System.Transactions.IEnlistmentNotification.Prepare*
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: Prepare
  nameWithType: IEnlistmentNotification.Prepare
- uid: System.Transactions.IEnlistmentNotification.Rollback*
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: Rollback
  nameWithType: IEnlistmentNotification.Rollback
