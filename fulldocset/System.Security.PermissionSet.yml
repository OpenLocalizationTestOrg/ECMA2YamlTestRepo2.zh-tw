### YamlMime:ManagedReference
items:
- uid: System.Security.PermissionSet
  id: PermissionSet
  children:
  - System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.PermissionSet.#ctor(System.Security.PermissionSet)
  - System.Security.PermissionSet.AddPermission(System.Security.IPermission)
  - System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)
  - System.Security.PermissionSet.Assert
  - System.Security.PermissionSet.ContainsNonCodeAccessPermissions
  - System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)
  - System.Security.PermissionSet.Copy
  - System.Security.PermissionSet.CopyTo(System.Array,System.Int32)
  - System.Security.PermissionSet.Count
  - System.Security.PermissionSet.Demand
  - System.Security.PermissionSet.Deny
  - System.Security.PermissionSet.Equals(System.Object)
  - System.Security.PermissionSet.FromXml(System.Security.SecurityElement)
  - System.Security.PermissionSet.GetEnumerator
  - System.Security.PermissionSet.GetEnumeratorImpl
  - System.Security.PermissionSet.GetHashCode
  - System.Security.PermissionSet.GetPermission(System.Type)
  - System.Security.PermissionSet.GetPermissionImpl(System.Type)
  - System.Security.PermissionSet.Intersect(System.Security.PermissionSet)
  - System.Security.PermissionSet.IsEmpty
  - System.Security.PermissionSet.IsReadOnly
  - System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)
  - System.Security.PermissionSet.IsSynchronized
  - System.Security.PermissionSet.IsUnrestricted
  - System.Security.PermissionSet.PermitOnly
  - System.Security.PermissionSet.RemovePermission(System.Type)
  - System.Security.PermissionSet.RemovePermissionImpl(System.Type)
  - System.Security.PermissionSet.RevertAssert
  - System.Security.PermissionSet.SetPermission(System.Security.IPermission)
  - System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)
  - System.Security.PermissionSet.SyncRoot
  - System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - System.Security.PermissionSet.ToString
  - System.Security.PermissionSet.ToXml
  - System.Security.PermissionSet.Union(System.Security.PermissionSet)
  langs:
  - csharp
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
  type: Class
  summary: "代表可以包含許多不同類型的權限的集合。"
  remarks: "您可以使用使用權限集合上執行作業數個不同的權限為群組。"
  example:
  - "The following code example demonstrates the use of the PermissionSet class and members.  \n  \n [!code-cs[System.Security.PermissionSet#1](~/add/codesnippet/csharp/t-system.security.permis_22_1.cs)]\n [!code-vb[System.Security.PermissionSet#1](~/add/codesnippet/visualbasic/t-system.security.permis_22_1.vb)]\n [!code-cpp[System.Security.PermissionSet#1](~/add/codesnippet/cpp/t-system.security.permis_22_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class PermissionSet : System.Collections.ICollection, System.Runtime.Serialization.IDeserializationCallback, System.Security.ISecurityEncodable, System.Security.IStackWalk
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Security.ISecurityEncodable
  - System.Security.IStackWalk
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: PermissionSet(PermissionState)
  nameWithType: PermissionSet.PermissionSet(PermissionState)
  fullName: System.Security.PermissionSet.PermissionSet(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "初始化的新執行個體<xref href=&quot;System.Security.PermissionSet&quot;></xref>類別具有指定<xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>。"
  remarks: "`Unrestricted`狀態可讓實作的所有權限<xref:System.Security.Permissions.IUnrestrictedPermission>介面，而`None`可讓任何權限。</xref:System.Security.Permissions.IUnrestrictedPermission>       使用<xref:System.Security.PermissionSet.AddPermission%2A>上空<xref:System.Security.PermissionSet>來定義一組詳盡。</xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet.AddPermission%2A>"
  example:
  - "The following code example shows the use of the PermissionSet constructor to create a permission set with a permission state of <xref:System.Security.Permissions.PermissionState>. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#2](~/add/codesnippet/csharp/d6be246c-3ec7-45d0-bd17-_1.cs)]\n [!code-vb[System.Security.PermissionSet#2](~/add/codesnippet/visualbasic/d6be246c-3ec7-45d0-bd17-_1.vb)]\n [!code-cpp[System.Security.PermissionSet#2](~/add/codesnippet/cpp/d6be246c-3ec7-45d0-bd17-_1.cpp)]"
  syntax:
    content: public PermissionSet (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "其中一個列舉值，指定資源的權限集的存取權。"
  overload: System.Security.PermissionSet.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> state </code>參數不是有效<xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.PermissionSet.#ctor(System.Security.PermissionSet)
  id: '#ctor(System.Security.PermissionSet)'
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: PermissionSet(PermissionSet)
  nameWithType: PermissionSet.PermissionSet(PermissionSet)
  fullName: System.Security.PermissionSet.PermissionSet(PermissionSet)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "初始化的新執行個體<xref href=&quot;System.Security.PermissionSet&quot;></xref>初始值取自類別<code> permSet </code>參數。"
  remarks: "<xref:System.Security.PermissionSet>包含指定<xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet>中所包含的權限的複本</xref:System.Security.PermissionSet>新      > [!NOTE] > 這相當於<xref:System.Security.PermissionSet.Copy%2A>時`permSet`參數不是`null`。</xref:System.Security.PermissionSet.Copy%2A>"
  syntax:
    content: public PermissionSet (System.Security.PermissionSet permSet);
    parameters:
    - id: permSet
      type: System.Security.PermissionSet
      description: "要從中取得新的值集<xref href=&quot;System.Security.PermissionSet&quot;> </xref>，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>建立空白<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  overload: System.Security.PermissionSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.AddPermission(System.Security.IPermission)
  id: AddPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: AddPermission(IPermission)
  nameWithType: PermissionSet.AddPermission(IPermission)
  fullName: System.Security.PermissionSet.AddPermission(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "將指定的權限給<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  remarks: "如果加入的權限已經與相同類型的權限會存在於<xref:System.Security.PermissionSet>，新的權限是現有的權限物件和指定的權限物件的 union。</xref:System.Security.PermissionSet> 例如，如果實作的權限<xref:System.Security.Permissions.IUnrestrictedPermission>加入至<xref:System.Security.Permissions.PermissionState><xref:System.Security.PermissionSet>，產生的等位是原始`Unrestricted` <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet></xref:System.Security.Permissions.PermissionState> </xref:System.Security.Permissions.IUnrestrictedPermission>"
  example:
  - "The following code example shows the use of the AddPermission method to add a permission to a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#3](~/add/codesnippet/csharp/m-system.security.permis_25_1.cs)]\n [!code-vb[System.Security.PermissionSet#3](~/add/codesnippet/visualbasic/m-system.security.permis_25_1.vb)]\n [!code-cpp[System.Security.PermissionSet#3](~/add/codesnippet/cpp/m-system.security.permis_25_1.cpp)]"
  syntax:
    content: public System.Security.IPermission AddPermission (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: "若要新增權限。"
    return:
      type: System.Security.IPermission
      description: "加入的使用權限與已存在於相同類型的任何權限的聯集<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  overload: System.Security.PermissionSet.AddPermission*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "這個方法從呼叫<xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)
  id: AddPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: AddPermissionImpl(IPermission)
  nameWithType: PermissionSet.AddPermissionImpl(IPermission)
  fullName: System.Security.PermissionSet.AddPermissionImpl(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "將指定的權限給<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  remarks: "AddPermissionImpl 方法是實作<xref:System.Security.PermissionSet.AddPermission%2A>方法。</xref:System.Security.PermissionSet.AddPermission%2A>       如果加入的權限已經與相同類型的權限會存在於<xref:System.Security.PermissionSet>，新的權限是現有的權限物件和指定的權限物件的 union。</xref:System.Security.PermissionSet> 例如，如果實作的權限<xref:System.Security.Permissions.IUnrestrictedPermission>加入至<xref:System.Security.Permissions.PermissionState><xref:System.Security.PermissionSet>，產生的等位是原始`Unrestricted` <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet></xref:System.Security.Permissions.PermissionState> </xref:System.Security.Permissions.IUnrestrictedPermission>"
  syntax:
    content: protected virtual System.Security.IPermission AddPermissionImpl (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: "若要新增權限。"
    return:
      type: System.Security.IPermission
      description: "加入的使用權限與已存在於相同類型的任何權限的聯集<xref href=&quot;System.Security.PermissionSet&quot;> </xref>，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果<code> perm </code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.PermissionSet.AddPermissionImpl*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "這個方法從呼叫<xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.PermissionSet.Assert
  id: Assert
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Assert()
  nameWithType: PermissionSet.Assert()
  fullName: System.Security.PermissionSet.Assert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "宣告呼叫程式碼可以存取權限要求執行程式碼會呼叫這個方法，即使堆疊中較高層的呼叫端未獲得存取資源的權限受保護的資源。 使用判斷提示會造成安全性弱點。"
  remarks: "這是唯一能判斷多個權限提示在相同的時間範圍內，因為只有一個判斷提示可能會在框架上作用。 判斷提示的唯一有效授與權限。 呼叫<xref:System.Security.CodeAccessPermission.RevertAssert%2A?displayProperty=fullName>或<xref:System.Security.CodeAccessPermission.RevertAll%2A?displayProperty=fullName>方法來取消作用中的判斷提示。</xref:System.Security.CodeAccessPermission.RevertAll%2A?displayProperty=fullName> </xref:System.Security.CodeAccessPermission.RevertAssert%2A?displayProperty=fullName>      > [!CAUTION] > 呼叫 Assert 方法移除所有的程式碼呼叫鏈結中，必須授存取指定的資源的權限的需求，因為它可以開啟安全性漏洞如果使用不正確或不正確。 因此，應該使用小心謹慎。"
  syntax:
    content: public void Assert ();
    parameters: []
  overload: System.Security.PermissionSet.Assert*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.PermissionSet&quot;> </xref>判斷提示的執行個體未獲得判斷提示的程式碼。       -或者-已經有使用中的判斷提示目前畫面格。"
  platform:
  - net462
- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions
  id: ContainsNonCodeAccessPermissions
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ContainsNonCodeAccessPermissions()
  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions()
  fullName: System.Security.PermissionSet.ContainsNonCodeAccessPermissions()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "取得值，指出是否<xref href=&quot;System.Security.PermissionSet&quot;></xref>包含非衍生自的權限<xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>。"
  remarks: ''
  example:
  - "The following code example shows the use of the ContainsNonCodeAccessPermissions method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#9](~/add/codesnippet/csharp/m-system.security.permis_8_1.cs)]\n [!code-vb[System.Security.PermissionSet#9](~/add/codesnippet/visualbasic/m-system.security.permis_8_1.vb)]\n [!code-cpp[System.Security.PermissionSet#9](~/add/codesnippet/cpp/m-system.security.permis_8_1.cpp)]"
  syntax:
    content: public bool ContainsNonCodeAccessPermissions ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Security.PermissionSet&quot;></xref>包含非衍生自的權限<xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.PermissionSet.ContainsNonCodeAccessPermissions*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)
  id: ConvertPermissionSet(System.String,System.Byte[],System.String)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ConvertPermissionSet(String,Byte[],String)
  nameWithType: PermissionSet.ConvertPermissionSet(String,Byte[],String)
  fullName: System.Security.PermissionSet.ConvertPermissionSet(String,Byte[],String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "將編碼轉換<xref href=&quot;System.Security.PermissionSet&quot;></xref>從一種 XML 編碼格式到另一種 XML 編碼格式。"
  remarks: "請勿使用這個方法。"
  syntax:
    content: public static byte[] ConvertPermissionSet (string inFormat, byte[] inData, string outFormat);
    parameters:
    - id: inFormat
      type: System.String
      description: '代表一種編碼格式的其中一個字串︰ ASCII、 Unicode 或二進位檔。 可能的值為&quot;XMLASCII&quot;或&quot;XML&quot;、&quot;XMLUNICODE&quot;和&quot;BINARY&quot;。'
    - id: inData
      type: System.Byte[]
      description: "XML 編碼的權限集合。"
    - id: outFormat
      type: System.String
      description: '代表一種編碼格式的其中一個字串︰ ASCII、 Unicode 或二進位檔。 可能的值為&quot;XMLASCII&quot;或&quot;XML&quot;、&quot;XMLUNICODE&quot;和&quot;BINARY&quot;。'
    return:
      type: System.Byte[]
      description: "使用指定的輸出格式設定加密權限。"
  overload: System.Security.PermissionSet.ConvertPermissionSet*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "在所有情況下。"
  platform:
  - net462
- uid: System.Security.PermissionSet.Copy
  id: Copy
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Copy()
  nameWithType: PermissionSet.Copy()
  fullName: System.Security.PermissionSet.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "建立一份<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  remarks: "一份<xref:System.Security.PermissionSet>以原始的物件，表示資源的相同的存取權。</xref:System.Security.PermissionSet> 複製所做的變更不會影響原始的權限集。"
  example:
  - "The following code example shows the use of the Copy method to create a copy of a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#20](~/add/codesnippet/csharp/m-system.security.permis_23_1.cs)]\n [!code-vb[System.Security.PermissionSet#20](~/add/codesnippet/visualbasic/m-system.security.permis_23_1.vb)]\n [!code-cpp[System.Security.PermissionSet#20](~/add/codesnippet/cpp/m-system.security.permis_23_1.cpp)]"
  syntax:
    content: public virtual System.Security.PermissionSet Copy ();
    parameters: []
    return:
      type: System.Security.PermissionSet
      description: "一份<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  overload: System.Security.PermissionSet.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: PermissionSet.CopyTo(Array,Int32)
  fullName: System.Security.PermissionSet.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "將集合的權限物件複製到<xref:System.Array>.</xref:System.Array>中的指定位置"
  syntax:
    content: public virtual void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "要複製到其中的目標陣列。"
    - id: index
      type: System.Int32
      description: "要開始複製 （以零為起始） 的陣列中的開始位置。"
  overload: System.Security.PermissionSet.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>array</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> array </code>參數有多個維度。"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "<code> index </code>參數超出範圍<code> array </code>參數。"
  platform:
  - net462
- uid: System.Security.PermissionSet.Count
  id: Count
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Count
  nameWithType: PermissionSet.Count
  fullName: System.Security.PermissionSet.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "取得權限集合中包含的權限物件數目。"
  remarks: "在`None`或`Unrestricted`狀態這會傳回零，因為沒有實際的權限的物件執行個體所使用。"
  example:
  - "The following code example shows the use of the Count property to get the number of permission objects in a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#5](~/add/codesnippet/csharp/p-system.security.permis_23_1.cs)]\n [!code-vb[System.Security.PermissionSet#5](~/add/codesnippet/visualbasic/p-system.security.permis_23_1.vb)]\n [!code-cpp[System.Security.PermissionSet#5](~/add/codesnippet/cpp/p-system.security.permis_23_1.cpp)]"
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "中所包含的權限物件數目<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  overload: System.Security.PermissionSet.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.Demand
  id: Demand
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Demand()
  nameWithType: PermissionSet.Demand()
  fullName: System.Security.PermissionSet.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "強制<xref:System.Security.SecurityException>所有呼叫堆疊中較高層的呼叫端未都獲得目前執行個體所指定的權限，如果在執行階段。</xref:System.Security.SecurityException>"
  remarks: "使用要求上<xref:System.Security.PermissionSet>以確保所有呼叫端擁有的所有權限，只有一個作業集合中。</xref:System.Security.PermissionSet>       不會檢查呼叫這個方法的程式碼的權限;檢查該程式碼的立即呼叫端從開始，然後進行堆疊。 呼叫堆疊通常會表示向下成長，使方法呼叫堆疊中較高層呼叫的方法較低的呼叫堆疊中。 要求執行成功，只有當沒有<xref:System.Security.SecurityException>就會擲回。</xref:System.Security.SecurityException>       如果<xref:System.Security.PermissionSet>包含權限，不會繼承自<xref:System.Security.CodeAccessPermission>、`Demand`以及呼叫的方法，這些權限。</xref:System.Security.CodeAccessPermission> </xref:System.Security.PermissionSet>"
  example:
  - "The following code example shows the use of the Demand method to demand all the permissions in a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#4](~/add/codesnippet/csharp/m-system.security.permis_17_1.cs)]\n [!code-vb[System.Security.PermissionSet#4](~/add/codesnippet/visualbasic/m-system.security.permis_17_1.vb)]\n [!code-cpp[System.Security.PermissionSet#4](~/add/codesnippet/cpp/m-system.security.permis_17_1.cpp)]"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.PermissionSet.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫鏈結中的呼叫端沒有要求的權限。"
  platform:
  - net462
- uid: System.Security.PermissionSet.Deny
  id: Deny
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Deny()
  nameWithType: PermissionSet.Deny()
  fullName: System.Security.PermissionSet.Deny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "會讓任何<xref:System.Security.PermissionSet.Demand*>通過呼叫程式碼，如有包含在目前類型的權限交集的權限<xref href=&quot;System.Security.PermissionSet&quot;></xref>失敗。</xref:System.Security.PermissionSet.Demand*>"
  remarks: "這個方法會防止呼叫堆疊中較高層的呼叫端程式碼呼叫此方法，透過存取受保護的資源，即使這些呼叫端必須被授與存取權限。 呼叫堆疊通常會表示向下成長，使方法呼叫堆疊中較高層呼叫的方法較低的呼叫堆疊中。       拒絕可以限制程式設計人員的責任，或協助防止意外安全性漏洞，因為它可協助防止拒絕會從用來存取拒絕的權限所保護的資源呼叫的方法。 如果方法呼叫拒絕權限，而且如果<xref:System.Security.PermissionSet.Demand%2A>的呼叫堆疊中較低的呼叫端所叫用該權限時，該安全性檢查失敗時已達到拒絕。</xref:System.Security.PermissionSet.Demand%2A>       拒絕對該權限的要求不成功，因為未授與的權限會被忽略。"
  syntax:
    content: public void Deny ();
    parameters: []
  overload: System.Security.PermissionSet.Deny*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "為 拒絕先前的呼叫已限制目前堆疊框架的權限。"
  platform:
  - net462
- uid: System.Security.PermissionSet.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: PermissionSet.Equals(Object)
  fullName: System.Security.PermissionSet.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "決定是否指定<xref href=&quot;System.Security.PermissionSet&quot;></xref>或<xref href=&quot;System.Security.NamedPermissionSet&quot;></xref>物件是否等於目前<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  remarks: "設定所指定的權限中所包含的權限來判斷是否相等`obj`。 `obj`可以是<xref:System.Security.PermissionSet>物件或<xref:System.Security.NamedPermissionSet>物件。</xref:System.Security.NamedPermissionSet> </xref:System.Security.PermissionSet> 如果`obj`是<xref:System.Security.NamedPermissionSet>，名稱和描述會被忽略。</xref:System.Security.NamedPermissionSet>       如需詳細資訊，請參閱<xref:System.Object.Equals%28System.Object%29?displayProperty=fullName>.</xref:System.Object.Equals%28System.Object%29?displayProperty=fullName>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "要與目前比較的物件<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的物件是否等於目前<xref href=&quot;System.Security.PermissionSet&quot;></xref>物件; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.PermissionSet.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: PermissionSet.FromXml(SecurityElement)
  fullName: System.Security.PermissionSet.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "重新建構具有指定狀態的 XML 編碼方式的安全性物件。"
  remarks: ''
  example:
  - "The following code example shows the use of the FromXml method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#17](~/add/codesnippet/csharp/m-system.security.permis_21_1.cs)]\n [!code-vb[System.Security.PermissionSet#17](~/add/codesnippet/visualbasic/m-system.security.permis_21_1.vb)]\n [!code-cpp[System.Security.PermissionSet#17](~/add/codesnippet/cpp/m-system.security.permis_21_1.cpp)]"
  syntax:
    content: public virtual void FromXml (System.Security.SecurityElement et);
    parameters:
    - id: et
      type: System.Security.SecurityElement
      description: "XML 編碼用來重新建構安全性物件。"
  overload: System.Security.PermissionSet.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>et</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> et </code>參數不是有效的權限項目。       -或- <code> et </code>不支援參數的版本號碼。"
  platform:
  - net462
- uid: System.Security.PermissionSet.GetEnumerator
  id: GetEnumerator
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: PermissionSet.GetEnumerator()
  fullName: System.Security.PermissionSet.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "傳回的權限集的列舉值。"
  remarks: "使用做為索引的列舉值，來存取個別的權限集合中的物件。"
  example:
  - "The following code example shows the use of the GetEnumerator method to list all the permissions in a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#18](~/add/codesnippet/csharp/m-system.security.permis_5_1.cs)]\n [!code-vb[System.Security.PermissionSet#18](~/add/codesnippet/visualbasic/m-system.security.permis_5_1.vb)]\n [!code-cpp[System.Security.PermissionSet#18](~/add/codesnippet/cpp/m-system.security.permis_5_1.cpp)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "權限集的列舉值物件。"
  overload: System.Security.PermissionSet.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.GetEnumeratorImpl
  id: GetEnumeratorImpl
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetEnumeratorImpl()
  nameWithType: PermissionSet.GetEnumeratorImpl()
  fullName: System.Security.PermissionSet.GetEnumeratorImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "傳回的權限集的列舉值。"
  remarks: "GetEnumeratorImpl 方法是實作<xref:System.Security.PermissionSet.GetEnumerator%2A>方法。</xref:System.Security.PermissionSet.GetEnumerator%2A>"
  syntax:
    content: protected virtual System.Collections.IEnumerator GetEnumeratorImpl ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "權限集的列舉值物件。"
  overload: System.Security.PermissionSet.GetEnumeratorImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.GetHashCode
  id: GetHashCode
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: PermissionSet.GetHashCode()
  fullName: System.Security.PermissionSet.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "取得的雜湊碼<xref href=&quot;System.Security.PermissionSet&quot;></xref>物件，其適合用於雜湊演算法和資料結構，例如雜湊表。"
  remarks: "兩個相同的權限集合執行個體的雜湊程式碼可能會不同，所以不會使用雜湊程式碼比較兩個<xref:System.Security.PermissionSet>物件。</xref:System.Security.PermissionSet>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "目前的雜湊碼<xref href=&quot;System.Security.PermissionSet&quot;></xref>物件。"
  overload: System.Security.PermissionSet.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.GetPermission(System.Type)
  id: GetPermission(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetPermission(Type)
  nameWithType: PermissionSet.GetPermission(Type)
  fullName: System.Security.PermissionSet.GetPermission(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "如果它存在集合中，取得指定類型的使用權限物件。"
  remarks: "方法會傳回`null`如`Unrestricted` <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> 雖然`Unrestricted`<xref:System.Security.PermissionSet>有效地包含所有的權限，它並沒有任何要傳回的實際執行個體。</xref:System.Security.PermissionSet>"
  syntax:
    content: public System.Security.IPermission GetPermission (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: "所需的權限物件的類型。"
    return:
      type: System.Security.IPermission
      description: "所指定之類型的權限物件的複本<code> permClass </code>參數中包含<xref href=&quot;System.Security.PermissionSet&quot;> </xref>，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果不存在。"
  overload: System.Security.PermissionSet.GetPermission*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.GetPermissionImpl(System.Type)
  id: GetPermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetPermissionImpl(Type)
  nameWithType: PermissionSet.GetPermissionImpl(Type)
  fullName: System.Security.PermissionSet.GetPermissionImpl(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "如果它存在集合中，取得指定類型的使用權限物件。"
  remarks: "GetPermissionImpl 方法是實作<xref:System.Security.PermissionSet.GetPermission%2A>方法。</xref:System.Security.PermissionSet.GetPermission%2A>       方法會傳回`null`如`Unrestricted` <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> 雖然`Unrestricted`<xref:System.Security.PermissionSet>有效地包含所有的權限，它並沒有任何要傳回的實際執行個體。</xref:System.Security.PermissionSet>"
  syntax:
    content: protected virtual System.Security.IPermission GetPermissionImpl (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: "權限物件的類型。"
    return:
      type: System.Security.IPermission
      description: "所指定之類型的權限物件的複本<code> permClass </code>參數，包含在<xref href=&quot;System.Security.PermissionSet&quot;> </xref>，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果不存在。"
  overload: System.Security.PermissionSet.GetPermissionImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.Intersect(System.Security.PermissionSet)
  id: Intersect(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Intersect(PermissionSet)
  nameWithType: PermissionSet.Intersect(PermissionSet)
  fullName: System.Security.PermissionSet.Intersect(PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "建立並傳回的權限集合也就是目前的交集<xref href=&quot;System.Security.PermissionSet&quot;></xref>和指定<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  remarks: "兩個權限集合的交集會描述一組共同兩者描述的作業的權限集合。 具體來說，它代表最小權限，會傳遞兩個權限的任何要求中將設定也會傳遞其交集。       針對存在於這兩個集合中的權限的每個類型，兩個執行個體，這些權限會交集使用的權限`Intersect`方法產生的權限會包含在產生<xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> 只有其中一個兩個集合中存在的權限類型會從結果集中排除。"
  example:
  - "The following code example shows the use of the Intersect method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#12](~/add/codesnippet/csharp/m-system.security.permis_10_1.cs)]\n [!code-vb[System.Security.PermissionSet#12](~/add/codesnippet/visualbasic/m-system.security.permis_10_1.vb)]\n [!code-cpp[System.Security.PermissionSet#12](~/add/codesnippet/cpp/m-system.security.permis_10_1.cpp)]"
  syntax:
    content: public System.Security.PermissionSet Intersect (System.Security.PermissionSet other);
    parameters:
    - id: other
      type: System.Security.PermissionSet
      description: "權限設為與目前交集<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
    return:
      type: System.Security.PermissionSet
      description: "新的權限集合，表示目前的交集<xref href=&quot;System.Security.PermissionSet&quot;></xref>和指定的目標。 這個物件是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果交集是空的。"
  overload: System.Security.PermissionSet.Intersect*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsEmpty
  id: IsEmpty
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsEmpty()
  nameWithType: PermissionSet.IsEmpty()
  fullName: System.Security.PermissionSet.IsEmpty()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "取得值，指出是否<xref href=&quot;System.Security.PermissionSet&quot;></xref>是空的。"
  remarks: "A<xref:System.Security.PermissionSet>為空白，且尚未包含執行個體的權限，這些權限是否在完全受限制的狀態。</xref:System.Security.PermissionSet> 權限就會處於完全限制如果其`IsSubsetOf`方法會傳回`true`時`null`傳遞做為參數。"
  syntax:
    content: public bool IsEmpty ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Security.PermissionSet&quot;></xref>是空的否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.PermissionSet.IsEmpty*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsReadOnly
  id: IsReadOnly
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: PermissionSet.IsReadOnly
  fullName: System.Security.PermissionSet.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "取得值，指出集合是否唯讀。"
  remarks: "A<xref:System.Security.PermissionSet>不可為唯讀，因此這個屬性永遠都是`false`。</xref:System.Security.PermissionSet>"
  example:
  - "The following code example shows the value returned by the IsReadOnly property. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#7](~/add/codesnippet/csharp/p-system.security.permis_22_1.cs)]\n [!code-vb[System.Security.PermissionSet#7](~/add/codesnippet/visualbasic/p-system.security.permis_22_1.vb)]\n [!code-cpp[System.Security.PermissionSet#7](~/add/codesnippet/cpp/p-system.security.permis_22_1.cpp)]"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.PermissionSet.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)
  id: IsSubsetOf(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsSubsetOf(PermissionSet)
  nameWithType: PermissionSet.IsSubsetOf(PermissionSet)
  fullName: System.Security.PermissionSet.IsSubsetOf(PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "決定是否目前<xref href=&quot;System.Security.PermissionSet&quot;></xref>是指定的子集<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  remarks: "A<xref:System.Security.PermissionSet>為目標的子集<xref:System.Security.PermissionSet>如果所有要求，都成功的<xref:System.Security.PermissionSet>也目標都成功。</xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet> 也就是目標至少包含的子集中所包含的權限。"
  example:
  - "The following code example shows the use of the IsSubsetOf method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#11](~/add/codesnippet/csharp/m-system.security.permis_12_1.cs)]\n [!code-vb[System.Security.PermissionSet#11](~/add/codesnippet/visualbasic/m-system.security.permis_12_1.vb)]\n [!code-cpp[System.Security.PermissionSet#11](~/add/codesnippet/cpp/m-system.security.permis_12_1.cpp)]"
  syntax:
    content: public bool IsSubsetOf (System.Security.PermissionSet target);
    parameters:
    - id: target
      type: System.Security.PermissionSet
      description: "若要測試子集關聯性設定的權限。 這必須是<xref href=&quot;System.Security.PermissionSet&quot;></xref>或<xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果目前<xref href=&quot;System.Security.PermissionSet&quot;></xref>子集<code> target </code>參數，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.PermissionSet.IsSubsetOf*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsSynchronized
  id: IsSynchronized
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: PermissionSet.IsSynchronized
  fullName: System.Security.PermissionSet.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "取得值，指出是否保證集合具備執行緒安全。"
  remarks: "<xref:System.Security.PermissionSet>不會自動處理執行緒安全，因此這個屬性永遠都是`false`。</xref:System.Security.PermissionSet>       此方法才能支援<xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>"
  example:
  - "The following code example shows the value returned by the IsSynchronized property. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#6](~/add/codesnippet/csharp/p-system.security.permis_30_1.cs)]\n [!code-vb[System.Security.PermissionSet#6](~/add/codesnippet/visualbasic/p-system.security.permis_30_1.vb)]\n [!code-cpp[System.Security.PermissionSet#6](~/add/codesnippet/cpp/p-system.security.permis_30_1.cpp)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.PermissionSet.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: PermissionSet.IsUnrestricted()
  fullName: System.Security.PermissionSet.IsUnrestricted()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "決定是否<xref href=&quot;System.Security.PermissionSet&quot;></xref>是<xref uid=&quot;langword_csharp_Unrestricted&quot; name=&quot;Unrestricted&quot; href=&quot;&quot;> </xref>。"
  remarks: "`Unrestricted` <xref:System.Security.PermissionSet>有效地包含所有實作的權限<xref:System.Security.Permissions.IUnrestrictedPermission>介面。</xref:System.Security.Permissions.IUnrestrictedPermission> </xref:System.Security.PermissionSet>"
  example:
  - "The following code example shows the use of the IsUnrestricted method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#19](~/add/codesnippet/csharp/m-system.security.permis_1_1.cs)]\n [!code-vb[System.Security.PermissionSet#19](~/add/codesnippet/visualbasic/m-system.security.permis_1_1.vb)]\n [!code-cpp[System.Security.PermissionSet#19](~/add/codesnippet/cpp/m-system.security.permis_1_1.cpp)]"
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <xref href=&quot;System.Security.PermissionSet&quot;></xref> is <xref uid=&quot;langword_csharp_Unrestricted&quot; name=&quot;Unrestricted&quot; href=&quot;&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.PermissionSet.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.PermitOnly
  id: PermitOnly
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: PermitOnly()
  nameWithType: PermissionSet.PermitOnly()
  fullName: System.Security.PermissionSet.PermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "會讓任何<xref:System.Security.PermissionSet.Demand*>通過呼叫程式碼的任何<xref href=&quot;System.Security.PermissionSet&quot;></xref>不子集的目前<xref href=&quot;System.Security.PermissionSet&quot;></xref>失敗。</xref:System.Security.PermissionSet.Demand*>"
  remarks: "PermitOnly 是類似於<xref:System.Security.PermissionSet.Deny%2A>，在於兩者會導致堆疊查核行程符合則成功時失敗。</xref:System.Security.PermissionSet.Deny%2A> 其差異在於，<xref:System.Security.PermissionSet.Deny%2A>指定權限，會導致堆疊查核行程失敗，但 PermitOnly 指定不會導致堆疊查核行程失敗的唯一權限。</xref:System.Security.PermissionSet.Deny%2A> 呼叫此方法，以確保您的程式碼，可用來存取指定的資源。       PermitOnly 會忽略該權限的要求不成功，因為未授與的權限。 不過，如果程式碼呼叫較低堆疊稍後呼叫<xref:System.Security.PermissionSet.Demand%2A>該權限，<xref:System.Security.SecurityException>堆疊查核行程到達程式碼嘗試呼叫 PermitOnly 時，會擲回。</xref:System.Security.SecurityException> </xref:System.Security.PermissionSet.Demand%2A> 這是因為呼叫 PermitOnly 的程式碼無法獲得的權限，即使它針對該權限來呼叫 PermitOnly。 呼叫堆疊通常會表示向下成長，使方法呼叫堆疊中較高層呼叫的方法較低的呼叫堆疊中。"
  syntax:
    content: public void PermitOnly ();
    parameters: []
  overload: System.Security.PermissionSet.PermitOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.RemovePermission(System.Type)
  id: RemovePermission(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: RemovePermission(Type)
  nameWithType: PermissionSet.RemovePermission(Type)
  fullName: System.Security.PermissionSet.RemovePermission(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "從集合中移除特定類型的權限。"
  remarks: "> [!IMPORTANT]> 您無法移除不受限制的權限集合的權限。 權限設定會維持為無限制之後嘗試移除權限，而不會擲回例外狀況。       下列 C# 程式碼會嘗試移除<xref:System.Security.Permissions.FileIOPermission>從`FullTrust`設定權限，但未移除的權限。</xref:System.Security.Permissions.FileIOPermission>      ```   PolicyLevel myPol = PolicyLevel.CreateAppDomainLevel();   PermissionSet myPermSet = myPol.GetNamedPermissionSet(&quot;FullTrust&quot;);   myPermSet.RemovePermission(typeof(FileIOPermission));   ```"
  example:
  - "The following code example shows the use of the RemovePermission method to remove a <xref:System.Security.Permissions.FileIOPermission> from a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#15](~/add/codesnippet/csharp/m-system.security.permis_22_1.cs)]\n [!code-vb[System.Security.PermissionSet#15](~/add/codesnippet/visualbasic/m-system.security.permis_22_1.vb)]\n [!code-cpp[System.Security.PermissionSet#15](~/add/codesnippet/cpp/m-system.security.permis_22_1.cpp)]"
  syntax:
    content: public System.Security.IPermission RemovePermission (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: "若要刪除的權限類型。"
    return:
      type: System.Security.IPermission
      description: "從集合移除的權限。"
  overload: System.Security.PermissionSet.RemovePermission*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "這個方法從呼叫<xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.PermissionSet.RemovePermissionImpl(System.Type)
  id: RemovePermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: RemovePermissionImpl(Type)
  nameWithType: PermissionSet.RemovePermissionImpl(Type)
  fullName: System.Security.PermissionSet.RemovePermissionImpl(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "從集合中移除特定類型的權限。"
  remarks: "RemovePermissionImpl 方法是實作<xref:System.Security.PermissionSet.RemovePermission%2A>方法。</xref:System.Security.PermissionSet.RemovePermission%2A>      > [!IMPORTANT] > 您無法移除不受限制的權限集合中的權限。 權限設定會維持為無限制之後嘗試移除權限，而不會擲回例外狀況。"
  syntax:
    content: protected virtual System.Security.IPermission RemovePermissionImpl (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: "若要移除權限的類型。"
    return:
      type: System.Security.IPermission
      description: "從集合移除的權限。"
  overload: System.Security.PermissionSet.RemovePermissionImpl*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "這個方法從呼叫<xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.PermissionSet.RevertAssert
  id: RevertAssert
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: RevertAssert()
  nameWithType: PermissionSet.RevertAssert()
  fullName: System.Security.PermissionSet.RevertAssert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "格之任何先前<xref:System.Security.CodeAccessPermission.Assert*>目前的畫面格，才會移除，而且不會生效。</xref:System.Security.CodeAccessPermission.Assert*>"
  remarks: "如果沒有任何<xref:System.Security.CodeAccessPermission.Assert%2A>目前的框架，<xref:System.ExecutionEngineException>就會擲回。</xref:System.ExecutionEngineException> </xref:System.Security.CodeAccessPermission.Assert%2A>"
  syntax:
    content: public static void RevertAssert ();
    parameters: []
  overload: System.Security.PermissionSet.RevertAssert*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "沒有先前<xref:System.Security.CodeAccessPermission.Assert*>目前的框架。</xref:System.Security.CodeAccessPermission.Assert*>"
  platform:
  - net462
- uid: System.Security.PermissionSet.SetPermission(System.Security.IPermission)
  id: SetPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: SetPermission(IPermission)
  nameWithType: PermissionSet.SetPermission(IPermission)
  fullName: System.Security.PermissionSet.SetPermission(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "若要設定權限<xref href=&quot;System.Security.PermissionSet&quot;> </xref>，取代相同類型的任何現有的權限。"
  remarks: "這個方法會移除任何現有的權限物件從相同型別的<xref:System.Security.PermissionSet>取代，它與`perm`參數。</xref:System.Security.PermissionSet> 如果實作的權限<xref:System.Security.Permissions.IUnrestrictedPermission>上設定<xref:System.Security.PermissionSet>也就是<xref:System.Security.Permissions.PermissionState>，產生<xref:System.Security.PermissionSet>不再`Unrestricted`。</xref:System.Security.PermissionSet> </xref:System.Security.Permissions.PermissionState> </xref:System.Security.PermissionSet> </xref:System.Security.Permissions.IUnrestrictedPermission>"
  example:
  - "The following code example shows the use of the SetPermission method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#16](~/add/codesnippet/csharp/m-system.security.permis_14_1.cs)]\n [!code-vb[System.Security.PermissionSet#16](~/add/codesnippet/visualbasic/m-system.security.permis_14_1.vb)]\n [!code-cpp[System.Security.PermissionSet#16](~/add/codesnippet/cpp/m-system.security.permis_14_1.cpp)]"
  syntax:
    content: public System.Security.IPermission SetPermission (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: "若要設定權限。"
    return:
      type: System.Security.IPermission
      description: "設定的權限。"
  overload: System.Security.PermissionSet.SetPermission*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "這個方法從呼叫<xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)
  id: SetPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: SetPermissionImpl(IPermission)
  nameWithType: PermissionSet.SetPermissionImpl(IPermission)
  fullName: System.Security.PermissionSet.SetPermissionImpl(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "若要設定權限<xref href=&quot;System.Security.PermissionSet&quot;> </xref>，取代相同類型的任何現有的權限。"
  remarks: "SetPermissionImpl 方法是實作<xref:System.Security.PermissionSet.SetPermission%2A>方法。</xref:System.Security.PermissionSet.SetPermission%2A>       這個方法會移除任何現有的權限物件從相同型別的<xref:System.Security.PermissionSet>取代，它與`perm`參數。</xref:System.Security.PermissionSet> 如果實作的權限<xref:System.Security.Permissions.IUnrestrictedPermission>上設定<xref:System.Security.PermissionSet>也就是<xref:System.Security.Permissions.PermissionState>，產生<xref:System.Security.PermissionSet>不再`Unrestricted`。</xref:System.Security.PermissionSet> </xref:System.Security.Permissions.PermissionState> </xref:System.Security.PermissionSet> </xref:System.Security.Permissions.IUnrestrictedPermission>"
  syntax:
    content: protected virtual System.Security.IPermission SetPermissionImpl (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: "若要設定權限。"
    return:
      type: System.Security.IPermission
      description: "設定的權限。"
  overload: System.Security.PermissionSet.SetPermissionImpl*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "這個方法從呼叫<xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.PermissionSet.SyncRoot
  id: SyncRoot
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: SyncRoot
  nameWithType: PermissionSet.SyncRoot
  fullName: System.Security.PermissionSet.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "取得目前集合的根物件。"
  remarks: "此方法才能支援<xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>"
  example:
  - "The following code example shows the use of SyncRoot property to get the root object of the current collection. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#8](~/add/codesnippet/csharp/p-system.security.permis_29_1.cs)]\n [!code-vb[System.Security.PermissionSet#8](~/add/codesnippet/visualbasic/p-system.security.permis_29_1.vb)]\n [!code-cpp[System.Security.PermissionSet#8](~/add/codesnippet/cpp/p-system.security.permis_29_1.cpp)]"
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "目前集合的根物件。"
  overload: System.Security.PermissionSet.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  isEii: true
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Security.PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "當整個物件 graph 已經還原序列化時執行。"
  syntax:
    content: void IDeserializationCallback.OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: "初始化回呼的物件。 此參數的功能目前尚未實作。"
  overload: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.ToString
  id: ToString
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ToString()
  nameWithType: PermissionSet.ToString()
  fullName: System.Security.PermissionSet.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "傳回的字串表示<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  remarks: "字串表示適用於偵錯以查看<xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet>的狀態"
  example:
  - "The following code example shows the use of the ToString method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#10](~/add/codesnippet/csharp/m-system.security.permis_16_1.cs)]\n [!code-vb[System.Security.PermissionSet#10](~/add/codesnippet/visualbasic/m-system.security.permis_16_1.vb)]\n [!code-cpp[System.Security.PermissionSet#10](~/add/codesnippet/cpp/m-system.security.permis_16_1.cpp)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "表示法<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  overload: System.Security.PermissionSet.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.ToXml
  id: ToXml
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ToXml()
  nameWithType: PermissionSet.ToXml()
  fullName: System.Security.PermissionSet.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "建立安全性物件和其目前狀態的 XML 編碼方式。"
  remarks: ''
  example:
  - "The following code example shows the use of the ToXml method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#17](~/add/codesnippet/csharp/m-system.security.permis_2_1.cs)]\n [!code-vb[System.Security.PermissionSet#17](~/add/codesnippet/visualbasic/m-system.security.permis_2_1.vb)]\n [!code-cpp[System.Security.PermissionSet#17](~/add/codesnippet/cpp/m-system.security.permis_2_1.cpp)]"
  syntax:
    content: public virtual System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "安全性物件，包含所有狀態資訊的 XML 編碼方式。"
  overload: System.Security.PermissionSet.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.Union(System.Security.PermissionSet)
  id: Union(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Union(PermissionSet)
  nameWithType: PermissionSet.Union(PermissionSet)
  fullName: System.Security.PermissionSet.Union(PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "建立<xref href=&quot;System.Security.PermissionSet&quot;></xref>也就是目前的聯集<xref href=&quot;System.Security.PermissionSet&quot;></xref>和指定<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  remarks: "要聯集呼叫的結果是<xref:System.Security.PermissionSet>，代表由目前<xref:System.Security.PermissionSet>以及指定<xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet>所代表的所有作業</xref:System.Security.PermissionSet>的所有作業</xref:System.Security.PermissionSet>都 如果設定為`Unrestricted`，等位是`Unrestricted`以及。"
  example:
  - "The following code example shows the use of the Union method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#13](~/add/codesnippet/csharp/m-system.security.permis_26_1.cs)]\n [!code-vb[System.Security.PermissionSet#13](~/add/codesnippet/visualbasic/m-system.security.permis_26_1.vb)]\n [!code-cpp[System.Security.PermissionSet#13](~/add/codesnippet/cpp/m-system.security.permis_26_1.cpp)]"
  syntax:
    content: public System.Security.PermissionSet Union (System.Security.PermissionSet other);
    parameters:
    - id: other
      type: System.Security.PermissionSet
      description: "權限設為形成聯集，與目前<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
    return:
      type: System.Security.PermissionSet
      description: "新的權限集合，代表目前的聯集<xref href=&quot;System.Security.PermissionSet&quot;></xref>和指定<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  overload: System.Security.PermissionSet.Union*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.NotImplementedException
  isExternal: true
  name: System.NotImplementedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermissionSet(PermissionState)
  nameWithType: PermissionSet.PermissionSet(PermissionState)
  fullName: System.Security.PermissionSet.PermissionSet(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.PermissionSet.#ctor(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermissionSet(PermissionSet)
  nameWithType: PermissionSet.PermissionSet(PermissionSet)
  fullName: System.Security.PermissionSet.PermissionSet(PermissionSet)
- uid: System.Security.PermissionSet
  parent: System.Security
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
- uid: System.Security.PermissionSet.AddPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermission(IPermission)
  nameWithType: PermissionSet.AddPermission(IPermission)
  fullName: System.Security.PermissionSet.AddPermission(IPermission)
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermissionImpl(IPermission)
  nameWithType: PermissionSet.AddPermissionImpl(IPermission)
  fullName: System.Security.PermissionSet.AddPermissionImpl(IPermission)
- uid: System.Security.PermissionSet.Assert
  parent: System.Security.PermissionSet
  isExternal: false
  name: Assert()
  nameWithType: PermissionSet.Assert()
  fullName: System.Security.PermissionSet.Assert()
- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions
  parent: System.Security.PermissionSet
  isExternal: false
  name: ContainsNonCodeAccessPermissions()
  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions()
  fullName: System.Security.PermissionSet.ContainsNonCodeAccessPermissions()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)
  parent: System.Security.PermissionSet
  isExternal: false
  name: ConvertPermissionSet(String,Byte[],String)
  nameWithType: PermissionSet.ConvertPermissionSet(String,Byte[],String)
  fullName: System.Security.PermissionSet.ConvertPermissionSet(String,Byte[],String)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.PermissionSet.Copy
  parent: System.Security.PermissionSet
  isExternal: false
  name: Copy()
  nameWithType: PermissionSet.Copy()
  fullName: System.Security.PermissionSet.Copy()
- uid: System.Security.PermissionSet.CopyTo(System.Array,System.Int32)
  parent: System.Security.PermissionSet
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: PermissionSet.CopyTo(Array,Int32)
  fullName: System.Security.PermissionSet.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.PermissionSet.Count
  parent: System.Security.PermissionSet
  isExternal: false
  name: Count
  nameWithType: PermissionSet.Count
  fullName: System.Security.PermissionSet.Count
- uid: System.Security.PermissionSet.Demand
  parent: System.Security.PermissionSet
  isExternal: false
  name: Demand()
  nameWithType: PermissionSet.Demand()
  fullName: System.Security.PermissionSet.Demand()
- uid: System.Security.PermissionSet.Deny
  parent: System.Security.PermissionSet
  isExternal: false
  name: Deny()
  nameWithType: PermissionSet.Deny()
  fullName: System.Security.PermissionSet.Deny()
- uid: System.Security.PermissionSet.Equals(System.Object)
  parent: System.Security.PermissionSet
  isExternal: false
  name: Equals(Object)
  nameWithType: PermissionSet.Equals(Object)
  fullName: System.Security.PermissionSet.Equals(Object)
- uid: System.Security.PermissionSet.FromXml(System.Security.SecurityElement)
  parent: System.Security.PermissionSet
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: PermissionSet.FromXml(SecurityElement)
  fullName: System.Security.PermissionSet.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.PermissionSet.GetEnumerator
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumerator()
  nameWithType: PermissionSet.GetEnumerator()
  fullName: System.Security.PermissionSet.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Security.PermissionSet.GetEnumeratorImpl
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumeratorImpl()
  nameWithType: PermissionSet.GetEnumeratorImpl()
  fullName: System.Security.PermissionSet.GetEnumeratorImpl()
- uid: System.Security.PermissionSet.GetHashCode
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetHashCode()
  nameWithType: PermissionSet.GetHashCode()
  fullName: System.Security.PermissionSet.GetHashCode()
- uid: System.Security.PermissionSet.GetPermission(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermission(Type)
  nameWithType: PermissionSet.GetPermission(Type)
  fullName: System.Security.PermissionSet.GetPermission(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.PermissionSet.GetPermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermissionImpl(Type)
  nameWithType: PermissionSet.GetPermissionImpl(Type)
  fullName: System.Security.PermissionSet.GetPermissionImpl(Type)
- uid: System.Security.PermissionSet.Intersect(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: Intersect(PermissionSet)
  nameWithType: PermissionSet.Intersect(PermissionSet)
  fullName: System.Security.PermissionSet.Intersect(PermissionSet)
- uid: System.Security.PermissionSet.IsEmpty
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsEmpty()
  nameWithType: PermissionSet.IsEmpty()
  fullName: System.Security.PermissionSet.IsEmpty()
- uid: System.Security.PermissionSet.IsReadOnly
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsReadOnly
  nameWithType: PermissionSet.IsReadOnly
  fullName: System.Security.PermissionSet.IsReadOnly
- uid: System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSubsetOf(PermissionSet)
  nameWithType: PermissionSet.IsSubsetOf(PermissionSet)
  fullName: System.Security.PermissionSet.IsSubsetOf(PermissionSet)
- uid: System.Security.PermissionSet.IsSynchronized
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSynchronized
  nameWithType: PermissionSet.IsSynchronized
  fullName: System.Security.PermissionSet.IsSynchronized
- uid: System.Security.PermissionSet.IsUnrestricted
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsUnrestricted()
  nameWithType: PermissionSet.IsUnrestricted()
  fullName: System.Security.PermissionSet.IsUnrestricted()
- uid: System.Security.PermissionSet.PermitOnly
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermitOnly()
  nameWithType: PermissionSet.PermitOnly()
  fullName: System.Security.PermissionSet.PermitOnly()
- uid: System.Security.PermissionSet.RemovePermission(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermission(Type)
  nameWithType: PermissionSet.RemovePermission(Type)
  fullName: System.Security.PermissionSet.RemovePermission(Type)
- uid: System.Security.PermissionSet.RemovePermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermissionImpl(Type)
  nameWithType: PermissionSet.RemovePermissionImpl(Type)
  fullName: System.Security.PermissionSet.RemovePermissionImpl(Type)
- uid: System.Security.PermissionSet.RevertAssert
  parent: System.Security.PermissionSet
  isExternal: false
  name: RevertAssert()
  nameWithType: PermissionSet.RevertAssert()
  fullName: System.Security.PermissionSet.RevertAssert()
- uid: System.Security.PermissionSet.SetPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermission(IPermission)
  nameWithType: PermissionSet.SetPermission(IPermission)
  fullName: System.Security.PermissionSet.SetPermission(IPermission)
- uid: System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermissionImpl(IPermission)
  nameWithType: PermissionSet.SetPermissionImpl(IPermission)
  fullName: System.Security.PermissionSet.SetPermissionImpl(IPermission)
- uid: System.Security.PermissionSet.SyncRoot
  parent: System.Security.PermissionSet
  isExternal: false
  name: SyncRoot
  nameWithType: PermissionSet.SyncRoot
  fullName: System.Security.PermissionSet.SyncRoot
- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  parent: System.Security.PermissionSet
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Security.PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
- uid: System.Security.PermissionSet.ToString
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToString()
  nameWithType: PermissionSet.ToString()
  fullName: System.Security.PermissionSet.ToString()
- uid: System.Security.PermissionSet.ToXml
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToXml()
  nameWithType: PermissionSet.ToXml()
  fullName: System.Security.PermissionSet.ToXml()
- uid: System.Security.PermissionSet.Union(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: Union(PermissionSet)
  nameWithType: PermissionSet.Union(PermissionSet)
  fullName: System.Security.PermissionSet.Union(PermissionSet)
- uid: System.Security.PermissionSet.#ctor*
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet.PermissionSet
- uid: System.Security.PermissionSet.AddPermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermission
  nameWithType: PermissionSet.AddPermission
- uid: System.Security.PermissionSet.AddPermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermissionImpl
  nameWithType: PermissionSet.AddPermissionImpl
- uid: System.Security.PermissionSet.Assert*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Assert
  nameWithType: PermissionSet.Assert
- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ContainsNonCodeAccessPermissions
  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions
- uid: System.Security.PermissionSet.ConvertPermissionSet*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ConvertPermissionSet
  nameWithType: PermissionSet.ConvertPermissionSet
- uid: System.Security.PermissionSet.Copy*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Copy
  nameWithType: PermissionSet.Copy
- uid: System.Security.PermissionSet.CopyTo*
  parent: System.Security.PermissionSet
  isExternal: false
  name: CopyTo
  nameWithType: PermissionSet.CopyTo
- uid: System.Security.PermissionSet.Count*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Count
  nameWithType: PermissionSet.Count
- uid: System.Security.PermissionSet.Demand*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Demand
  nameWithType: PermissionSet.Demand
- uid: System.Security.PermissionSet.Deny*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Deny
  nameWithType: PermissionSet.Deny
- uid: System.Security.PermissionSet.Equals*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Equals
  nameWithType: PermissionSet.Equals
- uid: System.Security.PermissionSet.FromXml*
  parent: System.Security.PermissionSet
  isExternal: false
  name: FromXml
  nameWithType: PermissionSet.FromXml
- uid: System.Security.PermissionSet.GetEnumerator*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumerator
  nameWithType: PermissionSet.GetEnumerator
- uid: System.Security.PermissionSet.GetEnumeratorImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumeratorImpl
  nameWithType: PermissionSet.GetEnumeratorImpl
- uid: System.Security.PermissionSet.GetHashCode*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetHashCode
  nameWithType: PermissionSet.GetHashCode
- uid: System.Security.PermissionSet.GetPermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermission
  nameWithType: PermissionSet.GetPermission
- uid: System.Security.PermissionSet.GetPermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermissionImpl
  nameWithType: PermissionSet.GetPermissionImpl
- uid: System.Security.PermissionSet.Intersect*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Intersect
  nameWithType: PermissionSet.Intersect
- uid: System.Security.PermissionSet.IsEmpty*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsEmpty
  nameWithType: PermissionSet.IsEmpty
- uid: System.Security.PermissionSet.IsReadOnly*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsReadOnly
  nameWithType: PermissionSet.IsReadOnly
- uid: System.Security.PermissionSet.IsSubsetOf*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSubsetOf
  nameWithType: PermissionSet.IsSubsetOf
- uid: System.Security.PermissionSet.IsSynchronized*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSynchronized
  nameWithType: PermissionSet.IsSynchronized
- uid: System.Security.PermissionSet.IsUnrestricted*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsUnrestricted
  nameWithType: PermissionSet.IsUnrestricted
- uid: System.Security.PermissionSet.PermitOnly*
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermitOnly
  nameWithType: PermissionSet.PermitOnly
- uid: System.Security.PermissionSet.RemovePermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermission
  nameWithType: PermissionSet.RemovePermission
- uid: System.Security.PermissionSet.RemovePermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermissionImpl
  nameWithType: PermissionSet.RemovePermissionImpl
- uid: System.Security.PermissionSet.RevertAssert*
  parent: System.Security.PermissionSet
  isExternal: false
  name: RevertAssert
  nameWithType: PermissionSet.RevertAssert
- uid: System.Security.PermissionSet.SetPermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermission
  nameWithType: PermissionSet.SetPermission
- uid: System.Security.PermissionSet.SetPermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermissionImpl
  nameWithType: PermissionSet.SetPermissionImpl
- uid: System.Security.PermissionSet.SyncRoot*
  parent: System.Security.PermissionSet
  isExternal: false
  name: SyncRoot
  nameWithType: PermissionSet.SyncRoot
- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  parent: System.Security.PermissionSet
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
  nameWithType: PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
- uid: System.Security.PermissionSet.ToString*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToString
  nameWithType: PermissionSet.ToString
- uid: System.Security.PermissionSet.ToXml*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToXml
  nameWithType: PermissionSet.ToXml
- uid: System.Security.PermissionSet.Union*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Union
  nameWithType: PermissionSet.Union
