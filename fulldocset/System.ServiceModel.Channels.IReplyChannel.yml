### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Channels.IReplyChannel
  id: IReplyChannel
  children:
  - System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)
  - System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)
  - System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)
  - System.ServiceModel.Channels.IReplyChannel.LocalAddress
  - System.ServiceModel.Channels.IReplyChannel.ReceiveRequest
  - System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)
  - System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)
  - System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)
  langs:
  - csharp
  name: IReplyChannel
  nameWithType: IReplyChannel
  fullName: System.ServiceModel.Channels.IReplyChannel
  type: Interface
  summary: "定義通道必須要在傳訊端點之間要求 – 回覆通訊的接收端上實作的介面。"
  remarks: "IReplyChannel 介面包含同步和非同步 variant<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>方法傳回<xref:System.ServiceModel.Channels.RequestContext>，可以用來回覆所收到的要求。</xref:System.ServiceModel.Channels.RequestContext> </xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>       此合約包括接收，再試一次接收和等候的-a-訊息功能的同步和非同步 variant。       IReplyChannel 是不一定要繫結到單一寄件人。 其他的通道和通道介面提供特定寄件人和回覆通道之間的相互關聯，但基底合約有提出無這項限制。       提取模型與 IReplyChannel 用於接收訊息。 此模型包含呼叫<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>（或其中一個變數），然後等候訊息到達。</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>"
  syntax:
    content: 'public interface IReplyChannel : System.ServiceModel.Channels.IChannel'
  implements:
  - System.ServiceModel.Channels.IChannel
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)
  id: BeginReceiveRequest(System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: BeginReceiveRequest(AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginReceiveRequest(AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "開始非同步作業，接收可用要求的預設逾時。"
  remarks: "BeginReceiveRequest 方法會實作標準模式來叫用<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest>以非同步的方式。</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest> 預設逾時是 1 分鐘。 如果用來設定連接的繫結上設定的接收逾時，會使用該值。 使用<xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>如果您想要指定明確的逾時，會覆寫這些其他值的呼叫。</xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>       如果接收的要求訊息大於最大訊息所使用的繫結所允許的大小<xref:System.ServiceModel.QuotaExceededException>就會擲回。</xref:System.ServiceModel.QuotaExceededException> 訊息大小上限由所設定<xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>屬性。</xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 預設值為 65536 個位元組。"
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#1](~/add/codesnippet/csharp/b714b94c-13fc-4c03-a779-_1.cs)]"
  syntax:
    content: public IAsyncResult BeginReceiveRequest (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>會接收非同步通知的委派會接收要求作業完成。</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "指定的物件，由應用程式，其中包含與非同步接收要求作業相關聯的狀態資訊。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>，參考要求的非同步接收。</xref:System.IAsyncResult>"
  overload: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "開始非同步作業，接收可用要求與指定的逾時。"
  remarks: "BeginReceiveRequest 方法會實作標準模式來叫用<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29>以非同步的方式。</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29> 這個方法設定逾時，會覆寫用來設定連接的繫結上的接收逾時。       如果接收的要求訊息大於最大訊息所使用的繫結所允許的大小<xref:System.ServiceModel.QuotaExceededException>就會擲回。</xref:System.ServiceModel.QuotaExceededException> 訊息大小上限由所設定<xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>屬性。</xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 預設值為 65536 個位元組。"
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#2](~/add/codesnippet/csharp/6f48cd8d-c63c-4708-86c4-_1.cs)]"
  syntax:
    content: public IAsyncResult BeginReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>，指定等候接收可用要求的時間間隔。</xref:System.TimeSpan>"
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>會接收非同步通知的委派會接收要求作業完成。</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "指定的物件，由應用程式，其中包含與非同步接收要求作業相關聯的狀態資訊。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>，參考要求的非同步接收。</xref:System.IAsyncResult>"
  overload: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "開始非同步作業，以便接收要求訊息具有指定的逾時以及與其相關聯的狀態物件。"
  remarks: "當您需要應用程式繼續執行而不要等候時，請使用非同步 BeginTryReceiveRequest 方法。 使用其中一種同步<xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29>方法時，它可接受進行封鎖並同時回覆要求訊息，或是直到已超過逾時間隔，目前的執行緒。</xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29>       這個方法會接收通知，透過回呼的操作的事件處理常式身分識別。 沒有可用的訊息通道中或發生逾時之前，作業已完成。"
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#5](~/add/codesnippet/csharp/cdb71277-0f0f-4e22-85af-_1.cs)]"
  syntax:
    content: public IAsyncResult BeginTryReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>指定在多久接收要求作業完成之前逾時並傳回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.TimeSpan>"
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>會接收非同步通知的委派會接收要求作業完成。</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "指定的物件，由應用程式，其中包含與非同步接收要求作業相關聯的狀態資訊。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>會參考非同步接收要求作業。</xref:System.IAsyncResult>"
  overload: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "開始非同步的要求作業具有已指定的逾時以及與其相關聯的狀態物件。"
  remarks: "使用同步<xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29>方法時，它可接受進行封鎖並同時等候要求訊息到達佇列中目前的執行緒。</xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> 執行緒會持續封鎖向上指定`timeout`。       這個方法會接收通知，透過回呼的操作的事件處理常式身分識別。 不會出現在通道的要求訊息或發生逾時之前，作業已完成。"
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#10](~/add/codesnippet/csharp/80573a5a-f5c0-4be0-a875-_1.cs)]"
  syntax:
    content: public IAsyncResult BeginWaitForRequest (TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>，指定等候接收可用要求的時間間隔。</xref:System.TimeSpan>"
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>會接收非同步通知的委派會接收要求作業完成。</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "指定的物件，由應用程式，其中包含與非同步接收要求作業相關聯的狀態資訊。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>會參考非同步作業以等候要求訊息到達。</xref:System.IAsyncResult>"
  overload: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)
  id: EndReceiveRequest(System.IAsyncResult)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: EndReceiveRequest(IAsyncResult)
  nameWithType: IReplyChannel.EndReceiveRequest(IAsyncResult)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(IAsyncResult)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "完成非同步作業，接收可用的要求。"
  remarks: "如果接收的要求訊息大於最大訊息所使用的繫結所允許的大小<xref:System.ServiceModel.QuotaExceededException>就會擲回。</xref:System.ServiceModel.QuotaExceededException> 訊息大小上限由所設定<xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>屬性。</xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 預設值為 65536 個位元組。"
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#3](~/add/codesnippet/csharp/c3561a14-d2f1-46f1-99c2-_1.cs)]"
  syntax:
    content: public System.ServiceModel.Channels.RequestContext EndReceiveRequest (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>呼叫所傳回的<xref:System.ServiceModel.Channels.IInputChannel.BeginReceive*>方法。</xref:System.ServiceModel.Channels.IInputChannel.BeginReceive*> </xref:System.IAsyncResult>"
    return:
      type: System.ServiceModel.Channels.RequestContext
      description: "<xref:System.ServiceModel.Channels.RequestContext>用來建構要求的回覆。</xref:System.ServiceModel.Channels.RequestContext>"
  overload: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)
  id: EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: EndTryReceiveRequest(IAsyncResult,RequestContext)
  nameWithType: IReplyChannel.EndTryReceiveRequest(IAsyncResult,RequestContext)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(IAsyncResult,RequestContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "完成指定的非同步作業，以便接收要求訊息。"
  remarks: ''
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#6](~/add/codesnippet/csharp/2c432ec9-bfc6-46e4-8a1c-_1.cs)]"
  syntax:
    content: public bool EndTryReceiveRequest (IAsyncResult result, out System.ServiceModel.Channels.RequestContext context);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>呼叫所傳回的&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;方法。</xref:System.IAsyncResult>"
    - id: context
      type: System.ServiceModel.Channels.RequestContext
      description: "<xref:System.ServiceModel.Channels.RequestContext>收到。</xref:System.ServiceModel.Channels.RequestContext>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果的經過時間; 指定的間隔之前接收到要求訊息否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)
  id: EndWaitForRequest(System.IAsyncResult)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: EndWaitForRequest(IAsyncResult)
  nameWithType: IReplyChannel.EndWaitForRequest(IAsyncResult)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(IAsyncResult)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "完成指定的非同步等候的-要求訊息作業。"
  remarks: ''
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#11](~/add/codesnippet/csharp/fc7d466d-2acc-417f-aa1b-_1.cs)]"
  syntax:
    content: public bool EndWaitForRequest (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>可識別&lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;作業完成，並從其中擷取最終結果。</xref:System.IAsyncResult>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的間隔的經過時間; 之前收到的要求否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.LocalAddress
  id: LocalAddress
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: LocalAddress
  nameWithType: IReplyChannel.LocalAddress
  fullName: System.ServiceModel.Channels.IReplyChannel.LocalAddress
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "取得回覆通道接收訊息的位址。"
  remarks: ''
  example:
  - "The following code illustrates how to implement this property:  \n  \n [!code-cs[S_UE_MessageInterceptor#0](~/add/codesnippet/csharp/p-system.servicemodel.ch_2_1.cs)]"
  syntax:
    content: public System.ServiceModel.EndpointAddress LocalAddress { get; }
    return:
      type: System.ServiceModel.EndpointAddress
      description: "<xref:System.ServiceModel.EndpointAddress>所在回覆通道接收訊息。</xref:System.ServiceModel.EndpointAddress>"
  overload: System.ServiceModel.Channels.IReplyChannel.LocalAddress*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest
  id: ReceiveRequest
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: ReceiveRequest()
  nameWithType: IReplyChannel.ReceiveRequest()
  fullName: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "如果有的話，則傳回接收要求的內容。 如果找不到的內容，等候直到有可用的其中一個。"
  remarks: "<xref:System.ServiceModel.Channels.RequestContext>封裝要求訊息和回覆該訊息的機制。</xref:System.ServiceModel.Channels.RequestContext>       ReceiveRequest 可以呼叫多次或同時。 只有一個 ReceiveRequest 呼叫完成每個收到的要求。       如果接收的要求訊息大於最大訊息所使用的繫結所允許的大小<xref:System.ServiceModel.QuotaExceededException>就會擲回。</xref:System.ServiceModel.QuotaExceededException> 訊息大小上限由所設定<xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>屬性。</xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 預設值為 65536 個位元組。"
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#7](~/add/codesnippet/csharp/m-system.servicemodel.ch_9_1.cs)]"
  syntax:
    content: public System.ServiceModel.Channels.RequestContext ReceiveRequest ();
    parameters: []
    return:
      type: System.ServiceModel.Channels.RequestContext
      description: "<xref:System.ServiceModel.Channels.RequestContext>用來建構回覆。</xref:System.ServiceModel.Channels.RequestContext>"
  overload: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)
  id: ReceiveRequest(System.TimeSpan)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: ReceiveRequest(TimeSpan)
  nameWithType: IReplyChannel.ReceiveRequest(TimeSpan)
  fullName: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(TimeSpan)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "如果有的話，則傳回接收要求的內容。 如果找不到的內容，等候直到有可用的其中一個。"
  remarks: "<xref:System.ServiceModel.Channels.RequestContext>封裝要求訊息和回覆該訊息的機制。</xref:System.ServiceModel.Channels.RequestContext>       <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>可以多次呼叫或同時。</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> 只有一個<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>呼叫完成每個收到的要求。</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>       如果接收的要求訊息大於最大訊息所使用的繫結所允許的大小<xref:System.ServiceModel.QuotaExceededException>就會擲回。</xref:System.ServiceModel.QuotaExceededException> 訊息大小上限由所設定<xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>屬性。</xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> 預設值為 65536 個位元組。"
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#8](~/add/codesnippet/csharp/m-system.servicemodel.ch_3_1.cs)]"
  syntax:
    content: public System.ServiceModel.Channels.RequestContext ReceiveRequest (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>指定在多久接收要求作業完成之前逾時並傳回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.TimeSpan>"
    return:
      type: System.ServiceModel.Channels.RequestContext
      description: "<xref:System.ServiceModel.Channels.RequestContext>用來建構回覆。</xref:System.ServiceModel.Channels.RequestContext>"
  overload: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)
  id: TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: TryReceiveRequest(TimeSpan,RequestContext)
  nameWithType: IReplyChannel.TryReceiveRequest(TimeSpan,RequestContext)
  fullName: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(TimeSpan,RequestContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "傳回值，指出是否在指定的經過時間間隔之前收到的要求。"
  remarks: "接受目前的執行緒可進行封鎖並同時等候要求訊息到達佇列時，請使用 TryReceiveRequest。 執行緒會持續封鎖向上指定`timeout`。 如果您需要應用程式繼續執行而不要等候，使用非同步<xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>方法。</xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>"
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#4](~/add/codesnippet/csharp/78581c5e-1028-4e54-ba3b-_1.cs)]"
  syntax:
    content: public bool TryReceiveRequest (TimeSpan timeout, out System.ServiceModel.Channels.RequestContext context);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>指定在多久接收要求作業完成之前逾時並傳回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.TimeSpan>"
    - id: context
      type: System.ServiceModel.Channels.RequestContext
      description: "<xref:System.ServiceModel.Channels.RequestContext>收到。</xref:System.ServiceModel.Channels.RequestContext>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果的經過時間; 指定的間隔之前接收到要求訊息否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)
  id: WaitForRequest(System.TimeSpan)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: WaitForRequest(TimeSpan)
  nameWithType: IReplyChannel.WaitForRequest(TimeSpan)
  fullName: System.ServiceModel.Channels.IReplyChannel.WaitForRequest(TimeSpan)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "傳回值，指出是否指定超過時間間隔之前接收到要求訊息。"
  remarks: "呼叫 WaitForRequest 不會導致在收到，或以任何方式處理的要求訊息。       <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>方法的存在主要是針對使用者希望接收到使用交易之訊息的異動狀況。</xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> 當只有使用<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>通常為此，使用者必須建立交易，並接著呼叫<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>希望訊息到達時，交易逾時之前，這可能不會。</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> </xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>       相反地，使用者可以呼叫 WaitForRequest 並指定逾時 （甚至無限時），然後在訊息到達時開啟交易，呼叫<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>然後深信自己，它們就可以收到訊息之前在交易逾,。</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>       可接受進行封鎖並同時等候訊息到達佇列中目前的執行緒時，請使用 WaitForRequest。 執行緒會持續封鎖向上指定`timeout`。 如果您需要應用程式繼續執行而不要等候，使用非同步<xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>方法。</xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>"
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#9](~/add/codesnippet/csharp/m-system.servicemodel.ch_6_1.cs)]"
  syntax:
    content: public bool WaitForRequest (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>指定時間長度的要求作業必須完成之前逾時並傳回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.TimeSpan>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的間隔的經過時間; 之前收到的要求否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceModel.Channels.IReplyChannel.WaitForRequest*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginReceiveRequest(AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginReceiveRequest(AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
- uid: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
- uid: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndReceiveRequest(IAsyncResult)
  nameWithType: IReplyChannel.EndReceiveRequest(IAsyncResult)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(IAsyncResult)
- uid: System.ServiceModel.Channels.RequestContext
  parent: System.ServiceModel.Channels
  isExternal: true
  name: RequestContext
  nameWithType: RequestContext
  fullName: System.ServiceModel.Channels.RequestContext
- uid: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndTryReceiveRequest(IAsyncResult,RequestContext)
  nameWithType: IReplyChannel.EndTryReceiveRequest(IAsyncResult,RequestContext)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(IAsyncResult,RequestContext)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndWaitForRequest(IAsyncResult)
  nameWithType: IReplyChannel.EndWaitForRequest(IAsyncResult)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(IAsyncResult)
- uid: System.ServiceModel.Channels.IReplyChannel.LocalAddress
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: LocalAddress
  nameWithType: IReplyChannel.LocalAddress
  fullName: System.ServiceModel.Channels.IReplyChannel.LocalAddress
- uid: System.ServiceModel.EndpointAddress
  parent: System.ServiceModel
  isExternal: true
  name: EndpointAddress
  nameWithType: EndpointAddress
  fullName: System.ServiceModel.EndpointAddress
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: ReceiveRequest()
  nameWithType: IReplyChannel.ReceiveRequest()
  fullName: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest()
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: ReceiveRequest(TimeSpan)
  nameWithType: IReplyChannel.ReceiveRequest(TimeSpan)
  fullName: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(TimeSpan)
- uid: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: TryReceiveRequest(TimeSpan,RequestContext)
  nameWithType: IReplyChannel.TryReceiveRequest(TimeSpan,RequestContext)
  fullName: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(TimeSpan,RequestContext)
- uid: System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: WaitForRequest(TimeSpan)
  nameWithType: IReplyChannel.WaitForRequest(TimeSpan)
  fullName: System.ServiceModel.Channels.IReplyChannel.WaitForRequest(TimeSpan)
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginReceiveRequest
  nameWithType: IReplyChannel.BeginReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginTryReceiveRequest
  nameWithType: IReplyChannel.BeginTryReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginWaitForRequest
  nameWithType: IReplyChannel.BeginWaitForRequest
- uid: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndReceiveRequest
  nameWithType: IReplyChannel.EndReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndTryReceiveRequest
  nameWithType: IReplyChannel.EndTryReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndWaitForRequest
  nameWithType: IReplyChannel.EndWaitForRequest
- uid: System.ServiceModel.Channels.IReplyChannel.LocalAddress*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: LocalAddress
  nameWithType: IReplyChannel.LocalAddress
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: ReceiveRequest
  nameWithType: IReplyChannel.ReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: TryReceiveRequest
  nameWithType: IReplyChannel.TryReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.WaitForRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: WaitForRequest
  nameWithType: IReplyChannel.WaitForRequest
