### YamlMime:ManagedReference
items:
- uid: System.Workflow.ComponentModel.CompensateActivity
  id: CompensateActivity
  children:
  - System.Workflow.ComponentModel.CompensateActivity.#ctor
  - System.Workflow.ComponentModel.CompensateActivity.#ctor(System.String)
  - System.Workflow.ComponentModel.CompensateActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.ComponentModel.CompensateActivity.Initialize(System.IServiceProvider)
  - System.Workflow.ComponentModel.CompensateActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)
  - System.Workflow.ComponentModel.CompensateActivity.TargetActivityName
  - System.Workflow.ComponentModel.CompensateActivity.TargetActivityNameProperty
  langs:
  - csharp
  name: CompensateActivity
  nameWithType: CompensateActivity
  fullName: System.Workflow.ComponentModel.CompensateActivity
  type: Class
  summary: "觸發程序已完成子補償<xref href=&quot;System.Workflow.ComponentModel.Activity&quot;></xref>實作<xref href=&quot;System.Workflow.ComponentModel.ICompensatableActivity&quot;></xref>介面。 這個類別無法被繼承。"
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]任何<xref:System.Workflow.ComponentModel.Activity>實作<xref:System.Workflow.ComponentModel.ICompensatableActivity>可補償。</xref:System.Workflow.ComponentModel.ICompensatableActivity> </xref:System.Workflow.ComponentModel.Activity> 補償活動是有效的目標的 CompensateActivity，只要該活動為子系<xref:System.Workflow.ComponentModel.Activity>的<xref:System.Workflow.ComponentModel.CompositeActivity>CompensateActivity 相關聯。</xref:System.Workflow.ComponentModel.CompositeActivity> </xref:System.Workflow.ComponentModel.Activity>"
  syntax:
    content: >-
      [System.ComponentModel.Designer(typeof(System.Workflow.ComponentModel.CompensateDesigner), typeof(System.ComponentModel.Design.IDesigner))]

      [System.ComponentModel.ToolboxItem(typeof(System.Workflow.ComponentModel.Design.ActivityToolboxItem))]

      [System.Drawing.ToolboxBitmap(typeof(System.Workflow.ComponentModel.CompensateActivity), "Resources.Compensate.png")]

      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      [System.Workflow.ComponentModel.Compiler.ActivityValidator(typeof(System.Workflow.ComponentModel.CompensateValidator))]

      public sealed class CompensateActivity : System.Workflow.ComponentModel.Activity, System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>
  inheritance:
  - System.Object
  - System.Workflow.ComponentModel.DependencyObject
  - System.Workflow.ComponentModel.Activity
  implements:
  - System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>
  inheritedMembers:
  - System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty
  - System.Workflow.ComponentModel.Activity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.ComponentModel.Activity.Canceling
  - System.Workflow.ComponentModel.Activity.CancelingEvent
  - System.Workflow.ComponentModel.Activity.Clone
  - System.Workflow.ComponentModel.Activity.Closed
  - System.Workflow.ComponentModel.Activity.ClosedEvent
  - System.Workflow.ComponentModel.Activity.Compensating
  - System.Workflow.ComponentModel.Activity.CompensatingEvent
  - System.Workflow.ComponentModel.Activity.Description
  - System.Workflow.ComponentModel.Activity.Enabled
  - System.Workflow.ComponentModel.Activity.Executing
  - System.Workflow.ComponentModel.Activity.ExecutingEvent
  - System.Workflow.ComponentModel.Activity.ExecutionResult
  - System.Workflow.ComponentModel.Activity.ExecutionStatus
  - System.Workflow.ComponentModel.Activity.Faulting
  - System.Workflow.ComponentModel.Activity.FaultingEvent
  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String)
  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String,System.Boolean)
  - System.Workflow.ComponentModel.Activity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)
  - System.Workflow.ComponentModel.Activity.Invoke``1(System.EventHandler{``0},``0)
  - System.Workflow.ComponentModel.Activity.Invoke``1(System.Workflow.ComponentModel.IActivityEventListener`1,``0)
  - System.Workflow.ComponentModel.Activity.IsDynamicActivity
  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity,System.Runtime.Serialization.IFormatter)
  - System.Workflow.ComponentModel.Activity.Name
  - System.Workflow.ComponentModel.Activity.OnActivityExecutionContextLoad(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.OnActivityExecutionContextUnload(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.OnClosed(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.Parent
  - System.Workflow.ComponentModel.Activity.QualifiedName
  - System.Workflow.ComponentModel.Activity.RaiseEvent(System.Workflow.ComponentModel.DependencyProperty,System.Object,System.EventArgs)
  - System.Workflow.ComponentModel.Activity.RaiseGenericEvent``1(System.Workflow.ComponentModel.DependencyProperty,System.Object,``0)
  - System.Workflow.ComponentModel.Activity.RegisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})
  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream)
  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)
  - System.Workflow.ComponentModel.Activity.StatusChanged
  - System.Workflow.ComponentModel.Activity.StatusChangedEvent
  - System.Workflow.ComponentModel.Activity.ToString
  - System.Workflow.ComponentModel.Activity.TrackData(System.Object)
  - System.Workflow.ComponentModel.Activity.TrackData(System.String,System.Object)
  - System.Workflow.ComponentModel.Activity.Uninitialize(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.UnregisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})
  - System.Workflow.ComponentModel.Activity.WorkflowInstanceId
  - System.Workflow.ComponentModel.DependencyObject.AddHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.DesignMode
  - System.Workflow.ComponentModel.DependencyObject.Dispose
  - System.Workflow.ComponentModel.DependencyObject.Dispose(System.Boolean)
  - System.Workflow.ComponentModel.DependencyObject.GetBinding(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)
  - System.Workflow.ComponentModel.DependencyObject.GetInvocationList``1(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetValueBase(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.InitializeProperties
  - System.Workflow.ComponentModel.DependencyObject.IsBindingSet(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.MetaEquals(System.Workflow.ComponentModel.DependencyObject)
  - System.Workflow.ComponentModel.DependencyObject.ParentDependencyObject
  - System.Workflow.ComponentModel.DependencyObject.RemoveHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.RemoveProperty(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)
  - System.Workflow.ComponentModel.DependencyObject.SetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetReadOnlyPropertyValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetValueBase(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.Site
  - System.Workflow.ComponentModel.DependencyObject.UserData
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompensateActivity.#ctor
  id: '#ctor'
  parent: System.Workflow.ComponentModel.CompensateActivity
  langs:
  - csharp
  name: CompensateActivity()
  nameWithType: CompensateActivity.CompensateActivity()
  fullName: System.Workflow.ComponentModel.CompensateActivity.CompensateActivity()
  type: Constructor
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "初始化的新執行個體<xref href=&quot;System.Workflow.ComponentModel.CompensateActivity&quot;></xref>類別。"
  remarks: ''
  example:
  - "The following example demonstrates creating a <xref:System.Workflow.ComponentModel.CompensateActivity> object.  This example is from the Compensation SDK sample.  For more information, see [Compensation Sample](http://msdn.microsoft.com/en-us/c847a694-9978-46af-aa80-5bd1833f813b).  \n  \n [!code-cs[WF_Samples#144](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#144)]\n [!code-vb[WF_Samples#144](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#144)]"
  syntax:
    content: public CompensateActivity ();
    parameters: []
  overload: System.Workflow.ComponentModel.CompensateActivity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompensateActivity.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Workflow.ComponentModel.CompensateActivity
  langs:
  - csharp
  name: CompensateActivity(String)
  nameWithType: CompensateActivity.CompensateActivity(String)
  fullName: System.Workflow.ComponentModel.CompensateActivity.CompensateActivity(String)
  type: Constructor
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "初始化的新執行個體<xref href=&quot;System.Workflow.ComponentModel.CompensateActivity&quot;></xref>類別使用的活動名稱。"
  syntax:
    content: public CompensateActivity (string name);
    parameters:
    - id: name
      type: System.String
      description: "使用者定義的活動名稱。"
  overload: System.Workflow.ComponentModel.CompensateActivity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompensateActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  id: Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.ComponentModel.CompensateActivity
  langs:
  - csharp
  name: Execute(ActivityExecutionContext)
  nameWithType: CompensateActivity.Execute(ActivityExecutionContext)
  fullName: System.Workflow.ComponentModel.CompensateActivity.Execute(ActivityExecutionContext)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  syntax:
    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Execute (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);
    parameters:
    - id: executionContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "即將加入。"
    return:
      type: System.Workflow.ComponentModel.ActivityExecutionStatus
      description: "即將加入。"
  overload: System.Workflow.ComponentModel.CompensateActivity.Execute*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompensateActivity.Initialize(System.IServiceProvider)
  id: Initialize(System.IServiceProvider)
  parent: System.Workflow.ComponentModel.CompensateActivity
  langs:
  - csharp
  name: Initialize(IServiceProvider)
  nameWithType: CompensateActivity.Initialize(IServiceProvider)
  fullName: System.Workflow.ComponentModel.CompensateActivity.Initialize(IServiceProvider)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  syntax:
    content: protected override void Initialize (IServiceProvider provider);
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "即將加入。"
  overload: System.Workflow.ComponentModel.CompensateActivity.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompensateActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)
  id: System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)
  isEii: true
  parent: System.Workflow.ComponentModel.CompensateActivity
  langs:
  - csharp
  name: System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)
  nameWithType: CompensateActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)
  fullName: System.Workflow.ComponentModel.CompensateActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)
  type: Method
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  syntax:
    content: void IActivityEventListener<ActivityExecutionStatusChangedEventArgs>.OnEvent (object sender, System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs e);
    parameters:
    - id: sender
      type: System.Object
      description: "即將加入。"
    - id: e
      type: System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs
      description: "即將加入。"
  overload: System.Workflow.ComponentModel.CompensateActivity.System#Workflow#ComponentModel#IActivityEventListener<System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs>#OnEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompensateActivity.TargetActivityName
  id: TargetActivityName
  parent: System.Workflow.ComponentModel.CompensateActivity
  langs:
  - csharp
  name: TargetActivityName
  nameWithType: CompensateActivity.TargetActivityName
  fullName: System.Workflow.ComponentModel.CompensateActivity.TargetActivityName
  type: Property
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "取得或設定名稱<xref href=&quot;System.Workflow.ComponentModel.Activity&quot;></xref>補償。"
  remarks: ''
  example:
  - "The following example demonstrates accessing the `TargetActivityName` property. This sample is from the Compensation SDK sample. For more information, see [Compensation Sample](http://msdn.microsoft.com/en-us/c847a694-9978-46af-aa80-5bd1833f813b).  \n  \n [!code-cs[WF_Samples#149](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#149)]\n [!code-vb[WF_Samples#149](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#149)]"
  syntax:
    content: public string TargetActivityName { get; set; }
    return:
      type: System.String
      description: "字串，包含名稱<xref href=&quot;System.Workflow.ComponentModel.Activity&quot;></xref>補償。"
  overload: System.Workflow.ComponentModel.CompensateActivity.TargetActivityName*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.ComponentModel.CompensateActivity.TargetActivityNameProperty
  id: TargetActivityNameProperty
  parent: System.Workflow.ComponentModel.CompensateActivity
  langs:
  - csharp
  name: TargetActivityNameProperty
  nameWithType: CompensateActivity.TargetActivityNameProperty
  fullName: System.Workflow.ComponentModel.CompensateActivity.TargetActivityNameProperty
  type: Field
  assemblies:
  - System.Workflow.ComponentModel
  namespace: System.Workflow.ComponentModel
  summary: "代表<xref href=&quot;System.Workflow.ComponentModel.DependencyProperty&quot;></xref>目標<xref:System.Workflow.ComponentModel.CompensateActivity.TargetActivityName*>屬性。</xref:System.Workflow.ComponentModel.CompensateActivity.TargetActivityName*>"
  remarks: '[!INCLUDE[DependencyPropertyRemark](~/add/includes/dependencypropertyremark-md.md)]'
  syntax:
    content: public static readonly System.Workflow.ComponentModel.DependencyProperty TargetActivityNameProperty;
    return:
      type: System.Workflow.ComponentModel.DependencyProperty
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Workflow.ComponentModel.Activity
  isExternal: false
  name: System.Workflow.ComponentModel.Activity
- uid: System.Workflow.ComponentModel.CompensateActivity.#ctor
  parent: System.Workflow.ComponentModel.CompensateActivity
  isExternal: false
  name: CompensateActivity()
  nameWithType: CompensateActivity.CompensateActivity()
  fullName: System.Workflow.ComponentModel.CompensateActivity.CompensateActivity()
- uid: System.Workflow.ComponentModel.CompensateActivity.#ctor(System.String)
  parent: System.Workflow.ComponentModel.CompensateActivity
  isExternal: false
  name: CompensateActivity(String)
  nameWithType: CompensateActivity.CompensateActivity(String)
  fullName: System.Workflow.ComponentModel.CompensateActivity.CompensateActivity(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Workflow.ComponentModel.CompensateActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.ComponentModel.CompensateActivity
  isExternal: false
  name: Execute(ActivityExecutionContext)
  nameWithType: CompensateActivity.Execute(ActivityExecutionContext)
  fullName: System.Workflow.ComponentModel.CompensateActivity.Execute(ActivityExecutionContext)
- uid: System.Workflow.ComponentModel.ActivityExecutionStatus
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionStatus
  nameWithType: ActivityExecutionStatus
  fullName: System.Workflow.ComponentModel.ActivityExecutionStatus
- uid: System.Workflow.ComponentModel.ActivityExecutionContext
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionContext
  nameWithType: ActivityExecutionContext
  fullName: System.Workflow.ComponentModel.ActivityExecutionContext
- uid: System.Workflow.ComponentModel.CompensateActivity.Initialize(System.IServiceProvider)
  parent: System.Workflow.ComponentModel.CompensateActivity
  isExternal: false
  name: Initialize(IServiceProvider)
  nameWithType: CompensateActivity.Initialize(IServiceProvider)
  fullName: System.Workflow.ComponentModel.CompensateActivity.Initialize(IServiceProvider)
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Workflow.ComponentModel.CompensateActivity.System#Workflow#ComponentModel#IActivityEventListener{System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)
  parent: System.Workflow.ComponentModel.CompensateActivity
  isExternal: false
  name: System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)
  nameWithType: CompensateActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)
  fullName: System.Workflow.ComponentModel.CompensateActivity.System.Workflow.ComponentModel.IActivityEventListener(Object,ActivityExecutionStatusChangedEventArgs)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionStatusChangedEventArgs
  nameWithType: ActivityExecutionStatusChangedEventArgs
  fullName: System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs
- uid: System.Workflow.ComponentModel.CompensateActivity.TargetActivityName
  parent: System.Workflow.ComponentModel.CompensateActivity
  isExternal: false
  name: TargetActivityName
  nameWithType: CompensateActivity.TargetActivityName
  fullName: System.Workflow.ComponentModel.CompensateActivity.TargetActivityName
- uid: System.Workflow.ComponentModel.CompensateActivity.TargetActivityNameProperty
  parent: System.Workflow.ComponentModel.CompensateActivity
  isExternal: false
  name: TargetActivityNameProperty
  nameWithType: CompensateActivity.TargetActivityNameProperty
  fullName: System.Workflow.ComponentModel.CompensateActivity.TargetActivityNameProperty
- uid: System.Workflow.ComponentModel.DependencyProperty
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Workflow.ComponentModel.DependencyProperty
- uid: System.Workflow.ComponentModel.CompensateActivity.#ctor*
  parent: System.Workflow.ComponentModel.CompensateActivity
  isExternal: false
  name: CompensateActivity
  nameWithType: CompensateActivity.CompensateActivity
- uid: System.Workflow.ComponentModel.CompensateActivity.Execute*
  parent: System.Workflow.ComponentModel.CompensateActivity
  isExternal: false
  name: Execute
  nameWithType: CompensateActivity.Execute
- uid: System.Workflow.ComponentModel.CompensateActivity.Initialize*
  parent: System.Workflow.ComponentModel.CompensateActivity
  isExternal: false
  name: Initialize
  nameWithType: CompensateActivity.Initialize
- uid: System.Workflow.ComponentModel.CompensateActivity.System#Workflow#ComponentModel#IActivityEventListener<System#Workflow#ComponentModel#ActivityExecutionStatusChangedEventArgs>#OnEvent*
  parent: System.Workflow.ComponentModel.CompensateActivity
  isExternal: false
  name: System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent
  nameWithType: CompensateActivity.System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent
- uid: System.Workflow.ComponentModel.CompensateActivity.TargetActivityName*
  parent: System.Workflow.ComponentModel.CompensateActivity
  isExternal: false
  name: TargetActivityName
  nameWithType: CompensateActivity.TargetActivityName
