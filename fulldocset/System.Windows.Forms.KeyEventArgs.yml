### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.KeyEventArgs
  id: KeyEventArgs
  children:
  - System.Windows.Forms.KeyEventArgs.#ctor(System.Windows.Forms.Keys)
  - System.Windows.Forms.KeyEventArgs.Alt
  - System.Windows.Forms.KeyEventArgs.Control
  - System.Windows.Forms.KeyEventArgs.Handled
  - System.Windows.Forms.KeyEventArgs.KeyCode
  - System.Windows.Forms.KeyEventArgs.KeyData
  - System.Windows.Forms.KeyEventArgs.KeyValue
  - System.Windows.Forms.KeyEventArgs.Modifiers
  - System.Windows.Forms.KeyEventArgs.Shift
  - System.Windows.Forms.KeyEventArgs.SuppressKeyPress
  langs:
  - csharp
  name: KeyEventArgs
  nameWithType: KeyEventArgs
  fullName: System.Windows.Forms.KeyEventArgs
  type: Class
  summary: "提供資料給<xref href=&quot;System.Windows.Forms.Control.KeyDown&quot;></xref>或<xref href=&quot;System.Windows.Forms.Control.KeyUp&quot;></xref>事件。"
  remarks: "KeyEventArgs，與每個指定的索引鍵，使用者按下並按下任何輔助按鍵 （CTRL、 ALT 和 shift 鍵） 在相同的時間，是否要傳遞至<xref:System.Windows.Forms.Control.KeyDown>或<xref:System.Windows.Forms.Control.KeyUp>事件。</xref:System.Windows.Forms.Control.KeyUp> </xref:System.Windows.Forms.Control.KeyDown>       <xref:System.Windows.Forms.Control.KeyDown>事件發生於使用者按任意鍵。</xref:System.Windows.Forms.Control.KeyDown> <xref:System.Windows.Forms.Control.KeyUp>當使用者放開按鍵時，就會發生事件。</xref:System.Windows.Forms.Control.KeyUp> 重複的<xref:System.Windows.Forms.Control.KeyDown>如果按住按鍵，但只有一個事件會發生重複索引鍵，每次<xref:System.Windows.Forms.Control.KeyUp>當使用者放開按鍵時，就會產生事件。</xref:System.Windows.Forms.Control.KeyUp> </xref:System.Windows.Forms.Control.KeyDown>       <xref:System.Windows.Forms.Control.KeyPress>按下按鍵時，也會發生事件。</xref:System.Windows.Forms.Control.KeyPress> A<xref:System.Windows.Forms.KeyPressEventArgs>傳遞與每個<xref:System.Windows.Forms.Control.KeyPress>事件，並指定編曲因為每個按鍵的字元。</xref:System.Windows.Forms.Control.KeyPress> </xref:System.Windows.Forms.KeyPressEventArgs>       事件模型的相關資訊，請參閱[事件](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code examples demonstrate how to detect the state of a key press.  \n  \n **Example 1**  \n  \n The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.KeyDown> event with the <xref:System.Windows.Forms.Help> class to display pop-up style Help to the user of the application. The example uses the KeyEventArgs properties passed to the event handler method to filter for all variations of pressing the F1 key with a modifier key. When the user presses any variation of F1 that includes any keyboard modifier, the <xref:System.Windows.Forms.Help> class displays a pop-up window, similar to a <xref:System.Windows.Forms.ToolTip>, near the control. If the user presses ALT+F2, a different Help pop-up is displayed with additional information.  \n  \n [!code-cs[KeyEventArgs.Modifiers#1](~/add/codesnippet/csharp/t-system.windows.forms.k_4_1.cs)]\n [!code-cpp[KeyEventArgs.Modifiers#1](~/add/codesnippet/cpp/t-system.windows.forms.k_4_1.cpp)]\n [!code-vb[KeyEventArgs.Modifiers#1](~/add/codesnippet/visualbasic/t-system.windows.forms.k_4_1.vb)]  \n  \n **Example 2**  \n  \n The following example determines whether the user pressed ALT+E, and if the mouse pointer is over a <xref:System.Windows.Forms.TreeNode>, allows the user to edit that <xref:System.Windows.Forms.TreeNode>.  \n  \n [!code-cs[Windows.Forms.Control Members4#3](~/add/codesnippet/csharp/t-system.windows.forms.k_4_2.cs)]\n [!code-vb[Windows.Forms.Control Members4#3](~/add/codesnippet/visualbasic/t-system.windows.forms.k_4_2.vb)]\n [!code-cpp[Windows.Forms.Control Members4#3](~/add/codesnippet/cpp/t-system.windows.forms.k_4_2.cpp)]  \n  \n **Example 3**  \n  \n The following example determines whether the user pressed a non-numeric key, and if so, cancels the <xref:System.Windows.Forms.Control.KeyPress> event by using the <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> property.  \n  \n [!code-vb[Control.KeyDown#1](~/add/codesnippet/visualbasic/t-system.windows.forms.k_4_3.vb)]\n [!code-cpp[Control.KeyDown#1](~/add/codesnippet/cpp/t-system.windows.forms.k_4_3.cpp)]\n [!code-cs[Control.KeyDown#1](~/add/codesnippet/csharp/t-system.windows.forms.k_4_3.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class KeyEventArgs : EventArgs
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Forms.KeyEventArgs.#ctor(System.Windows.Forms.Keys)
  id: '#ctor(System.Windows.Forms.Keys)'
  parent: System.Windows.Forms.KeyEventArgs
  langs:
  - csharp
  name: KeyEventArgs(Keys)
  nameWithType: KeyEventArgs.KeyEventArgs(Keys)
  fullName: System.Windows.Forms.KeyEventArgs.KeyEventArgs(Keys)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "初始化的新執行個體<xref href=&quot;System.Windows.Forms.KeyEventArgs&quot;></xref>類別。"
  syntax:
    content: public KeyEventArgs (System.Windows.Forms.Keys keyData);
    parameters:
    - id: keyData
      type: System.Windows.Forms.Keys
      description: "A <xref href=&quot;System.Windows.Forms.Keys&quot;> </xref>表示已按下按鍵結合任何修飾詞旗標，表示同時按下的 CTRL、 SHIFT 和 ALT 鍵。 可能的值取得要套用的位元 OR (|) 運算子，從常數<xref href=&quot;System.Windows.Forms.Keys&quot;></xref>列舉型別。"
  overload: System.Windows.Forms.KeyEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.KeyEventArgs.Alt
  id: Alt
  parent: System.Windows.Forms.KeyEventArgs
  langs:
  - csharp
  name: Alt
  nameWithType: KeyEventArgs.Alt
  fullName: System.Windows.Forms.KeyEventArgs.Alt
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得值，指出是否按下 ALT 鍵。"
  remarks: ''
  example:
  - "**Example 1**  \n  \n The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.KeyDown> event with the <xref:System.Windows.Forms.Help> class to display pop-up style Help to the user of the application. The example uses the <xref:System.Windows.Forms.KeyEventArgs> properties passed to the event handler method to filter for all variations of pressing the F1 key with a modifier key. When the user presses any variation of F1 that includes any keyboard modifier, the <xref:System.Windows.Forms.Help> class displays a pop-up window, similar to a <xref:System.Windows.Forms.ToolTip>, near the control. If the user presses ALT+F2, a different Help pop-up is displayed with additional information.  \n  \n [!code-cs[KeyEventArgs.Modifiers#1](~/add/codesnippet/csharp/p-system.windows.forms.k_1_1.cs)]\n [!code-cpp[KeyEventArgs.Modifiers#1](~/add/codesnippet/cpp/p-system.windows.forms.k_1_1.cpp)]\n [!code-vb[KeyEventArgs.Modifiers#1](~/add/codesnippet/visualbasic/p-system.windows.forms.k_1_1.vb)]  \n  \n **Example 2**  \n  \n The following example determines whether the user pressed ALT+E, and if the mouse pointer is over <xref:System.Windows.Forms.TreeNode>, allows the user to edit that <xref:System.Windows.Forms.TreeNode>.  \n  \n [!code-cs[Windows.Forms.Control Members4#3](~/add/codesnippet/csharp/p-system.windows.forms.k_1_2.cs)]\n [!code-vb[Windows.Forms.Control Members4#3](~/add/codesnippet/visualbasic/p-system.windows.forms.k_1_2.vb)]\n [!code-cpp[Windows.Forms.Control Members4#3](~/add/codesnippet/cpp/p-system.windows.forms.k_1_2.cpp)]"
  syntax:
    content: public virtual bool Alt { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已按下 ALT 鍵。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.KeyEventArgs.Alt*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.KeyEventArgs.Control
  id: Control
  parent: System.Windows.Forms.KeyEventArgs
  langs:
  - csharp
  name: Control
  nameWithType: KeyEventArgs.Control
  fullName: System.Windows.Forms.KeyEventArgs.Control
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得值，指出是否按下 CTRL 鍵。"
  remarks: ''
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.KeyDown> event with the <xref:System.Windows.Forms.Help> class to display pop-up style Help to the user of the application. The example uses the <xref:System.Windows.Forms.KeyEventArgs> properties passed to the event handler method to filter for all variations of pressing the F1 key with a modifier key. When the user presses any variation of F1 that includes any keyboard modifier, the <xref:System.Windows.Forms.Help> class displays a pop-up window, similar to a <xref:System.Windows.Forms.ToolTip>, near the control. If the user presses ALT+F2, a different Help pop-up is displayed with additional information.  \n  \n [!code-cs[KeyEventArgs.Modifiers#1](~/add/codesnippet/csharp/p-system.windows.forms.k_5_1.cs)]\n [!code-cpp[KeyEventArgs.Modifiers#1](~/add/codesnippet/cpp/p-system.windows.forms.k_5_1.cpp)]\n [!code-vb[KeyEventArgs.Modifiers#1](~/add/codesnippet/visualbasic/p-system.windows.forms.k_5_1.vb)]"
  syntax:
    content: public bool Control { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果按下 CTRL 鍵。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.KeyEventArgs.Control*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.KeyEventArgs.Handled
  id: Handled
  parent: System.Windows.Forms.KeyEventArgs
  langs:
  - csharp
  name: Handled
  nameWithType: KeyEventArgs.Handled
  fullName: System.Windows.Forms.KeyEventArgs.Handled
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得或設定值，指出是否已處理的事件。"
  remarks: "處理由 Windows Form 中的不同控制項以不同的方式實作。 針對類似控制項<xref:System.Windows.Forms.TextBox>的子類別原生 Win32 控制，它會解譯成表示索引鍵的訊息不會傳遞至基礎原生控制項。</xref:System.Windows.Forms.TextBox> 如果您設定`Handled`設為 true，在<xref:System.Windows.Forms.TextBox>，控制項會轉移未按下按鍵`events`基礎 Win32 文字方塊控制項，但它仍會顯示使用者輸入的字元。</xref:System.Windows.Forms.TextBox>       如果您想要防止目前控制項接收按鍵，使用<xref:System.Windows.Forms.KeyEventArgs.SuppressKeyPress%2A>屬性。</xref:System.Windows.Forms.KeyEventArgs.SuppressKeyPress%2A>"
  example:
  - "The following example determines whether the user pressed a non-numeric key, and if so, cancels the <xref:System.Windows.Forms.Control.KeyPress> event by using the Handled property.  \n  \n [!code-vb[Control.KeyDown#1](~/add/codesnippet/visualbasic/p-system.windows.forms.k_3_1.vb)]\n [!code-cpp[Control.KeyDown#1](~/add/codesnippet/cpp/p-system.windows.forms.k_3_1.cpp)]\n [!code-cs[Control.KeyDown#1](~/add/codesnippet/csharp/p-system.windows.forms.k_3_1.cs)]"
  syntax:
    content: public bool Handled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>略過此控制項的預設處理;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>到也將沿著事件傳遞給預設控制處理常式。"
  overload: System.Windows.Forms.KeyEventArgs.Handled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.KeyEventArgs.KeyCode
  id: KeyCode
  parent: System.Windows.Forms.KeyEventArgs
  langs:
  - csharp
  name: KeyCode
  nameWithType: KeyEventArgs.KeyCode
  fullName: System.Windows.Forms.KeyEventArgs.KeyCode
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得鍵盤碼<xref href=&quot;System.Windows.Forms.Control.KeyDown&quot;></xref>或<xref href=&quot;System.Windows.Forms.Control.KeyUp&quot;></xref>事件。"
  remarks: ''
  example:
  - "The following code examples show how to use the KeyCode property to determine which key was pressed.  \n  \n **Example 1**  \n  \n The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.KeyDown> event with the <xref:System.Windows.Forms.Help> class to display pop-up style Help to the user of the application. The example uses the <xref:System.Windows.Forms.KeyEventArgs> properties passed to the event handler method to filter for all variations of pressing the F1 key with a modifier key. When the user presses any variation of F1 that includes any keyboard modifier, the <xref:System.Windows.Forms.Help> class displays a pop-up window, similar to a <xref:System.Windows.Forms.ToolTip>, near the control. If the user presses ALT+F2, a different Help pop-up is displayed with additional information.  \n  \n [!code-cs[KeyEventArgs.Modifiers#1](~/add/codesnippet/csharp/p-system.windows.forms.k_6_1.cs)]\n [!code-cpp[KeyEventArgs.Modifiers#1](~/add/codesnippet/cpp/p-system.windows.forms.k_6_1.cpp)]\n [!code-vb[KeyEventArgs.Modifiers#1](~/add/codesnippet/visualbasic/p-system.windows.forms.k_6_1.vb)]  \n  \n **Example 2**  \n  \n The following example determines whether the user pressed ALT+E, and if the mouse pointer is over a <xref:System.Windows.Forms.TreeNode>, allows the user to edit that <xref:System.Windows.Forms.TreeNode>.  \n  \n [!code-cs[Windows.Forms.Control Members4#3](~/add/codesnippet/csharp/p-system.windows.forms.k_6_2.cs)]\n [!code-vb[Windows.Forms.Control Members4#3](~/add/codesnippet/visualbasic/p-system.windows.forms.k_6_2.vb)]\n [!code-cpp[Windows.Forms.Control Members4#3](~/add/codesnippet/cpp/p-system.windows.forms.k_6_2.cpp)]  \n  \n **Example 3**  \n  \n The following example determines whether the user pressed a non-numeric key, and if so, cancels the <xref:System.Windows.Forms.Control.KeyPress> event by using the <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> property.  \n  \n [!code-vb[Control.KeyDown#1](~/add/codesnippet/visualbasic/p-system.windows.forms.k_6_3.vb)]\n [!code-cpp[Control.KeyDown#1](~/add/codesnippet/cpp/p-system.windows.forms.k_6_3.cpp)]\n [!code-cs[Control.KeyDown#1](~/add/codesnippet/csharp/p-system.windows.forms.k_6_3.cs)]"
  syntax:
    content: public System.Windows.Forms.Keys KeyCode { get; }
    return:
      type: System.Windows.Forms.Keys
      description: "A <xref href=&quot;System.Windows.Forms.Keys&quot;> </xref>是事件的按鍵碼的值。"
  overload: System.Windows.Forms.KeyEventArgs.KeyCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.KeyEventArgs.KeyData
  id: KeyData
  parent: System.Windows.Forms.KeyEventArgs
  langs:
  - csharp
  name: KeyData
  nameWithType: KeyEventArgs.KeyData
  fullName: System.Windows.Forms.KeyEventArgs.KeyData
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得索引鍵資料<xref href=&quot;System.Windows.Forms.Control.KeyDown&quot;></xref>或<xref href=&quot;System.Windows.Forms.Control.KeyUp&quot;></xref>事件。"
  remarks: "您可以使用常數<xref:System.Windows.Forms.Keys>KeyData 屬性中擷取資訊。</xref:System.Windows.Forms.Keys> 使用位元 AND 運算子來比較資料傳回含有常數的 KeyData<xref:System.Windows.Forms.Keys>取得使用者所按的機碼的相關資訊。</xref:System.Windows.Forms.Keys> 若要判斷是否已按特定的修飾詞鍵，請使用<xref:System.Windows.Forms.KeyEventArgs.Control%2A>， <xref:System.Windows.Forms.KeyEventArgs.Shift%2A>，和<xref:System.Windows.Forms.KeyEventArgs.Alt%2A>屬性。</xref:System.Windows.Forms.KeyEventArgs.Alt%2A> </xref:System.Windows.Forms.KeyEventArgs.Shift%2A> </xref:System.Windows.Forms.KeyEventArgs.Control%2A>"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.KeyDown?displayProperty=fullName> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.KeyDown?displayProperty=fullName> event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#48](~/add/codesnippet/csharp/p-system.windows.forms.k_0_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#48](~/add/codesnippet/visualbasic/p-system.windows.forms.k_0_1.vb)]"
  syntax:
    content: public System.Windows.Forms.Keys KeyData { get; }
    return:
      type: System.Windows.Forms.Keys
      description: "A <xref href=&quot;System.Windows.Forms.Keys&quot;> </xref>代表索引鍵已按下的按鍵碼結合的修飾詞旗標，表示同時按下 CTRL、 SHIFT 和 alt 鍵的按鍵的組合。"
  overload: System.Windows.Forms.KeyEventArgs.KeyData*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.KeyEventArgs.KeyValue
  id: KeyValue
  parent: System.Windows.Forms.KeyEventArgs
  langs:
  - csharp
  name: KeyValue
  nameWithType: KeyEventArgs.KeyValue
  fullName: System.Windows.Forms.KeyEventArgs.KeyValue
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得鍵盤值<xref href=&quot;System.Windows.Forms.Control.KeyDown&quot;></xref>或<xref href=&quot;System.Windows.Forms.Control.KeyUp&quot;></xref>事件。"
  remarks: ''
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.KeyDown?displayProperty=fullName> event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>. Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.KeyDown?displayProperty=fullName> event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#48](~/add/codesnippet/csharp/p-system.windows.forms.k_10_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#48](~/add/codesnippet/visualbasic/p-system.windows.forms.k_10_1.vb)]"
  syntax:
    content: public int KeyValue { get; }
    return:
      type: System.Int32
      description: "整數表示<xref:System.Windows.Forms.KeyEventArgs.KeyCode*>屬性。</xref:System.Windows.Forms.KeyEventArgs.KeyCode*>"
  overload: System.Windows.Forms.KeyEventArgs.KeyValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.KeyEventArgs.Modifiers
  id: Modifiers
  parent: System.Windows.Forms.KeyEventArgs
  langs:
  - csharp
  name: Modifiers
  nameWithType: KeyEventArgs.Modifiers
  fullName: System.Windows.Forms.KeyEventArgs.Modifiers
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得的旗標修飾詞<xref href=&quot;System.Windows.Forms.Control.KeyDown&quot;></xref>或<xref href=&quot;System.Windows.Forms.Control.KeyUp&quot;></xref>事件。 旗標會指出已按下 CTRL、 SHIFT 和 alt 鍵的按鍵的組合。"
  remarks: "若要判斷是否已按特定的修飾詞鍵，請使用<xref:System.Windows.Forms.KeyEventArgs.Control%2A>， <xref:System.Windows.Forms.KeyEventArgs.Shift%2A>，和<xref:System.Windows.Forms.KeyEventArgs.Alt%2A>屬性。</xref:System.Windows.Forms.KeyEventArgs.Alt%2A> </xref:System.Windows.Forms.KeyEventArgs.Shift%2A> </xref:System.Windows.Forms.KeyEventArgs.Control%2A> 可以與結合修飾詞旗標位元 OR。"
  example:
  - "The following code example shows how to use the Modifiers property to determine which modifier keys were pressed along with the primary key.  \n  \n [!code-cs[KeyEventArgs.Modifiers#1](~/add/codesnippet/csharp/p-system.windows.forms.k_7_1.cs)]\n [!code-cpp[KeyEventArgs.Modifiers#1](~/add/codesnippet/cpp/p-system.windows.forms.k_7_1.cpp)]\n [!code-vb[KeyEventArgs.Modifiers#1](~/add/codesnippet/visualbasic/p-system.windows.forms.k_7_1.vb)]"
  syntax:
    content: public System.Windows.Forms.Keys Modifiers { get; }
    return:
      type: System.Windows.Forms.Keys
      description: "A <xref href=&quot;System.Windows.Forms.Keys&quot;> </xref>代表一或多個修飾詞旗標值。"
  overload: System.Windows.Forms.KeyEventArgs.Modifiers*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.KeyEventArgs.Shift
  id: Shift
  parent: System.Windows.Forms.KeyEventArgs
  langs:
  - csharp
  name: Shift
  nameWithType: KeyEventArgs.Shift
  fullName: System.Windows.Forms.KeyEventArgs.Shift
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得值，指出是否按下 SHIFT 鍵。"
  remarks: ''
  example:
  - "The following example determines whether the user pressed the Shift key with the F1 key, and if so, displays help.  \n  \n [!code-cs[KeyEventArgs.Modifiers#1](~/add/codesnippet/csharp/p-system.windows.forms.k_8_1.cs)]\n [!code-cpp[KeyEventArgs.Modifiers#1](~/add/codesnippet/cpp/p-system.windows.forms.k_8_1.cpp)]\n [!code-vb[KeyEventArgs.Modifiers#1](~/add/codesnippet/visualbasic/p-system.windows.forms.k_8_1.vb)]"
  syntax:
    content: public virtual bool Shift { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果按下 SHIFT 鍵;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.KeyEventArgs.Shift*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.KeyEventArgs.SuppressKeyPress
  id: SuppressKeyPress
  parent: System.Windows.Forms.KeyEventArgs
  langs:
  - csharp
  name: SuppressKeyPress
  nameWithType: KeyEventArgs.SuppressKeyPress
  fullName: System.Windows.Forms.KeyEventArgs.SuppressKeyPress
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得或設定值，指出是否按鍵事件應該傳遞至基礎控制項。"
  remarks: "您可以指派`true`給這個屬性，例如事件處理常式中<xref:System.Windows.Forms.Control.KeyDown>以避免使用者輸入。</xref:System.Windows.Forms.Control.KeyDown>       若要設定 SuppressKeyPress`true`也會設定<xref:System.Windows.Forms.KeyEventArgs.Handled%2A>至`true`。</xref:System.Windows.Forms.KeyEventArgs.Handled%2A>"
  example:
  - "The following code example prevents numeric keystrokes from reaching the <xref:System.Windows.Forms.TextBox> control named `textBox1`.  \n  \n [!code-cs[KeyEventArgs.SuppressKeyPress#1](~/add/codesnippet/csharp/p-system.windows.forms.k_9_1.cs)]\n [!code-vb[KeyEventArgs.SuppressKeyPress#1](~/add/codesnippet/visualbasic/p-system.windows.forms.k_9_1.vb)]"
  syntax:
    content: public bool SuppressKeyPress { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果按鍵事件不應傳送至控制項，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.KeyEventArgs.SuppressKeyPress*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.Windows.Forms.KeyEventArgs.#ctor(System.Windows.Forms.Keys)
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: KeyEventArgs(Keys)
  nameWithType: KeyEventArgs.KeyEventArgs(Keys)
  fullName: System.Windows.Forms.KeyEventArgs.KeyEventArgs(Keys)
- uid: System.Windows.Forms.Keys
  parent: System.Windows.Forms
  isExternal: false
  name: Keys
  nameWithType: Keys
  fullName: System.Windows.Forms.Keys
- uid: System.Windows.Forms.KeyEventArgs.Alt
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: Alt
  nameWithType: KeyEventArgs.Alt
  fullName: System.Windows.Forms.KeyEventArgs.Alt
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.KeyEventArgs.Control
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: Control
  nameWithType: KeyEventArgs.Control
  fullName: System.Windows.Forms.KeyEventArgs.Control
- uid: System.Windows.Forms.KeyEventArgs.Handled
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: Handled
  nameWithType: KeyEventArgs.Handled
  fullName: System.Windows.Forms.KeyEventArgs.Handled
- uid: System.Windows.Forms.KeyEventArgs.KeyCode
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: KeyCode
  nameWithType: KeyEventArgs.KeyCode
  fullName: System.Windows.Forms.KeyEventArgs.KeyCode
- uid: System.Windows.Forms.KeyEventArgs.KeyData
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: KeyData
  nameWithType: KeyEventArgs.KeyData
  fullName: System.Windows.Forms.KeyEventArgs.KeyData
- uid: System.Windows.Forms.KeyEventArgs.KeyValue
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: KeyValue
  nameWithType: KeyEventArgs.KeyValue
  fullName: System.Windows.Forms.KeyEventArgs.KeyValue
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.KeyEventArgs.Modifiers
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: Modifiers
  nameWithType: KeyEventArgs.Modifiers
  fullName: System.Windows.Forms.KeyEventArgs.Modifiers
- uid: System.Windows.Forms.KeyEventArgs.Shift
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: Shift
  nameWithType: KeyEventArgs.Shift
  fullName: System.Windows.Forms.KeyEventArgs.Shift
- uid: System.Windows.Forms.KeyEventArgs.SuppressKeyPress
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: SuppressKeyPress
  nameWithType: KeyEventArgs.SuppressKeyPress
  fullName: System.Windows.Forms.KeyEventArgs.SuppressKeyPress
- uid: System.Windows.Forms.KeyEventArgs.#ctor*
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: KeyEventArgs
  nameWithType: KeyEventArgs.KeyEventArgs
- uid: System.Windows.Forms.KeyEventArgs.Alt*
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: Alt
  nameWithType: KeyEventArgs.Alt
- uid: System.Windows.Forms.KeyEventArgs.Control*
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: Control
  nameWithType: KeyEventArgs.Control
- uid: System.Windows.Forms.KeyEventArgs.Handled*
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: Handled
  nameWithType: KeyEventArgs.Handled
- uid: System.Windows.Forms.KeyEventArgs.KeyCode*
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: KeyCode
  nameWithType: KeyEventArgs.KeyCode
- uid: System.Windows.Forms.KeyEventArgs.KeyData*
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: KeyData
  nameWithType: KeyEventArgs.KeyData
- uid: System.Windows.Forms.KeyEventArgs.KeyValue*
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: KeyValue
  nameWithType: KeyEventArgs.KeyValue
- uid: System.Windows.Forms.KeyEventArgs.Modifiers*
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: Modifiers
  nameWithType: KeyEventArgs.Modifiers
- uid: System.Windows.Forms.KeyEventArgs.Shift*
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: Shift
  nameWithType: KeyEventArgs.Shift
- uid: System.Windows.Forms.KeyEventArgs.SuppressKeyPress*
  parent: System.Windows.Forms.KeyEventArgs
  isExternal: false
  name: SuppressKeyPress
  nameWithType: KeyEventArgs.SuppressKeyPress
