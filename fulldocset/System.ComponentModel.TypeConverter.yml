### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.TypeConverter
  id: TypeConverter
  children:
  - System.ComponentModel.TypeConverter.#ctor
  - System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)
  - System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  - System.ComponentModel.TypeConverter.CanConvertTo(System.Type)
  - System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  - System.ComponentModel.TypeConverter.ConvertFrom(System.Object)
  - System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)
  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  - System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)
  - System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)
  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  - System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
  - System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  - System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)
  - System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)
  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported
  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetProperties(System.Object)
  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  - System.ComponentModel.TypeConverter.GetPropertiesSupported
  - System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetStandardValues
  - System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetStandardValuesExclusive
  - System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetStandardValuesSupported
  - System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.IsValid(System.Object)
  - System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  langs:
  - csharp
  name: TypeConverter
  nameWithType: TypeConverter
  fullName: System.ComponentModel.TypeConverter
  type: Class
  summary: "提供統一的方式，將類型的值轉換為其他類型，以及用於存取標準值和子屬性。"
  remarks: "最常見類型是轉換器的轉換和文字表示。 類別的類型轉換器會繫結至具有<xref:System.ComponentModel.TypeConverterAttribute>.</xref:System.ComponentModel.TypeConverterAttribute>類別 除非遭到覆寫這個屬性，繼承自這個類別的所有類別會都使用相同的型別轉換子的基底類別。      > [!NOTE] > 用於一般類型系統的用途，不會存取型別轉換子直接。 相反地，使用<xref:System.ComponentModel.TypeDescriptor>.</xref:System.ComponentModel.TypeDescriptor>存取適當的轉換程式 如需詳細資訊，請參閱提供的程式碼範例。       **請注意**基於 XAML，XAML 處理器會搜尋<xref:System.ComponentModel.TypeConverterAttribute>直接管理，而不是經過<xref:System.ComponentModel.TypeDescriptor>.</xref:System.ComponentModel.TypeDescriptor> </xref:System.ComponentModel.TypeConverterAttribute> 您希望的情況下<xref:System.ComponentModel.TypeDescriptor>從程式碼中，執行個體，或是讓您建立的共用執行個體在 WPF 中資源，是可接受的建構直接不需參考<xref:System.ComponentModel.TypeDescriptor>或其他支援的反映和型別系統。</xref:System.ComponentModel.TypeDescriptor> </xref:System.ComponentModel.TypeDescriptor>       衍生自 TypeConverter 類別通常會被參照 XAML 處理器如何將屬性或初始化文字值轉換從標記 （這是原本就是字串） 的一部分，並產生執行階段表示的物件。 自訂型別作者想要的 XAML 支援類型轉換行為，通常會實作支援自己唯一的 TypeConverter 類別`ConvertFrom`從字串的行為。 此行為可讓從提供做為 XAML 屬性值的字串類型轉換，並提供 XAML 處理器，讓物件可以產生已剖析的物件圖形中，從字串建立物件所需的支援。 自訂型別或成員的自訂型別以套用<xref:System.ComponentModel.TypeConverterAttribute>定義，具有屬性參考自訂 TypeConverter 實作。</xref:System.ComponentModel.TypeConverterAttribute> 如需詳細資訊，請參閱[類型轉換器 XAML 概觀](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example shows how to create an instance of a type converter and bind it to a class. The class implementing the converter, `MyClassConverter`, must inherit from the TypeConverter class.  \n  \n [!code-cpp[Classic TypeConverter Example#1](~/add/codesnippet/cpp/t-system.componentmodel._43_1.cpp)]\n [!code-cs[Classic TypeConverter Example#1](~/add/codesnippet/csharp/t-system.componentmodel._43_1.cs)]\n [!code-vb[Classic TypeConverter Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._43_1.vb)]  \n  \n When you have a property that has an enumeration, check to see whether an enumeration value is valid before setting the property. The next code example requires that an enumeration called `MyPropertyEnum` has been declared.  \n  \n [!code-cpp[Classic TypeConverter Example#2](~/add/codesnippet/cpp/t-system.componentmodel._43_2.cpp)]\n [!code-cs[Classic TypeConverter Example#2](~/add/codesnippet/csharp/t-system.componentmodel._43_2.cs)]\n [!code-vb[Classic TypeConverter Example#2](~/add/codesnippet/visualbasic/t-system.componentmodel._43_2.vb)]  \n  \n Another common type converter usage is to convert an object to a string. The following code example prints out the name of the <xref:System.Drawing.Color> stored in the variable `c`.  \n  \n [!code-cpp[Classic TypeConverter Example#3](~/add/codesnippet/cpp/t-system.componentmodel._43_3.cpp)]\n [!code-cs[Classic TypeConverter Example#3](~/add/codesnippet/csharp/t-system.componentmodel._43_3.cs)]\n [!code-vb[Classic TypeConverter Example#3](~/add/codesnippet/visualbasic/t-system.componentmodel._43_3.vb)]  \n  \n You can also use a type converter to convert a value from its name, as shown in the next code example.  \n  \n [!code-cpp[Classic TypeConverter Example#4](~/add/codesnippet/cpp/t-system.componentmodel._43_4.cpp)]\n [!code-cs[Classic TypeConverter Example#4](~/add/codesnippet/csharp/t-system.componentmodel._43_4.cs)]\n [!code-vb[Classic TypeConverter Example#4](~/add/codesnippet/visualbasic/t-system.componentmodel._43_4.vb)]  \n  \n In the following code example, you can use a type converter to print out the set of standard values that the object supports.  \n  \n [!code-cpp[Classic TypeConverter Example#5](~/add/codesnippet/cpp/t-system.componentmodel._43_5.cpp)]\n [!code-cs[Classic TypeConverter Example#5](~/add/codesnippet/csharp/t-system.componentmodel._43_5.cs)]\n [!code-vb[Classic TypeConverter Example#5](~/add/codesnippet/visualbasic/t-system.componentmodel._43_5.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class TypeConverter
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.#ctor
  id: '#ctor'
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: TypeConverter()
  nameWithType: TypeConverter.TypeConverter()
  fullName: System.ComponentModel.TypeConverter.TypeConverter()
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "初始化的新執行個體<xref href=&quot;System.ComponentModel.TypeConverter&quot;></xref>類別。"
  syntax:
    content: public TypeConverter ();
    parameters: []
  overload: System.ComponentModel.TypeConverter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)
  id: CanConvertFrom(System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: CanConvertFrom(Type)
  nameWithType: TypeConverter.CanConvertFrom(Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertFrom(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "傳回這個轉換子是否可以將給定型別的物件轉換成這個轉換子的型別。"
  remarks: "在這個類別中實作時，這個方法一律會傳回`false`。 永遠不會傳回`true`。"
  syntax:
    content: public bool CanConvertFrom (Type sourceType);
    parameters:
    - id: sourceType
      type: System.Type
      description: "A<xref:System.Type>代表您想要從轉換的類型。</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個轉換子可以執行轉換，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.TypeConverter.CanConvertFrom*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  id: CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: CanConvertFrom(ITypeDescriptorContext,Type)
  nameWithType: TypeConverter.CanConvertFrom(ITypeDescriptorContext,Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertFrom(ITypeDescriptorContext,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "傳回這個轉換器是否可以轉換成這個轉換子，並使用指定的內容類型的給定類型的物件。"
  remarks: "在這個類別中實作時，這個方法會傳回`false`，除非`sourceType`為<xref:System.ComponentModel.Design.Serialization.InstanceDescriptor>。</xref:System.ComponentModel.Design.Serialization.InstanceDescriptor>"
  syntax:
    content: public virtual bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext context, Type sourceType);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> ，提供格式內容。"
    - id: sourceType
      type: System.Type
      description: "A<xref:System.Type>代表您想要從轉換的類型。</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個轉換子可以執行轉換，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.TypeConverter.CanConvertFrom*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.CanConvertTo(System.Type)
  id: CanConvertTo(System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: CanConvertTo(Type)
  nameWithType: TypeConverter.CanConvertTo(Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertTo(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "傳回這個轉換子是否可以將物件轉換成指定的類型。"
  remarks: "如果`destinationType`是一個字串的預設實作<xref:System.ComponentModel.TypeConverter.CanConvertTo%2A>一律會傳回`true`。</xref:System.ComponentModel.TypeConverter.CanConvertTo%2A>"
  syntax:
    content: public bool CanConvertTo (Type destinationType);
    parameters:
    - id: destinationType
      type: System.Type
      description: "A<xref:System.Type>表示您想要轉換成的型別。</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個轉換子可以執行轉換，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.TypeConverter.CanConvertTo*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  id: CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: CanConvertTo(ITypeDescriptorContext,Type)
  nameWithType: TypeConverter.CanConvertTo(ITypeDescriptorContext,Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertTo(ITypeDescriptorContext,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "傳回這個轉換子是否可以將物件轉換為指定的型別，並使用指定的內容。"
  remarks: "使用`context`參數可以用於擷取的環境從中叫用這個轉換子的其他資訊。 這個參數可以是`null`，所以一定要檢查。 此外，物件上的屬性可能會傳回`null`。       如果`destinationType`是一個字串的預設實作<xref:System.ComponentModel.TypeConverter.CanConvertTo%2A>一律會傳回`true`。</xref:System.ComponentModel.TypeConverter.CanConvertTo%2A>"
  syntax:
    content: public virtual bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> ，提供格式內容。"
    - id: destinationType
      type: System.Type
      description: "A<xref:System.Type>表示您想要轉換成的型別。</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果這個轉換子可以執行轉換，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.TypeConverter.CanConvertTo*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertFrom(System.Object)
  id: ConvertFrom(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertFrom(Object)
  nameWithType: TypeConverter.ConvertFrom(Object)
  fullName: System.ComponentModel.TypeConverter.ConvertFrom(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "將指定的值轉換成這個轉換子的類型。"
  syntax:
    content: public object ConvertFrom (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>轉換。</xref:System.Object>"
    return:
      type: System.Object
      description: "<xref:System.Object>表示已轉換的值。</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertFrom*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "無法執行轉換。"
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  id: ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
  nameWithType: TypeConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
  fullName: System.ComponentModel.TypeConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "將指定的物件轉換成這個轉換子，並使用指定的內容和文化特性資訊的類型。"
  remarks: "自訂型別作者想要的 XAML 支援類型轉換行為，通常會實作<xref:System.ComponentModel.TypeConverter>支援 ConvertFrom 字串行為的類別。</xref:System.ComponentModel.TypeConverter> 此行為可讓從提供做為 XAML 屬性值的字串類型轉換，並提供 XAML 處理器，讓物件可以產生已剖析的物件圖形中，從字串建立物件所需的支援。 自訂型別或成員的自訂型別以套用<xref:System.ComponentModel.TypeConverterAttribute>定義，具有屬性參考自訂<xref:System.ComponentModel.TypeConverter>實作。</xref:System.ComponentModel.TypeConverter> </xref:System.ComponentModel.TypeConverterAttribute>       基於 XAML，您不通常提供分支實作根據`culture`。 這是因為在開發環境內容中，先行編譯的 XAML 時，執行階段的特定文化特性資訊 XAML 無關 XAML 類型轉換。 如需詳細資訊，請參閱[類型轉換器 XAML 概觀](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public virtual object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> ，提供格式內容。"
    - id: culture
      type: System.Globalization.CultureInfo
      description: "<xref:System.Globalization.CultureInfo>要做為目前的文化特性。</xref:System.Globalization.CultureInfo>"
    - id: value
      type: System.Object
      description: "<xref:System.Object>轉換。</xref:System.Object>"
    return:
      type: System.Object
      description: "<xref:System.Object>表示已轉換的值。</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertFrom*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "無法執行轉換。"
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)
  id: ConvertFromInvariantString(System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertFromInvariantString(String)
  nameWithType: TypeConverter.ConvertFromInvariantString(String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString(String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "將指定的字串轉換成這個轉換子，並使用文化特性而異的類型。"
  remarks: "預設實作一定會傳回`null`。"
  syntax:
    content: public object ConvertFromInvariantString (string text);
    parameters:
    - id: text
      type: System.String
      description: "<xref:System.String>轉換。</xref:System.String>"
    return:
      type: System.Object
      description: "<xref:System.Object>表示已轉換的文字。</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertFromInvariantString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "無法執行轉換。"
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  id: ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertFromInvariantString(ITypeDescriptorContext,String)
  nameWithType: TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext,String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext,String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "將指定的字串轉換成這個轉換子，而異的文化特性和指定的內容使用的類型。"
  remarks: "如果字串無法轉換為適當的物件，會引發例外狀況。 預設實作一定會傳回`null`。       使用`context`參數可以用於擷取的環境從中叫用這個轉換子的其他資訊。 這個參數可以是`null`，所以一定要檢查。 此外，物件上的屬性可能會傳回`null`。"
  syntax:
    content: public object ConvertFromInvariantString (System.ComponentModel.ITypeDescriptorContext context, string text);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> ，提供格式內容。"
    - id: text
      type: System.String
      description: "<xref:System.String>轉換。</xref:System.String>"
    return:
      type: System.Object
      description: "<xref:System.Object>表示已轉換的文字。</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertFromInvariantString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "無法執行轉換。"
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.String)
  id: ConvertFromString(System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertFromString(String)
  nameWithType: TypeConverter.ConvertFromString(String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromString(String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "將指定的文字轉換成物件。"
  remarks: "預設實作一定會傳回`null`。"
  example:
  - For an example of this function, see the <xref:System.ComponentModel.TypeConverter> class.
  syntax:
    content: public object ConvertFromString (string text);
    parameters:
    - id: text
      type: System.String
      description: "要轉換之物件的文字表示。"
    return:
      type: System.Object
      description: "<xref:System.Object>表示已轉換的文字。</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertFromString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "字串無法轉換為適當的物件。"
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  id: ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertFromString(ITypeDescriptorContext,String)
  nameWithType: TypeConverter.ConvertFromString(ITypeDescriptorContext,String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromString(ITypeDescriptorContext,String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "將指定的文字轉換成物件，使用指定的內容。"
  remarks: "如果字串無法轉換為適當的物件，會引發例外狀況。 預設實作一定會傳回`null`。       使用`context`參數可以用於擷取的環境從中叫用這個轉換子的其他資訊。 這個參數可以是`null`，所以一定要檢查。 此外，物件上的屬性可能會傳回`null`。"
  syntax:
    content: public object ConvertFromString (System.ComponentModel.ITypeDescriptorContext context, string text);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> ，提供格式內容。"
    - id: text
      type: System.String
      description: "<xref:System.String>轉換。</xref:System.String>"
    return:
      type: System.Object
      description: "<xref:System.Object>表示已轉換的文字。</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertFromString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "無法執行轉換。"
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  id: ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertFromString(ITypeDescriptorContext,CultureInfo,String)
  nameWithType: TypeConverter.ConvertFromString(ITypeDescriptorContext,CultureInfo,String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromString(ITypeDescriptorContext,CultureInfo,String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "將指定的文字轉換成物件，使用指定的內容和文化特性資訊。"
  remarks: "如果字串無法轉換為適當的物件，會引發例外狀況。 預設實作一定會傳回`null`。       使用`context`參數可以用於擷取的環境從中叫用這個轉換子的其他資訊。 這個參數可以是`null`，所以一定要檢查。 此外，物件上的屬性可能會傳回`null`。"
  syntax:
    content: public object ConvertFromString (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, string text);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> ，提供格式內容。"
    - id: culture
      type: System.Globalization.CultureInfo
      description: "A <xref:System.Globalization.CultureInfo>.</xref:System.Globalization.CultureInfo> 如果<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>傳遞，則目前會假設文化特性。"
    - id: text
      type: System.String
      description: "<xref:System.String>轉換。</xref:System.String>"
    return:
      type: System.Object
      description: "<xref:System.Object>表示已轉換的文字。</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertFromString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "無法執行轉換。"
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)
  id: ConvertTo(System.Object,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertTo(Object,Type)
  nameWithType: TypeConverter.ConvertTo(Object,Type)
  fullName: System.ComponentModel.TypeConverter.ConvertTo(Object,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "將指定的值物件轉換成指定的類型，使用的引數。"
  remarks: "要轉換的最常見的類型是字串物件。 這個實作會呼叫<xref:System.Object.ToString%2A>物件上的物件是否有效，而且如果目標類型是字串。</xref:System.Object.ToString%2A>"
  syntax:
    content: public object ConvertTo (object value, Type destinationType);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>轉換。</xref:System.Object>"
    - id: destinationType
      type: System.Type
      description: "<xref:System.Type>轉換`value`參數。</xref:System.Type>"
    return:
      type: System.Object
      description: "<xref:System.Object>表示已轉換的值。</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>destinationType</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "無法執行轉換。"
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  id: ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
  nameWithType: TypeConverter.ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
  fullName: System.ComponentModel.TypeConverter.ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "將指定的值物件轉換成指定的型別，並使用指定的內容和文化特性資訊。"
  remarks: "最常見的類型，將轉換為字串物件。 這個實作會呼叫<xref:System.Object.ToString%2A>物件上的物件是否有效，而且如果目標類型是字串。</xref:System.Object.ToString%2A>       使用`context`參數可以用於擷取的環境從中叫用這個轉換子的其他資訊。 這個參數可以是`null`，所以一定要檢查。 此外，物件上的屬性可能會傳回`null`。       自訂型別作者想要的 XAML 支援類型轉換行為，通常會實作<xref:System.ComponentModel.TypeConverter>支援類別<xref:System.ComponentModel.TypeConverter.ConvertFrom%2A>從字串的行為。</xref:System.ComponentModel.TypeConverter.ConvertFrom%2A> </xref:System.ComponentModel.TypeConverter> 這些型別轉換子也可能會實作 ConvertTo 來支援 XAML 序列化。       某些 XAML 序列化的情況下無法適當地處理與<xref:System.ComponentModel.TypeConverter>單獨。</xref:System.ComponentModel.TypeConverter> 在這些情況下，可能有必要也定義<xref:System.Windows.Markup.ValueSerializer>可處理的序列化情況，否則會由 ConvertTo。</xref:System.Windows.Markup.ValueSerializer> 如需詳細資訊，請參閱<xref:System.Windows.Markup.ValueSerializer>.</xref:System.Windows.Markup.ValueSerializer>"
  syntax:
    content: public virtual object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> ，提供格式內容。"
    - id: culture
      type: System.Globalization.CultureInfo
      description: "A <xref:System.Globalization.CultureInfo>.</xref:System.Globalization.CultureInfo> 如果<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>傳遞，則目前會假設文化特性。"
    - id: value
      type: System.Object
      description: "<xref:System.Object>轉換。</xref:System.Object>"
    - id: destinationType
      type: System.Type
      description: "<xref:System.Type>轉換`value`參數。</xref:System.Type>"
    return:
      type: System.Object
      description: "<xref:System.Object>表示已轉換的值。</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>destinationType</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "無法執行轉換。"
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)
  id: ConvertToInvariantString(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertToInvariantString(Object)
  nameWithType: TypeConverter.ConvertToInvariantString(Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "將指定的值轉換成不變的文化特性的字串表示。"
  remarks: "`context`參數可以用來擷取的環境的這個轉換子所叫用的其他資訊。 這可以是`null`，所以一定要檢查。 此外，物件上的屬性可能會傳回`null`。       不同的值格式子的實作，可能會將傳回的字串到值格式子，來重新建立物件的執行個體。"
  syntax:
    content: public string ConvertToInvariantString (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>轉換。</xref:System.Object>"
    return:
      type: System.String
      description: "A<xref:System.String>表示已轉換的值。</xref:System.String>"
  overload: System.ComponentModel.TypeConverter.ConvertToInvariantString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "無法執行轉換。"
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  id: ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertToInvariantString(ITypeDescriptorContext,Object)
  nameWithType: TypeConverter.ConvertToInvariantString(ITypeDescriptorContext,Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString(ITypeDescriptorContext,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "將指定的值轉換成不變的文化特性的字串表示，使用指定的內容。"
  remarks: "使用`context`參數可以用於擷取的環境從中叫用這個轉換子的其他資訊。 這個參數可以是`null`，所以一定要檢查。 此外，物件上的屬性可能會傳回`null`。       不同的值格式子的實作，可能會將傳回的字串到值格式子，來重新建立物件的執行個體。"
  syntax:
    content: public string ConvertToInvariantString (System.ComponentModel.ITypeDescriptorContext context, object value);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> ，提供格式內容。"
    - id: value
      type: System.Object
      description: "<xref:System.Object>轉換。</xref:System.Object>"
    return:
      type: System.String
      description: "A<xref:System.String>表示已轉換的值。</xref:System.String>"
  overload: System.ComponentModel.TypeConverter.ConvertToInvariantString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "無法執行轉換。"
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertToString(System.Object)
  id: ConvertToString(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertToString(Object)
  nameWithType: TypeConverter.ConvertToString(Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToString(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "將指定的值轉換為字串表示。"
  remarks: "不同的值格式子的實作，可能會將傳回的字串到值格式子，來重新建立物件的執行個體。"
  example:
  - For an example on this function, see the <xref:System.ComponentModel.TypeConverter> class.
  syntax:
    content: public string ConvertToString (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>轉換。</xref:System.Object>"
    return:
      type: System.String
      description: "<xref:System.Object>表示已轉換的值。</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertToString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "無法執行轉換。"
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  id: ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertToString(ITypeDescriptorContext,Object)
  nameWithType: TypeConverter.ConvertToString(ITypeDescriptorContext,Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToString(ITypeDescriptorContext,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "將指定的值轉換為字串表示，使用指定的內容。"
  remarks: "使用`context`參數可以用於擷取的環境從中叫用這個轉換子的其他資訊。 這個參數可以是`null`，所以一定要檢查。 此外，物件上的屬性可能會傳回`null`。       不同的值格式子的實作，可能會將傳回的字串到值格式子，來重新建立物件的執行個體。"
  syntax:
    content: public string ConvertToString (System.ComponentModel.ITypeDescriptorContext context, object value);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> ，提供格式內容。"
    - id: value
      type: System.Object
      description: "<xref:System.Object>轉換。</xref:System.Object>"
    return:
      type: System.String
      description: "<xref:System.Object>表示已轉換的值。</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertToString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "無法執行轉換。"
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  id: ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertToString(ITypeDescriptorContext,CultureInfo,Object)
  nameWithType: TypeConverter.ConvertToString(ITypeDescriptorContext,CultureInfo,Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToString(ITypeDescriptorContext,CultureInfo,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "將指定的值轉換為字串表示，使用指定的內容和文化特性資訊。"
  remarks: "使用`context`參數可以用於擷取的環境從中叫用這個轉換子的其他資訊。 這個參數可以是`null`，所以一定要檢查。 此外，物件上的屬性可能會傳回`null`。       不同的值格式子的實作，可能會將傳回的字串到值格式子，來重新建立物件的執行個體。"
  syntax:
    content: public string ConvertToString (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> ，提供格式內容。"
    - id: culture
      type: System.Globalization.CultureInfo
      description: "A <xref:System.Globalization.CultureInfo>.</xref:System.Globalization.CultureInfo> 如果<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>傳遞，則目前會假設文化特性。"
    - id: value
      type: System.Object
      description: "<xref:System.Object>轉換。</xref:System.Object>"
    return:
      type: System.String
      description: "<xref:System.Object>表示已轉換的值。</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertToString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "無法執行轉換。"
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
  id: CreateInstance(System.Collections.IDictionary)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: CreateInstance(IDictionary)
  nameWithType: TypeConverter.CreateInstance(IDictionary)
  fullName: System.ComponentModel.TypeConverter.CreateInstance(IDictionary)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "重新建立<xref:System.Object>物件指定一組屬性值。</xref:System.Object>"
  remarks: "使用此方法不可變的但您想要提供可變更屬性的物件。       所提供的字典`propertyValues`參數有一系列的名稱/值組<xref:System.ComponentModel.TypeConverter.GetProperties%2A>.</xref:System.ComponentModel.TypeConverter.GetProperties%2A>從傳回的每一個屬性的其中一個"
  syntax:
    content: public object CreateInstance (System.Collections.IDictionary propertyValues);
    parameters:
    - id: propertyValues
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>，代表新的屬性值的字典。</xref:System.Collections.IDictionary>"
    return:
      type: System.Object
      description: "<xref:System.Object>代表給定<xref:System.Collections.IDictionary>，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果無法建立物件。</xref:System.Collections.IDictionary> </xref:System.Object> 這個方法一律會傳回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.TypeConverter.CreateInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  id: CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: CreateInstance(ITypeDescriptorContext,IDictionary)
  nameWithType: TypeConverter.CreateInstance(ITypeDescriptorContext,IDictionary)
  fullName: System.ComponentModel.TypeConverter.CreateInstance(ITypeDescriptorContext,IDictionary)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "建立類型的執行個體，這<xref href=&quot;System.ComponentModel.TypeConverter&quot;></xref>相關聯，使用指定的內容中，指定物件的一組屬性值。"
  remarks: "使用此方法不可變的但您想要提供可變更屬性的物件。"
  syntax:
    content: public virtual object CreateInstance (System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary propertyValues);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> ，提供格式內容。"
    - id: propertyValues
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>新屬性值。</xref:System.Collections.IDictionary>"
    return:
      type: System.Object
      description: "<xref:System.Object>代表給定<xref:System.Collections.IDictionary>，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果無法建立物件。</xref:System.Collections.IDictionary> </xref:System.Object> 這個方法一律會傳回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.TypeConverter.CreateInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)
  id: GetConvertFromException(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetConvertFromException(Object)
  nameWithType: TypeConverter.GetConvertFromException(Object)
  fullName: System.ComponentModel.TypeConverter.GetConvertFromException(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "傳回時無法執行轉換所擲回例外狀況。"
  syntax:
    content: protected Exception GetConvertFromException (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>轉換，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果物件無法使用。</xref:System.Object>"
    return:
      type: System.Exception
      description: "<xref:System.Exception>表示無法執行轉換時擲回的例外狀況。</xref:System.Exception>"
  overload: System.ComponentModel.TypeConverter.GetConvertFromException*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "會自動由這個方法會擲回。"
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)
  id: GetConvertToException(System.Object,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetConvertToException(Object,Type)
  nameWithType: TypeConverter.GetConvertToException(Object,Type)
  fullName: System.ComponentModel.TypeConverter.GetConvertToException(Object,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "傳回時無法執行轉換所擲回例外狀況。"
  syntax:
    content: protected Exception GetConvertToException (object value, Type destinationType);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>轉換，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果物件無法使用。</xref:System.Object>"
    - id: destinationType
      type: System.Type
      description: "A <xref:System.Type>，代表轉換嘗試轉換成的型別。</xref:System.Type>"
    return:
      type: System.Exception
      description: "<xref:System.Exception>表示無法執行轉換時擲回的例外狀況。</xref:System.Exception>"
  overload: System.ComponentModel.TypeConverter.GetConvertToException*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "會自動由這個方法會擲回。"
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported
  id: GetCreateInstanceSupported
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetCreateInstanceSupported()
  nameWithType: TypeConverter.GetCreateInstanceSupported()
  fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "傳回變更的值，這個物件上是否需要呼叫<xref:System.ComponentModel.TypeConverter.CreateInstance*>方法來建立新的值。</xref:System.ComponentModel.TypeConverter.CreateInstance*>"
  syntax:
    content: public bool GetCreateInstanceSupported ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果變更此物件上的屬性需要呼叫<xref:System.ComponentModel.TypeConverter.CreateInstance*>以建立新的值; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.ComponentModel.TypeConverter.CreateInstance*>"
  overload: System.ComponentModel.TypeConverter.GetCreateInstanceSupported*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  id: GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetCreateInstanceSupported(ITypeDescriptorContext)
  nameWithType: TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "傳回變更的值，這個物件上是否需要呼叫<xref:System.ComponentModel.TypeConverter.CreateInstance*>以建立新的值，並使用指定的內容。</xref:System.ComponentModel.TypeConverter.CreateInstance*>"
  remarks: "在這個類別中實作時，這個方法一律會傳回`false`。"
  syntax:
    content: public virtual bool GetCreateInstanceSupported (System.ComponentModel.ITypeDescriptorContext context);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> ，提供格式內容。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果變更此物件上的屬性需要呼叫<xref:System.ComponentModel.TypeConverter.CreateInstance*>以建立新的值; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.ComponentModel.TypeConverter.CreateInstance*>"
  overload: System.ComponentModel.TypeConverter.GetCreateInstanceSupported*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetProperties(System.Object)
  id: GetProperties(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetProperties(Object)
  nameWithType: TypeConverter.GetProperties(Object)
  fullName: System.ComponentModel.TypeConverter.GetProperties(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "傳回由值參數所指定的陣列型別的屬性集合。"
  remarks: "在這個類別中實作時，這個方法一律會傳回`null`。       根據預設，型別所傳回的屬性。 可以呼叫此方法的簡單實作<xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>正確的資料類型。</xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>"
  syntax:
    content: public System.ComponentModel.PropertyDescriptorCollection GetProperties (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>指定之要取得屬性的陣列型別。</xref:System.Object>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>為這種資料類型所公開的屬性或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>是否有任何屬性。"
  overload: System.ComponentModel.TypeConverter.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  id: GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetProperties(ITypeDescriptorContext,Object)
  nameWithType: TypeConverter.GetProperties(ITypeDescriptorContext,Object)
  fullName: System.ComponentModel.TypeConverter.GetProperties(ITypeDescriptorContext,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "傳回由值參數，使用指定的內容所指定的陣列型別的屬性集合。"
  remarks: "使用`context`參數可以用於擷取的環境從中叫用這個轉換子的其他資訊。 這個參數可以是`null`，所以一定要檢查。 此外，物件上的屬性可能會傳回`null`。       在這個類別中實作時，這個方法一律會傳回`null`。       根據預設，型別所傳回的屬性。 可以呼叫此方法的簡單實作<xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>正確的資料類型。</xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>"
  syntax:
    content: public System.ComponentModel.PropertyDescriptorCollection GetProperties (System.ComponentModel.ITypeDescriptorContext context, object value);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> ，提供格式內容。"
    - id: value
      type: System.Object
      description: "<xref:System.Object>指定之要取得屬性的陣列型別。</xref:System.Object>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>為這種資料類型所公開的屬性或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>是否有任何屬性。"
  overload: System.ComponentModel.TypeConverter.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  id: GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetProperties(ITypeDescriptorContext,Object,Attribute[])
  nameWithType: TypeConverter.GetProperties(ITypeDescriptorContext,Object,Attribute[])
  fullName: System.ComponentModel.TypeConverter.GetProperties(ITypeDescriptorContext,Object,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "傳回由值參數，使用指定的內容和屬性所指定的陣列型別的屬性集合。"
  remarks: "在這個類別中實作時，這個方法一律會傳回`null`。"
  syntax:
    content: public virtual System.ComponentModel.PropertyDescriptorCollection GetProperties (System.ComponentModel.ITypeDescriptorContext context, object value, Attribute[] attributes);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> ，提供格式內容。"
    - id: value
      type: System.Object
      description: "<xref:System.Object>指定之要取得屬性的陣列型別。</xref:System.Object>"
    - id: attributes
      type: System.Attribute[]
      description: "類型的陣列<xref:System.Attribute>，可當做篩選條件。</xref:System.Attribute>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>為這種資料類型所公開的屬性或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>是否有任何屬性。"
  overload: System.ComponentModel.TypeConverter.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetPropertiesSupported
  id: GetPropertiesSupported
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetPropertiesSupported()
  nameWithType: TypeConverter.GetPropertiesSupported()
  fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "傳回這個物件是否支援屬性。"
  remarks: "在這個類別中實作時，這個方法一律會傳回`false`。"
  syntax:
    content: public bool GetPropertiesSupported ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.ComponentModel.TypeConverter.GetProperties*>應該會呼叫以尋找這個物件的屬性，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.ComponentModel.TypeConverter.GetProperties*>"
  overload: System.ComponentModel.TypeConverter.GetPropertiesSupported*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  id: GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetPropertiesSupported(ITypeDescriptorContext)
  nameWithType: TypeConverter.GetPropertiesSupported(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported(ITypeDescriptorContext)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "傳回這個物件是否支援屬性，請使用指定的內容。"
  remarks: "在這個類別中實作時，這個方法一律會傳回`false`。"
  syntax:
    content: public virtual bool GetPropertiesSupported (System.ComponentModel.ITypeDescriptorContext context);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> ，提供格式內容。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.ComponentModel.TypeConverter.GetProperties*>應該會呼叫以尋找這個物件的屬性，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.ComponentModel.TypeConverter.GetProperties*>"
  overload: System.ComponentModel.TypeConverter.GetPropertiesSupported*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetStandardValues
  id: GetStandardValues
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetStandardValues()
  nameWithType: TypeConverter.GetStandardValues()
  fullName: System.ComponentModel.TypeConverter.GetStandardValues()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "從這個型別轉換子所針對的資料類型的預設內容中傳回標準值的集合。"
  remarks: "在這個類別中實作時，這個方法一律會傳回`null`。"
  syntax:
    content: public System.Collections.ICollection GetStandardValues ();
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "A<xref:System.ComponentModel.TypeConverter.StandardValuesCollection>包含一組標準的有效值，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果資料類型不支援的標準值集合。</xref:System.ComponentModel.TypeConverter.StandardValuesCollection>"
  overload: System.ComponentModel.TypeConverter.GetStandardValues*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  id: GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetStandardValues(ITypeDescriptorContext)
  nameWithType: TypeConverter.GetStandardValues(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetStandardValues(ITypeDescriptorContext)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "傳回資料類型，提供格式內容時，針對此型別轉換子的標準值的集合。"
  remarks: "在中實作<xref:System.ComponentModel.TypeConverter>，這個方法一律會傳回`null`。</xref:System.ComponentModel.TypeConverter>"
  example:
  - For an example on this function, see the <xref:System.ComponentModel.TypeConverter> class.
  syntax:
    content: public virtual System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues (System.ComponentModel.ITypeDescriptorContext context);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> ，提供格式內容，可用來擷取要從中叫用這個轉換子的環境的其他資訊。 這個參數或這個參數的屬性可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.ComponentModel.TypeConverter.StandardValuesCollection
      description: "A<xref:System.ComponentModel.TypeConverter.StandardValuesCollection>保存一組標準的有效值，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果資料類型不支援的標準值集合。</xref:System.ComponentModel.TypeConverter.StandardValuesCollection>"
  overload: System.ComponentModel.TypeConverter.GetStandardValues*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive
  id: GetStandardValuesExclusive
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetStandardValuesExclusive()
  nameWithType: TypeConverter.GetStandardValuesExclusive()
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "傳回的標準值集合是否從傳回<xref:System.ComponentModel.TypeConverter.GetStandardValues*>是獨占清單。</xref:System.ComponentModel.TypeConverter.GetStandardValues*>"
  remarks: "在這個類別中實作時，這個方法一律會傳回`false`。       如果是獨占清單，例如在列舉資料型別，則沒有其他有效值。 如果清單不是獨佔的則除了的清單，可能還有其他有效值標準值<xref:System.ComponentModel.TypeConverter.GetStandardValues%2A>方法提供。</xref:System.ComponentModel.TypeConverter.GetStandardValues%2A> 如果是獨占值，所傳回的清單<xref:System.ComponentModel.TypeConverter.GetStandardValues%2A>應該不允許編輯這些值。</xref:System.ComponentModel.TypeConverter.GetStandardValues%2A>"
  syntax:
    content: public bool GetStandardValuesExclusive ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果從<xref:System.ComponentModel.TypeConverter.GetStandardValues*>傳回<xref:System.ComponentModel.TypeConverter.StandardValuesCollection>，是可能的值的獨占清單<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果其他的值為可能。 </xref:System.ComponentModel.TypeConverter.StandardValuesCollection></xref:System.ComponentModel.TypeConverter.GetStandardValues*>"
  overload: System.ComponentModel.TypeConverter.GetStandardValuesExclusive*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  id: GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetStandardValuesExclusive(ITypeDescriptorContext)
  nameWithType: TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "傳回的標準值集合是否從傳回<xref:System.ComponentModel.TypeConverter.GetStandardValues*>是可能的值，使用指定的內容的獨占清單。</xref:System.ComponentModel.TypeConverter.GetStandardValues*>"
  remarks: "在這個類別中實作時，這個方法一律會傳回`false`。       如果是獨占清單，例如在列舉資料型別，則沒有其他有效值。 如果清單不是獨佔的則除了的清單，可能還有其他有效值標準值<xref:System.ComponentModel.TypeConverter.GetStandardValues%2A>方法提供。</xref:System.ComponentModel.TypeConverter.GetStandardValues%2A> 如果是獨占值，所傳回的清單<xref:System.ComponentModel.TypeConverter.GetStandardValues%2A>應該不允許編輯這些值。</xref:System.ComponentModel.TypeConverter.GetStandardValues%2A>"
  syntax:
    content: public virtual bool GetStandardValuesExclusive (System.ComponentModel.ITypeDescriptorContext context);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> ，提供格式內容。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果從<xref:System.ComponentModel.TypeConverter.GetStandardValues*>傳回<xref:System.ComponentModel.TypeConverter.StandardValuesCollection>，是可能的值的獨占清單<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果其他的值為可能。 </xref:System.ComponentModel.TypeConverter.StandardValuesCollection></xref:System.ComponentModel.TypeConverter.GetStandardValues*>"
  overload: System.ComponentModel.TypeConverter.GetStandardValuesExclusive*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported
  id: GetStandardValuesSupported
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetStandardValuesSupported()
  nameWithType: TypeConverter.GetStandardValuesSupported()
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "傳回這個物件是否支援一組標準可從清單中挑選的值。"
  syntax:
    content: public bool GetStandardValuesSupported ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.ComponentModel.TypeConverter.GetStandardValues*>呼叫尋找一組常用的物件支援的值; 否則應該是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.ComponentModel.TypeConverter.GetStandardValues*>"
  overload: System.ComponentModel.TypeConverter.GetStandardValuesSupported*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  id: GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetStandardValuesSupported(ITypeDescriptorContext)
  nameWithType: TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "傳回這個物件是否支援一組標準可從清單中，使用指定的內容中挑選的值。"
  remarks: "在這個類別中實作時，這個方法一律會傳回`false`。       使用`context`參數可以用於擷取的環境從中叫用這個轉換子的其他資訊。 這個參數可以是`null`，所以一定要檢查。 此外，物件上的屬性可能會傳回`null`。"
  syntax:
    content: public virtual bool GetStandardValuesSupported (System.ComponentModel.ITypeDescriptorContext context);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> ，提供格式內容。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.ComponentModel.TypeConverter.GetStandardValues*>呼叫尋找一組常用的物件支援的值; 否則應該是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.ComponentModel.TypeConverter.GetStandardValues*>"
  overload: System.ComponentModel.TypeConverter.GetStandardValuesSupported*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.IsValid(System.Object)
  id: IsValid(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: IsValid(Object)
  nameWithType: TypeConverter.IsValid(Object)
  fullName: System.ComponentModel.TypeConverter.IsValid(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "傳回是否適用於此類型指定的值物件。"
  remarks: "從開始[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]、<xref:System.ComponentModel.TypeConverter.IsValid%2A>方法攔截例外狀況，從<xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A>和<xref:System.ComponentModel.TypeConverter.ConvertFrom%2A>方法。</xref:System.ComponentModel.TypeConverter.ConvertFrom%2A> </xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A> </xref:System.ComponentModel.TypeConverter.IsValid%2A> 如果輸入的值類型會導致<xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A>傳回`false`，或如果輸入的值會導致<xref:System.ComponentModel.TypeConverter.ConvertFrom%2A>引發例外狀況，<xref:System.ComponentModel.TypeConverter.IsValid%2A>方法會傳回`false`。</xref:System.ComponentModel.TypeConverter.IsValid%2A> </xref:System.ComponentModel.TypeConverter.ConvertFrom%2A> </xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A>       若要啟用舊版行為，將下列行插入應用程式，例如 application1.exe.config 的組態檔。      ```xml   <configuration>     <appSettings>       <add key=&quot;UseCompatibleTypeConverterBehavior&quot; value=&quot;true&quot; />     </appSettings>   </configuration>   ```"
  syntax:
    content: public bool IsValid (object value);
    parameters:
    - id: value
      type: System.Object
      description: "要測試有效性的物件。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的值無效，此物件。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.TypeConverter.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  id: IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: IsValid(ITypeDescriptorContext,Object)
  nameWithType: TypeConverter.IsValid(ITypeDescriptorContext,Object)
  fullName: System.ComponentModel.TypeConverter.IsValid(ITypeDescriptorContext,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "傳回給定的值的物件是否有效，此類型和指定的內容。"
  remarks: "使用`context`參數可以用於擷取的環境從中叫用這個轉換子的其他資訊。 這個參數可以是`null`，所以一定要檢查。 此外，物件上的屬性可能會傳回`null`。       從開始[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]，IsValid 方法攔截例外狀況，從<xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A>和<xref:System.ComponentModel.TypeConverter.ConvertFrom%2A>方法。</xref:System.ComponentModel.TypeConverter.ConvertFrom%2A> </xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A> 如果輸入的值類型會導致<xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A>傳回`false`，或如果輸入的值會導致<xref:System.ComponentModel.TypeConverter.ConvertFrom%2A>IsValid 方法會傳回引發例外狀況， `false`。</xref:System.ComponentModel.TypeConverter.ConvertFrom%2A> </xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A>       若要啟用舊版行為，將下列行插入應用程式，例如 application1.exe.config 的組態檔。      ```xml   <configuration>     <appSettings>       <add key=&quot;UseCompatibleTypeConverterBehavior&quot; value=&quot;true&quot; />     </appSettings>   </configuration>   ```"
  example:
  - For an example of this function, see the <xref:System.ComponentModel.TypeConverter> class.
  syntax:
    content: public virtual bool IsValid (System.ComponentModel.ITypeDescriptorContext context, object value);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> ，提供格式內容。"
    - id: value
      type: System.Object
      description: "<xref:System.Object>要測試有效性。</xref:System.Object>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的值無效，此物件。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.TypeConverter.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  id: SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: SortProperties(PropertyDescriptorCollection,String[])
  nameWithType: TypeConverter.SortProperties(PropertyDescriptorCollection,String[])
  fullName: System.ComponentModel.TypeConverter.SortProperties(PropertyDescriptorCollection,String[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "排序屬性的集合。"
  remarks: "集合中所有不存在於名稱的陣列的屬性會依字母順序加入至結尾。 如果`names`參數是空陣列或`null`，依字母順序排序集合中的所有屬性。"
  syntax:
    content: protected System.ComponentModel.PropertyDescriptorCollection SortProperties (System.ComponentModel.PropertyDescriptorCollection props, string[] names);
    parameters:
    - id: props
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>的已排序的屬性。"
    - id: names
      type: System.String[]
      description: "在順序中的名稱陣列您想要在集合中出現的屬性。"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> ，其中包含已排序的屬性。"
  overload: System.ComponentModel.TypeConverter.SortProperties*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.TypeConverter.#ctor
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: TypeConverter()
  nameWithType: TypeConverter.TypeConverter()
  fullName: System.ComponentModel.TypeConverter.TypeConverter()
- uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: CanConvertFrom(Type)
  nameWithType: TypeConverter.CanConvertFrom(Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertFrom(Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: CanConvertFrom(ITypeDescriptorContext,Type)
  nameWithType: TypeConverter.CanConvertFrom(ITypeDescriptorContext,Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertFrom(ITypeDescriptorContext,Type)
- uid: System.ComponentModel.ITypeDescriptorContext
  parent: System.ComponentModel
  isExternal: false
  name: ITypeDescriptorContext
  nameWithType: ITypeDescriptorContext
  fullName: System.ComponentModel.ITypeDescriptorContext
- uid: System.ComponentModel.TypeConverter.CanConvertTo(System.Type)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: CanConvertTo(Type)
  nameWithType: TypeConverter.CanConvertTo(Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertTo(Type)
- uid: System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: CanConvertTo(ITypeDescriptorContext,Type)
  nameWithType: TypeConverter.CanConvertTo(ITypeDescriptorContext,Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertTo(ITypeDescriptorContext,Type)
- uid: System.ComponentModel.TypeConverter.ConvertFrom(System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertFrom(Object)
  nameWithType: TypeConverter.ConvertFrom(Object)
  fullName: System.ComponentModel.TypeConverter.ConvertFrom(Object)
- uid: System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
  nameWithType: TypeConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
  fullName: System.ComponentModel.TypeConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertFromInvariantString(String)
  nameWithType: TypeConverter.ConvertFromInvariantString(String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertFromInvariantString(ITypeDescriptorContext,String)
  nameWithType: TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext,String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext,String)
- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.String)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertFromString(String)
  nameWithType: TypeConverter.ConvertFromString(String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromString(String)
- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertFromString(ITypeDescriptorContext,String)
  nameWithType: TypeConverter.ConvertFromString(ITypeDescriptorContext,String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromString(ITypeDescriptorContext,String)
- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertFromString(ITypeDescriptorContext,CultureInfo,String)
  nameWithType: TypeConverter.ConvertFromString(ITypeDescriptorContext,CultureInfo,String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromString(ITypeDescriptorContext,CultureInfo,String)
- uid: System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertTo(Object,Type)
  nameWithType: TypeConverter.ConvertTo(Object,Type)
  fullName: System.ComponentModel.TypeConverter.ConvertTo(Object,Type)
- uid: System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
  nameWithType: TypeConverter.ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
  fullName: System.ComponentModel.TypeConverter.ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
- uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertToInvariantString(Object)
  nameWithType: TypeConverter.ConvertToInvariantString(Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString(Object)
- uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertToInvariantString(ITypeDescriptorContext,Object)
  nameWithType: TypeConverter.ConvertToInvariantString(ITypeDescriptorContext,Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString(ITypeDescriptorContext,Object)
- uid: System.ComponentModel.TypeConverter.ConvertToString(System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertToString(Object)
  nameWithType: TypeConverter.ConvertToString(Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToString(Object)
- uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertToString(ITypeDescriptorContext,Object)
  nameWithType: TypeConverter.ConvertToString(ITypeDescriptorContext,Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToString(ITypeDescriptorContext,Object)
- uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertToString(ITypeDescriptorContext,CultureInfo,Object)
  nameWithType: TypeConverter.ConvertToString(ITypeDescriptorContext,CultureInfo,Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToString(ITypeDescriptorContext,CultureInfo,Object)
- uid: System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: CreateInstance(IDictionary)
  nameWithType: TypeConverter.CreateInstance(IDictionary)
  fullName: System.ComponentModel.TypeConverter.CreateInstance(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: CreateInstance(ITypeDescriptorContext,IDictionary)
  nameWithType: TypeConverter.CreateInstance(ITypeDescriptorContext,IDictionary)
  fullName: System.ComponentModel.TypeConverter.CreateInstance(ITypeDescriptorContext,IDictionary)
- uid: System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetConvertFromException(Object)
  nameWithType: TypeConverter.GetConvertFromException(Object)
  fullName: System.ComponentModel.TypeConverter.GetConvertFromException(Object)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetConvertToException(Object,Type)
  nameWithType: TypeConverter.GetConvertToException(Object,Type)
  fullName: System.ComponentModel.TypeConverter.GetConvertToException(Object,Type)
- uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetCreateInstanceSupported()
  nameWithType: TypeConverter.GetCreateInstanceSupported()
  fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported()
- uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetCreateInstanceSupported(ITypeDescriptorContext)
  nameWithType: TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext)
- uid: System.ComponentModel.TypeConverter.GetProperties(System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetProperties(Object)
  nameWithType: TypeConverter.GetProperties(Object)
  fullName: System.ComponentModel.TypeConverter.GetProperties(Object)
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  nameWithType: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetProperties(ITypeDescriptorContext,Object)
  nameWithType: TypeConverter.GetProperties(ITypeDescriptorContext,Object)
  fullName: System.ComponentModel.TypeConverter.GetProperties(ITypeDescriptorContext,Object)
- uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetProperties(ITypeDescriptorContext,Object,Attribute[])
  nameWithType: TypeConverter.GetProperties(ITypeDescriptorContext,Object,Attribute[])
  fullName: System.ComponentModel.TypeConverter.GetProperties(ITypeDescriptorContext,Object,Attribute[])
- uid: System.Attribute[]
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute[]
  spec.csharp:
  - uid: System.Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: Attribute[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.TypeConverter.GetPropertiesSupported
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetPropertiesSupported()
  nameWithType: TypeConverter.GetPropertiesSupported()
  fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported()
- uid: System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetPropertiesSupported(ITypeDescriptorContext)
  nameWithType: TypeConverter.GetPropertiesSupported(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported(ITypeDescriptorContext)
- uid: System.ComponentModel.TypeConverter.GetStandardValues
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetStandardValues()
  nameWithType: TypeConverter.GetStandardValues()
  fullName: System.ComponentModel.TypeConverter.GetStandardValues()
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetStandardValues(ITypeDescriptorContext)
  nameWithType: TypeConverter.GetStandardValues(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetStandardValues(ITypeDescriptorContext)
- uid: System.ComponentModel.TypeConverter.StandardValuesCollection
  parent: System.ComponentModel
  isExternal: false
  name: TypeConverter+StandardValuesCollection
  nameWithType: TypeConverter+StandardValuesCollection
  fullName: System.ComponentModel.TypeConverter+StandardValuesCollection
- uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetStandardValuesExclusive()
  nameWithType: TypeConverter.GetStandardValuesExclusive()
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive()
- uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetStandardValuesExclusive(ITypeDescriptorContext)
  nameWithType: TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext)
- uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetStandardValuesSupported()
  nameWithType: TypeConverter.GetStandardValuesSupported()
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported()
- uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetStandardValuesSupported(ITypeDescriptorContext)
  nameWithType: TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext)
- uid: System.ComponentModel.TypeConverter.IsValid(System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: IsValid(Object)
  nameWithType: TypeConverter.IsValid(Object)
  fullName: System.ComponentModel.TypeConverter.IsValid(Object)
- uid: System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: IsValid(ITypeDescriptorContext,Object)
  nameWithType: TypeConverter.IsValid(ITypeDescriptorContext,Object)
  fullName: System.ComponentModel.TypeConverter.IsValid(ITypeDescriptorContext,Object)
- uid: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: SortProperties(PropertyDescriptorCollection,String[])
  nameWithType: TypeConverter.SortProperties(PropertyDescriptorCollection,String[])
  fullName: System.ComponentModel.TypeConverter.SortProperties(PropertyDescriptorCollection,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.TypeConverter.#ctor*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: TypeConverter
  nameWithType: TypeConverter.TypeConverter
- uid: System.ComponentModel.TypeConverter.CanConvertFrom*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: CanConvertFrom
  nameWithType: TypeConverter.CanConvertFrom
- uid: System.ComponentModel.TypeConverter.CanConvertTo*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: CanConvertTo
  nameWithType: TypeConverter.CanConvertTo
- uid: System.ComponentModel.TypeConverter.ConvertFrom*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertFrom
  nameWithType: TypeConverter.ConvertFrom
- uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertFromInvariantString
  nameWithType: TypeConverter.ConvertFromInvariantString
- uid: System.ComponentModel.TypeConverter.ConvertFromString*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertFromString
  nameWithType: TypeConverter.ConvertFromString
- uid: System.ComponentModel.TypeConverter.ConvertTo*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertTo
  nameWithType: TypeConverter.ConvertTo
- uid: System.ComponentModel.TypeConverter.ConvertToInvariantString*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertToInvariantString
  nameWithType: TypeConverter.ConvertToInvariantString
- uid: System.ComponentModel.TypeConverter.ConvertToString*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertToString
  nameWithType: TypeConverter.ConvertToString
- uid: System.ComponentModel.TypeConverter.CreateInstance*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: CreateInstance
  nameWithType: TypeConverter.CreateInstance
- uid: System.ComponentModel.TypeConverter.GetConvertFromException*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetConvertFromException
  nameWithType: TypeConverter.GetConvertFromException
- uid: System.ComponentModel.TypeConverter.GetConvertToException*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetConvertToException
  nameWithType: TypeConverter.GetConvertToException
- uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetCreateInstanceSupported
  nameWithType: TypeConverter.GetCreateInstanceSupported
- uid: System.ComponentModel.TypeConverter.GetProperties*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetProperties
  nameWithType: TypeConverter.GetProperties
- uid: System.ComponentModel.TypeConverter.GetPropertiesSupported*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetPropertiesSupported
  nameWithType: TypeConverter.GetPropertiesSupported
- uid: System.ComponentModel.TypeConverter.GetStandardValues*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetStandardValues
  nameWithType: TypeConverter.GetStandardValues
- uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetStandardValuesExclusive
  nameWithType: TypeConverter.GetStandardValuesExclusive
- uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetStandardValuesSupported
  nameWithType: TypeConverter.GetStandardValuesSupported
- uid: System.ComponentModel.TypeConverter.IsValid*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: IsValid
  nameWithType: TypeConverter.IsValid
- uid: System.ComponentModel.TypeConverter.SortProperties*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: SortProperties
  nameWithType: TypeConverter.SortProperties
