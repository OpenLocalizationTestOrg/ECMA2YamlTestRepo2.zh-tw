### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Design.DesignSurface
  id: DesignSurface
  children:
  - System.ComponentModel.Design.DesignSurface.#ctor
  - System.ComponentModel.Design.DesignSurface.#ctor(System.IServiceProvider)
  - System.ComponentModel.Design.DesignSurface.#ctor(System.Type)
  - System.ComponentModel.Design.DesignSurface.#ctor(System.IServiceProvider,System.Type)
  - System.ComponentModel.Design.DesignSurface.BeginLoad(System.ComponentModel.Design.Serialization.DesignerLoader)
  - System.ComponentModel.Design.DesignSurface.BeginLoad(System.Type)
  - System.ComponentModel.Design.DesignSurface.ComponentContainer
  - System.ComponentModel.Design.DesignSurface.CreateComponent(System.Type)
  - System.ComponentModel.Design.DesignSurface.CreateDesigner(System.ComponentModel.IComponent,System.Boolean)
  - System.ComponentModel.Design.DesignSurface.CreateInstance(System.Type)
  - System.ComponentModel.Design.DesignSurface.CreateNestedContainer(System.ComponentModel.IComponent)
  - System.ComponentModel.Design.DesignSurface.CreateNestedContainer(System.ComponentModel.IComponent,System.String)
  - System.ComponentModel.Design.DesignSurface.Dispose
  - System.ComponentModel.Design.DesignSurface.Dispose(System.Boolean)
  - System.ComponentModel.Design.DesignSurface.Disposed
  - System.ComponentModel.Design.DesignSurface.DtelLoading
  - System.ComponentModel.Design.DesignSurface.Flush
  - System.ComponentModel.Design.DesignSurface.Flushed
  - System.ComponentModel.Design.DesignSurface.GetService(System.Type)
  - System.ComponentModel.Design.DesignSurface.IsLoaded
  - System.ComponentModel.Design.DesignSurface.Loaded
  - System.ComponentModel.Design.DesignSurface.LoadErrors
  - System.ComponentModel.Design.DesignSurface.Loading
  - System.ComponentModel.Design.DesignSurface.OnLoaded(System.ComponentModel.Design.LoadedEventArgs)
  - System.ComponentModel.Design.DesignSurface.OnLoading(System.EventArgs)
  - System.ComponentModel.Design.DesignSurface.OnUnloaded(System.EventArgs)
  - System.ComponentModel.Design.DesignSurface.OnUnloading(System.EventArgs)
  - System.ComponentModel.Design.DesignSurface.OnViewActivate(System.EventArgs)
  - System.ComponentModel.Design.DesignSurface.ServiceContainer
  - System.ComponentModel.Design.DesignSurface.Unloaded
  - System.ComponentModel.Design.DesignSurface.Unloading
  - System.ComponentModel.Design.DesignSurface.View
  - System.ComponentModel.Design.DesignSurface.ViewActivated
  langs:
  - csharp
  name: DesignSurface
  nameWithType: DesignSurface
  fullName: System.ComponentModel.Design.DesignSurface
  type: Class
  summary: "提供的使用者介面設計元件。"
  remarks: "DesignSurface 類別會實作使用者感知為設計工具。 DesignSurface 是使用者介面使用者操作來變更設計階段功能。 DesignSurface 提供完全獨立的設計介面。       DesignSurface 類別可做為獨立的設計工具中，或它可能會令人敬謝<xref:System.ComponentModel.Design.DesignSurfaceManager>類別，以提供裝載多個 DesignSurface 物件的應用程式的通用實作。</xref:System.ComponentModel.Design.DesignSurfaceManager>       DesignSurface 類別可由本身，或使用者可以從中衍生新類別，將它擴大的行為。       DesignSurface 類別會自動提供數個設計階段服務。 DesignSurface 類別會將其所有的服務在其建構函式。 大部分的服務可覆寫並取代在受保護<xref:System.ComponentModel.Design.DesignSurface.ServiceContainer%2A>屬性。</xref:System.ComponentModel.Design.DesignSurface.ServiceContainer%2A> 若要取代的服務，覆寫建構函式，呼叫基底，並進行任何變更透過受保護<xref:System.ComponentModel.Design.DesignSurface.ServiceContainer%2A>屬性。</xref:System.ComponentModel.Design.DesignSurface.ServiceContainer%2A> 所有服務，會加入至服務容器，以及實作<xref:System.IDisposable>設計介面中遭處置時進行處置。</xref:System.IDisposable> 取代 DesignSurface 類別會提供下表所示的服務預設集。      |服務 |描述 |  |-------------|-----------------|  |<xref:System.ComponentModel.Design.IExtenderProviderService>|可讓不屬於容器的元件集合，提供它們自己的擴充性提供者的物件。 |  |<xref:System.ComponentModel.Design.IExtenderListService>|使用<xref:System.ComponentModel.TypeDescriptor>以取得擴充性提供者的清單。</xref:System.ComponentModel.TypeDescriptor> </xref:System.ComponentModel.Design.IExtenderListService> </xref:System.ComponentModel.Design.IExtenderProviderService> 與此服務中，擴充性提供者可以即時容器之外。 |  |<xref:System.ComponentModel.Design.ITypeDescriptorFilterService>|提供設計工具中繼資料的攔截程序。</xref:System.ComponentModel.Design.ITypeDescriptorFilterService> 這是中繼資料篩選的主要介面。 |  |<xref:System.ComponentModel.Design.ISelectionService>|提供方法來設計工具中選取的元件。 |  |<xref:System.ComponentModel.Design.IReferenceService>|提供方法來取得物件的名稱，即使這些物件未設置。 |  |DesignSurface |提供設計介面做為服務。 |  |<xref:System.ComponentModel.Design.DesignerOptionService>|提供基底類別，用於取得和設定選項值，設計工具。 |      下表顯示非可取代預設提供的服務。</xref:System.ComponentModel.Design.DesignerOptionService> </xref:System.ComponentModel.Design.IReferenceService> </xref:System.ComponentModel.Design.ISelectionService>      |服務 |描述 |  |-------------|-----------------|  |<xref:System.ComponentModel.Design.IComponentChangeService>|引發事件，對元件進行變更時。 |  |<xref:System.ComponentModel.Design.IDesignerHost>|控制存取類型、 服務和交易。</xref:System.ComponentModel.Design.IDesignerHost> </xref:System.ComponentModel.Design.IComponentChangeService> 針對設計人員的主要介面。 |  |<xref:System.ComponentModel.IContainer>|擁有正在設計的元件組。</xref:System.ComponentModel.IContainer> 每個設計工具有<xref:System.ComponentModel.IContainer>擁有的元件。 |  |<xref:System.ComponentModel.Design.IServiceContainer>|衍生自<xref:System.IServiceProvider>並可提供方法來加入和移除從設計工具的服務。 |      除了這些服務，DesignSurface 類別也提供可透過元件的站台的單一服務。</xref:System.IServiceProvider> </xref:System.ComponentModel.Design.IServiceContainer> </xref:System.ComponentModel.IContainer> 此服務是唯一的每個元件。 下表會顯示無法取代的服務。      |服務 |描述 |  |-------------|-----------------|  |<xref:System.ComponentModel.Design.IDictionaryService>|泛型字典的索引鍵/值組可以用來儲存有關元件的任意資料。 |  |<xref:System.ComponentModel.INestedContainer>|可讓某個元件加入至設計工具的其他子元件的容器。</xref:System.ComponentModel.INestedContainer> </xref:System.ComponentModel.Design.IDictionaryService> 這些元件將是設計介面的一部分，但不是會參與序列化。 當您想要設計的控制項時還能夠公開本身的區域在設計工具中，這非常有用，但您不想要參與序列化的區域。 |      除了<xref:System.ComponentModel.ISite>，站台也會實作下列介面。</xref:System.ComponentModel.ISite>      > [!CAUTION] > 檢查是否存在這些介面，而不是使用任意的轉型，因為其他站台的實作可能無法實作它們。      |服務 |描述 |  |-------------|-----------------|  |<xref:System.ComponentModel.Design.IServiceContainer>|提供方法來取得特定站台服務的容器。</xref:System.ComponentModel.Design.IServiceContainer> 例如，<xref:System.ComponentModel.Design.IDictionaryService>是站台特有的服務。</xref:System.ComponentModel.Design.IDictionaryService> 您可以使用此服務中，新增站台特有的其他服務。 |"
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public class DesignSurface : IDisposable, IServiceProvider
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  - System.IServiceProvider
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.#ctor
  id: '#ctor'
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: DesignSurface()
  nameWithType: DesignSurface.DesignSurface()
  fullName: System.ComponentModel.Design.DesignSurface.DesignSurface()
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "初始化的新執行個體<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>類別。"
  syntax:
    content: public DesignSurface ();
    parameters: []
  overload: System.ComponentModel.Design.DesignSurface.#ctor*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加至<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已經過處置。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.#ctor(System.IServiceProvider)
  id: '#ctor(System.IServiceProvider)'
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: DesignSurface(IServiceProvider)
  nameWithType: DesignSurface.DesignSurface(IServiceProvider)
  fullName: System.ComponentModel.Design.DesignSurface.DesignSurface(IServiceProvider)
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "初始化的新執行個體<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>類別。"
  remarks: "當`parentProvide`已存在，在介面中所包含的設計工具可以從應用程式中擷取服務。"
  syntax:
    content: public DesignSurface (IServiceProvider parentProvider);
    parameters:
    - id: parentProvider
      type: System.IServiceProvider
      description: "父服務提供者，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>是否用來解析服務沒有父代。"
  overload: System.ComponentModel.Design.DesignSurface.#ctor*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加至<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已經過處置。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.#ctor(System.Type)
  id: '#ctor(System.Type)'
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: DesignSurface(Type)
  nameWithType: DesignSurface.DesignSurface(Type)
  fullName: System.ComponentModel.Design.DesignSurface.DesignSurface(Type)
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "初始化的新執行個體<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>類別。"
  remarks: "當您使用 DesignSurface 建構函式時，它會建立簡單的設計工具載入器，亦會建立指定類型的元件，並於結束載入程序。 這是直接的方法建立設計工具中的，假設所有儲存的狀態會在外部完成。 就內部而言，這會呼叫<xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A>和傳遞根元件類型。</xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A>      > [!NOTE] > DesignSurface 多載不會受到<xref:System.Windows.Forms.Design.DesignerOptions>.</xref:System.Windows.Forms.Design.DesignerOptions> <xref:System.Windows.Forms.Design.DesignerOptions>載入設計介面之前，必須是服務容器之中。</xref:System.Windows.Forms.Design.DesignerOptions> 如果您需要存取<xref:System.Windows.Forms.Design.DesignerOptions>、 呼叫空的建構函式、 新增<xref:System.Windows.Forms.Design.DesignerOptions>至<xref:System.ComponentModel.Design.DesignSurface.ServiceContainer%2A>呼叫<xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A>與`rootComponentType`。</xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> </xref:System.ComponentModel.Design.DesignSurface.ServiceContainer%2A> </xref:System.Windows.Forms.Design.DesignerOptions> </xref:System.Windows.Forms.Design.DesignerOptions>"
  syntax:
    content: public DesignSurface (Type rootComponentType);
    parameters:
    - id: rootComponentType
      type: System.Type
      description: "若要建立的根元件的類型。"
  overload: System.ComponentModel.Design.DesignSurface.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rootComponent</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加至<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已經過處置。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.#ctor(System.IServiceProvider,System.Type)
  id: '#ctor(System.IServiceProvider,System.Type)'
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: DesignSurface(IServiceProvider,Type)
  nameWithType: DesignSurface.DesignSurface(IServiceProvider,Type)
  fullName: System.ComponentModel.Design.DesignSurface.DesignSurface(IServiceProvider,Type)
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "初始化的新執行個體<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>類別。"
  remarks: "使用 DesignSurface 建構函式會建立簡單的設計工具載入器會建立指定類型的元件，然後結束 載入程序。 這是直接的方法建立設計工具中的，假設所有儲存的狀態會在外部完成。 就內部而言，這會呼叫<xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A>和傳遞根元件類型。</xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A>"
  syntax:
    content: public DesignSurface (IServiceProvider parentProvider, Type rootComponentType);
    parameters:
    - id: parentProvider
      type: System.IServiceProvider
      description: "父服務提供者，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>是否用來解析服務沒有父代。"
    - id: rootComponentType
      type: System.Type
      description: "若要建立的根元件的類型。"
  overload: System.ComponentModel.Design.DesignSurface.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rootComponent</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加至<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已經過處置。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.BeginLoad(System.ComponentModel.Design.Serialization.DesignerLoader)
  id: BeginLoad(System.ComponentModel.Design.Serialization.DesignerLoader)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: BeginLoad(DesignerLoader)
  nameWithType: DesignSurface.BeginLoad(DesignerLoader)
  fullName: System.ComponentModel.Design.DesignSurface.BeginLoad(DesignerLoader)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "開始具有指定的設計工具載入器載入程序。"
  remarks: "因此載入可能會繼續進行這個呼叫傳回之後，可以是非同步，設計工具載入。 附加事件處理常式<xref:System.ComponentModel.Design.IDesignerHost.LoadComplete>設計介面已完成載入時收到通知的事件。</xref:System.ComponentModel.Design.IDesignerHost.LoadComplete>       之後<xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A>是呼叫，您可以立即取得檢視的設計工具中，因為設計工具載入器必須提供至少根元件時以非同步方式載入。</xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A>"
  syntax:
    content: public void BeginLoad (System.ComponentModel.Design.Serialization.DesignerLoader loader);
    parameters:
    - id: loader
      type: System.ComponentModel.Design.Serialization.DesignerLoader
      description: "要用於載入設計工具的設計工具載入器。"
  overload: System.ComponentModel.Design.DesignSurface.BeginLoad*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>loader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加至<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已經過處置。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.BeginLoad(System.Type)
  id: BeginLoad(System.Type)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: BeginLoad(Type)
  nameWithType: DesignSurface.BeginLoad(Type)
  fullName: System.ComponentModel.Design.DesignSurface.BeginLoad(Type)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "開始載入程序。"
  remarks: "當`rootComponentType`指定，則預設設計工具載入器，只需要建立的執行個體`rootComponentType`將使用。 因此載入可能會繼續進行這個呼叫傳回之後，可以是非同步，設計工具載入。 附加事件處理常式<xref:System.ComponentModel.Design.IDesignerHost.LoadComplete>設計介面已完成載入時收到通知的事件。</xref:System.ComponentModel.Design.IDesignerHost.LoadComplete>       BeginLoad 呼叫之後，您可以立即取得檢視的設計工具中，因為設計工具載入器必須提供至少根元件以非同步方式載入時。      > [!NOTE] > BeginLoad 方法會建立元件類型的執行個體，並初始化這個執行個體的設計工具。 <xref:System.ComponentModel.Design.DesignSurface.Loaded>此方法傳回之前，就會引發事件。</xref:System.ComponentModel.Design.DesignSurface.Loaded>"
  syntax:
    content: public void BeginLoad (Type rootComponentType);
    parameters:
    - id: rootComponentType
      type: System.Type
      description: "要在設計模式中建立的元件類型。"
  overload: System.ComponentModel.Design.DesignSurface.BeginLoad*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rootComponentType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加至<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已經過處置。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.ComponentContainer
  id: ComponentContainer
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: ComponentContainer
  nameWithType: DesignSurface.ComponentContainer
  fullName: System.ComponentModel.Design.DesignSurface.ComponentContainer
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "取得<xref href=&quot;System.ComponentModel.IContainer&quot;></xref>設計介面中的實作。"
  remarks: "ComponentContainer 屬性會保存目前處於設計模式下的所有物件。 當元件加入至 ComponentContainer 時，其設計工具中，如果有的話，會載入。 元件設置的網站提供的完整存取權的設計介面。"
  syntax:
    content: public System.ComponentModel.IContainer ComponentContainer { get; }
    return:
      type: System.ComponentModel.IContainer
      description: "<xref href=&quot;System.ComponentModel.IContainer&quot;> </xref>設計介面中的實作。"
  overload: System.ComponentModel.Design.DesignSurface.ComponentContainer*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加至<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已經過處置。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.CreateComponent(System.Type)
  id: CreateComponent(System.Type)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: CreateComponent(Type)
  nameWithType: DesignSurface.CreateComponent(Type)
  fullName: System.ComponentModel.Design.DesignSurface.CreateComponent(Type)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "建立元件的執行個體。"
  remarks: "設計介面呼叫 CreateComponent 方法<xref:System.ComponentModel.Design.IDesignerHost.CreateComponent%2A>方法來建立元件的執行個體。</xref:System.ComponentModel.Design.IDesignerHost.CreateComponent%2A> 應該建立元件，並將它加入至設計介面上的公用容器中。"
  syntax:
    content: protected virtual System.ComponentModel.IComponent CreateComponent (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "若要建立的元件類型。"
    return:
      type: System.ComponentModel.IComponent
      description: "新建立的元件。"
  overload: System.ComponentModel.Design.DesignSurface.CreateComponent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>componentType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加至<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已經過處置。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.CreateDesigner(System.ComponentModel.IComponent,System.Boolean)
  id: CreateDesigner(System.ComponentModel.IComponent,System.Boolean)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: CreateDesigner(IComponent,Boolean)
  nameWithType: DesignSurface.CreateDesigner(IComponent,Boolean)
  fullName: System.ComponentModel.Design.DesignSurface.CreateDesigner(IComponent,Boolean)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "將元件加入至容器時，會建立設計工具。"
  remarks: "設計介面呼叫 CreateDesigner 方法<xref:System.ComponentModel.IContainer>元件加入至容器中時。</xref:System.ComponentModel.IContainer> 這個方法會建立設計工具，但不會初始化。 當它傳回時，設計工具是由容器初始化。       CreateDesigner 可以建立兩個不同類型的設計工具︰ 根設計工具和一般設計工具。 根目錄設計工具是在設計介面中，它的定義是新增至容器的第一個元件的根元件的設計工具。 與一般設計工具的根目錄設計工具不同，因為他們負責顯示給使用者的使用者介面。 根目錄設計工具通常會協調設計介面上設計工具，可提供此介面的其餘部分。       這個方法的預設實作會委派至<xref:System.ComponentModel.TypeDescriptor>，並傳入<xref:System.ComponentModel.Design.IRootDesigner>為根目錄設計工具，設計工具的型別或<xref:System.ComponentModel.Design.IDesigner>一般設計工具。</xref:System.ComponentModel.Design.IDesigner> </xref:System.ComponentModel.Design.IRootDesigner> </xref:System.ComponentModel.TypeDescriptor> 您可以覆寫這個方法來要求特定類型的設計工具。"
  syntax:
    content: protected virtual System.ComponentModel.Design.IDesigner CreateDesigner (System.ComponentModel.IComponent component, bool rootDesigner);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "應建立在設計工具元件。"
    - id: rootDesigner
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要建立的根設計工具;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>來建立一般的設計工具。"
    return:
      type: System.ComponentModel.Design.IDesigner
      description: "要求的設計工具中，執行個體或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果找不到相符的設計工具。"
  overload: System.ComponentModel.Design.DesignSurface.CreateDesigner*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加至<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已經過處置。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.CreateInstance(System.Type)
  id: CreateInstance(System.Type)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: CreateInstance(Type)
  nameWithType: DesignSurface.CreateInstance(Type)
  fullName: System.ComponentModel.Design.DesignSurface.CreateInstance(Type)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "建立給定型別的執行個體。"
  remarks: "如果`type`是<xref:System.ComponentModel.IComponent>，類型的建構函式會搜尋 CreateInstance<xref:System.ComponentModel.IContainer>首先，後面接著空的建構函式。</xref:System.ComponentModel.IContainer> </xref:System.ComponentModel.IComponent>"
  syntax:
    content: protected virtual object CreateInstance (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "要建立的類型。"
    return:
      type: System.Object
      description: "新建立的物件。"
  overload: System.ComponentModel.Design.DesignSurface.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加至<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已經過處置。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.CreateNestedContainer(System.ComponentModel.IComponent)
  id: CreateNestedContainer(System.ComponentModel.IComponent)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: CreateNestedContainer(IComponent)
  nameWithType: DesignSurface.CreateNestedContainer(IComponent)
  fullName: System.ComponentModel.Design.DesignSurface.CreateNestedContainer(IComponent)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "建立適用於巢狀控制項或元件的容器。"
  remarks: "將元件加入巢狀容器會建立它的設計工具並使其適合所有服務可從設計介面。 加入巢狀容器的元件不會參與序列化。"
  syntax:
    content: public System.ComponentModel.INestedContainer CreateNestedContainer (System.ComponentModel.IComponent owningComponent);
    parameters:
    - id: owningComponent
      type: System.ComponentModel.IComponent
      description: "管理巢狀的容器的元件。"
    return:
      type: System.ComponentModel.INestedContainer
      description: "巢狀的容器。"
  overload: System.ComponentModel.Design.DesignSurface.CreateNestedContainer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>owningComponent</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加至<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已經過處置。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.CreateNestedContainer(System.ComponentModel.IComponent,System.String)
  id: CreateNestedContainer(System.ComponentModel.IComponent,System.String)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: CreateNestedContainer(IComponent,String)
  nameWithType: DesignSurface.CreateNestedContainer(IComponent,String)
  fullName: System.ComponentModel.Design.DesignSurface.CreateNestedContainer(IComponent,String)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "建立適用於巢狀控制項或元件的容器。"
  remarks: "將元件加入巢狀容器會建立它的設計工具並使其適合所有服務可從設計介面。 加入巢狀容器的元件不會參與序列化。       您可以藉由傳遞至值提供 CreateNestedContainer 方法的其他名稱`containerName`。"
  syntax:
    content: public System.ComponentModel.INestedContainer CreateNestedContainer (System.ComponentModel.IComponent owningComponent, string containerName);
    parameters:
    - id: owningComponent
      type: System.ComponentModel.IComponent
      description: "管理巢狀的容器的元件。"
    - id: containerName
      type: System.String
      description: "巢狀容器的其他名稱。"
    return:
      type: System.ComponentModel.INestedContainer
      description: "巢狀的容器。"
  overload: System.ComponentModel.Design.DesignSurface.CreateNestedContainer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>owningComponent</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加至<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已經過處置。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.Dispose
  id: Dispose
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: Dispose()
  nameWithType: DesignSurface.Dispose()
  fullName: System.ComponentModel.Design.DesignSurface.Dispose()
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "所使用的資源釋出<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;> </xref>。"
  remarks: "公用的 Dispose 方法會依循標準<xref:System.IDisposable>模式。</xref:System.IDisposable> 呼叫這個方法會終結在設計介面。 這個方法的受保護的版本是`virtual`就會遵循一般<xref:System.IDisposable>模式。</xref:System.IDisposable>      > [!NOTE] > 因為<xref:System.ComponentModel.Design.DesignSurface>並沒有任何原生程式碼以清除，它並沒有呼叫<xref:System.ComponentModel.Design.DesignSurface.Dispose%28System.Boolean%29>。</xref:System.ComponentModel.Design.DesignSurface.Dispose%28System.Boolean%29> finalizer</xref:System.ComponentModel.Design.DesignSurface> 如果您需要呼叫<xref:System.ComponentModel.Design.DesignSurface.Dispose%28System.Boolean%29>，您必須自己加入完成項。</xref:System.ComponentModel.Design.DesignSurface.Dispose%28System.Boolean%29>       當您完成使用<xref:System.ComponentModel.Design.DesignSurface>.</xref:System.ComponentModel.Design.DesignSurface>呼叫 Dispose Dispose 方法會使<xref:System.ComponentModel.Design.DesignSurface>中無法使用的狀態。</xref:System.ComponentModel.Design.DesignSurface> 在呼叫 Dispose 之後，您必須釋放所有參考<xref:System.ComponentModel.Design.DesignSurface>讓記憶體回收行程可以回收記憶體的<xref:System.ComponentModel.Design.DesignSurface>所佔用。</xref:System.ComponentModel.Design.DesignSurface> </xref:System.ComponentModel.Design.DesignSurface> 如需詳細資訊，請參閱[清除 Unmanaged 資源上](~/add/includes/ajax-current-ext-md.md)和[實作 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      > [!NOTE] > 永遠呼叫 Dispose 之後，再放開您的最後一個參考至<xref:System.ComponentModel.Design.DesignSurface>。</xref:System.ComponentModel.Design.DesignSurface> 否則，它所使用的資源將不會釋放直到記憶體回收行程呼叫<xref:System.ComponentModel.Design.DesignSurface>物件的`Finalize`方法。</xref:System.ComponentModel.Design.DesignSurface>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.ComponentModel.Design.DesignSurface.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DesignSurface.Dispose(Boolean)
  fullName: System.ComponentModel.Design.DesignSurface.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "所使用的資源釋出<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;> </xref>。"
  remarks: "公用<xref:System.ComponentModel.Design.DesignSurface.Dispose>方法會依循標準<xref:System.IDisposable>模式。</xref:System.IDisposable> </xref:System.ComponentModel.Design.DesignSurface.Dispose> 呼叫這個方法會終結在設計介面。 這個方法的受保護的版本是`virtual`就會遵循一般<xref:System.IDisposable>模式。</xref:System.IDisposable>      > [!NOTE] > 因為<xref:System.ComponentModel.Design.DesignSurface>並沒有任何原生程式碼以清除，它並沒有呼叫 Dispose finalizer。</xref:System.ComponentModel.Design.DesignSurface> 如果您需要呼叫 Dispose，您必須自己加入完成項。       這個方法會呼叫公用`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> `Dispose()`叫用受保護`Dispose(Boolean)`方法`disposing`參數設定為`true`。 <xref:System.Object.Finalize%2A>叫用`Dispose`與`disposing`設`false`。</xref:System.Object.Finalize%2A>       當`disposing`參數為 true，這個方法的任何 managed 物件所持有的資源全部釋出這個<xref:System.ComponentModel.Design.DesignSurface>參考。</xref:System.ComponentModel.Design.DesignSurface> 這個方法會叫用`Dispose()`每個參考物件的方法。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>表示釋放 managed 和 unmanaged 資源，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>表示只釋放 unmanaged 的資源。"
  overload: System.ComponentModel.Design.DesignSurface.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.Disposed
  id: Disposed
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: Disposed
  nameWithType: DesignSurface.Disposed
  fullName: System.ComponentModel.Design.DesignSurface.Disposed
  type: Event
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "處置設計介面時，就會發生。"
  remarks: "介面已處置的時，才會公開<xref:System.ComponentModel.Design.DesignSurface.Dispose%2A>方法<xref:System.ComponentModel.Design.DesignSurface>稱為。</xref:System.ComponentModel.Design.DesignSurface> </xref:System.ComponentModel.Design.DesignSurface.Dispose%2A>"
  syntax:
    content: public event EventHandler Disposed;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.DtelLoading
  id: DtelLoading
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: DtelLoading
  nameWithType: DesignSurface.DtelLoading
  fullName: System.ComponentModel.Design.DesignSurface.DtelLoading
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "取得值，指出是否**設計階段錯誤清單**正在載入。"
  syntax:
    content: public bool DtelLoading { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果**設計階段錯誤清單**已載入，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.Design.DesignSurface.DtelLoading*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.Flush
  id: Flush
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: Flush()
  nameWithType: DesignSurface.Flush()
  fullName: System.ComponentModel.Design.DesignSurface.Flush()
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "將序列化至設計介面的變更。"
  remarks: "可以呼叫 Flush 方法，以推送至設計介面向序列化程式所做的變更。 這可確保在設計介面和其序列化的狀態會同步處理。 這個方法的實際實作轉寄到與設計介面關聯的設計工具載入器。 設計工具載入器可能會選擇延後的變更，直到排清，或者它可能會選擇要保留的最新狀態的所有使用者變更序列化的資料。 Flush 方法可確保您的設計工具載入器選擇要使用的模型，不論序列化的狀態與同步處理實際的設計介面。"
  syntax:
    content: public void Flush ();
    parameters: []
  overload: System.ComponentModel.Design.DesignSurface.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.Flushed
  id: Flushed
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: Flushed
  nameWithType: DesignSurface.Flushed
  fullName: System.ComponentModel.Design.DesignSurface.Flushed
  type: Event
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "進行呼叫時，就會發生<xref:System.ComponentModel.Design.DesignSurface.Flush*>方法<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;> </xref>。</xref:System.ComponentModel.Design.DesignSurface.Flush*>"
  remarks: "設計工具載入器會在第一次，排清，則會引發 Flushed 事件。"
  syntax:
    content: public event EventHandler Flushed;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.GetService(System.Type)
  id: GetService(System.Type)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: GetService(Type)
  nameWithType: DesignSurface.GetService(Type)
  fullName: System.ComponentModel.Design.DesignSurface.GetService(Type)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "取得服務從服務容器。"
  remarks: "GetService 方法會擷取在設計介面的服務容器中的服務。 此外，這個方法會轉送至設計介面在建構階段指定任何服務提供者。"
  syntax:
    content: public object GetService (Type serviceType);
    parameters:
    - id: serviceType
      type: System.Type
      description: "要擷取的服務類型。"
    return:
      type: System.Object
      description: "物件，實作，或為衍生的類別， <code> serviceType </code>，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果服務不存在服務容器中。"
  overload: System.ComponentModel.Design.DesignSurface.GetService*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.IsLoaded
  id: IsLoaded
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: IsLoaded
  nameWithType: DesignSurface.IsLoaded
  fullName: System.ComponentModel.Design.DesignSurface.IsLoaded
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "取得值，指出目前是否已載入設計介面。"
  syntax:
    content: public bool IsLoaded { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果目前已載入設計介面。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.Design.DesignSurface.IsLoaded*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.Loaded
  id: Loaded
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: Loaded
  nameWithType: DesignSurface.Loaded
  fullName: System.ComponentModel.Design.DesignSurface.Loaded
  type: Event
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "設計工具載入完成時發生。"
  remarks: "載入的事件都會引發成功載入，以及失敗的項目。 如果此事件處理常式中的程式碼擲回例外狀況，在設計工具將會卸載。       <xref:System.ComponentModel.Design.LoadedEventArgs>物件可用來判斷如果載入成功，而且同時可提供載入期間發生之錯誤的清單。</xref:System.ComponentModel.Design.LoadedEventArgs>      > [!NOTE] > 前提是序列化系統可以容忍錯誤成功的載入，發生錯誤。"
  syntax:
    content: public event System.ComponentModel.Design.LoadedEventHandler Loaded;
    return:
      type: System.ComponentModel.Design.LoadedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.LoadErrors
  id: LoadErrors
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: LoadErrors
  nameWithType: DesignSurface.LoadErrors
  fullName: System.ComponentModel.Design.DesignSurface.LoadErrors
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "傳回載入錯誤或 void 集合的集合。"
  syntax:
    content: public System.Collections.ICollection LoadErrors { get; }
    return:
      type: System.Collections.ICollection
      description: "A<xref:System.Collections.ICollection>載入錯誤。</xref:System.Collections.ICollection>"
  overload: System.ComponentModel.Design.DesignSurface.LoadErrors*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.Loading
  id: Loading
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: Loading
  nameWithType: DesignSurface.Loading
  fullName: System.ComponentModel.Design.DesignSurface.Loading
  type: Event
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "在設計工具載入時發生。"
  syntax:
    content: public event EventHandler Loading;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.OnLoaded(System.ComponentModel.Design.LoadedEventArgs)
  id: OnLoaded(System.ComponentModel.Design.LoadedEventArgs)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: OnLoaded(LoadedEventArgs)
  nameWithType: DesignSurface.OnLoaded(LoadedEventArgs)
  fullName: System.ComponentModel.Design.DesignSurface.OnLoaded(LoadedEventArgs)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "引發<xref href=&quot;System.ComponentModel.Design.DesignSurface.Loaded&quot;></xref>事件。"
  syntax:
    content: protected virtual void OnLoaded (System.ComponentModel.Design.LoadedEventArgs e);
    parameters:
    - id: e
      type: System.ComponentModel.Design.LoadedEventArgs
      description: "A <xref href=&quot;System.ComponentModel.Design.LoadedEventArgs&quot;> </xref>包含事件資料。"
  overload: System.ComponentModel.Design.DesignSurface.OnLoaded*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.OnLoading(System.EventArgs)
  id: OnLoading(System.EventArgs)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: OnLoading(EventArgs)
  nameWithType: DesignSurface.OnLoading(EventArgs)
  fullName: System.ComponentModel.Design.DesignSurface.OnLoading(EventArgs)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "引發<xref href=&quot;System.ComponentModel.Design.DesignSurface.Loading&quot;></xref>事件。"
  syntax:
    content: protected virtual void OnLoading (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件資料。</xref:System.EventArgs>"
  overload: System.ComponentModel.Design.DesignSurface.OnLoading*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.OnUnloaded(System.EventArgs)
  id: OnUnloaded(System.EventArgs)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: OnUnloaded(EventArgs)
  nameWithType: DesignSurface.OnUnloaded(EventArgs)
  fullName: System.ComponentModel.Design.DesignSurface.OnUnloaded(EventArgs)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "引發<xref href=&quot;System.ComponentModel.Design.DesignSurface.Unloaded&quot;></xref>事件。"
  syntax:
    content: protected virtual void OnUnloaded (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件資料。</xref:System.EventArgs>"
  overload: System.ComponentModel.Design.DesignSurface.OnUnloaded*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.OnUnloading(System.EventArgs)
  id: OnUnloading(System.EventArgs)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: OnUnloading(EventArgs)
  nameWithType: DesignSurface.OnUnloading(EventArgs)
  fullName: System.ComponentModel.Design.DesignSurface.OnUnloading(EventArgs)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "引發<xref href=&quot;System.ComponentModel.Design.DesignSurface.Unloading&quot;></xref>事件。"
  syntax:
    content: protected virtual void OnUnloading (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件資料。</xref:System.EventArgs>"
  overload: System.ComponentModel.Design.DesignSurface.OnUnloading*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.OnViewActivate(System.EventArgs)
  id: OnViewActivate(System.EventArgs)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: OnViewActivate(EventArgs)
  nameWithType: DesignSurface.OnViewActivate(EventArgs)
  fullName: System.ComponentModel.Design.DesignSurface.OnViewActivate(EventArgs)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "引發<xref href=&quot;System.ComponentModel.Design.DesignSurface.ViewActivated&quot;></xref>事件。"
  syntax:
    content: protected virtual void OnViewActivate (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件資料。</xref:System.EventArgs>"
  overload: System.ComponentModel.Design.DesignSurface.OnViewActivate*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.ServiceContainer
  id: ServiceContainer
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: ServiceContainer
  nameWithType: DesignSurface.ServiceContainer
  fullName: System.ComponentModel.Design.DesignSurface.ServiceContainer
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "取得服務容器。"
  remarks: "在建構階段<xref:System.ComponentModel.Design.DesignSurface>將預設的服務加入到此服務容器。</xref:System.ComponentModel.Design.DesignSurface> 預設服務處於目前狀態，或者您可以將它們移除並取代它們。 預設的服務是所有要求所建立，因此不會遺失任何在建構階段加入它們的效能。"
  syntax:
    content: protected System.ComponentModel.Design.ServiceContainer ServiceContainer { get; }
    return:
      type: System.ComponentModel.Design.ServiceContainer
      description: "設計介面中所包含的設計工具會提供所有服務的服務容器。"
  overload: System.ComponentModel.Design.DesignSurface.ServiceContainer*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加至<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已經過處置。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.Unloaded
  id: Unloaded
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: Unloaded
  nameWithType: DesignSurface.Unloaded
  fullName: System.ComponentModel.Design.DesignSurface.Unloaded
  type: Event
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "發生於設計工具已卸載完成。"
  syntax:
    content: public event EventHandler Unloaded;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.Unloading
  id: Unloading
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: Unloading
  nameWithType: DesignSurface.Unloading
  fullName: System.ComponentModel.Design.DesignSurface.Unloading
  type: Event
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "設計工具卸除時發生。"
  remarks: "當設計工具卸載時，就會終結該設計工具的整個狀態，包括設計工具的檢視。 檢視應該會在這次沒有父代。"
  syntax:
    content: public event EventHandler Unloading;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.View
  id: View
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: View
  nameWithType: DesignSurface.View
  fullName: System.ComponentModel.Design.DesignSurface.View
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "取得根設計工具的檢視。"
  remarks: "<xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A>必須先啟動載入程序呼叫方法。</xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> 很可能傳回檢視設計工具載入器完成載入，因為根設計工具中，提供檢視，是由設計工具載入器建立的第一個物件之前。 如果無法使用，以檢視<xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A>引發例外狀況。</xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A>       檢視技術概念已過時。 但是，仍在介面中的回溯相容性的根設計工具。 其用途隱藏的任何人使用<xref:System.ComponentModel.Design.DesignSurface>物件。</xref:System.ComponentModel.Design.DesignSurface> 檢視屬性隱藏檢視技術，藉由傳遞回根目錄設計工具支援的技術。"
  example:
  - "The following code example shows how View hides view technologies.  \n  \n [C#]  \n  \n `IRootDesigner d;`  \n  \n `ViewTechnology[] supported = d.SupportedTechnologies;`  \n  \n `return d.GetView(supported[0]);`"
  syntax:
    content: public object View { get; }
    return:
      type: System.Object
      description: "根目錄設計工具的檢視。"
  overload: System.ComponentModel.Design.DesignSurface.View*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "沒有載入設計介面、 設計工具載入器尚未建立根設計工具或設計介面中完成的負載，但失敗。 詳細的資訊可能用於<xref:System.Exception.InnerException*>.</xref:System.Exception.InnerException*>"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "設計工具已載入，但它不提供與這個設計介面相容的檢視。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加至<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已經過處置。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.ViewActivated
  id: ViewActivated
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: ViewActivated
  nameWithType: DesignSurface.ViewActivated
  fullName: System.ComponentModel.Design.DesignSurface.ViewActivated
  type: Event
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "發生時<xref:System.ComponentModel.Design.IDesignerHost.Activate*>上呼叫方法<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>。</xref:System.ComponentModel.Design.IDesignerHost.Activate*>"
  remarks: "如果您想要支援<xref:System.ComponentModel.Design.IDesignerHost.Activate%2A>方法，您的事件處理常式應該啟用這個設計介面的視窗。</xref:System.ComponentModel.Design.IDesignerHost.Activate%2A>"
  syntax:
    content: public event EventHandler ViewActivated;
    return:
      type: System.EventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ComponentModel.Design.DesignSurface.#ctor
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: DesignSurface()
  nameWithType: DesignSurface.DesignSurface()
  fullName: System.ComponentModel.Design.DesignSurface.DesignSurface()
- uid: System.ComponentModel.Design.DesignSurface.#ctor(System.IServiceProvider)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: DesignSurface(IServiceProvider)
  nameWithType: DesignSurface.DesignSurface(IServiceProvider)
  fullName: System.ComponentModel.Design.DesignSurface.DesignSurface(IServiceProvider)
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.ComponentModel.Design.DesignSurface.#ctor(System.Type)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: DesignSurface(Type)
  nameWithType: DesignSurface.DesignSurface(Type)
  fullName: System.ComponentModel.Design.DesignSurface.DesignSurface(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.Design.DesignSurface.#ctor(System.IServiceProvider,System.Type)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: DesignSurface(IServiceProvider,Type)
  nameWithType: DesignSurface.DesignSurface(IServiceProvider,Type)
  fullName: System.ComponentModel.Design.DesignSurface.DesignSurface(IServiceProvider,Type)
- uid: System.ComponentModel.Design.DesignSurface.BeginLoad(System.ComponentModel.Design.Serialization.DesignerLoader)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: BeginLoad(DesignerLoader)
  nameWithType: DesignSurface.BeginLoad(DesignerLoader)
  fullName: System.ComponentModel.Design.DesignSurface.BeginLoad(DesignerLoader)
- uid: System.ComponentModel.Design.Serialization.DesignerLoader
  parent: System.ComponentModel.Design.Serialization
  isExternal: false
  name: DesignerLoader
  nameWithType: DesignerLoader
  fullName: System.ComponentModel.Design.Serialization.DesignerLoader
- uid: System.ComponentModel.Design.DesignSurface.BeginLoad(System.Type)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: BeginLoad(Type)
  nameWithType: DesignSurface.BeginLoad(Type)
  fullName: System.ComponentModel.Design.DesignSurface.BeginLoad(Type)
- uid: System.ComponentModel.Design.DesignSurface.ComponentContainer
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: ComponentContainer
  nameWithType: DesignSurface.ComponentContainer
  fullName: System.ComponentModel.Design.DesignSurface.ComponentContainer
- uid: System.ComponentModel.IContainer
  parent: System.ComponentModel
  isExternal: false
  name: IContainer
  nameWithType: IContainer
  fullName: System.ComponentModel.IContainer
- uid: System.ComponentModel.Design.DesignSurface.CreateComponent(System.Type)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: CreateComponent(Type)
  nameWithType: DesignSurface.CreateComponent(Type)
  fullName: System.ComponentModel.Design.DesignSurface.CreateComponent(Type)
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.ComponentModel.Design.DesignSurface.CreateDesigner(System.ComponentModel.IComponent,System.Boolean)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: CreateDesigner(IComponent,Boolean)
  nameWithType: DesignSurface.CreateDesigner(IComponent,Boolean)
  fullName: System.ComponentModel.Design.DesignSurface.CreateDesigner(IComponent,Boolean)
- uid: System.ComponentModel.Design.IDesigner
  parent: System.ComponentModel.Design
  isExternal: false
  name: IDesigner
  nameWithType: IDesigner
  fullName: System.ComponentModel.Design.IDesigner
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.Design.DesignSurface.CreateInstance(System.Type)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: CreateInstance(Type)
  nameWithType: DesignSurface.CreateInstance(Type)
  fullName: System.ComponentModel.Design.DesignSurface.CreateInstance(Type)
- uid: System.ComponentModel.Design.DesignSurface.CreateNestedContainer(System.ComponentModel.IComponent)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: CreateNestedContainer(IComponent)
  nameWithType: DesignSurface.CreateNestedContainer(IComponent)
  fullName: System.ComponentModel.Design.DesignSurface.CreateNestedContainer(IComponent)
- uid: System.ComponentModel.INestedContainer
  parent: System.ComponentModel
  isExternal: false
  name: INestedContainer
  nameWithType: INestedContainer
  fullName: System.ComponentModel.INestedContainer
- uid: System.ComponentModel.Design.DesignSurface.CreateNestedContainer(System.ComponentModel.IComponent,System.String)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: CreateNestedContainer(IComponent,String)
  nameWithType: DesignSurface.CreateNestedContainer(IComponent,String)
  fullName: System.ComponentModel.Design.DesignSurface.CreateNestedContainer(IComponent,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.Design.DesignSurface.Dispose
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: Dispose()
  nameWithType: DesignSurface.Dispose()
  fullName: System.ComponentModel.Design.DesignSurface.Dispose()
- uid: System.ComponentModel.Design.DesignSurface.Dispose(System.Boolean)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DesignSurface.Dispose(Boolean)
  fullName: System.ComponentModel.Design.DesignSurface.Dispose(Boolean)
- uid: System.ComponentModel.Design.DesignSurface.Disposed
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: Disposed
  nameWithType: DesignSurface.Disposed
  fullName: System.ComponentModel.Design.DesignSurface.Disposed
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.ComponentModel.Design.DesignSurface.DtelLoading
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: DtelLoading
  nameWithType: DesignSurface.DtelLoading
  fullName: System.ComponentModel.Design.DesignSurface.DtelLoading
- uid: System.ComponentModel.Design.DesignSurface.Flush
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: Flush()
  nameWithType: DesignSurface.Flush()
  fullName: System.ComponentModel.Design.DesignSurface.Flush()
- uid: System.ComponentModel.Design.DesignSurface.Flushed
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: Flushed
  nameWithType: DesignSurface.Flushed
  fullName: System.ComponentModel.Design.DesignSurface.Flushed
- uid: System.ComponentModel.Design.DesignSurface.GetService(System.Type)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: GetService(Type)
  nameWithType: DesignSurface.GetService(Type)
  fullName: System.ComponentModel.Design.DesignSurface.GetService(Type)
- uid: System.ComponentModel.Design.DesignSurface.IsLoaded
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: IsLoaded
  nameWithType: DesignSurface.IsLoaded
  fullName: System.ComponentModel.Design.DesignSurface.IsLoaded
- uid: System.ComponentModel.Design.DesignSurface.Loaded
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: Loaded
  nameWithType: DesignSurface.Loaded
  fullName: System.ComponentModel.Design.DesignSurface.Loaded
- uid: System.ComponentModel.Design.LoadedEventHandler
  parent: System.ComponentModel.Design
  isExternal: false
  name: LoadedEventHandler
  nameWithType: LoadedEventHandler
  fullName: System.ComponentModel.Design.LoadedEventHandler
- uid: System.ComponentModel.Design.DesignSurface.LoadErrors
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: LoadErrors
  nameWithType: DesignSurface.LoadErrors
  fullName: System.ComponentModel.Design.DesignSurface.LoadErrors
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.ComponentModel.Design.DesignSurface.Loading
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: Loading
  nameWithType: DesignSurface.Loading
  fullName: System.ComponentModel.Design.DesignSurface.Loading
- uid: System.ComponentModel.Design.DesignSurface.OnLoaded(System.ComponentModel.Design.LoadedEventArgs)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: OnLoaded(LoadedEventArgs)
  nameWithType: DesignSurface.OnLoaded(LoadedEventArgs)
  fullName: System.ComponentModel.Design.DesignSurface.OnLoaded(LoadedEventArgs)
- uid: System.ComponentModel.Design.LoadedEventArgs
  parent: System.ComponentModel.Design
  isExternal: false
  name: LoadedEventArgs
  nameWithType: LoadedEventArgs
  fullName: System.ComponentModel.Design.LoadedEventArgs
- uid: System.ComponentModel.Design.DesignSurface.OnLoading(System.EventArgs)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: OnLoading(EventArgs)
  nameWithType: DesignSurface.OnLoading(EventArgs)
  fullName: System.ComponentModel.Design.DesignSurface.OnLoading(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.ComponentModel.Design.DesignSurface.OnUnloaded(System.EventArgs)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: OnUnloaded(EventArgs)
  nameWithType: DesignSurface.OnUnloaded(EventArgs)
  fullName: System.ComponentModel.Design.DesignSurface.OnUnloaded(EventArgs)
- uid: System.ComponentModel.Design.DesignSurface.OnUnloading(System.EventArgs)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: OnUnloading(EventArgs)
  nameWithType: DesignSurface.OnUnloading(EventArgs)
  fullName: System.ComponentModel.Design.DesignSurface.OnUnloading(EventArgs)
- uid: System.ComponentModel.Design.DesignSurface.OnViewActivate(System.EventArgs)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: OnViewActivate(EventArgs)
  nameWithType: DesignSurface.OnViewActivate(EventArgs)
  fullName: System.ComponentModel.Design.DesignSurface.OnViewActivate(EventArgs)
- uid: System.ComponentModel.Design.DesignSurface.ServiceContainer
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: ServiceContainer
  nameWithType: DesignSurface.ServiceContainer
  fullName: System.ComponentModel.Design.DesignSurface.ServiceContainer
- uid: System.ComponentModel.Design.ServiceContainer
  parent: System.ComponentModel.Design
  isExternal: false
  name: ServiceContainer
  nameWithType: ServiceContainer
  fullName: System.ComponentModel.Design.ServiceContainer
- uid: System.ComponentModel.Design.DesignSurface.Unloaded
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: Unloaded
  nameWithType: DesignSurface.Unloaded
  fullName: System.ComponentModel.Design.DesignSurface.Unloaded
- uid: System.ComponentModel.Design.DesignSurface.Unloading
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: Unloading
  nameWithType: DesignSurface.Unloading
  fullName: System.ComponentModel.Design.DesignSurface.Unloading
- uid: System.ComponentModel.Design.DesignSurface.View
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: View
  nameWithType: DesignSurface.View
  fullName: System.ComponentModel.Design.DesignSurface.View
- uid: System.ComponentModel.Design.DesignSurface.ViewActivated
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: ViewActivated
  nameWithType: DesignSurface.ViewActivated
  fullName: System.ComponentModel.Design.DesignSurface.ViewActivated
- uid: System.ComponentModel.Design.DesignSurface.#ctor*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: DesignSurface
  nameWithType: DesignSurface.DesignSurface
- uid: System.ComponentModel.Design.DesignSurface.BeginLoad*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: BeginLoad
  nameWithType: DesignSurface.BeginLoad
- uid: System.ComponentModel.Design.DesignSurface.ComponentContainer*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: ComponentContainer
  nameWithType: DesignSurface.ComponentContainer
- uid: System.ComponentModel.Design.DesignSurface.CreateComponent*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: CreateComponent
  nameWithType: DesignSurface.CreateComponent
- uid: System.ComponentModel.Design.DesignSurface.CreateDesigner*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: CreateDesigner
  nameWithType: DesignSurface.CreateDesigner
- uid: System.ComponentModel.Design.DesignSurface.CreateInstance*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: CreateInstance
  nameWithType: DesignSurface.CreateInstance
- uid: System.ComponentModel.Design.DesignSurface.CreateNestedContainer*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: CreateNestedContainer
  nameWithType: DesignSurface.CreateNestedContainer
- uid: System.ComponentModel.Design.DesignSurface.Dispose*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: Dispose
  nameWithType: DesignSurface.Dispose
- uid: System.ComponentModel.Design.DesignSurface.DtelLoading*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: DtelLoading
  nameWithType: DesignSurface.DtelLoading
- uid: System.ComponentModel.Design.DesignSurface.Flush*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: Flush
  nameWithType: DesignSurface.Flush
- uid: System.ComponentModel.Design.DesignSurface.GetService*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: GetService
  nameWithType: DesignSurface.GetService
- uid: System.ComponentModel.Design.DesignSurface.IsLoaded*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: IsLoaded
  nameWithType: DesignSurface.IsLoaded
- uid: System.ComponentModel.Design.DesignSurface.LoadErrors*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: LoadErrors
  nameWithType: DesignSurface.LoadErrors
- uid: System.ComponentModel.Design.DesignSurface.OnLoaded*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: OnLoaded
  nameWithType: DesignSurface.OnLoaded
- uid: System.ComponentModel.Design.DesignSurface.OnLoading*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: OnLoading
  nameWithType: DesignSurface.OnLoading
- uid: System.ComponentModel.Design.DesignSurface.OnUnloaded*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: OnUnloaded
  nameWithType: DesignSurface.OnUnloaded
- uid: System.ComponentModel.Design.DesignSurface.OnUnloading*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: OnUnloading
  nameWithType: DesignSurface.OnUnloading
- uid: System.ComponentModel.Design.DesignSurface.OnViewActivate*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: OnViewActivate
  nameWithType: DesignSurface.OnViewActivate
- uid: System.ComponentModel.Design.DesignSurface.ServiceContainer*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: ServiceContainer
  nameWithType: DesignSurface.ServiceContainer
- uid: System.ComponentModel.Design.DesignSurface.View*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: View
  nameWithType: DesignSurface.View
