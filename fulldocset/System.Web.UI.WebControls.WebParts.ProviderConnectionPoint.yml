### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  id: ProviderConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  langs:
  - csharp
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  type: Class
  summary: "定義可讓做為伺服器控制項的提供者與取用者連接的連接點物件。"
  remarks: "在兩個伺服器控制項之間的每個 Web 組件連接，每個控制項必須有 （還有其他需求） 可讓它連接至其他控制項，並提供或取用資料，為提供者或消費者連接指定控制項是否根據相關聯的連接點物件。 A<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>物件通常包含如何將控制項可以連接到另一個控制項，它可以共用的資料類型的詳細資料。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 做為連接提供者的控制項，其連接點必須 ProviderConnectionPoint 物件。 如需 Web 組件連接和連接點的詳細資訊，請參閱 < 另請參閱下一節中所列的主題。       若要建立 ProviderConnectionPoint 物件，不需要數個步驟︰ 1。  建立介面。 當共用資料提供者與取用者時，它會取得介面的執行個體，並將該執行個體傳回給取用者。      2.  提供者中實作的介面。 A<xref:System.Web.UI.WebControls.WebParts.WebPart>或其他伺服器控制項 (任何類型的伺服器控制項中<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>可用區域)，將會提供者必須實作第一個步驟中所建立的介面。</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      3.  識別回呼方法。 提供者中的方法，必須識別為回呼方法，以建立連接。 這個方法會傳回實作介面的執行個體的取用者。 識別提供者中的回呼方法的 Web 組件方法是加入`ConnectionProvider`中繼資料屬性 (由<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>類別) 傳回的介面執行個體的方法。</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> 加入屬性時，唯一的必要的參數時要使用的提供者連接點的顯示名稱。 可以加入選擇性參數也是，例如連接點的識別碼。       控制項已具備做為提供者之後，此控制項可以參與連接 （假設，消費者控制項也備妥可用）。 若要建立靜態、 宣告式連接的網頁標記中，開發人員可以使用`<asp:webpartconnection>`項目。 如果`ConnectionProvider`屬性提供者的原始碼識別的回呼方法中指定連接點的識別碼，則該值必須指派給`ProviderConnectionPointID`屬性`<asp:webpartconnection>`頁面上的元素。 開發人員可能會指定提供者連接點識別碼的其中一個原因是提供者控制項中是否有多個連接點。 如果提供者連接點提供者控制項中沒有指定的識別碼，值沒有指派給`ProviderConnectionPointID`頁面中，屬性，因為連接將使用預設值取自建立<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>欄位。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       若要在程式碼中建立連接，開發人員必須藉由呼叫建立新的 ProviderConnectionPoint 物件<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>方法並傳遞給它的提供者的控制項，以及識別碼或索引定義 ProviderConnectionPoint 物件提供者控制項中的識別碼。</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> 傳回的 ProviderConnectionPoint 物件，以及提供者控制項的參考，取用者控制項，和對應的參考<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>物件，全部都是傳遞至<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法來建立新<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件。</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       雖然開發人員可以使用提供者連接點，以宣告方式或以程式設計方式建立連接的一部分，使用者也可以在與提供者連接點來建立連接，透過使用者介面 (UI) 互動。 如果開發人員宣告<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控制項在網頁上，它會提供執行階段的 UI，讓使用者能夠建立連接。</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 如果使用者選擇為起點來建立連接，即可取用者控制其連接動詞命令 （也可以選擇提供者; 沒有任何差異，產生的連線中），它們會在 UI 中看到可用的提供者連接點 （或如果多個點） 的顯示名稱的下拉式清單控制項。 使用者必須選取提供者連接點，以建立連接。       ProviderConnectionPoint 物件直接與特定的提供者控制項產生關聯，並將連線的相關詳細資料儲存在它繼承自基底<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>類別</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>的屬性 例如，在繼承<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>屬性，提供者連接點會持續提供者傳回的介面的型別。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 如果提供者和消費者中都使用相同的連接介面型別，這些控制項是相容，並且能夠建立直接連接。 如果提供者和消費者不能使用相同的介面類型，它們不相容，而且必須使用<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>物件翻譯的提供者連接點<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>值到取用者可以使用的型別。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 另一個重要的繼承的屬性是<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>屬性，提供易記的名稱，以顯示在 UI，供使用者選擇提供者連接點，當建立連接。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> 顯示名稱是必要的參數，當開發人員將`ConnectionProvider`屬性設定為提供者控制項的回呼方法。 繼承<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>屬性也很有用，如前文所述，，因為它提供唯一的識別項的提供者連接點的提供者有多個連接點。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> 提供者可以有多個定義，並在此情況下，當開發人員將加入的 ProviderConnectionPoint 物件`ConnectionProvider`屬性給方法時，他們應該指定區別每一個連接點識別碼值。 其中一個其他值得注意繼承的屬性是<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>屬性，指出提供者連接點是否可同時連接到多個取用者。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> 這個屬性值`true`預設提供者連接點 (而其預設值為`false`的消費者連接點)。       ProviderConnectionPoint 類別會加入數個唯一的方法繼承自此<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>類別</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>的成員 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法會擷取回呼方法會傳回給取用者介面的執行個體。</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>方法會擷取額外的消費者介面屬於現有的連接，但不是介面可用來建立連接。</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>"
  example:
  - "The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a provider connection point.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. This demonstrates one way of creating a connection--note the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element. You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method. In this case, a ProviderConnectionPoint object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of the **ZIP Code Consumer**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the **Disconnect** button to terminate the existing static connection. Click the **Create a Connection to a Provider** link. The UI now displays a drop-down control that lists the provider connection point display name. Select the connection point in the drop-down list, and then click **Connect** to complete the connection. Next, click **Disconnect** again. Then, click the **Dynamic Connection** button to create a connection programmatically. Use the **Display Mode** control to return the page to browse mode. Click the **Connection Point Details** button again, to once more indicate details about the provider connection point object.  \n  \n The example has demonstrated establishing a connection and using a provider connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a ProviderConnectionPoint object; and a connection created by a user through the connection UI."
  syntax:
    content: 'public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.WebParts.ConnectionPoint
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  id: '#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)'
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "初始化的新執行個體<xref href=&quot;System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&quot;></xref>類別。"
  remarks: "ProviderConnectionPoint 建構函式的<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>類別只會呼叫基底建構函式，將各種不同的參數傳遞給它，並初始化基底類別。</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       基底類別建構函式會檢查幾個連接點的參數，並可能會擲回某些例外狀況。 如需可能的例外狀況的清單，請參閱例外狀況 > 一節。       您可以呼叫 ProviderConnectionPoint 建構函式來建立您自己的執行個體的<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>類別。</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 不過，如果您只建立連線，並不會擴充類別，您應該呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>方法，以從提供者傳回現有的連接點物件。</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>"
  example:
  - "The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class to create a custom provider connection point.  \n  \n The code example has three parts:  \n  \n-   A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.  \n  \n-   A Web page that hosts the controls in a static connection.  \n  \n-   An explanation of how to run the example code.  \n  \n The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class, named `TableProviderConnectionPoint`. Note that the constructor of the `TableProviderConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section. Also note that in the `TableProviderWebPart` class, the `GetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionProvider` attribute declares the custom `TableProviderConnectionPoint` as a parameter. This demonstrates how to create a custom provider connection point and then associate it with a provider control. This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/add/codesnippet/csharp/4405c9d3-e4fd-4235-883f-_1.cs)]  \n  \n The second part of the code example is the Web page that hosts the custom controls in a static Web Parts connection. At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls. The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/add/codesnippet/csharp/4405c9d3-e4fd-4235-883f-_2.aspx)]  \n  \n Load the page in a browser. The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page."
  syntax:
    content: public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    parameters:
    - id: callbackMethod
      type: System.Reflection.MethodInfo
      description: "傳回給取用者建立連接的介面執行個體的提供者控制項中的方法。"
    - id: interfaceType
      type: System.Type
      description: "<xref:System.Type>的提供者是用來取用者的介面。</xref:System.Type>"
    - id: controlType
      type: System.Type
      description: "<xref:System.Type>與提供者連接點相關聯的提供者控制項。</xref:System.Type>"
    - id: displayName
      type: System.String
      description: "顯示給使用者連接的使用者介面 (UI) 中的提供者連接點易記顯示名稱。"
    - id: id
      type: System.String
      description: "提供者連接點的唯一識別碼。"
    - id: allowsMultipleConnections
      type: System.Boolean
      description: "布林值，表示提供者連接點是否可以具有多個取用者的同時連線。"
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callbackMethod</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>interfaceType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>controlType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>displayName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\")."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>controlType </code>不是相同的型別提供者控制項 （或有效的類別衍生自它）。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  id: GetObject(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: GetObject(Control)
  nameWithType: ProviderConnectionPoint.GetObject(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "取得要傳回給取用者的介面執行個體的提供者控制項的回呼方法會叫用。"
  remarks: "這個方法會傳回物件，從用來建立連接的介面的執行個體提供者控制。 物件的型別會實作介面的型別。 例如，兩個 Web 組件控制項集合中的連線實作的介面是<xref:System.Web.UI.WebControls.WebParts.IWebPartField>和<xref:System.Web.UI.WebControls.WebParts.IWebPartRow>.</xref:System.Web.UI.WebControls.WebParts.IWebPartRow> </xref:System.Web.UI.WebControls.WebParts.IWebPartField> GetObject 方法上呼叫時<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件，如果相關聯的提供者會實作這些介面之一，傳回的物件都屬於相同類型。</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       GetObject 方法會呼叫<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>物件正在啟動連線時。</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 這是實際起始的連線，並開始的程序，可讓共用資料的兩個控制項的重要步驟。       取用者中的控制項的連接必須能夠使用的相同介面的型別為提供者。 如果不存在，會不相容的控制項和<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>物件必須用來建立連接。</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  syntax:
    content: public virtual object GetObject (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "做為 Web 組件連接提供者的控制項。"
    return:
      type: System.Object
      description: "<xref:System.Object>，是介面的提供者的執行個體傳回給取用者建立連接。</xref:System.Object>"
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>control</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  id: GetSecondaryInterfaces(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: GetSecondaryInterfaces(Control)
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "取得選擇性的輔助介面，可支援的提供者連接點集合。"
  remarks: "提供者連接點物件一律會有預設介面用來建立與取用者的連線。 預設介面的執行個體藉由呼叫擷取<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>物件。</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>       不過，某些提供者的控制項將會實作多個介面，提供給取用者連接的一部分。 這些介面，沒有預設值，用來建立連接，稱為次要介面。 GetSecondaryInterfaces 方法可用來傳回的次要的介面參考的集合一樣<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法會傳回預設介面的參考。</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>"
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "做為 Web 組件連接提供者的控制項。"
    return:
      type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&quot;> </xref>控制項當做提供者所提供的其他介面。"
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.ConnectionPoint
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetObject(Control)
  nameWithType: ProviderConnectionPoint.GetObject(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(Control)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetSecondaryInterfaces(Control)
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(Control)
- uid: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConnectionInterfaceCollection
  nameWithType: ConnectionInterfaceCollection
  fullName: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetObject
  nameWithType: ProviderConnectionPoint.GetObject
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetSecondaryInterfaces
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces
