### YamlMime:ManagedReference
items:
- uid: Microsoft.Win32.Registry
  id: Registry
  children:
  - Microsoft.Win32.Registry.ClassesRoot
  - Microsoft.Win32.Registry.CurrentConfig
  - Microsoft.Win32.Registry.CurrentUser
  - Microsoft.Win32.Registry.DynData
  - Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
  - Microsoft.Win32.Registry.LocalMachine
  - Microsoft.Win32.Registry.PerformanceData
  - Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
  - Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  - Microsoft.Win32.Registry.Users
  langs:
  - csharp
  name: Registry
  nameWithType: Registry
  fullName: Microsoft.Win32.Registry
  type: Class
  summary: "提供<xref href=&quot;Microsoft.Win32.RegistryKey&quot;></xref>代表根目錄機碼，在 Windows 登錄中的物件和<xref uid=&quot;langword_csharp_static&quot; name=&quot;static&quot; href=&quot;&quot;></xref>方法來存取索引鍵/值組。"
  remarks: "這個類別會提供標準的根執行 Windows 的電腦上登錄中找到的索引鍵集。 登錄是儲存區設備，如需有關應用程式、 使用者與預設系統設定資訊。 例如，應用程式能夠使用登錄來儲存後關閉應用程式時，要保留所需的資訊，並重新載入應用程式時，存取相同的資訊。 比方說，您可以儲存色彩偏好設定、 螢幕位置或將視窗大小。 您可以控制這項資料的每位使用者將資訊儲存在登錄中的不同位置。       基底或根<xref:Microsoft.Win32.RegistryKey>所公開的執行個體`Registry`類別描述子機碼和登錄中的值的基本儲存機制。</xref:Microsoft.Win32.RegistryKey> 因為登錄會視其存在，所有索引鍵都是唯讀的。 所公開的索引鍵`Registry`是︰<xref:Microsoft.Win32.Registry.CurrentUser>儲存使用者喜好設定的相關資訊。</xref:Microsoft.Win32.Registry.CurrentUser>       <xref:Microsoft.Win32.Registry.LocalMachine>儲存在本機電腦的組態資訊。</xref:Microsoft.Win32.Registry.LocalMachine>       <xref:Microsoft.Win32.Registry.ClassesRoot>儲存類型 （和類別） 的相關資訊和其屬性。</xref:Microsoft.Win32.Registry.ClassesRoot>       <xref:Microsoft.Win32.Registry.Users>儲存預設使用者設定的相關資訊。</xref:Microsoft.Win32.Registry.Users>       <xref:Microsoft.Win32.Registry.PerformanceData>儲存軟體元件的效能資訊。</xref:Microsoft.Win32.Registry.PerformanceData>       <xref:Microsoft.Win32.Registry.CurrentConfig>儲存非使用者特定的硬體資訊。</xref:Microsoft.Win32.Registry.CurrentConfig>       <xref:Microsoft.Win32.Registry.DynData>儲存動態資料。</xref:Microsoft.Win32.Registry.DynData>       一旦您已識別您想要儲存/擷取設定資訊所在的根目錄機碼，您可以使用<xref:Microsoft.Win32.RegistryKey>類別來新增或移除子機碼，並操作指定的索引鍵的值。</xref:Microsoft.Win32.RegistryKey>       硬體裝置可以在使用自動隨插即用介面的登錄資訊。 安裝裝置驅動程式軟體可以將資訊放在登錄中，撰寫標準 api。      ## 取得和設定的值在.NET Framework 2.0 版的靜態方法，登錄類別也包含`static`<xref:Microsoft.Win32.Registry.GetValue%2A>和<xref:Microsoft.Win32.Registry.SetValue%2A>方法來設定和擷取值，從登錄機碼。</xref:Microsoft.Win32.Registry.SetValue%2A> </xref:Microsoft.Win32.Registry.GetValue%2A> 這些方法都會開啟和關閉的登錄機碼每次使用，因此它們不會執行，以及中的類似方法<xref:Microsoft.Win32.RegistryKey>類別，當您存取大量的值。</xref:Microsoft.Win32.RegistryKey>       <xref:Microsoft.Win32.RegistryKey>類別也提供方法，可讓您設定 Windows 登錄機碼，然後再擷取它，測試值的資料類型，並刪除索引鍵的存取控制安全性。</xref:Microsoft.Win32.RegistryKey>"
  example:
  - "This section contains two code examples. The first example demonstrates root keys, and the second example demonstrates the `static`<xref:Microsoft.Win32.Registry.GetValue%2A> and <xref:Microsoft.Win32.Registry.SetValue%2A> methods.  \n  \n Example 1  \n  \n The following code example demonstrates how to retrieve the subkeys of the HKEY_USERS key, and print their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in `RegistryKey` to manipulate that key.  \n  \n [!code-cs[Classic Registry.Users Example#1](~/add/codesnippet/csharp/t-microsoft.win32.registry_1.cs)]\n [!code-cpp[Classic Registry.Users Example#1](~/add/codesnippet/cpp/t-microsoft.win32.registry_1.cpp)]\n [!code-vb[Classic Registry.Users Example#1](~/add/codesnippet/visualbasic/t-microsoft.win32.registry_1.vb)]  \n  \n Example 2  \n  \n The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cs[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/csharp/t-microsoft.win32.registry_2.cs)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/visualbasic/t-microsoft.win32.registry_2.vb)]\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/cpp/t-microsoft.win32.registry_2.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static class Registry
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.ClassesRoot
  id: ClassesRoot
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: ClassesRoot
  nameWithType: Registry.ClassesRoot
  fullName: Microsoft.Win32.Registry.ClassesRoot
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "定義類型 （或類別） 的文件以及那些類型相關聯的屬性。 此欄位會讀取的 Windows 登錄基底機 HKEY_CLASSES_ROOT。"
  remarks: "傳統的應用程式和 OLE 應用程式使用儲存在此機碼之下的資料。 這個索引鍵也會提供回溯相容性 Windows 3.1 註冊資料庫所儲存的 DDE 和 OLE 的支援資訊。 檔案檢視器和使用者介面擴充儲存其 OLE 類別識別碼在此機碼，並處理伺服器都登錄在此機碼。"
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-vb[Classic Registry.ClassesRoot Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_4_1.vb)]\n [!code-cpp[Classic Registry.ClassesRoot Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_4_1.cpp)]\n [!code-cs[Classic Registry.ClassesRoot Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_4_1.cs)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey ClassesRoot;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.CurrentConfig
  id: CurrentConfig
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: CurrentConfig
  nameWithType: Registry.CurrentConfig
  fullName: Microsoft.Win32.Registry.CurrentConfig
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "包含不是使用者特有的硬體相關的組態資訊。 此欄位會讀取的 Windows 登錄基底機 HKEY_CURRENT_CONFIG。"
  remarks: "這個成員會對應到內<xref:Microsoft.Win32.Registry.LocalMachine>.</xref:Microsoft.Win32.Registry.LocalMachine>子機碼       使用這個成員的範例是儲存不同的伺服器名稱是否連接至網路的系統根據其資料的應用程式。"
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cpp[Classic Registry.CurrentConfig Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_1_1.cpp)]\n [!code-vb[Classic Registry.CurrentConfig Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_1_1.vb)]\n [!code-cs[Classic Registry.CurrentConfig Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_1_1.cs)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey CurrentConfig;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.CurrentUser
  id: CurrentUser
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: CurrentUser
  nameWithType: Registry.CurrentUser
  fullName: Microsoft.Win32.Registry.CurrentUser
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "包含目前的使用者喜好設定的相關資訊。 此欄位會讀取的 Windows 登錄基底機 HKEY_CURRENT_USER"
  remarks: "儲存在此機碼的資訊包括環境變數和程式群組、 色彩、 印表機、 網路連線及應用程式喜好設定的相關資料的設定。 此金鑰可讓您更容易建立目前使用者的設定。 此機碼，在軟體廠商會儲存目前使用者專屬的喜好設定来在其應用程式內使用。 Microsoft，比方說，就會建立 HKEY_CURRENT_USER\\Software\\Microsoft 機碼來建立自己的子機碼，Microsoft 機碼下的每個應用程式搭配使用，其應用程式。"
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cpp[Classic Registry.CurrentUser Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_6_1.cpp)]\n [!code-cs[Classic Registry.CurrentUser Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_6_1.cs)]\n [!code-vb[Classic Registry.CurrentUser Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_6_1.vb)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey CurrentUser;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.DynData
  id: DynData
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: DynData
  nameWithType: Registry.DynData
  fullName: Microsoft.Win32.Registry.DynData
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "包含動態登錄資料。 此欄位會讀取的 Windows 登錄基底機 HKEY_DYN_DATA。"
  remarks: "Windows 98/Windows Me 登錄同時支援靜態的資料 （這儲存在登錄中的磁碟上） 和動態的資料 （這經常變更，例如效能統計資料）。 這個動態的資料區域是可以從遠端同時在本機執行的 Win32 應用程式可讓虛擬裝置驅動程式 (Vxd) 來提供即時資料的機制。 它也可讓系統監視器 」 來提供 Windows 98/Windows Me 在遠端系統上的效能統計資料。       Vxd 不限於效能資料。 它們可以提供要傳遞從 Ring 0 環形 3 有效率而不獨佔 CPU 的任何資料。 登錄支援 「 動態資料儲存傳回值 （或許多值） 的函式的指標。 當查詢值的登錄呼叫動態索引鍵相關聯，呼叫函式會傳回所要的值。      > [!NOTE] > 動態金鑰所導入在 Microsoft Windows 95 中處理動態登錄資料。 它們僅支援 Windows 98/Windows me。"
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key. Note that this example can return no results, since there might not be dynamic data available, or you might not be running Windows 98/ME. Using this key may cause an error on other systems.  \n  \n [!code-vb[Classic Registry.DynData Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_3_1.vb)]\n [!code-cs[Classic Registry.DynData Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_3_1.cs)]\n [!code-cpp[Classic Registry.DynData Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_3_1.cpp)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey DynData;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "即將加入。"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "作業系統不支援動態資料。也就是說，它不是 Windows 98、 Windows 98 Second Edition、 或 Windows Millennium Edition (Windows Me)。"
  platform:
  - net462
- uid: Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
  id: GetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: GetValue(String,String,Object)
  nameWithType: Registry.GetValue(String,String,Object)
  fullName: Microsoft.Win32.Registry.GetValue(String,String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "擷取具有指定名稱，在指定的登錄機碼相關聯的值。 如果指定的索引鍵中找不到名稱，會傳回您提供的預設值或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果指定的索引鍵不存在。"
  remarks: "The string `valueName` is not case-sensitive.  \n  \n> [!NOTE]\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To retrieve this unnamed value, specify either `null` or the empty string (\"\") for `valuName`.  \n  \n Valid root names are HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" accesses key/value pairs for the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root.  \n  \n When the <xref:Microsoft.Win32.RegistryKey.GetValue%2A> method retrieves expandable string values (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), it expands environment strings using data from the local environment. If a value containing expandable references to environment variables has been stored as a string (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), rather than as an expandable string (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), <xref:Microsoft.Win32.RegistryKey.GetValue%2A> does not expand it. You can expand such a string after it has been retrieved by calling the <xref:System.Environment.ExpandEnvironmentVariables%2A?displayProperty=fullName> method.  \n  \n> [!NOTE]\n>  The recommended way to retrieve data from HKEY_PERFORMANCE_DATA is to use the <xref:System.Diagnostics.PerformanceCounter> class rather than the <xref:Microsoft.Win32.RegistryKey.GetValue%2A?displayProperty=fullName> method.  \n  \n The GetValue and <xref:Microsoft.Win32.Registry.SetValue%2A> methods open and close registry keys each time they are used, so they do not perform as well as the methods of the <xref:Microsoft.Win32.RegistryKey> class if you access a large number of values.  \n  \n <xref:Microsoft.Win32.RegistryKey> also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys."
  example:
  - "The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cs[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/csharp/m-microsoft.win32.regist_14_1.cs)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/visualbasic/m-microsoft.win32.regist_14_1.vb)]\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/cpp/m-microsoft.win32.regist_14_1.cpp)]"
  syntax:
    content: public static object GetValue (string keyName, string valueName, object defaultValue);
    parameters:
    - id: keyName
      type: System.String
      description: "索引鍵，以有效的登錄根目錄，例如&quot;HKEY_CURRENT_USER&quot;開頭的完整的登錄路徑。"
    - id: valueName
      type: System.String
      description: "名稱/值組的名稱。"
    - id: defaultValue
      type: System.Object
      description: "如果傳回值`valueName`不存在。"
    return:
      type: System.Object
      description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果所指定的子機碼<code> keyName </code>不存在; 否則值相關聯<code> valueName </code>，或<code> defaultValue </code>如果<code> valueName </code>找不到。"
  overload: Microsoft.Win32.Registry.GetValue*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "使用者沒有讀取登錄機碼所需的權限。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<xref href=&quot;Microsoft.Win32.RegistryKey&quot;> </xref> ，其中包含指定值已標示為刪除。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyName</code>開頭不是有效的登錄根目錄。"
  platform:
  - net462
- uid: Microsoft.Win32.Registry.LocalMachine
  id: LocalMachine
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: LocalMachine
  nameWithType: Registry.LocalMachine
  fullName: Microsoft.Win32.Registry.LocalMachine
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "包含本機電腦的組態資料。 此欄位會讀取的 Windows 登錄基底機 HKEY_LOCAL_MACHINE。"
  remarks: "`LocalMachine`包含五個索引鍵︰ 硬體描述電腦中的實體硬體、 裝置驅動程式的方法使用該硬體，而對應和連結的使用者模式程式碼的核心模式驅動程式的相關的資料。 此機碼中的所有資料會重新都建立每次啟動系統時。 在描述子機碼將說明實際電腦硬體。 DeviceMap 子機碼包含其他資料格式特有的驅動程式特定的類別。 ResourceMap 子機碼描述哪些裝置驅動程式會宣告硬體資源。 Windows NT 診斷程式 (Winmsdp.exe) 可以報告在其內容以容易閱讀的格式。       SAM 目錄服務資料庫的使用者和群組帳戶，以及在 Windows 2000 Server 網域的安全性資訊 （SAM 是安全性帳戶管理員，稱為 目錄服務資料庫）。       安全性包含本機安全性原則，例如特定使用者權限。 只有 Windows 2000 安全性子系統會使用此金鑰。       軟體每一電腦軟體的資料庫。 此機碼包含在本機電腦，以及其他組態資料的各種項目上安裝軟體的相關資料。       系統控制系統啟動、 裝置驅動程式載入、 Windows 2000 服務和作業系統的行為。       依照慣例，如果在有類似的資料<xref:Microsoft.Win32.Registry.CurrentUser>LocalMachine 中的資料在<xref:Microsoft.Win32.Registry.CurrentUser>優先。</xref:Microsoft.Win32.Registry.CurrentUser> </xref:Microsoft.Win32.Registry.CurrentUser> 不過，在此機碼的值可以也延伸 （而非取代） Registry.LocalMachine 中的資料。 此外，某些項目 （例如裝置驅動程式載入的項目） 會發生 Registry.LocalMachine 之外，沒有任何意義。"
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cs[Classic Registry.LocalMachine Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_0_1.cs)]\n [!code-cpp[Classic Registry.LocalMachine Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_0_1.cpp)]\n [!code-vb[Classic Registry.LocalMachine Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_0_1.vb)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey LocalMachine;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.PerformanceData
  id: PerformanceData
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: PerformanceData
  nameWithType: Registry.PerformanceData
  fullName: Microsoft.Win32.Registry.PerformanceData
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "包含軟體元件的效能的資訊。 此欄位會讀取的 Windows 登錄基底機 HKEY_PERFORMANCE_DATA。"
  remarks: "每個軟體元件建立其物件、 計數器時已安裝並執行時，這會將計數器資料的索引鍵。 您可以存取此資料，如同存取其他任何登錄資料，使用<xref:Microsoft.Win32.RegistryKey>函式。</xref:Microsoft.Win32.RegistryKey>       雖然您可以使用登錄來收集效能資料，資料不會儲存在登錄資料庫。 相反地，存取以這個金鑰登錄會使系統從適當的系統物件管理員收集的資料。       若要從本機系統取得效能資料，請使用<xref:Microsoft.Win32.RegistryKey.GetValue%2A>撘 Registry.PerformanceData 索引鍵。</xref:Microsoft.Win32.RegistryKey.GetValue%2A> 第一次呼叫開啟的金鑰 （您不需要先明確地開啟索引鍵）。 不過，請務必使用<xref:Microsoft.Win32.RegistryKey.Close%2A>方法，關閉的索引鍵的控制代碼，當您完成取得效能資料。</xref:Microsoft.Win32.RegistryKey.Close%2A> 使用者無法安裝或移除軟體元件，其效能資料使用中時。       若要從遠端系統取得效能資料，您必須使用<xref:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey%2A>方法，並包含在遠端系統且 Registry.PerformanceData 金鑰的電腦名稱。</xref:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey%2A> 此呼叫會擷取索引鍵代表的遠端系統的效能資料。 若要擷取的資料，呼叫<xref:Microsoft.Win32.RegistryKey.GetValue%2A>使用這個金鑰，而不是 Registry.PerformanceData 索引鍵。</xref:Microsoft.Win32.RegistryKey.GetValue%2A>      > [!NOTE] > Windows Server 2003 上，使用者必須至少屬於 Performance Monitor Users 群組才能存取這個基底的索引鍵的子機碼。"
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key. Note that this example can often return no results, since there might be no performance data.  \n  \n [!code-cs[Classic Registry.PerformanceData Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_2_1.cs)]\n [!code-cpp[Classic Registry.PerformanceData Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_2_1.cpp)]\n [!code-vb[Classic Registry.PerformanceData Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_2_1.vb)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey PerformanceData;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
  id: SetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: SetValue(String,String,Object)
  nameWithType: Registry.SetValue(String,String,Object)
  fullName: Microsoft.Win32.Registry.SetValue(String,String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "指定的登錄機碼上設定指定的名稱/值組。 如果指定的索引鍵不存在，則會建立它。"
  remarks: "Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], the `valueName` parameter is no longer restricted to a maximum of 255 characters; however, the `keyName` parameter continues to have the 255-character restriction.  \n  \n Because many values can be stored in each key in the registry, you must use the `valueName` parameter to specify the particular value you want to set.  \n  \n> [!NOTE]\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To set this unnamed value, specify either `null` or the empty string (\"\") for `valueName`.  \n  \n If `valueName` does not exist in the key, it is created and the associated value is set to `value`.  \n  \n If `keyName` specifies a subkey that does not exist, the subkey is created in the specified root. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" creates the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root. The string \"HKEY_CURRENT_USER\\MyTestKey\\Key2\\Key3\" creates the nested subkeys \"MyTestKey\", \"MyTestKey\\Key2\", and \"MyTestKey\\Key2\\Key3\".  \n  \n Valid root names include HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.  \n  \n> [!NOTE]\n>  The <xref:Microsoft.Win32.Registry.SetValue%2A> method opens a registry key, sets the value, and closes the key each time it is called. If you need to modify a large number of values, the <xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName> method might provide better performance. The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.  \n  \n This overload of <xref:Microsoft.Win32.Registry.SetValue%2A> stores 64-bit integers as strings (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>). To store 64-bit numbers as <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> values, use the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload.  \n  \n This overload of <xref:Microsoft.Win32.Registry.SetValue%2A> stores all string values as <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> objects, even if they contain expandable references to environment variables. To save string values as expandable strings (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), use the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload.  \n  \n This overload is equivalent to calling the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload with <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown."
  example:
  - "The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cs[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/csharp/m-microsoft.win32.regist_8_1.cs)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/visualbasic/m-microsoft.win32.regist_8_1.vb)]\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/cpp/m-microsoft.win32.regist_8_1.cpp)]"
  syntax:
    content: public static void SetValue (string keyName, string valueName, object value);
    parameters:
    - id: keyName
      type: System.String
      description: "索引鍵，以有效的登錄根目錄，例如&quot;HKEY_CURRENT_USER&quot;開頭的完整的登錄路徑。"
    - id: valueName
      type: System.String
      description: "名稱/值組的名稱。"
    - id: value
      type: System.Object
      description: "要儲存的值。"
  overload: Microsoft.Win32.Registry.SetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyName</code>開頭不是有效的登錄根目錄。       -或-<code>keyName</code>長度超過允許的最大的長度 （255 個字元）。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<xref href=&quot;Microsoft.Win32.RegistryKey&quot;> </xref>處於唯讀狀態，並因此不能寫入，比方說，它是根層級節點。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "使用者沒有建立或修改登錄機碼所需的權限。"
  platform:
  - net462
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  id: SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: SetValue(String,String,Object,RegistryValueKind)
  nameWithType: Registry.SetValue(String,String,Object,RegistryValueKind)
  fullName: Microsoft.Win32.Registry.SetValue(String,String,Object,RegistryValueKind)
  type: Method
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "設定指定的登錄機碼，使用指定的登錄資料類型的名稱/值組。 如果指定的索引鍵不存在，則會建立它。"
  remarks: "Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], the `valueName` parameter is no longer restricted to a maximum of 255 characters; however, the `keyName` parameter continues have the 255-character restriction.  \n  \n Because many values can be stored in each key in the registry, you must use the `valueName` parameter to specify the particular value you want to set.  \n  \n> [!NOTE]\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To set this unnamed value, specify either `null` or the empty string (\"\") for `valueName`.  \n  \n If `valueName` does not exist in the key, it is created and the associated value is set to `value`.  \n  \n If `keyName` specifies a subkey that does not exist, the subkey is created in the specified root. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" creates the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root. The string \"HKEY_CURRENT_USER\\MyTestKey\\Key2\\Key3\" creates the nested subkeys \"MyTestKey\", \"MyTestKey\\Key2\", and \"MyTestKey\\Key2\\Key3\".  \n  \n Valid root names include HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.  \n  \n> [!NOTE]\n>  The <xref:Microsoft.Win32.Registry.SetValue%2A> method opens a registry key, sets the value, and closes the key each time it is called. If you need to modify a large number of values, the <xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName> method might provide better performance. The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.  \n  \n If the type of the specified `value` does not match the specified `valueKind`, and the data cannot be converted, <xref:System.ArgumentException> is thrown. For example, you can store a <xref:System.Int64?displayProperty=fullName> as a <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>, but only if its value is less than the maximum value of a <xref:System.Int32?displayProperty=fullName>. You cannot store a single string value as a <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  If boxed values are passed for <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> or <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>, the conversion is done using the invariant culture.  \n  \n> [!NOTE]\n>  On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown."
  example:
  - "The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cs[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/csharp/7747259a-b475-4eec-8a66-_1.cs)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/visualbasic/7747259a-b475-4eec-8a66-_1.vb)]\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/cpp/7747259a-b475-4eec-8a66-_1.cpp)]"
  syntax:
    content: public static void SetValue (string keyName, string valueName, object value, Microsoft.Win32.RegistryValueKind valueKind);
    parameters:
    - id: keyName
      type: System.String
      description: "索引鍵，以有效的登錄根目錄，例如&quot;HKEY_CURRENT_USER&quot;開頭的完整的登錄路徑。"
    - id: valueName
      type: System.String
      description: "名稱/值組的名稱。"
    - id: value
      type: System.Object
      description: "要儲存的值。"
    - id: valueKind
      type: Microsoft.Win32.RegistryValueKind
      description: "要儲存資料時使用的登錄資料類型。"
  overload: Microsoft.Win32.Registry.SetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyName</code>開頭不是有效的登錄根目錄。       -或-<code>keyName</code>長度超過允許的最大的長度 （255 個字元）。       -的型別<code>value</code>不符合所指定的登錄資料型別<code>valueKind</code>，因此資料無法轉換正確。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<xref href=&quot;Microsoft.Win32.RegistryKey&quot;> </xref>處於唯讀狀態，並因此不能寫入，比方說，它是根層級節點，或不具有寫入權限開啟的機碼。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "使用者沒有建立或修改登錄機碼所需的權限。"
  platform:
  - net462
- uid: Microsoft.Win32.Registry.Users
  id: Users
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: Users
  nameWithType: Registry.Users
  fullName: Microsoft.Win32.Registry.Users
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "包含預設使用者設定的相關資訊。 此欄位會讀取的 Windows 登錄基底機 HKEY_USERS。"
  remarks: "此機碼包含每個使用者的電腦的分支。 預設組態會提供預設目前使用者的新使用者在本機電腦上，如果使用者沒有變更喜好設定。 因為 Windows 98 / ME 也支援 Registry.Users、 應用程式可以存取其 Windows 2000 的相同方式的使用者特定資訊。 每個使用者的資訊會儲存在個別的檔案，可以儲存在本機或網路伺服器上。 Windows 98 / ME 可以將這個檔案複製到使用者的目前系統，以便設定從一部電腦之間移動與使用者。"
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cs[Classic Registry.Users Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_5_1.cs)]\n [!code-cpp[Classic Registry.Users Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_5_1.cpp)]\n [!code-vb[Classic Registry.Users Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_5_1.vb)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey Users;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: Microsoft.Win32.Registry.ClassesRoot
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: ClassesRoot
  nameWithType: Registry.ClassesRoot
  fullName: Microsoft.Win32.Registry.ClassesRoot
- uid: Microsoft.Win32.RegistryKey
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryKey
  nameWithType: RegistryKey
  fullName: Microsoft.Win32.RegistryKey
- uid: Microsoft.Win32.Registry.CurrentConfig
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: CurrentConfig
  nameWithType: Registry.CurrentConfig
  fullName: Microsoft.Win32.Registry.CurrentConfig
- uid: Microsoft.Win32.Registry.CurrentUser
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: CurrentUser
  nameWithType: Registry.CurrentUser
  fullName: Microsoft.Win32.Registry.CurrentUser
- uid: Microsoft.Win32.Registry.DynData
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: DynData
  nameWithType: Registry.DynData
  fullName: Microsoft.Win32.Registry.DynData
- uid: Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: GetValue(String,String,Object)
  nameWithType: Registry.GetValue(String,String,Object)
  fullName: Microsoft.Win32.Registry.GetValue(String,String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Win32.Registry.LocalMachine
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: LocalMachine
  nameWithType: Registry.LocalMachine
  fullName: Microsoft.Win32.Registry.LocalMachine
- uid: Microsoft.Win32.Registry.PerformanceData
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: PerformanceData
  nameWithType: Registry.PerformanceData
  fullName: Microsoft.Win32.Registry.PerformanceData
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: SetValue(String,String,Object)
  nameWithType: Registry.SetValue(String,String,Object)
  fullName: Microsoft.Win32.Registry.SetValue(String,String,Object)
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: SetValue(String,String,Object,RegistryValueKind)
  nameWithType: Registry.SetValue(String,String,Object,RegistryValueKind)
  fullName: Microsoft.Win32.Registry.SetValue(String,String,Object,RegistryValueKind)
- uid: Microsoft.Win32.RegistryValueKind
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryValueKind
  nameWithType: RegistryValueKind
  fullName: Microsoft.Win32.RegistryValueKind
- uid: Microsoft.Win32.Registry.Users
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: Users
  nameWithType: Registry.Users
  fullName: Microsoft.Win32.Registry.Users
- uid: Microsoft.Win32.Registry.GetValue*
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: GetValue
  nameWithType: Registry.GetValue
- uid: Microsoft.Win32.Registry.SetValue*
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: SetValue
  nameWithType: Registry.SetValue
