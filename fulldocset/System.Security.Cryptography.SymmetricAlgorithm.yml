### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.SymmetricAlgorithm
  id: SymmetricAlgorithm
  children:
  - System.Security.Cryptography.SymmetricAlgorithm.#ctor
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Clear
  - System.Security.Cryptography.SymmetricAlgorithm.Create
  - System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  - System.Security.Cryptography.SymmetricAlgorithm.IV
  - System.Security.Cryptography.SymmetricAlgorithm.IVValue
  - System.Security.Cryptography.SymmetricAlgorithm.Key
  - System.Security.Cryptography.SymmetricAlgorithm.KeySize
  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.Mode
  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Padding
  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  langs:
  - csharp
  name: SymmetricAlgorithm
  nameWithType: SymmetricAlgorithm
  fullName: System.Security.Cryptography.SymmetricAlgorithm
  type: Class
  summary: "表示對稱演算法的所有實作必須從它都繼承的抽象基底類別。"
  remarks: "從 SymmetricAlgorithm 類別衍生的類別會使用稱為 cipher 區塊鏈結 (CBC)，鏈結模式，需要索引鍵 (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>) 和初始化向量 (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>)，對資料執行密碼編譯轉換。</xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>  若要解密加密的其中一個 SymmetricAlgorithm 類別使用的資料，您必須設定<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>屬性和<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>屬性相同的值用來進行加密。</xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>  才能發揮作用的對稱演算法，必須只能傳送者和收件者知道秘密金鑰。       <xref:System.Security.Cryptography.RijndaelManaged><xref:System.Security.Cryptography.DESCryptoServiceProvider>， <xref:System.Security.Cryptography.RC2CryptoServiceProvider>，和<xref:System.Security.Cryptography.TripleDESCryptoServiceProvider>是對稱演算法的實作。</xref:System.Security.Cryptography.TripleDESCryptoServiceProvider> </xref:System.Security.Cryptography.RC2CryptoServiceProvider> </xref:System.Security.Cryptography.DESCryptoServiceProvider></xref:System.Security.Cryptography.RijndaelManaged>       請注意，當使用衍生類別，它是不夠，從安全性觀點來看，只在您完成使用物件後，強制記憶體回收。 您必須明確呼叫<xref:System.Security.Cryptography.SymmetricAlgorithm.Clear%2A>零之前它會釋放此物件內的任何機密資料外之物件的方法。</xref:System.Security.Cryptography.SymmetricAlgorithm.Clear%2A> 請注意記憶體回收並不會清空回收物件的內容，但是只會將標示為可用於重新配置記憶體。 因此記憶體回收物件中包含的資料可能仍會出現記憶體堆積中未配置的記憶體中。 在密碼編譯物件，這項資料可能包含機密資訊，例如金鑰資料或純文字區塊。       .NET Framework 中保存敏感性資料實作的所有密碼編譯類別`Clear`方法。 呼叫時，`Clear`方法會在物件內的所有敏感性資料加上零覆寫，並再釋放物件，使它可以安全地回收。 當物件具有歸零，而且發行時，您然後應該呼叫`Dispose`方法`disposing`參數設定為`True`來處置所有 managed 和 unmanaged 資源相關聯的物件。"
  example:
  - "The following code example uses the <xref:System.Security.Cryptography.RijndaelManaged> class with the specified <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) to encrypt a file specified by `inName`, and outputs the encrypted result to the file specified by `outName`. The `desKey` and `desIV` parameters to the method are 8-byte arrays. You must have the high encryption pack installed to run this example.  \n  \n [!code-cpp[Classic CryptoStream Example#1](~/add/codesnippet/cpp/t-system.security.crypto_19_1.cpp)]\n [!code-cs[Classic CryptoStream Example#1](~/add/codesnippet/csharp/t-system.security.crypto_19_1.cs)]\n [!code-vb[Classic CryptoStream Example#1](~/add/codesnippet/visualbasic/t-system.security.crypto_19_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class SymmetricAlgorithm : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: SymmetricAlgorithm()
  nameWithType: SymmetricAlgorithm.SymmetricAlgorithm()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.SymmetricAlgorithm()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;></xref>類別。"
  remarks: "您無法建立抽象類別的執行個體。 應用程式程式碼會建立衍生類別的新執行個體。"
  syntax:
    content: protected SymmetricAlgorithm ();
    parameters: []
  overload: System.Security.Cryptography.SymmetricAlgorithm.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "類別衍生自對稱演算法的實作不正確。"
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  id: BlockSize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: BlockSize
  nameWithType: SymmetricAlgorithm.BlockSize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得或設定區塊大小，以位元為單位的密碼編譯作業。"
  remarks: "區塊大小是可以在一個作業中解密或加密資料的基本單位。 區塊大小超過訊息處理為連續區塊。訊息長度短於區塊大小必須以額外的位元區塊的大小。 無效的區塊大小取決於所用的對稱演算法。"
  syntax:
    content: public virtual int BlockSize { get; set; }
    return:
      type: System.Int32
      description: "區塊大小，以位元。"
  overload: System.Security.Cryptography.SymmetricAlgorithm.BlockSize*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "區塊大小無效。"
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  id: BlockSizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: BlockSizeValue
  nameWithType: SymmetricAlgorithm.BlockSizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "表示區塊大小，以位元為單位的密碼編譯作業。"
  remarks: "區塊大小是可以在一個作業中解密或加密資料的基本單位。 區塊大小超過訊息處理為連續區塊。訊息長度短於區塊大小必須以額外的位元區塊的大小。 無效的區塊大小取決於所用的對稱演算法。       這個欄位透過存取<xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A>屬性。</xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A>"
  syntax:
    content: protected int BlockSizeValue;
    return:
      type: System.Int32
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear
  id: Clear
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Clear()
  nameWithType: SymmetricAlgorithm.Clear()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "所使用的資源全部釋出<xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;></xref>類別。"
  remarks: "請注意，當使用衍生類別，它是不夠，從安全性觀點來看，只在您完成使用物件後，強制記憶體回收。 您必須明確發行之前會清空此物件內的任何機密資料的物件上呼叫 Clear 方法。 請注意記憶體回收並不會清空回收物件的內容，但是只會將標示為可用於重新配置記憶體。 因此記憶體回收物件中包含的資料可能仍會出現記憶體堆積中未配置的記憶體中。 在密碼編譯物件，這項資料可能包含機密資訊，例如金鑰資料或純文字區塊。       .NET Framework 中保存敏感性資料實作的所有密碼編譯類別`Clear`方法。 呼叫時，`Clear`方法會在物件內的所有敏感性資料加上零覆寫，並再釋放物件，使它可以安全地回收。 當物件具有歸零，而且發行時，您然後應該呼叫`Dispose`方法`disposing`參數設定為`True`來處置所有 managed 和 unmanaged 資源相關聯的物件。"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.SymmetricAlgorithm.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Create
  id: Create
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Create()
  nameWithType: SymmetricAlgorithm.Create()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "建立用來執行對稱演算法的預設密碼編譯物件。"
  remarks: ''
  example:
  - "The following code example uses the <xref:System.Security.Cryptography.RijndaelManaged> class with the specified <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) to encrypt a file specified by `inName`, and outputs the encrypted result to the file specified by `outName`. The `desKey` and `desIV` parameters to the method are 8-byte arrays. You must have the high encryption pack installed to run this example.  \n  \n [!code-cpp[Classic CryptoStream Example#1](~/add/codesnippet/cpp/m-system.security.crypto_114_1.cpp)]\n [!code-cs[Classic CryptoStream Example#1](~/add/codesnippet/csharp/m-system.security.crypto_114_1.cs)]\n [!code-vb[Classic CryptoStream Example#1](~/add/codesnippet/visualbasic/m-system.security.crypto_114_1.vb)]"
  syntax:
    content: public static System.Security.Cryptography.SymmetricAlgorithm Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.SymmetricAlgorithm
      description: "用來執行對稱演算法的預設密碼編譯的物件。"
  overload: System.Security.Cryptography.SymmetricAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Create(String)
  nameWithType: SymmetricAlgorithm.Create(String)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "建立指定用來執行對稱演算法的密碼編譯物件。"
  syntax:
    content: public static System.Security.Cryptography.SymmetricAlgorithm Create (string algName);
    parameters:
    - id: algName
      type: System.String
      description: "名稱的特定實作<xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;></xref>類別，才能使用。"
    return:
      type: System.Security.Cryptography.SymmetricAlgorithm
      description: "用來執行對稱演算法的密碼編譯物件。"
  overload: System.Security.Cryptography.SymmetricAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  id: CreateDecryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: CreateDecryptor()
  nameWithType: SymmetricAlgorithm.CreateDecryptor()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "建立對稱解密子物件與目前<> *> 屬性和初始化向量 (<>*>)。"
  remarks: "這個方法會解密加密的訊息建立使用<xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A>多載相同的簽章。</xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A>"
  syntax:
    content: public virtual System.Security.Cryptography.ICryptoTransform CreateDecryptor ();
    parameters: []
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "對稱解密子物件。"
  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  id: CreateDecryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: CreateDecryptor(Byte[],Byte[])
  nameWithType: SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "當在衍生類別中覆寫時，會建立對稱解密子物件具有指定<> *> 屬性和初始化向量 (<>*>)。"
  remarks: "這個方法會解密加密的訊息建立使用<xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A>多載具有相同參數。</xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A>"
  syntax:
    content: public abstract System.Security.Cryptography.ICryptoTransform CreateDecryptor (byte[] rgbKey, byte[] rgbIV);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "使用對稱演算法的祕密金鑰。"
    - id: rgbIV
      type: System.Byte[]
      description: "要使用對稱演算法的初始化向量。"
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "對稱解密子物件。"
  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  id: CreateEncryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: CreateEncryptor()
  nameWithType: SymmetricAlgorithm.CreateEncryptor()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "建立對稱加密子物件與目前<> *> 屬性和初始化向量 (<>*>)。"
  remarks: "如果目前<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>屬性是`null`，<xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A>呼叫方法來建立新隨機<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>。</xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> 如果目前<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>屬性是`null`，<xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A>呼叫方法來建立新隨機<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>。</xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>       使用<xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A>多載相同的簽章來解密此方法的結果。</xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A>"
  example:
  - "The following example encrypts a string using the transform object returned from the CreateEncryptor method.  \n  \n [!code-cpp[System.Security.Cryptography.SymmetricAlgorithm#1](~/add/codesnippet/cpp/m-system.security.crypto_124_1.cpp)]\n [!code-cs[System.Security.Cryptography.SymmetricAlgorithm#1](~/add/codesnippet/csharp/m-system.security.crypto_124_1.cs)]\n [!code-vb[System.Security.Cryptography.SymmetricAlgorithm#1](~/add/codesnippet/visualbasic/m-system.security.crypto_124_1.vb)]"
  syntax:
    content: public virtual System.Security.Cryptography.ICryptoTransform CreateEncryptor ();
    parameters: []
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "對稱加密子物件。"
  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  id: CreateEncryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: CreateEncryptor(Byte[],Byte[])
  nameWithType: SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "當在衍生類別中覆寫時，會建立對稱加密子物件具有指定<> *> 屬性和初始化向量 (<>*>)。"
  remarks: "使用<xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A>多載具有相同的參數來解密此方法的結果。</xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A>"
  syntax:
    content: public abstract System.Security.Cryptography.ICryptoTransform CreateEncryptor (byte[] rgbKey, byte[] rgbIV);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "使用對稱演算法的祕密金鑰。"
    - id: rgbIV
      type: System.Byte[]
      description: "要使用對稱演算法的初始化向量。"
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "對稱加密子物件。"
  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose
  id: Dispose
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Dispose()
  nameWithType: SymmetricAlgorithm.Dispose()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "目前的執行個體所使用的資源全部釋出<xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;></xref>類別。"
  remarks: "呼叫`Dispose`當您完成使用<xref:System.Security.Cryptography.SymmetricAlgorithm>.</xref:System.Security.Cryptography.SymmetricAlgorithm> `Dispose`方法會使<xref:System.Security.Cryptography.SymmetricAlgorithm>中無法使用的狀態。</xref:System.Security.Cryptography.SymmetricAlgorithm> 在呼叫`Dispose`，您必須釋放所有參考<xref:System.Security.Cryptography.SymmetricAlgorithm>讓記憶體回收行程可以回收記憶體的<xref:System.Security.Cryptography.SymmetricAlgorithm>所佔用。</xref:System.Security.Cryptography.SymmetricAlgorithm> </xref:System.Security.Cryptography.SymmetricAlgorithm>       如需詳細資訊，請參閱[清除 Unmanaged 資源上](~/add/includes/ajax-current-ext-md.md)和[實作 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      > [!NOTE] > 永遠呼叫`Dispose`釋放您的最後一個參考至<xref:System.Security.Cryptography.SymmetricAlgorithm>。</xref:System.Security.Cryptography.SymmetricAlgorithm>之前 否則，它所使用的資源將不會釋放直到記憶體回收行程呼叫<xref:System.Security.Cryptography.SymmetricAlgorithm>物件的`Finalize`方法。</xref:System.Security.Cryptography.SymmetricAlgorithm>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.SymmetricAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SymmetricAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "所使用的 unmanaged 的資源釋出<xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;></xref>並選擇性釋放 managed 的資源。"
  remarks: "這個方法會呼叫公用`Dispose()`方法和`Finalize`方法。 `Dispose()`叫用受保護`Dispose(Boolean)`方法`disposing`參數設定為`true`。 `Finalize`叫用`Dispose`與`disposing`設`false`。       當`disposing`參數是`true`，這個方法的任何 managed 物件所持有的資源全部釋出這個<xref:System.Security.Cryptography.SymmetricAlgorithm>參考。</xref:System.Security.Cryptography.SymmetricAlgorithm> 這個方法會叫用`Dispose()`每個參考物件的方法。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>表示釋放 managed 和 unmanaged 資源，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>表示只釋放 unmanaged 的資源。"
  overload: System.Security.Cryptography.SymmetricAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  id: FeedbackSize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: FeedbackSize
  nameWithType: SymmetricAlgorithm.FeedbackSize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得或設定的回饋大小，以位元，密碼編譯作業。"
  remarks: "回饋大小會決定回饋給後續加密或解密作業的資料量。 回饋大小不能大於區塊大小。"
  syntax:
    content: public virtual int FeedbackSize { get; set; }
    return:
      type: System.Int32
      description: "回饋大小，以位元。"
  overload: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "回饋大小大於區塊大小。"
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  id: FeedbackSizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: FeedbackSizeValue
  nameWithType: SymmetricAlgorithm.FeedbackSizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "代表的回饋大小，以位元，密碼編譯作業。"
  remarks: "回饋大小會決定回饋給後續加密或解密作業的資料量。 回饋大小不能大於區塊大小。       這個欄位透過存取<xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize%2A>屬性。</xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize%2A>"
  syntax:
    content: protected int FeedbackSizeValue;
    return:
      type: System.Int32
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  id: GenerateIV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: GenerateIV()
  nameWithType: SymmetricAlgorithm.GenerateIV()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "當在衍生類別中覆寫時，會產生隨機初始化向量 (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>) 要用於演算法。</xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>"
  remarks: "一般情況下，沒有理由来使用這個方法，因為`CreateEncryptor()`或`CreateEncryptor(null, null)`自動產生初始化向量和索引鍵。 不過，您可能想要使用 GenerateIV 方法重複使用不同的初始化向量的對稱演算法執行個體。"
  syntax:
    content: public abstract void GenerateIV ();
    parameters: []
  overload: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  id: GenerateKey
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: GenerateKey()
  nameWithType: SymmetricAlgorithm.GenerateKey()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "當在衍生類別中覆寫時，會產生隨機金鑰 (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key*>) 要用於演算法。</xref:System.Security.Cryptography.SymmetricAlgorithm.Key*>"
  remarks: "一般情況下，沒有理由来使用這個方法，因為`CreateEncryptor()`或`CreateEncryptor(null, null)`自動產生初始化向量和索引鍵。 不過，您可以使用 GenerateKey 方法重複使用以不同的金鑰的對稱演算法的執行個體。"
  syntax:
    content: public abstract void GenerateKey ();
    parameters: []
  overload: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.IV
  id: IV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: IV
  nameWithType: SymmetricAlgorithm.IV
  fullName: System.Security.Cryptography.SymmetricAlgorithm.IV
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得或設定對稱演算法的初始化向量 (IV)。"
  remarks: "每當您建立的其中一個的新執行個體時自動 IV 屬性設定為新的隨機值<xref:System.Security.Cryptography.SymmetricAlgorithm>類別，或當您以手動方式呼叫<xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A>方法。</xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm>  IV 屬性的大小必須相同<xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A>屬性除以 8。</xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A>       衍生自類別<xref:System.Security.Cryptography.SymmetricAlgorithm>類別會使用稱為 cipher 區塊鏈結 (CBC)，鏈結模式，需要索引鍵和初始化向量，對資料執行密碼編譯轉換。</xref:System.Security.Cryptography.SymmetricAlgorithm>  若要解密資料加密使用其中一種<xref:System.Security.Cryptography.SymmetricAlgorithm>類別，您必須設定<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>屬性和 IV 屬性相同的值用來進行加密。</xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm>       針對指定的私密金鑰*k*，不使用初始化向量的簡單區塊編碼器會將同一個純文字輸入的區塊加密成同一個加密文字輸出區塊。 如果您的純文字資料流中有重複的區塊，將您的加密文字資料流中有重複的區塊。 如果未經授權的使用者知道的純文字區塊的結構，他們可以使用該資訊破解已知的密碼文字區塊，並可能復原您的金鑰。 為了打擊這個問題，從上一個區塊的資訊被混合加密的下一個區塊的處理程序。 因此，兩個相同的純文字區塊的輸出會不同。 因為這項技術會使用先前的區塊來加密的下一個區塊，來加密資料的第一個區塊需要的初始化向量。"
  syntax:
    content: public virtual byte[] IV { get; set; }
    return:
      type: System.Byte[]
      description: "初始化向量。"
  overload: System.Security.Cryptography.SymmetricAlgorithm.IV*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "嘗試設定為初始化向量<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "嘗試為無效的大小設定為初始化向量。"
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue
  id: IVValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: IVValue
  nameWithType: SymmetricAlgorithm.IVValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.IVValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "代表初始化向量 (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>) 對稱演算法。</xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>"
  remarks: "這個欄位透過存取<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>屬性。</xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>"
  syntax:
    content: protected byte[] IVValue;
    return:
      type: System.Byte[]
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Key
  id: Key
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Key
  nameWithType: SymmetricAlgorithm.Key
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Key
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得或設定對稱演算法的祕密金鑰。"
  remarks: "加密和解密，會使用之祕密金鑰。 對稱演算法才會成功，必須只有寄件者和收件者知道的祕密金鑰。 有效的金鑰大小由特定的對稱演算法實作，而且會列於<xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>屬性。</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>       如果這個屬性是`null`使用時，<xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A>呼叫方法來建立新的隨機值。</xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A>"
  syntax:
    content: public virtual byte[] Key { get; set; }
    return:
      type: System.Byte[]
      description: "使用對稱演算法的祕密金鑰。"
  overload: System.Security.Cryptography.SymmetricAlgorithm.Key*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "嘗試將索引鍵設定<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "金鑰大小無效。"
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize
  id: KeySize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: KeySize
  nameWithType: SymmetricAlgorithm.KeySize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得或設定大小，以位元的對稱演算法所使用之祕密金鑰。"
  remarks: "有效的金鑰大小由特定的對稱演算法實作，而且會列於<xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>屬性。</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>"
  syntax:
    content: public virtual int KeySize { get; set; }
    return:
      type: System.Int32
      description: "位元的對稱演算法所使用之祕密金鑰大小。"
  overload: System.Security.Cryptography.SymmetricAlgorithm.KeySize*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "金鑰大小不正確。"
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  id: KeySizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: KeySizeValue
  nameWithType: SymmetricAlgorithm.KeySizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "表示大小，以位元的對稱演算法所使用之祕密金鑰。"
  remarks: "有效的金鑰大小由特定的對稱演算法實作，而且會列於<xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>屬性。</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>       這個欄位透過存取<xref:System.Security.Cryptography.SymmetricAlgorithm.KeySize%2A>屬性。</xref:System.Security.Cryptography.SymmetricAlgorithm.KeySize%2A>"
  syntax:
    content: protected int KeySizeValue;
    return:
      type: System.Int32
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  id: KeyValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: KeyValue
  nameWithType: SymmetricAlgorithm.KeyValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "表示對稱演算法的祕密金鑰。"
  remarks: "加密和解密，會使用之祕密金鑰。 對稱演算法才會成功，必須只有寄件者和收件者知道的祕密金鑰。 有效的金鑰大小由特定的對稱演算法實作，而且會列於<xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>屬性。</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>       這個欄位透過存取<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>屬性。</xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>"
  syntax:
    content: protected byte[] KeyValue;
    return:
      type: System.Byte[]
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  id: LegalBlockSizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: LegalBlockSizes
  nameWithType: SymmetricAlgorithm.LegalBlockSizes
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得的區塊大小，以位元的對稱演算法所支援。"
  remarks: "對稱演算法只支援區塊大小符合此陣列中的項目。"
  example:
  - "The following example shows the value of LegalBlockSizes for the symmetric algorithms.  \n  \n [!code-vb[System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1](~/add/codesnippet/visualbasic/p-system.security.crypto_95_1.vb)]\n [!code-cs[System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1](~/add/codesnippet/csharp/p-system.security.crypto_95_1.cs)]"
  syntax:
    content: public virtual System.Security.Cryptography.KeySizes[] LegalBlockSizes { get; }
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "陣列，其中包含演算法所支援的區塊大小。"
  overload: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  id: LegalBlockSizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: LegalBlockSizesValue
  nameWithType: SymmetricAlgorithm.LegalBlockSizesValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定的區塊大小，以位元的對稱演算法所支援。"
  remarks: "對稱演算法只支援區塊大小符合此陣列中的項目。       這個欄位透過存取<xref:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes%2A>屬性。</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes%2A>"
  syntax:
    content: protected System.Security.Cryptography.KeySizes[] LegalBlockSizesValue;
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  id: LegalKeySizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: LegalKeySizes
  nameWithType: SymmetricAlgorithm.LegalKeySizes
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得金鑰的大小，以位元的對稱演算法所支援。"
  remarks: "對稱演算法只支援金鑰大小符合此陣列中的項目。"
  example:
  - "The following example shows the value of LegalKeySizes for the symmetric algorithms.  \n  \n [!code-vb[System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1](~/add/codesnippet/visualbasic/p-system.security.crypto_72_1.vb)]\n [!code-cs[System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1](~/add/codesnippet/csharp/p-system.security.crypto_72_1.cs)]"
  syntax:
    content: public virtual System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "陣列，其中包含演算法所支援的金鑰大小。"
  overload: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  id: LegalKeySizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: LegalKeySizesValue
  nameWithType: SymmetricAlgorithm.LegalKeySizesValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定的金鑰大小，以位元的對稱演算法所支援。"
  remarks: "對稱演算法只支援金鑰大小符合此陣列中的項目。       這個欄位透過存取<xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>屬性。</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>"
  syntax:
    content: protected System.Security.Cryptography.KeySizes[] LegalKeySizesValue;
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode
  id: Mode
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Mode
  nameWithType: SymmetricAlgorithm.Mode
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Mode
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得或設定對稱演算法的作業模式。"
  remarks: "請參閱<xref:System.Security.Cryptography.CipherMode>列舉特定模式的描述。</xref:System.Security.Cryptography.CipherMode>"
  syntax:
    content: public virtual System.Security.Cryptography.CipherMode Mode { get; set; }
    return:
      type: System.Security.Cryptography.CipherMode
      description: "對稱演算法的作業模式。 預設值是<xref href=&quot;System.Security.Cryptography.CipherMode&quot;> </xref>。"
  overload: System.Security.Cryptography.SymmetricAlgorithm.Mode*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Cipher 模式不是其中一個<xref href=&quot;System.Security.Cryptography.CipherMode&quot;></xref>值。"
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  id: ModeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: ModeValue
  nameWithType: SymmetricAlgorithm.ModeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "表示對稱演算法中使用的 cipher 模式。"
  remarks: "請參閱<xref:System.Security.Cryptography.CipherMode>列舉特定模式的描述。</xref:System.Security.Cryptography.CipherMode>       這個欄位透過存取<xref:System.Security.Cryptography.SymmetricAlgorithm.Mode%2A>屬性。</xref:System.Security.Cryptography.SymmetricAlgorithm.Mode%2A>"
  syntax:
    content: protected System.Security.Cryptography.CipherMode ModeValue;
    return:
      type: System.Security.Cryptography.CipherMode
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding
  id: Padding
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Padding
  nameWithType: SymmetricAlgorithm.Padding
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Padding
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得或設定對稱演算法中使用的填補模式。"
  remarks: "大部分的純文字訊息並非由一個完全填滿區塊的位元組數。 通常，沒有足夠的位元組來填入最後一個區塊。 當發生這種情況時，填補字串加入至文字。 例如，如果區塊長度為 64 位元，而最後一個區塊包含只有 40 位元，就會加入 24 位元的填補。 請參閱<xref:System.Security.Cryptography.PaddingMode>列舉特定模式的描述。</xref:System.Security.Cryptography.PaddingMode>"
  syntax:
    content: public virtual System.Security.Cryptography.PaddingMode Padding { get; set; }
    return:
      type: System.Security.Cryptography.PaddingMode
      description: "對稱演算法中使用的填補模式。 預設值是<xref href=&quot;System.Security.Cryptography.PaddingMode&quot;> </xref>。"
  overload: System.Security.Cryptography.SymmetricAlgorithm.Padding*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "填補模式不是其中一個<xref href=&quot;System.Security.Cryptography.PaddingMode&quot;></xref>值。"
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  id: PaddingValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: PaddingValue
  nameWithType: SymmetricAlgorithm.PaddingValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "表示對稱演算法中使用的填補模式。"
  remarks: "大部分的純文字訊息並非由一個完全填滿區塊的位元組數。 通常，沒有足夠的位元組來填入最後一個區塊。 當發生這種情況時，填補字串加入至文字。 例如，如果區塊長度為 64 位元，而最後一個區塊包含只有 40 位元，就會加入 24 位元的填補。 請參閱<xref:System.Security.Cryptography.PaddingMode>列舉特定模式的描述。</xref:System.Security.Cryptography.PaddingMode>       這個欄位透過存取<xref:System.Security.Cryptography.SymmetricAlgorithm.Padding%2A>屬性。</xref:System.Security.Cryptography.SymmetricAlgorithm.Padding%2A>"
  syntax:
    content: protected System.Security.Cryptography.PaddingMode PaddingValue;
    return:
      type: System.Security.Cryptography.PaddingMode
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  id: ValidKeySize(System.Int32)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: ValidKeySize(Int32)
  nameWithType: SymmetricAlgorithm.ValidKeySize(Int32)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "判斷指定的金鑰大小是否有效，目前的演算法。"
  syntax:
    content: public bool ValidKeySize (int bitLength);
    parameters:
    - id: bitLength
      type: System.Int32
      description: "長度，以位元，檢查有效的金鑰大小。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的金鑰大小無效，目前的演算法。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.SymmetricAlgorithm.#ctor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: SymmetricAlgorithm()
  nameWithType: SymmetricAlgorithm.SymmetricAlgorithm()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.SymmetricAlgorithm()
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: BlockSize
  nameWithType: SymmetricAlgorithm.BlockSize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: BlockSizeValue
  nameWithType: SymmetricAlgorithm.BlockSizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Clear()
  nameWithType: SymmetricAlgorithm.Clear()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear()
- uid: System.Security.Cryptography.SymmetricAlgorithm.Create
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Create()
  nameWithType: SymmetricAlgorithm.Create()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create()
- uid: System.Security.Cryptography.SymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: SymmetricAlgorithm
  nameWithType: SymmetricAlgorithm
  fullName: System.Security.Cryptography.SymmetricAlgorithm
- uid: System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Create(String)
  nameWithType: SymmetricAlgorithm.Create(String)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateDecryptor()
  nameWithType: SymmetricAlgorithm.CreateDecryptor()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor()
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateDecryptor(Byte[],Byte[])
  nameWithType: SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateEncryptor()
  nameWithType: SymmetricAlgorithm.CreateEncryptor()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor()
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateEncryptor(Byte[],Byte[])
  nameWithType: SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Dispose()
  nameWithType: SymmetricAlgorithm.Dispose()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose()
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SymmetricAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: FeedbackSize
  nameWithType: SymmetricAlgorithm.FeedbackSize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: FeedbackSizeValue
  nameWithType: SymmetricAlgorithm.FeedbackSizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: GenerateIV()
  nameWithType: SymmetricAlgorithm.GenerateIV()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV()
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: GenerateKey()
  nameWithType: SymmetricAlgorithm.GenerateKey()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey()
- uid: System.Security.Cryptography.SymmetricAlgorithm.IV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: IV
  nameWithType: SymmetricAlgorithm.IV
  fullName: System.Security.Cryptography.SymmetricAlgorithm.IV
- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: IVValue
  nameWithType: SymmetricAlgorithm.IVValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.IVValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.Key
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Key
  nameWithType: SymmetricAlgorithm.Key
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Key
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: KeySize
  nameWithType: SymmetricAlgorithm.KeySize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySize
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: KeySizeValue
  nameWithType: SymmetricAlgorithm.KeySizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: KeyValue
  nameWithType: SymmetricAlgorithm.KeyValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalBlockSizes
  nameWithType: SymmetricAlgorithm.LegalBlockSizes
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
- uid: System.Security.Cryptography.KeySizes[]
  parent: System.Security.Cryptography
  isExternal: false
  name: KeySizes
  nameWithType: KeySizes
  fullName: System.Security.Cryptography.KeySizes[]
  spec.csharp:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    nameWithType: KeySizes
    fullName: KeySizes[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalBlockSizesValue
  nameWithType: SymmetricAlgorithm.LegalBlockSizesValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalKeySizes
  nameWithType: SymmetricAlgorithm.LegalKeySizes
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalKeySizesValue
  nameWithType: SymmetricAlgorithm.LegalKeySizesValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Mode
  nameWithType: SymmetricAlgorithm.Mode
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Mode
- uid: System.Security.Cryptography.CipherMode
  parent: System.Security.Cryptography
  isExternal: false
  name: CipherMode
  nameWithType: CipherMode
  fullName: System.Security.Cryptography.CipherMode
- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: ModeValue
  nameWithType: SymmetricAlgorithm.ModeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Padding
  nameWithType: SymmetricAlgorithm.Padding
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Padding
- uid: System.Security.Cryptography.PaddingMode
  parent: System.Security.Cryptography
  isExternal: false
  name: PaddingMode
  nameWithType: PaddingMode
  fullName: System.Security.Cryptography.PaddingMode
- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: PaddingValue
  nameWithType: SymmetricAlgorithm.PaddingValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: ValidKeySize(Int32)
  nameWithType: SymmetricAlgorithm.ValidKeySize(Int32)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(Int32)
- uid: System.Security.Cryptography.SymmetricAlgorithm.#ctor*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: SymmetricAlgorithm
  nameWithType: SymmetricAlgorithm.SymmetricAlgorithm
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: BlockSize
  nameWithType: SymmetricAlgorithm.BlockSize
- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Clear
  nameWithType: SymmetricAlgorithm.Clear
- uid: System.Security.Cryptography.SymmetricAlgorithm.Create*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Create
  nameWithType: SymmetricAlgorithm.Create
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateDecryptor
  nameWithType: SymmetricAlgorithm.CreateDecryptor
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateEncryptor
  nameWithType: SymmetricAlgorithm.CreateEncryptor
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Dispose
  nameWithType: SymmetricAlgorithm.Dispose
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: FeedbackSize
  nameWithType: SymmetricAlgorithm.FeedbackSize
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: GenerateIV
  nameWithType: SymmetricAlgorithm.GenerateIV
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: GenerateKey
  nameWithType: SymmetricAlgorithm.GenerateKey
- uid: System.Security.Cryptography.SymmetricAlgorithm.IV*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: IV
  nameWithType: SymmetricAlgorithm.IV
- uid: System.Security.Cryptography.SymmetricAlgorithm.Key*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Key
  nameWithType: SymmetricAlgorithm.Key
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: KeySize
  nameWithType: SymmetricAlgorithm.KeySize
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalBlockSizes
  nameWithType: SymmetricAlgorithm.LegalBlockSizes
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalKeySizes
  nameWithType: SymmetricAlgorithm.LegalKeySizes
- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Mode
  nameWithType: SymmetricAlgorithm.Mode
- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Padding
  nameWithType: SymmetricAlgorithm.Padding
- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: ValidKeySize
  nameWithType: SymmetricAlgorithm.ValidKeySize
