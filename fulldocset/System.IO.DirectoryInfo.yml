### YamlMime:ManagedReference
items:
- uid: System.IO.DirectoryInfo
  id: DirectoryInfo
  children:
  - System.IO.DirectoryInfo.#ctor(System.String)
  - System.IO.DirectoryInfo.Create
  - System.IO.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)
  - System.IO.DirectoryInfo.CreateSubdirectory(System.String)
  - System.IO.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  - System.IO.DirectoryInfo.Delete
  - System.IO.DirectoryInfo.Delete(System.Boolean)
  - System.IO.DirectoryInfo.EnumerateDirectories
  - System.IO.DirectoryInfo.EnumerateDirectories(System.String)
  - System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.EnumerateFiles
  - System.IO.DirectoryInfo.EnumerateFiles(System.String)
  - System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.EnumerateFileSystemInfos
  - System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)
  - System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.Exists
  - System.IO.DirectoryInfo.GetAccessControl
  - System.IO.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)
  - System.IO.DirectoryInfo.GetDirectories
  - System.IO.DirectoryInfo.GetDirectories(System.String)
  - System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.GetFiles
  - System.IO.DirectoryInfo.GetFiles(System.String)
  - System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.GetFileSystemInfos
  - System.IO.DirectoryInfo.GetFileSystemInfos(System.String)
  - System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.MoveTo(System.String)
  - System.IO.DirectoryInfo.Name
  - System.IO.DirectoryInfo.Parent
  - System.IO.DirectoryInfo.Root
  - System.IO.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)
  - System.IO.DirectoryInfo.ToString
  langs:
  - csharp
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo
  type: Class
  summary: "公開建立、 移動和全面列舉目錄和子目錄的執行個體方法。 這個類別無法被繼承。       若要瀏覽此類型的.NET Framework 原始程式碼，請參閱[參考來源](http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e)。"
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n Use the DirectoryInfo class for typical operations such as copying, moving, renaming, creating, and deleting directories.  \n  \n If you are going to reuse an object several times, consider using the instance method of DirectoryInfo instead of the corresponding static methods of the <xref:System.IO.Directory> class, because a security check will not always be necessary.  \n  \n> [!NOTE]\n>  In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, \"c:\\temp c:\\windows\" also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.  \n  \n In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  \n  \n-   \"c:\\\\\\MyDir\\\\\\MyFile.txt\" in C#, or \"c:\\MyDir\\MyFile.txt\" in Visual Basic.  \n  \n-   \"c:\\\\\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic.  \n  \n-   \"MyDir\\\\\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic.  \n  \n-   \"\\\\\\\\\\\\\\MyServer\\\\\\MyShare\" in C#, or \"\\\\\\MyServer\\MyShare\" in Visual Basic.  \n  \n By default, full read/write access to new directories is granted to all users.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates some of the main members of the `DirectoryInfo` class.  \n  \n [!code-cpp[DirInfo Class Example#1](~/add/codesnippet/cpp/t-system.io.directoryinfo_1.cpp)]\n [!code-cs[DirInfo Class Example#1](~/add/codesnippet/csharp/t-system.io.directoryinfo_1.cs)]\n [!code-vb[DirInfo Class Example#1](~/add/codesnippet/visualbasic/t-system.io.directoryinfo_1.vb)]  \n  \n The following example demonstrates how to copy a directory and its contents.  \n  \n [!code-cs[IO.DirectoryInfo-CopyDir#1](~/add/codesnippet/csharp/t-system.io.directoryinfo_2.cs)]\n [!code-vb[IO.DirectoryInfo-CopyDir#1](~/add/codesnippet/visualbasic/t-system.io.directoryinfo_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class DirectoryInfo : System.IO.FileSystemInfo
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.IO.FileSystemInfo
  implements: []
  inheritedMembers:
  - System.IO.FileSystemInfo.Attributes
  - System.IO.FileSystemInfo.CreationTime
  - System.IO.FileSystemInfo.CreationTimeUtc
  - System.IO.FileSystemInfo.Extension
  - System.IO.FileSystemInfo.FullName
  - System.IO.FileSystemInfo.FullPath
  - System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.IO.FileSystemInfo.LastAccessTime
  - System.IO.FileSystemInfo.LastAccessTimeUtc
  - System.IO.FileSystemInfo.LastWriteTime
  - System.IO.FileSystemInfo.LastWriteTimeUtc
  - System.IO.FileSystemInfo.OriginalPath
  - System.IO.FileSystemInfo.Refresh
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.IO.DirectoryInfo.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: DirectoryInfo(String)
  nameWithType: DirectoryInfo.DirectoryInfo(String)
  fullName: System.IO.DirectoryInfo.DirectoryInfo(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "初始化的新執行個體<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>類別上指定的路徑。"
  remarks: "這個建構函式不會檢查目錄是否存在。 這個建構函式是字串，用來存取後續作業中的磁碟的預留位置。       `path`參數可以是檔案名稱，包括通用命名慣例 (UNC) 共用上的檔案。      > [!CAUTION] > 字元當您使用特定文化特性設定進行編譯的一組字元，並擷取相同的字元具有不同的文化特性設定時，可能會無法解譯，並可能會導致擲回例外狀況。       如需的一般 I/O 工作清單，請參閱[一般 I/O 工作](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example uses this constructor to create the specified directory and subdirectory, and demonstrates that a directory that contains subdirectories cannot be deleted.  \n  \n [!code-cs[DirInfo Ctor#1](~/add/codesnippet/csharp/m-system.io.directoryinf_18_1.cs)]\n [!code-cpp[DirInfo Ctor#1](~/add/codesnippet/cpp/m-system.io.directoryinf_18_1.cpp)]\n [!code-vb[DirInfo Ctor#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_18_1.vb)]"
  syntax:
    content: public DirectoryInfo (string path);
    parameters:
    - id: path
      type: System.String
      description: "字串，指定要在其中建立路徑<xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.DirectoryInfo.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>包含無效的字元，例如&quot;， &lt;， &gt;，或 |。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定的路徑、 檔案名稱，或兩者都超出系統定義的長度上限。 例如，windows 平台上，路徑必須少於 248 個字元，和檔案名稱必須少於 260 個字元。 指定的路徑、 檔案名稱，或兩者都太長。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Create
  id: Create
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Create()
  nameWithType: DirectoryInfo.Create()
  fullName: System.IO.DirectoryInfo.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "建立目錄。"
  remarks: "如果目錄已經存在，這個方法沒有任何作用。       如需的一般 I/O 工作清單，請參閱[一般 I/O 工作](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example checks whether a specified directory exists, creates the directory if it does not exist, and deletes the directory.  \n  \n [!code-cpp[DirInfo Create#1](~/add/codesnippet/cpp/m-system.io.directoryinf_11_1.cpp)]\n [!code-cs[DirInfo Create#1](~/add/codesnippet/csharp/m-system.io.directoryinf_11_1.cs)]\n [!code-vb[DirInfo Create#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_11_1.vb)]"
  syntax:
    content: public void Create ();
    parameters: []
  overload: System.IO.DirectoryInfo.Create*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "無法建立目錄。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)
  id: Create(System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Create(DirectorySecurity)
  nameWithType: DirectoryInfo.Create(DirectorySecurity)
  fullName: System.IO.DirectoryInfo.Create(DirectorySecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "建立目錄，使用<xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;></xref>物件。"
  remarks: "使用這個方法多載來建立使用存取控制的目錄，因此沒有機會可以存取目錄，才能套用安全性。       如果目錄已經存在，這個方法沒有任何作用。       如需的一般 I/O 工作清單，請參閱[一般 I/O 工作](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void Create (System.Security.AccessControl.DirectorySecurity directorySecurity);
    parameters:
    - id: directorySecurity
      type: System.Security.AccessControl.DirectorySecurity
      description: "要套用至目錄的存取控制。"
  overload: System.IO.DirectoryInfo.Create*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "所指定的目錄<code> path </code>是唯讀的或不是空的。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼叫端沒有必要的權限。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>為零長度字串、 只包含空格，或包含一或多個無效字元所定義的<xref:System.IO.Path.InvalidPathChars>。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定的路徑、 檔案名稱，或兩者都超出系統定義的長度上限。 例如，windows 平台上，路徑必須少於 248 個字元，和檔案名稱必須少於 260 個字元。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定的路徑無效，例如位於未對應的磁碟機上。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "嘗試建立目錄，以冒號 （:） 字元。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String)
  id: CreateSubdirectory(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: CreateSubdirectory(String)
  nameWithType: DirectoryInfo.CreateSubdirectory(String)
  fullName: System.IO.DirectoryInfo.CreateSubdirectory(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定路徑上建立子目錄。 指定的路徑可以相對於此執行個體<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>類別。"
  remarks: "指定的所有目錄`path`會建立，除非有部分的`path`無效。 `path`參數會指定一個目錄路徑，而不是檔案路徑。 如果子目錄已存在，這個方法沒有任何作用。      > [!NOTE] > 路徑名稱會限制為 248 個字元。       如需的一般 I/O 工作清單，請參閱[一般 I/O 工作](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example demonstrates creating a subdirectory. In this example, the created directories are removed once created. Therefore, to test this sample, comment out the delete lines in the code.  \n  \n [!code-cpp[directoryinfocreatesub#1](~/add/codesnippet/cpp/m-system.io.directoryinf_9_1.cpp)]\n [!code-cs[directoryinfocreatesub#1](~/add/codesnippet/csharp/m-system.io.directoryinf_9_1.cs)]\n [!code-vb[directoryinfocreatesub#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_9_1.vb)]"
  syntax:
    content: public System.IO.DirectoryInfo CreateSubdirectory (string path);
    parameters:
    - id: path
      type: System.String
      description: "指定的路徑。 這不能是不同的磁碟區或通用命名慣例 (UNC) 名稱。"
    return:
      type: System.IO.DirectoryInfo
      description: "中指定的最後一個目錄<code> path </code>。"
  overload: System.IO.DirectoryInfo.CreateSubdirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>未指定有效的檔案路徑或包含無效<xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;></xref>字元。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定的路徑無效，例如位於未對應的磁碟機上。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "無法建立子目錄。       -或-檔案或目錄已有指定之名稱<code> path </code>。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定的路徑、 檔案名稱，或兩者都超出系統定義的長度上限。 例如，windows 平台上，路徑必須少於 248 個字元，和檔案名稱必須少於 260 個字元。 指定的路徑、 檔案名稱，或兩者都太長。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有程式碼建立目錄的存取權限。       -或-呼叫端沒有程式碼存取權限讀取所傳回描述的目錄<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>物件。  這可能會發生時<code> path </code>參數描述現有的目錄。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>包含冒號字元 （:） 不屬於磁碟機標籤 (&quot;c:\\&quot;)。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  id: CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: CreateSubdirectory(String,DirectorySecurity)
  nameWithType: DirectoryInfo.CreateSubdirectory(String,DirectorySecurity)
  fullName: System.IO.DirectoryInfo.CreateSubdirectory(String,DirectorySecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "使用指定的安全性在指定路徑上建立子目錄。 指定的路徑可以相對於此執行個體<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>類別。"
  remarks: "指定的所有目錄`path`會建立，除非有部分的`path`無效。 `path`參數會指定一個目錄路徑，而不是檔案路徑。 如果子目錄已存在，這個方法沒有任何作用。      > [!NOTE] > 路徑名稱會限制為 248 個字元。       如需的一般 I/O 工作清單，請參閱[一般 I/O 工作](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.IO.DirectoryInfo CreateSubdirectory (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);
    parameters:
    - id: path
      type: System.String
      description: "指定的路徑。 這不能是不同的磁碟區或通用命名慣例 (UNC) 名稱。"
    - id: directorySecurity
      type: System.Security.AccessControl.DirectorySecurity
      description: "要套用的安全性。"
    return:
      type: System.IO.DirectoryInfo
      description: "中指定的最後一個目錄<code> path </code>。"
  overload: System.IO.DirectoryInfo.CreateSubdirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>未指定有效的檔案路徑或包含無效<xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;></xref>字元。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定的路徑無效，例如位於未對應的磁碟機上。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "無法建立子目錄。       -或-檔案或目錄已有指定之名稱<code> path </code>。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定的路徑、 檔案名稱，或兩者都超出系統定義的長度上限。 例如，windows 平台上，路徑必須少於 248 個字元，和檔案名稱必須少於 260 個字元。 指定的路徑、 檔案名稱，或兩者都太長。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有程式碼建立目錄的存取權限。       -或-呼叫端沒有程式碼存取權限讀取所傳回描述的目錄<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>物件。  這可能會發生時<code> path </code>參數描述現有的目錄。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>包含冒號字元 （:） 不屬於磁碟機標籤 (&quot;c:\\&quot;)。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Delete
  id: Delete
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Delete()
  nameWithType: DirectoryInfo.Delete()
  fullName: System.IO.DirectoryInfo.Delete()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "這會刪除<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>如果是空白。"
  remarks: "如需的一般 I/O 工作清單，請參閱[一般 I/O 工作](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example throws an exception if you attempt to delete a directory that is not empty.  \n  \n [!code-cpp[DirInfo Delete1#1](~/add/codesnippet/cpp/m-system.io.directoryinf_4_1.cpp)]\n [!code-cs[DirInfo Delete1#1](~/add/codesnippet/csharp/m-system.io.directoryinf_4_1.cs)]\n [!code-vb[DirInfo Delete1#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_4_1.vb)]"
  syntax:
    content: public override void Delete ();
    parameters: []
  overload: System.IO.DirectoryInfo.Delete*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "目錄包含唯讀檔案。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "所描述的目錄<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>物件不存在或找不到。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "目錄不是空的。       -或者-的目錄是應用程式的目前工作目錄。       -或-開啟的控制代碼的目錄中，而且作業系統是 Windows XP 或更早版本。 這個開啟控制代碼可能是因為列舉目錄。 如需詳細資訊，請參閱[如何︰ 列舉目錄和檔案](~/add/includes/ajax-current-ext-md.md)。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Delete(System.Boolean)
  id: Delete(System.Boolean)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Delete(Boolean)
  nameWithType: DirectoryInfo.Delete(Boolean)
  fullName: System.IO.DirectoryInfo.Delete(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "刪除此執行個體<xref href=&quot;System.IO.DirectoryInfo&quot;> </xref>，指定是否刪除子目錄和檔案。"
  remarks: "如果`DirectoryInfo`沒有檔案或子目錄，這個方法會刪除`DirectoryInfo`即使`recursive`是`false`。 嘗試刪除`DirectoryInfo`，不是空的時`recursive`是`false` <xref:System.IO.IOException>.</xref:System.IO.IOException>會擲回       如需的一般 I/O 工作清單，請參閱[一般 I/O 工作](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example demonstrates deleting a directory. Because the directory is removed, first comment out the `Delete` line to test that the directory exists. Then uncomment the same line of code to test that the directory was removed successfully.  \n  \n [!code-vb[directoryinfodelete#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_16_1.vb)]\n [!code-cs[directoryinfodelete#1](~/add/codesnippet/csharp/m-system.io.directoryinf_16_1.cs)]\n [!code-cpp[directoryinfodelete#1](~/add/codesnippet/cpp/m-system.io.directoryinf_16_1.cpp)]"
  syntax:
    content: public void Delete (bool recursive);
    parameters:
    - id: recursive
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要刪除這個目錄、 其子目錄和所有檔案，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.DirectoryInfo.Delete*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "目錄包含唯讀檔案。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "所描述的目錄<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>物件不存在或找不到。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "目錄是唯讀的。       -或-目錄中包含一或多個檔案或子目錄和<code> recursive </code>是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。       -或者-的目錄是應用程式的目前工作目錄。       -或-開啟的控制代碼的目錄或其中一個檔案，而且作業系統是 Windows XP 或更早版本。 這個開啟控制代碼可能是因為列舉目錄和檔案。 如需詳細資訊，請參閱[如何︰ 列舉目錄和檔案](~/add/includes/ajax-current-ext-md.md)。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateDirectories
  id: EnumerateDirectories
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateDirectories()
  nameWithType: DirectoryInfo.EnumerateDirectories()
  fullName: System.IO.DirectoryInfo.EnumerateDirectories()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "傳回目前目錄中的目錄資訊的可列舉集合。"
  remarks: "EnumerateDirectories 和<xref:System.IO.DirectoryInfo.GetDirectories%2A>方法不同，如下所示:-當您使用 EnumerateDirectories，您可以開始列舉的集合<xref:System.IO.DirectoryInfo>物件之前，會傳回整個集合。</xref:System.IO.DirectoryInfo> </xref:System.IO.DirectoryInfo.GetDirectories%2A>      -當您使用<xref:System.IO.DirectoryInfo.GetDirectories%2A>，您必須等待的整個陣列<xref:System.IO.DirectoryInfo>才能存取陣列傳回物件。</xref:System.IO.DirectoryInfo> </xref:System.IO.DirectoryInfo.GetDirectories%2A>       因此，當您正在使用許多檔案和目錄，EnumerateDirectories 可以更有效率。       這個方法會預先填入的下列值<xref:System.IO.DirectoryInfo>屬性:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>-<xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>傳回的集合不會快取，則每個呼叫<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>集合上的方法將會啟動新的列舉。</xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> </xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastWriteTime%2A> </xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastAccessTime%2A> </xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> </xref:System.IO.FileSystemInfo.CreationTime%2A> </xref:System.IO.FileSystemInfo.Attributes%2A> </xref:System.IO.DirectoryInfo>"
  example:
  - "The following example enumerates the subdirectories under the C:\\Program Files directory and uses a LINQ query to return the names of all directories that were created before 2009 by checking the value of the <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> property.  \n  \n If you only need the names of the subdirectories, use the static <xref:System.IO.Directory> class for better performance. For an example, see the <xref:System.IO.Directory.EnumerateDirectories%28System.String%29> method.  \n  \n [!code-vb[System.IO.DirectoryInfo.EnumDirs#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_8_1.vb)]\n [!code-cs[System.IO.DirectoryInfo.EnumDirs#1](~/add/codesnippet/csharp/m-system.io.directoryinf_8_1.cs)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> EnumerateDirectories ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
      description: "目前的目錄中目錄的可列舉集合。"
  overload: System.IO.DirectoryInfo.EnumerateDirectories*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "在封裝的路徑<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>物件無效 （例如，它位於未對應的磁碟機上）。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String)
  id: EnumerateDirectories(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateDirectories(String)
  nameWithType: DirectoryInfo.EnumerateDirectories(String)
  fullName: System.IO.DirectoryInfo.EnumerateDirectories(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "傳回符合指定的搜尋模式的目錄資訊的可列舉集合。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> EnumerateDirectories (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "要比對目錄名稱的搜尋字串。  這個參數可以包含組合的有效常值路徑與萬用 (* 和？) 字元 （請參閱 < 備註 >），但不支援規則運算式。 預設模式是 「\\*&quot;，這會傳回所有檔案。"
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
      description: "比對目錄的可列舉集合<code> searchPattern </code>。"
  overload: System.IO.DirectoryInfo.EnumerateDirectories*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "在封裝的路徑<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>物件無效 （例如，它位於未對應的磁碟機上）。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)
  id: EnumerateDirectories(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateDirectories(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateDirectories(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateDirectories(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "傳回符合指定的搜尋模式和搜尋子目錄選項的目錄資訊的可列舉集合。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration."
  example:
  - "The following example, starting from a specified directory, uses this method and the <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> method to enumerate the files and directories within the start directory and display details of any files over 10 MB in size.  \n  \n [!code-cs[System.IO.DirectoryInfo.EnumerateDirectories#1](~/add/codesnippet/csharp/688c5354-9ee8-487c-ac88-_1.cs)]\n [!code-vb[System.IO.DirectoryInfo.EnumerateDirectories#1](~/add/codesnippet/visualbasic/688c5354-9ee8-487c-ac88-_1.vb)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> EnumerateDirectories (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "要比對目錄名稱的搜尋字串。  這個參數可以包含組合的有效常值路徑與萬用 (* 和？) 字元 （請參閱 < 備註 >），但不支援規則運算式。 預設模式是 「\\*&quot;，這會傳回所有檔案。"
    - id: searchOption
      type: System.IO.SearchOption
      description: "其中一個列舉值，指定搜尋作業中是否包含目前的目錄或所有子目錄中。 預設值是<xref href=&quot;System.IO.SearchOption&quot;> </xref>。"
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
      description: "比對目錄的可列舉集合<code> searchPattern </code>和<code> searchOption </code>。"
  overload: System.IO.DirectoryInfo.EnumerateDirectories*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>不是有效<xref href=&quot;System.IO.SearchOption&quot;></xref>值。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "在封裝的路徑<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>物件無效 （例如，它位於未對應的磁碟機上）。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFiles
  id: EnumerateFiles
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFiles()
  nameWithType: DirectoryInfo.EnumerateFiles()
  fullName: System.IO.DirectoryInfo.EnumerateFiles()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "傳回目前目錄中的檔案資訊的可列舉集合。"
  remarks: "EnumerateFiles 和<xref:System.IO.DirectoryInfo.GetFiles%2A>方法不同，如下所示:-當您使用 EnumerateFiles，您可以開始列舉的集合<xref:System.IO.FileInfo>物件之前，會傳回整個集合。</xref:System.IO.FileInfo> </xref:System.IO.DirectoryInfo.GetFiles%2A>      -當您使用<xref:System.IO.DirectoryInfo.GetFiles%2A>，您必須等待的整個陣列<xref:System.IO.FileInfo>才能存取陣列傳回物件。</xref:System.IO.FileInfo> </xref:System.IO.DirectoryInfo.GetFiles%2A>       因此，當您正在使用許多檔案和目錄，EnumerateFiles 可以更有效率。       這個方法會預先填入的下列值<xref:System.IO.FileInfo>屬性:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>- <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>-<xref:System.IO.FileInfo.Length%2A>傳回的集合不會快取，則每個呼叫<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>集合上的方法將會啟動新的列舉。</xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> </xref:System.IO.FileInfo.Length%2A> </xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastWriteTime%2A> </xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastAccessTime%2A> </xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> </xref:System.IO.FileSystemInfo.CreationTime%2A> </xref:System.IO.FileSystemInfo.Attributes%2A> </xref:System.IO.FileInfo>"
  example:
  - "The following example enumerates the files under a specified directory and uses a LINQ query to return the names of all files that were created before 2009 by checking the value of the <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> property.  \n  \n If you only need the names of the files, use the static <xref:System.IO.Directory> class for better performance. For an example, see the <xref:System.IO.Directory.EnumerateFiles%28System.String%29?displayProperty=fullName> method.  \n  \n [!code-cs[System.IO.DirectoryInfo.EnumFiles#1](~/add/codesnippet/csharp/m-system.io.directoryinf_2_1.cs)]\n [!code-vb[System.IO.DirectoryInfo.EnumFiles#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_2_1.vb)]  \n  \n The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-vb[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_2_2.vb)]\n [!code-cs[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_2_2.cs)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileInfo> EnumerateFiles ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
      description: "目前的目錄中檔案的可列舉集合。"
  overload: System.IO.DirectoryInfo.EnumerateFiles*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "在封裝的路徑<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>物件無效 （例如，它位於未對應的磁碟機上）。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String)
  id: EnumerateFiles(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFiles(String)
  nameWithType: DirectoryInfo.EnumerateFiles(String)
  fullName: System.IO.DirectoryInfo.EnumerateFiles(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "傳回符合指定搜尋模式的檔案資訊的可列舉集合。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n-   <xref:System.IO.FileInfo.Length%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."
  example:
  - "The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-vb[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_1_1.vb)]\n [!code-cs[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_1_1.cs)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileInfo> EnumerateFiles (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "要比對的檔案名稱的搜尋字串。  這個參數可以包含組合的有效常值路徑與萬用 (* 和？) 字元 （請參閱 < 備註 >），但不支援規則運算式。 預設模式是 「\\*&quot;，這會傳回所有檔案。"
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
      description: "符合的檔案的可列舉集合<code> searchPattern </code>。"
  overload: System.IO.DirectoryInfo.EnumerateFiles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "在封裝的路徑<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>物件無效，（比方說，它位於未對應的磁碟機上）。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)
  id: EnumerateFiles(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFiles(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateFiles(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateFiles(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "傳回符合指定的搜尋模式和搜尋子目錄選項的檔案資訊的可列舉集合。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n-   <xref:System.IO.FileInfo.Length%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."
  example:
  - "The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-vb[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_7_1.vb)]\n [!code-cs[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_7_1.cs)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileInfo> EnumerateFiles (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "要比對的檔案名稱的搜尋字串。  這個參數可以包含組合的有效常值路徑與萬用 (* 和？) 字元 （請參閱 < 備註 >），但不支援規則運算式。 預設模式是 「\\*&quot;，這會傳回所有檔案。"
    - id: searchOption
      type: System.IO.SearchOption
      description: "其中一個列舉值，指定搜尋作業中是否包含目前的目錄或所有子目錄中。 預設值是<xref href=&quot;System.IO.SearchOption&quot;> </xref>。"
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
      description: "符合的檔案的可列舉集合<code> searchPattern </code>和<code> searchOption </code>。"
  overload: System.IO.DirectoryInfo.EnumerateFiles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>不是有效<xref href=&quot;System.IO.SearchOption&quot;></xref>值。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "在封裝的路徑<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>物件無效 （例如，它位於未對應的磁碟機上）。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos
  id: EnumerateFileSystemInfos
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFileSystemInfos()
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos()
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "傳回目前目錄中的檔案系統資訊的可列舉集合。"
  remarks: "EnumerateFileSystemInfos 和<xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>方法不同，如下所示:-當您使用 EnumerateFileSystemInfos，您可以開始列舉的集合<xref:System.IO.FileInfo>物件之前，會傳回整個集合。</xref:System.IO.FileInfo> </xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>      -當您使用<xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>，您必須等待的整個陣列<xref:System.IO.FileSystemInfo>才能存取陣列傳回物件。</xref:System.IO.FileSystemInfo> </xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>       因此，當您正在使用許多檔案和目錄，EnumerateFileSystemInfos 可以更有效率。       這個方法會預先填入的下列值<xref:System.IO.FileSystemInfo>屬性:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>-<xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>傳回的集合不會快取，則每個呼叫<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>集合上的方法將會啟動新的列舉。</xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> </xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastWriteTime%2A> </xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastAccessTime%2A> </xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> </xref:System.IO.FileSystemInfo.CreationTime%2A> </xref:System.IO.FileSystemInfo.Attributes%2A> </xref:System.IO.FileSystemInfo>"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> EnumerateFileSystemInfos ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
      description: "目前目錄中的檔案系統資訊的可列舉集合。"
  overload: System.IO.DirectoryInfo.EnumerateFileSystemInfos*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "在封裝的路徑<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>物件無效 （例如，它位於未對應的磁碟機上）。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)
  id: EnumerateFileSystemInfos(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFileSystemInfos(String)
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String)
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "傳回符合指定的搜尋模式的檔案系統資訊的可列舉集合。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> EnumerateFileSystemInfos (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "要比對目錄名稱的搜尋字串。  這個參數可以包含組合的有效常值路徑與萬用 (* 和？) 字元 （請參閱 < 備註 >），但不支援規則運算式。 預設模式是 「\\*&quot;，這會傳回所有檔案。"
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
      description: "比對的檔案系統資訊的可列舉集合<code> searchPattern </code>。"
  overload: System.IO.DirectoryInfo.EnumerateFileSystemInfos*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "在封裝的路徑<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>物件無效 （例如，它位於未對應的磁碟機上）。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  id: EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFileSystemInfos(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "傳回符合指定的搜尋模式和搜尋子目錄選項的檔案系統資訊的可列舉集合。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> EnumerateFileSystemInfos (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "要比對目錄名稱的搜尋字串。  這個參數可以包含組合的有效常值路徑與萬用 (* 和？) 字元 （請參閱 < 備註 >），但不支援規則運算式。 預設模式是 「\\*&quot;，這會傳回所有檔案。"
    - id: searchOption
      type: System.IO.SearchOption
      description: "其中一個列舉值，指定搜尋作業中是否包含目前的目錄或所有子目錄中。 預設值是<xref href=&quot;System.IO.SearchOption&quot;> </xref>。"
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
      description: "比對的檔案系統資訊的可列舉集合<code> searchPattern </code>和<code> searchOption </code>。"
  overload: System.IO.DirectoryInfo.EnumerateFileSystemInfos*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>不是有效<xref href=&quot;System.IO.SearchOption&quot;></xref>值。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "在封裝的路徑<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>物件無效 （例如，它位於未對應的磁碟機上）。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Exists
  id: Exists
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Exists
  nameWithType: DirectoryInfo.Exists
  fullName: System.IO.DirectoryInfo.Exists
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "取得值，指出目錄是否存在。"
  remarks: "Exists 屬性會傳回`false`如果發生任何錯誤時嘗試判斷指定的檔案是否存在。 可能發生這種情況下，會引發例外狀況，例如傳遞檔名無效的字元或太多的字元，失敗或遺失的磁碟，或如果呼叫端沒有讀取檔案的權限。"
  example:
  - "The following example demonstrates a use of the `Exists` property in the context of copying a source directory to a target directory.  \n  \n [!code-cpp[DirectoryInfo Usage Example#1](~/add/codesnippet/cpp/p-system.io.directoryinf_0_1.cpp)]\n [!code-cs[DirectoryInfo Usage Example#1](~/add/codesnippet/csharp/p-system.io.directoryinf_0_1.cs)]\n [!code-vb[DirectoryInfo Usage Example#1](~/add/codesnippet/visualbasic/p-system.io.directoryinf_0_1.vb)]"
  syntax:
    content: public override bool Exists { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果目錄存在。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.DirectoryInfo.Exists*
  exceptions: []
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetAccessControl
  id: GetAccessControl
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetAccessControl()
  nameWithType: DirectoryInfo.GetAccessControl()
  fullName: System.IO.DirectoryInfo.GetAccessControl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "取得<xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;></xref>物件會封裝目前所描述的目錄存取控制清單 (ACL) 項目<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>物件。"
  remarks: "呼叫這個方法多載就相當於呼叫<xref:System.IO.Directory.GetAccessControl%2A>方法多載，並指定存取控制區段<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>|<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> |<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> (<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>`Or`<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>`Or`<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> in Visual Basic).</xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.IO.Directory.GetAccessControl%2A>       您可以使用 GetAccessControl 方法來擷取目前的檔案之存取控制清單 (ACL) 項目。       ACL 描述個人及/或群組，讓他們已經有或沒有，在指定的檔案或目錄上採取特定動作的權限。 如需詳細資訊，請參閱[如何︰ 加入或移除存取控制清單項目](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example uses the GetAccessControl and <xref:System.IO.DirectoryInfo.SetAccessControl%2A> methods to add and then remove an access control list (ACL) entry from a directory.  \n  \n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/m-system.io.directoryinf_14_1.cpp)]\n [!code-cs[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/m-system.io.directoryinf_14_1.cs)]\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_14_1.vb)]"
  syntax:
    content: public System.Security.AccessControl.DirectorySecurity GetAccessControl ();
    parameters: []
    return:
      type: System.Security.AccessControl.DirectorySecurity
      description: "A <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref>封裝目錄的存取控制規則的物件。"
  overload: System.IO.DirectoryInfo.GetAccessControl*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "找不到或無法修改目錄。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "目錄是唯讀的。       -或者-目前的平台不支援此作業。       -或者-呼叫端沒有必要的權限。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "開啟目錄時發生 I/O 錯誤。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "目前的作業系統不是 Microsoft Windows 2000 或更新版本。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)
  id: GetAccessControl(System.Security.AccessControl.AccessControlSections)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetAccessControl(AccessControlSections)
  nameWithType: DirectoryInfo.GetAccessControl(AccessControlSections)
  fullName: System.IO.DirectoryInfo.GetAccessControl(AccessControlSections)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "取得<xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;></xref>封裝的描述由目前的目錄的存取控制清單 (ACL) 項目之指定的類型的物件<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>物件。"
  remarks: "您可以使用 GetAccessControl 方法來擷取目前的檔案之存取控制清單 (ACL) 項目。       ACL 描述個人及/或群組，讓他們已經有或沒有，在指定的檔案或目錄上採取特定動作的權限。 如需詳細資訊，請參閱[如何︰ 加入或移除存取控制清單項目](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Security.AccessControl.DirectorySecurity GetAccessControl (System.Security.AccessControl.AccessControlSections includeSections);
    parameters:
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "其中一個<xref href=&quot;System.Security.AccessControl.AccessControlSections&quot;></xref>值，指定類型的存取控制清單 (ACL) 資訊，接收。"
    return:
      type: System.Security.AccessControl.DirectorySecurity
      description: "A <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref>規則所描述的檔案封裝的存取控制的物件<code> path </code>參數。       例外狀況       <table><thead><tr><th> 例外狀況類型       </th><th> 狀況       </th></tr></thead><tbody><tr><td><xref href=&quot;System.SystemException&quot;></xref></td><td> 找不到或無法修改目錄。       </td></tr><tr><td> <xref:System.UnauthorizedAccessException></xref:System.UnauthorizedAccessException>       </td><td> 目前的處理序沒有開啟目錄的存取權。       </td></tr><tr><td> <xref:System.IO.IOException></xref:System.IO.IOException>       </td><td> 開啟目錄時發生 I/O 錯誤。       </td></tr><tr><td> <xref:System.PlatformNotSupportedException></xref:System.PlatformNotSupportedException>       </td><td> 目前的作業系統不是 Microsoft Windows 2000 或更新版本。       </td></tr><tr><td> <xref:System.UnauthorizedAccessException></xref:System.UnauthorizedAccessException>       </td><td> 目錄是唯讀的。       -或者-目前的平台不支援此作業。       -或者-呼叫端沒有必要的權限。       </td></tr></tbody></table>"
  overload: System.IO.DirectoryInfo.GetAccessControl*
  exceptions: []
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetDirectories
  id: GetDirectories
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetDirectories()
  nameWithType: DirectoryInfo.GetDirectories()
  fullName: System.IO.DirectoryInfo.GetDirectories()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "傳回目前目錄的子目錄。"
  remarks: "如果有任何子目錄，則這個方法會傳回空陣列。 這個方法不是遞迴的。       這個方法會預先填入的下列值<xref:System.IO.DirectoryInfo>屬性:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>- <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A></xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastWriteTime%2A> </xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastAccessTime%2A> </xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> </xref:System.IO.FileSystemInfo.CreationTime%2A> </xref:System.IO.FileSystemInfo.Attributes%2A> </xref:System.IO.DirectoryInfo>"
  example:
  - "The following example retrieves all the directories in the root directory and displays the directory names.  \n  \n [!code-cs[directoryinfogetdirectories#1](~/add/codesnippet/csharp/m-system.io.directoryinf_6_1.cs)]\n [!code-cpp[directoryinfogetdirectories#1](~/add/codesnippet/cpp/m-system.io.directoryinf_6_1.cpp)]\n [!code-vb[directoryinfogetdirectories#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_6_1.vb)]"
  syntax:
    content: public System.IO.DirectoryInfo[] GetDirectories ();
    parameters: []
    return:
      type: System.IO.DirectoryInfo[]
      description: "陣列<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>物件。"
  overload: System.IO.DirectoryInfo.GetDirectories*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "在封裝的路徑<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>物件無效，例如位於未對應的磁碟機上。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetDirectories(System.String)
  id: GetDirectories(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetDirectories(String)
  nameWithType: DirectoryInfo.GetDirectories(String)
  fullName: System.IO.DirectoryInfo.GetDirectories(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "傳回在目前的目錄陣列<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>比對指定的搜尋準則。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>"
  example:
  - "The following example counts the directories in a path that contain the specified letter.  \n  \n [!code-cpp[DirInfo GetDirs2#1](~/add/codesnippet/cpp/m-system.io.directoryinf_10_1.cpp)]\n [!code-cs[DirInfo GetDirs2#1](~/add/codesnippet/csharp/m-system.io.directoryinf_10_1.cs)]\n [!code-vb[DirInfo GetDirs2#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_10_1.vb)]"
  syntax:
    content: public System.IO.DirectoryInfo[] GetDirectories (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "要比對目錄名稱的搜尋字串。  這個參數可以包含組合的有效常值路徑與萬用 (* 和？) 字元 （請參閱 < 備註 >），但不支援規則運算式。 預設模式是 「\\*&quot;，這會傳回所有檔案。"
    return:
      type: System.IO.DirectoryInfo[]
      description: "類型的陣列<xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;></xref>相符<code> searchPattern </code>。"
  overload: System.IO.DirectoryInfo.GetDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>包含所定義的一個或多個無效的字元<xref:System.IO.Path.GetInvalidPathChars*>方法。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "在封裝的路徑<xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;></xref>物件無效 （例如，它位於未對應的磁碟機上）。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)
  id: GetDirectories(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetDirectories(String,SearchOption)
  nameWithType: DirectoryInfo.GetDirectories(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetDirectories(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "傳回在目前的目錄陣列<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>符合給定的搜尋準則，並使用值來判斷是否搜尋子目錄。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n If there are no subdirectories, or no subdirectories match the `searchPattern` parameter, this method returns an empty array.  \n  \n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>"
  example:
  - "The following example lists all of the directories and files that begin with the letter \"c\" in \"c:\\\\\".  \n  \n [!code-cpp[System.IO.DirectoryInfo_SearchOptions#00](~/add/codesnippet/cpp/m-system.io.directoryinf_0_1.cpp)]\n [!code-cs[System.IO.DirectoryInfo_SearchOptions#00](~/add/codesnippet/csharp/m-system.io.directoryinf_0_1.cs)]\n [!code-vb[System.IO.DirectoryInfo_SearchOptions#00](~/add/codesnippet/visualbasic/m-system.io.directoryinf_0_1.vb)]"
  syntax:
    content: public System.IO.DirectoryInfo[] GetDirectories (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "要比對目錄名稱的搜尋字串。  這個參數可以包含組合的有效常值路徑與萬用 (* 和？) 字元 （請參閱 < 備註 >），但不支援規則運算式。 預設模式是 「\\*&quot;，這會傳回所有檔案。"
    - id: searchOption
      type: System.IO.SearchOption
      description: "其中一個列舉值，指定搜尋作業中是否包含目前的目錄或所有子目錄中。"
    return:
      type: System.IO.DirectoryInfo[]
      description: "類型的陣列<xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;></xref>相符<code> searchPattern </code>。"
  overload: System.IO.DirectoryInfo.GetDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>包含所定義的一個或多個無效的字元<xref:System.IO.Path.GetInvalidPathChars*>方法。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>不是有效<xref href=&quot;System.IO.SearchOption&quot;></xref>值。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "在封裝的路徑<xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;></xref>物件無效 （例如，它位於未對應的磁碟機上）。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFiles
  id: GetFiles
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFiles()
  nameWithType: DirectoryInfo.GetFiles()
  fullName: System.IO.DirectoryInfo.GetFiles()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "從目前目錄傳回檔案清單。"
  remarks: "<xref:System.IO.DirectoryInfo.EnumerateFiles%2A>而 GetFiles 方法不同，如下所示:-當您使用<xref:System.IO.DirectoryInfo.EnumerateFiles%2A>，您可以開始列舉的集合<xref:System.IO.FileInfo>物件之前，會傳回整個集合。</xref:System.IO.FileInfo> </xref:System.IO.DirectoryInfo.EnumerateFiles%2A> </xref:System.IO.DirectoryInfo.EnumerateFiles%2A>      -當您使用 GetFiles 時，您必須等待的整個陣列<xref:System.IO.FileInfo>才能存取陣列傳回物件。</xref:System.IO.FileInfo>       因此，當您使用許多檔案和目錄、<xref:System.IO.DirectoryInfo.EnumerateFiles%2A>可能會更有效率。</xref:System.IO.DirectoryInfo.EnumerateFiles%2A>       如果沒有任何檔案在<xref:System.IO.DirectoryInfo>，這個方法會傳回空陣列。</xref:System.IO.DirectoryInfo>       不保證的順序傳回的檔案名稱;使用<xref:System.Array.Sort%2A>方法是否需要特定的排序次序。</xref:System.Array.Sort%2A>       這個方法會預先填入的下列值<xref:System.IO.FileInfo>屬性:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>- <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>- <xref:System.IO.FileInfo.Length%2A></xref:System.IO.FileInfo.Length%2A> </xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastWriteTime%2A> </xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastAccessTime%2A> </xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> </xref:System.IO.FileSystemInfo.CreationTime%2A> </xref:System.IO.FileSystemInfo.Attributes%2A> </xref:System.IO.FileInfo>"
  example:
  - "The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-cs[directoryinfogetfiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_5_1.cs)]\n [!code-vb[directoryinfogetfiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_5_1.vb)]"
  syntax:
    content: public System.IO.FileInfo[] GetFiles ();
    parameters: []
    return:
      type: System.IO.FileInfo[]
      description: "類型的陣列<xref href=&quot;System.IO.FileInfo&quot;> </xref>。"
  overload: System.IO.DirectoryInfo.GetFiles*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "路徑無效，例如位於未對應的磁碟機上。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFiles(System.String)
  id: GetFiles(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFiles(String)
  nameWithType: DirectoryInfo.GetFiles(String)
  fullName: System.IO.DirectoryInfo.GetFiles(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "從目前比對指定之搜尋模式的目錄傳回檔案清單。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \n  \n If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n The following wildcard specifiers are permitted in the `searchPattern` parameter.  \n  \n|Wildcard character|Description|  \n|------------------------|-----------------|  \n|*|Zero or more characters.|  \n|?|Exactly zero or one character.|  \n  \n The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n Wildcards are permitted. For example, the `searchPattern` string \"*.txt\" searches for all file names having an extension of \"txt\". The `searchPattern` string \"s\\*\" searches for all file names beginning with the letter \"s\". If there are no files, or no files that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n> [!NOTE]\n>  When using the asterisk wildcard character in a `searchPattern` (for example, \"*.txt\"), the matching behavior varies depending on the length of the specified file extension. A `searchPattern` with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the `searchPattern`. A `searchPattern` with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the `searchPattern`. When using the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files in a directory, \"file1.txt\" and \"file1.txtother\", a search pattern of \"file?.txt\" returns only the first file, while a search pattern of \"file\\*.txt\" returns both files.  \n  \n> [!NOTE]\n>  Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names. For example, using a search pattern of \"\\*1\\*.txt\" will return \"longfilename.txt\" because the equivalent 8.3 file name format would be \"longf~1.txt\".  \n  \n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n-   <xref:System.IO.FileInfo.Length%2A>"
  example:
  - "The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-cs[directoryinfogetfiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_12_1.cs)]\n [!code-vb[directoryinfogetfiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_12_1.vb)]"
  syntax:
    content: public System.IO.FileInfo[] GetFiles (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "要比對的檔案名稱的搜尋字串。  這個參數可以包含組合的有效常值路徑與萬用 (* 和？) 字元 （請參閱 < 備註 >），但不支援規則運算式。 預設模式是 「\\*&quot;，這會傳回所有檔案。"
    return:
      type: System.IO.FileInfo[]
      description: "類型的陣列<xref href=&quot;System.IO.FileInfo&quot;> </xref>。"
  overload: System.IO.DirectoryInfo.GetFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>包含所定義的一個或多個無效的字元<xref:System.IO.Path.GetInvalidPathChars*>方法。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "路徑無效 （例如，它位於未對應的磁碟機上）。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)
  id: GetFiles(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFiles(String,SearchOption)
  nameWithType: DirectoryInfo.GetFiles(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetFiles(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "傳回檔案清單，從目前的目錄比對指定之搜尋模式和使用值來判斷是否搜尋子目錄。"
  remarks: "The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \n  \n If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard character|Description|  \n|------------------------|-----------------|  \n|* (asterisk)|Zero or more characters.|  \n|? (question mark)|Exactly zero or one character.|  \n  \n The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n Wildcards are permitted. For example, the `searchPattern` string \"*.txt\" searches for all file names having an extension of \"txt\". The `searchPattern` string \"s\\*\" searches for all file names beginning with the letter \"s\". If there are no files, or no files that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n> [!NOTE]\n>  When using the asterisk wildcard character in a `searchPattern` (for example, \"*.txt\"), the matching behavior varies depending on the length of the specified file extension. A `searchPattern` with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the `searchPattern`. A `searchPattern` with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the `searchPattern`. When using the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files in a directory, \"file1.txt\" and \"file1.txtother\", a search pattern of \"file?.txt\" returns only the first file, while a search pattern of \"file\\*.txt\" returns both files.  \n  \n The following list shows the behavior of different lengths for the `searchPattern` parameter:  \n  \n-   \"*.abc\" returns files having an extension of.abc,.abcd,.abcde,.abcdef, and so on.  \n  \n-   \"*.abcd\" returns only files having an extension of.abcd.  \n  \n-   \"*.abcde\" returns only files having an extension of.abcde.  \n  \n-   \"*.abcdef\" returns only files having an extension of.abcdef.  \n  \n> [!NOTE]\n>  Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names. For example, using a search pattern of \"\\*1\\*.txt\" will return \"longfilename.txt\" because the equivalent 8.3 file name format would be \"longf~1.txt\".  \n  \n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \n  \n1.  <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n2.  <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n3.  <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n4.  <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n5.  <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n6.  <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n7.  <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n8.  <xref:System.IO.FileInfo.Length%2A>"
  example:
  - "The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-cs[directoryinfogetfiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_13_1.cs)]\n [!code-vb[directoryinfogetfiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_13_1.vb)]"
  syntax:
    content: public System.IO.FileInfo[] GetFiles (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "要比對的檔案名稱的搜尋字串。  這個參數可以包含組合的有效常值路徑與萬用 (* 和？) 字元 （請參閱 < 備註 >），但不支援規則運算式。 預設模式是 「\\*&quot;，這會傳回所有檔案。"
    - id: searchOption
      type: System.IO.SearchOption
      description: "其中一個列舉值，指定搜尋作業中是否包含目前的目錄或所有子目錄中。"
    return:
      type: System.IO.FileInfo[]
      description: "類型的陣列<xref href=&quot;System.IO.FileInfo&quot;> </xref>。"
  overload: System.IO.DirectoryInfo.GetFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>包含所定義的一個或多個無效的字元<xref:System.IO.Path.GetInvalidPathChars*>方法。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>不是有效<xref href=&quot;System.IO.SearchOption&quot;></xref>值。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "路徑無效 （例如，它位於未對應的磁碟機上）。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFileSystemInfos
  id: GetFileSystemInfos
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFileSystemInfos()
  nameWithType: DirectoryInfo.GetFileSystemInfos()
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "傳回強類型的陣列<xref href=&quot;System.IO.FileSystemInfo&quot;></xref>代表所有檔案和子目錄的目錄中的項目。"
  remarks: "如果沒有任何檔案或目錄中的<xref:System.IO.DirectoryInfo>，這個方法會傳回空陣列。</xref:System.IO.DirectoryInfo> 這個方法不是遞迴的。       為子目錄，<xref:System.IO.FileSystemInfo>這個方法所傳回的物件可以轉換成衍生類別<xref:System.IO.DirectoryInfo>.</xref:System.IO.DirectoryInfo> </xref:System.IO.FileSystemInfo> 使用<xref:System.IO.FileAttributes>所傳回的值<xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName>屬性來判斷是否<xref:System.IO.FileSystemInfo>代表檔案或目錄。</xref:System.IO.FileSystemInfo> </xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> </xref:System.IO.FileAttributes>       這個方法會預先填入的下列值<xref:System.IO.FileSystemInfo>屬性:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>- <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A></xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastWriteTime%2A> </xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastAccessTime%2A> </xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> </xref:System.IO.FileSystemInfo.CreationTime%2A> </xref:System.IO.FileSystemInfo.Attributes%2A> </xref:System.IO.FileSystemInfo>"
  example:
  - "The following example counts the files and directories under the specified directory.  \n  \n [!code-vb[FSizeSort#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_3_1.vb)]\n [!code-cs[FSizeSort#1](~/add/codesnippet/csharp/m-system.io.directoryinf_3_1.cs)]"
  syntax:
    content: public System.IO.FileSystemInfo[] GetFileSystemInfos ();
    parameters: []
    return:
      type: System.IO.FileSystemInfo[]
      description: "強型別陣列<xref href=&quot;System.IO.FileSystemInfo&quot;></xref>項目。"
  overload: System.IO.DirectoryInfo.GetFileSystemInfos*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "路徑無效 （例如，它位於未對應的磁碟機上）。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String)
  id: GetFileSystemInfos(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFileSystemInfos(String)
  nameWithType: DirectoryInfo.GetFileSystemInfos(String)
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "擷取強式類型的陣列<xref href=&quot;System.IO.FileSystemInfo&quot;></xref>代表的檔案和子目錄中符合指定的搜尋準則的物件。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n This method is not recursive.  \n  \n For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.  \n  \n Wild cards are permitted. For example, the `searchPattern` string \"*t\" searches for all directory names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all directory names in `path` beginning with the letter \"s\".  \n  \n The string \"..\" can only be used in `searchPattern` if it is specified as a part of a valid directory name, such as in the directory name \"a..b\". It cannot be used to move up the directory hierarchy. If there are no files or directories, or no files or directories that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>"
  example:
  - "The following example counts the files and directories that match the specified search pattern.  \n  \n [!code-cs[DirInfo GetFileSysInfos2#1](~/add/codesnippet/csharp/m-system.io.directoryinf_15_1.cs)]\n [!code-vb[DirInfo GetFileSysInfos2#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_15_1.vb)]"
  syntax:
    content: public System.IO.FileSystemInfo[] GetFileSystemInfos (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "要比對目錄及檔案名稱的搜尋字串。  這個參數可以包含組合的有效常值路徑與萬用 (* 和？) 字元 （請參閱 < 備註 >），但不支援規則運算式。 預設模式是 「\\*&quot;，這會傳回所有檔案。"
    return:
      type: System.IO.FileSystemInfo[]
      description: "強型別陣列<xref uid=&quot;langword_csharp_FileSystemInfo&quot; name=&quot;FileSystemInfo&quot; href=&quot;&quot;></xref>符合搜尋準則的物件。"
  overload: System.IO.DirectoryInfo.GetFileSystemInfos*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>包含所定義的一個或多個無效的字元<xref:System.IO.Path.GetInvalidPathChars*>方法。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定的路徑無效 （例如，它位於未對應的磁碟機上）。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)
  id: GetFileSystemInfos(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFileSystemInfos(String,SearchOption)
  nameWithType: DirectoryInfo.GetFileSystemInfos(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "擷取陣列<xref href=&quot;System.IO.FileSystemInfo&quot;></xref>表示的檔案和子目錄符合指定的搜尋條件的物件。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>"
  syntax:
    content: public System.IO.FileSystemInfo[] GetFileSystemInfos (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "要比對目錄及檔案名稱的搜尋字串。  這個參數可以包含組合的有效常值路徑與萬用 (* 和？) 字元 （請參閱 < 備註 >），但不支援規則運算式。 預設模式是 「\\*&quot;，這會傳回所有檔案。"
    - id: searchOption
      type: System.IO.SearchOption
      description: "其中一個列舉值，指定搜尋作業中是否包含目前的目錄或所有子目錄中。 預設值是<xref href=&quot;System.IO.SearchOption&quot;> </xref>。"
    return:
      type: System.IO.FileSystemInfo[]
      description: "符合搜尋準則之檔案系統項目的陣列。"
  overload: System.IO.DirectoryInfo.GetFileSystemInfos*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>包含所定義的一個或多個無效的字元<xref:System.IO.Path.GetInvalidPathChars*>方法。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>不是有效<xref href=&quot;System.IO.SearchOption&quot;></xref>值。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定的路徑無效 （例如，它位於未對應的磁碟機上）。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.MoveTo(System.String)
  id: MoveTo(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: MoveTo(String)
  nameWithType: DirectoryInfo.MoveTo(String)
  fullName: System.IO.DirectoryInfo.MoveTo(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "移動<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>執行個體和其內容至新的路徑。"
  remarks: "This method throws an <xref:System.IO.IOException> if, for example, you try to move c:\\mydir to c:\\public, and c:\\public already exists. You must specify \"c:\\\\\\public\\\\\\mydir\" as the `destDirName` parameter, or specify a new directory name such as \"c:\\\\\\newdir\".  \n  \n This method permits moving a directory to a read-only directory. The read/write attribute of neither directory is affected.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates moving a directory.  \n  \n [!code-cs[directoryinfomoveto#1](~/add/codesnippet/csharp/m-system.io.directoryinf_17_1.cs)]\n [!code-cpp[directoryinfomoveto#1](~/add/codesnippet/cpp/m-system.io.directoryinf_17_1.cpp)]\n [!code-vb[directoryinfomoveto#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_17_1.vb)]"
  syntax:
    content: public void MoveTo (string destDirName);
    parameters:
    - id: destDirName
      type: System.String
      description: "名稱和要將這個目錄移至的路徑。 目的地不能是另一個磁碟區，或是具有相同名稱的目錄。 它可以是您要將這個目錄加入做為子目錄的現有目錄。"
  overload: System.IO.DirectoryInfo.MoveTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destDirName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>destDirName</code>為空字串 (&quot;)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "嘗試將目錄移至不同的磁碟區。       - <code> destDirName </code>已經存在。       -或者-您未獲授權存取這個路徑。       -或者-正在移動的目錄和目的地目錄具有相同的名稱。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "找不到目的地目錄。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Name
  id: Name
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Name
  nameWithType: DirectoryInfo.Name
  fullName: System.IO.DirectoryInfo.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "取得這個名稱<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>執行個體。"
  remarks: "This Name property returns only the name of the directory, such as \"Bin\". To get the full path, such as \"c:\\public\\Bin\", use the <xref:System.IO.FileSystemInfo.FullName%2A> property.  \n  \n The Name property of a <xref:System.IO.DirectoryInfo> requires no permission (beyond the read permission to the directory necessary to construct the <xref:System.IO.DirectoryInfo.Exists%2A>) but can give out the directory name. If it is necessary to hand out a <xref:System.IO.DirectoryInfo> to a protected directory with a cryptographically secure name, create a dummy directory for the untrusted code’s use.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example displays the name of the current `DirectoryInfo` instance only.  \n  \n [!code-cs[Classic DirectoryInfo.Name Example#1](~/add/codesnippet/csharp/p-system.io.directoryinf_3_1.cs)]\n [!code-vb[Classic DirectoryInfo.Name Example#1](~/add/codesnippet/visualbasic/p-system.io.directoryinf_3_1.vb)]\n [!code-cpp[Classic DirectoryInfo.Name Example#1](~/add/codesnippet/cpp/p-system.io.directoryinf_3_1.cpp)]"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: "目錄名稱。"
  overload: System.IO.DirectoryInfo.Name*
  exceptions: []
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Parent
  id: Parent
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Parent
  nameWithType: DirectoryInfo.Parent
  fullName: System.IO.DirectoryInfo.Parent
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "取得指定子目錄的父目錄。"
  remarks: "如需的一般 I/O 工作清單，請參閱[一般 I/O 工作](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example demonstrates referring to the parent directory of a specified directory.  \n  \n [!code-cs[directoryinfoparent#1](~/add/codesnippet/csharp/p-system.io.directoryinf_1_1.cs)]\n [!code-vb[directoryinfoparent#1](~/add/codesnippet/visualbasic/p-system.io.directoryinf_1_1.vb)]\n [!code-cpp[directoryinfoparent#1](~/add/codesnippet/cpp/p-system.io.directoryinf_1_1.cpp)]"
  syntax:
    content: public System.IO.DirectoryInfo Parent { get; }
    return:
      type: System.IO.DirectoryInfo
      description: "父代目錄，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果路徑是 null 或者檔案路徑代表根目錄 (例如&quot;\\&quot;，&quot;C:&quot;或 *&quot;\\\\\\server\\share&quot;)。"
  overload: System.IO.DirectoryInfo.Parent*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Root
  id: Root
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Root
  nameWithType: DirectoryInfo.Root
  fullName: System.IO.DirectoryInfo.Root
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "取得目錄的根目錄部分。"
  remarks: ''
  example:
  - "The following example displays root locations for specified directories.  \n  \n [!code-cs[directoryinforoot#2](~/add/codesnippet/csharp/p-system.io.directoryinf_2_1.cs)]\n [!code-vb[directoryinforoot#2](~/add/codesnippet/visualbasic/p-system.io.directoryinf_2_1.vb)]"
  syntax:
    content: public System.IO.DirectoryInfo Root { get; }
    return:
      type: System.IO.DirectoryInfo
      description: "物件，表示目錄的根目錄。"
  overload: System.IO.DirectoryInfo.Root*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)
  id: SetAccessControl(System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: SetAccessControl(DirectorySecurity)
  nameWithType: DirectoryInfo.SetAccessControl(DirectorySecurity)
  fullName: System.IO.DirectoryInfo.SetAccessControl(DirectorySecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "適用於所描述的存取控制清單 (ACL) 項目<xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;></xref>描述由目前的目錄物件<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>物件。"
  remarks: "存取控制清單 (ACL) 說明個人和/或群組，讓他們已經有或沒有，在指定的檔案或目錄上採取特定動作的權限。 如需詳細資訊，請參閱[如何︰ 加入或移除存取控制清單項目](~/add/includes/ajax-current-ext-md.md)。       SetAccessControl 方法適用於代表 noninherited 的 ACL 清單的檔案 ACL 項目。      > [!CAUTION] > ACL 指定`directorySecurity`取代現有目錄的 ACL。 若要加入之新使用者的權限，使用<xref:System.IO.DirectoryInfo.GetAccessControl%2A>方法來取得現有的 ACL，並修改它。</xref:System.IO.DirectoryInfo.GetAccessControl%2A>       只保存 SetAccessControl 方法<xref:System.Security.AccessControl.DirectorySecurity>物件建立後已修改的物件。</xref:System.Security.AccessControl.DirectorySecurity>  如果<xref:System.Security.AccessControl.DirectorySecurity>不修改物件，不會保存至檔案。</xref:System.Security.AccessControl.DirectorySecurity>  因此，不可以擷取<xref:System.Security.AccessControl.DirectorySecurity>物件從一個檔案，並重新套用到另一個檔案的相同物件。</xref:System.Security.AccessControl.DirectorySecurity>       若要將 ACL 資訊從一個檔案複製到另一個︰ 1。  使用<xref:System.IO.DirectoryInfo.GetAccessControl%2A>方法來擷取<xref:System.Security.AccessControl.DirectorySecurity>從原始程式檔的物件。</xref:System.Security.AccessControl.DirectorySecurity> </xref:System.IO.DirectoryInfo.GetAccessControl%2A>      2.  建立新<xref:System.Security.AccessControl.DirectorySecurity>目的地檔案的物件。</xref:System.Security.AccessControl.DirectorySecurity>      3.  使用<xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A>或<xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>來源方法<xref:System.Security.AccessControl.DirectorySecurity>擷取 ACL 資訊的物件。</xref:System.Security.AccessControl.DirectorySecurity> </xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> </xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A>      4.  使用<xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A>或<xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A>方法可複製的資訊擷取到目的地的步驟 3 中<xref:System.Security.AccessControl.DirectorySecurity>物件。</xref:System.Security.AccessControl.DirectorySecurity> </xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> </xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A>      5.  設定目的地<xref:System.Security.AccessControl.DirectorySecurity>使用 SetAccessControl 方法的目的檔案的物件。</xref:System.Security.AccessControl.DirectorySecurity>"
  example:
  - "The following example uses the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> and SetAccessControl methods to add and then remove an access control list (ACL) entry from a directory.  \n  \n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/d8d660a0-50f5-42be-9101-_1.cpp)]\n [!code-cs[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/d8d660a0-50f5-42be-9101-_1.cs)]\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/d8d660a0-50f5-42be-9101-_1.vb)]"
  syntax:
    content: public void SetAccessControl (System.Security.AccessControl.DirectorySecurity directorySecurity);
    parameters:
    - id: directorySecurity
      type: System.Security.AccessControl.DirectorySecurity
      description: "物件，描述要套用至所描述之目錄的 ACL 項目`path`參數。"
  overload: System.IO.DirectoryInfo.SetAccessControl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>directorySecurity</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "找不到或無法修改檔案。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "目前的處理序沒有開啟檔案的存取權。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "目前的作業系統不是 Microsoft Windows 2000 或更新版本。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.ToString
  id: ToString
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: ToString()
  nameWithType: DirectoryInfo.ToString()
  fullName: System.IO.DirectoryInfo.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "傳回已由使用者傳遞的原始路徑。"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "傳回已由使用者傳遞的原始路徑。"
  overload: System.IO.DirectoryInfo.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.IO.FileSystemInfo
  isExternal: false
  name: System.IO.FileSystemInfo
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.IO.DirectoryInfo.#ctor(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: DirectoryInfo(String)
  nameWithType: DirectoryInfo.DirectoryInfo(String)
  fullName: System.IO.DirectoryInfo.DirectoryInfo(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.DirectoryInfo.Create
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Create()
  nameWithType: DirectoryInfo.Create()
  fullName: System.IO.DirectoryInfo.Create()
- uid: System.IO.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Create(DirectorySecurity)
  nameWithType: DirectoryInfo.Create(DirectorySecurity)
  fullName: System.IO.DirectoryInfo.Create(DirectorySecurity)
- uid: System.Security.AccessControl.DirectorySecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: DirectorySecurity
  nameWithType: DirectorySecurity
  fullName: System.Security.AccessControl.DirectorySecurity
- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: CreateSubdirectory(String)
  nameWithType: DirectoryInfo.CreateSubdirectory(String)
  fullName: System.IO.DirectoryInfo.CreateSubdirectory(String)
- uid: System.IO.DirectoryInfo
  parent: System.IO
  isExternal: false
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo
- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: CreateSubdirectory(String,DirectorySecurity)
  nameWithType: DirectoryInfo.CreateSubdirectory(String,DirectorySecurity)
  fullName: System.IO.DirectoryInfo.CreateSubdirectory(String,DirectorySecurity)
- uid: System.IO.DirectoryInfo.Delete
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Delete()
  nameWithType: DirectoryInfo.Delete()
  fullName: System.IO.DirectoryInfo.Delete()
- uid: System.IO.DirectoryInfo.Delete(System.Boolean)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Delete(Boolean)
  nameWithType: DirectoryInfo.Delete(Boolean)
  fullName: System.IO.DirectoryInfo.Delete(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.DirectoryInfo.EnumerateDirectories
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateDirectories()
  nameWithType: DirectoryInfo.EnumerateDirectories()
  fullName: System.IO.DirectoryInfo.EnumerateDirectories()
- uid: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<DirectoryInfo>
  nameWithType: IEnumerable<DirectoryInfo>
  fullName: System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.IO.DirectoryInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.DirectoryInfo
    name: DirectoryInfo
    nameWithType: DirectoryInfo
    fullName: DirectoryInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateDirectories(String)
  nameWithType: DirectoryInfo.EnumerateDirectories(String)
  fullName: System.IO.DirectoryInfo.EnumerateDirectories(String)
- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateDirectories(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateDirectories(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateDirectories(String,SearchOption)
- uid: System.IO.SearchOption
  parent: System.IO
  isExternal: false
  name: SearchOption
  nameWithType: SearchOption
  fullName: System.IO.SearchOption
- uid: System.IO.DirectoryInfo.EnumerateFiles
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFiles()
  nameWithType: DirectoryInfo.EnumerateFiles()
  fullName: System.IO.DirectoryInfo.EnumerateFiles()
- uid: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<FileInfo>
  nameWithType: IEnumerable<FileInfo>
  fullName: System.Collections.Generic.IEnumerable<System.IO.FileInfo>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.IO.FileInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.FileInfo
    name: FileInfo
    nameWithType: FileInfo
    fullName: FileInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFiles(String)
  nameWithType: DirectoryInfo.EnumerateFiles(String)
  fullName: System.IO.DirectoryInfo.EnumerateFiles(String)
- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFiles(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateFiles(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateFiles(String,SearchOption)
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFileSystemInfos()
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos()
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos()
- uid: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<FileSystemInfo>
  nameWithType: IEnumerable<FileSystemInfo>
  fullName: System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.IO.FileSystemInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.FileSystemInfo
    name: FileSystemInfo
    nameWithType: FileSystemInfo
    fullName: FileSystemInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFileSystemInfos(String)
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String)
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(String)
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFileSystemInfos(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(String,SearchOption)
- uid: System.IO.DirectoryInfo.Exists
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Exists
  nameWithType: DirectoryInfo.Exists
  fullName: System.IO.DirectoryInfo.Exists
- uid: System.IO.DirectoryInfo.GetAccessControl
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetAccessControl()
  nameWithType: DirectoryInfo.GetAccessControl()
  fullName: System.IO.DirectoryInfo.GetAccessControl()
- uid: System.IO.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetAccessControl(AccessControlSections)
  nameWithType: DirectoryInfo.GetAccessControl(AccessControlSections)
  fullName: System.IO.DirectoryInfo.GetAccessControl(AccessControlSections)
- uid: System.Security.AccessControl.AccessControlSections
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlSections
  nameWithType: AccessControlSections
  fullName: System.Security.AccessControl.AccessControlSections
- uid: System.IO.DirectoryInfo.GetDirectories
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetDirectories()
  nameWithType: DirectoryInfo.GetDirectories()
  fullName: System.IO.DirectoryInfo.GetDirectories()
- uid: System.IO.DirectoryInfo[]
  parent: System.IO
  isExternal: false
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo[]
  spec.csharp:
  - uid: System.IO.DirectoryInfo
    name: DirectoryInfo
    nameWithType: DirectoryInfo
    fullName: DirectoryInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.DirectoryInfo.GetDirectories(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetDirectories(String)
  nameWithType: DirectoryInfo.GetDirectories(String)
  fullName: System.IO.DirectoryInfo.GetDirectories(String)
- uid: System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetDirectories(String,SearchOption)
  nameWithType: DirectoryInfo.GetDirectories(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetDirectories(String,SearchOption)
- uid: System.IO.DirectoryInfo.GetFiles
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFiles()
  nameWithType: DirectoryInfo.GetFiles()
  fullName: System.IO.DirectoryInfo.GetFiles()
- uid: System.IO.FileInfo[]
  parent: System.IO
  isExternal: false
  name: FileInfo
  nameWithType: FileInfo
  fullName: System.IO.FileInfo[]
  spec.csharp:
  - uid: System.IO.FileInfo
    name: FileInfo
    nameWithType: FileInfo
    fullName: FileInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.DirectoryInfo.GetFiles(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFiles(String)
  nameWithType: DirectoryInfo.GetFiles(String)
  fullName: System.IO.DirectoryInfo.GetFiles(String)
- uid: System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFiles(String,SearchOption)
  nameWithType: DirectoryInfo.GetFiles(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetFiles(String,SearchOption)
- uid: System.IO.DirectoryInfo.GetFileSystemInfos
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFileSystemInfos()
  nameWithType: DirectoryInfo.GetFileSystemInfos()
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos()
- uid: System.IO.FileSystemInfo[]
  parent: System.IO
  isExternal: false
  name: FileSystemInfo
  nameWithType: FileSystemInfo
  fullName: System.IO.FileSystemInfo[]
  spec.csharp:
  - uid: System.IO.FileSystemInfo
    name: FileSystemInfo
    nameWithType: FileSystemInfo
    fullName: FileSystemInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFileSystemInfos(String)
  nameWithType: DirectoryInfo.GetFileSystemInfos(String)
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(String)
- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFileSystemInfos(String,SearchOption)
  nameWithType: DirectoryInfo.GetFileSystemInfos(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(String,SearchOption)
- uid: System.IO.DirectoryInfo.MoveTo(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: MoveTo(String)
  nameWithType: DirectoryInfo.MoveTo(String)
  fullName: System.IO.DirectoryInfo.MoveTo(String)
- uid: System.IO.DirectoryInfo.Name
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Name
  nameWithType: DirectoryInfo.Name
  fullName: System.IO.DirectoryInfo.Name
- uid: System.IO.DirectoryInfo.Parent
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Parent
  nameWithType: DirectoryInfo.Parent
  fullName: System.IO.DirectoryInfo.Parent
- uid: System.IO.DirectoryInfo.Root
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Root
  nameWithType: DirectoryInfo.Root
  fullName: System.IO.DirectoryInfo.Root
- uid: System.IO.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: SetAccessControl(DirectorySecurity)
  nameWithType: DirectoryInfo.SetAccessControl(DirectorySecurity)
  fullName: System.IO.DirectoryInfo.SetAccessControl(DirectorySecurity)
- uid: System.IO.DirectoryInfo.ToString
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: ToString()
  nameWithType: DirectoryInfo.ToString()
  fullName: System.IO.DirectoryInfo.ToString()
- uid: System.IO.DirectoryInfo.#ctor*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: DirectoryInfo
  nameWithType: DirectoryInfo.DirectoryInfo
- uid: System.IO.DirectoryInfo.Create*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Create
  nameWithType: DirectoryInfo.Create
- uid: System.IO.DirectoryInfo.CreateSubdirectory*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: CreateSubdirectory
  nameWithType: DirectoryInfo.CreateSubdirectory
- uid: System.IO.DirectoryInfo.Delete*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Delete
  nameWithType: DirectoryInfo.Delete
- uid: System.IO.DirectoryInfo.EnumerateDirectories*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateDirectories
  nameWithType: DirectoryInfo.EnumerateDirectories
- uid: System.IO.DirectoryInfo.EnumerateFiles*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFiles
  nameWithType: DirectoryInfo.EnumerateFiles
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFileSystemInfos
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos
- uid: System.IO.DirectoryInfo.Exists*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Exists
  nameWithType: DirectoryInfo.Exists
- uid: System.IO.DirectoryInfo.GetAccessControl*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetAccessControl
  nameWithType: DirectoryInfo.GetAccessControl
- uid: System.IO.DirectoryInfo.GetDirectories*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetDirectories
  nameWithType: DirectoryInfo.GetDirectories
- uid: System.IO.DirectoryInfo.GetFiles*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFiles
  nameWithType: DirectoryInfo.GetFiles
- uid: System.IO.DirectoryInfo.GetFileSystemInfos*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFileSystemInfos
  nameWithType: DirectoryInfo.GetFileSystemInfos
- uid: System.IO.DirectoryInfo.MoveTo*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: MoveTo
  nameWithType: DirectoryInfo.MoveTo
- uid: System.IO.DirectoryInfo.Name*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Name
  nameWithType: DirectoryInfo.Name
- uid: System.IO.DirectoryInfo.Parent*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Parent
  nameWithType: DirectoryInfo.Parent
- uid: System.IO.DirectoryInfo.Root*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Root
  nameWithType: DirectoryInfo.Root
- uid: System.IO.DirectoryInfo.SetAccessControl*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: SetAccessControl
  nameWithType: DirectoryInfo.SetAccessControl
- uid: System.IO.DirectoryInfo.ToString*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: ToString
  nameWithType: DirectoryInfo.ToString
