### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.EventWaitHandleAccessRule
  id: EventWaitHandleAccessRule
  children:
  - System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  langs:
  - csharp
  name: EventWaitHandleAccessRule
  nameWithType: EventWaitHandleAccessRule
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule
  type: Class
  summary: "代表一組允許或拒絕使用者或群組的存取權限。 這個類別無法被繼承。"
  remarks: "EventWaitHandleAccessRule 類別是一組.NET Framework 提供用於管理 Windows 存取控制安全性具名的系統事件的類別。 如需這些類別和其基礎的 Windows 存取控制結構的關聯性的概觀，請參閱<xref:System.Security.AccessControl.EventWaitHandleSecurity>.</xref:System.Security.AccessControl.EventWaitHandleSecurity>      > [!NOTE] > Windows 存取控制安全性是才有意義的具名系統事件。 如果<xref:System.Threading.EventWaitHandle>物件都代表一個區域事件、 存取控制是不相關。</xref:System.Threading.EventWaitHandle>       若要取得目前套用至具名事件的規則清單，請使用<xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>方法來取得<xref:System.Security.AccessControl.EventWaitHandleSecurity>物件，然後再使用其<xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A>方法，以取得 EventWaitHandleAccessRule 物件的集合。</xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> </xref:System.Security.AccessControl.EventWaitHandleSecurity> </xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>       EventWaitHandleAccessRule 物件不會將使用基礎的判別存取控制清單 (DACL) 中存取控制項目一對一。 當您取得的所有存取規則集的事件時，集合會包含規則目前表示所有存取控制項目所需的最小數目。      > [!NOTE] > 基礎的存取控制項目變更為您套用和移除規則。 規則中的資訊可能的話，合併到維護最小的數字的存取控制項目。 因此，當您取得目前的規則清單時，它看起來可能不完全與您加入的所有規則的清單。       使用 EventWaitHandleAccessRule 物件來指定要允許或拒絕使用者或群組的存取權限。 物件一律代表 EventWaitHandleAccessRule 允許存取或拒絕存取，永遠不會兩者。       若要將規則套用至具名的系統事件，請使用<xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>方法來取得<xref:System.Security.AccessControl.EventWaitHandleSecurity>物件。</xref:System.Security.AccessControl.EventWaitHandleSecurity> </xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> 修改<xref:System.Security.AccessControl.EventWaitHandleSecurity>物件使用其方法來新增規則，然後使用<xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>重新附加安全性物件的方法。</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.EventWaitHandleSecurity>      > [!IMPORTANT] > 作<xref:System.Security.AccessControl.EventWaitHandleSecurity>物件不會影響具名事件，直到您呼叫的存取層級<xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>更改的安全性物件將具名事件的方法。</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.EventWaitHandleSecurity>       EventWaitHandleAccessRule 物件是不可變的。 安全性事件會使用的方法進行修改<xref:System.Security.AccessControl.EventWaitHandleSecurity>類別來新增或移除規則; 當您這麼做時，會修改基礎的存取控制項目。</xref:System.Security.AccessControl.EventWaitHandleSecurity>      > [!NOTE] > Windows 98 或 Windows Millennium Edition 不支援同步處理物件的安全性。"
  example:
  - "The following code example demonstrates the creation and use of EventWaitHandleAccessRule objects. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType>rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_0_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_0_1.vb)]"
  syntax:
    content: 'public sealed class EventWaitHandleAccessRule : System.Security.AccessControl.AccessRule'
  inheritance:
  - System.Object
  - System.Security.AccessControl.AuthorizationRule
  - System.Security.AccessControl.AccessRule
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.AccessRule.AccessControlType
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  langs:
  - csharp
  name: EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "初始化的新執行個體<xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;></xref>類別，指定使用者或群組將規則套用到的存取權限，以及是否允許或拒絕指定的存取權。"
  remarks: "等候<xref:System.Threading.EventWaitHandle>(藉由呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>，<xref:System.Threading.WaitHandle.WaitAny%2A>或<xref:System.Threading.WaitHandle.WaitAll%2A>方法)，使用者必須擁有<xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>存取。</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> </xref:System.Threading.WaitHandle.WaitAll%2A> </xref:System.Threading.WaitHandle.WaitAny%2A> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.EventWaitHandle> 若要對事件發出信號藉由呼叫<xref:System.Threading.EventWaitHandle.Set%2A>方法，或藉由呼叫未發出信號的狀態重設<xref:System.Threading.EventWaitHandle.Reset%2A>方法，使用者必須擁有<xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>存取。</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> </xref:System.Threading.EventWaitHandle.Reset%2A> </xref:System.Threading.EventWaitHandle.Set%2A> 發出信號<xref:System.Threading.EventWaitHandle>物件，然後等待它藉由呼叫<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法，使用者必須擁有<xref:System.Security.AccessControl.EventWaitHandleRights>和<xref:System.Security.AccessControl.EventWaitHandleRights>存取。</xref:System.Security.AccessControl.EventWaitHandleRights> </xref:System.Security.AccessControl.EventWaitHandleRights> </xref:System.Threading.WaitHandle.SignalAndWait%2A> </xref:System.Threading.EventWaitHandle>"
  syntax:
    content: public EventWaitHandleAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "使用者或群組要套用規則。 必須是型別<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>或型別，例如<xref href=&quot;System.Security.Principal.NTAccount&quot;></xref>可以轉換為類型<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>。"
    - id: eventRights
      type: System.Security.AccessControl.EventWaitHandleRights
      description: "位元組合<xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;></xref>指定權限的值允許或拒絕。"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "其中一個<xref href=&quot;System.Security.AccessControl.AccessControlType&quot;></xref>值，指定是否允許或拒絕權限。"
  overload: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>指定無效的值。       -或-<code>type</code>指定無效的值。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -或-<code>eventRights</code>為零。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>既不是類型<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>或型別，例如<xref href=&quot;System.Security.Principal.NTAccount&quot;></xref>可以轉換為類型<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  langs:
  - csharp
  name: EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "初始化的新執行個體<xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;></xref>類別指定名稱的使用者或群組將規則套用到的存取權限，以及是否允許或拒絕指定的存取權。"
  remarks: "等候<xref:System.Threading.EventWaitHandle>(藉由呼叫<xref:System.Threading.WaitHandle.WaitOne%2A>，<xref:System.Threading.WaitHandle.WaitAny%2A>或<xref:System.Threading.WaitHandle.WaitAll%2A>方法)，使用者必須擁有<xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>存取。</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> </xref:System.Threading.WaitHandle.WaitAll%2A> </xref:System.Threading.WaitHandle.WaitAny%2A> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.EventWaitHandle> 若要對事件發出信號藉由呼叫<xref:System.Threading.EventWaitHandle.Set%2A>方法，或藉由呼叫未發出信號的狀態重設<xref:System.Threading.EventWaitHandle.Reset%2A>方法，使用者必須擁有<xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>存取。</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> </xref:System.Threading.EventWaitHandle.Reset%2A> </xref:System.Threading.EventWaitHandle.Set%2A> 發出信號<xref:System.Threading.EventWaitHandle>物件，然後等待它藉由呼叫<xref:System.Threading.WaitHandle.SignalAndWait%2A>方法，使用者必須擁有<xref:System.Security.AccessControl.EventWaitHandleRights>和<xref:System.Security.AccessControl.EventWaitHandleRights>存取。</xref:System.Security.AccessControl.EventWaitHandleRights> </xref:System.Security.AccessControl.EventWaitHandleRights> </xref:System.Threading.WaitHandle.SignalAndWait%2A> </xref:System.Threading.EventWaitHandle>       這個建構函式相當於建立<xref:System.Security.Principal.NTAccount>物件，藉由傳遞`identity`至<xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName>建構函式，並傳遞新建<xref:System.Security.Principal.NTAccount>物件<xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29>建構函式。</xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29> </xref:System.Security.Principal.NTAccount> </xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> </xref:System.Security.Principal.NTAccount>"
  example:
  - "The following code example demonstrates the use of this constructor to create <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType>rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/ffb3828f-bc0d-4880-b857-_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/ffb3828f-bc0d-4880-b857-_1.vb)]"
  syntax:
    content: public EventWaitHandleAccessRule (string identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "將規則套用到使用者或群組的名稱。"
    - id: eventRights
      type: System.Security.AccessControl.EventWaitHandleRights
      description: "位元組合<xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;></xref>指定權限的值允許或拒絕。"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "其中一個<xref href=&quot;System.Security.AccessControl.AccessControlType&quot;></xref>值，指定是否允許或拒絕權限。"
  overload: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>指定無效的值。       -或-<code>type</code>指定無效的值。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventRights</code>為零。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -或-<code>identity</code>為零長度字串。       -或-<code>identity</code>長度超過 512 個字元。"
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  id: EventWaitHandleRights
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  langs:
  - csharp
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleRights
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "取得所存取規則允許或拒絕的權限。"
  remarks: "<xref:System.Security.AccessControl.EventWaitHandleAccessRule>物件是不可變的。</xref:System.Security.AccessControl.EventWaitHandleAccessRule> 您可以建立新的存取規則，代表不同的使用者、 不同的權限，或不同<xref:System.Security.AccessControl.AccessControlType>，但是您不能修改現有的存取規則。</xref:System.Security.AccessControl.AccessControlType>"
  example:
  - "The following code example demonstrates the use of the EventWaitHandleRights property to display the rights in the set of rules contained in an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType>rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/p-system.security.access_2_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/p-system.security.access_2_1.vb)]"
  syntax:
    content: public System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights { get; }
    return:
      type: System.Security.AccessControl.EventWaitHandleRights
      description: "位元組合<xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;></xref>值，指出權限所允許或拒絕存取規則。"
  overload: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.AccessRule
  isExternal: false
  name: System.Security.AccessControl.AccessRule
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Security.AccessControl.EventWaitHandleRights
  parent: System.Security.AccessControl
  isExternal: false
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleRights
  fullName: System.Security.AccessControl.EventWaitHandleRights
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleRights
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor*
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleAccessRule
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights*
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleRights
