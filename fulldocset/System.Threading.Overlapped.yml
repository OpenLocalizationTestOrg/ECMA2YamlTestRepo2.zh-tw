### YamlMime:ManagedReference
items:
- uid: System.Threading.Overlapped
  id: Overlapped
  children:
  - System.Threading.Overlapped.#ctor
  - System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)
  - System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)
  - System.Threading.Overlapped.AsyncResult
  - System.Threading.Overlapped.EventHandle
  - System.Threading.Overlapped.EventHandleIntPtr
  - System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)
  - System.Threading.Overlapped.OffsetHigh
  - System.Threading.Overlapped.OffsetLow
  - System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)
  - System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)
  - System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)
  - System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)
  - System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)
  langs:
  - csharp
  name: Overlapped
  nameWithType: Overlapped
  fullName: System.Threading.Overlapped
  type: Class
  summary: "提供 Win32 的 managed 表示法`OVERLAPPED`結構，包含要傳送的資訊從 Overlapped 執行個體方法<xref href=&quot;System.Threading.NativeOverlapped&quot;></xref>結構。"
  remarks: "<xref:System.Threading.Overlapped.Pack%2A>和<xref:System.Threading.Overlapped.UnsafePack%2A>方法從 Overlapped 物件以傳送資訊<xref:System.Threading.NativeOverlapped>結構可以傳遞至 Win32 API 函式的非同步檔案 I/O。</xref:System.Threading.NativeOverlapped> </xref:System.Threading.Overlapped.UnsafePack%2A> </xref:System.Threading.Overlapped.Pack%2A> <xref:System.Threading.Overlapped.Unpack%2A>方法的傳輸資訊從<xref:System.Threading.NativeOverlapped>Overlapped 類別的執行個體的結構</xref:System.Threading.NativeOverlapped></xref:System.Threading.Overlapped.Unpack%2A>       Overlapped 物件屬性變更會影響其相關聯<xref:System.Threading.NativeOverlapped>結構，反之亦然。</xref:System.Threading.NativeOverlapped>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class Overlapped
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Threading.Overlapped.#ctor
  id: '#ctor'
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: Overlapped()
  nameWithType: Overlapped.Overlapped()
  fullName: System.Threading.Overlapped.Overlapped()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "初始化新的空白執行個體<xref href=&quot;System.Threading.Overlapped&quot;></xref>類別。"
  syntax:
    content: public Overlapped ();
    parameters: []
  overload: System.Threading.Overlapped.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)'
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: Overlapped(Int32,Int32,Int32,IAsyncResult)
  nameWithType: Overlapped.Overlapped(Int32,Int32,Int32,IAsyncResult)
  fullName: System.Threading.Overlapped.Overlapped(Int32,Int32,Int32,IAsyncResult)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "初始化的新執行個體<xref href=&quot;System.Threading.Overlapped&quot;></xref>類別使用指定的檔案位置，I/O 作業完成時，收到信號的事件和介面，以傳回作業結果的 32 位元整數控制代碼。"
  remarks: "使用<xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName>屬性來取得任何衍生自<xref:System.Threading.WaitHandle>類別</xref:System.Threading.WaitHandle>的受管理的同步處理事件的控制代碼</xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName>       實作<xref:System.IAsyncResult>提供 I/O 作業的相關狀態資訊。</xref:System.IAsyncResult> 將它傳遞至建構函式中`ar`參數，並擷取它在稍後使用<xref:System.Threading.Overlapped.AsyncResult%2A>屬性。</xref:System.Threading.Overlapped.AsyncResult%2A> 如果指定的回呼方法<xref:System.Threading.Overlapped.Pack%2A>或<xref:System.Threading.Overlapped.UnsafePack%2A>方法時，回呼可以擷取您<xref:System.IAsyncResult>所解壓縮<xref:System.Threading.NativeOverlapped>收到的結構。</xref:System.Threading.NativeOverlapped> </xref:System.IAsyncResult> </xref:System.Threading.Overlapped.UnsafePack%2A> </xref:System.Threading.Overlapped.Pack%2A>"
  syntax:
    content: public Overlapped (int offsetLo, int offsetHi, int hEvent, IAsyncResult ar);
    parameters:
    - id: offsetLo
      type: System.Int32
      description: "開始將傳送之檔案位置的低序位文字。"
    - id: offsetHi
      type: System.Int32
      description: "開始將傳送之檔案位置高的文字。"
    - id: hEvent
      type: System.Int32
      description: "I/O 作業完成時會收到信號的事件控制代碼。"
    - id: ar
      type: System.IAsyncResult
      description: "物件，用於實作<xref:System.IAsyncResult>介面，並提供在 I/O 作業的狀態資訊。</xref:System.IAsyncResult>"
  overload: System.Threading.Overlapped.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)
  id: '#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)'
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: Overlapped(Int32,Int32,IntPtr,IAsyncResult)
  nameWithType: Overlapped.Overlapped(Int32,Int32,IntPtr,IAsyncResult)
  fullName: System.Threading.Overlapped.Overlapped(Int32,Int32,IntPtr,IAsyncResult)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "初始化的新執行個體<xref href=&quot;System.Threading.Overlapped&quot;></xref>類別使用指定的檔案位置，I/O 作業完成時，收到信號的事件和介面，以傳回作業結果的控制代碼。"
  remarks: "若要取得衍生自的受管理的同步處理物件的控制代碼<xref:System.Threading.WaitHandle>類別，請使用<xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName>屬性來取得<xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>物件，然後再呼叫<xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A>方法。</xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> </xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> </xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName> </xref:System.Threading.WaitHandle>       實作<xref:System.IAsyncResult>提供 I/O 作業的相關狀態資訊。</xref:System.IAsyncResult> 將它傳遞至建構函式中`ar`參數，並擷取它在稍後使用<xref:System.Threading.Overlapped.AsyncResult%2A>屬性。</xref:System.Threading.Overlapped.AsyncResult%2A> 如果指定的回呼方法<xref:System.Threading.Overlapped.Pack%2A>或<xref:System.Threading.Overlapped.UnsafePack%2A>方法時，回呼可以擷取您<xref:System.IAsyncResult>所解壓縮<xref:System.Threading.NativeOverlapped>收到的結構。</xref:System.Threading.NativeOverlapped> </xref:System.IAsyncResult> </xref:System.Threading.Overlapped.UnsafePack%2A> </xref:System.Threading.Overlapped.Pack%2A>"
  syntax:
    content: public Overlapped (int offsetLo, int offsetHi, IntPtr hEvent, IAsyncResult ar);
    parameters:
    - id: offsetLo
      type: System.Int32
      description: "開始將傳送之檔案位置的低序位文字。"
    - id: offsetHi
      type: System.Int32
      description: "開始將傳送之檔案位置高的文字。"
    - id: hEvent
      type: System.IntPtr
      description: "I/O 作業完成時會收到信號的事件控制代碼。"
    - id: ar
      type: System.IAsyncResult
      description: "物件，用於實作<xref:System.IAsyncResult>介面，並提供在 I/O 作業的狀態資訊。</xref:System.IAsyncResult>"
  overload: System.Threading.Overlapped.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.AsyncResult
  id: AsyncResult
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: AsyncResult
  nameWithType: Overlapped.AsyncResult
  fullName: System.Threading.Overlapped.AsyncResult
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "取得或設定提供 I/O 作業的相關狀態資訊的物件。"
  syntax:
    content: public IAsyncResult AsyncResult { get; set; }
    return:
      type: System.IAsyncResult
      description: "物件，用於實作<xref:System.IAsyncResult>介面。</xref:System.IAsyncResult>"
  overload: System.Threading.Overlapped.AsyncResult*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.EventHandle
  id: EventHandle
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: EventHandle
  nameWithType: Overlapped.EventHandle
  fullName: System.Threading.Overlapped.EventHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "取得或設定 I/O 作業完成時會收到訊號的同步處理事件的 32 位元整數的控制代碼。"
  remarks: "這個屬性不能在 64 位元平台上。 使用<xref:System.Threading.Overlapped.EventHandleIntPtr%2A>屬性改為。</xref:System.Threading.Overlapped.EventHandleIntPtr%2A>       使用<xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName>屬性來取得任何衍生自<xref:System.Threading.WaitHandle>類別</xref:System.Threading.WaitHandle>的受管理的同步處理事件的控制代碼</xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName>"
  syntax:
    content: public int EventHandle { get; set; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>值，表示同步處理事件的控制代碼。</xref:System.Int32>"
  overload: System.Threading.Overlapped.EventHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.EventHandleIntPtr
  id: EventHandleIntPtr
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: EventHandleIntPtr
  nameWithType: Overlapped.EventHandleIntPtr
  fullName: System.Threading.Overlapped.EventHandleIntPtr
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "取得或設定之 I/O 作業完成時會收到訊號的同步處理事件的控制代碼。"
  remarks: "若要取得衍生自的受管理的同步處理物件的控制代碼<xref:System.Threading.WaitHandle>類別，請使用<xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName>屬性來取得<xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>物件，然後再呼叫<xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A>方法。</xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> </xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> </xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName> </xref:System.Threading.WaitHandle>"
  syntax:
    content: public IntPtr EventHandleIntPtr { get; set; }
    return:
      type: System.IntPtr
      description: "<xref:System.IntPtr>代表事件的控制代碼。</xref:System.IntPtr>"
  overload: System.Threading.Overlapped.EventHandleIntPtr*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)
  id: Free(System.Threading.NativeOverlapped*)
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: Free(NativeOverlapped*)
  nameWithType: Overlapped.Free(NativeOverlapped*)
  fullName: System.Threading.Overlapped.Free(NativeOverlapped*)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "釋放配置的原生重疊的結構與相關聯的 unmanaged 的記憶體<xref:System.Threading.Overlapped.Pack*>方法。</xref:System.Threading.Overlapped.Pack*>"
  remarks: "您必須剛好呼叫 Free 方法一次開啟每個<xref:System.Threading.NativeOverlapped>指標接收來自<xref:System.Threading.Overlapped.Pack%2A>方法。</xref:System.Threading.Overlapped.Pack%2A> </xref:System.Threading.NativeOverlapped> 如果您未呼叫 Free 方法，將會造成記憶體流失。 如果您一次呼叫 Free 方法，將會損毀記憶體。"
  syntax:
    content: public static void Free (System.Threading.NativeOverlapped* nativeOverlappedPtr);
    parameters:
    - id: nativeOverlappedPtr
      type: System.Threading.NativeOverlapped*
      description: "指標<xref href=&quot;System.Threading.NativeOverlapped&quot;></xref>来釋放的結構。"
  overload: System.Threading.Overlapped.Free*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>nativeOverlappedPtr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Threading.Overlapped.OffsetHigh
  id: OffsetHigh
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: OffsetHigh
  nameWithType: Overlapped.OffsetHigh
  fullName: System.Threading.Overlapped.OffsetHigh
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "取得或設定要開始傳送之檔案位置的高序位文字。 該檔案的位置是從檔案開頭的位元組位移。"
  syntax:
    content: public int OffsetHigh { get; set; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>值，表示高文字檔案位置。</xref:System.Int32>"
  overload: System.Threading.Overlapped.OffsetHigh*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.OffsetLow
  id: OffsetLow
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: OffsetLow
  nameWithType: Overlapped.OffsetLow
  fullName: System.Threading.Overlapped.OffsetLow
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "取得或設定要開始傳送之檔案位置的低序位字組。 該檔案的位置是從檔案開頭的位元組位移。"
  syntax:
    content: public int OffsetLow { get; set; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>值，表示低序位文字檔案位置。</xref:System.Int32>"
  overload: System.Threading.Overlapped.OffsetLow*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)
  id: Pack(System.Threading.IOCompletionCallback)
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: Pack(IOCompletionCallback)
  nameWithType: Overlapped.Pack(IOCompletionCallback)
  fullName: System.Threading.Overlapped.Pack(IOCompletionCallback)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "組件到目前的執行個體<xref href=&quot;System.Threading.NativeOverlapped&quot;></xref>結構，指定要在非同步 I/O 作業完成時叫用委派。"
  remarks: "這個方法所傳回的 unmanaged 的指標可以傳遞給重疊的 I/O 作業中的作業系統。 <xref:System.Threading.NativeOverlapped>結構固定的實體記憶體中，直到在<xref:System.Threading.Overlapped.Unpack%2A>稱為。</xref:System.Threading.Overlapped.Unpack%2A> </xref:System.Threading.NativeOverlapped>      > [!IMPORTANT] > 呼叫端會負責釘選緩衝區。 如果應用程式定義域已卸載，不過，已釘選緩衝區的控制代碼會終結，而且會釋放緩衝區，讓要釋放的位址寫入 I/O 作業。 基於這個理由，最好使用<xref:System.Threading.Overlapped.Pack%28System.Threading.IOCompletionCallback%2CSystem.Object%29>方法多載中，執行階段釘選緩衝區。</xref:System.Threading.Overlapped.Pack%28System.Threading.IOCompletionCallback%2CSystem.Object%29>"
  syntax:
    content: public System.Threading.NativeOverlapped* Pack (System.Threading.IOCompletionCallback iocb);
    parameters:
    - id: iocb
      type: System.Threading.IOCompletionCallback
      description: "<xref href=&quot;System.Threading.IOCompletionCallback&quot;> </xref>表示非同步 I/O 作業完成時叫用的回呼方法的委派。"
    return:
      type: System.Threading.NativeOverlapped*
      description: "若要將 unmanaged 的指標<xref href=&quot;System.Threading.NativeOverlapped&quot;></xref>結構。"
  overload: System.Threading.Overlapped.Pack*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "目前<xref href=&quot;System.Threading.Overlapped&quot;></xref>已包裝。"
  platform:
  - net462
- uid: System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)
  id: Pack(System.Threading.IOCompletionCallback,System.Object)
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: Pack(IOCompletionCallback,Object)
  nameWithType: Overlapped.Pack(IOCompletionCallback,Object)
  fullName: System.Threading.Overlapped.Pack(IOCompletionCallback,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "組件到目前的執行個體<xref href=&quot;System.Threading.NativeOverlapped&quot;></xref>結構，指定非同步 I/O 作業完成時叫用委派，做為緩衝區的 managed 的物件。"
  remarks: "這個方法所傳回的 unmanaged 的指標可以傳遞給重疊的 I/O 作業中的作業系統。 <xref:System.Threading.NativeOverlapped>結構固定的實體記憶體中，直到在<xref:System.Threading.Overlapped.Unpack%2A>稱為。</xref:System.Threading.Overlapped.Unpack%2A> </xref:System.Threading.NativeOverlapped>       指定的緩衝區`userData`必須是相同傳遞至執行的非同步 I/O 的未受管理的作業系統函式。      > [!NOTE] > 執行階段釘選緩衝區或指定的緩衝區`userData`I/O 作業的持續期間。 如果應用程式定義域卸載時，執行階段會保持固定，直到 I/O 作業完成的記憶體。"
  syntax:
    content: public System.Threading.NativeOverlapped* Pack (System.Threading.IOCompletionCallback iocb, object userData);
    parameters:
    - id: iocb
      type: System.Threading.IOCompletionCallback
      description: "<xref href=&quot;System.Threading.IOCompletionCallback&quot;> </xref>表示非同步 I/O 作業完成時叫用的回呼方法的委派。"
    - id: userData
      type: System.Object
      description: "物件或物件陣列，表示作業的輸入或輸出緩衝區。 每個物件代表的緩衝區，例如位元組陣列。"
    return:
      type: System.Threading.NativeOverlapped*
      description: "若要將 unmanaged 的指標<xref href=&quot;System.Threading.NativeOverlapped&quot;></xref>結構。"
  overload: System.Threading.Overlapped.Pack*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "目前<xref href=&quot;System.Threading.Overlapped&quot;></xref>已包裝。"
  platform:
  - net462
- uid: System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)
  id: Unpack(System.Threading.NativeOverlapped*)
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: Unpack(NativeOverlapped*)
  nameWithType: Overlapped.Unpack(NativeOverlapped*)
  fullName: System.Threading.Overlapped.Unpack(NativeOverlapped*)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "會解壓縮到指定的 unmanaged <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref> managed 的結構<xref href=&quot;System.Threading.Overlapped&quot;></xref>物件。"
  remarks: "<xref:System.Threading.NativeOverlapped>結構不會釋放實體記憶體直到您呼叫<xref:System.Threading.Overlapped.Free%2A>方法。</xref:System.Threading.Overlapped.Free%2A> </xref:System.Threading.NativeOverlapped>"
  syntax:
    content: public static System.Threading.Overlapped Unpack (System.Threading.NativeOverlapped* nativeOverlappedPtr);
    parameters:
    - id: nativeOverlappedPtr
      type: System.Threading.NativeOverlapped*
      description: "若要將 unmanaged 的指標<xref href=&quot;System.Threading.NativeOverlapped&quot;></xref>結構。"
    return:
      type: System.Threading.Overlapped
      description: "<xref href=&quot;System.Threading.Overlapped&quot;> </xref>物件包含的資訊從原生結構解除封裝。"
  overload: System.Threading.Overlapped.Unpack*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>nativeOverlappedPtr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)
  id: UnsafePack(System.Threading.IOCompletionCallback)
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: UnsafePack(IOCompletionCallback)
  nameWithType: Overlapped.UnsafePack(IOCompletionCallback)
  fullName: System.Threading.Overlapped.UnsafePack(IOCompletionCallback)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "組件到目前的執行個體<xref href=&quot;System.Threading.NativeOverlapped&quot;></xref>結構，指定要叫用非同步 I/O 作業完成時的委派。 不會傳播呼叫堆疊。"
  remarks: "這個方法所傳回的 unmanaged 的指標可以傳遞給重疊的 I/O 作業中的作業系統。 <xref:System.Threading.NativeOverlapped>結構固定的實體記憶體中，直到在<xref:System.Threading.Overlapped.Unpack%2A>稱為。</xref:System.Threading.Overlapped.Unpack%2A> </xref:System.Threading.NativeOverlapped>       呼叫端會負責釘選緩衝區。 如果應用程式定義域已卸載，不過，已釘選緩衝區的控制代碼會終結，而且會釋放緩衝區，讓要釋放的位址寫入 I/O 作業。 基於這個理由，最好使用<xref:System.Threading.Overlapped.UnsafePack%28System.Threading.IOCompletionCallback%2CSystem.Object%29>方法多載中，執行階段釘選緩衝區。</xref:System.Threading.Overlapped.UnsafePack%28System.Threading.IOCompletionCallback%2CSystem.Object%29>      > [!CAUTION] > 使用<xref:System.Threading.Overlapped.UnsafePack%2A>方法可能不小心開啟安全性漏洞。</xref:System.Threading.Overlapped.UnsafePack%2A> 程式碼存取安全性會根據堆疊中的所有呼叫端的權限的權限檢查。 <xref:System.Threading.Overlapped.UnsafePack%2A>方法不會傳播呼叫堆疊。</xref:System.Threading.Overlapped.UnsafePack%2A> 惡意程式碼可能可以利用此選項可避免權限檢查。"
  syntax:
    content: public System.Threading.NativeOverlapped* UnsafePack (System.Threading.IOCompletionCallback iocb);
    parameters:
    - id: iocb
      type: System.Threading.IOCompletionCallback
      description: "<xref href=&quot;System.Threading.IOCompletionCallback&quot;> </xref>表示非同步 I/O 作業完成時叫用的回呼方法的委派。"
    return:
      type: System.Threading.NativeOverlapped*
      description: "若要將 unmanaged 的指標<xref href=&quot;System.Threading.NativeOverlapped&quot;></xref>結構。"
  overload: System.Threading.Overlapped.UnsafePack*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "目前<xref href=&quot;System.Threading.Overlapped&quot;></xref>已包裝。"
  platform:
  - net462
- uid: System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)
  id: UnsafePack(System.Threading.IOCompletionCallback,System.Object)
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: UnsafePack(IOCompletionCallback,Object)
  nameWithType: Overlapped.UnsafePack(IOCompletionCallback,Object)
  fullName: System.Threading.Overlapped.UnsafePack(IOCompletionCallback,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "組件到目前的執行個體<xref href=&quot;System.Threading.NativeOverlapped&quot;></xref>結構，指定要叫用非同步 I/O 作業完成，且 managed 物件的委派做為緩衝區。 不會傳播呼叫堆疊。"
  remarks: "這個方法所傳回的 unmanaged 的指標可以傳遞給重疊的 I/O 作業中的作業系統。 <xref:System.Threading.NativeOverlapped>結構固定的實體記憶體中，直到在<xref:System.Threading.Overlapped.Unpack%2A>稱為。</xref:System.Threading.Overlapped.Unpack%2A> </xref:System.Threading.NativeOverlapped>       指定的緩衝區`userData`必須是相同傳遞至執行的非同步 I/O 的未受管理的作業系統函式。       執行階段釘選緩衝區或指定的緩衝區`userData`I/O 作業的持續期間。 如果應用程式定義域卸載時，執行階段會保持固定，直到 I/O 作業完成的記憶體。      > [!CAUTION] > 使用 UnsafePack 方法可能不小心開啟安全性漏洞。 程式碼存取安全性會根據堆疊中的所有呼叫端的權限的權限檢查。 UnsafePack 方法不會傳播呼叫堆疊。 惡意程式碼可能可以利用此選項可避免權限檢查。"
  syntax:
    content: public System.Threading.NativeOverlapped* UnsafePack (System.Threading.IOCompletionCallback iocb, object userData);
    parameters:
    - id: iocb
      type: System.Threading.IOCompletionCallback
      description: "<xref href=&quot;System.Threading.IOCompletionCallback&quot;> </xref>表示非同步 I/O 作業完成時叫用的回呼方法的委派。"
    - id: userData
      type: System.Object
      description: "物件或物件陣列，表示作業的輸入或輸出緩衝區。 每個物件代表的緩衝區，例如位元組陣列。"
    return:
      type: System.Threading.NativeOverlapped*
      description: "若要將 unmanaged 的指標<xref href=&quot;System.Threading.NativeOverlapped&quot;></xref>結構。"
  overload: System.Threading.Overlapped.UnsafePack*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫端沒有必要的權限。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "目前<xref href=&quot;System.Threading.Overlapped&quot;></xref>已包裝。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Threading.Overlapped.#ctor
  parent: System.Threading.Overlapped
  isExternal: false
  name: Overlapped()
  nameWithType: Overlapped.Overlapped()
  fullName: System.Threading.Overlapped.Overlapped()
- uid: System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)
  parent: System.Threading.Overlapped
  isExternal: false
  name: Overlapped(Int32,Int32,Int32,IAsyncResult)
  nameWithType: Overlapped.Overlapped(Int32,Int32,Int32,IAsyncResult)
  fullName: System.Threading.Overlapped.Overlapped(Int32,Int32,Int32,IAsyncResult)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)
  parent: System.Threading.Overlapped
  isExternal: false
  name: Overlapped(Int32,Int32,IntPtr,IAsyncResult)
  nameWithType: Overlapped.Overlapped(Int32,Int32,IntPtr,IAsyncResult)
  fullName: System.Threading.Overlapped.Overlapped(Int32,Int32,IntPtr,IAsyncResult)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Threading.Overlapped.AsyncResult
  parent: System.Threading.Overlapped
  isExternal: false
  name: AsyncResult
  nameWithType: Overlapped.AsyncResult
  fullName: System.Threading.Overlapped.AsyncResult
- uid: System.Threading.Overlapped.EventHandle
  parent: System.Threading.Overlapped
  isExternal: false
  name: EventHandle
  nameWithType: Overlapped.EventHandle
  fullName: System.Threading.Overlapped.EventHandle
- uid: System.Threading.Overlapped.EventHandleIntPtr
  parent: System.Threading.Overlapped
  isExternal: false
  name: EventHandleIntPtr
  nameWithType: Overlapped.EventHandleIntPtr
  fullName: System.Threading.Overlapped.EventHandleIntPtr
- uid: System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)
  parent: System.Threading.Overlapped
  isExternal: false
  name: Free(NativeOverlapped*)
  nameWithType: Overlapped.Free(NativeOverlapped*)
  fullName: System.Threading.Overlapped.Free(NativeOverlapped*)
- uid: System.Threading.Overlapped.OffsetHigh
  parent: System.Threading.Overlapped
  isExternal: false
  name: OffsetHigh
  nameWithType: Overlapped.OffsetHigh
  fullName: System.Threading.Overlapped.OffsetHigh
- uid: System.Threading.Overlapped.OffsetLow
  parent: System.Threading.Overlapped
  isExternal: false
  name: OffsetLow
  nameWithType: Overlapped.OffsetLow
  fullName: System.Threading.Overlapped.OffsetLow
- uid: System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)
  parent: System.Threading.Overlapped
  isExternal: false
  name: Pack(IOCompletionCallback)
  nameWithType: Overlapped.Pack(IOCompletionCallback)
  fullName: System.Threading.Overlapped.Pack(IOCompletionCallback)
- uid: System.Threading.IOCompletionCallback
  parent: System.Threading
  isExternal: false
  name: IOCompletionCallback
  nameWithType: IOCompletionCallback
  fullName: System.Threading.IOCompletionCallback
- uid: System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)
  parent: System.Threading.Overlapped
  isExternal: false
  name: Pack(IOCompletionCallback,Object)
  nameWithType: Overlapped.Pack(IOCompletionCallback,Object)
  fullName: System.Threading.Overlapped.Pack(IOCompletionCallback,Object)
- uid: System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)
  parent: System.Threading.Overlapped
  isExternal: false
  name: Unpack(NativeOverlapped*)
  nameWithType: Overlapped.Unpack(NativeOverlapped*)
  fullName: System.Threading.Overlapped.Unpack(NativeOverlapped*)
- uid: System.Threading.Overlapped
  parent: System.Threading
  isExternal: false
  name: Overlapped
  nameWithType: Overlapped
  fullName: System.Threading.Overlapped
- uid: System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)
  parent: System.Threading.Overlapped
  isExternal: false
  name: UnsafePack(IOCompletionCallback)
  nameWithType: Overlapped.UnsafePack(IOCompletionCallback)
  fullName: System.Threading.Overlapped.UnsafePack(IOCompletionCallback)
- uid: System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)
  parent: System.Threading.Overlapped
  isExternal: false
  name: UnsafePack(IOCompletionCallback,Object)
  nameWithType: Overlapped.UnsafePack(IOCompletionCallback,Object)
  fullName: System.Threading.Overlapped.UnsafePack(IOCompletionCallback,Object)
- uid: System.Threading.Overlapped.#ctor*
  parent: System.Threading.Overlapped
  isExternal: false
  name: Overlapped
  nameWithType: Overlapped.Overlapped
- uid: System.Threading.Overlapped.AsyncResult*
  parent: System.Threading.Overlapped
  isExternal: false
  name: AsyncResult
  nameWithType: Overlapped.AsyncResult
- uid: System.Threading.Overlapped.EventHandle*
  parent: System.Threading.Overlapped
  isExternal: false
  name: EventHandle
  nameWithType: Overlapped.EventHandle
- uid: System.Threading.Overlapped.EventHandleIntPtr*
  parent: System.Threading.Overlapped
  isExternal: false
  name: EventHandleIntPtr
  nameWithType: Overlapped.EventHandleIntPtr
- uid: System.Threading.Overlapped.Free*
  parent: System.Threading.Overlapped
  isExternal: false
  name: Free
  nameWithType: Overlapped.Free
- uid: System.Threading.Overlapped.OffsetHigh*
  parent: System.Threading.Overlapped
  isExternal: false
  name: OffsetHigh
  nameWithType: Overlapped.OffsetHigh
- uid: System.Threading.Overlapped.OffsetLow*
  parent: System.Threading.Overlapped
  isExternal: false
  name: OffsetLow
  nameWithType: Overlapped.OffsetLow
- uid: System.Threading.Overlapped.Pack*
  parent: System.Threading.Overlapped
  isExternal: false
  name: Pack
  nameWithType: Overlapped.Pack
- uid: System.Threading.Overlapped.Unpack*
  parent: System.Threading.Overlapped
  isExternal: false
  name: Unpack
  nameWithType: Overlapped.Unpack
- uid: System.Threading.Overlapped.UnsafePack*
  parent: System.Threading.Overlapped
  isExternal: false
  name: UnsafePack
  nameWithType: Overlapped.UnsafePack
