### YamlMime:ManagedReference
items:
- uid: System.Transactions.DependentTransaction
  id: DependentTransaction
  children:
  - System.Transactions.DependentTransaction.Complete
  langs:
  - csharp
  name: DependentTransaction
  nameWithType: DependentTransaction
  fullName: System.Transactions.DependentTransaction
  type: Class
  summary: "描述交易無法認可應用程式恢復 clone 交易的工作之前，可保證交易的複製品。 這個類別無法被繼承。"
  remarks: "DependentTransaction 是的複製品<xref:System.Transactions.Transaction>使用建立物件<xref:System.Transactions.Transaction.DependentClone%2A>方法。</xref:System.Transactions.Transaction.DependentClone%2A> </xref:System.Transactions.Transaction>  它只是為了允許應用程式停止，並保證工作仍交易 （例如，在背景工作執行緒） 上執行時，就無法認可交易。       在工作時，複製的交易內執行最後完成並準備好將更新認可，它可以通知的建立者的交易使用<xref:System.Transactions.DependentTransaction.Complete%2A>方法。</xref:System.Transactions.DependentTransaction.Complete%2A> 因此，您可以保留的一致性和資料的正確性。       <xref:System.Transactions.DependentCloneOption>列舉型別用來判斷認可時的行為。</xref:System.Transactions.DependentCloneOption>  這個行為的控制項可讓應用程式停止，以及提供並行支援。 如需有關如何使用這個列舉的詳細資訊，請參閱[DependentTransaction 管理並行存取](http://msdn.microsoft.com/en-us/bdad8468-2a90-4b81-8375-278067120cab)。"
  example:
  - "The following example shows you how to create a dependent transaction.  \n  \n [!code-vb[Tx_DependentTx#1](~/add/codesnippet/visualbasic/t-system.transactions.de_0_1.vb)]\n [!code-cs[Tx_DependentTx#1](~/add/codesnippet/csharp/t-system.transactions.de_0_1.cs)]"
  syntax:
    content: 'public sealed class DependentTransaction : System.Transactions.Transaction'
  inheritance:
  - System.Object
  - System.Transactions.Transaction
  implements: []
  inheritedMembers:
  - System.Transactions.Transaction.Clone
  - System.Transactions.Transaction.Current
  - System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)
  - System.Transactions.Transaction.Dispose
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.Equals(System.Object)
  - System.Transactions.Transaction.GetHashCode
  - System.Transactions.Transaction.GetPromotedToken
  - System.Transactions.Transaction.IsolationLevel
  - System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.PromoterType
  - System.Transactions.Transaction.Rollback
  - System.Transactions.Transaction.Rollback(System.Exception)
  - System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Transactions.Transaction.TransactionCompleted
  - System.Transactions.Transaction.TransactionInformation
  platform:
  - net462
- uid: System.Transactions.DependentTransaction.Complete
  id: Complete
  parent: System.Transactions.DependentTransaction
  langs:
  - csharp
  name: Complete()
  nameWithType: DependentTransaction.Complete()
  fullName: System.Transactions.DependentTransaction.Complete()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "嘗試完成相依的交易。"
  remarks: "相依的複製品想要通知的建立者的交易，它已完成其工作，，和父系是否也準備交易可以認可時，請呼叫這個方法。       在叫用此呼叫之後，您不應嘗試在交易上任何額外的工作，或擲回例外狀況。       如果應用程式定義域關閉之後呼叫此方法時，並在交易完成之前，可能會中止交易。       **請注意**應該只有一次呼叫這個方法，相依的交易存留期間。"
  syntax:
    content: public void Complete ();
    parameters: []
  overload: System.Transactions.DependentTransaction.Complete*
  exceptions:
  - type: System.Transactions.TransactionException
    commentId: T:System.Transactions.TransactionException
    description: "嘗試在交易上的其他工作之後呼叫這個方法。 這些包括叫用方法時，例如<> *>， <> </> *>， <> </> *>， <> </> *>，或在交易上的任何序列化作業。"
  platform:
  - net462
references:
- uid: System.Transactions.Transaction
  isExternal: false
  name: System.Transactions.Transaction
- uid: System.Transactions.TransactionException
  parent: System.Transactions
  isExternal: false
  name: TransactionException
  nameWithType: TransactionException
  fullName: System.Transactions.TransactionException
- uid: System.Transactions.DependentTransaction.Complete
  parent: System.Transactions.DependentTransaction
  isExternal: false
  name: Complete()
  nameWithType: DependentTransaction.Complete()
  fullName: System.Transactions.DependentTransaction.Complete()
- uid: System.Transactions.DependentTransaction.Complete*
  parent: System.Transactions.DependentTransaction
  isExternal: false
  name: Complete
  nameWithType: DependentTransaction.Complete
