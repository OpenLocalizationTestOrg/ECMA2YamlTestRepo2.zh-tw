### YamlMime:ManagedReference
items:
- uid: System.EntryPointNotFoundException
  id: EntryPointNotFoundException
  children:
  - System.EntryPointNotFoundException.#ctor
  - System.EntryPointNotFoundException.#ctor(System.String)
  - System.EntryPointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.EntryPointNotFoundException.#ctor(System.String,System.Exception)
  langs:
  - csharp
  name: EntryPointNotFoundException
  nameWithType: EntryPointNotFoundException
  fullName: System.EntryPointNotFoundException
  type: Class
  summary: "嘗試載入類別卻因沒有進入方法而失敗時擲回的例外狀況。"
  remarks: "Common language runtime 無法載入組件，因為無法識別組件的進入點時，會擲回 EntryPointNotFoundException 例外狀況。  可以在下列情況下擲回這個例外狀況:-common language runtime 會找不到應用程式進入點 (通常`Main`方法) 中執行的組件。 應用程式進入點必須是全域或`static`具有無參數或做為其唯一參數的字串陣列的方法。 進入點可以傳回`void`，它可以傳回<xref:System.Int32>或<xref:System.UInt32>結束代碼。</xref:System.UInt32> </xref:System.Int32> 應用程式組件不能定義一個以上的進入點。      -無法解析 Windows DLL 中的函式呼叫，因為找不到函式。 在下列範例中，EntryPointNotFoundException 例外狀況會擲回因為 User32.dll 不包含名為函式`GetMyNumber`。           [!code-cs[System.EntryPointNotFoundException.Class#1](~/add/codesnippet/csharp/t-system.entrypointnotfo_1.cs)][!code-vb[System.EntryPointNotFoundException.Class#1](~/add/codesnippet/visualbasic/t-system.entrypointnotfo_1.vb) ] -Windows DLL 中的函式呼叫無法解析，因為在方法呼叫中使用的名稱不符合組件中找到的名稱。       通常，這是因為<xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling?displayProperty=fullName>欄位會以隱含或明確設定為`true`、 所呼叫的方法包含一或多個字串參數，而且使用 ANSI 和 Unicode 版本和方法呼叫中使用名稱沒有對應至這個 ANSI 或 Unicode 版本的名稱。</xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling?displayProperty=fullName> 下列範例將進行示範，嘗試呼叫 Windows `MessageBox` User32.dll 中的函式。 因為指定的第一個方法定義<xref:System.Runtime.InteropServices.CharSet?displayProperty=fullName>封送處理字串，common language 會尋找函式，寬字元版本`MessageBoxW`，而不是在方法呼叫時，所使用的名稱`MessageBox`。</xref:System.Runtime.InteropServices.CharSet?displayProperty=fullName>  第二個方法定義修正此問題，藉由呼叫`MessageBoxW`而不是`MessageBox`函式。           [!code-vb[System.EntryPointNotFoundException.Class#2](~/add/codesnippet/visualbasic/t-system.entrypointnotfo_2.vb)][!code-cs[System.EntryPointNotFoundException.Class#2](~/add/codesnippet/csharp/t-system.entrypointnotfo_2.cs) ] -您嘗試在動態連結程式庫呼叫的函式，由其簡單的名稱，而不是其裝飾的名稱。       通常，c + + 編譯器會產生 DLL 函式的裝飾的名稱。 例如，下列 c + + 程式碼會定義名為函式`Double`名為 TestDll.dll 文件庫中。           [!code-cpp[System.EntryPointNotFoundException.Class#6](~/add/codesnippet/cpp/testdll/testdll.cpp#6) ] EntryPointNotFoundException 例外狀況時在下列範例程式碼嘗試呼叫函式時，會擲回因為`Double`找不到函式。           [!code-cs[System.EntryPointNotFoundException.Class#7](~/add/codesnippet/csharp/t-system.entrypointnotfo_4.cs)][!code-vb[System.EntryPointNotFoundException.Class#7](~/add/codesnippet/visualbasic/t-system.entrypointnotfo_4.vb) ]不過，如果呼叫的函式是以其裝飾的名稱 (在此情況下， `?Double@@YAHH@Z`)，函式呼叫成功，如下列範例所示。                 [!code-cs[System.EntryPointNotFoundException.Class#8](~/add/codesnippet/csharp/t-system.entrypointnotfo_5.cs)][!code-vb[System.EntryPointNotFoundException.Class#8](~/add/codesnippet/visualbasic/t-system.entrypointnotfo_5.vb) ]您可以找到使用 Dumpbin.exe 等公用程式 dll 匯出的函式的裝飾的名稱。            -您嘗試在受管理組件中呼叫的方法，就好像之 unmanaged 動態連結程式庫。 若要查看此動作，編譯組件名為 StringUtilities.dll 下列的範例。           [!code-cs[System.EntryPointNotFoundException.Class#3](~/add/codesnippet/csharp/t-system.entrypointnotfo_6.cs)][!code-vb[System.EntryPointNotFoundException.Class#3](~/add/codesnippet/visualbasic/t-system.entrypointnotfo_6.vb) ]再編譯並執行下列的範例中，嘗試呼叫`StringUtilities.SayGoodMorning`StringUtilities.dll 動態連結程式庫中的方法就好像 unmanaged 程式碼。       結果是 EntryPointNotFoundException 例外狀況。           [!code-cs[System.EntryPointNotFoundException.Class#4](~/add/codesnippet/csharp/t-system.entrypointnotfo_7.cs)][!code-vb[System.EntryPointNotFoundException.Class#4](~/add/codesnippet/visualbasic/t-system.entrypointnotfo_7.vb) ]若要消除例外狀況，將參考加入至 managed 組件及存取`StringUtilities.SayGoodMorning`方法就像存取任何其他方法在 managed 程式碼，如下列範例會執行。                 [!code-cs[System.EntryPointNotFoundException.Class#5](~/add/codesnippet/csharp/t-system.entrypointnotfo_8.cs)][!code-vb[System.EntryPointNotFoundException.Class#5](~/add/codesnippet/visualbasic/t-system.entrypointnotfo_8.vb) ] -您嘗試在 COM DLL 中呼叫的方法，就好像 Windows DLL。       若要存取 COM DLL，請選取**加入參考**選項以將參考加入專案，然後選取 [從類型程式庫的 Visual Studio 中**COM** ] 索引標籤。       如需 EntryPointNotFoundException 的執行個體的初始屬性值的清單，請參閱<xref:System.EntryPointNotFoundException.%23ctor%2A>建構函式。</xref:System.EntryPointNotFoundException.%23ctor%2A>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class EntryPointNotFoundException : TypeLoadException
  inheritance:
  - System.TypeLoadException
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.EntryPointNotFoundException.#ctor
  id: '#ctor'
  parent: System.EntryPointNotFoundException
  langs:
  - csharp
  name: EntryPointNotFoundException()
  nameWithType: EntryPointNotFoundException.EntryPointNotFoundException()
  fullName: System.EntryPointNotFoundException.EntryPointNotFoundException()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新執行個體<xref href=&quot;System.EntryPointNotFoundException&quot;></xref>類別。"
  remarks: "這個建構函式初始化<xref:System.Exception.Message%2A>屬性的新執行個體，系統提供的訊息，描述錯誤，例如 「 找不到點項目 」。</xref:System.Exception.Message%2A> 此訊息會考量目前系統文化特性。       下表顯示<xref:System.EntryPointNotFoundException>.</xref:System.EntryPointNotFoundException>的執行個體的初始屬性值      |屬性 |值 |  |--------------|-----------|  |<xref:System.Exception.InnerException%2A>|Null 參考 (`Nothing`在 Visual Basic 中)。 |  |<xref:System.TypeLoadException.Message%2A>|當地語系化的錯誤訊息字串。 |</xref:System.TypeLoadException.Message%2A> </xref:System.Exception.InnerException%2A>"
  syntax:
    content: public EntryPointNotFoundException ();
    parameters: []
  overload: System.EntryPointNotFoundException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.EntryPointNotFoundException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.EntryPointNotFoundException
  langs:
  - csharp
  name: EntryPointNotFoundException(String)
  nameWithType: EntryPointNotFoundException.EntryPointNotFoundException(String)
  fullName: System.EntryPointNotFoundException.EntryPointNotFoundException(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新執行個體<xref href=&quot;System.EntryPointNotFoundException&quot;></xref>類別指定的錯誤訊息。"
  remarks: "內容`message`會讓人了解。 這個建構函式的呼叫端，才能確保這個字串已經被當地語系化為目前的系統文化特性。       下表顯示<xref:System.EntryPointNotFoundException>.</xref:System.EntryPointNotFoundException>的執行個體的初始屬性值      |屬性 |值 |  |--------------|-----------|  |<xref:System.Exception.InnerException%2A>|Null 參考 (`Nothing`在 Visual Basic 中)。 |  |<xref:System.TypeLoadException.Message%2A>|錯誤訊息字串。 |</xref:System.TypeLoadException.Message%2A> </xref:System.Exception.InnerException%2A>"
  syntax:
    content: public EntryPointNotFoundException (string message);
    parameters:
    - id: message
      type: System.String
      description: "解釋例外狀況的原因的錯誤訊息。"
  overload: System.EntryPointNotFoundException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.EntryPointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.EntryPointNotFoundException
  langs:
  - csharp
  name: EntryPointNotFoundException(SerializationInfo,StreamingContext)
  nameWithType: EntryPointNotFoundException.EntryPointNotFoundException(SerializationInfo,StreamingContext)
  fullName: System.EntryPointNotFoundException.EntryPointNotFoundException(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新執行個體<xref href=&quot;System.EntryPointNotFoundException&quot;></xref>使用序列化資料的類別。"
  remarks: "重新建構所需的資料流上傳輸的例外狀況物件的還原序列化期間呼叫這個建構函式。"
  syntax:
    content: protected EntryPointNotFoundException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "保存序列化的物件資料的物件。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "關於來源或目的端內容資訊。"
  overload: System.EntryPointNotFoundException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.EntryPointNotFoundException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.EntryPointNotFoundException
  langs:
  - csharp
  name: EntryPointNotFoundException(String,Exception)
  nameWithType: EntryPointNotFoundException.EntryPointNotFoundException(String,Exception)
  fullName: System.EntryPointNotFoundException.EntryPointNotFoundException(String,Exception)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新執行個體<xref href=&quot;System.EntryPointNotFoundException&quot;></xref>類別指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考。"
  remarks: "做為前一個例外狀況直接結果應該包括在前一個例外狀況的參考就會擲回的例外狀況<xref:System.Exception.InnerException%2A>屬性。</xref:System.Exception.InnerException%2A> <xref:System.Exception.InnerException%2A>屬性會傳回相同的值傳遞到建構函式，則為 null 參考 (`Nothing`在 Visual Basic 中) 如果<xref:System.Exception.InnerException%2A>屬性沒有提供內部例外值給建構函式。</xref:System.Exception.InnerException%2A> </xref:System.Exception.InnerException%2A>       下表顯示<xref:System.EntryPointNotFoundException>.</xref:System.EntryPointNotFoundException>的執行個體的初始屬性值      |屬性 |值 |  |--------------|-----------|  |<xref:System.Exception.InnerException%2A>|內部例外狀況參考。 |  |<xref:System.TypeLoadException.Message%2A>|錯誤訊息字串。 |</xref:System.TypeLoadException.Message%2A> </xref:System.Exception.InnerException%2A>"
  syntax:
    content: public EntryPointNotFoundException (string message, Exception inner);
    parameters:
    - id: message
      type: System.String
      description: "解釋例外狀況的原因的錯誤訊息。"
    - id: inner
      type: System.Exception
      description: "造成目前例外狀況的例外狀況。 如果`inner`參數不是 null 參考 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>在 Visual Basic 中)，目前的例外狀況會在引發<xref uid=&quot;langword_csharp_catch&quot; name=&quot;catch&quot; href=&quot;&quot;></xref>處理內部例外狀況區塊。"
  overload: System.EntryPointNotFoundException.#ctor*
  exceptions: []
  platform:
  - net462
references:
- uid: System.TypeLoadException
  isExternal: false
  name: System.TypeLoadException
- uid: System.EntryPointNotFoundException.#ctor
  parent: System.EntryPointNotFoundException
  isExternal: false
  name: EntryPointNotFoundException()
  nameWithType: EntryPointNotFoundException.EntryPointNotFoundException()
  fullName: System.EntryPointNotFoundException.EntryPointNotFoundException()
- uid: System.EntryPointNotFoundException.#ctor(System.String)
  parent: System.EntryPointNotFoundException
  isExternal: false
  name: EntryPointNotFoundException(String)
  nameWithType: EntryPointNotFoundException.EntryPointNotFoundException(String)
  fullName: System.EntryPointNotFoundException.EntryPointNotFoundException(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.EntryPointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.EntryPointNotFoundException
  isExternal: false
  name: EntryPointNotFoundException(SerializationInfo,StreamingContext)
  nameWithType: EntryPointNotFoundException.EntryPointNotFoundException(SerializationInfo,StreamingContext)
  fullName: System.EntryPointNotFoundException.EntryPointNotFoundException(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.EntryPointNotFoundException.#ctor(System.String,System.Exception)
  parent: System.EntryPointNotFoundException
  isExternal: false
  name: EntryPointNotFoundException(String,Exception)
  nameWithType: EntryPointNotFoundException.EntryPointNotFoundException(String,Exception)
  fullName: System.EntryPointNotFoundException.EntryPointNotFoundException(String,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.EntryPointNotFoundException.#ctor*
  parent: System.EntryPointNotFoundException
  isExternal: false
  name: EntryPointNotFoundException
  nameWithType: EntryPointNotFoundException.EntryPointNotFoundException
