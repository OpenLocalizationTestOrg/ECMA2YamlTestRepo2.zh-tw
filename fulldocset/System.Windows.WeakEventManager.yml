### YamlMime:ManagedReference
items:
- uid: System.Windows.WeakEventManager
  id: WeakEventManager
  children:
  - System.Windows.WeakEventManager.#ctor
  - System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  - System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  - System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  - System.Windows.WeakEventManager.Item(System.Object)
  - System.Windows.WeakEventManager.NewListenerList
  - System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  - System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  - System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  - System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  - System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  - System.Windows.WeakEventManager.ReadLock
  - System.Windows.WeakEventManager.Remove(System.Object)
  - System.Windows.WeakEventManager.ScheduleCleanup
  - System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  - System.Windows.WeakEventManager.StartListening(System.Object)
  - System.Windows.WeakEventManager.StopListening(System.Object)
  - System.Windows.WeakEventManager.WriteLock
  langs:
  - csharp
  name: WeakEventManager
  nameWithType: WeakEventManager
  fullName: System.Windows.WeakEventManager
  type: Class
  summary: "針對事件管理員中所提供的基底類別*弱式事件模式*。 「 管理員 」 新增，並移除接聽程式的事件 （或回呼） 也使用的模式。"
  remarks: "事件來源的物件存留期無關的事件接聽程式時，通常使用弱式事件模式。 使用 WeakEventManager 的中央事件分派功能可讓接聽程式的處理常式，即使來源物件仍然存在回收。 相反地，一般事件的連結使用`+=`運算子會使可能中斷連接的來源，以保存到接聽程式的參考。 這樣可避免進行記憶體回收能夠及時收件者。       一個常見的情形，存留期之間的關聯性來源和接聽程式應該使用弱式事件模式的是更新來自資料繫結的事件處理。       弱式事件模式也會用於回呼事件及一般事件中。"
  syntax:
    content: 'public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  implements: []
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.WeakEventManager.#ctor
  id: '#ctor'
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: WeakEventManager()
  nameWithType: WeakEventManager.WeakEventManager()
  fullName: System.Windows.WeakEventManager.WeakEventManager()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "它會當做初始設定式在衍生類別的建構函式使用時，會初始化基底類別值。"
  syntax:
    content: protected WeakEventManager ();
    parameters: []
  overload: System.Windows.WeakEventManager.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  id: DeliverEvent(System.Object,System.EventArgs)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: DeliverEvent(Object,EventArgs)
  nameWithType: WeakEventManager.DeliverEvent(Object,EventArgs)
  fullName: System.Windows.WeakEventManager.DeliverEvent(Object,EventArgs)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "每個接聽程式所管理的事件傳遞。"
  remarks: "呼叫內的事件處理常式會加入或移除從 DeliverEvent 方法<xref:System.Windows.WeakEventManager.StartListening%2A>和<xref:System.Windows.WeakEventManager.StopListening%2A>子類別的實作。</xref:System.Windows.WeakEventManager.StopListening%2A> </xref:System.Windows.WeakEventManager.StartListening%2A>       如果您呼叫<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>方法在您`AddListener`類別的實作，接收事件的接聽程式的清單就會保留在基礎的集合。</xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> (`AddListener`不是類別或介面合約的一部分。 `AddListener`是建議之方法的呼叫<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>並將新增弱式事件模式事件接聽程式的管理員類別的名稱）。      <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>將接聽程式加入至單一清單。</xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> </xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 如果您的管理員實作會維護多個 list 的每個事件接聽程式，請勿使用 DeliverEvent 或<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 相反地，您的實作應該建立自己<xref:System.Windows.WeakEventManager.ListenerList>執行個體，`AddListener`應該將接聽程式新增至適當的清單中，並且事件應該傳遞至適當的接聽程式清單，藉由呼叫<xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</xref:System.Windows.WeakEventManager.DeliverEventToList%2A> </xref:System.Windows.WeakEventManager.ListenerList>"
  syntax:
    content: protected void DeliverEvent (object sender, EventArgs args);
    parameters:
    - id: sender
      type: System.Object
      description: "處理事件的物件。"
    - id: args
      type: System.EventArgs
      description: "<xref:System.EventArgs>，其中包含要傳遞之事件的事件資料。</xref:System.EventArgs>"
  overload: System.Windows.WeakEventManager.DeliverEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  id: DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  nameWithType: WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  fullName: System.Windows.WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  syntax:
    content: protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);
    parameters:
    - id: sender
      type: System.Object
      description: "即將加入。"
    - id: args
      type: System.EventArgs
      description: "即將加入。"
    - id: list
      type: System.Windows.WeakEventManager.ListenerList
      description: "即將加入。"
  overload: System.Windows.WeakEventManager.DeliverEventToList*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  id: GetCurrentManager(System.Type)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: GetCurrentManager(Type)
  nameWithType: WeakEventManager.GetCurrentManager(Type)
  fullName: System.Windows.WeakEventManager.GetCurrentManager(Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "傳回<xref href=&quot;System.Windows.WeakEventManager&quot;></xref>實作用來提供的類型。"
  remarks: "<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>實作會呼叫這個方法，使用其傳遞`managerType`。</xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> 傳回<xref:System.Windows.WeakEventManager>則做為區分文字以決定哪個事件已接收，而叫用哪一個私用類別處理常式。</xref:System.Windows.WeakEventManager>"
  syntax:
    content: protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);
    parameters:
    - id: managerType
      type: System.Type
      description: "若要取得型別<xref href=&quot;System.Windows.WeakEventManager&quot;></xref>的。"
    return:
      type: System.Windows.WeakEventManager
      description: "比對<xref href=&quot;System.Windows.WeakEventManager&quot;></xref>實作。"
  overload: System.Windows.WeakEventManager.GetCurrentManager*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.Item(System.Object)
  id: Item(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: Item(Object)
  nameWithType: WeakEventManager.Item(Object)
  fullName: System.Windows.WeakEventManager.Item(Object)
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "取得或設定要儲存指定之來源的資料。"
  remarks: "在衍生的類別可以選擇哪些資料和儲存在這個索引子的型別。 通常這會實作為<xref:System.Windows.WeakEventManager.ListenerList>，這是弱式參考到接聽程式的清單。</xref:System.Windows.WeakEventManager.ListenerList> 您只需要變更此類型，如果<xref:System.Windows.WeakEventManager.ListenerList>類型不能包含您所需的資訊。</xref:System.Windows.WeakEventManager.ListenerList> 因此，您必須覆寫如果<xref:System.Windows.WeakEventManager.Purge%2A>方法，讓所有的清除作業的基礎類型會正確執行。</xref:System.Windows.WeakEventManager.Purge%2A>"
  syntax:
    content: protected object this[object source] { get; set; }
    parameters:
    - id: source
      type: System.Object
      description: "要求來源的以零為起始的索引。"
    return:
      type: System.Object
      description: "此來源的管理員所儲存的資料。"
  overload: System.Windows.WeakEventManager.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.NewListenerList
  id: NewListenerList
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: NewListenerList()
  nameWithType: WeakEventManager.NewListenerList()
  fullName: System.Windows.WeakEventManager.NewListenerList()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "傳回新的物件，以便包含事件的接聽程式。"
  syntax:
    content: protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();
    parameters: []
    return:
      type: System.Windows.WeakEventManager.ListenerList
      description: "包含事件的接聽程式的新物件。"
  overload: System.Windows.WeakEventManager.NewListenerList*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  id: ProtectedAddHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedAddHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedAddHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedAddHandler(Object,Delegate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "以指定之來源的事件處理常式加入指定的委派。"
  syntax:
    content: protected void ProtectedAddHandler (object source, Delegate handler);
    parameters:
    - id: source
      type: System.Object
      description: "處理常式委派訂閱來源物件。"
    - id: handler
      type: System.Delegate
      description: "處理所引發之事件的委派`source`。"
  overload: System.Windows.WeakEventManager.ProtectedAddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  id: ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedAddListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "將提供的接聽程式加入至所提供的受管理的事件來源。"
  remarks: "管理員類別中呼叫這個方法`AddListener`方法<xref:System.Windows.WeakEventManager>實作。</xref:System.Windows.WeakEventManager> `AddListener`這是建議的名稱定義您管理員的類別，讓其他類別加入您的弱式事件模式的接聽程式上的靜態方法。 `AddListener`應該採用兩個參數︰`source`其中附加接聽程式，而`listener`執行個體。 針對您`AddListener`實作中，目前管理員上呼叫 ProtectedAddListener 方法，並將相同的兩個參數傳遞。       如果先前空白接聽程式的清單，會呼叫 ProtectedAddListener<xref:System.Windows.WeakEventManager.StartListening%2A>方法就內部而言，這會呼叫您的特定<xref:System.Windows.WeakEventManager.StartListening%2A>覆寫透過多型。</xref:System.Windows.WeakEventManager.StartListening%2A> </xref:System.Windows.WeakEventManager.StartListening%2A>       ProtectedAddListener 將接聽程式加入至單一內部<xref:System.Windows.WeakEventManager.ListenerList>每`source`。</xref:System.Windows.WeakEventManager.ListenerList> 如果您的管理員實作會維護每個事件來源組合的接聽程式的多個清單，請勿使用 ProtectedAddListener。 相反地，您的實作應該建立自己<xref:System.Windows.WeakEventManager.ListenerList>執行個體，`AddListener`應該將接聽程式新增至適當的清單中，並且事件應該傳遞至適當的接聽程式清單，藉由呼叫<xref:System.Windows.WeakEventManager.DeliverEventToList%2A>事件，而不是<xref:System.Windows.WeakEventManager.DeliverEvent%2A>方法。</xref:System.Windows.WeakEventManager.DeliverEvent%2A> </xref:System.Windows.WeakEventManager.DeliverEventToList%2A> </xref:System.Windows.WeakEventManager.ListenerList>"
  syntax:
    content: protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);
    parameters:
    - id: source
      type: System.Object
      description: "要附加至接聽程式的來源。"
    - id: listener
      type: System.Windows.IWeakEventListener
      description: "接聽類別 (必須實作<xref href=&quot;System.Windows.IWeakEventListener&quot;> </xref>)。"
  overload: System.Windows.WeakEventManager.ProtectedAddListener*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  id: ProtectedRemoveHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedRemoveHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "移除先前加入的處理常式，從指定的來源。"
  syntax:
    content: protected void ProtectedRemoveHandler (object source, Delegate handler);
    parameters:
    - id: source
      type: System.Object
      description: "要移除的處理常式的來源。"
    - id: handler
      type: System.Delegate
      description: "若要移除的委派`source`。"
  overload: System.Windows.WeakEventManager.ProtectedRemoveHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  id: ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedRemoveListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "移除先前新增的接聽程式從提供的來源。"
  remarks: "管理員類別中呼叫這個方法`RemoveListener`方法<xref:System.Windows.WeakEventManager>實作。</xref:System.Windows.WeakEventManager> `RemoveListener`這是建議的名稱定義在您管理員的類別，讓其他類別移除接聽程式的弱式事件模式的靜態方法。 `RemoveListener`應該採用兩個參數︰`source`其中已移除接聽程式，而`listener`類別。 針對您`RemoveListener`實作中，目前管理員上呼叫 ProtectedRemoveListener 方法，並將相同的兩個參數傳遞。       如果呼叫 ProtectedRemoveListener 清單中移除最後一個接聽程式，會呼叫 ProtectedRemoveListener<xref:System.Windows.WeakEventManager.StopListening%2A>方法就內部而言，這會呼叫您的特定<xref:System.Windows.WeakEventManager.StopListening%2A>覆寫透過多型。</xref:System.Windows.WeakEventManager.StopListening%2A> </xref:System.Windows.WeakEventManager.StopListening%2A>       ProtectedRemoveListener 移除接聽程式從內部單一<xref:System.Windows.WeakEventManager.ListenerList>每`source`。</xref:System.Windows.WeakEventManager.ListenerList> 如果您的管理員實作會維護每個事件來源組合的接聽程式的多個清單，請勿使用 ProtectedRemoveListener。 相反地，您的實作應該建立自己<xref:System.Windows.WeakEventManager.ListenerList>執行個體，`RemoveListener`應該從適當的清單，移除接聽程式，以及事件應傳遞至適當的接聽程式清單，藉由呼叫<xref:System.Windows.WeakEventManager.DeliverEventToList%2A>方法，而非<xref:System.Windows.WeakEventManager.DeliverEvent%2A>方法。</xref:System.Windows.WeakEventManager.DeliverEvent%2A> </xref:System.Windows.WeakEventManager.DeliverEventToList%2A> </xref:System.Windows.WeakEventManager.ListenerList>"
  syntax:
    content: protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);
    parameters:
    - id: source
      type: System.Object
      description: "要移除的接聽程式的來源。"
    - id: listener
      type: System.Windows.IWeakEventListener
      description: "接聽類別 (必須實作<xref href=&quot;System.Windows.IWeakEventListener&quot;> </xref>)。"
  overload: System.Windows.WeakEventManager.ProtectedRemoveListener*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  id: Purge(System.Object,System.Object,System.Boolean)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: Purge(Object,Object,Boolean)
  nameWithType: WeakEventManager.Purge(Object,Object,Boolean)
  fullName: System.Windows.WeakEventManager.Purge(Object,Object,Boolean)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "非使用中的接聽程式項目從清單中移除資料為提供的來源。 傳回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果某些項目實際上從清單中移除。"
  remarks: "清除方法具有預設實作會<xref:System.Windows.WeakEventManager.ListenerList>.</xref:System.Windows.WeakEventManager.ListenerList>資料時，會移除所有項目"
  syntax:
    content: protected virtual bool Purge (object source, object data, bool purgeAll);
    parameters:
    - id: source
      type: System.Object
      description: "正在接聽的事件來源。"
    - id: data
      type: System.Object
      description: "要檢查的資料。 此物件必須是<xref:System.Windows.WeakEventManager.ListenerList>實作。</xref:System.Windows.WeakEventManager.ListenerList>"
    - id: purgeAll
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要停止接聽`source`，完全移除所有項目從`data`。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果實際上已移除某些項目。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.WeakEventManager.Purge*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ReadLock
  id: ReadLock
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ReadLock
  nameWithType: WeakEventManager.ReadLock
  fullName: System.Windows.WeakEventManager.ReadLock
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "建立基礎資料的資料表，讀取鎖定，並傳回<xref:System.IDisposable>.</xref:System.IDisposable>"
  remarks: "在衍生類別中，查詢中所包含的資料表<xref:System.Windows.WeakEventManager.Item%2A>應該一律在內發生`using (ReadLock) { ... }`子句，除了已寫入鎖定內的查詢。</xref:System.Windows.WeakEventManager.Item%2A> 這些查詢可能會需要您的類別支援更複雜`AddListener`實作，需要更多的資料超過`source`和`listener`，並使用<xref:System.Windows.WeakEventManager.Item%2A>儲存額外的資訊集合。</xref:System.Windows.WeakEventManager.Item%2A>"
  syntax:
    content: protected IDisposable ReadLock { get; }
    return:
      type: System.IDisposable
      description: "物件，可用來建立資料表格成員上的鎖定，然後適當地處置與<xref uid=&quot;langword_csharp_using&quot; name=&quot;using&quot; href=&quot;&quot;></xref>建構。"
  overload: System.Windows.WeakEventManager.ReadLock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: WeakEventManager.Remove(Object)
  fullName: System.Windows.WeakEventManager.Remove(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "移除指定之來源的所有接聽程式。"
  syntax:
    content: protected void Remove (object source);
    parameters:
    - id: source
      type: System.Object
      description: "若要移除的接聽程式的資訊來源。"
  overload: System.Windows.WeakEventManager.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ScheduleCleanup
  id: ScheduleCleanup
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ScheduleCleanup()
  nameWithType: WeakEventManager.ScheduleCleanup()
  fullName: System.Windows.WeakEventManager.ScheduleCleanup()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "要求的較低的優先權執行緒上執行的基礎接聽程式清單中未使用項目清除。"
  remarks: "呼叫 ScheduleCleanup 方法是類似於呼叫<xref:System.Windows.WeakEventManager.Purge%2A>方法在目前的管理員清單中，在較低的執行緒優先順序上與`purgeAll`參數設定為`false`。</xref:System.Windows.WeakEventManager.Purge%2A>"
  syntax:
    content: protected void ScheduleCleanup ();
    parameters: []
  overload: System.Windows.WeakEventManager.ScheduleCleanup*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  id: SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: SetCurrentManager(Type,WeakEventManager)
  nameWithType: WeakEventManager.SetCurrentManager(Type,WeakEventManager)
  fullName: System.Windows.WeakEventManager.SetCurrentManager(Type,WeakEventManager)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "指定的管理員類型會設定目前的管理員。"
  remarks: "呼叫 SetCurrentManager 方法來初始化管理員 中，如果所需的呼叫您`CurrentManager`屬性<xref:System.Windows.WeakEventManager>實作。</xref:System.Windows.WeakEventManager>"
  syntax:
    content: protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);
    parameters:
    - id: managerType
      type: System.Type
      description: "若要設定新的事件管理員類型。"
    - id: manager
      type: System.Windows.WeakEventManager
      description: "新的事件管理員。"
  overload: System.Windows.WeakEventManager.SetCurrentManager*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.StartListening(System.Object)
  id: StartListening(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: StartListening(Object)
  nameWithType: WeakEventManager.StartListening(Object)
  fullName: System.Windows.WeakEventManager.StartListening(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "在衍生類別中覆寫時，會啟動接聽管理事件。 第一次呼叫 StartListening 方法之後，管理員應該在呼叫的狀態<> *> 或<> *> 時處理相關的事件，從提供的來源。"
  syntax:
    content: protected abstract void StartListening (object source);
    parameters:
    - id: source
      type: System.Object
      description: "若要開始接聽來源。"
  overload: System.Windows.WeakEventManager.StartListening*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.StopListening(System.Object)
  id: StopListening(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: StopListening(Object)
  nameWithType: WeakEventManager.StopListening(Object)
  fullName: System.Windows.WeakEventManager.StopListening(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "在衍生類別中覆寫時，就會停止接聽提供來源上受管理的事件。"
  syntax:
    content: protected abstract void StopListening (object source);
    parameters:
    - id: source
      type: System.Object
      description: "要停止接聽的來源。"
  overload: System.Windows.WeakEventManager.StopListening*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.WriteLock
  id: WriteLock
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: WriteLock
  nameWithType: WeakEventManager.WriteLock
  fullName: System.Windows.WeakEventManager.WriteLock
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "建立基礎資料的資料表，寫入鎖定，並傳回<xref:System.IDisposable>.</xref:System.IDisposable>"
  remarks: "在衍生類別中，基礎資料表的所有修改都會內應該都發生`using (WriteLock) { ... }`子句。 這些修改可能有必要，如果您的類別支援更複雜`AddListener`實作，需要更多的資料超過`source`和`listener`，並使用<xref:System.Windows.WeakEventManager.Item%2A>儲存額外的資訊集合。</xref:System.Windows.WeakEventManager.Item%2A>"
  syntax:
    content: protected IDisposable WriteLock { get; }
    return:
      type: System.IDisposable
      description: "物件，可用來建立資料表格成員上的鎖定，然後適當地處置與<xref uid=&quot;langword_csharp_using&quot; name=&quot;using&quot; href=&quot;&quot;></xref>建構。"
  overload: System.Windows.WeakEventManager.WriteLock*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: System.Windows.Threading.DispatcherObject
- uid: System.Windows.WeakEventManager.#ctor
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WeakEventManager()
  nameWithType: WeakEventManager.WeakEventManager()
  fullName: System.Windows.WeakEventManager.WeakEventManager()
- uid: System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEvent(Object,EventArgs)
  nameWithType: WeakEventManager.DeliverEvent(Object,EventArgs)
  fullName: System.Windows.WeakEventManager.DeliverEvent(Object,EventArgs)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  nameWithType: WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  fullName: System.Windows.WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
- uid: System.Windows.WeakEventManager.ListenerList
  parent: System.Windows
  isExternal: false
  name: WeakEventManager+ListenerList
  nameWithType: WeakEventManager+ListenerList
  fullName: System.Windows.WeakEventManager+ListenerList
- uid: System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: GetCurrentManager(Type)
  nameWithType: WeakEventManager.GetCurrentManager(Type)
  fullName: System.Windows.WeakEventManager.GetCurrentManager(Type)
- uid: System.Windows.WeakEventManager
  parent: System.Windows
  isExternal: false
  name: WeakEventManager
  nameWithType: WeakEventManager
  fullName: System.Windows.WeakEventManager
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.WeakEventManager.Item(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Item(Object)
  nameWithType: WeakEventManager.Item(Object)
  fullName: System.Windows.WeakEventManager.Item(Object)
- uid: System.Windows.WeakEventManager.NewListenerList
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: NewListenerList()
  nameWithType: WeakEventManager.NewListenerList()
  fullName: System.Windows.WeakEventManager.NewListenerList()
- uid: System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedAddHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedAddHandler(Object,Delegate)
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
- uid: System.Windows.IWeakEventListener
  parent: System.Windows
  isExternal: false
  name: IWeakEventListener
  nameWithType: IWeakEventListener
  fullName: System.Windows.IWeakEventListener
- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
- uid: System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
- uid: System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Purge(Object,Object,Boolean)
  nameWithType: WeakEventManager.Purge(Object,Object,Boolean)
  fullName: System.Windows.WeakEventManager.Purge(Object,Object,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.WeakEventManager.ReadLock
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ReadLock
  nameWithType: WeakEventManager.ReadLock
  fullName: System.Windows.WeakEventManager.ReadLock
- uid: System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Windows.WeakEventManager.Remove(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Remove(Object)
  nameWithType: WeakEventManager.Remove(Object)
  fullName: System.Windows.WeakEventManager.Remove(Object)
- uid: System.Windows.WeakEventManager.ScheduleCleanup
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ScheduleCleanup()
  nameWithType: WeakEventManager.ScheduleCleanup()
  fullName: System.Windows.WeakEventManager.ScheduleCleanup()
- uid: System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: SetCurrentManager(Type,WeakEventManager)
  nameWithType: WeakEventManager.SetCurrentManager(Type,WeakEventManager)
  fullName: System.Windows.WeakEventManager.SetCurrentManager(Type,WeakEventManager)
- uid: System.Windows.WeakEventManager.StartListening(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StartListening(Object)
  nameWithType: WeakEventManager.StartListening(Object)
  fullName: System.Windows.WeakEventManager.StartListening(Object)
- uid: System.Windows.WeakEventManager.StopListening(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StopListening(Object)
  nameWithType: WeakEventManager.StopListening(Object)
  fullName: System.Windows.WeakEventManager.StopListening(Object)
- uid: System.Windows.WeakEventManager.WriteLock
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WriteLock
  nameWithType: WeakEventManager.WriteLock
  fullName: System.Windows.WeakEventManager.WriteLock
- uid: System.Windows.WeakEventManager.#ctor*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WeakEventManager
  nameWithType: WeakEventManager.WeakEventManager
- uid: System.Windows.WeakEventManager.DeliverEvent*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEvent
  nameWithType: WeakEventManager.DeliverEvent
- uid: System.Windows.WeakEventManager.DeliverEventToList*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEventToList
  nameWithType: WeakEventManager.DeliverEventToList
- uid: System.Windows.WeakEventManager.GetCurrentManager*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: GetCurrentManager
  nameWithType: WeakEventManager.GetCurrentManager
- uid: System.Windows.WeakEventManager.Item*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Item
  nameWithType: WeakEventManager.Item
- uid: System.Windows.WeakEventManager.NewListenerList*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: NewListenerList
  nameWithType: WeakEventManager.NewListenerList
- uid: System.Windows.WeakEventManager.ProtectedAddHandler*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddHandler
  nameWithType: WeakEventManager.ProtectedAddHandler
- uid: System.Windows.WeakEventManager.ProtectedAddListener*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddListener
  nameWithType: WeakEventManager.ProtectedAddListener
- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveHandler
  nameWithType: WeakEventManager.ProtectedRemoveHandler
- uid: System.Windows.WeakEventManager.ProtectedRemoveListener*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveListener
  nameWithType: WeakEventManager.ProtectedRemoveListener
- uid: System.Windows.WeakEventManager.Purge*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Purge
  nameWithType: WeakEventManager.Purge
- uid: System.Windows.WeakEventManager.ReadLock*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ReadLock
  nameWithType: WeakEventManager.ReadLock
- uid: System.Windows.WeakEventManager.Remove*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Remove
  nameWithType: WeakEventManager.Remove
- uid: System.Windows.WeakEventManager.ScheduleCleanup*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ScheduleCleanup
  nameWithType: WeakEventManager.ScheduleCleanup
- uid: System.Windows.WeakEventManager.SetCurrentManager*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: SetCurrentManager
  nameWithType: WeakEventManager.SetCurrentManager
- uid: System.Windows.WeakEventManager.StartListening*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StartListening
  nameWithType: WeakEventManager.StartListening
- uid: System.Windows.WeakEventManager.StopListening*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StopListening
  nameWithType: WeakEventManager.StopListening
- uid: System.Windows.WeakEventManager.WriteLock*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WriteLock
  nameWithType: WeakEventManager.WriteLock
