### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlBulkCopy
  id: SqlBulkCopy
  children:
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  - System.Data.SqlClient.SqlBulkCopy.BatchSize
  - System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  - System.Data.SqlClient.SqlBulkCopy.Close
  - System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  - System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  - System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  - System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  - System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  - System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  langs:
  - csharp
  name: SqlBulkCopy
  nameWithType: SqlBulkCopy
  fullName: System.Data.SqlClient.SqlBulkCopy
  type: Class
  summary: "可讓您有效率地大量載入 SQL Server 資料表與另一個來源的資料。"
  remarks: "Microsoft SQL Server 包含名為常用的命令提示字元公用程式**bcp**如之間移動資料從一個資料表，在單一伺服器或伺服器之間。 SqlBulkCopy 類別可讓您撰寫 managed 程式碼解決方案，以提供類似的功能。 還有其他方式將資料載入 SQL Server 資料表 （INSERT 陳述式，例如），但是 SqlBulkCopy 提供顯著的效能優勢。       SqlBulkCopy 類別可以用來只將資料寫入 SQL Server 資料表。 不過，資料來源不限於 SQL Server;任何資料來源可以使用，因為可以將資料載入至<xref:System.Data.DataTable>執行個體，或是讀取<xref:System.Data.IDataReader>執行個體。</xref:System.Data.IDataReader> </xref:System.Data.DataTable>       SqlBulkCopy 將會失敗時大量載入<xref:System.Data.DataTable>類型的資料行<xref:System.Data.SqlTypes.SqlDateTime>其類型是日期/時間類型的其中一個資料行加入 SQL Server 2008 到 SQL Server。</xref:System.Data.SqlTypes.SqlDateTime> </xref:System.Data.DataTable>"
  example:
  - "The following console application demonstrates how to load data using the SqlBulkCopy class. In this example, a <xref:System.Data.SqlClient.SqlDataReader> is used to copy data from the **Production.Product** table in the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]**AdventureWorks** database to a similar table in the same database.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks BulkCopy.Single#1](~/add/codesnippet/csharp/t-system.data.sqlclient._9_1.cs)]\n [!code-vb[DataWorks BulkCopy.Single#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._9_1.vb)]"
  syntax:
    content: 'public sealed class SqlBulkCopy : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  id: '#ctor(System.Data.SqlClient.SqlConnection)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(SqlConnection)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "初始化的新執行個體<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>類別使用指定的開啟執行個體<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>。"
  remarks: "因為連線已經開啟時<xref:System.Data.SqlClient.SqlBulkCopy>初始化執行個體，連接會保持開啟之後<xref:System.Data.SqlClient.SqlBulkCopy>執行個體已關閉。</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.Data.SqlClient.SqlBulkCopy>       如果`connection`引數為 null，<xref:System.ArgumentNullException>就會擲回。</xref:System.ArgumentNullException>"
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. In this example, a <xref:System.Data.SqlClient.SqlDataReader> is used to copy data from the **Production.Product** table in the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]**AdventureWorks** database to a similar table in the same database. This example is for demonstration purposes only. You would not use `SqlBulkCopy` to move data from one table to another in the same database in a production application. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks BulkCopy.Single#1](~/add/codesnippet/csharp/759c1349-38f0-4ca1-9e42-_1.cs)]\n [!code-vb[DataWorks BulkCopy.Single#1](~/add/codesnippet/visualbasic/759c1349-38f0-4ca1-9e42-_1.vb)]"
  syntax:
    content: public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);
    parameters:
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: "已經開啟<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>將用來執行大量複製作業的執行個體。 如果您的連接字串不使用<xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>，您可以使用<xref href=&quot;System.Data.SqlClient.SqlCredential&quot;></xref>比更安全地傳遞使用者 ID 和密碼的連接字串中以文字指定使用者識別碼和密碼。"
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(String)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "初始化並開啟的新執行個體<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>根據所提供<code> connectionString </code>。 建構函式會使用<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>初始化的新執行個體<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>類別。"
  remarks: "結尾的大量複製作業會自動關閉連接。       如果`connectionString`為 null，<xref:System.ArgumentNullException>就會擲回。</xref:System.ArgumentNullException> 如果`connectionString`為空字串，<xref:System.ArgumentException>就會擲回。</xref:System.ArgumentException>"
  example:
  - "The following console application demonstrates how to bulk load data by using a connection specified as a string. The connection is automatically closed when the <xref:System.Data.SqlClient.SqlBulkCopy> instance is closed.  \n  \n In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._5_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/csharp/m-system.data.sqlclient._5_1.cs)]"
  syntax:
    content: public SqlBulkCopy (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: "定義將會開啟以供連接字串<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>執行個體。 如果您的連接字串不使用<xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>，您可以使用&lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt;或&lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt;和<xref href=&quot;System.Data.SqlClient.SqlCredential&quot;></xref>比更安全地傳遞使用者 ID 和密碼的連接字串中以文字指定使用者識別碼和密碼。"
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  id: '#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(String,SqlBulkCopyOptions)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "初始化並開啟的新執行個體<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>根據所提供<code> connectionString </code>。 建構函式會使用該<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>初始化的新執行個體<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>類別。 <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>執行個體的行為中所提供的選項根據<code> copyOptions </code>參數。"
  remarks: "您可以取得詳細的資訊中的所有大量複製選項<xref:System.Data.SqlClient.SqlBulkCopyOptions>主題。</xref:System.Data.SqlClient.SqlBulkCopyOptions>"
  example:
  - "The following console application demonstrates how to perform a bulk load by using a connection specified as a string. An option is set to use the value in the identity column of the source table when you load the destination table. In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source table and destination table each include an Identity column. By default, a new value for the **Identity** column is generated in the destination table for each row added. In this example, an option is set when the connection is opened that forces the bulk load process to use the **Identity** values from the source table instead. To see how the option changes the way the bulk load works, run the sample with the **dbo.BulkCopyDemoMatchingColumns** table empty. All rows load from the source. Then run the sample again without emptying the table. An exception is thrown and the code writes a message to the console notifying you that rows weren't added because of primary key constraint violations.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.KeepIdentity#1](~/add/codesnippet/csharp/9a723f0e-d2b0-40de-a13f-_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/add/codesnippet/visualbasic/9a723f0e-d2b0-40de-a13f-_1.vb)]"
  syntax:
    content: public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);
    parameters:
    - id: connectionString
      type: System.String
      description: "定義將會開啟以供連接字串<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>執行個體。 如果您的連接字串不使用<xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>，您可以使用&lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt;或&lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt;和<xref href=&quot;System.Data.SqlClient.SqlCredential&quot;></xref>比更安全地傳遞使用者 ID 和密碼的連接字串中以文字指定使用者識別碼和密碼。"
    - id: copyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: "值組合<xref href=&quot;System.Data.SqlClient.SqlBulkCopyOptions&quot;></xref>列舉，可判斷哪些資料來源的資料列會複製到目的資料表。"
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  id: '#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "初始化的新執行個體<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>類別提供現有開啟的執行個體的<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>。 <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref>執行個體的行為中所提供的選項根據<code> copyOptions </code>參數。 如果為非 null <xref href=&quot;System.Data.SqlClient.SqlTransaction&quot;> </xref>是提供，則複製作業會在執行該交易。"
  remarks: "如果選項包括`UseInternalTransaction`和`externalTransaction`引數不是 null， **InvalidArgumentException**就會擲回。       如需範例示範如何使用`SqlBulkCopy`在交易中，請參閱[異動和大量複製作業](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);
    parameters:
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: "已經開啟<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>將用來執行大量複製的執行個體。 如果您的連接字串不使用<xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>，您可以使用<xref href=&quot;System.Data.SqlClient.SqlCredential&quot;></xref>比更安全地傳遞使用者 ID 和密碼的連接字串中以文字指定使用者識別碼和密碼。"
    - id: copyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: "值組合<xref href=&quot;System.Data.SqlClient.SqlBulkCopyOptions&quot;></xref>列舉，可判斷哪些資料來源的資料列會複製到目的資料表。"
    - id: externalTransaction
      type: System.Data.SqlClient.SqlTransaction
      description: "現有<xref href=&quot;System.Data.SqlClient.SqlTransaction&quot;></xref>大量複製將會發生在執行個體。"
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize
  id: BatchSize
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: BatchSize
  nameWithType: SqlBulkCopy.BatchSize
  fullName: System.Data.SqlClient.SqlBulkCopy.BatchSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "每個批次中的資料列數目。 在每個批次結束時，批次中的資料列會傳送到伺服器。"
  remarks: "當 BatchSize 資料列都已處理或傳送到目的地資料來源沒有多個資料列時，批次已完成。       零 （預設值） 表示，每個<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>作業是在單一批次。</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>       如果<xref:System.Data.SqlClient.SqlBulkCopy>執行個體已宣告但<xref:System.Data.SqlClient.SqlBulkCopyOptions>選項作用中，伺服器 BatchSize 資料列中傳送資料列一次，但未採取任何交易相關的動作。</xref:System.Data.SqlClient.SqlBulkCopyOptions> </xref:System.Data.SqlClient.SqlBulkCopy> 如果<xref:System.Data.SqlClient.SqlBulkCopyOptions>作用中，是以個別的交易插入的資料列的每個批次。</xref:System.Data.SqlClient.SqlBulkCopyOptions>       BatchSize 屬性可以在任何時間設定。 如果大量複製已在進行中，目前的批次的大小調整為根據上一個批次大小。 後續的批次使用新的大小。 如果 BatchSize 一開始為零和已變更時<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>作業正在進行中，作業會當做單一批次的資料載入。</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 任何後續<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>上相同的作業<xref:System.Data.SqlClient.SqlBulkCopy>執行個體使用新的 BatchSize。</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>"
  example:
  - "The following console application demonstrates how to bulk load data in batches of 50 rows. For an example illustrating how BatchSize works with a transaction, see [Transaction and Bulk Copy Operations](~/add/includes/ajax-current-ext-md.md).  \n  \n In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.BatchSize#1](~/add/codesnippet/csharp/p-system.data.sqlclient._2_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._2_1.vb)]"
  syntax:
    content: public int BatchSize { get; set; }
    return:
      type: System.Int32
      description: "BatchSize 屬性或為零的整數值已不設定任何值。"
  overload: System.Data.SqlClient.SqlBulkCopy.BatchSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  id: BulkCopyTimeout
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: BulkCopyTimeout
  nameWithType: SqlBulkCopy.BulkCopyTimeout
  fullName: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "作業逾時前完成的秒數。"
  remarks: "如果作業逾時時間，也不會認可交易，並複製的所有資料列會移除從目的地資料表。"
  example:
  - "The following console application demonstrates how to modify the time-out to 60 seconds when bulk loading data.  \n  \n In this example, the source data is first read from a [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] instance, it is easier and faster to use a [!INCLUDE[tsql](~/add/includes/tsql-md.md)]`INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._14_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.Timeout#1](~/add/codesnippet/csharp/p-system.data.sqlclient._14_1.cs)]"
  syntax:
    content: public int BulkCopyTimeout { get; set; }
    return:
      type: System.Int32
      description: "BulkCopyTimeout 屬性的整數值。 預設值為 30 秒。 值為 0 表示沒有限制;大量複製會無限期等候。"
  overload: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.Close
  id: Close
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: Close()
  nameWithType: SqlBulkCopy.Close()
  fullName: System.Data.SqlClient.SqlBulkCopy.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "關閉<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>執行個體。"
  remarks: "您在上呼叫 Close 之後<xref:System.Data.SqlClient.SqlBulkCopy>物件沒有其他作業將會成功。</xref:System.Data.SqlClient.SqlBulkCopy> 呼叫的<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>方法會擲回<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>       呼叫 Close 方法從<xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>事件導致<xref:System.InvalidOperationException>擲回。</xref:System.InvalidOperationException> </xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>       請注意開啟<xref:System.Data.SqlClient.SqlBulkCopy>執行個體視為封閉式隱含結尾`using`區塊。</xref:System.Data.SqlClient.SqlBulkCopy>"
  example:
  - "The following example uses the same <xref:System.Data.SqlClient.SqlBulkCopy> instance to add sales orders and their associated details to two destination tables. Because the **AdventureWorks** sales order tables are large, the sample reads only orders placed by a certain account number and bulk copies those orders and details to the destination tables. The Close method is used only after both bulk copy operations are complete.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._43_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.OrdersDetails#1](~/add/codesnippet/csharp/m-system.data.sqlclient._43_1.cs)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Data.SqlClient.SqlBulkCopy.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  id: ColumnMappings
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: ColumnMappings
  nameWithType: SqlBulkCopy.ColumnMappings
  fullName: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "傳回的集合<xref href=&quot;System.Data.SqlClient.SqlBulkCopyColumnMapping&quot;></xref>項目。 資料行對應會定義目的地中的資料來源中的資料行和資料行之間的關聯性。"
  remarks: "如果資料來源和目的地資料表有相同數目的資料行，而且每個資料來源中的來源資料行的序數位置中符合相對應的目的地資料行的序數位置，ColumnMappings 集合是不必要的。 不過，如果資料行計數不同，或不一致的序數位置，您必須使用 ColumnMappings 以確定資料會複製到正確的資料行。       在執行大量複製作業時，此集合可供存取，但無法變更。 若要變更它的任何嘗試將會擲回<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException>"
  syntax:
    content: public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }
    return:
      type: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
      description: "資料行對應的集合。 根據預設，它可以是空集合。"
  overload: System.Data.SqlClient.SqlBulkCopy.ColumnMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  id: DestinationTableName
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: DestinationTableName
  nameWithType: SqlBulkCopy.DestinationTableName
  fullName: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "在伺服器上的目的地資料表的名稱。"
  remarks: "如果 DestinationTableName 尚未設定時<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>呼叫時，<xref:System.ArgumentNullException>就會擲回。</xref:System.ArgumentNullException> </xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>       如果 DestinationTableName 遭到修改時<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>作業正在執行，變更不會影響目前的作業。</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 在下一次使用新 DestinationTableName 值<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>方法呼叫。</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>       DestinationTableName 是三部分名稱 (`<database>.<owningschema>.<name>`)。 如果您選擇，您可以限定資料表名稱的資料庫和主控結構描述。 不過，如果資料表名稱使用底線 (&quot;_&quot;) 或任何其他特殊字元，您必須逸出名稱使用周圍的方括號中 (`[<database>.<owningschema>.<name_01>]`)。 如需詳細資訊，請參閱 SQL Server 線上叢書 》 中的 < 識別碼 >。       您可以將資料大量複製到暫存資料表使用的值，例如`tempdb..#table`或`tempdb.<owner>.#table`DestinationTableName 屬性。"
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.Single#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._5_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.Single#1](~/add/codesnippet/csharp/p-system.data.sqlclient._5_1.cs)]"
  syntax:
    content: public string DestinationTableName { get; set; }
    return:
      type: System.String
      description: "字串值的 DestinationTableName 屬性或如果沒有任何已提供的一樣。"
  overload: System.Data.SqlClient.SqlBulkCopy.DestinationTableName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  id: EnableStreaming
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: EnableStreaming
  nameWithType: SqlBulkCopy.EnableStreaming
  fullName: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "啟用或停用<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件中的資料流資料<xref href=&quot;System.Data.IDataReader&quot;></xref>物件"
  remarks: "EnableStreaming 時`true`，<xref:System.Data.SqlClient.SqlBulkCopy>讀取<xref:System.Data.IDataReader>物件使用<xref:System.Data.CommandBehavior>，記憶體使用量最佳化使用<xref:System.Data.IDataReader>串流處理功能。</xref:System.Data.IDataReader> </xref:System.Data.CommandBehavior> </xref:System.Data.IDataReader> </xref:System.Data.SqlClient.SqlBulkCopy> 當設定為 false，<xref:System.Data.SqlClient.SqlBulkCopy>類別會載入所傳回的資料<xref:System.Data.IDataReader>物件傳送至之前的記憶體[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]或 SQL Azure。</xref:System.Data.IDataReader> </xref:System.Data.SqlClient.SqlBulkCopy>"
  syntax:
    content: public bool EnableStreaming { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件可以串流處理的資料<xref href=&quot;System.Data.IDataReader&quot;></xref>物件; 否則為 false。 預設值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlBulkCopy.EnableStreaming*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  id: NotifyAfter
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: NotifyAfter
  nameWithType: SqlBulkCopy.NotifyAfter
  fullName: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "定義產生通知事件之前要處理的資料列數目。"
  remarks: "這個屬性被設計用於使用者介面元件，以說明大量複製作業的進度。 表示產生通知事件之前要處理的資料列數目。 即使在大量複製作業正在進行中時，可以在任何時間，設定 NotifyAfter 屬性。 大量複製作業期間所做的變更在下一個通知之後才會生效。 新的設定套用到相同的執行個體上的所有後續作業。       如果 NotifyAfter 設為號碼小於零，<xref:System.ArgumentOutOfRangeException>就會擲回。</xref:System.ArgumentOutOfRangeException>"
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. The NotifyAfter property is set so that the event handler is called after every 50 rows copied to the table.  \n  \n In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. Then a second connection is opened to bulk copy the data. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._11_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/csharp/p-system.data.sqlclient._11_1.cs)]"
  syntax:
    content: public int NotifyAfter { get; set; }
    return:
      type: System.Int32
      description: "NotifyAfter 屬性或如果未設定的屬性則為零的整數值。"
  overload: System.Data.SqlClient.SqlBulkCopy.NotifyAfter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  id: SqlRowsCopied
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlRowsCopied
  nameWithType: SqlBulkCopy.SqlRowsCopied
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "所指定的資料列數目每次<xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter*>已處理的內容。</xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter*>"
  remarks: "請注意，設定<xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A>和<xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>無關。</xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> </xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> 回條 SqlRowsCopied 事件不代表任何資料列已傳送到伺服器或認可。       您不能呼叫 SqlBulkCopy.Close (<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>) 或 SqlConnection.Close (<xref:System.Data.SqlClient.SqlConnection.Close%2A>) 從這個事件。</xref:System.Data.SqlClient.SqlConnection.Close%2A> </xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> 如此一來，這會導致<xref:System.InvalidOperationException>擲回，而<xref:System.Data.SqlClient.SqlBulkCopy>物件狀態不會變更。</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.InvalidOperationException> 如果使用者想要取消事件，從作業<xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>屬性<xref:System.Data.SqlClient.SqlRowsCopiedEventArgs>可用。</xref:System.Data.SqlClient.SqlRowsCopiedEventArgs> </xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> (請參閱[異動和大量複製作業](~/add/includes/ajax-current-ext-md.md)如需範例，使用<xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>屬性。)</xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>     沒有動作，例如交易活動，支援大量複製作業，在執行期間的連線，而且建議您不要使用 SqlRowsCopied 事件期間使用的相同連接。 不過，您可以開啟不同的連接。"
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. The <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> property is set so that the event handler is called after every 50 rows copied to the table.  \n  \n In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/visualbasic/e-system.data.sqlclient._2_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/csharp/e-system.data.sqlclient._2_1.cs)]"
  syntax:
    content: public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;
    return:
      type: System.Data.SqlClient.SqlRowsCopiedEventHandler
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: System.IDisposable.Dispose()
  nameWithType: SqlBulkCopy.System.IDisposable.Dispose()
  fullName: System.Data.SqlClient.SqlBulkCopy.System.IDisposable.Dispose()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "目前的執行個體所使用的資源全部釋出<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>類別。"
  remarks: "呼叫`Dispose`當您完成使用<xref:System.Data.SqlClient.SqlBulkCopy>.</xref:System.Data.SqlClient.SqlBulkCopy> `Dispose`方法會使<xref:System.Data.SqlClient.SqlBulkCopy>中無法使用的狀態。</xref:System.Data.SqlClient.SqlBulkCopy> 在呼叫`Dispose`，您必須釋放所有參考<xref:System.Data.SqlClient.SqlBulkCopy>讓記憶體回收行程可以回收記憶體的<xref:System.Data.SqlClient.SqlBulkCopy>所佔用。</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.Data.SqlClient.SqlBulkCopy>       如需詳細資訊，請參閱[清除 Unmanaged 資源上](~/add/includes/ajax-current-ext-md.md)和[實作 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      > [!NOTE] > 永遠呼叫`Dispose`釋放您的最後一個參考至<xref:System.Data.SqlClient.SqlBulkCopy>。</xref:System.Data.SqlClient.SqlBulkCopy>之前 否則，它所使用的資源將不會釋放直到記憶體回收行程呼叫<xref:System.Data.SqlClient.SqlBulkCopy>物件的`Finalize`方法。</xref:System.Data.SqlClient.SqlBulkCopy>"
  syntax:
    content: void IDisposable.Dispose ();
    parameters: []
  overload: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  id: WriteToServer(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DbDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "所有資料列複製到提供<xref href=&quot;System.Data.Common.DbDataReader&quot;></xref>陣列所指定的目的地資料表<xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>屬性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件。</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  syntax:
    content: public void WriteToServer (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "A <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref>其資料列會複製到目的資料表。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])
  id: WriteToServer(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServer(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "所有資料列複製到提供<xref href=&quot;System.Data.DataRow&quot;></xref>陣列所指定的目的地資料表<xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>屬性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件。</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "大量複製作業正在進行時，相關聯的目的地<xref:System.Data.SqlClient.SqlConnection>忙碌處理，而且可以在連接上執行任何其他的作業。</xref:System.Data.SqlClient.SqlConnection>       <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>集合對應從<xref:System.Data.DataRow>目的地資料庫的資料表資料行。</xref:System.Data.DataRow> </xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following console application demonstrates how to bulk load data from a <xref:System.Data.DataRow> array. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, a <xref:System.Data.DataTable> is created at run time. A single row is selected from the <xref:System.Data.DataTable> to copy to the destination table.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.RowArray#1](~/add/codesnippet/csharp/m-system.data.sqlclient._3_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._3_1.vb)]"
  syntax:
    content: public void WriteToServer (System.Data.DataRow[] rows);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "陣列<xref href=&quot;System.Data.DataRow&quot;></xref>會複製到目的地資料表的物件。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)
  id: WriteToServer(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DataTable)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "所有資料列複製到提供的<xref href=&quot;System.Data.DataTable&quot;></xref>所指定的目的資料表<xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>屬性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件。</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "中的所有資料列<xref:System.Data.DataTable>會複製到目的地資料表，除了已刪除。</xref:System.Data.DataTable>       大量複製作業正在進行時，相關聯的目的地<xref:System.Data.SqlClient.SqlConnection>忙碌處理，而且可以在連接上執行任何其他的作業。</xref:System.Data.SqlClient.SqlConnection>       <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>集合對應從<xref:System.Data.DataTable>目的地資料庫的資料表資料行。</xref:System.Data.DataTable> </xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following Console application demonstrates how to bulk load data from a <xref:System.Data.DataTable>. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, a <xref:System.Data.DataTable> is created at run time and is the source of the `SqlBulkCopy` operation.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.DataTable#1](~/add/codesnippet/csharp/m-system.data.sqlclient._16_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._16_1.vb)]"
  syntax:
    content: public void WriteToServer (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>其資料列會複製到目的資料表。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)
  id: WriteToServer(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "所有資料列複製到提供的<xref href=&quot;System.Data.IDataReader&quot;></xref>所指定的目的資料表<xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>屬性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件。</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "在下一個可用的資料列，讀取器中開始複製作業。 大部分的情況下，讀取器只傳回<xref:System.Data.IDbCommand.ExecuteReader%2A>或類似的呼叫，因此下一個可用的資料列是第一個資料列。</xref:System.Data.IDbCommand.ExecuteReader%2A> 若要處理多個結果，請呼叫<xref:System.Data.IDataReader.NextResult%2A>上的資料讀取器和再次呼叫 WriteToServer。</xref:System.Data.IDataReader.NextResult%2A>       請注意，使用 WriteToServer 修改讀取器的狀態。 方法會呼叫<xref:System.Data.IDataReader.Read%2A>直到它傳回 false，作業已中止時，或發生錯誤。</xref:System.Data.IDataReader.Read%2A> 這表示資料讀取器將會在不同的狀態，可能會在結果集中，結尾 WriteToServer 作業完成時。       大量複製作業正在進行時，相關聯的目的地<xref:System.Data.SqlClient.SqlConnection>忙碌處理，而且可以在連接上執行任何其他的作業。</xref:System.Data.SqlClient.SqlConnection>       <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>集合的資料讀取器資料行對應到目的地資料庫資料表。</xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following console application demonstrates how to bulk load data from a <xref:System.Data.SqlClient.SqlDataReader>. The destination table is a table in the **AdventureWorks** database.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._35_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/csharp/m-system.data.sqlclient._35_1.cs)]"
  syntax:
    content: public void WriteToServer (System.Data.IDataReader reader);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "A <xref href=&quot;System.Data.IDataReader&quot;> </xref>其資料列會複製到目的資料表。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  id: WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable,DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "只有符合提供的資料列中的狀態所提供的資料列複製到<xref href=&quot;System.Data.DataTable&quot;></xref>所指定的目的資料表<xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>屬性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件。</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "只有當資料列中<xref:System.Data.DataTable>中所示的狀態`rowState`引數而且不刪除複製到目的地資料表。</xref:System.Data.DataTable>      > [!NOTE] > 如果<xref:System.Data.DataRowState>指定，則任何<xref:System.Data.DataRowState>， <xref:System.Data.DataRowState>，和<xref:System.Data.DataRowState>資料列也會複製到伺服器。</xref:System.Data.DataRowState> </xref:System.Data.DataRowState> </xref:System.Data.DataRowState> </xref:System.Data.DataRowState> 將會不引發任何例外狀況。       大量複製作業正在進行時，相關聯的目的地<xref:System.Data.SqlClient.SqlConnection>忙碌處理，而且可以在連接上執行任何其他的作業。</xref:System.Data.SqlClient.SqlConnection>       <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>集合對應從<xref:System.Data.DataTable>目的地資料庫的資料表資料行。</xref:System.Data.DataTable> </xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following Console application demonstrates how to bulk load only the rows in a <xref:System.Data.DataTable> that match a specified state. In this case, only unchanged rows are added. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, a <xref:System.Data.DataTable> is created at run time and three rows are added to it. Before the WriteToServer method is executed, one of the rows is edited. The WriteToServer method is called with a `DataRowState.Unchanged``rowState` argument, so only the two unchanged rows are bulk copied to the destination.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.DataRowState#1](~/add/codesnippet/csharp/65bb2b63-7c25-4470-9a90-_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/add/codesnippet/visualbasic/65bb2b63-7c25-4470-9a90-_1.vb)]"
  syntax:
    content: public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>其資料列會複製到目的資料表。"
    - id: rowState
      type: System.Data.DataRowState
      description: "中的值<xref href=&quot;System.Data.DataRowState&quot;></xref>列舉型別。 只有符合資料列狀態的資料列會複製到目的地。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  id: WriteToServerAsync(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同步版本<> *>，其中所有資料列複製到提供<xref href=&quot;System.Data.Common.DbDataReader&quot;></xref>陣列所指定的目的地資料表<> *> 屬性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件。"
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "A <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref>其資料列會複製到目的資料表。"
    return:
      type: System.Threading.Tasks.Task
      description: "表示非同步作業的工作。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])
  id: WriteToServerAsync(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同步版本<> *>，其中所有資料列複製到提供<xref href=&quot;System.Data.DataRow&quot;></xref>陣列所指定的目的地資料表<> *> 屬性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件。"
  remarks: "如需有關非同步程式設計中[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]，請參閱[進行非同步程式設計](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "陣列<xref href=&quot;System.Data.DataRow&quot;></xref>會複製到目的地資料表的物件。"
    return:
      type: System.Threading.Tasks.Task
      description: "表示非同步作業的工作。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "相同的執行個體，工作完成前呼叫 WriteToServerAsync 多次。       呼叫 WriteToServerAsync 和<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>工作完成前相同的執行個體。</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       卸除連接，或為 WriteToServerAsync 執行期間關閉。       傳回工作物件，在<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件方法執行期間已關閉。       工作物件中傳回，時發生連接集區逾時。       傳回工作物件，在<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>方法執行前已關閉的物件。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>指定連接字串中。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "所傳回工作物件中，傳回任何錯誤[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]開啟連接時所發生的。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)
  id: WriteToServerAsync(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同步版本<> *>，其中所有資料列複製到提供的<xref href=&quot;System.Data.DataTable&quot;></xref>所指定的目的資料表<> *> 屬性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件。"
  remarks: "如需有關非同步程式設計中[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]，請參閱[進行非同步程式設計](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>其資料列會複製到目的資料表。"
    return:
      type: System.Threading.Tasks.Task
      description: "表示非同步作業的工作。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "相同的執行個體，工作完成前呼叫 WriteToServerAsync 多次。       呼叫 WriteToServerAsync 和<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>工作完成前相同的執行個體。</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       卸除連接，或為 WriteToServerAsync 執行期間關閉。       傳回工作物件，在<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件方法執行期間已關閉。       工作物件中傳回，時發生連接集區逾時。       傳回工作物件，在<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>方法執行前已關閉的物件。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>指定連接字串中。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "所傳回工作物件中，傳回任何錯誤[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]開啟連接時所發生的。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)
  id: WriteToServerAsync(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同步版本<> *>，其中所有資料列複製到提供的<xref href=&quot;System.Data.IDataReader&quot;></xref>所指定的目的資料表<> *> 屬性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件。"
  remarks: "如需有關非同步程式設計中[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]，請參閱[進行非同步程式設計](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "A <xref href=&quot;System.Data.IDataReader&quot;> </xref>其資料列會複製到目的資料表。"
    return:
      type: System.Threading.Tasks.Task
      description: "表示非同步作業的工作。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "相同的執行個體，工作完成前呼叫 WriteToServerAsync 多次。       呼叫 WriteToServerAsync 和<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>工作完成前相同的執行個體。</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       卸除連接，或為 WriteToServerAsync 執行期間關閉。       傳回工作物件，在<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件方法執行期間已關閉。       工作物件中傳回，時發生連接集區逾時。       傳回工作物件，在<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>方法執行前已關閉的物件。       <xref href=&quot;System.Data.IDataReader&quot;> </xref>已關閉之前已完成<xref:System.Threading.Tasks.Task>傳回。</xref:System.Threading.Tasks.Task>       <xref href=&quot;System.Data.IDataReader&quot;></xref>的相關聯的連接已關閉，才能完成<xref:System.Threading.Tasks.Task>傳回。</xref:System.Threading.Tasks.Task>       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>指定連接字串中。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "所傳回工作物件中，傳回任何錯誤[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]開啟連接時所發生的。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DbDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同步版本<> *>，其中所有資料列複製到提供<xref href=&quot;System.Data.Common.DbDataReader&quot;></xref>陣列所指定的目的地資料表<> *> 屬性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件。"
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "A <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref>其資料列會複製到目的資料表。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消指令。 A <> </> *> 中此參數的值會使這個方法相當於<> *>。"
    return:
      type: System.Threading.Tasks.Task
      description: "傳回<xref:System.Threading.Tasks.Task>.</xref:System.Threading.Tasks.Task>"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataRow[],CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同步版本<> *>，其中所有資料列複製到提供<xref href=&quot;System.Data.DataRow&quot;></xref>陣列所指定的目的地資料表<> *> 屬性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件。       取消語彙基元可以用來要求此作業會放棄命令逾時之前捨棄。  例外狀況將經由傳回的 Task 物件回報。"
  remarks: "如需有關非同步程式設計中[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]，請參閱[進行非同步程式設計](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "陣列<xref href=&quot;System.Data.DataRow&quot;></xref>會複製到目的地資料表的物件。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消指令。 A <> </> *> 中此參數的值會使這個方法相當於<> *>。"
    return:
      type: System.Threading.Tasks.Task
      description: "表示非同步作業的工作。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "呼叫<> *> 多次的工作完成前相同的執行個體。     呼叫<> *> 和<> *> 工作完成前相同的執行個體。     連接會卸除或關閉期間<> *> 執行。       傳回工作物件，在<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件方法執行期間已關閉。       工作物件中傳回，時發生連接集區逾時。       傳回工作物件，在<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>方法執行前已關閉的物件。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>指定連接字串中。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "所傳回工作物件中，傳回任何錯誤[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]開啟連接時所發生的。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  id: WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同步版本<> *>，其符合提供的資料列中的狀態所提供的資料列複製到<xref href=&quot;System.Data.DataTable&quot;></xref>所指定的目的資料表<> *> 屬性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件。"
  remarks: "如需有關非同步程式設計中[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]，請參閱[進行非同步程式設計](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>其資料列會複製到目的資料表。"
    - id: rowState
      type: System.Data.DataRowState
      description: "中的值<xref href=&quot;System.Data.DataRowState&quot;></xref>列舉型別。 只有符合資料列狀態的資料列會複製到目的地。"
    return:
      type: System.Threading.Tasks.Task
      description: "表示非同步作業的工作。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "相同的執行個體，工作完成前呼叫 WriteToServerAsync 多次。       呼叫 WriteToServerAsync 和<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>工作完成前相同的執行個體。</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       卸除連接，或為 WriteToServerAsync 執行期間關閉。       傳回工作物件，在<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件方法執行期間已關閉。       工作物件中傳回，時發生連接集區逾時。       傳回工作物件，在<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>方法執行前已關閉的物件。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>指定連接字串中。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "所傳回工作物件中，傳回任何錯誤[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]開啟連接時所發生的。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同步版本<> *>，其中所有資料列複製到提供的<xref href=&quot;System.Data.DataTable&quot;></xref>所指定的目的資料表<> *> 屬性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件。       取消語彙基元可以用來要求此作業會放棄命令逾時之前捨棄。  例外狀況將經由傳回的 Task 物件回報。"
  remarks: "如需有關非同步程式設計中[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]，請參閱[進行非同步程式設計](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>其資料列會複製到目的資料表。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消指令。 A <> </> *> 中此參數的值會使這個方法相當於<> *>。"
    return:
      type: System.Threading.Tasks.Task
      description: "表示非同步作業的工作。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "呼叫<> *> 多次的工作完成前相同的執行個體。     呼叫<> *> 和<> *> 工作完成前相同的執行個體。     連接會卸除或關閉期間<> *> 執行。       傳回工作物件，在<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件方法執行期間已關閉。       工作物件中傳回，時發生連接集區逾時。       傳回工作物件，在<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>方法執行前已關閉的物件。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>指定連接字串中。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "所傳回工作物件中，傳回任何錯誤[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]開啟連接時所發生的。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(IDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同步版本<> *>，其中所有資料列複製到提供的<xref href=&quot;System.Data.IDataReader&quot;></xref>所指定的目的資料表<> *> 屬性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件。       取消語彙基元可以用來要求此作業會放棄命令逾時之前捨棄。  例外狀況將經由傳回的 Task 物件回報。"
  remarks: "如需有關非同步程式設計中[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]，請參閱[進行非同步程式設計](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "A <xref href=&quot;System.Data.IDataReader&quot;> </xref>其資料列會複製到目的資料表。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消指令。 A <> </> *> 中此參數的值會使這個方法相當於<> *>。"
    return:
      type: System.Threading.Tasks.Task
      description: "表示非同步作業的工作。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "呼叫<> *> 多次的工作完成前相同的執行個體。     呼叫<> *> 和<> *> 工作完成前相同的執行個體。     連接會卸除或關閉期間<> *> 執行。       傳回工作物件，在<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件方法執行期間已關閉。       工作物件中傳回，時發生連接集區逾時。       傳回工作物件，在<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>方法執行前已關閉的物件。       <xref href=&quot;System.Data.IDataReader&quot;> </xref>已關閉之前已完成<xref:System.Threading.Tasks.Task>傳回。</xref:System.Threading.Tasks.Task>       <xref href=&quot;System.Data.IDataReader&quot;></xref>的相關聯的連接已關閉，才能完成<xref:System.Threading.Tasks.Task>傳回。</xref:System.Threading.Tasks.Task>       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>指定連接字串中。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "所傳回工作物件中，傳回任何錯誤[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]開啟連接時所發生的。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同步版本<> *>，其符合提供的資料列中的狀態所提供的資料列複製到<xref href=&quot;System.Data.DataTable&quot;></xref>所指定的目的資料表<> *> 屬性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件。       取消語彙基元可以用來要求此作業會放棄命令逾時之前捨棄。  例外狀況將經由傳回的 Task 物件回報。"
  remarks: "如需有關非同步程式設計中[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]，請參閱[進行非同步程式設計](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>其資料列會複製到目的資料表。"
    - id: rowState
      type: System.Data.DataRowState
      description: "中的值<xref href=&quot;System.Data.DataRowState&quot;></xref>列舉型別。 只有符合資料列狀態的資料列會複製到目的地。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消指令。 A <> </> *> 中此參數的值會使這個方法相當於<> *>。"
    return:
      type: System.Threading.Tasks.Task
      description: "表示非同步作業的工作。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "呼叫<> *> 多次的工作完成前相同的執行個體。     呼叫<> *> 和<> *> 工作完成前相同的執行個體。     連接會卸除或關閉期間<> *> 執行。       傳回工作物件，在<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>物件方法執行期間已關閉。       工作物件中傳回，時發生連接集區逾時。       傳回工作物件，在<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>方法執行前已關閉的物件。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>指定連接字串中。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "所傳回工作物件中，傳回任何錯誤[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]開啟連接時所發生的。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.SqlClient.SqlException
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlException
  nameWithType: SqlException
  fullName: System.Data.SqlClient.SqlException
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(SqlConnection)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection)
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(String)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(String,SqlBulkCopyOptions)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
- uid: System.Data.SqlClient.SqlBulkCopyOptions
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlBulkCopyOptions
  nameWithType: SqlBulkCopyOptions
  fullName: System.Data.SqlClient.SqlBulkCopyOptions
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
- uid: System.Data.SqlClient.SqlTransaction
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlTransaction
  nameWithType: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BatchSize
  nameWithType: SqlBulkCopy.BatchSize
  fullName: System.Data.SqlClient.SqlBulkCopy.BatchSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BulkCopyTimeout
  nameWithType: SqlBulkCopy.BulkCopyTimeout
  fullName: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
- uid: System.Data.SqlClient.SqlBulkCopy.Close
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: Close()
  nameWithType: SqlBulkCopy.Close()
  fullName: System.Data.SqlClient.SqlBulkCopy.Close()
- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: ColumnMappings
  nameWithType: SqlBulkCopy.ColumnMappings
  fullName: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlBulkCopyColumnMappingCollection
  nameWithType: SqlBulkCopyColumnMappingCollection
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: DestinationTableName
  nameWithType: SqlBulkCopy.DestinationTableName
  fullName: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: EnableStreaming
  nameWithType: SqlBulkCopy.EnableStreaming
  fullName: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: NotifyAfter
  nameWithType: SqlBulkCopy.NotifyAfter
  fullName: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
- uid: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlRowsCopied
  nameWithType: SqlBulkCopy.SqlRowsCopied
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
- uid: System.Data.SqlClient.SqlRowsCopiedEventHandler
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlRowsCopiedEventHandler
  nameWithType: SqlRowsCopiedEventHandler
  fullName: System.Data.SqlClient.SqlRowsCopiedEventHandler
- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: System.IDisposable.Dispose()
  nameWithType: SqlBulkCopy.System.IDisposable.Dispose()
  fullName: System.Data.SqlClient.SqlBulkCopy.System.IDisposable.Dispose()
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DbDataReader)
- uid: System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: false
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServer(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataRow[])
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DataTable)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(IDataReader)
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable,DataRowState)
- uid: System.Data.DataRowState
  parent: System.Data
  isExternal: false
  name: DataRowState
  nameWithType: DataRowState
  fullName: System.Data.DataRowState
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[])
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DbDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataRow[],CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(IDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy
  nameWithType: SqlBulkCopy.SqlBulkCopy
- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BatchSize
  nameWithType: SqlBulkCopy.BatchSize
- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BulkCopyTimeout
  nameWithType: SqlBulkCopy.BulkCopyTimeout
- uid: System.Data.SqlClient.SqlBulkCopy.Close*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: Close
  nameWithType: SqlBulkCopy.Close
- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: ColumnMappings
  nameWithType: SqlBulkCopy.ColumnMappings
- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: DestinationTableName
  nameWithType: SqlBulkCopy.DestinationTableName
- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: EnableStreaming
  nameWithType: SqlBulkCopy.EnableStreaming
- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: NotifyAfter
  nameWithType: SqlBulkCopy.NotifyAfter
- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: System.IDisposable.Dispose
  nameWithType: SqlBulkCopy.System.IDisposable.Dispose
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer
  nameWithType: SqlBulkCopy.WriteToServer
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync
  nameWithType: SqlBulkCopy.WriteToServerAsync
