### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlNodeChangedEventArgs
  id: XmlNodeChangedEventArgs
  children:
  - System.Xml.XmlNodeChangedEventArgs.#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)
  - System.Xml.XmlNodeChangedEventArgs.Action
  - System.Xml.XmlNodeChangedEventArgs.NewParent
  - System.Xml.XmlNodeChangedEventArgs.NewValue
  - System.Xml.XmlNodeChangedEventArgs.Node
  - System.Xml.XmlNodeChangedEventArgs.OldParent
  - System.Xml.XmlNodeChangedEventArgs.OldValue
  langs:
  - csharp
  name: XmlNodeChangedEventArgs
  nameWithType: XmlNodeChangedEventArgs
  fullName: System.Xml.XmlNodeChangedEventArgs
  type: Class
  summary: "Provides data for the <xref href=&quot;System.Xml.XmlDocument.NodeChanged&quot;></xref>, <xref href=&quot;System.Xml.XmlDocument.NodeChanging&quot;></xref>, <xref href=&quot;System.Xml.XmlDocument.NodeInserted&quot;></xref>, <xref href=&quot;System.Xml.XmlDocument.NodeInserting&quot;></xref>, <xref href=&quot;System.Xml.XmlDocument.NodeRemoved&quot;></xref> and <xref href=&quot;System.Xml.XmlDocument.NodeRemoving&quot;></xref> events."
  remarks: "下列 C# 程式碼會示範如何使用事件處理常式。      ```   //Add a new event handler.   XmlDocument doc = new XmlDocument();   doc.NodeInserted += new XmlNodeChangedEventHandler(NodeInsertedHandler);   //Define the event handler.   void NodeInsertedHandler(Object src, XmlNodeChangedEventArgs args)   {    Console.WriteLine(&quot;Node &quot; + args.Node.Name + &quot; inserted!!&quot;);   }   ```      > [!NOTE]> 如果作業由多個動作所組成，它會導致多個事件。 例如，<xref:System.Xml.XmlNode.AppendChild%2A>呼叫可能必須移除先前父代所附加的節點。</xref:System.Xml.XmlNode.AppendChild%2A> 在此情況下，您會看到`NodeRemoved`事件後面`NodeInserted`事件。"
  syntax:
    content: 'public class XmlNodeChangedEventArgs : EventArgs'
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xml.XmlNodeChangedEventArgs.#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)
  id: '#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)'
  parent: System.Xml.XmlNodeChangedEventArgs
  langs:
  - csharp
  name: XmlNodeChangedEventArgs(XmlNode,XmlNode,XmlNode,String,String,XmlNodeChangedAction)
  nameWithType: XmlNodeChangedEventArgs.XmlNodeChangedEventArgs(XmlNode,XmlNode,XmlNode,String,String,XmlNodeChangedAction)
  fullName: System.Xml.XmlNodeChangedEventArgs.XmlNodeChangedEventArgs(XmlNode,XmlNode,XmlNode,String,String,XmlNodeChangedAction)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "初始化的新執行個體<xref href=&quot;System.Xml.XmlNodeChangedEventArgs&quot;></xref>類別。"
  syntax:
    content: public XmlNodeChangedEventArgs (System.Xml.XmlNode node, System.Xml.XmlNode oldParent, System.Xml.XmlNode newParent, string oldValue, string newValue, System.Xml.XmlNodeChangedAction action);
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>所產生的事件。"
    - id: oldParent
      type: System.Xml.XmlNode
      description: "舊的父代<xref href=&quot;System.Xml.XmlNode&quot;></xref>的<xref href=&quot;System.Xml.XmlNode&quot;></xref>所產生的事件。"
    - id: newParent
      type: System.Xml.XmlNode
      description: "新的父<xref href=&quot;System.Xml.XmlNode&quot;></xref>的<xref href=&quot;System.Xml.XmlNode&quot;></xref>所產生的事件。"
    - id: oldValue
      type: System.String
      description: "舊值<xref href=&quot;System.Xml.XmlNode&quot;></xref>所產生的事件。"
    - id: newValue
      type: System.String
      description: "新值<xref href=&quot;System.Xml.XmlNode&quot;></xref>所產生的事件。"
    - id: action
      type: System.Xml.XmlNodeChangedAction
      description: "The <xref href=&quot;System.Xml.XmlNodeChangedAction&quot;></xref>."
  overload: System.Xml.XmlNodeChangedEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlNodeChangedEventArgs.Action
  id: Action
  parent: System.Xml.XmlNodeChangedEventArgs
  langs:
  - csharp
  name: Action
  nameWithType: XmlNodeChangedEventArgs.Action
  fullName: System.Xml.XmlNodeChangedEventArgs.Action
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "取得值，指出發生何種節點變更事件。"
  syntax:
    content: public System.Xml.XmlNodeChangedAction Action { get; }
    return:
      type: System.Xml.XmlNodeChangedAction
      description: "<xref uid=&quot;langword_csharp_XmlNodeChangedAction&quot; name=&quot;XmlNodeChangedAction&quot; href=&quot;&quot;> </xref>描述節點的值變更事件。       <table><thead><tr><th> XmlNodeChangedAction 值       </th><th> 說明       </th></tr></thead><tbody><tr><td> 插入       </td><td> 已經過或將插入的節點。       </td></tr><tr><td> 移除       </td><td> 已經過或將會移除的節點。       </td></tr><tr><td> 變更       </td><td> 將變更或已經過的節點。       </td></tr></tbody></table><div class=&quot;alert NOTE&quot;>    <xref uid=&quot;langword_csharp_Action&quot; name=&quot;Action&quot; href=&quot;&quot;> </xref>值不會區分事件發生 （之前或之後）。 您可以建立個別的事件處理常式來處理兩個執行個體。      </div>"
  overload: System.Xml.XmlNodeChangedEventArgs.Action*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlNodeChangedEventArgs.NewParent
  id: NewParent
  parent: System.Xml.XmlNodeChangedEventArgs
  langs:
  - csharp
  name: NewParent
  nameWithType: XmlNodeChangedEventArgs.NewParent
  fullName: System.Xml.XmlNodeChangedEventArgs.NewParent
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "取得值<xref:System.Xml.XmlNode.ParentNode*>作業完成之後。</xref:System.Xml.XmlNode.ParentNode*>"
  syntax:
    content: public System.Xml.XmlNode NewParent { get; }
    return:
      type: System.Xml.XmlNode
      description: "值<xref uid=&quot;langword_csharp_ParentNode&quot; name=&quot;ParentNode&quot; href=&quot;&quot;></xref>作業完成之後。 這個屬性會傳回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果正在移除節點。       <div class=&quot;alert NOTE&quot;>    這個屬性會傳回<xref:System.Xml.XmlAttribute.OwnerElement*>.</xref:System.Xml.XmlAttribute.OwnerElement*>屬性節點      </div>"
  overload: System.Xml.XmlNodeChangedEventArgs.NewParent*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlNodeChangedEventArgs.NewValue
  id: NewValue
  parent: System.Xml.XmlNodeChangedEventArgs
  langs:
  - csharp
  name: NewValue
  nameWithType: XmlNodeChangedEventArgs.NewValue
  fullName: System.Xml.XmlNodeChangedEventArgs.NewValue
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "取得節點的新值。"
  syntax:
    content: public string NewValue { get; }
    return:
      type: System.String
      description: "新節點的值。 這個屬性會傳回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果節點是一個屬性都是文字節點，或如果正在移除節點。       如果呼叫<xref href=&quot;System.Xml.XmlDocument.NodeChanging&quot;></xref>事件， <xref uid=&quot;langword_csharp_NewValue&quot; name=&quot;NewValue&quot; href=&quot;&quot;> </xref>傳回節點的值，如果變更成功。 如果呼叫<xref href=&quot;System.Xml.XmlDocument.NodeChanged&quot;></xref>事件， <xref uid=&quot;langword_csharp_NewValue&quot; name=&quot;NewValue&quot; href=&quot;&quot;> </xref>傳回目前節點的值。"
  overload: System.Xml.XmlNodeChangedEventArgs.NewValue*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlNodeChangedEventArgs.Node
  id: Node
  parent: System.Xml.XmlNodeChangedEventArgs
  langs:
  - csharp
  name: Node
  nameWithType: XmlNodeChangedEventArgs.Node
  fullName: System.Xml.XmlNodeChangedEventArgs.Node
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "取得<xref href=&quot;System.Xml.XmlNode&quot;> </xref> ，新增、 移除或變更。"
  syntax:
    content: public System.Xml.XmlNode Node { get; }
    return:
      type: System.Xml.XmlNode
      description: "<xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;> </xref> ，新增、 移除或已變更，則這個屬性永遠不會傳回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.XmlNodeChangedEventArgs.Node*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlNodeChangedEventArgs.OldParent
  id: OldParent
  parent: System.Xml.XmlNodeChangedEventArgs
  langs:
  - csharp
  name: OldParent
  nameWithType: XmlNodeChangedEventArgs.OldParent
  fullName: System.Xml.XmlNodeChangedEventArgs.OldParent
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "取得值<xref:System.Xml.XmlNode.ParentNode*>作業開始之前。</xref:System.Xml.XmlNode.ParentNode*>"
  syntax:
    content: public System.Xml.XmlNode OldParent { get; }
    return:
      type: System.Xml.XmlNode
      description: "值<xref uid=&quot;langword_csharp_ParentNode&quot; name=&quot;ParentNode&quot; href=&quot;&quot;></xref>作業開始之前。 這個屬性會傳回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果節點沒有父代。       <div class=&quot;alert NOTE&quot;>    這個屬性會傳回<xref:System.Xml.XmlAttribute.OwnerElement*>.</xref:System.Xml.XmlAttribute.OwnerElement*>屬性節點      </div>"
  overload: System.Xml.XmlNodeChangedEventArgs.OldParent*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlNodeChangedEventArgs.OldValue
  id: OldValue
  parent: System.Xml.XmlNodeChangedEventArgs
  langs:
  - csharp
  name: OldValue
  nameWithType: XmlNodeChangedEventArgs.OldValue
  fullName: System.Xml.XmlNodeChangedEventArgs.OldValue
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "取得節點的原始值。"
  syntax:
    content: public string OldValue { get; }
    return:
      type: System.String
      description: "節點的原始值。 這個屬性會傳回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果節點是一個屬性都是文字節點，或在節點插入。       如果呼叫<xref href=&quot;System.Xml.XmlDocument.NodeChanging&quot;></xref>事件， <xref uid=&quot;langword_csharp_OldValue&quot; name=&quot;OldValue&quot; href=&quot;&quot;> </xref>傳回目前的值，如果這是成功的變更將會取代的節點。 如果呼叫<xref href=&quot;System.Xml.XmlDocument.NodeChanged&quot;></xref>事件， <xref uid=&quot;langword_csharp_OldValue&quot; name=&quot;OldValue&quot; href=&quot;&quot;> </xref>傳回節點的變更之前的值。"
  overload: System.Xml.XmlNodeChangedEventArgs.OldValue*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.Xml.XmlNodeChangedEventArgs.#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)
  parent: System.Xml.XmlNodeChangedEventArgs
  isExternal: false
  name: XmlNodeChangedEventArgs(XmlNode,XmlNode,XmlNode,String,String,XmlNodeChangedAction)
  nameWithType: XmlNodeChangedEventArgs.XmlNodeChangedEventArgs(XmlNode,XmlNode,XmlNode,String,String,XmlNodeChangedAction)
  fullName: System.Xml.XmlNodeChangedEventArgs.XmlNodeChangedEventArgs(XmlNode,XmlNode,XmlNode,String,String,XmlNodeChangedAction)
- uid: System.Xml.XmlNode
  parent: System.Xml
  isExternal: false
  name: XmlNode
  nameWithType: XmlNode
  fullName: System.Xml.XmlNode
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlNodeChangedAction
  parent: System.Xml
  isExternal: false
  name: XmlNodeChangedAction
  nameWithType: XmlNodeChangedAction
  fullName: System.Xml.XmlNodeChangedAction
- uid: System.Xml.XmlNodeChangedEventArgs.Action
  parent: System.Xml.XmlNodeChangedEventArgs
  isExternal: false
  name: Action
  nameWithType: XmlNodeChangedEventArgs.Action
  fullName: System.Xml.XmlNodeChangedEventArgs.Action
- uid: System.Xml.XmlNodeChangedEventArgs.NewParent
  parent: System.Xml.XmlNodeChangedEventArgs
  isExternal: false
  name: NewParent
  nameWithType: XmlNodeChangedEventArgs.NewParent
  fullName: System.Xml.XmlNodeChangedEventArgs.NewParent
- uid: System.Xml.XmlNodeChangedEventArgs.NewValue
  parent: System.Xml.XmlNodeChangedEventArgs
  isExternal: false
  name: NewValue
  nameWithType: XmlNodeChangedEventArgs.NewValue
  fullName: System.Xml.XmlNodeChangedEventArgs.NewValue
- uid: System.Xml.XmlNodeChangedEventArgs.Node
  parent: System.Xml.XmlNodeChangedEventArgs
  isExternal: false
  name: Node
  nameWithType: XmlNodeChangedEventArgs.Node
  fullName: System.Xml.XmlNodeChangedEventArgs.Node
- uid: System.Xml.XmlNodeChangedEventArgs.OldParent
  parent: System.Xml.XmlNodeChangedEventArgs
  isExternal: false
  name: OldParent
  nameWithType: XmlNodeChangedEventArgs.OldParent
  fullName: System.Xml.XmlNodeChangedEventArgs.OldParent
- uid: System.Xml.XmlNodeChangedEventArgs.OldValue
  parent: System.Xml.XmlNodeChangedEventArgs
  isExternal: false
  name: OldValue
  nameWithType: XmlNodeChangedEventArgs.OldValue
  fullName: System.Xml.XmlNodeChangedEventArgs.OldValue
- uid: System.Xml.XmlNodeChangedEventArgs.#ctor*
  parent: System.Xml.XmlNodeChangedEventArgs
  isExternal: false
  name: XmlNodeChangedEventArgs
  nameWithType: XmlNodeChangedEventArgs.XmlNodeChangedEventArgs
- uid: System.Xml.XmlNodeChangedEventArgs.Action*
  parent: System.Xml.XmlNodeChangedEventArgs
  isExternal: false
  name: Action
  nameWithType: XmlNodeChangedEventArgs.Action
- uid: System.Xml.XmlNodeChangedEventArgs.NewParent*
  parent: System.Xml.XmlNodeChangedEventArgs
  isExternal: false
  name: NewParent
  nameWithType: XmlNodeChangedEventArgs.NewParent
- uid: System.Xml.XmlNodeChangedEventArgs.NewValue*
  parent: System.Xml.XmlNodeChangedEventArgs
  isExternal: false
  name: NewValue
  nameWithType: XmlNodeChangedEventArgs.NewValue
- uid: System.Xml.XmlNodeChangedEventArgs.Node*
  parent: System.Xml.XmlNodeChangedEventArgs
  isExternal: false
  name: Node
  nameWithType: XmlNodeChangedEventArgs.Node
- uid: System.Xml.XmlNodeChangedEventArgs.OldParent*
  parent: System.Xml.XmlNodeChangedEventArgs
  isExternal: false
  name: OldParent
  nameWithType: XmlNodeChangedEventArgs.OldParent
- uid: System.Xml.XmlNodeChangedEventArgs.OldValue*
  parent: System.Xml.XmlNodeChangedEventArgs
  isExternal: false
  name: OldValue
  nameWithType: XmlNodeChangedEventArgs.OldValue
