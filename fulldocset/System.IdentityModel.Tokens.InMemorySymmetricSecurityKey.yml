### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  id: InMemorySymmetricSecurityKey
  children:
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
  langs:
  - csharp
  name: InMemorySymmetricSecurityKey
  nameWithType: InMemorySymmetricSecurityKey
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  type: Class
  summary: "表示使用對稱演算法所產生，只會儲存在本機電腦的隨機存取記憶體中的索引鍵。"
  remarks: "一般而言，這個類別是只有基礎結構用來轉換使用對稱金鑰的 XML。"
  syntax:
    content: 'public class InMemorySymmetricSecurityKey : System.IdentityModel.Tokens.SymmetricSecurityKey'
  inheritance:
  - System.Object
  - System.IdentityModel.Tokens.SecurityKey
  - System.IdentityModel.Tokens.SymmetricSecurityKey
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: InMemorySymmetricSecurityKey(Byte[])
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "初始化的新執行個體<xref href=&quot;System.IdentityModel.Tokens.InMemorySymmetricSecurityKey&quot;></xref>類別使用指定的對稱金鑰。"
  syntax:
    content: public InMemorySymmetricSecurityKey (byte[] symmetricKey);
    parameters:
    - id: symmetricKey
      type: System.Byte[]
      description: "陣列<xref:System.Byte>，其中包含對稱金鑰。</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>symmetricKey</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>symmetricKey</code>長度為零。"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)
  id: '#ctor(System.Byte[],System.Boolean)'
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: InMemorySymmetricSecurityKey(Byte[],Boolean)
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[],Boolean)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[],Boolean)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "初始化的新執行個體<xref href=&quot;System.IdentityModel.Tokens.InMemorySymmetricSecurityKey&quot;></xref>類別使用指定的對稱金鑰和值，指出是否必須複製二進位資料。"
  syntax:
    content: public InMemorySymmetricSecurityKey (byte[] symmetricKey, bool cloneBuffer);
    parameters:
    - id: symmetricKey
      type: System.Byte[]
      description: "陣列<xref:System.Byte>，其中包含對稱金鑰。</xref:System.Byte>"
    - id: cloneBuffer
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要複製的陣列傳遞至`symmetricKey`參數，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>symmetricKey</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>symmetricKey</code>長度為零。"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])
  id: DecryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: DecryptKey(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.DecryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "解密指定的加密的金鑰。"
  remarks: "使用的靜態欄位<xref:System.IdentityModel.Tokens.SecurityAlgorithms>類別，即可指定演算法。</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public override byte[] DecryptKey (string algorithm, byte[] keyData);
    parameters:
    - id: algorithm
      type: System.String
      description: "用來加密金鑰的密碼編譯演算法。"
    - id: keyData
      type: System.Byte[]
      description: "陣列<xref:System.Byte>包含加密的金鑰。</xref:System.Byte>"
    return:
      type: System.Byte[]
      description: "陣列<xref:System.Byte>包含解密的金鑰。</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>不支援。 The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap&quot;></xref>, and <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])
  id: EncryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: EncryptKey(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.EncryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "加密指定之索引鍵。"
  remarks: "使用的靜態欄位<xref:System.IdentityModel.Tokens.SecurityAlgorithms>類別，即可指定演算法。</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public override byte[] EncryptKey (string algorithm, byte[] keyData);
    parameters:
    - id: algorithm
      type: System.String
      description: "要加密與金鑰的密碼編譯演算法。"
    - id: keyData
      type: System.Byte[]
      description: "陣列<xref:System.Byte>包含金鑰。</xref:System.Byte>"
    return:
      type: System.Byte[]
      description: "陣列<xref:System.Byte>包含加密的金鑰。</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>不支援。 The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap&quot;></xref>, or <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  id: GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  nameWithType: InMemorySymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "產生衍生的金鑰目前機碼中使用指定密碼編譯演算法和參數。"
  remarks: "若要指定 p-sha1 做為密碼編譯演算法，請使用<xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>欄位。</xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>"
  syntax:
    content: public override byte[] GenerateDerivedKey (string algorithm, byte[] label, byte[] nonce, int derivedKeyLength, int offset);
    parameters:
    - id: algorithm
      type: System.String
      description: "表示要用來產生衍生的金鑰的密碼編譯演算法的 URI。"
    - id: label
      type: System.Byte[]
      description: "陣列<xref:System.Byte>包含密碼編譯演算法的標籤參數。</xref:System.Byte>"
    - id: nonce
      type: System.Byte[]
      description: "陣列<xref:System.Byte>其中包含用來建立衍生的金鑰的 nonce。</xref:System.Byte>"
    - id: derivedKeyLength
      type: System.Int32
      description: "衍生金鑰的大小。"
    - id: offset
      type: System.Int32
      description: "衍生的金鑰位從這個方法會傳回位元組陣列中的位置。"
    return:
      type: System.Byte[]
      description: "陣列<xref:System.Byte>，其中包含衍生的金鑰。</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>不支援。 支援的演算法是<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation&quot;> </xref>。"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])
  id: GetDecryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetDecryptionTransform(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得轉換轉換解密加密文字時，使用指定的密碼編譯演算法。"
  remarks: "使用代表解密演算法中的欄位<xref:System.IdentityModel.Tokens.SecurityAlgorithms>類別，即可指定演算法。</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public override System.Security.Cryptography.ICryptoTransform GetDecryptionTransform (string algorithm, byte[] iv);
    parameters:
    - id: algorithm
      type: System.String
      description: "密碼編譯演算法，解密加密文字，例如加密的 XML。"
    - id: iv
      type: System.Byte[]
      description: "陣列<xref:System.Byte>，其中包含的初始化向量 (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>) 針對指定的演算法。</xref:System.Byte>"
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "<xref href=&quot;System.Security.Cryptography.ICryptoTransform&quot;> </xref>表示解密轉換。"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>不支援。 The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption&quot;></xref>, and <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])
  id: GetEncryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetEncryptionTransform(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得加密使用指定的密碼編譯演算法的 XML 的轉換。"
  remarks: "使用表示中的加密演算法的欄位<xref:System.IdentityModel.Tokens.SecurityAlgorithms>類別，即可指定演算法。</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public override System.Security.Cryptography.ICryptoTransform GetEncryptionTransform (string algorithm, byte[] iv);
    parameters:
    - id: algorithm
      type: System.String
      description: "密碼編譯演算法，加密 XML。"
    - id: iv
      type: System.Byte[]
      description: "陣列<xref:System.Byte>，其中包含的初始化向量 (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>) 針對指定的演算法。</xref:System.Byte>"
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "<xref href=&quot;System.Security.Cryptography.ICryptoTransform&quot;> </xref>表示加密轉換。"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>不支援。 The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption&quot;></xref>, and <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)
  id: GetIVSize(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetIVSize(String)
  nameWithType: InMemorySymmetricSecurityKey.GetIVSize(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得大小，以位元為單位的初始化向量 (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>)，並在需要針對指定的密碼編譯演算法。"
  remarks: "使用表示中的加密演算法的欄位<xref:System.IdentityModel.Tokens.SecurityAlgorithms>類別，即可指定演算法。</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public override int GetIVSize (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "若要取得的初始化向量大小的密碼編譯演算法 (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>)。"
    return:
      type: System.Int32
      description: "大小，以位元為單位的初始化向量 (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>)，並在需要針對在指定的密碼編譯演算法<code> algorithm </code>參數。"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>不支援。 The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption&quot;></xref>, and <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)
  id: GetKeyedHashAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetKeyedHashAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得指定索引雜湊演算法的執行個體。"
  syntax:
    content: public override System.Security.Cryptography.KeyedHashAlgorithm GetKeyedHashAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "要取得的執行個體的金鑰雜湊演算法。"
    return:
      type: System.Security.Cryptography.KeyedHashAlgorithm
      description: "A <xref href=&quot;System.Security.Cryptography.KeyedHashAlgorithm&quot;> </xref>表示索引雜湊演算法。"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>不支援。 支援的演算法是<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature&quot;> </xref>。"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)
  id: GetSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetSymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得指定的對稱演算法的執行個體。"
  syntax:
    content: public override System.Security.Cryptography.SymmetricAlgorithm GetSymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "要取得的執行個體的對稱演算法。"
    return:
      type: System.Security.Cryptography.SymmetricAlgorithm
      description: "A <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;> </xref>表示對稱演算法。"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>不支援。 The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption&quot;></xref>,  <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap&quot;></xref>, and<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap&quot;></xref>"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey
  id: GetSymmetricKey
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetSymmetricKey()
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricKey()
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得表示對稱金鑰的位元組。"
  syntax:
    content: public override byte[] GetSymmetricKey ();
    parameters: []
    return:
      type: System.Byte[]
      description: "陣列<xref:System.Byte>，其中包含對稱金鑰。</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)
  id: IsAsymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: IsAsymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得值，指出指定的演算法是否會使用非對稱金鑰。"
  syntax:
    content: public override bool IsAsymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "密碼編譯演算法。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的演算法會使用非對稱金鑰。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)
  id: IsSupportedAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: IsSupportedAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得值，指出這個類別是否支援指定的演算法。"
  remarks: "這個類別所支援的對稱演算法是由下列欄位的演算法:- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap></xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature>"
  syntax:
    content: public override bool IsSupportedAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "密碼編譯演算法。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>此類別; 事件類別支援指定的演算法時，否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)
  id: IsSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: IsSymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得值，指出指定的演算法是否會使用對稱金鑰。"
  syntax:
    content: public override bool IsSymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "密碼編譯演算法。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>當指定的演算法會使用對稱金鑰。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
  id: KeySize
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: KeySize
  nameWithType: InMemorySymmetricSecurityKey.KeySize
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得大小，以位元的金鑰。"
  syntax:
    content: public override int KeySize { get; }
    return:
      type: System.Int32
      description: "位元金鑰的大小。"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: System.IdentityModel.Tokens.SymmetricSecurityKey
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: InMemorySymmetricSecurityKey(Byte[])
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: InMemorySymmetricSecurityKey(Byte[],Boolean)
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[],Boolean)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[],Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: DecryptKey(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.DecryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(String,Byte[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: EncryptKey(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.EncryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(String,Byte[])
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  nameWithType: InMemorySymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetDecryptionTransform(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetEncryptionTransform(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetIVSize(String)
  nameWithType: InMemorySymmetricSecurityKey.GetIVSize(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(String)
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetKeyedHashAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)
- uid: System.Security.Cryptography.KeyedHashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: KeyedHashAlgorithm
  nameWithType: KeyedHashAlgorithm
  fullName: System.Security.Cryptography.KeyedHashAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetSymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)
- uid: System.Security.Cryptography.SymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: SymmetricAlgorithm
  nameWithType: SymmetricAlgorithm
  fullName: System.Security.Cryptography.SymmetricAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetSymmetricKey()
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricKey()
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey()
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsAsymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsSupportedAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsSymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: KeySize
  nameWithType: InMemorySymmetricSecurityKey.KeySize
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: InMemorySymmetricSecurityKey
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: DecryptKey
  nameWithType: InMemorySymmetricSecurityKey.DecryptKey
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: EncryptKey
  nameWithType: InMemorySymmetricSecurityKey.EncryptKey
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GenerateDerivedKey
  nameWithType: InMemorySymmetricSecurityKey.GenerateDerivedKey
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetDecryptionTransform
  nameWithType: InMemorySymmetricSecurityKey.GetDecryptionTransform
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetEncryptionTransform
  nameWithType: InMemorySymmetricSecurityKey.GetEncryptionTransform
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetIVSize
  nameWithType: InMemorySymmetricSecurityKey.GetIVSize
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetKeyedHashAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetSymmetricAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetSymmetricKey
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricKey
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsAsymmetricAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsSupportedAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.IsSupportedAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsSymmetricAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: KeySize
  nameWithType: InMemorySymmetricSecurityKey.KeySize
