### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.TypeDescriptionProvider
  id: TypeDescriptionProvider
  children:
  - System.ComponentModel.TypeDescriptionProvider.#ctor
  - System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)
  - System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  - System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)
  - System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)
  - System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)
  - System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)
  - System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)
  langs:
  - csharp
  name: TypeDescriptionProvider
  nameWithType: TypeDescriptionProvider
  fullName: System.ComponentModel.TypeDescriptionProvider
  type: Class
  summary: "提供補充的中繼資料給<xref href=&quot;System.ComponentModel.TypeDescriptor&quot;> </xref>。"
  remarks: "TypeDescriptionProvider 類別以動態方式延伸新增、 修改或隱藏特性，例如屬性、 屬性和事件類型或物件與相關聯的類型資訊。 可以有多個類型描述提供者的類別提供中繼資料至單一<xref:System.ComponentModel.TypeDescriptor>.</xref:System.ComponentModel.TypeDescriptor>       有兩種方式將與 TypeDescriptionProvider <xref:System.ComponentModel.TypeDescriptor>:-在設計階段，當目標類別可以指派適當<xref:System.ComponentModel.TypeDescriptionProviderAttribute>標記。</xref:System.ComponentModel.TypeDescriptionProviderAttribute> </xref:System.ComponentModel.TypeDescriptor>      -在執行階段，當一的<xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>方法<xref:System.ComponentModel.TypeDescriptor>可以呼叫類別。</xref:System.ComponentModel.TypeDescriptor> </xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> 這些多載的方法需要目標物件或其類別類型。       TypeDescriptionProvider 類別必須使用相同的類型，在建構期間提供的父物件。 這可讓類別衍生自<xref:System.ComponentModel.CustomTypeDescriptor>選擇性地覆寫的方法。</xref:System.ComponentModel.CustomTypeDescriptor>       TypeDescriptionProvider 的執行個體只會建置在需求，自訂型別資訊，對效能的影響降到最低。       這個類別無法被繼承。"
  syntax:
    content: public abstract class TypeDescriptionProvider
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor
  id: '#ctor'
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: TypeDescriptionProvider()
  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider()
  fullName: System.ComponentModel.TypeDescriptionProvider.TypeDescriptionProvider()
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "初始化的新執行個體<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref>類別。"
  remarks: "這個建構函式相當於呼叫其他<xref:System.ComponentModel.TypeDescriptionProvider.%23ctor%28System.ComponentModel.TypeDescriptionProvider%29>建構函式的參數值與`null`。</xref:System.ComponentModel.TypeDescriptionProvider.%23ctor%28System.ComponentModel.TypeDescriptionProvider%29>"
  syntax:
    content: protected TypeDescriptionProvider ();
    parameters: []
  overload: System.ComponentModel.TypeDescriptionProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)
  id: '#ctor(System.ComponentModel.TypeDescriptionProvider)'
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: TypeDescriptionProvider(TypeDescriptionProvider)
  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider(TypeDescriptionProvider)
  fullName: System.ComponentModel.TypeDescriptionProvider.TypeDescriptionProvider(TypeDescriptionProvider)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "初始化的新執行個體<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref>類別使用的父類型描述提供者。"
  remarks: "如果`parent`參數是`null`，則所有<xref:System.ComponentModel.TypeDescriptionProvider>方法會傳回預設值。</xref:System.ComponentModel.TypeDescriptionProvider> 否則，所有<xref:System.ComponentModel.TypeDescriptionProvider>方法會將委派的方法`parent`。</xref:System.ComponentModel.TypeDescriptionProvider>       下表顯示的預設傳回值<xref:System.ComponentModel.TypeDescriptionProvider>方法。</xref:System.ComponentModel.TypeDescriptionProvider>      |方法 |預設傳回值 |  |------------|--------------------------|  |<xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A>|`null`|  |<xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A>|新建立的物件，用來<xref:System.Activator.CreateInstance%2A>方法的呼叫。 |  |<xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A>|<xref:System.ComponentModel.CustomTypeDescriptor>類別的預設執行個體。 |  |<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>|<xref:System.ComponentModel.CustomTypeDescriptor>類別的預設執行個體。 |  |<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>|`objectType`第一個參數。 |</xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> </xref:System.ComponentModel.CustomTypeDescriptor> </xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> </xref:System.ComponentModel.CustomTypeDescriptor> </xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> </xref:System.Activator.CreateInstance%2A> </xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A> </xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A>"
  syntax:
    content: protected TypeDescriptionProvider (System.ComponentModel.TypeDescriptionProvider parent);
    parameters:
    - id: parent
      type: System.ComponentModel.TypeDescriptionProvider
      description: "父類型描述提供者。"
  overload: System.ComponentModel.TypeDescriptionProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  id: CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: CreateInstance(IServiceProvider,Type,Type[],Object[])
  nameWithType: TypeDescriptionProvider.CreateInstance(IServiceProvider,Type,Type[],Object[])
  fullName: System.ComponentModel.TypeDescriptionProvider.CreateInstance(IServiceProvider,Type,Type[],Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "建立可以代替另一種資料類型的物件。"
  remarks: "<xref:System.IServiceProvider>所指定`provider`<xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A?displayProperty=fullName><xref:System.ComponentModel.TypeDescriptor>類別</xref:System.ComponentModel.TypeDescriptor>的方法</xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A?displayProperty=fullName>傳入參數</xref:System.IServiceProvider> 如果`provider`不`null`，以取得有關建立呼叫的其他內容類型描述提供者可以使用服務提供者。       CreateInstance 方法`virtual`，根據預設，會傳回的結果<xref:System.Activator.CreateInstance%2A?displayProperty=fullName>方法如果`provider`是`null`。</xref:System.Activator.CreateInstance%2A?displayProperty=fullName> 如果`provider`是`null`，這個方法會叫用父提供者的 CreateInstance 方法。"
  syntax:
    content: public virtual object CreateInstance (IServiceProvider provider, Type objectType, Type[] argTypes, object[] args);
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "選擇性的服務提供者。"
    - id: objectType
      type: System.Type
      description: "若要建立的物件類型。 這個參數是從未<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: argTypes
      type: System.Type[]
      description: "選擇性的型別，代表要傳遞給物件的建構函式的參數類型的陣列。 這個陣列可<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或是長度為零。"
    - id: args
      type: System.Object[]
      description: "選擇性的要傳遞至物件的建構函式的參數值的陣列。"
    return:
      type: System.Object
      description: "替代<xref:System.Object>.</xref:System.Object>"
  overload: System.ComponentModel.TypeDescriptionProvider.CreateInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)
  id: GetCache(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetCache(Object)
  nameWithType: TypeDescriptionProvider.GetCache(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetCache(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "取得每個物件的快取，以存取<xref:System.Collections.IDictionary>索引鍵/值組。</xref:System.Collections.IDictionary>"
  remarks: "A<xref:System.ComponentModel.TypeDescriptor>可能需要執行複雜的作業，對中繼資料集合。</xref:System.ComponentModel.TypeDescriptor> 因為型別並未加入網域的存留期間卸載<xref:System.ComponentModel.TypeDescriptor>類別將會自動快取類型為根據這些作業的結果。</xref:System.ComponentModel.TypeDescriptor> 不過，某些作業使用即時物件執行個體。 這些作業就無法快取內<xref:System.ComponentModel.TypeDescriptor>類別，因為快取它們會防止物件被記憶體回收。</xref:System.ComponentModel.TypeDescriptor> 相反地，<xref:System.ComponentModel.TypeDescriptor>類別可讓每個物件的快取，以存取<xref:System.Collections.IDictionary>的物件上存在的索引鍵/值組。</xref:System.Collections.IDictionary> </xref:System.ComponentModel.TypeDescriptor> GetCache 方法會傳回此快取的執行個體。 GetCache 方法會傳回`null`如果沒有任何支援的快取中的物件。       預設值<xref:System.ComponentModel.TypeDescriptionProvider>供<xref:System.ComponentModel.TypeDescriptor>會檢查物件是否實作站台的元件<xref:System.ComponentModel.Design.IDictionaryService>介面。</xref:System.ComponentModel.Design.IDictionaryService> </xref:System.ComponentModel.TypeDescriptor> </xref:System.ComponentModel.TypeDescriptionProvider> 如果物件是，它會使用字典服務物件的快取儲存。 否則，該物件會傳回`null`。 其他類型描述提供者可能會提供自己的實作。 例如，相依性物件只可以附加<xref:System.Collections.IDictionary>.</xref:System.Collections.IDictionary>類型的屬性"
  syntax:
    content: public virtual System.Collections.IDictionary GetCache (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "要取得快取物件。"
    return:
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>如果所提供的物件支援快取; 否則<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Collections.IDictionary>"
  overload: System.ComponentModel.TypeDescriptionProvider.GetCache*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  id: GetExtendedTypeDescriptor(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetExtendedTypeDescriptor(Object)
  nameWithType: TypeDescriptionProvider.GetExtendedTypeDescriptor(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "取得指定物件的擴充的自訂類型描述元。"
  remarks: "擴充的類型描述元是的提供內容的其他物件加入至這個物件，但不會實際物件定義的自訂類型描述元。 例如，在[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]元件模型物件會實作<xref:System.ComponentModel.IExtenderProvider>介面可以附加至相同的邏輯容器中其他物件的屬性。</xref:System.ComponentModel.IExtenderProvider> 多載<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>方法不會傳回型別描述項會提供這些額外的擴充屬性。</xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> GetExtendedTypeDescriptor 方法會傳回這些延伸屬性的集合。 <xref:System.ComponentModel.TypeDescriptor>就會自動合併這些兩個屬性集合的結果。</xref:System.ComponentModel.TypeDescriptor> 雖然[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]元件模型支援僅擴充的屬性、 GetExtendedTypeDescriptor 可用於擴充的屬性，以及事件，如果類型描述提供者支援它。       GetExtendedTypeDescriptor 是`virtual`，根據預設，會傳回傳回空的結果，如果沒有父提供者傳遞自訂類型描述元。 如果父提供者已通過，則這個方法會叫用父提供者的 GetExtendedTypeDescriptor 方法。"
  syntax:
    content: public virtual System.ComponentModel.ICustomTypeDescriptor GetExtendedTypeDescriptor (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "要取得延伸的型別描述元物件。"
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
      description: "<xref href=&quot;System.ComponentModel.ICustomTypeDescriptor&quot;> </xref>可以提供擴充中繼資料的物件。"
  overload: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)
  id: GetExtenderProviders(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetExtenderProviders(Object)
  nameWithType: TypeDescriptionProvider.GetExtenderProviders(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "取得指定之物件的擴充性提供者。"
  syntax:
    content: protected virtual System.ComponentModel.IExtenderProvider[] GetExtenderProviders (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "要取得的擴充性提供者的物件。"
    return:
      type: System.ComponentModel.IExtenderProvider[]
      description: "針對擴充性提供者的陣列<code> instance </code>。"
  overload: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
  id: GetFullComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetFullComponentName(Object)
  nameWithType: TypeDescriptionProvider.GetFullComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "取得指定的元件名稱或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果元件有沒有名稱。"
  syntax:
    content: public virtual string GetFullComponentName (object component);
    parameters:
    - id: component
      type: System.Object
      description: "指定的元件。"
    return:
      type: System.String
      description: "指定元件的名稱。"
  overload: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)
  id: GetReflectionType(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetReflectionType(Object)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "執行一般反映對指定的物件。"
  remarks: "<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>方法是較低層級版本的<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>方法。</xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> </xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> 如果沒有自訂類型描述元可以找到物件，<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>呼叫以執行一般反映的物件。</xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>       如果已呼叫會使用執行個體，而不是類型的型別描述元成員，請使用這個方法多載。"
  syntax:
    content: public Type GetReflectionType (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "類型的執行個體 (不應該<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>)。"
    return:
      type: System.Type
      description: "反映的這種<code> instance </code>。"
  overload: System.ComponentModel.TypeDescriptionProvider.GetReflectionType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)
  id: GetReflectionType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetReflectionType(Type)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "對執行一般反映型別。"
  remarks: "<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>方法是較低層級版本的<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>方法。</xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> </xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> 如果沒有自訂類型描述元可以找到物件，<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>呼叫以執行一般反映的物件。</xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>       如果已呼叫類型描述元成員使用類型，而不是執行個體，請使用這個方法多載。"
  syntax:
    content: public Type GetReflectionType (Type objectType);
    parameters:
    - id: objectType
      type: System.Type
      description: "要擷取的物件型別<xref href=&quot;System.Reflection.IReflect&quot;> </xref>。"
    return:
      type: System.Type
      description: "反映的這種<code> objectType </code>。"
  overload: System.ComponentModel.TypeDescriptionProvider.GetReflectionType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>objectType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)
  id: GetReflectionType(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetReflectionType(Type,Object)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Type,Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "執行給定的物件具有給定類型的一般反映。"
  remarks: "<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>方法是較低層級版本的<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>方法。</xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> </xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> 如果沒有自訂類型描述元可以找到物件，<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>呼叫以執行一般反映的物件。</xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>"
  syntax:
    content: public virtual Type GetReflectionType (Type objectType, object instance);
    parameters:
    - id: objectType
      type: System.Type
      description: "要擷取的物件型別<xref href=&quot;System.Reflection.IReflect&quot;> </xref>。"
    - id: instance
      type: System.Object
      description: "類型的執行個體。 Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Type
      description: "反映的這種<code> objectType </code>。"
  overload: System.ComponentModel.TypeDescriptionProvider.GetReflectionType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)
  id: GetRuntimeType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetRuntimeType(Type)
  nameWithType: TypeDescriptionProvider.GetRuntimeType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "將反映型別轉換成執行階段型別。"
  remarks: "GetRuntimeType 方法會回復<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>方法，以反映類型轉換回執行階段型別。</xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> 使用 GetRuntimeType 方法更為優先使用<xref:System.Type.UnderlyingSystemType%2A>屬性，已在舊版本中用來傳回執行階段型別。</xref:System.Type.UnderlyingSystemType%2A>"
  syntax:
    content: public virtual Type GetRuntimeType (Type reflectionType);
    parameters:
    - id: reflectionType
      type: System.Type
      description: "要轉換成其對等的執行階段的類型。"
    return:
      type: System.Type
      description: "A <xref:System.Type>，代表執行階段相當於<code> reflectionType </code>。</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reflectionType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  id: GetTypeDescriptor(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetTypeDescriptor(Object)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "取得指定之物件的自訂類型描述元。"
  syntax:
    content: public System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "類型的執行個體。 可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果沒有任何執行個體傳遞給<xref href=&quot;System.ComponentModel.TypeDescriptor&quot;> </xref>。"
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
      description: "<xref href=&quot;System.ComponentModel.ICustomTypeDescriptor&quot;> </xref>可以提供中繼資料的類型。"
  overload: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)
  id: GetTypeDescriptor(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetTypeDescriptor(Type)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "取得指定類型的自訂類型描述元。"
  syntax:
    content: public System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (Type objectType);
    parameters:
    - id: objectType
      type: System.Type
      description: "要擷取的類型描述元的物件類型。"
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
      description: "<xref href=&quot;System.ComponentModel.ICustomTypeDescriptor&quot;> </xref>可以提供中繼資料的類型。"
  overload: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)
  id: GetTypeDescriptor(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetTypeDescriptor(Type,Object)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Type,Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "取得指定型別和物件的自訂類型描述元。"
  remarks: "這個方法是做為原型`virtual`，根據預設，會傳回空的描述元如果沒有父提供者傳遞。 如果父提供者已通過，則這個方法會叫用父提供者的 GetTypeDescriptor 方法。"
  syntax:
    content: public virtual System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (Type objectType, object instance);
    parameters:
    - id: objectType
      type: System.Type
      description: "要擷取的類型描述元的物件類型。"
    - id: instance
      type: System.Object
      description: "類型的執行個體。 可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果沒有任何執行個體傳遞給<xref href=&quot;System.ComponentModel.TypeDescriptor&quot;> </xref>。"
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
      description: "<xref href=&quot;System.ComponentModel.ICustomTypeDescriptor&quot;> </xref>可以提供中繼資料的類型。"
  overload: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)
  id: IsSupportedType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: IsSupportedType(Type)
  nameWithType: TypeDescriptionProvider.IsSupportedType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.IsSupportedType(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "取得值，指出指定的類型是否相容的類型描述與它的類型描述提供者的鏈結。"
  syntax:
    content: public virtual bool IsSupportedType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "若要測試的相容性類型。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> type </code>相容的類型描述與它的類型描述提供者的鏈結，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.TypeDescriptionProvider.IsSupportedType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: TypeDescriptionProvider()
  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider()
  fullName: System.ComponentModel.TypeDescriptionProvider.TypeDescriptionProvider()
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: TypeDescriptionProvider(TypeDescriptionProvider)
  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider(TypeDescriptionProvider)
  fullName: System.ComponentModel.TypeDescriptionProvider.TypeDescriptionProvider(TypeDescriptionProvider)
- uid: System.ComponentModel.TypeDescriptionProvider
  parent: System.ComponentModel
  isExternal: false
  name: TypeDescriptionProvider
  nameWithType: TypeDescriptionProvider
  fullName: System.ComponentModel.TypeDescriptionProvider
- uid: System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: CreateInstance(IServiceProvider,Type,Type[],Object[])
  nameWithType: TypeDescriptionProvider.CreateInstance(IServiceProvider,Type,Type[],Object[])
  fullName: System.ComponentModel.TypeDescriptionProvider.CreateInstance(IServiceProvider,Type,Type[],Object[])
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetCache(Object)
  nameWithType: TypeDescriptionProvider.GetCache(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetCache(Object)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetExtendedTypeDescriptor(Object)
  nameWithType: TypeDescriptionProvider.GetExtendedTypeDescriptor(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(Object)
- uid: System.ComponentModel.ICustomTypeDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: ICustomTypeDescriptor
  nameWithType: ICustomTypeDescriptor
  fullName: System.ComponentModel.ICustomTypeDescriptor
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetExtenderProviders(Object)
  nameWithType: TypeDescriptionProvider.GetExtenderProviders(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(Object)
- uid: System.ComponentModel.IExtenderProvider[]
  parent: System.ComponentModel
  isExternal: false
  name: IExtenderProvider
  nameWithType: IExtenderProvider
  fullName: System.ComponentModel.IExtenderProvider[]
  spec.csharp:
  - uid: System.ComponentModel.IExtenderProvider
    name: IExtenderProvider
    nameWithType: IExtenderProvider
    fullName: IExtenderProvider[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetFullComponentName(Object)
  nameWithType: TypeDescriptionProvider.GetFullComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetReflectionType(Object)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Object)
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetReflectionType(Type)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Type)
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetReflectionType(Type,Object)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Type,Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Type,Object)
- uid: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetRuntimeType(Type)
  nameWithType: TypeDescriptionProvider.GetRuntimeType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(Type)
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetTypeDescriptor(Object)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Object)
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetTypeDescriptor(Type)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Type)
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetTypeDescriptor(Type,Object)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Type,Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Type,Object)
- uid: System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: IsSupportedType(Type)
  nameWithType: TypeDescriptionProvider.IsSupportedType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.IsSupportedType(Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: TypeDescriptionProvider
  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider
- uid: System.ComponentModel.TypeDescriptionProvider.CreateInstance*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: CreateInstance
  nameWithType: TypeDescriptionProvider.CreateInstance
- uid: System.ComponentModel.TypeDescriptionProvider.GetCache*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetCache
  nameWithType: TypeDescriptionProvider.GetCache
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetExtendedTypeDescriptor
  nameWithType: TypeDescriptionProvider.GetExtendedTypeDescriptor
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetExtenderProviders
  nameWithType: TypeDescriptionProvider.GetExtenderProviders
- uid: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetFullComponentName
  nameWithType: TypeDescriptionProvider.GetFullComponentName
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetReflectionType
  nameWithType: TypeDescriptionProvider.GetReflectionType
- uid: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetRuntimeType
  nameWithType: TypeDescriptionProvider.GetRuntimeType
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetTypeDescriptor
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor
- uid: System.ComponentModel.TypeDescriptionProvider.IsSupportedType*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: IsSupportedType
  nameWithType: TypeDescriptionProvider.IsSupportedType
