### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.NativeWindow
  id: NativeWindow
  children:
  - System.Windows.Forms.NativeWindow.#ctor
  - System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)
  - System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)
  - System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)
  - System.Windows.Forms.NativeWindow.DestroyHandle
  - System.Windows.Forms.NativeWindow.Finalize
  - System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)
  - System.Windows.Forms.NativeWindow.Handle
  - System.Windows.Forms.NativeWindow.OnHandleChange
  - System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)
  - System.Windows.Forms.NativeWindow.ReleaseHandle
  - System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)
  langs:
  - csharp
  name: NativeWindow
  nameWithType: NativeWindow
  fullName: System.Windows.Forms.NativeWindow
  type: Class
  summary: "提供低階封裝的視窗控制代碼與視窗程序。"
  remarks: "這個類別會自動管理視窗類別建立與註冊。       與視窗控制代碼相關聯時，就無法進行記憶體回收的視窗。 若要確保適當的記憶體回收，控制代碼必須被終結使用手動<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>或釋出使用<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> </xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>      > [!NOTE] ><xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>控制訊息處理時，呼叫方法。</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> 這表示在當您不需要手動呼叫的情況下<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>，但它是不錯的作法，並未</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>       NativeWindow 類別提供了下列屬性和方法，以管理控制代碼︰ <xref:System.Windows.Forms.NativeWindow.Handle%2A>， <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>， <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>， <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>，和<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>。</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> </xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> </xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> </xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> </xref:System.Windows.Forms.NativeWindow.Handle%2A>"
  example:
  - "The following code example demonstrates intercepting operating system window messages in a window procedure, and creating a window with a specific operating system window class name. The example creates two classes that inherit from NativeWindow that accomplish this.  \n  \n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message. The class demonstrates the usage of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the NativeWindow will use. The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \n  \n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`. The class demonstrates using the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and overriding the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.  \n  \n [!code-cpp[NativeWindow#1](~/add/codesnippet/cpp/t-system.windows.forms.n_0_1.cpp)]\n [!code-cs[NativeWindow#1](~/add/codesnippet/csharp/t-system.windows.forms.n_0_1.cs)]\n [!code-vb[NativeWindow#1](~/add/codesnippet/visualbasic/t-system.windows.forms.n_0_1.vb)]"
  syntax:
    content: 'public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Windows.Forms.IWin32Window
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.#ctor
  id: '#ctor'
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: NativeWindow()
  nameWithType: NativeWindow.NativeWindow()
  fullName: System.Windows.Forms.NativeWindow.NativeWindow()
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "初始化的執行個體<xref href=&quot;System.Windows.Forms.NativeWindow&quot;></xref>類別。"
  remarks: "這是由編譯器提供的預設 NativeWindow 建構函式。 <xref:System.Windows.Forms.NativeWindow>類別也有靜態的建構函式，以初始化應用程式全網域的訊息處理常式和雜湊表。</xref:System.Windows.Forms.NativeWindow>"
  syntax:
    content: public NativeWindow ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)
  id: AssignHandle(System.IntPtr)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: AssignHandle(IntPtr)
  nameWithType: NativeWindow.AssignHandle(IntPtr)
  fullName: System.Windows.Forms.NativeWindow.AssignHandle(IntPtr)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "指派到這個視窗的控制代碼。"
  remarks: "<xref:System.Windows.Forms.NativeWindow.WndProc%2A>攔截視窗訊息傳送至`handle`參數。</xref:System.Windows.Forms.NativeWindow.WndProc%2A> 使用<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>重設為預設視窗程序的控制代碼的視窗程序。</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>       AssignHandle 方法呼叫<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>方法表示的值<xref:System.Windows.Forms.NativeWindow.Handle%2A>屬性已變更。</xref:System.Windows.Forms.NativeWindow.Handle%2A> </xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>      > [!NOTE] > 中不同的應用程式處理序不能指派的控制代碼。"
  example:
  - "The following code example demonstrates intercepting operating system window messages in a window procedure. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \n  \n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message. The class demonstrates the use of the AssignHandle and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify which window handle the <xref:System.Windows.Forms.NativeWindow> will use. The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \n  \n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \n  \n [!code-cpp[NativeWindow#2](~/add/codesnippet/cpp/m-system.windows.forms.n_4_1.cpp)]\n [!code-cs[NativeWindow#2](~/add/codesnippet/csharp/m-system.windows.forms.n_4_1.cs)]\n [!code-vb[NativeWindow#2](~/add/codesnippet/visualbasic/m-system.windows.forms.n_4_1.vb)]"
  syntax:
    content: public void AssignHandle (IntPtr handle);
    parameters:
    - id: handle
      type: System.IntPtr
      description: "若要指派給此視窗控制代碼。"
  overload: System.Windows.Forms.NativeWindow.AssignHandle*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "這個視窗已經有控制代碼。"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "無法擷取相關聯的原生視窗的視窗程序。"
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)
  id: CreateHandle(System.Windows.Forms.CreateParams)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: CreateHandle(CreateParams)
  nameWithType: NativeWindow.CreateHandle(CreateParams)
  fullName: System.Windows.Forms.NativeWindow.CreateHandle(CreateParams)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "建立視窗和其控制代碼與指定的建立參數。"
  remarks: "`cp`參數指定的值傳遞至原生 Win32`CreateWindowEx`方法來建立其控制代碼和視窗。       當<xref:System.Windows.Forms.CreateParams.ClassName%2A>欄位不是`null`，繼承自指定類別的新建立的視窗控制代碼</xref:System.Windows.Forms.CreateParams.ClassName%2A> 例如，如果<xref:System.Windows.Forms.CreateParams.ClassName%2A>設為`BUTTON`，新建立的視窗根據 Win32`BUTTON`視窗類別</xref:System.Windows.Forms.CreateParams.ClassName%2A> <xref:System.Windows.Forms.CreateParams.Param%2A>屬性<xref:System.Windows.Forms.CreateParams.ClassName%2A>物件必須是`null`或參考的已宣告為結構的類別執行個體。</xref:System.Windows.Forms.CreateParams.ClassName%2A> </xref:System.Windows.Forms.CreateParams.Param%2A>       此程式碼是摘錄自中顯示的範例<xref:System.Windows.Forms.NativeWindow>類別概觀。</xref:System.Windows.Forms.NativeWindow> 為了簡潔起見，不會顯示一些程式碼。 請參閱<xref:System.Windows.Forms.NativeWindow>整個程式碼清單。</xref:System.Windows.Forms.NativeWindow>      > [!NOTE] > 所提供的類別名稱向作業系統註冊。"
  example:
  - "The following code example demonstrates creating a window with a specific operating system window class name. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \n  \n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`. This creates a Win32 button window. The location and size of the button is set, along with specifying additional window styles. The class demonstrates how to use the CreateHandle method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received. Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.  \n  \n> [!NOTE]\n>  Some control types send their window messages to the window parent instead of the window. See the Windows Platform SDK for more information.  \n  \n [!code-cpp[NativeWindow#3](~/add/codesnippet/cpp/4bc4c996-2177-4901-b43d-_1.cpp)]\n [!code-cs[NativeWindow#3](~/add/codesnippet/csharp/4bc4c996-2177-4901-b43d-_1.cs)]\n [!code-vb[NativeWindow#3](~/add/codesnippet/visualbasic/4bc4c996-2177-4901-b43d-_1.vb)]"
  syntax:
    content: public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);
    parameters:
    - id: cp
      type: System.Windows.Forms.CreateParams
      description: "A <xref href=&quot;System.Windows.Forms.CreateParams&quot;> </xref> ，指定此視窗的建立參數。"
  overload: System.Windows.Forms.NativeWindow.CreateHandle*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "嘗試建立原生視窗時，作業系統會已用完資源。"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "原生 Win32 API 無法建立指定的視窗。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已指定目前的原生視窗的控制代碼;中的<xref:System.Windows.Forms.NativeWindow.Handle*>屬性是否不等於<xref:System.IntPtr.Zero>.</xref:System.IntPtr.Zero></xref:System.Windows.Forms.NativeWindow.Handle*>的說明"
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)
  id: DefWndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: DefWndProc(Message)
  nameWithType: NativeWindow.DefWndProc(Message)
  fullName: System.Windows.Forms.NativeWindow.DefWndProc(Message)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "叫用此視窗相關聯的預設視窗程序。"
  remarks: "一般而言，只有 DefWndProc 時呼叫方法，您會攔截視窗訊息，而且想要以處理訊息的預設視窗程序。 不應該將視窗訊息傳送至視窗; 呼叫 DefWndProc呼叫 Win32`SendMessage`函式。       它會呼叫 DefWndProc 發生錯誤時<xref:System.Windows.Forms.NativeWindow.Handle%2A>屬性為 0。</xref:System.Windows.Forms.NativeWindow.Handle%2A>"
  syntax:
    content: public void DefWndProc (ref System.Windows.Forms.Message m);
    parameters:
    - id: m
      type: System.Windows.Forms.Message
      description: "目前正在處理訊息。"
  overload: System.Windows.Forms.NativeWindow.DefWndProc*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.DestroyHandle
  id: DestroyHandle
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: DestroyHandle()
  nameWithType: NativeWindow.DestroyHandle()
  fullName: System.Windows.Forms.NativeWindow.DestroyHandle()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "終結視窗和其控制代碼。"
  remarks: "這個方法會終結與關聯的視窗<xref:System.Windows.Forms.NativeWindow.Handle%2A>，設定<xref:System.Windows.Forms.NativeWindow.Handle%2A>屬性設為 0，並呼叫<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>方法，以反映變更。</xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> </xref:System.Windows.Forms.NativeWindow.Handle%2A> </xref:System.Windows.Forms.NativeWindow.Handle%2A> 通常您只會呼叫 DestroyHandle 當您在使用原生的視窗。      > [!NOTE] ><xref:System.Windows.Forms.NativeWindow>類別會自動將損毀相關聯的視窗並釋放其資源，以回應 WM_DESTROY 訊息。</xref:System.Windows.Forms.NativeWindow>"
  syntax:
    content: public virtual void DestroyHandle ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.DestroyHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.Finalize
  id: Finalize
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: Finalize()
  nameWithType: NativeWindow.Finalize()
  fullName: System.Windows.Forms.NativeWindow.Finalize()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "釋放與此視窗相關聯的資源。"
  remarks: "Finalize 方法移除目前相關聯的 Win32 衍生類別<xref:System.Windows.Forms.NativeWindow>執行個體，釋放的控制代碼，並將 WM_CLOSE 訊息張貼至相關聯的視窗。</xref:System.Windows.Forms.NativeWindow>"
  syntax:
    content: ~NativeWindow ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)
  id: FromHandle(System.IntPtr)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: FromHandle(IntPtr)
  nameWithType: NativeWindow.FromHandle(IntPtr)
  fullName: System.Windows.Forms.NativeWindow.FromHandle(IntPtr)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "擷取與指定的控制代碼關聯的視窗。"
  remarks: "如果您接收的控制代碼的另一種方法時，使用這個方法來擷取與控制代碼關聯的視窗。 控制代碼必須已經由另一個擁有<xref:System.Windows.Forms.NativeWindow>在目前處理，否則`null`傳回。</xref:System.Windows.Forms.NativeWindow>"
  syntax:
    content: public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);
    parameters:
    - id: handle
      type: System.IntPtr
      description: "視窗控制代碼。"
    return:
      type: System.Windows.Forms.NativeWindow
      description: "<xref href=&quot;System.Windows.Forms.NativeWindow&quot;> </xref>與指定的控制代碼相關聯。 這個方法會傳回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>時控制代碼沒有相關聯的視窗。"
  overload: System.Windows.Forms.NativeWindow.FromHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.Handle
  id: Handle
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: Handle
  nameWithType: NativeWindow.Handle
  fullName: System.Windows.Forms.NativeWindow.Handle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得此視窗的控制代碼。"
  remarks: "呼叫 Windows API 方法需要之控制代碼的視窗或控制項時，請使用這個方法。"
  example:
  - "The following code example demonstrates creating a window with a specific operating system window class name. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this. The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the Handle changes.  \n  \n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to BUTTON. This creates a Win32 button window. The location and size of the button is set, along with specifying additional window styles. The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received. Although the example looks for the WM_ACTIVATEAPP message, this could be replaced in a real program with window messages specific to the type created.  \n  \n> [!NOTE]\n>  Some control types send their window messages to the window parent instead of the window. See the Windows Platform SDK for more information.  \n  \n [!code-cpp[NativeWindow#3](~/add/codesnippet/cpp/p-system.windows.forms.n_14_1.cpp)]\n [!code-cs[NativeWindow#3](~/add/codesnippet/csharp/p-system.windows.forms.n_14_1.cs)]\n [!code-vb[NativeWindow#3](~/add/codesnippet/visualbasic/p-system.windows.forms.n_14_1.vb)]"
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: "如果成功的話，<xref:System.IntPtr>代表控制代碼相關聯的原生 Win32 視窗; 否則即為 0，如果沒有控制代碼與視窗相關聯。</xref:System.IntPtr>"
  overload: System.Windows.Forms.NativeWindow.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.OnHandleChange
  id: OnHandleChange
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: OnHandleChange()
  nameWithType: NativeWindow.OnHandleChange()
  fullName: System.Windows.Forms.NativeWindow.OnHandleChange()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "指定視窗的控制代碼已變更時呼叫的通知方法。"
  remarks: "這個方法會叫用時的值<xref:System.Windows.Forms.NativeWindow.Handle%2A>屬性已變更。</xref:System.Windows.Forms.NativeWindow.Handle%2A>"
  example:
  - "The following code example demonstrates creating a window with a specific operating system window class name. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this. The example also demonstrates overriding the OnHandleChange method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.  \n  \n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`. This creates a Win32 button window. The location and size of the button is set, along with specifying additional window styles. The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received. Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.  \n  \n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \n  \n> [!NOTE]\n>  Some control types send their window messages to the window parent instead of the window. See the Windows Platform SDK for more information.  \n  \n [!code-cpp[NativeWindow#3](~/add/codesnippet/cpp/m-system.windows.forms.n_1_1.cpp)]\n [!code-cs[NativeWindow#3](~/add/codesnippet/csharp/m-system.windows.forms.n_1_1.cs)]\n [!code-vb[NativeWindow#3](~/add/codesnippet/visualbasic/m-system.windows.forms.n_1_1.vb)]"
  syntax:
    content: protected virtual void OnHandleChange ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.OnHandleChange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)
  id: OnThreadException(System.Exception)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: OnThreadException(Exception)
  nameWithType: NativeWindow.OnThreadException(Exception)
  fullName: System.Windows.Forms.NativeWindow.OnThreadException(Exception)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "當在衍生類別中覆寫時，會管理執行緒未處理例外狀況。"
  remarks: "一般而言，<xref:System.Windows.Forms.Application.OnThreadException%2A>控制代碼的執行緒例外狀況。</xref:System.Windows.Forms.Application.OnThreadException%2A>"
  syntax:
    content: protected virtual void OnThreadException (Exception e);
    parameters:
    - id: e
      type: System.Exception
      description: "<xref:System.Exception>所指定的執行緒未處理例外狀況。</xref:System.Exception>"
  overload: System.Windows.Forms.NativeWindow.OnThreadException*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.ReleaseHandle
  id: ReleaseHandle
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: ReleaseHandle()
  nameWithType: NativeWindow.ReleaseHandle()
  fullName: System.Windows.Forms.NativeWindow.ReleaseHandle()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "釋放與此視窗相關聯的控制代碼。"
  remarks: "這個方法不會終結的視窗控制代碼。 相反地，它將控制代碼的視窗程序設定為預設視窗程序。 它會設定<xref:System.Windows.Forms.NativeWindow.Handle%2A>屬性設為 0 並呼叫<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>以反映變更。</xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> </xref:System.Windows.Forms.NativeWindow.Handle%2A>       視窗會自動呼叫這個方法，如果收到指出 Windows 已終結的控制代碼的原生 Win32 控制訊息。"
  example:
  - "The following code example demonstrates intercepting operating system window messages in a window procedure. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \n  \n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message. The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and ReleaseHandle methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use. The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \n  \n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \n  \n [!code-cpp[NativeWindow#2](~/add/codesnippet/cpp/m-system.windows.forms.n_0_1.cpp)]\n [!code-cs[NativeWindow#2](~/add/codesnippet/csharp/m-system.windows.forms.n_0_1.cs)]\n [!code-vb[NativeWindow#2](~/add/codesnippet/visualbasic/m-system.windows.forms.n_0_1.vb)]"
  syntax:
    content: public virtual void ReleaseHandle ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.ReleaseHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)
  id: WndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: WndProc(Message)
  nameWithType: NativeWindow.WndProc(Message)
  fullName: System.Windows.Forms.NativeWindow.WndProc(Message)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "叫用此視窗相關聯的預設視窗程序。"
  remarks: "視窗訊息傳送至視窗的控制代碼時，會呼叫這個方法。"
  example:
  - "The following code example demonstrates intercepting operating system window messages in a window procedure. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \n  \n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the WndProc method to intercept the `WM_ACTIVATEAPP` window message. The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use. The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \n  \n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \n  \n [!code-cpp[NativeWindow#2](~/add/codesnippet/cpp/m-system.windows.forms.n_3_1.cpp)]\n [!code-cs[NativeWindow#2](~/add/codesnippet/csharp/m-system.windows.forms.n_3_1.cs)]\n [!code-vb[NativeWindow#2](~/add/codesnippet/visualbasic/m-system.windows.forms.n_3_1.vb)]"
  syntax:
    content: protected virtual void WndProc (ref System.Windows.Forms.Message m);
    parameters:
    - id: m
      type: System.Windows.Forms.Message
      description: "A <xref href=&quot;System.Windows.Forms.Message&quot;> </xref>與目前的 Windows 訊息相關聯。"
  overload: System.Windows.Forms.NativeWindow.WndProc*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Forms.NativeWindow.#ctor
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: NativeWindow()
  nameWithType: NativeWindow.NativeWindow()
  fullName: System.Windows.Forms.NativeWindow.NativeWindow()
- uid: System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: AssignHandle(IntPtr)
  nameWithType: NativeWindow.AssignHandle(IntPtr)
  fullName: System.Windows.Forms.NativeWindow.AssignHandle(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: CreateHandle(CreateParams)
  nameWithType: NativeWindow.CreateHandle(CreateParams)
  fullName: System.Windows.Forms.NativeWindow.CreateHandle(CreateParams)
- uid: System.Windows.Forms.CreateParams
  parent: System.Windows.Forms
  isExternal: false
  name: CreateParams
  nameWithType: CreateParams
  fullName: System.Windows.Forms.CreateParams
- uid: System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: DefWndProc(Message)
  nameWithType: NativeWindow.DefWndProc(Message)
  fullName: System.Windows.Forms.NativeWindow.DefWndProc(Message)
- uid: System.Windows.Forms.Message
  parent: System.Windows.Forms
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Windows.Forms.Message
- uid: System.Windows.Forms.NativeWindow.DestroyHandle
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: DestroyHandle()
  nameWithType: NativeWindow.DestroyHandle()
  fullName: System.Windows.Forms.NativeWindow.DestroyHandle()
- uid: System.Windows.Forms.NativeWindow.Finalize
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: Finalize()
  nameWithType: NativeWindow.Finalize()
  fullName: System.Windows.Forms.NativeWindow.Finalize()
- uid: System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: FromHandle(IntPtr)
  nameWithType: NativeWindow.FromHandle(IntPtr)
  fullName: System.Windows.Forms.NativeWindow.FromHandle(IntPtr)
- uid: System.Windows.Forms.NativeWindow
  parent: System.Windows.Forms
  isExternal: false
  name: NativeWindow
  nameWithType: NativeWindow
  fullName: System.Windows.Forms.NativeWindow
- uid: System.Windows.Forms.NativeWindow.Handle
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: Handle
  nameWithType: NativeWindow.Handle
  fullName: System.Windows.Forms.NativeWindow.Handle
- uid: System.Windows.Forms.NativeWindow.OnHandleChange
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: OnHandleChange()
  nameWithType: NativeWindow.OnHandleChange()
  fullName: System.Windows.Forms.NativeWindow.OnHandleChange()
- uid: System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: OnThreadException(Exception)
  nameWithType: NativeWindow.OnThreadException(Exception)
  fullName: System.Windows.Forms.NativeWindow.OnThreadException(Exception)
- uid: System.Windows.Forms.NativeWindow.ReleaseHandle
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: ReleaseHandle()
  nameWithType: NativeWindow.ReleaseHandle()
  fullName: System.Windows.Forms.NativeWindow.ReleaseHandle()
- uid: System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: WndProc(Message)
  nameWithType: NativeWindow.WndProc(Message)
  fullName: System.Windows.Forms.NativeWindow.WndProc(Message)
- uid: System.Windows.Forms.NativeWindow.#ctor*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: NativeWindow
  nameWithType: NativeWindow.NativeWindow
- uid: System.Windows.Forms.NativeWindow.AssignHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: AssignHandle
  nameWithType: NativeWindow.AssignHandle
- uid: System.Windows.Forms.NativeWindow.CreateHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: CreateHandle
  nameWithType: NativeWindow.CreateHandle
- uid: System.Windows.Forms.NativeWindow.DefWndProc*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: DefWndProc
  nameWithType: NativeWindow.DefWndProc
- uid: System.Windows.Forms.NativeWindow.DestroyHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: DestroyHandle
  nameWithType: NativeWindow.DestroyHandle
- uid: System.Windows.Forms.NativeWindow.Finalize*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: Finalize
  nameWithType: NativeWindow.Finalize
- uid: System.Windows.Forms.NativeWindow.FromHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: FromHandle
  nameWithType: NativeWindow.FromHandle
- uid: System.Windows.Forms.NativeWindow.Handle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: Handle
  nameWithType: NativeWindow.Handle
- uid: System.Windows.Forms.NativeWindow.OnHandleChange*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: OnHandleChange
  nameWithType: NativeWindow.OnHandleChange
- uid: System.Windows.Forms.NativeWindow.OnThreadException*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: OnThreadException
  nameWithType: NativeWindow.OnThreadException
- uid: System.Windows.Forms.NativeWindow.ReleaseHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: ReleaseHandle
  nameWithType: NativeWindow.ReleaseHandle
- uid: System.Windows.Forms.NativeWindow.WndProc*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: WndProc
  nameWithType: NativeWindow.WndProc
