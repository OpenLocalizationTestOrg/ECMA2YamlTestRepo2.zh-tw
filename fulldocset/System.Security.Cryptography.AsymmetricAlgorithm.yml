### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  id: AsymmetricAlgorithm
  children:
  - System.Security.Cryptography.AsymmetricAlgorithm.#ctor
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Create
  - System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  - System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  - System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  langs:
  - csharp
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
  type: Class
  summary: "代表非對稱演算法的所有實作必須從它都繼承的抽象基底類別。"
  remarks: "非對稱密碼編譯演算法，也稱為公開金鑰演算法，需要傳送者和接收者維護一組相關的金鑰︰ 私密金鑰與公開金鑰。 兩個索引鍵是唯一的實體。 公開金鑰可供任何人;此金鑰用於編碼傳送至收件者的資料。 私密金鑰必須保密接收者;此金鑰會解碼訊息時使用的編碼使用接收器的公開金鑰。 <xref:System.Security.Cryptography.RSACryptoServiceProvider>類別是公開金鑰演算法的實作。</xref:System.Security.Cryptography.RSACryptoServiceProvider> 公開金鑰加密和演算法的深入討論，請參閱 「 公開金鑰加密 」 一節[密碼編譯服務](~/add/includes/ajax-current-ext-md.md)。 如需如何使用強式名稱工具 (Sn.exe) 建立金鑰組的資訊，請參閱[How to︰ 建立公開 / 私密金鑰組](~/add/includes/ajax-current-ext-md.md)。       您可以使用公開金鑰系統，以形成數位簽章。 數位簽章可用來協助保護資料的完整性。 例如，若要使用公開金鑰系統以數位方式簽署訊息，寄件者先套用雜湊函式來建立訊息摘要。 寄件者接著會使用寄件者的私密金鑰來建立個人簽章寄件者的加密訊息摘要。 在收到訊息和簽章，接收者會使用寄件者的公開金鑰來復原訊息摘要簽章，並使用雜湊訊息寄件者使用的相同雜湊演算法。 如果接收者計算出來的訊息摘要符合從寄件者收到的訊息摘要，接收者可以假設訊息在傳輸過程中沒有遭到竄改。 請注意，任何人都可以驗證簽章，因為寄件者的公開金鑰是通用資訊。 這項技術不會保留任何需要保密的訊息。對於要秘密提示訊息，它必須經過加密。       .NET Framework 提供的以下類別可實作數位簽章演算法︰ <xref:System.Security.Cryptography.DSACryptoServiceProvider>， <xref:System.Security.Cryptography.RSACryptoServiceProvider>， <xref:System.Security.Cryptography.ECDsa>（基底類別），和<xref:System.Security.Cryptography.ECDsaCng>。</xref:System.Security.Cryptography.ECDsaCng> </xref:System.Security.Cryptography.ECDsa> </xref:System.Security.Cryptography.RSACryptoServiceProvider> </xref:System.Security.Cryptography.DSACryptoServiceProvider>       <xref:System.Security.Cryptography>命名空間提供具象類別<xref:System.Security.Cryptography.RSA>和<xref:System.Security.Cryptography.DSA>只。</xref:System.Security.Cryptography.DSA> </xref:System.Security.Cryptography.RSA> </xref:System.Security.Cryptography>       若要了解如何使用 RSA 演算法來加密和解密 XML 資料，以及建立和驗證 XML 數位簽章，請參閱下列文章:- [How to︰ 使用非對稱金鑰加密 XML 項目](~/add/includes/ajax-current-ext-md.md)      -   [如何︰ 使用非對稱金鑰解密 XML 項目](~/add/includes/ajax-current-ext-md.md)      -   [如何︰ 使用數位簽章簽署 XML 文件](~/add/includes/ajax-current-ext-md.md)      -   [如何︰ 確認數位簽章的 XML 文件](~/add/includes/ajax-current-ext-md.md)"
  example:
  - "The following code example demonstrates how to implement a custom asymmetric algorithm inherited from the AsymmetricAlgorithm class.  An additional class is provided to demonstrate how to use the custom class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#2](~/add/codesnippet/csharp/t-system.security.crypto_0_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#2](~/add/codesnippet/cpp/t-system.security.crypto_0_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#2](~/add/codesnippet/visualbasic/t-system.security.crypto_0_1.vb)]  \n  \n Here's an additional class that demonstrates how to use the custom class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#3](~/add/codesnippet/csharp/t-system.security.crypto_0_2.cs)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#3](~/add/codesnippet/visualbasic/t-system.security.crypto_0_2.vb)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#3](~/add/codesnippet/cpp/t-system.security.crypto_0_2.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class AsymmetricAlgorithm : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: AsymmetricAlgorithm()
  nameWithType: AsymmetricAlgorithm.AsymmetricAlgorithm()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.AsymmetricAlgorithm()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新執行個體<xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref>類別。"
  remarks: "您無法建立抽象類別的執行個體。 應用程式程式碼會建立衍生類別的新執行個體。 <xref:System.Security.Cryptography.RSACryptoServiceProvider>和<xref:System.Security.Cryptography.DSACryptoServiceProvider>類別都是唯一支援目前的實作。</xref:System.Security.Cryptography.DSACryptoServiceProvider> </xref:System.Security.Cryptography.RSACryptoServiceProvider>"
  syntax:
    content: protected AsymmetricAlgorithm ();
    parameters: []
  overload: System.Security.Cryptography.AsymmetricAlgorithm.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "在衍生類別的實作不正確。"
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear
  id: Clear
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: Clear()
  nameWithType: AsymmetricAlgorithm.Clear()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "所使用的資源全部釋出<xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref>類別。"
  remarks: "這個方法是簡單呼叫<xref:System.IDisposable.Dispose%2A?displayProperty=fullName>方法。</xref:System.IDisposable.Dispose%2A?displayProperty=fullName>       呼叫`Dispose`允許所使用的資源<xref:System.Security.Cryptography.AsymmetricAlgorithm>類別，以重新配置原本用於其他用途。</xref:System.Security.Cryptography.AsymmetricAlgorithm> 如需有關`Dispose`，請參閱[清除 Unmanaged 資源上](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates how to call the Clear method to release the resources of the current `customCrypto` object. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#1](~/add/codesnippet/csharp/m-system.security.crypto_101_1.cs)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#1](~/add/codesnippet/visualbasic/m-system.security.crypto_101_1.vb)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#1](~/add/codesnippet/cpp/m-system.security.crypto_101_1.cpp)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.AsymmetricAlgorithm.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create
  id: Create
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: Create()
  nameWithType: AsymmetricAlgorithm.Create()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "建立用來執行非對稱演算法的預設密碼編譯物件。"
  remarks: ''
  example:
  - "The following code example demonstrates how to implement the Create method in an extended class. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#11](~/add/codesnippet/csharp/m-system.security.crypto_87_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#11](~/add/codesnippet/cpp/m-system.security.crypto_87_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#11](~/add/codesnippet/visualbasic/m-system.security.crypto_87_1.vb)]"
  syntax:
    content: public static System.Security.Cryptography.AsymmetricAlgorithm Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "新<xref href=&quot;System.Security.Cryptography.RSACryptoServiceProvider&quot;></xref>執行個體，除非已經變更預設設定[ &lt;cryptoClass&gt;元素](../Topic/%3CcryptoClass%3E%20Element.md)。"
  overload: System.Security.Cryptography.AsymmetricAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: Create(String)
  nameWithType: AsymmetricAlgorithm.Create(String)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "建立指定的非對稱式演算法實作的執行個體。"
  remarks: ''
  example:
  - "The following code example demonstrates how to implement the Create method in an extended class. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#12](~/add/codesnippet/csharp/m-system.security.crypto_118_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#12](~/add/codesnippet/cpp/m-system.security.crypto_118_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#12](~/add/codesnippet/visualbasic/m-system.security.crypto_118_1.vb)]"
  syntax:
    content: public static System.Security.Cryptography.AsymmetricAlgorithm Create (string algName);
    parameters:
    - id: algName
      type: System.String
      description: "要使用的非對稱演算法實作。 下表顯示有效的值`algName`參數以及它們所對應的演算法。       <table><thead><tr><th> 參數值       </th><th> 實作       </th></tr></thead><tbody><tr><td> System.Security.Cryptography.AsymmetricAlgorithm       </td><td><xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref></td></tr><tr><td> RSA       </td><td><xref href=&quot;System.Security.Cryptography.RSA&quot;></xref></td></tr><tr><td> System.Security.Cryptography.RSA       </td><td><xref href=&quot;System.Security.Cryptography.RSA&quot;></xref></td></tr><tr><td> DSA       </td><td><xref href=&quot;System.Security.Cryptography.DSA&quot;></xref></td></tr><tr><td> System.Security.Cryptography.DSA       </td><td><xref href=&quot;System.Security.Cryptography.DSA&quot;></xref></td></tr><tr><td> ECDsa       </td><td><xref href=&quot;System.Security.Cryptography.ECDsa&quot;></xref></td></tr><tr><td> ECDsaCng       </td><td><xref href=&quot;System.Security.Cryptography.ECDsaCng&quot;></xref></td></tr><tr><td> System.Security.Cryptography.ECDsaCng       </td><td><xref href=&quot;System.Security.Cryptography.ECDsaCng&quot;></xref></td></tr><tr><td> ECDH       </td><td><xref href=&quot;System.Security.Cryptography.ECDiffieHellman&quot;></xref></td></tr><tr><td> ECDiffieHellman       </td><td><xref href=&quot;System.Security.Cryptography.ECDiffieHellman&quot;></xref></td></tr><tr><td> ECDiffieHellmanCng       </td><td><xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;></xref></td></tr><tr><td> System.Security.Cryptography.ECDiffieHellmanCng       </td><td><xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;></xref></td></tr></tbody></table>"
    return:
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "指定非對稱演算法實作的新執行個體。"
  overload: System.Security.Cryptography.AsymmetricAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  id: Dispose
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: Dispose()
  nameWithType: AsymmetricAlgorithm.Dispose()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "目前的執行個體所使用的資源全部釋出<xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref>類別。"
  remarks: "呼叫`Dispose`當您完成使用<xref:System.Security.Cryptography.AsymmetricAlgorithm>.</xref:System.Security.Cryptography.AsymmetricAlgorithm> `Dispose`方法會使<xref:System.Security.Cryptography.AsymmetricAlgorithm>中無法使用的狀態。</xref:System.Security.Cryptography.AsymmetricAlgorithm> 在呼叫`Dispose`，您必須釋放所有參考<xref:System.Security.Cryptography.AsymmetricAlgorithm>讓記憶體回收行程可以回收記憶體的<xref:System.Security.Cryptography.AsymmetricAlgorithm>所佔用。</xref:System.Security.Cryptography.AsymmetricAlgorithm> </xref:System.Security.Cryptography.AsymmetricAlgorithm>       如需詳細資訊，請參閱[清除 Unmanaged 資源上](~/add/includes/ajax-current-ext-md.md)和[實作 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      > [!NOTE] > 永遠呼叫`Dispose`釋放您的最後一個參考至<xref:System.Security.Cryptography.AsymmetricAlgorithm>。</xref:System.Security.Cryptography.AsymmetricAlgorithm>之前 否則，它所使用的資源將不會釋放直到記憶體回收行程呼叫<xref:System.Security.Cryptography.AsymmetricAlgorithm>物件的`Finalize`方法。</xref:System.Security.Cryptography.AsymmetricAlgorithm>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.AsymmetricAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: AsymmetricAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "所使用的 unmanaged 的資源釋出<xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref>類別，並選擇性釋放 managed 的資源。"
  remarks: "這個方法會呼叫公用`Dispose()`方法和`Finalize`方法。 `Dispose()`叫用受保護`Dispose(Boolean)`方法`disposing`參數設定為`true`。 `Finalize`叫用`Dispose`與`disposing`設`false`。       當`disposing`參數是`true`，這個方法的任何 managed 物件所持有的資源全部釋出這個<xref:System.Security.Cryptography.AsymmetricAlgorithm>參考。</xref:System.Security.Cryptography.AsymmetricAlgorithm> 這個方法會叫用`Dispose()`每個參考物件的方法。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>表示釋放 managed 和 unmanaged 資源，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>表示只釋放 unmanaged 的資源。"
  overload: System.Security.Cryptography.AsymmetricAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  id: FromXmlString(System.String)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: FromXmlString(String)
  nameWithType: AsymmetricAlgorithm.FromXmlString(String)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "當在衍生類別中覆寫時，重新建構<xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref>從 XML 字串的物件。 否則，擲回<xref:System.NotImplementedException>.</xref:System.NotImplementedException>"
  remarks: ''
  example:
  - "The following code example demonstrates how to implement the FromXmlString method to parse the specified XML string to populate the current <xref:System.Security.Cryptography.CspParameters> object. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#4](~/add/codesnippet/csharp/m-system.security.crypto_86_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#4](~/add/codesnippet/cpp/m-system.security.crypto_86_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#4](~/add/codesnippet/visualbasic/m-system.security.crypto_86_1.vb)]"
  syntax:
    content: public virtual void FromXmlString (string xmlString);
    parameters:
    - id: xmlString
      type: System.String
      description: "要用來重新建構的 XML 字串<xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref>物件。"
  overload: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: AsymmetricAlgorithm.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "當在衍生類別中覆寫時，取得金鑰交換演算法的名稱。 否則，擲回<xref:System.NotImplementedException>.</xref:System.NotImplementedException>"
  remarks: ''
  example:
  - "The following code example demonstrates how to override the KeyExchangeAlgorithm property to return the name for the key exchange algorithm. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#6](~/add/codesnippet/csharp/p-system.security.crypto_83_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#6](~/add/codesnippet/cpp/p-system.security.crypto_83_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#6](~/add/codesnippet/visualbasic/p-system.security.crypto_83_1.vb)]"
  syntax:
    content: public virtual string KeyExchangeAlgorithm { get; }
    return:
      type: System.String
      description: "金鑰交換演算法的名稱。"
  overload: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  id: KeySize
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: KeySize
  nameWithType: AsymmetricAlgorithm.KeySize
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得或設定大小，以位元為單位的非對稱演算法所使用的金鑰模數。"
  remarks: "有效的金鑰大小由非對稱演算法的特定實作，而且會列於<xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A>屬性。</xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A>"
  example:
  - "The following code example demonstrates how to override the KeySize property to verify that it falls within the range identified in the local `keySizes` member variable. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#9](~/add/codesnippet/csharp/p-system.security.crypto_112_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#9](~/add/codesnippet/cpp/p-system.security.crypto_112_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#9](~/add/codesnippet/visualbasic/p-system.security.crypto_112_1.vb)]"
  syntax:
    content: public virtual int KeySize { get; set; }
    return:
      type: System.Int32
      description: "位元，非對稱演算法所使用的金鑰模數大小。"
  overload: System.Security.Cryptography.AsymmetricAlgorithm.KeySize*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "索引鍵模數大小不正確。"
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  id: KeySizeValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: KeySizeValue
  nameWithType: AsymmetricAlgorithm.KeySizeValue
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "表示的大小，以位元為單位的非對稱演算法所使用的金鑰模數。"
  remarks: "有效的金鑰大小由非對稱演算法的特定實作，而且會列於<xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A>屬性。</xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A>       這個欄位透過存取<xref:System.Security.Cryptography.AsymmetricAlgorithm.KeySize%2A>屬性。</xref:System.Security.Cryptography.AsymmetricAlgorithm.KeySize%2A>"
  syntax:
    content: protected int KeySizeValue;
    return:
      type: System.Int32
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  id: LegalKeySizes
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: LegalKeySizes
  nameWithType: AsymmetricAlgorithm.LegalKeySizes
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得非對稱演算法所支援的金鑰大小。"
  remarks: "非對稱演算法只支援金鑰大小符合此陣列中的項目。"
  example:
  - "The following code example demonstrates how to call the LegalKeySizes property to retrieve the <xref:System.Security.Cryptography.KeySizes.MinSize%2A>, <xref:System.Security.Cryptography.KeySizes.MaxSize%2A>, and <xref:System.Security.Cryptography.KeySizes.SkipSize%2A> properties. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#10](~/add/codesnippet/csharp/p-system.security.crypto_30_1.cs)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#10](~/add/codesnippet/visualbasic/p-system.security.crypto_30_1.vb)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#10](~/add/codesnippet/cpp/p-system.security.crypto_30_1.cpp)]"
  syntax:
    content: public virtual System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "陣列，其中包含非對稱演算法所支援的金鑰大小。"
  overload: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  id: LegalKeySizesValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: LegalKeySizesValue
  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定非對稱演算法所支援的金鑰大小。"
  remarks: "非對稱演算法只支援金鑰大小符合此陣列中的項目。       這個欄位透過存取<xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A>屬性。</xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A>"
  syntax:
    content: protected System.Security.Cryptography.KeySizes[] LegalKeySizesValue;
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "即將加入。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: AsymmetricAlgorithm.SignatureAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "在衍生類別中實作時，取得簽章演算法的名稱。 否則，一律會擲回<xref:System.NotImplementedException>.</xref:System.NotImplementedException>"
  remarks: ''
  example:
  - "The following code example demonstrates how to override the SignatureAlgorithm property to return the name of the signature algorithm. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#7](~/add/codesnippet/csharp/p-system.security.crypto_43_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#7](~/add/codesnippet/cpp/p-system.security.crypto_43_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#7](~/add/codesnippet/visualbasic/p-system.security.crypto_43_1.vb)]"
  syntax:
    content: public virtual string SignatureAlgorithm { get; }
    return:
      type: System.String
      description: "簽章演算法的名稱。"
  overload: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  id: ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: ToXmlString(Boolean)
  nameWithType: AsymmetricAlgorithm.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "當在衍生類別中覆寫時，會建立並傳回目前的 XML 字串表示法<xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref>物件。 否則，擲回<xref:System.NotImplementedException>.</xref:System.NotImplementedException>"
  remarks: ''
  example:
  - "The following code example demonstrates how to call the ToXmlString method to create an XML representation of the parameters in the current <xref:System.Security.Cryptography.AsymmetricAlgorithm> object. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#5](~/add/codesnippet/csharp/m-system.security.crypto_109_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#5](~/add/codesnippet/cpp/m-system.security.crypto_109_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#5](~/add/codesnippet/visualbasic/m-system.security.crypto_109_1.vb)]"
  syntax:
    content: public virtual string ToXmlString (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要包含私用參數;否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.String
      description: "目前的 XML 字串編碼方式<xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref>物件。"
  overload: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.AsymmetricAlgorithm.#ctor
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: AsymmetricAlgorithm()
  nameWithType: AsymmetricAlgorithm.AsymmetricAlgorithm()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.AsymmetricAlgorithm()
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Clear()
  nameWithType: AsymmetricAlgorithm.Clear()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear()
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Create()
  nameWithType: AsymmetricAlgorithm.Create()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create()
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Create(String)
  nameWithType: AsymmetricAlgorithm.Create(String)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Dispose()
  nameWithType: AsymmetricAlgorithm.Dispose()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose()
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: AsymmetricAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: FromXmlString(String)
  nameWithType: AsymmetricAlgorithm.FromXmlString(String)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(String)
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: AsymmetricAlgorithm.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeySize
  nameWithType: AsymmetricAlgorithm.KeySize
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeySizeValue
  nameWithType: AsymmetricAlgorithm.KeySizeValue
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: LegalKeySizes
  nameWithType: AsymmetricAlgorithm.LegalKeySizes
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
- uid: System.Security.Cryptography.KeySizes[]
  parent: System.Security.Cryptography
  isExternal: false
  name: KeySizes
  nameWithType: KeySizes
  fullName: System.Security.Cryptography.KeySizes[]
  spec.csharp:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    nameWithType: KeySizes
    fullName: KeySizes[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: LegalKeySizesValue
  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
- uid: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: AsymmetricAlgorithm.SignatureAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: ToXmlString(Boolean)
  nameWithType: AsymmetricAlgorithm.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(Boolean)
- uid: System.Security.Cryptography.AsymmetricAlgorithm.#ctor*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm.AsymmetricAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Clear
  nameWithType: AsymmetricAlgorithm.Clear
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Create
  nameWithType: AsymmetricAlgorithm.Create
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Dispose
  nameWithType: AsymmetricAlgorithm.Dispose
- uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: FromXmlString
  nameWithType: AsymmetricAlgorithm.FromXmlString
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: AsymmetricAlgorithm.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeySize
  nameWithType: AsymmetricAlgorithm.KeySize
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: LegalKeySizes
  nameWithType: AsymmetricAlgorithm.LegalKeySizes
- uid: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: AsymmetricAlgorithm.SignatureAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: ToXmlString
  nameWithType: AsymmetricAlgorithm.ToXmlString
