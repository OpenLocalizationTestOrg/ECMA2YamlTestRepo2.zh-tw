### YamlMime:ManagedReference
items:
- uid: System.Security.SecurityManager
  id: SecurityManager
  children:
  - System.Security.SecurityManager.CheckExecutionRights
  - System.Security.SecurityManager.CurrentThreadRequiresSecurityContextCapture
  - System.Security.SecurityManager.GetStandardSandbox(System.Security.Policy.Evidence)
  - System.Security.SecurityManager.GetZoneAndOrigin(System.Collections.ArrayList@,System.Collections.ArrayList@)
  - System.Security.SecurityManager.IsGranted(System.Security.IPermission)
  - System.Security.SecurityManager.LoadPolicyLevelFromFile(System.String,System.Security.PolicyLevelType)
  - System.Security.SecurityManager.LoadPolicyLevelFromString(System.String,System.Security.PolicyLevelType)
  - System.Security.SecurityManager.PolicyHierarchy
  - System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence)
  - System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence[])
  - System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet@)
  - System.Security.SecurityManager.ResolvePolicyGroups(System.Security.Policy.Evidence)
  - System.Security.SecurityManager.ResolveSystemPolicy(System.Security.Policy.Evidence)
  - System.Security.SecurityManager.SavePolicy
  - System.Security.SecurityManager.SavePolicyLevel(System.Security.Policy.PolicyLevel)
  - System.Security.SecurityManager.SecurityEnabled
  langs:
  - csharp
  name: SecurityManager
  nameWithType: SecurityManager
  fullName: System.Security.SecurityManager
  type: Class
  summary: "提供類別的安全性系統互動的主要存取點。 這個類別無法被繼承。"
  remarks: "安全性會提供方法來存取及管理安全性原則組態。 您無法建立 SecurityManager 的執行個體。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static class SecurityManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.SecurityManager.CheckExecutionRights
  id: CheckExecutionRights
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: CheckExecutionRights
  nameWithType: SecurityManager.CheckExecutionRights
  fullName: System.Security.SecurityManager.CheckExecutionRights
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "取得或設定值，指出程式碼必須有<xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;></xref>才能執行。"
  remarks: "如果這個屬性是`false`，即使程式碼不含<xref:System.Security.Permissions.SecurityPermissionFlag>可以執行。</xref:System.Security.Permissions.SecurityPermissionFlag> 執行檢查昂貴，而且可以排除延遲的原則解析的優點。 這個屬性被提供來停用檢查在需要時執行。       這個屬性的變更不會保存直到<xref:System.Security.SecurityManager.SavePolicy%2A>稱為。</xref:System.Security.SecurityManager.SavePolicy%2A> 新的處理序將不會受到變更之前它會保存在登錄中。"
  syntax:
    content: public static bool CheckExecutionRights { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果程式碼必須有<xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;></xref>才能執行; 否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.SecurityManager.CheckExecutionRights*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫這個方法的程式碼並沒有<xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.SecurityManager.CurrentThreadRequiresSecurityContextCapture
  id: CurrentThreadRequiresSecurityContextCapture
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: CurrentThreadRequiresSecurityContextCapture()
  nameWithType: SecurityManager.CurrentThreadRequiresSecurityContextCapture()
  fullName: System.Security.SecurityManager.CurrentThreadRequiresSecurityContextCapture()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "判斷目前的執行緒是否需要安全性內容擷取它的安全性狀態是否要在稍後重新建立時間。"
  remarks: "您可以使用 CurrentThreadRequiresSecurityContextCapture 方法之前您快取在成功的安全性要求之後取得的機密資料。       如果<xref:System.Security.CodeAccessPermission.Assert%2A>方法更高版本上呼叫堆疊，資料應該不會快取不會擷取對應的安全性內容。</xref:System.Security.CodeAccessPermission.Assert%2A> 否則，敏感性下取得的資料<xref:System.Security.CodeAccessPermission.Assert%2A>可能會變成可供程式碼也就是不再執行，與<xref:System.Security.CodeAccessPermission.Assert%2A>就地。</xref:System.Security.CodeAccessPermission.Assert%2A> </xref:System.Security.CodeAccessPermission.Assert%2A>      > [!IMPORTANT] > 則傳回值時才是可靠`false`，這表示，執行緒保證不需要安全性內容擷取。 方法不需要，以避免安全性弱點的安全性內容擷取時，可能會傳回 true。       CurrentThreadRequiresSecurityContextCapture 是安全性關鍵的因為其主要用途是為了避免不必要的安全性內容擷取時，表示使用它的程式碼有安全性顧慮，您必須稽核。"
  syntax:
    content: public static bool CurrentThreadRequiresSecurityContextCapture ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果堆疊包含沒有部分信任的應用程式定義域、 任何部分信任的組件，並沒有目前作用中<> *> 或<> *> 修飾詞。<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>如果 common language runtime 無法保證堆疊包含其中一個項目。"
  overload: System.Security.SecurityManager.CurrentThreadRequiresSecurityContextCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityManager.GetStandardSandbox(System.Security.Policy.Evidence)
  id: GetStandardSandbox(System.Security.Policy.Evidence)
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: GetStandardSandbox(Evidence)
  nameWithType: SecurityManager.GetStandardSandbox(Evidence)
  fullName: System.Security.SecurityManager.GetStandardSandbox(Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "取得可安全使授與給具有提供的辨識項的應用程式的權限集合。"
  remarks: "> [!NOTE]> 在[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]，主應用程式中的證據`evidence`必須包含<xref:System.Security.Policy.Zone?displayProperty=fullName>辨識項。</xref:System.Security.Policy.Zone?displayProperty=fullName>   >> 下表顯示會傳回每個區域的權限集合。      |區域 |權限集合 |  |----------|--------------------|  |<xref:System.Security.SecurityZone>|`FullTrust`|  |<xref:System.Security.SecurityZone>|`LocalIntranet`|  |<xref:System.Security.SecurityZone>|`Internet`|  |<xref:System.Security.SecurityZone>|`Internet`|  |<xref:System.Security.SecurityZone>|None |  |<xref:System.Security.SecurityZone>|None |      其他的證據，例如<xref:System.Security.Policy.Url>或<xref:System.Security.Policy.Site>，可能會被視為。</xref:System.Security.Policy.Site> </xref:System.Security.Policy.Url> </xref:System.Security.SecurityZone> </xref:System.Security.SecurityZone> </xref:System.Security.SecurityZone> </xref:System.Security.SecurityZone> </xref:System.Security.SecurityZone> </xref:System.Security.SecurityZone>       傳回的權限集合可供沙箱，執行應用程式。 請注意，這個方法不會指定原則，可協助判斷應用程式所要求的權限集合是否為合理的主機。 這個方法可以用來將區域對應至沙箱。"
  example:
  - "The following example shows how to use the GetStandardSandbox method to obtain the permission set for a sandboxed application. For more information about running an application in a sandbox, see [How to: Run Partially Trusted Code in a Sandbox](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[sandboxingApis#1](~/add/codesnippet/visualbasic/2aad9996-0182-4c3d-a405-_1.vb)]\n [!code-cs[sandboxingApis#1](~/add/codesnippet/csharp/2aad9996-0182-4c3d-a405-_1.cs)]"
  syntax:
    content: public static System.Security.PermissionSet GetStandardSandbox (System.Security.Policy.Evidence evidence);
    parameters:
    - id: evidence
      type: System.Security.Policy.Evidence
      description: "主控件辨識項來比對的權限集合。"
    return:
      type: System.Security.PermissionSet
      description: "可用來當作的授權集已提供的辨識項的應用程式權限集。"
  overload: System.Security.SecurityManager.GetStandardSandbox*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>evidence</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.SecurityManager.GetZoneAndOrigin(System.Collections.ArrayList@,System.Collections.ArrayList@)
  id: GetZoneAndOrigin(System.Collections.ArrayList@,System.Collections.ArrayList@)
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: GetZoneAndOrigin(ArrayList,ArrayList)
  nameWithType: SecurityManager.GetZoneAndOrigin(ArrayList,ArrayList)
  fullName: System.Security.SecurityManager.GetZoneAndOrigin(ArrayList,ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "取得目前的組件的授與的區域身分識別和 URL 識別權限集。"
  remarks: "此方法建議的替代做法是使用執行的組件的 URL 和區域辨識項來呼叫<xref:System.Security.SecurityManager.ResolvePolicy%2A>每個辨識項型別。</xref:System.Security.SecurityManager.ResolvePolicy%2A> 從傳回的權限集合<xref:System.Security.SecurityManager.ResolvePolicy%2A>呼叫識別執行的組件的來源 URL 及其區域為基礎來授與的權限。</xref:System.Security.SecurityManager.ResolvePolicy%2A>      > [!NOTE] > 這個成員會產生代表 ECMA 公用金鑰，不是有效的密碼編譯金鑰，但虛擬索引鍵連結要求。 在.NET Framework 中的 ECMA 虛擬機碼的連結要求會自動轉換為 Microsoft 公開金鑰的連結要求。 安全性例外狀況根據 Microsoft 公開金鑰，不 ECMA 虛擬索引鍵。"
  syntax:
    content: public static void GetZoneAndOrigin (out System.Collections.ArrayList zone, out System.Collections.ArrayList origin);
    parameters:
    - id: zone
      type: System.Collections.ArrayList
      description: "輸出參數，其中包含<xref href=&quot;System.Collections.ArrayList&quot;></xref>的授與<xref:System.Security.Permissions.ZoneIdentityPermissionAttribute.Zone*>物件。</xref:System.Security.Permissions.ZoneIdentityPermissionAttribute.Zone*>"
    - id: origin
      type: System.Collections.ArrayList
      description: "輸出參數，其中包含<xref href=&quot;System.Collections.ArrayList&quot;></xref>的授與<xref href=&quot;System.Security.Permissions.UrlIdentityPermission&quot;></xref>物件。"
  overload: System.Security.SecurityManager.GetZoneAndOrigin*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "要求<xref href=&quot;System.Security.Permissions.StrongNameIdentityPermission&quot;></xref>失敗。"
  platform:
  - net462
- uid: System.Security.SecurityManager.IsGranted(System.Security.IPermission)
  id: IsGranted(System.Security.IPermission)
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: IsGranted(IPermission)
  nameWithType: SecurityManager.IsGranted(IPermission)
  fullName: System.Security.SecurityManager.IsGranted(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "決定是否要將權限授予給呼叫者。"
  remarks: "授與權限由原則和不同的要求主體覆寫，例如判斷提示。 此外，IsGranted 只測試呼叫程式碼組件，獨立於其他呼叫端在堆疊上授的與。"
  syntax:
    content: public static bool IsGranted (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: "若要測試的呼叫端授與權限。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果呼叫端授與的權限包含權限<code> perm </code>，否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.SecurityManager.IsGranted*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityManager.LoadPolicyLevelFromFile(System.String,System.Security.PolicyLevelType)
  id: LoadPolicyLevelFromFile(System.String,System.Security.PolicyLevelType)
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: LoadPolicyLevelFromFile(String,PolicyLevelType)
  nameWithType: SecurityManager.LoadPolicyLevelFromFile(String,PolicyLevelType)
  fullName: System.Security.SecurityManager.LoadPolicyLevelFromFile(String,PolicyLevelType)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "載入<xref href=&quot;System.Security.Policy.PolicyLevel&quot;></xref>從指定的檔案。"
  syntax:
    content: public static System.Security.Policy.PolicyLevel LoadPolicyLevelFromFile (string path, System.Security.PolicyLevelType type);
    parameters:
    - id: path
      type: System.String
      description: "包含安全性原則資訊的檔案實體檔案路徑。"
    - id: type
      type: System.Security.PolicyLevelType
      description: "其中一個列舉值，指定要載入的原則層級的類型。"
    return:
      type: System.Security.Policy.PolicyLevel
      description: "載入的原則層級。"
  overload: System.Security.SecurityManager.LoadPolicyLevelFromFile*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "所表示的檔案<code> path </code>參數不存在。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫這個方法的程式碼並沒有<xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>。       -或-呼叫這個方法的程式碼並沒有<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>。       -或-呼叫這個方法的程式碼並沒有<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>。       -或-呼叫這個方法的程式碼並沒有<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "這個方法會使用程式碼存取安全性 (CAS) 原則，也就是過時[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]。 若要啟用 CAS 原則的相容性與舊版.NET Framework，請使用[ &lt;legacyCasPolicy&gt;元素](../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md)。"
  platform:
  - net462
- uid: System.Security.SecurityManager.LoadPolicyLevelFromString(System.String,System.Security.PolicyLevelType)
  id: LoadPolicyLevelFromString(System.String,System.Security.PolicyLevelType)
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: LoadPolicyLevelFromString(String,PolicyLevelType)
  nameWithType: SecurityManager.LoadPolicyLevelFromString(String,PolicyLevelType)
  fullName: System.Security.SecurityManager.LoadPolicyLevelFromString(String,PolicyLevelType)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "載入<xref href=&quot;System.Security.Policy.PolicyLevel&quot;></xref>從指定的字串。"
  syntax:
    content: public static System.Security.Policy.PolicyLevel LoadPolicyLevelFromString (string str, System.Security.PolicyLevelType type);
    parameters:
    - id: str
      type: System.String
      description: "安全性原則層級相同的格式，它出現在組態檔中的 XML 表示法。"
    - id: type
      type: System.Security.PolicyLevelType
      description: "其中一個列舉值，指定要載入的原則層級的類型。"
    return:
      type: System.Security.Policy.PolicyLevel
      description: "載入的原則層級。"
  overload: System.Security.SecurityManager.LoadPolicyLevelFromString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>str</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> str </code>參數無效。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫這個方法的程式碼並沒有<xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.SecurityManager.PolicyHierarchy
  id: PolicyHierarchy
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: PolicyHierarchy()
  nameWithType: SecurityManager.PolicyHierarchy()
  fullName: System.Security.SecurityManager.PolicyHierarchy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "提供存取安全性原則階層的層級，例如電腦原則和使用者原則的列舉值。"
  remarks: "傳回列舉值提供連續<xref:System.Security.Policy.PolicyLevel>代表個別的原則物件 （電腦、 使用者、 企業、 應用程式定義域） 階層的層級。</xref:System.Security.Policy.PolicyLevel> 這些物件是即時的原則。改變這些物件可以有無法預期的結果。       最小原則階層是由電腦層級、 企業層級和使用者層級所組成。 不過，階層可以包含其他層級。"
  syntax:
    content: public static System.Collections.IEnumerator PolicyHierarchy ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "列舉值<xref href=&quot;System.Security.Policy.PolicyLevel&quot;></xref>撰寫安全性原則階層架構的物件。"
  overload: System.Security.SecurityManager.PolicyHierarchy*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "這個方法會使用程式碼存取安全性 (CAS) 原則，也就是過時[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]。 若要啟用 CAS 原則的相容性與舊版.NET Framework，請使用[ &lt;legacyCasPolicy&gt;元素](../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md)。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫這個方法的程式碼並沒有<xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence)
  id: ResolvePolicy(System.Security.Policy.Evidence)
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: ResolvePolicy(Evidence)
  nameWithType: SecurityManager.ResolvePolicy(Evidence)
  fullName: System.Security.SecurityManager.ResolvePolicy(Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "決定授與程式碼的權限以在指定的辨識項。"
  remarks: "這個方法會叫用的安全性原則引擎，提供與呼叫程式碼識別的辨識項。 安全性原則會決定結果。"
  syntax:
    content: public static System.Security.PermissionSet ResolvePolicy (System.Security.Policy.Evidence evidence);
    parameters:
    - id: evidence
      type: System.Security.Policy.Evidence
      description: "設定用來評估原則的辨識項。"
    return:
      type: System.Security.PermissionSet
      description: "安全性系統可授與的權限集。"
  overload: System.Security.SecurityManager.ResolvePolicy*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "這個方法會使用程式碼存取安全性 (CAS) 原則，也就是過時[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]。 若要啟用 CAS 原則的相容性與舊版.NET Framework，請使用[ &lt;legacyCasPolicy&gt;元素](../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md)。"
  platform:
  - net462
- uid: System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence[])
  id: ResolvePolicy(System.Security.Policy.Evidence[])
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: ResolvePolicy(Evidence[])
  nameWithType: SecurityManager.ResolvePolicy(Evidence[])
  fullName: System.Security.SecurityManager.ResolvePolicy(Evidence[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "決定授與程式碼的權限以在指定的辨識項。"
  remarks: "這個方法會叫用的安全性原則引擎，提供陣列<xref:System.Security.Policy.Evidence>物件。</xref:System.Security.Policy.Evidence> 傳回的權限集合代表陣列中每個辨識項來套用這些權限。 這些權限是對等項目或原則授與每個個別的辨識項的權限的子集。 這個方法就如同您需要解決每個原則的結果上執行的交集<xref:System.Security.Policy.Evidence>陣列中的物件。</xref:System.Security.Policy.Evidence>"
  syntax:
    content: public static System.Security.PermissionSet ResolvePolicy (System.Security.Policy.Evidence[] evidences);
    parameters:
    - id: evidences
      type: System.Security.Policy.Evidence[]
      description: "用來評估原則的辨識項物件的陣列。"
    return:
      type: System.Security.PermissionSet
      description: "適用於所有提供的辨識項的權限集。"
  overload: System.Security.SecurityManager.ResolvePolicy*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "這個方法會使用程式碼存取安全性 (CAS) 原則，也就是過時[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]。 若要啟用 CAS 原則的相容性與舊版.NET Framework，請使用[ &lt;legacyCasPolicy&gt;元素](../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md)。"
  platform:
  - net462
- uid: System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet@)
  id: ResolvePolicy(System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet@)
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: ResolvePolicy(Evidence,PermissionSet,PermissionSet,PermissionSet,PermissionSet)
  nameWithType: SecurityManager.ResolvePolicy(Evidence,PermissionSet,PermissionSet,PermissionSet,PermissionSet)
  fullName: System.Security.SecurityManager.ResolvePolicy(Evidence,PermissionSet,PermissionSet,PermissionSet,PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "判斷指定的辨識項和要求根據的權限授與程式碼。"
  remarks: "這個方法會叫用的安全性原則引擎，提供與呼叫程式碼識別的辨識項和權限集的程式碼的要求。 安全性原則會決定結果。 這個方法傳回的安全性系統，所要授與的權限集，並傳回為輸出參數會被拒絕的權限的集合。 有效授與權限會授與不在拒絕的集合中的集合中。"
  syntax:
    content: public static System.Security.PermissionSet ResolvePolicy (System.Security.Policy.Evidence evidence, System.Security.PermissionSet reqdPset, System.Security.PermissionSet optPset, System.Security.PermissionSet denyPset, out System.Security.PermissionSet denied);
    parameters:
    - id: evidence
      type: System.Security.Policy.Evidence
      description: "設定用來評估原則的辨識項。"
    - id: reqdPset
      type: System.Security.PermissionSet
      description: "程式碼需要執行的必要權限。"
    - id: optPset
      type: System.Security.PermissionSet
      description: "選擇性的權限，如果授與，就會使用，但不需要的程式碼執行。"
    - id: denyPset
      type: System.Security.PermissionSet
      description: "必須永遠不會授與給程式碼即使其他原則允許的拒絕權限。"
    - id: denied
      type: System.Security.PermissionSet
      description: "輸出參數，其中包含未授與的權限集。"
    return:
      type: System.Security.PermissionSet
      description: "將安全性系統所授與的權限集。"
  overload: System.Security.SecurityManager.ResolvePolicy*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "這個方法會使用程式碼存取安全性 (CAS) 原則，也就是過時[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]。 若要啟用 CAS 原則的相容性與舊版.NET Framework，請使用[ &lt;legacyCasPolicy&gt;元素](../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md)。"
  - type: System.Security.Policy.PolicyException
    commentId: T:System.Security.Policy.PolicyException
    description: "若要授與所指定的最低必要權限的原則無法<code> reqdPset </code>參數。"
  platform:
  - net462
- uid: System.Security.SecurityManager.ResolvePolicyGroups(System.Security.Policy.Evidence)
  id: ResolvePolicyGroups(System.Security.Policy.Evidence)
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: ResolvePolicyGroups(Evidence)
  nameWithType: SecurityManager.ResolvePolicyGroups(Evidence)
  fullName: System.Security.SecurityManager.ResolvePolicyGroups(Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "取得符合指定的辨識項的程式碼群組的集合。"
  remarks: "這個方法是分析指定的原則組態的辨識項的特定類型的運作方式很有用。       程式碼群組將會傳回所有適用的層級的比對原則階層`evidence`參數。"
  syntax:
    content: public static System.Collections.IEnumerator ResolvePolicyGroups (System.Security.Policy.Evidence evidence);
    parameters:
    - id: evidence
      type: System.Security.Policy.Evidence
      description: "針對評估的原則設定的辨識項。"
    return:
      type: System.Collections.IEnumerator
      description: "比對的辨識項的程式碼群組的集合的列舉型別。"
  overload: System.Security.SecurityManager.ResolvePolicyGroups*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "這個方法會使用程式碼存取安全性 (CAS) 原則，也就是過時[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]。 若要啟用 CAS 原則的相容性與舊版.NET Framework，請使用[ &lt;legacyCasPolicy&gt;元素](../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md)。"
  platform:
  - net462
- uid: System.Security.SecurityManager.ResolveSystemPolicy(System.Security.Policy.Evidence)
  id: ResolveSystemPolicy(System.Security.Policy.Evidence)
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: ResolveSystemPolicy(Evidence)
  nameWithType: SecurityManager.ResolveSystemPolicy(Evidence)
  fullName: System.Security.SecurityManager.ResolveSystemPolicy(Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "決定哪些權限可授與程式碼以在指定的辨識項，但不包括如原則<xref href=&quot;System.AppDomain&quot;></xref>層級。"
  remarks: "這個方法會叫用的安全性原則引擎，並提供與呼叫程式碼識別的辨識項。 結果由系統安全性原則，不包含任何<xref:System.AppDomain>原則。</xref:System.AppDomain>"
  syntax:
    content: public static System.Security.PermissionSet ResolveSystemPolicy (System.Security.Policy.Evidence evidence);
    parameters:
    - id: evidence
      type: System.Security.Policy.Evidence
      description: "設定用來評估原則的辨識項。"
    return:
      type: System.Security.PermissionSet
      description: "安全性系統可授與的權限集。"
  overload: System.Security.SecurityManager.ResolveSystemPolicy*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "這個方法會使用程式碼存取安全性 (CAS) 原則，也就是過時[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]。 若要啟用 CAS 原則的相容性與舊版.NET Framework，請使用[ &lt;legacyCasPolicy&gt;元素](../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md)。"
  platform:
  - net462
- uid: System.Security.SecurityManager.SavePolicy
  id: SavePolicy
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: SavePolicy()
  nameWithType: SecurityManager.SavePolicy()
  fullName: System.Security.SecurityManager.SavePolicy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "儲存修改過的安全性原則狀態。"
  remarks: "這個方法會儲存原則，公開由<xref:System.Security.SecurityManager.PolicyHierarchy%2A>， <xref:System.Security.Policy.PolicyLevel>，和其他類別，代表安全性原則設定。</xref:System.Security.Policy.PolicyLevel> </xref:System.Security.SecurityManager.PolicyHierarchy%2A> 除非呼叫此方法時，原則物件所做的變更將不會儲存，而且不會影響後續的應用程式執行。"
  syntax:
    content: public static void SavePolicy ();
    parameters: []
  overload: System.Security.SecurityManager.SavePolicy*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "這個方法會使用程式碼存取安全性 (CAS) 原則，也就是過時[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]。 若要啟用 CAS 原則的相容性與舊版.NET Framework，請使用[ &lt;legacyCasPolicy&gt;元素](../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md)。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫這個方法的程式碼並沒有<xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.SecurityManager.SavePolicyLevel(System.Security.Policy.PolicyLevel)
  id: SavePolicyLevel(System.Security.Policy.PolicyLevel)
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: SavePolicyLevel(PolicyLevel)
  nameWithType: SecurityManager.SavePolicyLevel(PolicyLevel)
  fullName: System.Security.SecurityManager.SavePolicyLevel(PolicyLevel)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "儲存修改過的安全性原則層級使用<xref:System.Security.SecurityManager.LoadPolicyLevelFromFile*>.</xref:System.Security.SecurityManager.LoadPolicyLevelFromFile*>載入"
  remarks: "<xref:System.Security.Policy.PolicyLevel>將儲存到相同的位置，從其載入。</xref:System.Security.Policy.PolicyLevel>"
  syntax:
    content: public static void SavePolicyLevel (System.Security.Policy.PolicyLevel level);
    parameters:
    - id: level
      type: System.Security.Policy.PolicyLevel
      description: "要儲存的原則層級的物件。"
  overload: System.Security.SecurityManager.SavePolicyLevel*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫這個方法的程式碼並沒有<xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "這個方法會使用程式碼存取安全性 (CAS) 原則，也就是過時[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]。 若要啟用 CAS 原則的相容性與舊版.NET Framework，請使用[ &lt;legacyCasPolicy&gt;元素](../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md)。"
  platform:
  - net462
- uid: System.Security.SecurityManager.SecurityEnabled
  id: SecurityEnabled
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: SecurityEnabled
  nameWithType: SecurityManager.SecurityEnabled
  fullName: System.Security.SecurityManager.SecurityEnabled
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "取得或設定值，指出是否已啟用安全性。"
  remarks: "這個屬性供[Caspol.exe （程式碼存取安全性原則工具）](~/add/includes/ajax-current-ext-md.md) `-security` (`-s`) 若要關閉程式碼為基礎的安全性選項。              SecurityEnabled 可讓系統管理員停用程式碼存取安全性。 停用程式碼存取安全性時，所有的程式碼存取需求都會成功。 實際上，這會授與所有的程式碼`FullTrust`。 停用程式碼存取安全性會略過安全性系統，以便執行程式碼可能會稍微好一點比對等的安全性原則授與`FullTrust`所有程式碼。 這個屬性不會停用角色為基礎的安全性。因此，<xref:System.Security.Permissions.PrincipalPermission>要求不會受到影響。</xref:System.Security.Permissions.PrincipalPermission>      > [!CAUTION] > 停用程式碼存取安全性會讓系統容易受到攻擊的惡意程式碼，如病毒和破壞程式。 停用程式碼存取安全性不會自動封鎖任何方式執行的 managed 程式碼。 It 只會導致 managed 程式碼執行不受限制的程式碼存取安全性系統，以及應該只有在最極端謹慎執行。 關閉安全性，以取得額外的效能只應該已採取其他安全措施來協助保護系統安全性。 其他安全性措施的範例包括從公用網路中，實際方法保全電腦，中斷連結，並以此類推。       這個屬性的變更不會保存直到登錄中<xref:System.Security.SecurityManager.SavePolicy%2A>稱為。</xref:System.Security.SecurityManager.SavePolicy%2A> 新的處理序將不會受到變更之前它會保存在登錄中。 變更執行的處理序中的此屬性的值不一定會變更狀態以預期的方式。 若要確保變更已生效，您必須呼叫<xref:System.Security.SecurityManager.SavePolicy%2A>並啟動新的處理序。</xref:System.Security.SecurityManager.SavePolicy%2A>"
  syntax:
    content: public static bool SecurityEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已啟用安全性。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.SecurityManager.SecurityEnabled*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼叫這個方法的程式碼並沒有<xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.Policy.PolicyException
  parent: System.Security.Policy
  isExternal: false
  name: PolicyException
  nameWithType: PolicyException
  fullName: System.Security.Policy.PolicyException
- uid: System.Security.SecurityManager.CheckExecutionRights
  parent: System.Security.SecurityManager
  isExternal: false
  name: CheckExecutionRights
  nameWithType: SecurityManager.CheckExecutionRights
  fullName: System.Security.SecurityManager.CheckExecutionRights
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.SecurityManager.CurrentThreadRequiresSecurityContextCapture
  parent: System.Security.SecurityManager
  isExternal: false
  name: CurrentThreadRequiresSecurityContextCapture()
  nameWithType: SecurityManager.CurrentThreadRequiresSecurityContextCapture()
  fullName: System.Security.SecurityManager.CurrentThreadRequiresSecurityContextCapture()
- uid: System.Security.SecurityManager.GetStandardSandbox(System.Security.Policy.Evidence)
  parent: System.Security.SecurityManager
  isExternal: false
  name: GetStandardSandbox(Evidence)
  nameWithType: SecurityManager.GetStandardSandbox(Evidence)
  fullName: System.Security.SecurityManager.GetStandardSandbox(Evidence)
- uid: System.Security.PermissionSet
  parent: System.Security
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
- uid: System.Security.Policy.Evidence
  parent: System.Security.Policy
  isExternal: false
  name: Evidence
  nameWithType: Evidence
  fullName: System.Security.Policy.Evidence
- uid: System.Security.SecurityManager.GetZoneAndOrigin(System.Collections.ArrayList@,System.Collections.ArrayList@)
  parent: System.Security.SecurityManager
  isExternal: false
  name: GetZoneAndOrigin(ArrayList,ArrayList)
  nameWithType: SecurityManager.GetZoneAndOrigin(ArrayList,ArrayList)
  fullName: System.Security.SecurityManager.GetZoneAndOrigin(ArrayList,ArrayList)
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Security.SecurityManager.IsGranted(System.Security.IPermission)
  parent: System.Security.SecurityManager
  isExternal: false
  name: IsGranted(IPermission)
  nameWithType: SecurityManager.IsGranted(IPermission)
  fullName: System.Security.SecurityManager.IsGranted(IPermission)
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.SecurityManager.LoadPolicyLevelFromFile(System.String,System.Security.PolicyLevelType)
  parent: System.Security.SecurityManager
  isExternal: false
  name: LoadPolicyLevelFromFile(String,PolicyLevelType)
  nameWithType: SecurityManager.LoadPolicyLevelFromFile(String,PolicyLevelType)
  fullName: System.Security.SecurityManager.LoadPolicyLevelFromFile(String,PolicyLevelType)
- uid: System.Security.Policy.PolicyLevel
  parent: System.Security.Policy
  isExternal: false
  name: PolicyLevel
  nameWithType: PolicyLevel
  fullName: System.Security.Policy.PolicyLevel
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.PolicyLevelType
  parent: System.Security
  isExternal: false
  name: PolicyLevelType
  nameWithType: PolicyLevelType
  fullName: System.Security.PolicyLevelType
- uid: System.Security.SecurityManager.LoadPolicyLevelFromString(System.String,System.Security.PolicyLevelType)
  parent: System.Security.SecurityManager
  isExternal: false
  name: LoadPolicyLevelFromString(String,PolicyLevelType)
  nameWithType: SecurityManager.LoadPolicyLevelFromString(String,PolicyLevelType)
  fullName: System.Security.SecurityManager.LoadPolicyLevelFromString(String,PolicyLevelType)
- uid: System.Security.SecurityManager.PolicyHierarchy
  parent: System.Security.SecurityManager
  isExternal: false
  name: PolicyHierarchy()
  nameWithType: SecurityManager.PolicyHierarchy()
  fullName: System.Security.SecurityManager.PolicyHierarchy()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence)
  parent: System.Security.SecurityManager
  isExternal: false
  name: ResolvePolicy(Evidence)
  nameWithType: SecurityManager.ResolvePolicy(Evidence)
  fullName: System.Security.SecurityManager.ResolvePolicy(Evidence)
- uid: System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence[])
  parent: System.Security.SecurityManager
  isExternal: false
  name: ResolvePolicy(Evidence[])
  nameWithType: SecurityManager.ResolvePolicy(Evidence[])
  fullName: System.Security.SecurityManager.ResolvePolicy(Evidence[])
- uid: System.Security.Policy.Evidence[]
  parent: System.Security.Policy
  isExternal: false
  name: Evidence
  nameWithType: Evidence
  fullName: System.Security.Policy.Evidence[]
  spec.csharp:
  - uid: System.Security.Policy.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: Evidence[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet@)
  parent: System.Security.SecurityManager
  isExternal: false
  name: ResolvePolicy(Evidence,PermissionSet,PermissionSet,PermissionSet,PermissionSet)
  nameWithType: SecurityManager.ResolvePolicy(Evidence,PermissionSet,PermissionSet,PermissionSet,PermissionSet)
  fullName: System.Security.SecurityManager.ResolvePolicy(Evidence,PermissionSet,PermissionSet,PermissionSet,PermissionSet)
- uid: System.Security.SecurityManager.ResolvePolicyGroups(System.Security.Policy.Evidence)
  parent: System.Security.SecurityManager
  isExternal: false
  name: ResolvePolicyGroups(Evidence)
  nameWithType: SecurityManager.ResolvePolicyGroups(Evidence)
  fullName: System.Security.SecurityManager.ResolvePolicyGroups(Evidence)
- uid: System.Security.SecurityManager.ResolveSystemPolicy(System.Security.Policy.Evidence)
  parent: System.Security.SecurityManager
  isExternal: false
  name: ResolveSystemPolicy(Evidence)
  nameWithType: SecurityManager.ResolveSystemPolicy(Evidence)
  fullName: System.Security.SecurityManager.ResolveSystemPolicy(Evidence)
- uid: System.Security.SecurityManager.SavePolicy
  parent: System.Security.SecurityManager
  isExternal: false
  name: SavePolicy()
  nameWithType: SecurityManager.SavePolicy()
  fullName: System.Security.SecurityManager.SavePolicy()
- uid: System.Security.SecurityManager.SavePolicyLevel(System.Security.Policy.PolicyLevel)
  parent: System.Security.SecurityManager
  isExternal: false
  name: SavePolicyLevel(PolicyLevel)
  nameWithType: SecurityManager.SavePolicyLevel(PolicyLevel)
  fullName: System.Security.SecurityManager.SavePolicyLevel(PolicyLevel)
- uid: System.Security.SecurityManager.SecurityEnabled
  parent: System.Security.SecurityManager
  isExternal: false
  name: SecurityEnabled
  nameWithType: SecurityManager.SecurityEnabled
  fullName: System.Security.SecurityManager.SecurityEnabled
- uid: System.Security.SecurityManager.CheckExecutionRights*
  parent: System.Security.SecurityManager
  isExternal: false
  name: CheckExecutionRights
  nameWithType: SecurityManager.CheckExecutionRights
- uid: System.Security.SecurityManager.CurrentThreadRequiresSecurityContextCapture*
  parent: System.Security.SecurityManager
  isExternal: false
  name: CurrentThreadRequiresSecurityContextCapture
  nameWithType: SecurityManager.CurrentThreadRequiresSecurityContextCapture
- uid: System.Security.SecurityManager.GetStandardSandbox*
  parent: System.Security.SecurityManager
  isExternal: false
  name: GetStandardSandbox
  nameWithType: SecurityManager.GetStandardSandbox
- uid: System.Security.SecurityManager.GetZoneAndOrigin*
  parent: System.Security.SecurityManager
  isExternal: false
  name: GetZoneAndOrigin
  nameWithType: SecurityManager.GetZoneAndOrigin
- uid: System.Security.SecurityManager.IsGranted*
  parent: System.Security.SecurityManager
  isExternal: false
  name: IsGranted
  nameWithType: SecurityManager.IsGranted
- uid: System.Security.SecurityManager.LoadPolicyLevelFromFile*
  parent: System.Security.SecurityManager
  isExternal: false
  name: LoadPolicyLevelFromFile
  nameWithType: SecurityManager.LoadPolicyLevelFromFile
- uid: System.Security.SecurityManager.LoadPolicyLevelFromString*
  parent: System.Security.SecurityManager
  isExternal: false
  name: LoadPolicyLevelFromString
  nameWithType: SecurityManager.LoadPolicyLevelFromString
- uid: System.Security.SecurityManager.PolicyHierarchy*
  parent: System.Security.SecurityManager
  isExternal: false
  name: PolicyHierarchy
  nameWithType: SecurityManager.PolicyHierarchy
- uid: System.Security.SecurityManager.ResolvePolicy*
  parent: System.Security.SecurityManager
  isExternal: false
  name: ResolvePolicy
  nameWithType: SecurityManager.ResolvePolicy
- uid: System.Security.SecurityManager.ResolvePolicyGroups*
  parent: System.Security.SecurityManager
  isExternal: false
  name: ResolvePolicyGroups
  nameWithType: SecurityManager.ResolvePolicyGroups
- uid: System.Security.SecurityManager.ResolveSystemPolicy*
  parent: System.Security.SecurityManager
  isExternal: false
  name: ResolveSystemPolicy
  nameWithType: SecurityManager.ResolveSystemPolicy
- uid: System.Security.SecurityManager.SavePolicy*
  parent: System.Security.SecurityManager
  isExternal: false
  name: SavePolicy
  nameWithType: SecurityManager.SavePolicy
- uid: System.Security.SecurityManager.SavePolicyLevel*
  parent: System.Security.SecurityManager
  isExternal: false
  name: SavePolicyLevel
  nameWithType: SecurityManager.SavePolicyLevel
- uid: System.Security.SecurityManager.SecurityEnabled*
  parent: System.Security.SecurityManager
  isExternal: false
  name: SecurityEnabled
  nameWithType: SecurityManager.SecurityEnabled
