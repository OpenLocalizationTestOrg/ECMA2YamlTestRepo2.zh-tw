### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.PrivilegeNotHeldException
  id: PrivilegeNotHeldException
  children:
  - System.Security.AccessControl.PrivilegeNotHeldException.#ctor
  - System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String)
  - System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String,System.Exception)
  - System.Security.AccessControl.PrivilegeNotHeldException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeName
  langs:
  - csharp
  name: PrivilegeNotHeldException
  nameWithType: PrivilegeNotHeldException
  fullName: System.Security.AccessControl.PrivilegeNotHeldException
  type: Class
  summary: "中的方法時擲回的例外狀況<xref href=&quot;System.Security.AccessControl&quot;></xref>命名空間會嘗試啟用不需要的權限。"
  syntax:
    content: 'public sealed class PrivilegeNotHeldException : UnauthorizedAccessException'
  inheritance:
  - System.UnauthorizedAccessException
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.AccessControl.PrivilegeNotHeldException.#ctor
  id: '#ctor'
  parent: System.Security.AccessControl.PrivilegeNotHeldException
  langs:
  - csharp
  name: PrivilegeNotHeldException()
  nameWithType: PrivilegeNotHeldException.PrivilegeNotHeldException()
  fullName: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeNotHeldException()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "初始化的新執行個體<xref href=&quot;System.Security.AccessControl.PrivilegeNotHeldException&quot;></xref>類別。"
  syntax:
    content: public PrivilegeNotHeldException ();
    parameters: []
  overload: System.Security.AccessControl.PrivilegeNotHeldException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.AccessControl.PrivilegeNotHeldException
  langs:
  - csharp
  name: PrivilegeNotHeldException(String)
  nameWithType: PrivilegeNotHeldException.PrivilegeNotHeldException(String)
  fullName: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeNotHeldException(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "初始化的新執行個體<xref href=&quot;System.Security.AccessControl.PrivilegeNotHeldException&quot;></xref>使用指定的權限的類別。"
  syntax:
    content: public PrivilegeNotHeldException (string privilege);
    parameters:
    - id: privilege
      type: System.String
      description: "未啟用特殊權限。"
  overload: System.Security.AccessControl.PrivilegeNotHeldException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.Security.AccessControl.PrivilegeNotHeldException
  langs:
  - csharp
  name: PrivilegeNotHeldException(String,Exception)
  nameWithType: PrivilegeNotHeldException.PrivilegeNotHeldException(String,Exception)
  fullName: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeNotHeldException(String,Exception)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "初始化的新執行個體<xref href=&quot;System.Security.AccessControl.PrivilegeNotHeldException&quot;></xref>使用指定的例外狀況類別。"
  syntax:
    content: public PrivilegeNotHeldException (string privilege, Exception inner);
    parameters:
    - id: privilege
      type: System.String
      description: "未啟用特殊權限。"
    - id: inner
      type: System.Exception
      description: "造成目前例外狀況的例外狀況。 如果`innerException`參數不是 null 參考 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>在 Visual Basic 中)，目前的例外狀況會在引發<xref uid=&quot;langword_csharp_catch&quot; name=&quot;catch&quot; href=&quot;&quot;></xref>處理內部例外狀況區塊。"
  overload: System.Security.AccessControl.PrivilegeNotHeldException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.PrivilegeNotHeldException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.AccessControl.PrivilegeNotHeldException
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: PrivilegeNotHeldException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.AccessControl.PrivilegeNotHeldException.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "設定<code> info </code>例外狀況的相關資訊的參數。"
  syntax:
    content: public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>其中保存有關擲回例外狀況的序列化的物件資料。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "<xref:System.Runtime.Serialization.StreamingContext>其中包含關於來源或目的端內容資訊。</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Security.AccessControl.PrivilegeNotHeldException.GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeName
  id: PrivilegeName
  parent: System.Security.AccessControl.PrivilegeNotHeldException
  langs:
  - csharp
  name: PrivilegeName
  nameWithType: PrivilegeNotHeldException.PrivilegeName
  fullName: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "取得未啟用的權限的名稱。"
  syntax:
    content: public string PrivilegeName { get; }
    return:
      type: System.String
      description: "此方法無法啟用權限的名稱。"
  overload: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.UnauthorizedAccessException
  isExternal: false
  name: System.UnauthorizedAccessException
- uid: System.Security.AccessControl.PrivilegeNotHeldException.#ctor
  parent: System.Security.AccessControl.PrivilegeNotHeldException
  isExternal: false
  name: PrivilegeNotHeldException()
  nameWithType: PrivilegeNotHeldException.PrivilegeNotHeldException()
  fullName: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeNotHeldException()
- uid: System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String)
  parent: System.Security.AccessControl.PrivilegeNotHeldException
  isExternal: false
  name: PrivilegeNotHeldException(String)
  nameWithType: PrivilegeNotHeldException.PrivilegeNotHeldException(String)
  fullName: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeNotHeldException(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String,System.Exception)
  parent: System.Security.AccessControl.PrivilegeNotHeldException
  isExternal: false
  name: PrivilegeNotHeldException(String,Exception)
  nameWithType: PrivilegeNotHeldException.PrivilegeNotHeldException(String,Exception)
  fullName: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeNotHeldException(String,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Security.AccessControl.PrivilegeNotHeldException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.AccessControl.PrivilegeNotHeldException
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: PrivilegeNotHeldException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.AccessControl.PrivilegeNotHeldException.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeName
  parent: System.Security.AccessControl.PrivilegeNotHeldException
  isExternal: false
  name: PrivilegeName
  nameWithType: PrivilegeNotHeldException.PrivilegeName
  fullName: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeName
- uid: System.Security.AccessControl.PrivilegeNotHeldException.#ctor*
  parent: System.Security.AccessControl.PrivilegeNotHeldException
  isExternal: false
  name: PrivilegeNotHeldException
  nameWithType: PrivilegeNotHeldException.PrivilegeNotHeldException
- uid: System.Security.AccessControl.PrivilegeNotHeldException.GetObjectData*
  parent: System.Security.AccessControl.PrivilegeNotHeldException
  isExternal: false
  name: GetObjectData
  nameWithType: PrivilegeNotHeldException.GetObjectData
- uid: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeName*
  parent: System.Security.AccessControl.PrivilegeNotHeldException
  isExternal: false
  name: PrivilegeName
  nameWithType: PrivilegeNotHeldException.PrivilegeName
