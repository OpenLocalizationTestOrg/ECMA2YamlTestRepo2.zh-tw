### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlEntity
  id: XmlEntity
  children:
  - System.Xml.XmlEntity.BaseURI
  - System.Xml.XmlEntity.CloneNode(System.Boolean)
  - System.Xml.XmlEntity.InnerText
  - System.Xml.XmlEntity.InnerXml
  - System.Xml.XmlEntity.IsReadOnly
  - System.Xml.XmlEntity.LocalName
  - System.Xml.XmlEntity.Name
  - System.Xml.XmlEntity.NodeType
  - System.Xml.XmlEntity.NotationName
  - System.Xml.XmlEntity.OuterXml
  - System.Xml.XmlEntity.PublicId
  - System.Xml.XmlEntity.SystemId
  - System.Xml.XmlEntity.WriteContentTo(System.Xml.XmlWriter)
  - System.Xml.XmlEntity.WriteTo(System.Xml.XmlWriter)
  langs:
  - csharp
  name: XmlEntity
  nameWithType: XmlEntity
  fullName: System.Xml.XmlEntity
  type: Class
  summary: "代表實體宣告，例如&lt;！實體...&gt;."
  syntax:
    content: 'public class XmlEntity : System.Xml.XmlNode'
  inheritance:
  - System.Object
  - System.Xml.XmlNode
  implements: []
  inheritedMembers:
  - System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.Attributes
  - System.Xml.XmlNode.ChildNodes
  - System.Xml.XmlNode.Clone
  - System.Xml.XmlNode.CreateNavigator
  - System.Xml.XmlNode.FirstChild
  - System.Xml.XmlNode.GetEnumerator
  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  - System.Xml.XmlNode.HasChildNodes
  - System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.Item(System.String)
  - System.Xml.XmlNode.Item(System.String,System.String)
  - System.Xml.XmlNode.LastChild
  - System.Xml.XmlNode.NamespaceURI
  - System.Xml.XmlNode.NextSibling
  - System.Xml.XmlNode.Normalize
  - System.Xml.XmlNode.OwnerDocument
  - System.Xml.XmlNode.ParentNode
  - System.Xml.XmlNode.Prefix
  - System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.PreviousSibling
  - System.Xml.XmlNode.PreviousText
  - System.Xml.XmlNode.RemoveAll
  - System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.SchemaInfo
  - System.Xml.XmlNode.SelectNodes(System.String)
  - System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.SelectSingleNode(System.String)
  - System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.Supports(System.String,System.String)
  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  - System.Xml.XmlNode.System#ICloneable#Clone
  - System.Xml.XmlNode.Value
  platform:
  - net462
- uid: System.Xml.XmlEntity.BaseURI
  id: BaseURI
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: BaseURI
  nameWithType: XmlEntity.BaseURI
  fullName: System.Xml.XmlEntity.BaseURI
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "取得目前節點基底統一資源識別元 (URI)。"
  remarks: "網路的 XML 文件使用不同的全球資訊網協會 (W3C) 標準包含機制彙總的資料區塊組成，並因此包含來自不同位置的節點。 `BaseURI`會告訴您這些節點的來源。       這個屬性的值視節點類型而異。 這是外部的 EntityReference 節點的子系節點傳回實體本身的位置。 例如，請考慮下列的 XML 文件︰```   <!DOCTYPE item [   <!ENTITY xyz SYSTEM &quot;a/b.xml&quot;>   ]>   <item num=&quot;123&quot;>&xyz;</item>   ```其中外部實體`a/b.xml`包含 XML 文字`<test>123</test>`。       如果文件從 http://server/mydata.xml，載入`BaseURI`會傳回下列: |NodeType |名稱 |BaseURI |  |--------------|----------|-------------|  |屬性 | num | http://server/mydata.xml |  |文件 | #document | http://server/mydata.xml |  |DocumentType | 項目 | http://server/mydata.xml |  |實體 | xyz | http://server/mydata.xml |  |項目 | 項目 | http://server/mydata.xml |  |EntityReference | xyz | http://server/mydata.xml |  |項目 | 測試 | http://server/a/b.xml |  |文字 | #text | http://server/a/b.xml |      `BaseURI`尋找實體參考界限，因此如果擴充實體，這項資訊不會保留，而且此屬性傳回的位置`XmlDocument`在所有情況下的物件。       在第二個範例中，指定下列的 XML 文件︰```   <!DOCTYPE Mydata SYSTEM &quot;http://localhost/doctype.dtd&quot;>   <baa>&xyz;</baa>   ```文件類型定義 (DTD) 檔案中包含下列︰```   <!ENTITY xyz &quot;<E1>My Data</E1>&quot;>   <!ELEMENT baa #PCDATA>   <!ATTLIST baa attr1 &quot;woof&quot;>   ```如果自 http://localhost/mydata.xml，載入 XML 文件`BaseURI`會傳回下列每個節點: |NodeType |名稱 |BaseURI |  |--------------|----------|-------------|  |文件 | #document | http://localhost/mydata.xml |  |DocumentType |Mydata | http://localhost/doctype.dtd |  |項目 | baa | http://localhost/mydata.xml |  |實體 | xyz | http://localhost/doctype.dtd |  |EntityReference | xyz | http://localhost/mydata.xml |  |屬性 | woof | http://localhost/mydata.xml |     > [!NOTE] > 的預設屬性的基底 URI 等同於其所屬元素的基底 URI。       這個屬性是 Microsoft 擴充功能的文件物件模型 (DOM)。"
  syntax:
    content: public override string BaseURI { get; }
    return:
      type: System.String
      description: "節點載入的位置。"
  overload: System.Xml.XmlEntity.BaseURI*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlEntity.CloneNode(System.Boolean)
  id: CloneNode(System.Boolean)
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: CloneNode(Boolean)
  nameWithType: XmlEntity.CloneNode(Boolean)
  fullName: System.Xml.XmlEntity.CloneNode(Boolean)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "建立這個節點的複本。 無法複製實體節點。 呼叫這個方法在<xref href=&quot;System.Xml.XmlEntity&quot;></xref>物件擲回例外狀況。"
  syntax:
    content: public override System.Xml.XmlNode CloneNode (bool deep);
    parameters:
    - id: deep
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>以遞迴方式複製指定的節點; 下的樹狀子目錄<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>至只要複製節點本身。"
    return:
      type: System.Xml.XmlNode
      description: "傳回一份<xref href=&quot;System.Xml.XmlNode&quot;></xref>從呼叫的方法。"
  overload: System.Xml.XmlEntity.CloneNode*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "無法複製實體節點。 呼叫這個方法在<xref href=&quot;System.Xml.XmlEntity&quot;></xref>物件擲回例外狀況。"
  platform:
  - net462
- uid: System.Xml.XmlEntity.InnerText
  id: InnerText
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: InnerText
  nameWithType: XmlEntity.InnerText
  fullName: System.Xml.XmlEntity.InnerText
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "取得實體節點及其所有子系的串連的值。"
  remarks: "`XmlEntity`節點是唯讀的。 設定這個屬性會擲回例外狀況。       這個屬性是 Microsoft 擴充功能的文件物件模型 (DOM)。"
  syntax:
    content: public override string InnerText { get; set; }
    return:
      type: System.String
      description: "節點及其所有子系的串連的值。"
  overload: System.Xml.XmlEntity.InnerText*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "嘗試設定屬性。"
  platform:
  - net462
- uid: System.Xml.XmlEntity.InnerXml
  id: InnerXml
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: InnerXml
  nameWithType: XmlEntity.InnerXml
  fullName: System.Xml.XmlEntity.InnerXml
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "取得表示這個節點的子系的標記。"
  remarks: "`XmlEntity`節點是唯讀的。 設定這個屬性會擲回例外狀況。       這個屬性是 Microsoft 擴充功能的文件物件模型 (DOM)。"
  syntax:
    content: public override string InnerXml { get; set; }
    return:
      type: System.String
      description: "如<xref uid=&quot;langword_csharp_XmlEntity&quot; name=&quot;XmlEntity&quot; href=&quot;&quot;></xref>節點，就會傳回 String.Empty。"
  overload: System.Xml.XmlEntity.InnerXml*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "嘗試設定屬性。"
  platform:
  - net462
- uid: System.Xml.XmlEntity.IsReadOnly
  id: IsReadOnly
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: XmlEntity.IsReadOnly
  fullName: System.Xml.XmlEntity.IsReadOnly
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "取得值，表示節點是否為唯讀。"
  remarks: "無法變更其屬性、 屬性或子系是唯讀的節點。 您可以從樹狀目錄移除唯讀節點，然後插入該子其他地方。"
  syntax:
    content: public override bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果節點是唯讀的。否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。       因為<xref uid=&quot;langword_csharp_XmlEntity&quot; name=&quot;XmlEntity&quot; href=&quot;&quot;></xref>節點是唯讀，這個屬性永遠會傳回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.XmlEntity.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlEntity.LocalName
  id: LocalName
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: LocalName
  nameWithType: XmlEntity.LocalName
  fullName: System.Xml.XmlEntity.LocalName
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "取得不含命名空間前置詞的節點名稱。"
  syntax:
    content: public override string LocalName { get; }
    return:
      type: System.String
      description: "如<xref uid=&quot;langword_csharp_XmlEntity&quot; name=&quot;XmlEntity&quot; href=&quot;&quot;></xref>節點，這個屬性會傳回實體的名稱。"
  overload: System.Xml.XmlEntity.LocalName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlEntity.Name
  id: Name
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: Name
  nameWithType: XmlEntity.Name
  fullName: System.Xml.XmlEntity.Name
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "取得節點的名稱。"
  remarks: ''
  example:
  - "The following example displays information on the entities declared in the XML document.  \n  \n [!code-cs[XmlEntity#1](~/add/codesnippet/csharp/p-system.xml.xmlentity.n_2_1.cs)]\n [!code-cpp[XmlEntity#1](~/add/codesnippet/cpp/p-system.xml.xmlentity.n_2_1.cpp)]\n [!code-vb[XmlEntity#1](~/add/codesnippet/visualbasic/p-system.xml.xmlentity.n_2_1.vb)]  \n  \n The example uses the file `doment.xml` as input.  \n  \n [!code-xml[XmlEntity#2](~/add/codesnippet/xml/p-system.xml.xmlentity.n_2_2.xml)]"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: "實體的名稱。"
  overload: System.Xml.XmlEntity.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlEntity.NodeType
  id: NodeType
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: NodeType
  nameWithType: XmlEntity.NodeType
  fullName: System.Xml.XmlEntity.NodeType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "取得節點的類型。"
  remarks: ''
  example:
  - "The following example displays information on the entities declared in the XML document.  \n  \n [!code-cs[XmlEntity#1](~/add/codesnippet/csharp/p-system.xml.xmlentity.n_1_1.cs)]\n [!code-cpp[XmlEntity#1](~/add/codesnippet/cpp/p-system.xml.xmlentity.n_1_1.cpp)]\n [!code-vb[XmlEntity#1](~/add/codesnippet/visualbasic/p-system.xml.xmlentity.n_1_1.vb)]  \n  \n The example uses the file `doment.xml` as input.  \n  \n [!code-xml[XmlEntity#2](~/add/codesnippet/xml/p-system.xml.xmlentity.n_1_2.xml)]"
  syntax:
    content: public override System.Xml.XmlNodeType NodeType { get; }
    return:
      type: System.Xml.XmlNodeType
      description: "節點類型。 如<xref uid=&quot;langword_csharp_XmlEntity&quot; name=&quot;XmlEntity&quot; href=&quot;&quot;></xref>節點，值為 XmlNodeType.Entity。"
  overload: System.Xml.XmlEntity.NodeType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlEntity.NotationName
  id: NotationName
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: NotationName
  nameWithType: XmlEntity.NotationName
  fullName: System.Xml.XmlEntity.NotationName
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "取得實體宣告上的選擇性 NDATA 屬性的名稱。"
  remarks: ''
  example:
  - "The following example displays information on the entities declared in the XML document.  \n  \n [!code-cs[XmlEntity#1](~/add/codesnippet/csharp/p-system.xml.xmlentity.n_0_1.cs)]\n [!code-cpp[XmlEntity#1](~/add/codesnippet/cpp/p-system.xml.xmlentity.n_0_1.cpp)]\n [!code-vb[XmlEntity#1](~/add/codesnippet/visualbasic/p-system.xml.xmlentity.n_0_1.vb)]  \n  \n The example uses the file, `doment.xml`, as input.  \n  \n [!code-xml[XmlEntity#2](~/add/codesnippet/xml/p-system.xml.xmlentity.n_0_2.xml)]"
  syntax:
    content: public string NotationName { get; }
    return:
      type: System.String
      description: "NDATA 屬性的名稱。 如果沒有任何 NDATA， <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>傳回。"
  overload: System.Xml.XmlEntity.NotationName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlEntity.OuterXml
  id: OuterXml
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: OuterXml
  nameWithType: XmlEntity.OuterXml
  fullName: System.Xml.XmlEntity.OuterXml
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "取得表示這個節點及其所有子系的標記。"
  remarks: "這個屬性是 Microsoft 擴充功能的文件物件模型 (DOM)。"
  syntax:
    content: public override string OuterXml { get; }
    return:
      type: System.String
      description: "如<xref uid=&quot;langword_csharp_XmlEntity&quot; name=&quot;XmlEntity&quot; href=&quot;&quot;></xref>節點，就會傳回 String.Empty。"
  overload: System.Xml.XmlEntity.OuterXml*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlEntity.PublicId
  id: PublicId
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: PublicId
  nameWithType: XmlEntity.PublicId
  fullName: System.Xml.XmlEntity.PublicId
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "在實體宣告中取得的公用識別項的值。"
  remarks: ''
  example:
  - "The following example displays information on the entities declared in the XML document.  \n  \n [!code-cs[XmlEntity#1](~/add/codesnippet/csharp/p-system.xml.xmlentity.p_1.cs)]\n [!code-cpp[XmlEntity#1](~/add/codesnippet/cpp/p-system.xml.xmlentity.p_1.cpp)]\n [!code-vb[XmlEntity#1](~/add/codesnippet/visualbasic/p-system.xml.xmlentity.p_1.vb)]  \n  \n The example uses the file, `doment.xml`, as input.  \n  \n [!code-xml[XmlEntity#2](~/add/codesnippet/xml/p-system.xml.xmlentity.p_2.xml)]"
  syntax:
    content: public string PublicId { get; }
    return:
      type: System.String
      description: "在實體上的公用識別項。 如果沒有公用識別項， <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>傳回。"
  overload: System.Xml.XmlEntity.PublicId*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlEntity.SystemId
  id: SystemId
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: SystemId
  nameWithType: XmlEntity.SystemId
  fullName: System.Xml.XmlEntity.SystemId
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "取得實體宣告上的系統識別碼值。"
  remarks: ''
  example:
  - "The following example displays information on the entities declared in the XML document.  \n  \n [!code-cs[XmlEntity#1](~/add/codesnippet/csharp/p-system.xml.xmlentity.s_1.cs)]\n [!code-cpp[XmlEntity#1](~/add/codesnippet/cpp/p-system.xml.xmlentity.s_1.cpp)]\n [!code-vb[XmlEntity#1](~/add/codesnippet/visualbasic/p-system.xml.xmlentity.s_1.vb)]  \n  \n The example uses the file `doment.xml` as input.  \n  \n [!code-xml[XmlEntity#2](~/add/codesnippet/xml/p-system.xml.xmlentity.s_2.xml)]"
  syntax:
    content: public string SystemId { get; }
    return:
      type: System.String
      description: "實體系統識別項。 如果沒有系統識別項， <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>傳回。"
  overload: System.Xml.XmlEntity.SystemId*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlEntity.WriteContentTo(System.Xml.XmlWriter)
  id: WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlEntity.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlEntity.WriteContentTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "將節點的所有子系儲存到指定<xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> 如<xref uid=&quot;langword_csharp_XmlEntity&quot; name=&quot;XmlEntity&quot; href=&quot;&quot;></xref>節點，這個方法沒有任何作用。"
  remarks: "這個方法是 Microsoft 擴充功能的文件物件模型 (DOM)。"
  syntax:
    content: public override void WriteContentTo (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "<xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref>至您要儲存。"
  overload: System.Xml.XmlEntity.WriteContentTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlEntity.WriteTo(System.Xml.XmlWriter)
  id: WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlEntity
  langs:
  - csharp
  name: WriteTo(XmlWriter)
  nameWithType: XmlEntity.WriteTo(XmlWriter)
  fullName: System.Xml.XmlEntity.WriteTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "將節點儲存至指定<xref:System.Xml.XmlWriter>。</xref:System.Xml.XmlWriter> 如<xref uid=&quot;langword_csharp_XmlEntity&quot; name=&quot;XmlEntity&quot; href=&quot;&quot;></xref>節點，這個方法沒有任何作用。"
  remarks: "這個方法是 Microsoft 擴充功能的文件物件模型 (DOM)。"
  syntax:
    content: public override void WriteTo (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "<xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref>至您要儲存。"
  overload: System.Xml.XmlEntity.WriteTo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Xml.XmlNode
  isExternal: false
  name: System.Xml.XmlNode
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Xml.XmlEntity.BaseURI
  parent: System.Xml.XmlEntity
  isExternal: false
  name: BaseURI
  nameWithType: XmlEntity.BaseURI
  fullName: System.Xml.XmlEntity.BaseURI
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlEntity.CloneNode(System.Boolean)
  parent: System.Xml.XmlEntity
  isExternal: false
  name: CloneNode(Boolean)
  nameWithType: XmlEntity.CloneNode(Boolean)
  fullName: System.Xml.XmlEntity.CloneNode(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlEntity.InnerText
  parent: System.Xml.XmlEntity
  isExternal: false
  name: InnerText
  nameWithType: XmlEntity.InnerText
  fullName: System.Xml.XmlEntity.InnerText
- uid: System.Xml.XmlEntity.InnerXml
  parent: System.Xml.XmlEntity
  isExternal: false
  name: InnerXml
  nameWithType: XmlEntity.InnerXml
  fullName: System.Xml.XmlEntity.InnerXml
- uid: System.Xml.XmlEntity.IsReadOnly
  parent: System.Xml.XmlEntity
  isExternal: false
  name: IsReadOnly
  nameWithType: XmlEntity.IsReadOnly
  fullName: System.Xml.XmlEntity.IsReadOnly
- uid: System.Xml.XmlEntity.LocalName
  parent: System.Xml.XmlEntity
  isExternal: false
  name: LocalName
  nameWithType: XmlEntity.LocalName
  fullName: System.Xml.XmlEntity.LocalName
- uid: System.Xml.XmlEntity.Name
  parent: System.Xml.XmlEntity
  isExternal: false
  name: Name
  nameWithType: XmlEntity.Name
  fullName: System.Xml.XmlEntity.Name
- uid: System.Xml.XmlEntity.NodeType
  parent: System.Xml.XmlEntity
  isExternal: false
  name: NodeType
  nameWithType: XmlEntity.NodeType
  fullName: System.Xml.XmlEntity.NodeType
- uid: System.Xml.XmlNodeType
  parent: System.Xml
  isExternal: true
  name: XmlNodeType
  nameWithType: XmlNodeType
  fullName: System.Xml.XmlNodeType
- uid: System.Xml.XmlEntity.NotationName
  parent: System.Xml.XmlEntity
  isExternal: false
  name: NotationName
  nameWithType: XmlEntity.NotationName
  fullName: System.Xml.XmlEntity.NotationName
- uid: System.Xml.XmlEntity.OuterXml
  parent: System.Xml.XmlEntity
  isExternal: false
  name: OuterXml
  nameWithType: XmlEntity.OuterXml
  fullName: System.Xml.XmlEntity.OuterXml
- uid: System.Xml.XmlEntity.PublicId
  parent: System.Xml.XmlEntity
  isExternal: false
  name: PublicId
  nameWithType: XmlEntity.PublicId
  fullName: System.Xml.XmlEntity.PublicId
- uid: System.Xml.XmlEntity.SystemId
  parent: System.Xml.XmlEntity
  isExternal: false
  name: SystemId
  nameWithType: XmlEntity.SystemId
  fullName: System.Xml.XmlEntity.SystemId
- uid: System.Xml.XmlEntity.WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlEntity
  isExternal: false
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlEntity.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlEntity.WriteContentTo(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml.XmlEntity.WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlEntity
  isExternal: false
  name: WriteTo(XmlWriter)
  nameWithType: XmlEntity.WriteTo(XmlWriter)
  fullName: System.Xml.XmlEntity.WriteTo(XmlWriter)
- uid: System.Xml.XmlEntity.BaseURI*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: BaseURI
  nameWithType: XmlEntity.BaseURI
- uid: System.Xml.XmlEntity.CloneNode*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: CloneNode
  nameWithType: XmlEntity.CloneNode
- uid: System.Xml.XmlEntity.InnerText*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: InnerText
  nameWithType: XmlEntity.InnerText
- uid: System.Xml.XmlEntity.InnerXml*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: InnerXml
  nameWithType: XmlEntity.InnerXml
- uid: System.Xml.XmlEntity.IsReadOnly*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: IsReadOnly
  nameWithType: XmlEntity.IsReadOnly
- uid: System.Xml.XmlEntity.LocalName*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: LocalName
  nameWithType: XmlEntity.LocalName
- uid: System.Xml.XmlEntity.Name*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: Name
  nameWithType: XmlEntity.Name
- uid: System.Xml.XmlEntity.NodeType*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: NodeType
  nameWithType: XmlEntity.NodeType
- uid: System.Xml.XmlEntity.NotationName*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: NotationName
  nameWithType: XmlEntity.NotationName
- uid: System.Xml.XmlEntity.OuterXml*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: OuterXml
  nameWithType: XmlEntity.OuterXml
- uid: System.Xml.XmlEntity.PublicId*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: PublicId
  nameWithType: XmlEntity.PublicId
- uid: System.Xml.XmlEntity.SystemId*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: SystemId
  nameWithType: XmlEntity.SystemId
- uid: System.Xml.XmlEntity.WriteContentTo*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: WriteContentTo
  nameWithType: XmlEntity.WriteContentTo
- uid: System.Xml.XmlEntity.WriteTo*
  parent: System.Xml.XmlEntity
  isExternal: false
  name: WriteTo
  nameWithType: XmlEntity.WriteTo
