### YamlMime:ManagedReference
items:
- uid: System.IO.Log.FileRegion
  id: FileRegion
  children:
  - System.IO.Log.FileRegion.FileLength
  - System.IO.Log.FileRegion.GetStream
  - System.IO.Log.FileRegion.Offset
  - System.IO.Log.FileRegion.Path
  langs:
  - csharp
  name: FileRegion
  nameWithType: FileRegion
  fullName: System.IO.Log.FileRegion
  type: Class
  summary: "代表要封存之檔案的區域。 這個類別無法被繼承。"
  remarks: "<xref:System.IO.Log.LogArchiveSnapshot>物件包含產生<xref:System.IO.Log.LogStore>.</xref:System.IO.Log.LogStore>中的資料保持一致的備份所需的資訊</xref:System.IO.Log.LogArchiveSnapshot> 所傳回的 FileRegion 物件的可列舉集合中包含實際資料<xref:System.IO.Log.LogArchiveSnapshot.ArchiveRegions%2A>屬性。</xref:System.IO.Log.LogArchiveSnapshot.ArchiveRegions%2A> 每個 FileRegion 執行個體代表必須封存之檔案中的位元組序列。"
  example:
  - "The following example demonstrates how to archive a log store to XML using the <xref:System.IO.Log.LogStore> and FileRegion classes.  \n  \n [!code-vb[FileRegion#0](~/add/codesnippet/visualbasic/t-system.io.log.fileregion_1.vb)]\n [!code-cs[FileRegion#0](~/add/codesnippet/csharp/t-system.io.log.fileregion_1.cs)]"
  syntax:
    content: public sealed class FileRegion
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Log.FileRegion.FileLength
  id: FileLength
  parent: System.IO.Log.FileRegion
  langs:
  - csharp
  name: FileLength
  nameWithType: FileRegion.FileLength
  fullName: System.IO.Log.FileRegion.FileLength
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "取得檔案的位元組長度。"
  remarks: "這個屬性會傳回單一區域，而非整個檔案的長度，在檔案中。 可以找到的檔案中區域的長度，藉由檢查<xref:System.IO.Log.LogStore.Length%2A>屬性所傳回之資料流<xref:System.IO.Log.FileRegion.GetStream%2A>方法。</xref:System.IO.Log.FileRegion.GetStream%2A> </xref:System.IO.Log.LogStore.Length%2A>"
  example:
  - "The following example demonstrates how to archive a log store to XML using the <xref:System.IO.Log.LogStore> and <xref:System.IO.Log.FileRegion> classes.  \n  \n [!code-vb[FileRegion#0](~/add/codesnippet/visualbasic/p-system.io.log.fileregi_0_1.vb)]\n [!code-cs[FileRegion#0](~/add/codesnippet/csharp/p-system.io.log.fileregi_0_1.cs)]"
  syntax:
    content: public long FileLength { get; }
    return:
      type: System.Int64
      description: "檔案的位元組長度。"
  overload: System.IO.Log.FileRegion.FileLength*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.FileRegion.GetStream
  id: GetStream
  parent: System.IO.Log.FileRegion
  langs:
  - csharp
  name: GetStream()
  nameWithType: FileRegion.GetStream()
  fullName: System.IO.Log.FileRegion.GetStream()
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "傳回可以用來讀取要封存資料的資料流。"
  remarks: ''
  example:
  - "The following example demonstrates how to archive a log store to XML using the <xref:System.IO.Log.LogStore> and <xref:System.IO.Log.FileRegion> classes.  \n  \n [!code-vb[FileRegion#0](~/add/codesnippet/visualbasic/m-system.io.log.fileregi_1.vb)]\n [!code-cs[FileRegion#0](~/add/codesnippet/csharp/m-system.io.log.fileregi_1.cs)]"
  syntax:
    content: public System.IO.Stream GetStream ();
    parameters: []
    return:
      type: System.IO.Stream
      description: "包含要封存資料的資料流。"
  overload: System.IO.Log.FileRegion.GetStream*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "無法執行要求，因為發生意外的 I/O 例外狀況。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "不支援此作業。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已在處置序列之後呼叫的方法。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "沒有足夠的記憶體可以繼續執行程式。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "存取指定的記錄存放區遭作業系統拒絕。"
  platform:
  - net462
- uid: System.IO.Log.FileRegion.Offset
  id: Offset
  parent: System.IO.Log.FileRegion
  langs:
  - csharp
  name: Offset
  nameWithType: FileRegion.Offset
  fullName: System.IO.Log.FileRegion.Offset
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "取得的檔案中資料起始位置的位移。"
  remarks: ''
  example:
  - "The following example demonstrates how to archive a log store to XML using the <xref:System.IO.Log.LogStore> and <xref:System.IO.Log.FileRegion> classes.  \n  \n [!code-vb[FileRegion#0](~/add/codesnippet/visualbasic/p-system.io.log.fileregi_1_1.vb)]\n [!code-cs[FileRegion#0](~/add/codesnippet/csharp/p-system.io.log.fileregi_1_1.cs)]"
  syntax:
    content: public long Offset { get; }
    return:
      type: System.Int64
      description: "中的檔案中資料起始位置的位移。"
  overload: System.IO.Log.FileRegion.Offset*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.FileRegion.Path
  id: Path
  parent: System.IO.Log.FileRegion
  langs:
  - csharp
  name: Path
  nameWithType: FileRegion.Path
  fullName: System.IO.Log.FileRegion.Path
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "取得包含此區域之檔案的完整路徑的位置。"
  remarks: ''
  example:
  - "The following example demonstrates how to archive a log store to XML using the <xref:System.IO.Log.LogStore> and <xref:System.IO.Log.FileRegion> classes.  \n  \n [!code-vb[FileRegion#0](~/add/codesnippet/visualbasic/p-system.io.log.fileregi_2_1.vb)]\n [!code-cs[FileRegion#0](~/add/codesnippet/csharp/p-system.io.log.fileregi_2_1.cs)]"
  syntax:
    content: public string Path { get; }
    return:
      type: System.String
      description: "含有此區域之檔案的完整路徑的位置。"
  overload: System.IO.Log.FileRegion.Path*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.IO.Log.FileRegion.FileLength
  parent: System.IO.Log.FileRegion
  isExternal: false
  name: FileLength
  nameWithType: FileRegion.FileLength
  fullName: System.IO.Log.FileRegion.FileLength
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.Log.FileRegion.GetStream
  parent: System.IO.Log.FileRegion
  isExternal: false
  name: GetStream()
  nameWithType: FileRegion.GetStream()
  fullName: System.IO.Log.FileRegion.GetStream()
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO.Log.FileRegion.Offset
  parent: System.IO.Log.FileRegion
  isExternal: false
  name: Offset
  nameWithType: FileRegion.Offset
  fullName: System.IO.Log.FileRegion.Offset
- uid: System.IO.Log.FileRegion.Path
  parent: System.IO.Log.FileRegion
  isExternal: false
  name: Path
  nameWithType: FileRegion.Path
  fullName: System.IO.Log.FileRegion.Path
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Log.FileRegion.FileLength*
  parent: System.IO.Log.FileRegion
  isExternal: false
  name: FileLength
  nameWithType: FileRegion.FileLength
- uid: System.IO.Log.FileRegion.GetStream*
  parent: System.IO.Log.FileRegion
  isExternal: false
  name: GetStream
  nameWithType: FileRegion.GetStream
- uid: System.IO.Log.FileRegion.Offset*
  parent: System.IO.Log.FileRegion
  isExternal: false
  name: Offset
  nameWithType: FileRegion.Offset
- uid: System.IO.Log.FileRegion.Path*
  parent: System.IO.Log.FileRegion
  isExternal: false
  name: Path
  nameWithType: FileRegion.Path
