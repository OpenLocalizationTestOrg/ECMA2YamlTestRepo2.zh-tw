### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.CngKey
  id: CngKey
  children:
  - System.Security.Cryptography.CngKey.Algorithm
  - System.Security.Cryptography.CngKey.AlgorithmGroup
  - System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)
  - System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)
  - System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)
  - System.Security.Cryptography.CngKey.Delete
  - System.Security.Cryptography.CngKey.Dispose
  - System.Security.Cryptography.CngKey.Exists(System.String)
  - System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)
  - System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  - System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)
  - System.Security.Cryptography.CngKey.ExportPolicy
  - System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  - System.Security.Cryptography.CngKey.Handle
  - System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  - System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)
  - System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)
  - System.Security.Cryptography.CngKey.IsEphemeral
  - System.Security.Cryptography.CngKey.IsMachineKey
  - System.Security.Cryptography.CngKey.KeyName
  - System.Security.Cryptography.CngKey.KeySize
  - System.Security.Cryptography.CngKey.KeyUsage
  - System.Security.Cryptography.CngKey.Open(System.String)
  - System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)
  - System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)
  - System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  - System.Security.Cryptography.CngKey.ParentWindowHandle
  - System.Security.Cryptography.CngKey.Provider
  - System.Security.Cryptography.CngKey.ProviderHandle
  - System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)
  - System.Security.Cryptography.CngKey.UIPolicy
  - System.Security.Cryptography.CngKey.UniqueName
  langs:
  - csharp
  name: CngKey
  nameWithType: CngKey
  fullName: System.Security.Cryptography.CngKey
  type: Class
  summary: "定義可搭配 Cryptography Next Generation (CNG) 物件的索引鍵的核心功能。"
  remarks: "這個類別會包裝 NCrypt 金鑰，不 BCrypt 金鑰。 NCrypt 是 CNG 提供金鑰的儲存體功能的子集。 BCrypt 是提供基底的密碼編譯服務，例如產生隨機數字、 雜湊函式、 簽章和加密金鑰的子集。"
  syntax:
    content: 'public sealed class CngKey : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Algorithm
  id: Algorithm
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Algorithm
  nameWithType: CngKey.Algorithm
  fullName: System.Security.Cryptography.CngKey.Algorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得索引鍵使用的演算法。"
  syntax:
    content: public System.Security.Cryptography.CngAlgorithm Algorithm { get; }
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "物件，指定加密演算法的名稱。"
  overload: System.Security.Cryptography.CngKey.Algorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.AlgorithmGroup
  id: AlgorithmGroup
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: AlgorithmGroup
  nameWithType: CngKey.AlgorithmGroup
  fullName: System.Security.Cryptography.CngKey.AlgorithmGroup
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得索引鍵使用的演算法群組。"
  syntax:
    content: public System.Security.Cryptography.CngAlgorithmGroup AlgorithmGroup { get; }
    return:
      type: System.Security.Cryptography.CngAlgorithmGroup
      description: "物件，指定加密演算法群組的名稱。"
  overload: System.Security.Cryptography.CngKey.AlgorithmGroup*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)
  id: Create(System.Security.Cryptography.CngAlgorithm)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Create(CngAlgorithm)
  nameWithType: CngKey.Create(CngAlgorithm)
  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "建立<xref href=&quot;System.Security.Cryptography.CngKey&quot;></xref>可以搭配指定的演算法的物件。"
  remarks: "這個多載會建立沒有名稱，這表示索引鍵是暫時金鑰 （也就是它不會保存）。 它也會建立預設<xref:System.Security.Cryptography.CngKeyCreationParameters>物件，指定預設值<xref:System.Security.Cryptography.CngProvider>及其他進階的參數索引鍵。</xref:System.Security.Cryptography.CngProvider> </xref:System.Security.Cryptography.CngKeyCreationParameters>"
  syntax:
    content: public static System.Security.Cryptography.CngKey Create (System.Security.Cryptography.CngAlgorithm algorithm);
    parameters:
    - id: algorithm
      type: System.Security.Cryptography.CngAlgorithm
      description: "索引鍵會搭配使用的演算法。"
    return:
      type: System.Security.Cryptography.CngKey
      description: "暫時金鑰。"
  overload: System.Security.Cryptography.CngKey.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>algorithm</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "此系統上不支援 cryptography Next Generation (CNG)。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "所有其他錯誤。"
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)
  id: Create(System.Security.Cryptography.CngAlgorithm,System.String)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Create(CngAlgorithm,String)
  nameWithType: CngKey.Create(CngAlgorithm,String)
  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm,String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "建立具名<xref href=&quot;System.Security.Cryptography.CngKey&quot;></xref>物件，提供指定的演算法。"
  remarks: "如果`keyName`提供此多載會建立必要的金鑰。 如果`keyName`未提供，這個索引鍵會是暫時性。 這個多載也會建立預設<xref:System.Security.Cryptography.CngKeyCreationParameters>物件，指定預設值<xref:System.Security.Cryptography.CngProvider>及其他進階的參數索引鍵。</xref:System.Security.Cryptography.CngProvider> </xref:System.Security.Cryptography.CngKeyCreationParameters>"
  syntax:
    content: public static System.Security.Cryptography.CngKey Create (System.Security.Cryptography.CngAlgorithm algorithm, string keyName);
    parameters:
    - id: algorithm
      type: System.Security.Cryptography.CngAlgorithm
      description: "索引鍵會搭配使用的演算法。"
    - id: keyName
      type: System.String
      description: "索引鍵的名稱。 如果未提供名稱，不會保存金鑰。"
    return:
      type: System.Security.Cryptography.CngKey
      description: "永久或暫時索引鍵，提供指定的演算法。"
  overload: System.Security.Cryptography.CngKey.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>algorithm</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "此系統上不支援 cryptography Next Generation (CNG)。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "所有其他錯誤。"
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)
  id: Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Create(CngAlgorithm,String,CngKeyCreationParameters)
  nameWithType: CngKey.Create(CngAlgorithm,String,CngKeyCreationParameters)
  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm,String,CngKeyCreationParameters)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "建立具名<xref href=&quot;System.Security.Cryptography.CngKey&quot;></xref>提供指定的演算法，使用提供的金鑰建立參數物件。"
  remarks: "如果`keyName`提供此多載會建立必要的金鑰。 如果`keyName`未提供，這個索引鍵會是暫時性。"
  syntax:
    content: public static System.Security.Cryptography.CngKey Create (System.Security.Cryptography.CngAlgorithm algorithm, string keyName, System.Security.Cryptography.CngKeyCreationParameters creationParameters);
    parameters:
    - id: algorithm
      type: System.Security.Cryptography.CngAlgorithm
      description: "索引鍵會搭配使用的演算法。"
    - id: keyName
      type: System.String
      description: "索引鍵的名稱。 如果未提供名稱，不會保存金鑰。"
    - id: creationParameters
      type: System.Security.Cryptography.CngKeyCreationParameters
      description: "物件，指定進階的參數方法，包括<xref href=&quot;System.Security.Cryptography.CngProvider&quot;> </xref>。"
    return:
      type: System.Security.Cryptography.CngKey
      description: "永久或暫時索引鍵，提供指定的演算法。"
  overload: System.Security.Cryptography.CngKey.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>algorithm</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "此系統上不支援 cryptography Next Generation (CNG)。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "所有其他錯誤。"
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Delete
  id: Delete
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Delete()
  nameWithType: CngKey.Delete()
  fullName: System.Security.Cryptography.CngKey.Delete()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "移除與物件相關聯的金鑰。"
  remarks: "-   當您在暫時的金鑰上呼叫 Delete 方法時，它會關閉的索引鍵的控制代碼。       當您在具名的索引鍵呼叫 Delete 方法<xref:System.Security.Cryptography.CngKey>物件不再使用之後刪除具名的索引鍵,。</xref:System.Security.Cryptography.CngKey>"
  syntax:
    content: public void Delete ();
    parameters: []
  overload: System.Security.Cryptography.CngKey.Delete*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "您嘗試存取已刪除的索引鍵。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "所有其他錯誤。"
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Dispose
  id: Dispose
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Dispose()
  nameWithType: CngKey.Dispose()
  fullName: System.Security.Cryptography.CngKey.Dispose()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "目前的執行個體所使用的資源全部釋出<xref href=&quot;System.Security.Cryptography.CngKey&quot;></xref>類別。"
  remarks: "當您完成使用<xref:System.Security.Cryptography.CngKey>.</xref:System.Security.Cryptography.CngKey>呼叫 Dispose Dispose 方法會使<xref:System.Security.Cryptography.CngKey>中無法使用的狀態。</xref:System.Security.Cryptography.CngKey> 在呼叫 Dispose 之後，您必須釋放所有參考<xref:System.Security.Cryptography.CngKey>讓記憶體回收行程可以回收記憶體的<xref:System.Security.Cryptography.CngKey>所佔用。</xref:System.Security.Cryptography.CngKey> </xref:System.Security.Cryptography.CngKey> 如需詳細資訊，請參閱[清除 Unmanaged 資源上](~/add/includes/ajax-current-ext-md.md)和[實作 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      > [!NOTE] > 永遠呼叫 Dispose 之後，再放開您的最後一個參考至<xref:System.Security.Cryptography.CngKey>。</xref:System.Security.Cryptography.CngKey> 否則，它所使用的資源將不會釋放直到記憶體回收行程呼叫<xref:System.Security.Cryptography.CngKey>物件的`Finalize`方法。</xref:System.Security.Cryptography.CngKey>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.CngKey.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Exists(System.String)
  id: Exists(System.String)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Exists(String)
  nameWithType: CngKey.Exists(String)
  fullName: System.Security.Cryptography.CngKey.Exists(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "檢查具名的金鑰是否存在預設金鑰儲存提供者 (KSP)。"
  remarks: "預設值 KSP 為<xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>.</xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>"
  syntax:
    content: public static bool Exists (string keyName);
    parameters:
    - id: keyName
      type: System.String
      description: "索引鍵的名稱。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已命名的索引鍵存在於預設 KSP。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.CngKey.Exists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "此系統上不支援 cryptography Next Generation (CNG)。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "所有其他錯誤。"
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)
  id: Exists(System.String,System.Security.Cryptography.CngProvider)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Exists(String,CngProvider)
  nameWithType: CngKey.Exists(String,CngProvider)
  fullName: System.Security.Cryptography.CngKey.Exists(String,CngProvider)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "檢查具名的索引鍵是否存在於指定的金鑰儲存提供者 (KSP)。"
  remarks: "使用這個多載檢查中 KSP KSP，預設值以外的索引鍵存在即<xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>.</xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>"
  syntax:
    content: public static bool Exists (string keyName, System.Security.Cryptography.CngProvider provider);
    parameters:
    - id: keyName
      type: System.String
      description: "索引鍵的名稱。"
    - id: provider
      type: System.Security.Cryptography.CngProvider
      description: "若要檢查索引鍵 KSP。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已命名的索引鍵存在於指定的提供者。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.CngKey.Exists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyName</code>or <code>provider</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "此系統上不支援 cryptography Next Generation (CNG)。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "所有其他錯誤。"
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  id: Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Exists(String,CngProvider,CngKeyOpenOptions)
  nameWithType: CngKey.Exists(String,CngProvider,CngKeyOpenOptions)
  fullName: System.Security.Cryptography.CngKey.Exists(String,CngProvider,CngKeyOpenOptions)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "檢查具名的索引鍵是否存在於指定的金鑰儲存提供者 (KSP)，根據指定的選項。"
  remarks: "若要檢查是否有預設值以外的 KSP 中索引鍵使用此多載<xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>，以及指定索引鍵開啟選項。</xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>"
  syntax:
    content: public static bool Exists (string keyName, System.Security.Cryptography.CngProvider provider, System.Security.Cryptography.CngKeyOpenOptions options);
    parameters:
    - id: keyName
      type: System.String
      description: "索引鍵的名稱。"
    - id: provider
      type: System.Security.Cryptography.CngProvider
      description: "若要搜尋的索引鍵 KSP。"
    - id: options
      type: System.Security.Cryptography.CngKeyOpenOptions
      description: "指定開啟金鑰選項的列舉值的位元組合。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已命名的索引鍵存在於指定的提供者。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.CngKey.Exists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyName</code>or <code>provider</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "此系統上不支援 cryptography Next Generation (CNG)。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "所有其他錯誤。"
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)
  id: Export(System.Security.Cryptography.CngKeyBlobFormat)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Export(CngKeyBlobFormat)
  nameWithType: CngKey.Export(CngKeyBlobFormat)
  fullName: System.Security.Cryptography.CngKey.Export(CngKeyBlobFormat)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "將金鑰內容匯出至 BLOB，以指定的格式。"
  remarks: "Cryptography Next Generation (CNG) 允許匯出任何基礎的金鑰儲存提供者 (KSP) 支援的格式。 例如，在 Windows Vista 中，預設 KSP (也就是<xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>) 只允許匯出私密金鑰在<xref:System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob%2A>， <xref:System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob%2A>，和<xref:System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob%2A>格式。</xref:System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob%2A> </xref:System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob%2A> </xref:System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob%2A> </xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A> 這項限制是由基礎的 KSP 控制。 如果您使用不同的 KSP，可能適用於其他格式。"
  syntax:
    content: public byte[] Export (System.Security.Cryptography.CngKeyBlobFormat format);
    parameters:
    - id: format
      type: System.Security.Cryptography.CngKeyBlobFormat
      description: "物件，指定的金鑰 BLOB 格式。"
    return:
      type: System.Byte[]
      description: "包含金鑰的內容中指定的格式的 BLOB。"
  overload: System.Security.Cryptography.CngKey.Export*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "所有其他錯誤。 一般而言，<xref:System.Security.Cryptography.CngKey.ExportPolicy*>不允許匯出金鑰。</xref:System.Security.Cryptography.CngKey.ExportPolicy*>"
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.ExportPolicy
  id: ExportPolicy
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: ExportPolicy
  nameWithType: CngKey.ExportPolicy
  fullName: System.Security.Cryptography.CngKey.ExportPolicy
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得匯出原則，由索引鍵。"
  remarks: "匯出原則控制的匯出頻率和索引鍵的格式。"
  syntax:
    content: public System.Security.Cryptography.CngExportPolicies ExportPolicy { get; }
    return:
      type: System.Security.Cryptography.CngExportPolicies
      description: "指定金鑰的匯出原則的物件。"
  overload: System.Security.Cryptography.CngKey.ExportPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  id: GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: GetProperty(String,CngPropertyOptions)
  nameWithType: CngKey.GetProperty(String,CngPropertyOptions)
  fullName: System.Security.Cryptography.CngKey.GetProperty(String,CngPropertyOptions)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得屬性，指定名稱和一組屬性選項。"
  remarks: "這個方法的目的是要傳回索引鍵的任意屬性的值。 擷取屬性的典型方式是使用屬性存取子中提供的<xref:System.Security.Cryptography.CngKey>類別。</xref:System.Security.Cryptography.CngKey> <xref:System.Security.Cryptography.CngKey>提供數個，但不是全部內容包裝函式。</xref:System.Security.Cryptography.CngKey> GetProperty 方法主要用於存取不會換行屬性的值。       這個方法是適用於下列情況:-新的作業系統版本支援新的 Cryptography Next Generation (CNG) 金鑰屬性沒有包裝函式。      -您可以加入自訂屬性的索引鍵。       `options`參數特別用來指出下列:-屬性是否為內建或自訂。      -是否應該保存屬性與索引鍵。       這些選項都必須符合已設定的屬性，或將找不到屬性的值。       <xref:System.Security.Cryptography.CryptographicException>如果找不到屬性，會擲回。</xref:System.Security.Cryptography.CryptographicException> 您應該呼叫<xref:System.Security.Cryptography.CngKey.HasProperty%2A>方法，以避免例外狀況，而不是包裝的方法呼叫中`try/catch`區塊。</xref:System.Security.Cryptography.CngKey.HasProperty%2A>"
  syntax:
    content: public System.Security.Cryptography.CngProperty GetProperty (string name, System.Security.Cryptography.CngPropertyOptions options);
    parameters:
    - id: name
      type: System.String
      description: "所需的屬性名稱。"
    - id: options
      type: System.Security.Cryptography.CngPropertyOptions
      description: "指定的具名屬性選項的列舉值的位元組合。"
    return:
      type: System.Security.Cryptography.CngProperty
      description: "物件，包含指定屬性的原始值。"
  overload: System.Security.Cryptography.CngKey.GetProperty*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "所有其他錯誤。"
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Handle
  id: Handle
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Handle
  nameWithType: CngKey.Handle
  fullName: System.Security.Cryptography.CngKey.Handle
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得代表原生的金鑰 (NCRYPT_KEY_HANDLE) 的安全控制代碼。"
  remarks: "傳回的控制代碼會在目前的控制代碼重複<xref:System.Security.Cryptography.CngKey>物件。</xref:System.Security.Cryptography.CngKey> 它會持續保留，即使目前<xref:System.Security.Cryptography.CngKey>處置時，且必須個別公開。</xref:System.Security.Cryptography.CngKey>       您可以釋放目前的物件，而且沒有任何負面影響的任何順序的控制代碼。"
  syntax:
    content: public Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle Handle { get; }
    return:
      type: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle
      description: "安全控制代碼，代表索引鍵。"
  overload: System.Security.Cryptography.CngKey.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  id: HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: HasProperty(String,CngPropertyOptions)
  nameWithType: CngKey.HasProperty(String,CngPropertyOptions)
  fullName: System.Security.Cryptography.CngKey.HasProperty(String,CngPropertyOptions)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "檢查指定的屬性是否存在的索引鍵上。"
  remarks: "`options`參數特別用來指出下列:-屬性是否為內建或自訂。      -是否應該保存屬性與索引鍵。       這些選項都必須符合已設定的屬性，或將找不到屬性的值。       這個方法可正確運作即使屬性設定為`false`或零。"
  syntax:
    content: public bool HasProperty (string name, System.Security.Cryptography.CngPropertyOptions options);
    parameters:
    - id: name
      type: System.String
      description: "要檢查的屬性名稱。"
    - id: options
      type: System.Security.Cryptography.CngPropertyOptions
      description: "指定的具名屬性選項的列舉值的位元組合。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果找到指定的屬性。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.CngKey.HasProperty*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)
  id: Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Import(Byte[],CngKeyBlobFormat)
  nameWithType: CngKey.Import(Byte[],CngKeyBlobFormat)
  fullName: System.Security.Cryptography.CngKey.Import(Byte[],CngKeyBlobFormat)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "建立新的金鑰指定的金鑰內容匯入的預設金鑰儲存提供者 (KSP)，並使用指定的格式。"
  remarks: "預設值 KSP 為<xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>.</xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>      > [!IMPORTANT] > 上 Windows 作業系統在 Windows 7 和 Windows Server 2008 R2 之前，不支援某些 CNG 金鑰的二進位大型物件 (BLOB) 格式。"
  syntax:
    content: public static System.Security.Cryptography.CngKey Import (byte[] keyBlob, System.Security.Cryptography.CngKeyBlobFormat format);
    parameters:
    - id: keyBlob
      type: System.Byte[]
      description: "陣列，其中包含金鑰的資訊。"
    - id: format
      type: System.Security.Cryptography.CngKeyBlobFormat
      description: "物件，指定的格式`keyBlob`陣列。"
    return:
      type: System.Security.Cryptography.CngKey
      description: "新的索引鍵。"
  overload: System.Security.Cryptography.CngKey.Import*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyBlob</code>or <code>format</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "此系統上不支援 cryptography Next Generation (CNG)。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "所有其他錯誤。"
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)
  id: Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Import(Byte[],CngKeyBlobFormat,CngProvider)
  nameWithType: CngKey.Import(Byte[],CngKeyBlobFormat,CngProvider)
  fullName: System.Security.Cryptography.CngKey.Import(Byte[],CngKeyBlobFormat,CngProvider)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "建立新的金鑰匯入指定的金鑰內容到指定的金鑰儲存提供者 (KSP)，使用指定的格式。"
  remarks: >-
    > [!IMPORTANT]

    >  On Windows operating systems before Windows 7 and Windows Server 2008 R2, some CNG key binary large object (BLOB) formats are not supported.
  syntax:
    content: public static System.Security.Cryptography.CngKey Import (byte[] keyBlob, System.Security.Cryptography.CngKeyBlobFormat format, System.Security.Cryptography.CngProvider provider);
    parameters:
    - id: keyBlob
      type: System.Byte[]
      description: "陣列，其中包含金鑰的資訊。"
    - id: format
      type: System.Security.Cryptography.CngKeyBlobFormat
      description: "物件，指定的格式`keyBlob`陣列。"
    - id: provider
      type: System.Security.Cryptography.CngProvider
      description: "KSP。"
    return:
      type: System.Security.Cryptography.CngKey
      description: "新的索引鍵。"
  overload: System.Security.Cryptography.CngKey.Import*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyBlob</code>, <code>format</code>, or <code>provider</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "此系統上不支援 cryptography Next Generation (CNG)。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "所有其他錯誤。"
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.IsEphemeral
  id: IsEphemeral
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: IsEphemeral
  nameWithType: CngKey.IsEphemeral
  fullName: System.Security.Cryptography.CngKey.IsEphemeral
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得索引鍵的持續性狀態。"
  remarks: "這個屬性會決定是否暫時金鑰 （也就是索引鍵存在只會針對此控制代碼的存留期），或保存 （也就是索引鍵存在獨立控制代碼）。       傳回的值取決於用來取得金鑰的方法:-如果索引鍵不由所開啟<xref:System.Security.Cryptography.CngKey.Open%28Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle%2CSystem.Security.Cryptography.CngKeyHandleOpenOptions%29>方法多載時，common language runtime (CLR) 來管理金鑰，且可以判斷是否為暫時。</xref:System.Security.Cryptography.CngKey.Open%28Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle%2CSystem.Security.Cryptography.CngKeyHandleOpenOptions%29>      -如果索引鍵由所開啟<xref:System.Security.Cryptography.CngKey.Open%28Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle%2CSystem.Security.Cryptography.CngKeyHandleOpenOptions%29>方法多載時，CLR 無法判斷是否為暫時。</xref:System.Security.Cryptography.CngKey.Open%28Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle%2CSystem.Security.Cryptography.CngKeyHandleOpenOptions%29> 因此，金鑰會假設為保存。 不過，如果這個方法用來開啟的控制代碼由 CLR 建立的索引鍵，CLR 將能夠判斷其是否為暫時性。       這個屬性並沒有公用 setter。它是唯讀狀態。"
  syntax:
    content: public bool IsEphemeral { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果金鑰是暫時的。否則， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.CngKey.IsEphemeral*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.IsMachineKey
  id: IsMachineKey
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: IsMachineKey
  nameWithType: CngKey.IsMachineKey
  fullName: System.Security.Cryptography.CngKey.IsMachineKey
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得索引鍵的範圍 （電腦或使用者）。"
  syntax:
    content: public bool IsMachineKey { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果索引鍵使用全機器為基礎;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>索引鍵是否只針對目前的使用者。"
  overload: System.Security.Cryptography.CngKey.IsMachineKey*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.KeyName
  id: KeyName
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: KeyName
  nameWithType: CngKey.KeyName
  fullName: System.Security.Cryptography.CngKey.KeyName
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得索引鍵的名稱。"
  syntax:
    content: public string KeyName { get; }
    return:
      type: System.String
      description: "索引鍵的名稱。 如果金鑰是暫時的這個值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.CngKey.KeyName*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.KeySize
  id: KeySize
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: KeySize
  nameWithType: CngKey.KeySize
  fullName: System.Security.Cryptography.CngKey.KeySize
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得金鑰的大小，以位元。"
  syntax:
    content: public int KeySize { get; }
    return:
      type: System.Int32
      description: "位元金鑰的大小。"
  overload: System.Security.Cryptography.CngKey.KeySize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.KeyUsage
  id: KeyUsage
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: KeyUsage
  nameWithType: CngKey.KeyUsage
  fullName: System.Security.Cryptography.CngKey.KeyUsage
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得索引鍵所指定的密碼編譯作業。"
  syntax:
    content: public System.Security.Cryptography.CngKeyUsages KeyUsage { get; }
    return:
      type: System.Security.Cryptography.CngKeyUsages
      description: "指定索引鍵所允許的使用方式的列舉值的位元組合。"
  overload: System.Security.Cryptography.CngKey.KeyUsage*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Open(System.String)
  id: Open(System.String)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Open(String)
  nameWithType: CngKey.Open(String)
  fullName: System.Security.Cryptography.CngKey.Open(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "建立的執行個體<xref href=&quot;System.Security.Cryptography.CngKey&quot;></xref>物件，代表現有命名為索引鍵。"
  remarks: "這個多載會使用下列的預設值:-金鑰儲存提供者 (KSP): <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>.</xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A> 使用<xref:System.Security.Cryptography.CngKey.Open%28System.String%2CSystem.Security.Cryptography.CngProvider%29>多載，如果您想要指定另一個 KSP。</xref:System.Security.Cryptography.CngKey.Open%28System.String%2CSystem.Security.Cryptography.CngProvider%29>      -索引鍵開啟選項︰ <xref:System.Security.Cryptography.CngKeyOpenOptions?displayProperty=fullName>.</xref:System.Security.Cryptography.CngKeyOpenOptions?displayProperty=fullName>"
  syntax:
    content: public static System.Security.Cryptography.CngKey Open (string keyName);
    parameters:
    - id: keyName
      type: System.String
      description: "索引鍵的名稱。"
    return:
      type: System.Security.Cryptography.CngKey
      description: "現有的索引鍵。"
  overload: System.Security.Cryptography.CngKey.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "此系統上不支援 cryptography Next Generation (CNG)。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "所有其他錯誤。"
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)
  id: Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)
  nameWithType: CngKey.Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)
  fullName: System.Security.Cryptography.CngKey.Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "建立的執行個體<xref href=&quot;System.Security.Cryptography.CngKey&quot;></xref>使用現有的索引鍵的控制代碼的物件。"
  remarks: "這個多載可讓進階的使用者使用 CNG 類別即使它們是依賴平台叫用或受管理的 c + + interop 功能。 例如，如果您有原生程式庫傳回 NCRYPT_KEY_HANDLE 形式的索引鍵，這個多載可讓您建立機碼的 managed 包裝函式和使用 CNG 類別，來操作它。       當您開啟索引鍵使用其控制代碼時，您無法判斷金鑰的暫時狀態，也必須指定它自己。 有幾項屬性<xref:System.Security.Cryptography.CngKey>類別依賴此值設為正確。</xref:System.Security.Cryptography.CngKey> 因此，請確定您要的正確旗標值傳遞<xref:System.Security.Cryptography.CngKey.Open%2A>方法。</xref:System.Security.Cryptography.CngKey.Open%2A>"
  syntax:
    content: public static System.Security.Cryptography.CngKey Open (Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle keyHandle, System.Security.Cryptography.CngKeyHandleOpenOptions keyHandleOpenOptions);
    parameters:
    - id: keyHandle
      type: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle
      description: "現有的金鑰控制代碼。"
    - id: keyHandleOpenOptions
      type: System.Security.Cryptography.CngKeyHandleOpenOptions
      description: "其中一個列舉值，指出是否`keyHandle`代表暫時的金鑰或金鑰。"
    return:
      type: System.Security.Cryptography.CngKey
      description: "現有的索引鍵。"
  overload: System.Security.Cryptography.CngKey.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyHandle</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyHandle</code>無效或格式不正確，或已關閉。 如果按鍵是暫時的金鑰由 common language runtime (CLR)，也擲回這個例外狀況但<xref href=&quot;System.Security.Cryptography.CngKeyHandleOpenOptions&quot;></xref>未指定值。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "此系統上不支援 cryptography Next Generation (CNG)。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "所有其他錯誤。"
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)
  id: Open(System.String,System.Security.Cryptography.CngProvider)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Open(String,CngProvider)
  nameWithType: CngKey.Open(String,CngProvider)
  fullName: System.Security.Cryptography.CngKey.Open(String,CngProvider)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "建立的執行個體<xref href=&quot;System.Security.Cryptography.CngKey&quot;></xref>物件，代表現有命名為索引鍵，使用指定的金鑰儲存提供者 (KSP)。"
  remarks: "不同於<xref:System.Security.Cryptography.CngKey.Open%28System.String%29>方法多載，這個多載可以可讓您指定的提供者。</xref:System.Security.Cryptography.CngKey.Open%28System.String%29> 此外，預設值<xref:System.Security.Cryptography.CngKeyOpenOptions>值<xref:System.Security.Cryptography.CngKeyOpenOptions>建立並繫結至索引鍵。</xref:System.Security.Cryptography.CngKeyOpenOptions> </xref:System.Security.Cryptography.CngKeyOpenOptions>"
  syntax:
    content: public static System.Security.Cryptography.CngKey Open (string keyName, System.Security.Cryptography.CngProvider provider);
    parameters:
    - id: keyName
      type: System.String
      description: "索引鍵的名稱。"
    - id: provider
      type: System.Security.Cryptography.CngProvider
      description: "KSP 包含索引鍵。"
    return:
      type: System.Security.Cryptography.CngKey
      description: "現有的索引鍵。"
  overload: System.Security.Cryptography.CngKey.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyName</code>or <code>provider</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "此系統上不支援 cryptography Next Generation (CNG)。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "所有其他錯誤。"
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  id: Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Open(String,CngProvider,CngKeyOpenOptions)
  nameWithType: CngKey.Open(String,CngProvider,CngKeyOpenOptions)
  fullName: System.Security.Cryptography.CngKey.Open(String,CngProvider,CngKeyOpenOptions)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "建立的執行個體<xref href=&quot;System.Security.Cryptography.CngKey&quot;></xref>物件，代表現有命名為索引鍵，使用指定的金鑰儲存提供者 (KSP) 和金鑰開啟選項。"
  remarks: "不同於<xref:System.Security.Cryptography.CngKey.Open%28System.String%29>方法多載，這個多載可以可讓您指定的提供者和索引鍵開啟 [選項]。</xref:System.Security.Cryptography.CngKey.Open%28System.String%29>"
  syntax:
    content: public static System.Security.Cryptography.CngKey Open (string keyName, System.Security.Cryptography.CngProvider provider, System.Security.Cryptography.CngKeyOpenOptions openOptions);
    parameters:
    - id: keyName
      type: System.String
      description: "索引鍵的名稱。"
    - id: provider
      type: System.Security.Cryptography.CngProvider
      description: "KSP 包含索引鍵。"
    - id: openOptions
      type: System.Security.Cryptography.CngKeyOpenOptions
      description: "指定開啟金鑰，例如 （電腦或使用者存放裝置） 從開啟的機碼的位置，以及是否要隱藏 UI 提示選項的列舉值的位元組合。"
    return:
      type: System.Security.Cryptography.CngKey
      description: "現有的索引鍵。"
  overload: System.Security.Cryptography.CngKey.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyName</code>or <code>provider</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "此系統上不支援 cryptography Next Generation (CNG)。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "所有其他錯誤。"
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.ParentWindowHandle
  id: ParentWindowHandle
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: ParentWindowHandle
  nameWithType: CngKey.ParentWindowHandle
  fullName: System.Security.Cryptography.CngKey.ParentWindowHandle
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得或設定應該用於存取金鑰所造成的使用者介面 (UI) 提示的視窗控制代碼 (HWND)。"
  remarks: "使用索引鍵的父視窗控制代碼 UI 提示，例如智慧卡 PIN 提示。 此值不會保存使用保存的金鑰。       我們建議您永遠將設定這個屬性，顯示使用者介面的索引鍵。 不使用的預設值`null`這類金鑰。"
  syntax:
    content: public IntPtr ParentWindowHandle { get; set; }
    return:
      type: System.IntPtr
      description: "索引鍵的父視窗控制代碼。"
  overload: System.Security.Cryptography.CngKey.ParentWindowHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Provider
  id: Provider
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Provider
  nameWithType: CngKey.Provider
  fullName: System.Security.Cryptography.CngKey.Provider
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得管理金鑰的金鑰儲存提供者 (KSP)。"
  syntax:
    content: public System.Security.Cryptography.CngProvider Provider { get; }
    return:
      type: System.Security.Cryptography.CngProvider
      description: "KSP 管理金鑰。"
  overload: System.Security.Cryptography.CngKey.Provider*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.ProviderHandle
  id: ProviderHandle
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: ProviderHandle
  nameWithType: CngKey.ProviderHandle
  fullName: System.Security.Cryptography.CngKey.ProviderHandle
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得原生控制代碼 (NCRYPT_PROV_HANDLE) 金鑰儲存提供者 (KSP)。"
  remarks: "傳回的控制代碼會在目前的控制代碼重複<xref:System.Security.Cryptography.CngKey>物件。</xref:System.Security.Cryptography.CngKey> 它會持續保留，即使目前<xref:System.Security.Cryptography.CngKey>處置時，且必須個別公開。</xref:System.Security.Cryptography.CngKey>       您可以釋放目前的物件，而且沒有任何負面影響的任何順序的控制代碼。"
  syntax:
    content: public Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle ProviderHandle { get; }
    return:
      type: Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle
      description: "KSP 控制代碼。"
  overload: System.Security.Cryptography.CngKey.ProviderHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)
  id: SetProperty(System.Security.Cryptography.CngProperty)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: SetProperty(CngProperty)
  nameWithType: CngKey.SetProperty(CngProperty)
  fullName: System.Security.Cryptography.CngKey.SetProperty(CngProperty)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "設定具名的屬性的索引鍵上。"
  remarks: "這個方法可讓您使用，將新的自訂屬性新增至現有的索引鍵<xref:System.Security.Cryptography.CngProperty>物件。</xref:System.Security.Cryptography.CngProperty> 上設定的選項<xref:System.Security.Cryptography.CngProperty>物件必須完全符合中的選項<xref:System.Security.Cryptography.CngKey.GetProperty%2A>呼叫。</xref:System.Security.Cryptography.CngKey.GetProperty%2A> </xref:System.Security.Cryptography.CngProperty> 否則，不會找到屬性。"
  syntax:
    content: public void SetProperty (System.Security.Cryptography.CngProperty property);
    parameters:
    - id: property
      type: System.Security.Cryptography.CngProperty
      description: "若要設定索引鍵的屬性。"
  overload: System.Security.Cryptography.CngKey.SetProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.UIPolicy
  id: UIPolicy
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: UIPolicy
  nameWithType: CngKey.UIPolicy
  fullName: System.Security.Cryptography.CngKey.UIPolicy
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得控制的存取金鑰的使用者介面 (UI) 的參數。"
  remarks: "索引鍵的 UI 原則搭配 UI 提示，例如智慧卡 PIN 提示。 此原則也會控制受保護的金鑰的密碼對話方塊。"
  syntax:
    content: public System.Security.Cryptography.CngUIPolicy UIPolicy { get; }
    return:
      type: System.Security.Cryptography.CngUIPolicy
      description: "物件，包含顯示 UI 的組態參數。"
  overload: System.Security.Cryptography.CngKey.UIPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.UniqueName
  id: UniqueName
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: UniqueName
  nameWithType: CngKey.UniqueName
  fullName: System.Security.Cryptography.CngKey.UniqueName
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得索引鍵的唯一名稱。"
  remarks: "這個屬性會取得存取金鑰時可用的替代名稱。 如果原始的索引鍵名稱並未識別唯一的保存的金鑰，您可以使用這個屬性。 <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>屬性會傳回為這個屬性的索引鍵的檔案名稱。</xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A> 所傳回的名稱<xref:System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider%2A>視實作而定。</xref:System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider%2A>"
  syntax:
    content: public string UniqueName { get; }
    return:
      type: System.String
      description: "替代索引鍵名稱。 如果金鑰是暫時的這個值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.CngKey.UniqueName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Cryptography.CngKey.Algorithm
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Algorithm
  nameWithType: CngKey.Algorithm
  fullName: System.Security.Cryptography.CngKey.Algorithm
- uid: System.Security.Cryptography.CngAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: CngAlgorithm
  nameWithType: CngAlgorithm
  fullName: System.Security.Cryptography.CngAlgorithm
- uid: System.Security.Cryptography.CngKey.AlgorithmGroup
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: AlgorithmGroup
  nameWithType: CngKey.AlgorithmGroup
  fullName: System.Security.Cryptography.CngKey.AlgorithmGroup
- uid: System.Security.Cryptography.CngAlgorithmGroup
  parent: System.Security.Cryptography
  isExternal: false
  name: CngAlgorithmGroup
  nameWithType: CngAlgorithmGroup
  fullName: System.Security.Cryptography.CngAlgorithmGroup
- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Create(CngAlgorithm)
  nameWithType: CngKey.Create(CngAlgorithm)
  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm)
- uid: System.Security.Cryptography.CngKey
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKey
  nameWithType: CngKey
  fullName: System.Security.Cryptography.CngKey
- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Create(CngAlgorithm,String)
  nameWithType: CngKey.Create(CngAlgorithm,String)
  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Create(CngAlgorithm,String,CngKeyCreationParameters)
  nameWithType: CngKey.Create(CngAlgorithm,String,CngKeyCreationParameters)
  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm,String,CngKeyCreationParameters)
- uid: System.Security.Cryptography.CngKeyCreationParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKeyCreationParameters
  nameWithType: CngKeyCreationParameters
  fullName: System.Security.Cryptography.CngKeyCreationParameters
- uid: System.Security.Cryptography.CngKey.Delete
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Delete()
  nameWithType: CngKey.Delete()
  fullName: System.Security.Cryptography.CngKey.Delete()
- uid: System.Security.Cryptography.CngKey.Dispose
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Dispose()
  nameWithType: CngKey.Dispose()
  fullName: System.Security.Cryptography.CngKey.Dispose()
- uid: System.Security.Cryptography.CngKey.Exists(System.String)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Exists(String)
  nameWithType: CngKey.Exists(String)
  fullName: System.Security.Cryptography.CngKey.Exists(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Exists(String,CngProvider)
  nameWithType: CngKey.Exists(String,CngProvider)
  fullName: System.Security.Cryptography.CngKey.Exists(String,CngProvider)
- uid: System.Security.Cryptography.CngProvider
  parent: System.Security.Cryptography
  isExternal: false
  name: CngProvider
  nameWithType: CngProvider
  fullName: System.Security.Cryptography.CngProvider
- uid: System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Exists(String,CngProvider,CngKeyOpenOptions)
  nameWithType: CngKey.Exists(String,CngProvider,CngKeyOpenOptions)
  fullName: System.Security.Cryptography.CngKey.Exists(String,CngProvider,CngKeyOpenOptions)
- uid: System.Security.Cryptography.CngKeyOpenOptions
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKeyOpenOptions
  nameWithType: CngKeyOpenOptions
  fullName: System.Security.Cryptography.CngKeyOpenOptions
- uid: System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Export(CngKeyBlobFormat)
  nameWithType: CngKey.Export(CngKeyBlobFormat)
  fullName: System.Security.Cryptography.CngKey.Export(CngKeyBlobFormat)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.CngKeyBlobFormat
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKeyBlobFormat
  nameWithType: CngKeyBlobFormat
  fullName: System.Security.Cryptography.CngKeyBlobFormat
- uid: System.Security.Cryptography.CngKey.ExportPolicy
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: ExportPolicy
  nameWithType: CngKey.ExportPolicy
  fullName: System.Security.Cryptography.CngKey.ExportPolicy
- uid: System.Security.Cryptography.CngExportPolicies
  parent: System.Security.Cryptography
  isExternal: false
  name: CngExportPolicies
  nameWithType: CngExportPolicies
  fullName: System.Security.Cryptography.CngExportPolicies
- uid: System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: GetProperty(String,CngPropertyOptions)
  nameWithType: CngKey.GetProperty(String,CngPropertyOptions)
  fullName: System.Security.Cryptography.CngKey.GetProperty(String,CngPropertyOptions)
- uid: System.Security.Cryptography.CngProperty
  parent: System.Security.Cryptography
  isExternal: false
  name: CngProperty
  nameWithType: CngProperty
  fullName: System.Security.Cryptography.CngProperty
- uid: System.Security.Cryptography.CngPropertyOptions
  parent: System.Security.Cryptography
  isExternal: false
  name: CngPropertyOptions
  nameWithType: CngPropertyOptions
  fullName: System.Security.Cryptography.CngPropertyOptions
- uid: System.Security.Cryptography.CngKey.Handle
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Handle
  nameWithType: CngKey.Handle
  fullName: System.Security.Cryptography.CngKey.Handle
- uid: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeNCryptKeyHandle
  nameWithType: SafeNCryptKeyHandle
  fullName: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle
- uid: System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: HasProperty(String,CngPropertyOptions)
  nameWithType: CngKey.HasProperty(String,CngPropertyOptions)
  fullName: System.Security.Cryptography.CngKey.HasProperty(String,CngPropertyOptions)
- uid: System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Import(Byte[],CngKeyBlobFormat)
  nameWithType: CngKey.Import(Byte[],CngKeyBlobFormat)
  fullName: System.Security.Cryptography.CngKey.Import(Byte[],CngKeyBlobFormat)
- uid: System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Import(Byte[],CngKeyBlobFormat,CngProvider)
  nameWithType: CngKey.Import(Byte[],CngKeyBlobFormat,CngProvider)
  fullName: System.Security.Cryptography.CngKey.Import(Byte[],CngKeyBlobFormat,CngProvider)
- uid: System.Security.Cryptography.CngKey.IsEphemeral
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: IsEphemeral
  nameWithType: CngKey.IsEphemeral
  fullName: System.Security.Cryptography.CngKey.IsEphemeral
- uid: System.Security.Cryptography.CngKey.IsMachineKey
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: IsMachineKey
  nameWithType: CngKey.IsMachineKey
  fullName: System.Security.Cryptography.CngKey.IsMachineKey
- uid: System.Security.Cryptography.CngKey.KeyName
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: KeyName
  nameWithType: CngKey.KeyName
  fullName: System.Security.Cryptography.CngKey.KeyName
- uid: System.Security.Cryptography.CngKey.KeySize
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: KeySize
  nameWithType: CngKey.KeySize
  fullName: System.Security.Cryptography.CngKey.KeySize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.CngKey.KeyUsage
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: KeyUsage
  nameWithType: CngKey.KeyUsage
  fullName: System.Security.Cryptography.CngKey.KeyUsage
- uid: System.Security.Cryptography.CngKeyUsages
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKeyUsages
  nameWithType: CngKeyUsages
  fullName: System.Security.Cryptography.CngKeyUsages
- uid: System.Security.Cryptography.CngKey.Open(System.String)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Open(String)
  nameWithType: CngKey.Open(String)
  fullName: System.Security.Cryptography.CngKey.Open(String)
- uid: System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)
  nameWithType: CngKey.Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)
  fullName: System.Security.Cryptography.CngKey.Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)
- uid: System.Security.Cryptography.CngKeyHandleOpenOptions
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKeyHandleOpenOptions
  nameWithType: CngKeyHandleOpenOptions
  fullName: System.Security.Cryptography.CngKeyHandleOpenOptions
- uid: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Open(String,CngProvider)
  nameWithType: CngKey.Open(String,CngProvider)
  fullName: System.Security.Cryptography.CngKey.Open(String,CngProvider)
- uid: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Open(String,CngProvider,CngKeyOpenOptions)
  nameWithType: CngKey.Open(String,CngProvider,CngKeyOpenOptions)
  fullName: System.Security.Cryptography.CngKey.Open(String,CngProvider,CngKeyOpenOptions)
- uid: System.Security.Cryptography.CngKey.ParentWindowHandle
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: ParentWindowHandle
  nameWithType: CngKey.ParentWindowHandle
  fullName: System.Security.Cryptography.CngKey.ParentWindowHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Security.Cryptography.CngKey.Provider
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Provider
  nameWithType: CngKey.Provider
  fullName: System.Security.Cryptography.CngKey.Provider
- uid: System.Security.Cryptography.CngKey.ProviderHandle
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: ProviderHandle
  nameWithType: CngKey.ProviderHandle
  fullName: System.Security.Cryptography.CngKey.ProviderHandle
- uid: Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeNCryptProviderHandle
  nameWithType: SafeNCryptProviderHandle
  fullName: Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle
- uid: System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: SetProperty(CngProperty)
  nameWithType: CngKey.SetProperty(CngProperty)
  fullName: System.Security.Cryptography.CngKey.SetProperty(CngProperty)
- uid: System.Security.Cryptography.CngKey.UIPolicy
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: UIPolicy
  nameWithType: CngKey.UIPolicy
  fullName: System.Security.Cryptography.CngKey.UIPolicy
- uid: System.Security.Cryptography.CngUIPolicy
  parent: System.Security.Cryptography
  isExternal: false
  name: CngUIPolicy
  nameWithType: CngUIPolicy
  fullName: System.Security.Cryptography.CngUIPolicy
- uid: System.Security.Cryptography.CngKey.UniqueName
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: UniqueName
  nameWithType: CngKey.UniqueName
  fullName: System.Security.Cryptography.CngKey.UniqueName
- uid: System.Security.Cryptography.CngKey.Algorithm*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Algorithm
  nameWithType: CngKey.Algorithm
- uid: System.Security.Cryptography.CngKey.AlgorithmGroup*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: AlgorithmGroup
  nameWithType: CngKey.AlgorithmGroup
- uid: System.Security.Cryptography.CngKey.Create*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Create
  nameWithType: CngKey.Create
- uid: System.Security.Cryptography.CngKey.Delete*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Delete
  nameWithType: CngKey.Delete
- uid: System.Security.Cryptography.CngKey.Dispose*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Dispose
  nameWithType: CngKey.Dispose
- uid: System.Security.Cryptography.CngKey.Exists*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Exists
  nameWithType: CngKey.Exists
- uid: System.Security.Cryptography.CngKey.Export*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Export
  nameWithType: CngKey.Export
- uid: System.Security.Cryptography.CngKey.ExportPolicy*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: ExportPolicy
  nameWithType: CngKey.ExportPolicy
- uid: System.Security.Cryptography.CngKey.GetProperty*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: GetProperty
  nameWithType: CngKey.GetProperty
- uid: System.Security.Cryptography.CngKey.Handle*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Handle
  nameWithType: CngKey.Handle
- uid: System.Security.Cryptography.CngKey.HasProperty*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: HasProperty
  nameWithType: CngKey.HasProperty
- uid: System.Security.Cryptography.CngKey.Import*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Import
  nameWithType: CngKey.Import
- uid: System.Security.Cryptography.CngKey.IsEphemeral*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: IsEphemeral
  nameWithType: CngKey.IsEphemeral
- uid: System.Security.Cryptography.CngKey.IsMachineKey*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: IsMachineKey
  nameWithType: CngKey.IsMachineKey
- uid: System.Security.Cryptography.CngKey.KeyName*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: KeyName
  nameWithType: CngKey.KeyName
- uid: System.Security.Cryptography.CngKey.KeySize*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: KeySize
  nameWithType: CngKey.KeySize
- uid: System.Security.Cryptography.CngKey.KeyUsage*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: KeyUsage
  nameWithType: CngKey.KeyUsage
- uid: System.Security.Cryptography.CngKey.Open*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Open
  nameWithType: CngKey.Open
- uid: System.Security.Cryptography.CngKey.ParentWindowHandle*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: ParentWindowHandle
  nameWithType: CngKey.ParentWindowHandle
- uid: System.Security.Cryptography.CngKey.Provider*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Provider
  nameWithType: CngKey.Provider
- uid: System.Security.Cryptography.CngKey.ProviderHandle*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: ProviderHandle
  nameWithType: CngKey.ProviderHandle
- uid: System.Security.Cryptography.CngKey.SetProperty*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: SetProperty
  nameWithType: CngKey.SetProperty
- uid: System.Security.Cryptography.CngKey.UIPolicy*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: UIPolicy
  nameWithType: CngKey.UIPolicy
- uid: System.Security.Cryptography.CngKey.UniqueName*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: UniqueName
  nameWithType: CngKey.UniqueName
