### YamlMime:ManagedReference
items:
- uid: System.Xml.Xsl.XslCompiledTransform
  id: XslCompiledTransform
  children:
  - System.Xml.Xsl.XslCompiledTransform.#ctor
  - System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)
  - System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)
  - System.Xml.Xsl.XslCompiledTransform.Load(System.String)
  - System.Xml.Xsl.XslCompiledTransform.Load(System.Type)
  - System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)
  - System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)
  - System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])
  - System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  - System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  - System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  - System.Xml.Xsl.XslCompiledTransform.OutputSettings
  - System.Xml.Xsl.XslCompiledTransform.TemporaryFiles
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  langs:
  - csharp
  name: XslCompiledTransform
  nameWithType: XslCompiledTransform
  fullName: System.Xml.Xsl.XslCompiledTransform
  type: Class
  summary: "轉換使用 XSLT 樣式表的 XML 資料。"
  remarks: "XslCompiledTransform 類別是支援 XSLT 1.0 語法的 XSLT 處理器。 它是新的實作，並包括效能提升相較於過時的<xref:System.Xml.Xsl.XslTransform>類別。</xref:System.Xml.Xsl.XslTransform> XslCompiledTransform 類別的結構是相似的<xref:System.Xml.Xsl.XslTransform>類別。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法載入並編譯樣式工作表，同時<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法執行 XSLT 轉換。</xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> </xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>       XSLT 支援`document()`函式和內嵌指令碼區塊預設會停用。 這些功能可以藉由建立啟用<xref:System.Xml.Xsl.XsltSettings>物件並將其傳遞至<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> </xref:System.Xml.Xsl.XsltSettings>       如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/add/includes/ajax-current-ext-md.md)和[移轉從 XslTransform 類別](~/add/includes/ajax-current-ext-md.md)。      ## 安全性考量建立時使用 XslCompiledTransform 類別的應用程式，您應該留意下列項目及其含意:-XSLT 指令碼預設會停用。 僅當需要指令碼支援且在完全受信任的環境中運作時，才應啟用 XSLT 指令碼。      -XSLT`document()`函式預設會停用。 如果您啟用`document()`函式，限制可以藉由傳遞存取的資源<xref:System.Xml.XmlSecureResolver>物件<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> </xref:System.Xml.XmlSecureResolver>      依預設會啟用擴充物件。 如果<xref:System.Xml.Xsl.XsltArgumentList>包含擴充物件的物件會傳遞至<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法，則會加以利用。</xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> </xref:System.Xml.Xsl.XsltArgumentList>      -XSLT 樣式表可以包含其他檔案及內嵌指令碼區塊的參考。 惡意使用者可以利用這一點，藉由提供您資料或樣式表執行時可能會導致您的系統處理，直到電腦資源不足。      的在混合的信任環境中執行 XSLT 應用程式會導致詐騙的樣式表。 例如，惡意使用者可以載入含有害樣式表的物件和遞交給另一個使用者隨後會呼叫<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法並執行轉換。</xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>       不啟用指令碼，可減輕這些安全性問題或`document()`函式除非樣式表來自受信任的來源，而且不接受 XslCompiledTransform 物件、 XSLT 樣式表或 XML 來源不受信任來源的資料。"
  example:
  - "The following example executes a transform and outputs to a file.  \n  \n [!code-vb[XslCompiledTransform.Transform#1](~/add/codesnippet/visualbasic/t-system.xml.xsl.xslcomp_1.vb)]\n [!code-cs[XslCompiledTransform.Transform#1](~/add/codesnippet/csharp/t-system.xml.xsl.xslcomp_1.cs)]  \n  \n The sample uses the following two input files:  \n  \n `books.xml`  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/add/codesnippet/xml/t-system.xml.xsl.xslcomp_2.xml)]  \n  \n `output.xsl`  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/add/codesnippet/xml/t-system.xml.xsl.xslcomp_3.xsl)]"
  syntax:
    content: public sealed class XslCompiledTransform
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.#ctor
  id: '#ctor'
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: XslCompiledTransform()
  nameWithType: XslCompiledTransform.XslCompiledTransform()
  fullName: System.Xml.Xsl.XslCompiledTransform.XslCompiledTransform()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "初始化的新執行個體<xref href=&quot;System.Xml.Xsl.XslCompiledTransform&quot;></xref>類別。"
  syntax:
    content: public XslCompiledTransform ();
    parameters: []
  overload: System.Xml.Xsl.XslCompiledTransform.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: XslCompiledTransform(Boolean)
  nameWithType: XslCompiledTransform.XslCompiledTransform(Boolean)
  fullName: System.Xml.Xsl.XslCompiledTransform.XslCompiledTransform(Boolean)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "初始化的新執行個體<xref href=&quot;System.Xml.Xsl.XslCompiledTransform&quot;></xref>與指定的偵錯設定的類別。"
  remarks: "若要逐步執行程式碼和偵錯樣式表，必須符合下列條件:-`enableDebug`參數設定為`true`。      -在樣式表會傳遞至<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法做為 URI 或實作<xref:System.Xml.XmlReader>類別可實作<xref:System.Xml.IXmlLineInfo>介面。</xref:System.Xml.IXmlLineInfo> </xref:System.Xml.XmlReader> </xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> <xref:System.Xml.IXmlLineInfo>介面實作上所有的文字剖析<xref:System.Xml.XmlReader>物件。</xref:System.Xml.XmlReader> </xref:System.Xml.IXmlLineInfo>           換句話說，如果使用載入樣式表<xref:System.Xml.XPath.IXPathNavigable>物件，例如<xref:System.Xml.XmlDocument>或<xref:System.Xml.XPath.XPathDocument>，或<xref:System.Xml.XmlReader>實作不會實作<xref:System.Xml.IXmlLineInfo>介面，您無法偵錯樣式表。</xref:System.Xml.IXmlLineInfo> </xref:System.Xml.XmlReader> </xref:System.Xml.XPath.XPathDocument> </xref:System.Xml.XmlDocument> </xref:System.Xml.XPath.IXPathNavigable>      -<xref:System.Xml.XmlResolver>用來載入樣式表是以檔案為基礎<xref:System.Xml.XmlResolver>，例如<xref:System.Xml.XmlUrlResolver>(這是預設<xref:System.Xml.XmlResolver>供<xref:System.Xml.Xsl.XslCompiledTransform>類別)。</xref:System.Xml.Xsl.XslCompiledTransform> </xref:System.Xml.XmlResolver> </xref:System.Xml.XmlUrlResolver> </xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>      -在樣式表位於本機電腦上或內部網路上。"
  example:
  - "The following example shows how to enable XSLT debugging.  \n  \n [!code-vb[XslCompiledTransform.Load#10](~/add/codesnippet/visualbasic/m-system.xml.xsl.xslcomp_1_1.vb)]\n [!code-cs[XslCompiledTransform.Load#10](~/add/codesnippet/csharp/m-system.xml.xsl.xslcomp_1_1.cs)]"
  syntax:
    content: public XslCompiledTransform (bool enableDebug);
    parameters:
    - id: enableDebug
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>產生偵錯資訊;否則<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 將此設定為<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>可讓您偵錯樣式表使用 Microsoft Visual Studio 偵錯工具。"
  overload: System.Xml.Xsl.XslCompiledTransform.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)
  id: CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: CompileToType(XmlReader,XsltSettings,XmlResolver,Boolean,TypeBuilder,String)
  nameWithType: XslCompiledTransform.CompileToType(XmlReader,XsltSettings,XmlResolver,Boolean,TypeBuilder,String)
  fullName: System.Xml.Xsl.XslCompiledTransform.CompileToType(XmlReader,XsltSettings,XmlResolver,Boolean,TypeBuilder,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "會編譯 XSLT 樣式表指定的型別。"
  remarks: "`xsltc.exe`工具是 CompileToType 方法的包裝函式。 編譯樣式表與`xsltc.exe`會滿足大部分的應用程式，運用使用編譯的樣式表的需求。 建立自訂的編譯工具時，應該使用 CompileToType 方法。"
  syntax:
    content: public static System.CodeDom.Compiler.CompilerErrorCollection CompileToType (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver, bool debug, System.Reflection.Emit.TypeBuilder typeBuilder, string scriptAssemblyPath);
    parameters:
    - id: stylesheet
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>位於要編譯的樣式表的開頭。</xref:System.Xml.XmlReader>"
    - id: settings
      type: System.Xml.Xsl.XsltSettings
      description: "<xref href=&quot;System.Xml.Xsl.XsltSettings&quot;> </xref>来套用的樣式表。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、<xref:System.Xml.Xsl.XsltSettings.Default*>將會套用。</xref:System.Xml.Xsl.XsltSettings.Default*>"
    - id: stylesheetResolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>使用解析參考中的樣式表模組<xref uid=&quot;langword_csharp_xsl:import&quot; name=&quot;xsl:import&quot; href=&quot;&quot;></xref>和<xref uid=&quot;langword_csharp_xsl:include&quot; name=&quot;xsl:include&quot; href=&quot;&quot;></xref>項目。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，將不會解析外部資源。"
    - id: debug
      type: System.Boolean
      description: "將此設定為<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>啟用偵錯工具偵錯樣式表。"
    - id: typeBuilder
      type: System.Reflection.Emit.TypeBuilder
      description: "<xref:System.Reflection.Emit.TypeBuilder>用於編譯樣式表。</xref:System.Reflection.Emit.TypeBuilder> 所提供的 TypeBuilder 用於產生結果類型。"
    - id: scriptAssemblyPath
      type: System.String
      description: "針對產生的組件的基底路徑<xref uid=&quot;langword_csharp_msxsl:script&quot; name=&quot;msxsl:script&quot; href=&quot;&quot;></xref>項目。 如果只產生一個指令碼組件，這個參數會指定該組件的路徑。 如果多個指令碼組件，相異後置字元將會附加至檔案名稱，以便確保組件名稱的唯一性。"
    return:
      type: System.CodeDom.Compiler.CompilerErrorCollection
      description: "A <xref href=&quot;System.CodeDom.Compiler.CompilerErrorCollection&quot;> </xref>物件，其中包含編譯器錯誤和警告，指出編譯的結果。"
  overload: System.Xml.Xsl.XslCompiledTransform.CompileToType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.String)
  id: Load(System.String)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Load(String)
  nameWithType: XslCompiledTransform.Load(String)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "載入並編譯位於指定之 URI 的樣式表。"
  remarks: "<xref:System.Xml.Xsl.XslCompiledTransform>類別支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslCompiledTransform> XSLT 樣式表必須使用`http://www.w3.org/1999/XSL/Transform`命名空間。       這個方法具有下列行為:-<xref:System.Xml.XmlUrlResolver>沒有使用者認證用來解析樣式表的 URI，並處理任何`xsl:import`或`xsl:include`項目。</xref:System.Xml.XmlUrlResolver>      -<xref:System.Xml.XmlReader>預設設定用來載入樣式表。</xref:System.Xml.XmlReader> <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>上停用 DTD 處理 如果您需要 DTD 處理，請建立<xref:System.Xml.XmlReader>這項功能已啟用，並將它傳遞給<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> </xref:System.Xml.XmlReader>      -`document()`函式會停用。      -不支援內嵌指令碼。       您可以使用<xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.String%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29>多載來指定<xref:System.Xml.XmlResolver>必要的驗證認證，或指定不同的 XSLT 設定。</xref:System.Xml.XmlResolver> </xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.String%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29>"
  example:
  - "The following example executes a transform and outputs to a file.  \n  \n [!code-vb[XslCompiledTransform.Transform#1](~/add/codesnippet/visualbasic/m-system.xml.xsl.xslcomp_2_1.vb)]\n [!code-cs[XslCompiledTransform.Transform#1](~/add/codesnippet/csharp/m-system.xml.xsl.xslcomp_2_1.cs)]"
  syntax:
    content: public void Load (string stylesheetUri);
    parameters:
    - id: stylesheetUri
      type: System.String
      description: "樣式表的 URI。"
  overload: System.Xml.Xsl.XslCompiledTransform.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>stylesheetUri</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "樣式表包含錯誤。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "找不到樣式表。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code> stylesheetUri </code>值包含檔案名稱或找不到的目錄。"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "<code> stylesheetUri </code>值無法解析。       -或者-處理要求時發生錯誤。"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>stylesheetUri</code>不是有效的 URI。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "發生剖析錯誤載入樣式表。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Type)
  id: Load(System.Type)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Load(Type)
  nameWithType: XslCompiledTransform.Load(Type)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(Type)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "載入使用建立的已編譯的樣式表[XSLT 編譯器 (xsltc.exe)](~/add/includes/ajax-current-ext-md.md)。"
  remarks: "Xsltc.exe 工具會用來編譯樣式表，並從樣式表產生組件。 Load 方法會從組件載入編譯的樣式表。      > [!NOTE] > 中您的應用程式必須也包含 XSLT 組件做為參考。"
  example:
  - "The following example shows how to load a compiled style sheet from an XSLT assembly. The example assumes that the xsltc.exe tool was used to create an assembly named bookOrders.dll with a class named bookOrders.  \n  \n> [!NOTE]\n>  You have to reference the XSLT assembly when compiling the code. For example, `csc /r:system.dll;system.xml.dll;bookOrders.dll myCode.cs`.  \n  \n```  \n// Load the type of the class.  \nXslCompiledTransform xslt = new XslCompiledTransform();  \nxslt.Load(typeof(bookOrders));  \n```"
  syntax:
    content: public void Load (Type compiledStylesheet);
    parameters:
    - id: compiledStylesheet
      type: System.Type
      description: "包含已編譯的樣式表的類別名稱。       這通常是樣式表的名稱。 除非另外指定，否則 xsltc.exe 工具會樣式表名稱的類別和組件名稱。"
  overload: System.Xml.Xsl.XslCompiledTransform.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)
  id: Load(System.Xml.XmlReader)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Load(XmlReader)
  nameWithType: XslCompiledTransform.Load(XmlReader)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(XmlReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "編譯<xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>中所包含的樣式表"
  remarks: "<xref:System.Xml.Xsl.XslCompiledTransform>類別支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslCompiledTransform> XSLT 樣式表必須使用`http://www.w3.org/1999/XSL/Transform`命名空間。       從目前節點載入樣式表<xref:System.Xml.XmlReader>透過所有子系。</xref:System.Xml.XmlReader> 這可讓您使用做為樣式表的文件的一部分。 Load 方法完成之後，<xref:System.Xml.XmlReader>位於樣式表結尾之後的下一個節點。</xref:System.Xml.XmlReader> 如果到達文件結尾，<xref:System.Xml.XmlReader>會定位於檔案結尾 (EOF)。</xref:System.Xml.XmlReader>       這個方法具有下列行為:-<xref:System.Xml.XmlUrlResolver>沒有使用者認證用來處理任何`xsl:import`或`xsl:include`項目。</xref:System.Xml.XmlUrlResolver>      -`document()`函式會停用。      -不支援內嵌指令碼。       您可以使用<xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29>多載來指定<xref:System.Xml.XmlResolver>必要的驗證認證，或指定不同的 XSLT 設定。</xref:System.Xml.XmlResolver> </xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29>"
  example:
  - "The following example loads a style sheet contained in an <xref:System.Xml.XmlReader> object.  \n  \n [!code-vb[XslCompiledTransform.Load#5](~/add/codesnippet/visualbasic/m-system.xml.xsl.xslcomp_4_1.vb)]\n [!code-cs[XslCompiledTransform.Load#5](~/add/codesnippet/csharp/m-system.xml.xsl.xslcomp_4_1.cs)]"
  syntax:
    content: public void Load (System.Xml.XmlReader stylesheet);
    parameters:
    - id: stylesheet
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>包含樣式表。</xref:System.Xml.XmlReader>"
  overload: System.Xml.Xsl.XslCompiledTransform.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>stylesheet</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "樣式表包含錯誤。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)
  id: Load(System.Xml.XPath.IXPathNavigable)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Load(IXPathNavigable)
  nameWithType: XslCompiledTransform.Load(IXPathNavigable)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(IXPathNavigable)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "編譯樣式表中包含<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>物件。"
  remarks: "<xref:System.Xml.Xsl.XslCompiledTransform>類別支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslCompiledTransform> XSLT 樣式表必須使用`http://www.w3.org/1999/XSL/Transform`命名空間。       這個方法具有下列行為:-<xref:System.Xml.XmlUrlResolver>沒有使用者認證用來處理任何`xsl:import`或`xsl:include`項目。</xref:System.Xml.XmlUrlResolver>      -`document()`函式會停用。      -不支援內嵌指令碼。       您可以使用<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>多載來指定<xref:System.Xml.XmlResolver>必要的驗證認證，或指定不同的 XSLT 設定。</xref:System.Xml.XmlResolver> </xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>"
  example:
  - "The following example loads a style sheet contained in an <xref:System.Xml.XPath.XPathDocument> object.  \n  \n [!code-vb[XslCompiledTransform.Load#1](~/add/codesnippet/visualbasic/m-system.xml.xsl.xslcomp_3_1.vb)]\n [!code-cs[XslCompiledTransform.Load#1](~/add/codesnippet/csharp/m-system.xml.xsl.xslcomp_3_1.cs)]"
  syntax:
    content: public void Load (System.Xml.XPath.IXPathNavigable stylesheet);
    parameters:
    - id: stylesheet
      type: System.Xml.XPath.IXPathNavigable
      description: "實作<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>介面。 在 Microsoft.NET Framework 中，這可以是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含樣式表。"
  overload: System.Xml.Xsl.XslCompiledTransform.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>stylesheet</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "樣式表包含錯誤。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])
  id: Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Load(MethodInfo,Byte[],Type[])
  nameWithType: XslCompiledTransform.Load(MethodInfo,Byte[],Type[])
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(MethodInfo,Byte[],Type[])
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "從使用編譯的樣式表載入方法<xref uid=&quot;langword_csharp_XSLTC.exe&quot; name=&quot;XSLTC.exe&quot; href=&quot;&quot;></xref>公用程式。"
  remarks: "這個方法會接受編譯的樣式表的形式<xref:System.Reflection.MethodInfo>物件、 位元組陣列和型別陣列。</xref:System.Reflection.MethodInfo> <xref:System.Reflection.Emit.DynamicMethod>物件可用來允許已編譯的樣式表方法會捨棄時<xref:System.Xml.Xsl.XslCompiledTransform>物件回收。</xref:System.Xml.Xsl.XslCompiledTransform></xref:System.Reflection.Emit.DynamicMethod>"
  example:
  - "The code example below uses the Load to load a compiled style sheet. The transformation reduces the value of the `Price` element by ten percent.  \n  \n [!code-cs[XsltDynamicMethodLoad#1](~/add/codesnippet/csharp/3f995c36-b532-490b-a825-_1.cs)]\n [!code-vb[XsltDynamicMethodLoad#1](~/add/codesnippet/visualbasic/3f995c36-b532-490b-a825-_1.vb)]  \n  \n> [!NOTE]\n>  The \"Transform\" assembly used in this example was built using the xsltc.exe utility. For detailed information on using this command line tool, see [How to: Perform an XSLT Transformation by Using an Assembly](~/add/includes/ajax-current-ext-md.md).  \n  \n The code example above uses the following transformation:  \n  \n```  \n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"  \n  xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\"  \n  xmlns:user=\"urn:my-scripts\">  \n  <msxsl:script language=\"C#\" implements-prefix=\"user\">  \n    <![CDATA[  \n  public double modifyPrice(double price){  \n    price*=0.9;  \n    return price;  \n  }  \n  ]]>  \n  </msxsl:script>  \n  <xsl:template match=\"Root\">  \n    <Root xmlns=\"\">  \n      <Price><xsl:value-of select=\"user:modifyPrice(Price)\"/></Price>  \n    </Root>  \n  </xsl:template>  \n</xsl:stylesheet>  \n```"
  syntax:
    content: public void Load (System.Reflection.MethodInfo executeMethod, byte[] queryData, Type[] earlyBoundTypes);
    parameters:
    - id: executeMethod
      type: System.Reflection.MethodInfo
      description: "A<xref:System.Reflection.MethodInfo>物件，代表編譯器產生`execute`方法編譯的樣式表。</xref:System.Reflection.MethodInfo>"
    - id: queryData
      type: System.Byte[]
      description: "序列化資料的位元組陣列中結構`staticData`欄位所產生的已編譯的樣式表<xref:System.Xml.Xsl.XslCompiledTransform.CompileToType*>方法。</xref:System.Xml.Xsl.XslCompiledTransform.CompileToType*>"
    - id: earlyBoundTypes
      type: System.Type[]
      description: "儲存在編譯器所產生的型別陣列`ebTypes`編譯的樣式表的欄位。"
  overload: System.Xml.Xsl.XslCompiledTransform.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  id: Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Load(String,XsltSettings,XmlResolver)
  nameWithType: XslCompiledTransform.Load(String,XsltSettings,XmlResolver)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(String,XsltSettings,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "載入並編譯 URI 所指定的 XSLT 樣式表。 <xref href=&quot;System.Xml.XmlResolver&quot;> </xref>解析任何 XSLT`import`或`include`項目和 XSLT 設定會決定在樣式表的權限。"
  remarks: "<xref:System.Xml.Xsl.XslCompiledTransform>類別支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslCompiledTransform> XSLT 樣式表必須使用`http://www.w3.org/1999/XSL/Transform`命名空間。       <xref:System.Xml.XmlReader>預設設定用來載入樣式表。</xref:System.Xml.XmlReader> <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>上停用 DTD 處理 如果您需要 DTD 處理，請建立<xref:System.Xml.XmlReader>這項功能已啟用，並將它傳遞給<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> </xref:System.Xml.XmlReader>"
  example:
  - "The following example loads a style sheet that is stored on a network resource. An <xref:System.Xml.XmlSecureResolver> object specifies the credentials necessary to access the style sheet.  \n  \n [!code-vb[XslCompiledTransform.Load#2](~/add/codesnippet/visualbasic/7ddc7420-1fde-47dd-8fb0-_1.vb)]\n [!code-cs[XslCompiledTransform.Load#2](~/add/codesnippet/csharp/7ddc7420-1fde-47dd-8fb0-_1.cs)]"
  syntax:
    content: public void Load (string stylesheetUri, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);
    parameters:
    - id: stylesheetUri
      type: System.String
      description: "樣式表的 URI。"
    - id: settings
      type: System.Xml.Xsl.XsltSettings
      description: "<xref href=&quot;System.Xml.Xsl.XsltSettings&quot;> </xref>来套用的樣式表。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、<xref:System.Xml.Xsl.XsltSettings.Default*>項設定會套用。</xref:System.Xml.Xsl.XsltSettings.Default*>"
    - id: stylesheetResolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用來解析樣式表的 URI，以及在 XSLT 中參考的任何樣式表`import`和`include`項目。"
  overload: System.Xml.Xsl.XslCompiledTransform.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>stylesheetUri</code> or <code>stylesheetResolver</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "樣式表包含錯誤。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "找不到樣式表。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code> stylesheetUri </code>值包含檔案名稱或找不到的目錄。"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "<code> stylesheetUri </code>值無法解析。       -或者-處理要求時發生錯誤。"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>stylesheetUri</code>不是有效的 URI。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "發生剖析錯誤載入樣式表。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  id: Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Load(XmlReader,XsltSettings,XmlResolver)
  nameWithType: XslCompiledTransform.Load(XmlReader,XsltSettings,XmlResolver)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(XmlReader,XsltSettings,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "會編譯 XSLT 樣式表包含在<xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> <xref href=&quot;System.Xml.XmlResolver&quot;> </xref>解析任何 XSLT`import`或`include`項目和 XSLT 設定會決定在樣式表的權限。"
  remarks: "<xref:System.Xml.Xsl.XslCompiledTransform>類別支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslCompiledTransform> XSLT 樣式表必須使用`http://www.w3.org/1999/XSL/Transform`命名空間。       從目前節點載入樣式表<xref:System.Xml.XmlReader>透過所有子系。</xref:System.Xml.XmlReader> 這可讓您使用做為樣式表的文件的一部分。 之後<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法完成，<xref:System.Xml.XmlReader>位於樣式表結尾之後的下一個節點。</xref:System.Xml.XmlReader> </xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 如果到達文件結尾，<xref:System.Xml.XmlReader>會定位於檔案結尾 (EOF)。</xref:System.Xml.XmlReader>"
  example:
  - "The following example loads a style sheet and enables support for XSLT scripting.  \n  \n [!code-vb[XslCompiledTransform.Load#3](~/add/codesnippet/visualbasic/ec76ab0a-8bf0-415f-87c6-_1.vb)]\n [!code-cs[XslCompiledTransform.Load#3](~/add/codesnippet/csharp/ec76ab0a-8bf0-415f-87c6-_1.cs)]"
  syntax:
    content: public void Load (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);
    parameters:
    - id: stylesheet
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>包含樣式表。</xref:System.Xml.XmlReader>"
    - id: settings
      type: System.Xml.Xsl.XsltSettings
      description: "<xref href=&quot;System.Xml.Xsl.XsltSettings&quot;> </xref>来套用的樣式表。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、<xref:System.Xml.Xsl.XsltSettings.Default*>項設定會套用。</xref:System.Xml.Xsl.XsltSettings.Default*>"
    - id: stylesheetResolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用來解析任何在 XSLT 中參考的樣式表`import`和`include`項目。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，就不會解析外部資源。"
  overload: System.Xml.Xsl.XslCompiledTransform.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>stylesheet</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "樣式表包含錯誤。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  id: Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Load(IXPathNavigable,XsltSettings,XmlResolver)
  nameWithType: XslCompiledTransform.Load(IXPathNavigable,XsltSettings,XmlResolver)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(IXPathNavigable,XsltSettings,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "會編譯 XSLT 樣式表中包含<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;> </xref>。 <xref href=&quot;System.Xml.XmlResolver&quot;> </xref>解析任何 XSLT`import`或`include`項目和 XSLT 設定會決定在樣式表的權限。"
  remarks: "<xref:System.Xml.Xsl.XslCompiledTransform>類別支援 XSLT 1.0 語法。</xref:System.Xml.Xsl.XslCompiledTransform> XSLT 樣式表必須使用`http://www.w3.org/1999/XSL/Transform`命名空間。"
  example:
  - "The following example loads a style sheet. The <xref:System.Xml.XmlSecureResolver> object contains the credentials necessary to access any `import` or `include` elements found in the style sheet.  \n  \n [!code-vb[XslCompiledTransform.Load#4](~/add/codesnippet/visualbasic/8f1118cc-2b51-4727-9f95-_1.vb)]\n [!code-cs[XslCompiledTransform.Load#4](~/add/codesnippet/csharp/8f1118cc-2b51-4727-9f95-_1.cs)]"
  syntax:
    content: public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);
    parameters:
    - id: stylesheet
      type: System.Xml.XPath.IXPathNavigable
      description: "實作<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>介面。 在 Microsoft.NET Framework 中，這可以是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含樣式表。"
    - id: settings
      type: System.Xml.Xsl.XsltSettings
      description: "<xref href=&quot;System.Xml.Xsl.XsltSettings&quot;> </xref>来套用的樣式表。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、<xref:System.Xml.Xsl.XsltSettings.Default*>項設定會套用。</xref:System.Xml.Xsl.XsltSettings.Default*>"
    - id: stylesheetResolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用來解析任何在 XSLT 中參考的樣式表`import`和`include`項目。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，就不會解析外部資源。"
  overload: System.Xml.Xsl.XslCompiledTransform.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>stylesheet</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "樣式表包含錯誤。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.OutputSettings
  id: OutputSettings
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: OutputSettings
  nameWithType: XslCompiledTransform.OutputSettings
  fullName: System.Xml.Xsl.XslCompiledTransform.OutputSettings
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "取得<xref:System.Xml.XmlWriterSettings>物件，其中包含輸出資訊衍生自`xsl:output`樣式表的項目。</xref:System.Xml.XmlWriterSettings>"
  remarks: "在成功呼叫之後填入這個屬性<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 它包含資訊衍生自`xsl:output`編譯的樣式表的項目。 這<xref:System.Xml.XmlWriterSettings>物件可以傳遞至<xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName>方法來建立<xref:System.Xml.XmlWriter>您要輸出的物件。</xref:System.Xml.XmlWriter> </xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName> </xref:System.Xml.XmlWriterSettings>"
  example:
  - "The following example shows how to use the OutputSettings property to create an <xref:System.Xml.XmlWriter> object that writes text to the console.  \n  \n [!code-vb[XslCompiledTransform.OutputSettings#1](~/add/codesnippet/visualbasic/p-system.xml.xsl.xslcomp_1_1.vb)]\n [!code-cs[XslCompiledTransform.OutputSettings#1](~/add/codesnippet/csharp/p-system.xml.xsl.xslcomp_1_1.cs)]  \n  \n The example uses the `books.xml` and `outputConsole.xsl` files as input.  \n  \n `books.xml`  \n  \n [!code-xml[XslCompiledTransform.OutputSettings#2](~/add/codesnippet/xml/p-system.xml.xsl.xslcomp_1_2.xml)]  \n  \n `outputConsole.xsl`  \n  \n [!code-xml[XslCompiledTransform.OutputSettings#3](~/add/codesnippet/xml/p-system.xml.xsl.xslcomp_1_3.xsl)]"
  syntax:
    content: public System.Xml.XmlWriterSettings OutputSettings { get; }
    return:
      type: System.Xml.XmlWriterSettings
      description: "唯讀<xref:System.Xml.XmlWriterSettings>物件，其中包含輸出資訊衍生自`xsl:output`樣式表的項目。</xref:System.Xml.XmlWriterSettings> 這個值可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.Xsl.XslCompiledTransform.OutputSettings*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.TemporaryFiles
  id: TemporaryFiles
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: TemporaryFiles
  nameWithType: XslCompiledTransform.TemporaryFiles
  fullName: System.Xml.Xsl.XslCompiledTransform.TemporaryFiles
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "取得<xref href=&quot;System.CodeDom.Compiler.TempFileCollection&quot;> </xref> ，其中包含在成功呼叫之後產生磁碟上的暫存檔案<xref:System.Xml.Xsl.XslCompiledTransform.Load*>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Load*>"
  remarks: "這個屬性會識別 XSLT 期間所產生的檔案處理。 檔案會放在暫存目錄 （%TEMP%環境變數所指定） 您可以刪除這些檔案在 XSLT 處理完成後。"
  example:
  - "The following example writes the names of temporary files to the console.  \n  \n> [!NOTE]\n>  Temporary files are created only when loading style sheets with \\<msxsl:script> blocks.  \n  \n [!code-vb[XslCompiledTransform.Transform#8](~/add/codesnippet/visualbasic/p-system.xml.xsl.xslcomp_0_1.vb)]\n [!code-cs[XslCompiledTransform.Transform#8](~/add/codesnippet/csharp/p-system.xml.xsl.xslcomp_0_1.cs)]"
  syntax:
    content: public System.CodeDom.Compiler.TempFileCollection TemporaryFiles { get; }
    return:
      type: System.CodeDom.Compiler.TempFileCollection
      description: "<xref href=&quot;System.CodeDom.Compiler.TempFileCollection&quot;> </xref> ，其中包含磁碟上產生的暫存檔案。 這個值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果<xref:System.Xml.Xsl.XslCompiledTransform.Load*>不成功呼叫方法，或如果偵錯尚未啟用。</xref:System.Xml.Xsl.XslCompiledTransform.Load*>"
  overload: System.Xml.Xsl.XslCompiledTransform.TemporaryFiles*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)
  id: Transform(System.String,System.String)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(String,String)
  nameWithType: XslCompiledTransform.Transform(String,String)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用 URI 所指定的輸入文件執行轉換，並將結果輸出至檔案。"
  remarks: "這個方法會使用預設值<xref:System.Xml.XmlUrlResolver>不具使用者認證來解析的輸入和輸出文件。</xref:System.Xml.XmlUrlResolver> 如果任何這些資源會在需要驗證的網路資源，請使用的多載，<xref:System.Xml.XmlResolver>做為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>       <xref:System.Xml.XmlReader>預設設定用來載入輸入文件。</xref:System.Xml.XmlReader> <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>上停用 DTD 處理 如果您需要 DTD 處理，請建立<xref:System.Xml.XmlReader>這項功能已啟用，並將它傳遞給<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> </xref:System.Xml.XmlReader>"
  example:
  - "The following example executes a transform and outputs to a file.  \n  \n [!code-vb[XslCompiledTransform.Transform#1](~/add/codesnippet/visualbasic/m-system.xml.xsl.xslcomp_0_1.vb)]\n [!code-cs[XslCompiledTransform.Transform#1](~/add/codesnippet/csharp/m-system.xml.xsl.xslcomp_0_1.cs)]  \n  \n The sample uses the following two input files:  \n  \n `books.xml`  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/add/codesnippet/xml/m-system.xml.xsl.xslcomp_0_2.xml)]  \n  \n `output.xsl`  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/add/codesnippet/xml/m-system.xml.xsl.xslcomp_0_3.xsl)]"
  syntax:
    content: public void Transform (string inputUri, string resultsFile);
    parameters:
    - id: inputUri
      type: System.String
      description: "輸入文件的 URI。"
    - id: resultsFile
      type: System.String
      description: "輸出檔的 URI。"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputUri</code> or <code>resultsFile</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "執行 XSLT 轉換時發生錯誤。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "找不到輸入文件。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code> inputUri </code>或<code> resultsFile </code>值包含檔案名稱，或找不到目錄。"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "<code> inputUri </code>或<code> resultsFile </code>值無法解析。       -或者-處理要求時發生錯誤"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>inputUri</code>或<code>resultsFile</code>不是有效的 URI。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "發生載入輸入文件剖析錯誤。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)
  id: Transform(System.String,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(String,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(String,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(String,XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用 URI 所指定的輸入文件執行轉換，並將結果輸出至<xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "這個方法會使用預設值<xref:System.Xml.XmlUrlResolver>不具使用者認證來解析輸入文件和 XSLT 的任何執行個體`document()`函式樣式表中發現。</xref:System.Xml.XmlUrlResolver> 如果任何這些資源會在需要驗證的網路資源，請使用的多載，<xref:System.Xml.XmlResolver>做為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>       <xref:System.Xml.XmlReader>預設設定用來載入輸入文件。</xref:System.Xml.XmlReader> <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>上停用 DTD 處理 如果您需要 DTD 處理，請建立<xref:System.Xml.XmlReader>這項功能已啟用，並將它傳遞給<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> </xref:System.Xml.XmlReader>       這個方法不支援`xsl:strip-space`項目。 如果您的已編譯的樣式表包含`xsl:strip-space`項目，您必須使用<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>多載，這個方法會接受<xref:System.Xml.XmlReader>做為輸入的引數。</xref:System.Xml.XmlReader> </xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>"
  example:
  - "The following example executes an XSLT transformation and outputs to an <xref:System.Xml.XmlWriter> object.  \n  \n [!code-vb[XslCompiledTransform.Transform#2](~/add/codesnippet/visualbasic/1a837310-9fde-4a29-a77e-_1.vb)]\n [!code-cs[XslCompiledTransform.Transform#2](~/add/codesnippet/csharp/1a837310-9fde-4a29-a77e-_1.cs)]"
  syntax:
    content: public void Transform (string inputUri, System.Xml.XmlWriter results);
    parameters:
    - id: inputUri
      type: System.String
      description: "輸入文件的 URI。"
    - id: results
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>至您想要輸出。</xref:System.Xml.XmlWriter>       如果樣式表包含`xsl:output`項目，您應該建立<xref:System.Xml.XmlWriter>使用<xref:System.Xml.XmlWriterSettings>從傳回的物件<xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*>屬性。</xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*> </xref:System.Xml.XmlWriterSettings> </xref:System.Xml.XmlWriter> 如此可確保<xref:System.Xml.XmlWriter>具有正確的輸出設定。</xref:System.Xml.XmlWriter>"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputUri</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "執行 XSLT 轉換時發生錯誤。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code> inputUri </code>值包含檔案名稱，或找不到目錄。"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "<code> inputUri </code>值無法解析。       -或者-處理要求時發生錯誤。"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>inputUri</code>不是有效的 URI。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "發生載入輸入文件剖析錯誤。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)
  id: Transform(System.Xml.XmlReader,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(XmlReader,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(XmlReader,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader,XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用指定的<xref:System.Xml.XmlReader>物件，並將結果輸出至<xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter></xref:System.Xml.XmlReader>的輸入文件執行轉換"
  remarks: "如果 XSLT`document()`啟用函式時，就會解析使用<xref:System.Xml.XmlUrlResolver>不具使用者認證。</xref:System.Xml.XmlUrlResolver> 如果在需要驗證的網路資源位於外部的資源，請使用接受的多載<xref:System.Xml.XmlResolver>做為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>"
  example:
  - "The following example transforms the first book in the books.xml file.  \n  \n [!code-vb[XslCompiledTransform.Transform#7](~/add/codesnippet/visualbasic/e9e9dd2b-fa70-4f3f-9037-_1.vb)]\n [!code-cs[XslCompiledTransform.Transform#7](~/add/codesnippet/csharp/e9e9dd2b-fa70-4f3f-9037-_1.cs)]"
  syntax:
    content: public void Transform (System.Xml.XmlReader input, System.Xml.XmlWriter results);
    parameters:
    - id: input
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>包含輸入文件。</xref:System.Xml.XmlReader>"
    - id: results
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>至您想要輸出。</xref:System.Xml.XmlWriter>       如果樣式表包含`xsl:output`項目，您應該建立<xref:System.Xml.XmlWriter>使用<xref:System.Xml.XmlWriterSettings>從傳回的物件<xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*>屬性。</xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*> </xref:System.Xml.XmlWriterSettings> </xref:System.Xml.XmlWriter> 如此可確保<xref:System.Xml.XmlWriter>具有正確的輸出設定。</xref:System.Xml.XmlWriter>"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>input</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "執行 XSLT 轉換時發生錯誤。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)
  id: Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(IXPathNavigable,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(IXPathNavigable,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(IXPathNavigable,XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用所指定的輸入文件執行轉換<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>物件，並將結果輸出至<xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "如果 XSLT`document()`啟用函式時，就會解析使用<xref:System.Xml.XmlUrlResolver>不具使用者認證。</xref:System.Xml.XmlUrlResolver> 如果在需要驗證的網路資源位於外部的資源，請使用接受的多載<xref:System.Xml.XmlResolver>做為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>       這個方法不支援`xsl:strip-space`項目。 如果您的已編譯的樣式表包含`xsl:strip-space`項目，您必須使用<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>多載，這個方法會接受<xref:System.Xml.XmlReader>做為輸入的引數。</xref:System.Xml.XmlReader> </xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>       <xref:System.Xml.XPath.IXPathNavigable>中實作介面<xref:System.Xml.XmlNode>和<xref:System.Xml.XPath.XPathDocument>類別。</xref:System.Xml.XPath.XPathDocument> </xref:System.Xml.XmlNode> </xref:System.Xml.XPath.IXPathNavigable> 這些類別代表 XML 資料的記憶體中快取。      -<xref:System.Xml.XmlNode>類別以 W3C 文件物件模型 (DOM) 上，並包含編輯功能。</xref:System.Xml.XmlNode>      -<xref:System.Xml.XPath.XPathDocument>類別是以 XPath 資料模型為基礎的唯讀資料存放區。</xref:System.Xml.XPath.XPathDocument> <xref:System.Xml.XPath.XPathDocument>XSLT 建議的類別處理。</xref:System.Xml.XPath.XPathDocument> 它提供更快的效能相較於<xref:System.Xml.XmlNode>類別。</xref:System.Xml.XmlNode>       轉換是整個套用至文件。 換句話說，如果您要傳入的節點不是文件根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立只包含節點片段，物件，並將該物件傳遞至轉換方法。 如需詳細資訊，請參閱[How to︰ 轉換節點片段](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example executes an XSLT transformation and outputs to an <xref:System.Xml.XmlWriter> object.  \n  \n [!code-vb[XslCompiledTransform.Transform#5](~/add/codesnippet/visualbasic/58ce38a1-de5d-405a-b8cb-_1.vb)]\n [!code-cs[XslCompiledTransform.Transform#5](~/add/codesnippet/csharp/58ce38a1-de5d-405a-b8cb-_1.cs)]"
  syntax:
    content: public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.XmlWriter results);
    parameters:
    - id: input
      type: System.Xml.XPath.IXPathNavigable
      description: "實作<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>介面。 在 Microsoft.NET Framework 中，這可以是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含要轉換的資料。"
    - id: results
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>至您想要輸出。</xref:System.Xml.XmlWriter>       如果樣式表包含`xsl:output`項目，您應該建立<xref:System.Xml.XmlWriter>使用<xref:System.Xml.XmlWriterSettings>從傳回的物件<xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*>屬性。</xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*> </xref:System.Xml.XmlWriterSettings> </xref:System.Xml.XmlWriter> 如此可確保<xref:System.Xml.XmlWriter>具有正確的輸出設定。</xref:System.Xml.XmlWriter>"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>input</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "執行 XSLT 轉換時發生錯誤。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  id: Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(String,XsltArgumentList,Stream)
  nameWithType: XslCompiledTransform.Transform(String,XsltArgumentList,Stream)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(String,XsltArgumentList,Stream)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用 URI 所指定的輸入文件執行轉換，並將結果輸出至資料流。 <xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>提供額外的執行階段引數。"
  remarks: "這個方法會使用預設值<xref:System.Xml.XmlUrlResolver>不具使用者認證來解析輸入文件和 XSLT 的任何執行個體`document()`函式樣式表中發現。</xref:System.Xml.XmlUrlResolver> 如果任何這些資源會在需要驗證的網路資源，請使用的多載，<xref:System.Xml.XmlResolver>做為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>       <xref:System.Xml.XmlReader>預設設定用來載入輸入文件。</xref:System.Xml.XmlReader> <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>上停用 DTD 處理 如果您需要 DTD 處理，請建立<xref:System.Xml.XmlReader>這項功能已啟用，並將它傳遞給<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> </xref:System.Xml.XmlReader>"
  syntax:
    content: public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);
    parameters:
    - id: inputUri
      type: System.String
      description: "輸入文件的 URI。"
    - id: arguments
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。 這個值可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: results
      type: System.IO.Stream
      description: "您要輸出資料流。"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputUri</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "執行 XSLT 轉換時發生錯誤。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code> inputUri </code>值包含檔案名稱，或找不到目錄。"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "<code> inputUri </code>值無法解析。       -或者-處理要求時發生錯誤"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>inputUri</code>不是有效的 URI。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "發生載入輸入文件剖析錯誤。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  id: Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(String,XsltArgumentList,TextWriter)
  nameWithType: XslCompiledTransform.Transform(String,XsltArgumentList,TextWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(String,XsltArgumentList,TextWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用 URI 所指定的輸入文件執行轉換，並將結果輸出至<xref:System.IO.TextWriter>.</xref:System.IO.TextWriter>"
  remarks: "這個方法會使用預設值<xref:System.Xml.XmlUrlResolver>不具使用者認證來解析輸入文件和 XSLT 的任何執行個體`document()`函式樣式表中發現。</xref:System.Xml.XmlUrlResolver> 如果任何這些資源會在需要驗證的網路資源，請使用的多載，<xref:System.Xml.XmlResolver>做為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>       <xref:System.Xml.XmlReader>預設設定用來載入輸入文件。</xref:System.Xml.XmlReader> <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>上停用 DTD 處理 如果您需要 DTD 處理，請建立<xref:System.Xml.XmlReader>這項功能已啟用，並將它傳遞給<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> </xref:System.Xml.XmlReader>"
  example:
  - "The following example executes an XSLT transformation and outputs a string.  \n  \n [!code-vb[XslCompiledTransform.Transform#3](~/add/codesnippet/visualbasic/50b87a05-12d4-4637-9d7e-_1.vb)]\n [!code-cs[XslCompiledTransform.Transform#3](~/add/codesnippet/csharp/50b87a05-12d4-4637-9d7e-_1.cs)]"
  syntax:
    content: public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);
    parameters:
    - id: inputUri
      type: System.String
      description: "輸入文件的 URI。"
    - id: arguments
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。 這個值可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: results
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>至您想要輸出。</xref:System.IO.TextWriter>"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputUri</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "執行 XSLT 轉換時發生錯誤。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code> inputUri </code>值包含檔案名稱，或找不到目錄。"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "<code> inputUri </code>值無法解析。       -或者-處理要求時發生錯誤"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>inputUri</code>不是有效的 URI。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "發生載入輸入文件剖析錯誤。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  id: Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(String,XsltArgumentList,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(String,XsltArgumentList,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(String,XsltArgumentList,XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用 URI 所指定的輸入文件執行轉換，並將結果輸出至<xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> <xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>提供額外的執行階段引數。"
  remarks: "這個方法會使用預設值<xref:System.Xml.XmlUrlResolver>不具使用者認證來解析輸入文件和 XSLT 的任何執行個體`document()`函式樣式表中發現。</xref:System.Xml.XmlUrlResolver> 如果任何這些資源會在需要驗證的網路資源，請使用的多載，<xref:System.Xml.XmlResolver>做為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>       <xref:System.Xml.XmlReader>預設設定用來載入輸入文件。</xref:System.Xml.XmlReader> <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>上停用 DTD 處理 如果您需要 DTD 處理，請建立<xref:System.Xml.XmlReader>這項功能已啟用，並將它傳遞給<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> </xref:System.Xml.XmlReader>"
  example:
  - "The following example uses an <xref:System.Xml.Xsl.XsltArgumentList> object to create a parameter representing the current date and time.  \n  \n [!code-vb[XsltArgumentList.AddParam#1](~/add/codesnippet/visualbasic/614c84d5-4852-4d05-913d-_1.vb)]\n [!code-cs[XsltArgumentList.AddParam#1](~/add/codesnippet/csharp/614c84d5-4852-4d05-913d-_1.cs)]  \n  \n The example uses the following two data files as input.  \n  \n order.xml  \n  \n [!code-xml[XsltArgumentList.AddParam#2](~/add/codesnippet/xml/614c84d5-4852-4d05-913d-_2.xml)]  \n  \n order.xsl  \n  \n [!code-xml[XsltArgumentList.AddParam#3](~/add/codesnippet/xml/614c84d5-4852-4d05-913d-_3.xsl)]"
  syntax:
    content: public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);
    parameters:
    - id: inputUri
      type: System.String
      description: "輸入文件的 URI。"
    - id: arguments
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。 這個值可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: results
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>至您想要輸出。</xref:System.Xml.XmlWriter>       如果樣式表包含`xsl:output`項目，您應該建立<xref:System.Xml.XmlWriter>使用<xref:System.Xml.XmlWriterSettings>從傳回的物件<xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*>屬性。</xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*> </xref:System.Xml.XmlWriterSettings> </xref:System.Xml.XmlWriter> 如此可確保<xref:System.Xml.XmlWriter>具有正確的輸出設定。</xref:System.Xml.XmlWriter>"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputUri</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "執行 XSLT 轉換時發生錯誤。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code> inputtUri </code>值包含檔案名稱，或找不到目錄。"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "<code> inputUri </code>值無法解析。       -或者-處理要求時發生錯誤。"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>inputUri</code>不是有效的 URI。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "發生載入輸入文件剖析錯誤。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  id: Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(XmlReader,XsltArgumentList,Stream)
  nameWithType: XslCompiledTransform.Transform(XmlReader,XsltArgumentList,Stream)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader,XsltArgumentList,Stream)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用所指定的輸入文件執行轉換<xref:System.Xml.XmlReader>物件，並將結果輸出至資料流。</xref:System.Xml.XmlReader> <xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>提供額外的執行階段引數。"
  remarks: "如果樣式表包含 XSLT`document()`函式，它已解決使用<xref:System.Xml.XmlUrlResolver>不具使用者認證。</xref:System.Xml.XmlUrlResolver> 如果在需要驗證的網路資源位於外部的資源，請使用接受的多載<xref:System.Xml.XmlResolver>做為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>"
  syntax:
    content: public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);
    parameters:
    - id: input
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>包含輸入文件。</xref:System.Xml.XmlReader>"
    - id: arguments
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。 這個值可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: results
      type: System.IO.Stream
      description: "您要輸出資料流。"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>input</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "執行 XSLT 轉換時發生錯誤。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  id: Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(XmlReader,XsltArgumentList,TextWriter)
  nameWithType: XslCompiledTransform.Transform(XmlReader,XsltArgumentList,TextWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader,XsltArgumentList,TextWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用指定的<xref:System.Xml.XmlReader>物件，並將結果輸出至<xref:System.IO.TextWriter>.</xref:System.IO.TextWriter></xref:System.Xml.XmlReader>的輸入文件執行轉換 <xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>提供額外的執行階段引數。"
  remarks: "如果樣式表包含 XSLT`document()`函式，它已解決使用<xref:System.Xml.XmlUrlResolver>不具使用者認證。</xref:System.Xml.XmlUrlResolver> 如果在需要驗證的網路資源位於外部的資源，請使用接受的多載<xref:System.Xml.XmlResolver>做為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>"
  syntax:
    content: public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);
    parameters:
    - id: input
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>包含輸入文件。</xref:System.Xml.XmlReader>"
    - id: arguments
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。 這個值可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: results
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>至您想要輸出。</xref:System.IO.TextWriter>"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>input</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "執行 XSLT 轉換時發生錯誤。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  id: Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(XmlReader,XsltArgumentList,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(XmlReader,XsltArgumentList,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader,XsltArgumentList,XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用指定的<xref:System.Xml.XmlReader>物件，並將結果輸出至<xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter></xref:System.Xml.XmlReader>的輸入文件執行轉換 <xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>提供額外的執行階段引數。"
  remarks: "如果樣式表包含 XSLT`document()`函式，它已解決使用<xref:System.Xml.XmlUrlResolver>不具使用者認證。</xref:System.Xml.XmlUrlResolver> 如果在需要驗證的網路資源位於外部的資源，請使用接受的多載<xref:System.Xml.XmlResolver>做為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>"
  syntax:
    content: public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);
    parameters:
    - id: input
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>包含輸入文件。</xref:System.Xml.XmlReader>"
    - id: arguments
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。 這個值可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: results
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>至您想要輸出。</xref:System.Xml.XmlWriter>       如果樣式表包含`xsl:output`項目，您應該建立<xref:System.Xml.XmlWriter>使用<xref:System.Xml.XmlWriterSettings>從傳回的物件<xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*>屬性。</xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*> </xref:System.Xml.XmlWriterSettings> </xref:System.Xml.XmlWriter> 如此可確保<xref:System.Xml.XmlWriter>具有正確的輸出設定。</xref:System.Xml.XmlWriter>"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>input</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "執行 XSLT 轉換時發生錯誤。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  id: Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(IXPathNavigable,XsltArgumentList,Stream)
  nameWithType: XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,Stream)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,Stream)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用所指定的輸入文件執行轉換<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>物件，並將結果輸出至資料流。 <xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>提供額外的執行階段引數。"
  remarks: "如果 XSLT`document()`啟用函式時，就會解析使用<xref:System.Xml.XmlUrlResolver>不具使用者認證。</xref:System.Xml.XmlUrlResolver> 如果在需要驗證的網路資源位於外部的資源，請使用接受的多載<xref:System.Xml.XmlResolver>做為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>       這個方法不支援`xsl:strip-space`項目。 如果您的已編譯的樣式表包含`xsl:strip-space`項目，您必須使用<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>多載，這個方法會接受<xref:System.Xml.XmlReader>做為輸入的引數。</xref:System.Xml.XmlReader> </xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>       <xref:System.Xml.XPath.IXPathNavigable>中實作介面<xref:System.Xml.XmlNode>和<xref:System.Xml.XPath.XPathDocument>類別。</xref:System.Xml.XPath.XPathDocument> </xref:System.Xml.XmlNode> </xref:System.Xml.XPath.IXPathNavigable> 這些類別代表 XML 資料的記憶體中快取。      -<xref:System.Xml.XmlNode>類別以 W3C 文件物件模型 (DOM) 上，並包含編輯功能。</xref:System.Xml.XmlNode>      -<xref:System.Xml.XPath.XPathDocument>類別是以 XPath 資料模型為基礎的唯讀資料存放區。</xref:System.Xml.XPath.XPathDocument> <xref:System.Xml.XPath.XPathDocument>XSLT 建議的類別處理。</xref:System.Xml.XPath.XPathDocument> 它提供更快的效能相較於<xref:System.Xml.XmlNode>類別。</xref:System.Xml.XmlNode>       轉換是整個套用至文件。 換句話說，如果您要傳入的節點不是文件根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立只包含節點片段，物件，並將該物件傳遞至轉換方法。 如需詳細資訊，請參閱[How to︰ 轉換節點片段](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example executes an XSLT transformation and outputs to a <xref:System.IO.FileStream>.  \n  \n [!code-vb[XslCompiledTransform.Transform#6](~/add/codesnippet/visualbasic/83a14379-9d60-4f40-a273-_1.vb)]\n [!code-cs[XslCompiledTransform.Transform#6](~/add/codesnippet/csharp/83a14379-9d60-4f40-a273-_1.cs)]"
  syntax:
    content: public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);
    parameters:
    - id: input
      type: System.Xml.XPath.IXPathNavigable
      description: "實作<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>介面。 在 Microsoft.NET Framework 中，這可以是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含要轉換的資料。"
    - id: arguments
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。 這個值可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: results
      type: System.IO.Stream
      description: "您要輸出資料流。"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>input</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "執行 XSLT 轉換時發生錯誤。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  id: Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(IXPathNavigable,XsltArgumentList,TextWriter)
  nameWithType: XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,TextWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,TextWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用所指定的輸入文件執行轉換<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>物件，並將結果輸出至<xref:System.IO.TextWriter>.</xref:System.IO.TextWriter> <xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>提供額外的執行階段引數。"
  remarks: "如果 XSLT`document()`啟用函式時，就會解析使用<xref:System.Xml.XmlUrlResolver>不具使用者認證。</xref:System.Xml.XmlUrlResolver> 如果在需要驗證的網路資源位於外部的資源，請使用接受的多載<xref:System.Xml.XmlResolver>做為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>       這個方法不支援`xsl:strip-space`項目。 如果您的已編譯的樣式表包含`xsl:strip-space`項目，您必須使用<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>多載，這個方法會接受<xref:System.Xml.XmlReader>做為輸入的引數。</xref:System.Xml.XmlReader> </xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>       <xref:System.Xml.XPath.IXPathNavigable>中實作介面<xref:System.Xml.XmlNode>和<xref:System.Xml.XPath.XPathDocument>類別。</xref:System.Xml.XPath.XPathDocument> </xref:System.Xml.XmlNode> </xref:System.Xml.XPath.IXPathNavigable> 這些類別代表 XML 資料的記憶體中快取。      -<xref:System.Xml.XmlNode>類別以 W3C 文件物件模型 (DOM) 上，並包含編輯功能。</xref:System.Xml.XmlNode>      -<xref:System.Xml.XPath.XPathDocument>類別是以 XPath 資料模型為基礎的唯讀資料存放區。</xref:System.Xml.XPath.XPathDocument> <xref:System.Xml.XPath.XPathDocument>XSLT 建議的類別處理。</xref:System.Xml.XPath.XPathDocument> 它提供更快的效能相較於<xref:System.Xml.XmlNode>類別。</xref:System.Xml.XmlNode>       轉換是整個套用至文件。 換句話說，如果您要傳入的節點不是文件根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立只包含節點片段，物件，並將該物件傳遞至轉換方法。 如需詳細資訊，請參閱[How to︰ 轉換節點片段](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);
    parameters:
    - id: input
      type: System.Xml.XPath.IXPathNavigable
      description: "實作<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>介面。 在 Microsoft.NET Framework 中，這可以是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含要轉換的資料。"
    - id: arguments
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。 這個值可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: results
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>至您想要輸出。</xref:System.IO.TextWriter>"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>input</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "執行 XSLT 轉換時發生錯誤。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  id: Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(IXPathNavigable,XsltArgumentList,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用所指定的輸入文件執行轉換<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>物件，並將結果輸出至<xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> <xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>提供額外的執行階段引數。"
  remarks: "如果 XSLT`document()`啟用函式時，就會解析使用<xref:System.Xml.XmlUrlResolver>不具使用者認證。</xref:System.Xml.XmlUrlResolver> 如果在需要驗證的網路資源位於外部的資源，請使用接受的多載<xref:System.Xml.XmlResolver>做為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>       這個方法不支援`xsl:strip-space`項目。 如果您的已編譯的樣式表包含`xsl:strip-space`項目，您必須使用<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>多載，這個方法會接受<xref:System.Xml.XmlReader>做為輸入的引數。</xref:System.Xml.XmlReader> </xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>       <xref:System.Xml.XPath.IXPathNavigable>中實作介面<xref:System.Xml.XmlNode>和<xref:System.Xml.XPath.XPathDocument>類別。</xref:System.Xml.XPath.XPathDocument> </xref:System.Xml.XmlNode> </xref:System.Xml.XPath.IXPathNavigable> 這些類別代表 XML 資料的記憶體中快取。      -<xref:System.Xml.XmlNode>類別以 W3C 文件物件模型 (DOM) 上，並包含編輯功能。</xref:System.Xml.XmlNode>      -<xref:System.Xml.XPath.XPathDocument>類別是以 XPath 資料模型為基礎的唯讀資料存放區。</xref:System.Xml.XPath.XPathDocument> <xref:System.Xml.XPath.XPathDocument>XSLT 建議的類別處理。</xref:System.Xml.XPath.XPathDocument> 它提供更快的效能相較於<xref:System.Xml.XmlNode>類別。</xref:System.Xml.XmlNode>       轉換是整個套用至文件。 換句話說，如果您要傳入的節點不是文件根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立只包含節點片段，物件，並將該物件傳遞至轉換方法。 如需詳細資訊，請參閱[How to︰ 轉換節點片段](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);
    parameters:
    - id: input
      type: System.Xml.XPath.IXPathNavigable
      description: "實作<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>介面。 在 Microsoft.NET Framework 中，這可以是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含要轉換的資料。"
    - id: arguments
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。 這個值可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: results
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>至您想要輸出。</xref:System.Xml.XmlWriter>       如果樣式表包含`xsl:output`項目，您應該建立<xref:System.Xml.XmlWriter>使用<xref:System.Xml.XmlWriterSettings>從傳回的物件<xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*>屬性。</xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*> </xref:System.Xml.XmlWriterSettings> </xref:System.Xml.XmlWriter> 如此可確保<xref:System.Xml.XmlWriter>具有正確的輸出設定。</xref:System.Xml.XmlWriter>"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>input</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "執行 XSLT 轉換時發生錯誤。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  id: Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(XmlReader,XsltArgumentList,XmlWriter,XmlResolver)
  nameWithType: XslCompiledTransform.Transform(XmlReader,XsltArgumentList,XmlWriter,XmlResolver)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader,XsltArgumentList,XmlWriter,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用指定的<xref:System.Xml.XmlReader>物件，並將結果輸出至<xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter></xref:System.Xml.XmlReader>的輸入文件執行轉換 <xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>提供額外的執行階段引數和 XmlResolver 解析 XSLT`document()`函式。"
  remarks: ''
  example:
  - "The following example uses an <xref:System.Xml.XmlSecureResolver> to resolve the XSLT `document()` function.  \n  \n [!code-vb[XslCompiledTransform.Transform#4](~/add/codesnippet/visualbasic/c36dd9c6-36bd-4274-9e59-_1.vb)]\n [!code-cs[XslCompiledTransform.Transform#4](~/add/codesnippet/csharp/c36dd9c6-36bd-4274-9e59-_1.cs)]"
  syntax:
    content: public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);
    parameters:
    - id: input
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>包含輸入文件。</xref:System.Xml.XmlReader>"
    - id: arguments
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含做為轉換輸入的命名空間限定引數。 這個值可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: results
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>至您想要輸出。</xref:System.Xml.XmlWriter>       如果樣式表包含`xsl:output`項目，您應該建立<xref:System.Xml.XmlWriter>使用<xref:System.Xml.XmlWriterSettings>從傳回的物件<xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*>屬性。</xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*> </xref:System.Xml.XmlWriterSettings> </xref:System.Xml.XmlWriter> 如此可確保<xref:System.Xml.XmlWriter>具有正確的輸出設定。</xref:System.Xml.XmlWriter>"
    - id: documentResolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用來解析 XSLT`document()`函式。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、`document()`函式仍未解決。"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>input</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "執行 XSLT 轉換時發生錯誤。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  id: Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(IXPathNavigable,XsltArgumentList,XmlWriter,XmlResolver)
  nameWithType: XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter,XmlResolver)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用所指定的輸入文件執行轉換<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>物件，並將結果輸出至<xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> <xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>提供額外的執行階段引數和<xref href=&quot;System.Xml.XmlResolver&quot;></xref>解析 XSLT <xref uid=&quot;langword_csharp_document()&quot; name=&quot;document()&quot; href=&quot;&quot;> </xref>函式。"
  syntax:
    content: public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);
    parameters:
    - id: input
      type: System.Xml.XPath.IXPathNavigable
      description: "要轉換的文件由指定<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>物件。"
    - id: arguments
      type: System.Xml.Xsl.XsltArgumentList
      description: "做為引數清單<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>。"
    - id: results
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>至您想要輸出。</xref:System.Xml.XmlWriter>       如果樣式表包含<xref uid=&quot;langword_csharp_xsl:output&quot; name=&quot;xsl:output&quot; href=&quot;&quot;></xref>項目，您應該建立<xref:System.Xml.XmlWriter>使用<xref:System.Xml.XmlWriterSettings>從傳回的物件<xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*>屬性。</xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*> </xref:System.Xml.XmlWriterSettings> </xref:System.Xml.XmlWriter> 如此可確保<xref:System.Xml.XmlWriter>具有正確的輸出設定。</xref:System.Xml.XmlWriter>"
    - id: documentResolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用來解析 XSLT <xref uid=&quot;langword_csharp_document()&quot; name=&quot;document()&quot; href=&quot;&quot;> </xref>函式。 如果這是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_document()&quot; name=&quot;document()&quot; href=&quot;&quot;> </xref>函式仍未解決。"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Xml.Xsl.XsltException
  parent: System.Xml.Xsl
  isExternal: false
  name: XsltException
  nameWithType: XsltException
  fullName: System.Xml.Xsl.XsltException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.Net.WebException
  isExternal: true
  name: System.Net.WebException
- uid: System.UriFormatException
  isExternal: true
  name: System.UriFormatException
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.Xml.Xsl.XslCompiledTransform.#ctor
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: XslCompiledTransform()
  nameWithType: XslCompiledTransform.XslCompiledTransform()
  fullName: System.Xml.Xsl.XslCompiledTransform.XslCompiledTransform()
- uid: System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: XslCompiledTransform(Boolean)
  nameWithType: XslCompiledTransform.XslCompiledTransform(Boolean)
  fullName: System.Xml.Xsl.XslCompiledTransform.XslCompiledTransform(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: CompileToType(XmlReader,XsltSettings,XmlResolver,Boolean,TypeBuilder,String)
  nameWithType: XslCompiledTransform.CompileToType(XmlReader,XsltSettings,XmlResolver,Boolean,TypeBuilder,String)
  fullName: System.Xml.Xsl.XslCompiledTransform.CompileToType(XmlReader,XsltSettings,XmlResolver,Boolean,TypeBuilder,String)
- uid: System.CodeDom.Compiler.CompilerErrorCollection
  parent: System.CodeDom.Compiler
  isExternal: false
  name: CompilerErrorCollection
  nameWithType: CompilerErrorCollection
  fullName: System.CodeDom.Compiler.CompilerErrorCollection
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml.Xsl.XsltSettings
  parent: System.Xml.Xsl
  isExternal: false
  name: XsltSettings
  nameWithType: XsltSettings
  fullName: System.Xml.Xsl.XsltSettings
- uid: System.Xml.XmlResolver
  parent: System.Xml
  isExternal: false
  name: XmlResolver
  nameWithType: XmlResolver
  fullName: System.Xml.XmlResolver
- uid: System.Reflection.Emit.TypeBuilder
  parent: System.Reflection.Emit
  isExternal: true
  name: TypeBuilder
  nameWithType: TypeBuilder
  fullName: System.Reflection.Emit.TypeBuilder
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.String)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Load(String)
  nameWithType: XslCompiledTransform.Load(String)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(String)
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Type)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Load(Type)
  nameWithType: XslCompiledTransform.Load(Type)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Load(XmlReader)
  nameWithType: XslCompiledTransform.Load(XmlReader)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(XmlReader)
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Load(IXPathNavigable)
  nameWithType: XslCompiledTransform.Load(IXPathNavigable)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(IXPathNavigable)
- uid: System.Xml.XPath.IXPathNavigable
  parent: System.Xml.XPath
  isExternal: false
  name: IXPathNavigable
  nameWithType: IXPathNavigable
  fullName: System.Xml.XPath.IXPathNavigable
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Load(MethodInfo,Byte[],Type[])
  nameWithType: XslCompiledTransform.Load(MethodInfo,Byte[],Type[])
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(MethodInfo,Byte[],Type[])
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Load(String,XsltSettings,XmlResolver)
  nameWithType: XslCompiledTransform.Load(String,XsltSettings,XmlResolver)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(String,XsltSettings,XmlResolver)
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Load(XmlReader,XsltSettings,XmlResolver)
  nameWithType: XslCompiledTransform.Load(XmlReader,XsltSettings,XmlResolver)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(XmlReader,XsltSettings,XmlResolver)
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Load(IXPathNavigable,XsltSettings,XmlResolver)
  nameWithType: XslCompiledTransform.Load(IXPathNavigable,XsltSettings,XmlResolver)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(IXPathNavigable,XsltSettings,XmlResolver)
- uid: System.Xml.Xsl.XslCompiledTransform.OutputSettings
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: OutputSettings
  nameWithType: XslCompiledTransform.OutputSettings
  fullName: System.Xml.Xsl.XslCompiledTransform.OutputSettings
- uid: System.Xml.XmlWriterSettings
  parent: System.Xml
  isExternal: true
  name: XmlWriterSettings
  nameWithType: XmlWriterSettings
  fullName: System.Xml.XmlWriterSettings
- uid: System.Xml.Xsl.XslCompiledTransform.TemporaryFiles
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: TemporaryFiles
  nameWithType: XslCompiledTransform.TemporaryFiles
  fullName: System.Xml.Xsl.XslCompiledTransform.TemporaryFiles
- uid: System.CodeDom.Compiler.TempFileCollection
  parent: System.CodeDom.Compiler
  isExternal: false
  name: TempFileCollection
  nameWithType: TempFileCollection
  fullName: System.CodeDom.Compiler.TempFileCollection
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(String,String)
  nameWithType: XslCompiledTransform.Transform(String,String)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(String,String)
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(String,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(String,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(String,XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(XmlReader,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(XmlReader,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader,XmlWriter)
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(IXPathNavigable,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(IXPathNavigable,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(IXPathNavigable,XmlWriter)
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(String,XsltArgumentList,Stream)
  nameWithType: XslCompiledTransform.Transform(String,XsltArgumentList,Stream)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(String,XsltArgumentList,Stream)
- uid: System.Xml.Xsl.XsltArgumentList
  parent: System.Xml.Xsl
  isExternal: false
  name: XsltArgumentList
  nameWithType: XsltArgumentList
  fullName: System.Xml.Xsl.XsltArgumentList
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(String,XsltArgumentList,TextWriter)
  nameWithType: XslCompiledTransform.Transform(String,XsltArgumentList,TextWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(String,XsltArgumentList,TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(String,XsltArgumentList,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(String,XsltArgumentList,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(String,XsltArgumentList,XmlWriter)
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(XmlReader,XsltArgumentList,Stream)
  nameWithType: XslCompiledTransform.Transform(XmlReader,XsltArgumentList,Stream)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader,XsltArgumentList,Stream)
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(XmlReader,XsltArgumentList,TextWriter)
  nameWithType: XslCompiledTransform.Transform(XmlReader,XsltArgumentList,TextWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader,XsltArgumentList,TextWriter)
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(XmlReader,XsltArgumentList,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(XmlReader,XsltArgumentList,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader,XsltArgumentList,XmlWriter)
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(IXPathNavigable,XsltArgumentList,Stream)
  nameWithType: XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,Stream)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,Stream)
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(IXPathNavigable,XsltArgumentList,TextWriter)
  nameWithType: XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,TextWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,TextWriter)
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(IXPathNavigable,XsltArgumentList,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter)
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(XmlReader,XsltArgumentList,XmlWriter,XmlResolver)
  nameWithType: XslCompiledTransform.Transform(XmlReader,XsltArgumentList,XmlWriter,XmlResolver)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader,XsltArgumentList,XmlWriter,XmlResolver)
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(IXPathNavigable,XsltArgumentList,XmlWriter,XmlResolver)
  nameWithType: XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter,XmlResolver)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter,XmlResolver)
- uid: System.Xml.Xsl.XslCompiledTransform.#ctor*
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: XslCompiledTransform
  nameWithType: XslCompiledTransform.XslCompiledTransform
- uid: System.Xml.Xsl.XslCompiledTransform.CompileToType*
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: CompileToType
  nameWithType: XslCompiledTransform.CompileToType
- uid: System.Xml.Xsl.XslCompiledTransform.Load*
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Load
  nameWithType: XslCompiledTransform.Load
- uid: System.Xml.Xsl.XslCompiledTransform.OutputSettings*
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: OutputSettings
  nameWithType: XslCompiledTransform.OutputSettings
- uid: System.Xml.Xsl.XslCompiledTransform.TemporaryFiles*
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: TemporaryFiles
  nameWithType: XslCompiledTransform.TemporaryFiles
- uid: System.Xml.Xsl.XslCompiledTransform.Transform*
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform
  nameWithType: XslCompiledTransform.Transform
