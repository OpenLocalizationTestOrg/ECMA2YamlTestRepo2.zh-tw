### YamlMime:ManagedReference
items:
- uid: System.Web.Services.Protocols.MimeFormatter
  id: MimeFormatter
  children:
  - System.Web.Services.Protocols.MimeFormatter.#ctor
  - System.Web.Services.Protocols.MimeFormatter.CreateInstance(System.Type,System.Object)
  - System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)
  - System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Type,System.Web.Services.Protocols.LogicalMethodInfo)
  - System.Web.Services.Protocols.MimeFormatter.GetInitializers(System.Web.Services.Protocols.LogicalMethodInfo[])
  - System.Web.Services.Protocols.MimeFormatter.GetInitializers(System.Type,System.Web.Services.Protocols.LogicalMethodInfo[])
  - System.Web.Services.Protocols.MimeFormatter.Initialize(System.Object)
  langs:
  - csharp
  name: MimeFormatter
  nameWithType: MimeFormatter
  fullName: System.Web.Services.Protocols.MimeFormatter
  type: Class
  summary: "提供所有的讀取器和寫入器，但不使用 SOAP Web 服務與用戶端使用 HTTP 實作抽象基底類別。"
  remarks: "Web 服務寫入器和讀取序列化和還原序列化，分別為 Web 方法的參數或傳回物件之間的 HTTP 要求或回應資料流。 MimeFormatter 類別中用戶端與服務端，建立通用的 「 介面 」 和 「 讀取器和寫入器類別的功能。       MimeFormatter 類別支援.NET Framework 實作，透過 HTTP GET 和 HTTP POST 作業的 Web 服務。 在 HTTP GET 作業要求參數進行編碼的 HTTP 要求的統一資源定位器 (URL)。 在 HTTP POST 作業中，會以 HTTP 要求主體中，如同 HTML 表單編碼要求參數。 與這兩個實作中，傳回值會出現在 HTTP 回應主體為非 SOAP XML 文件。       開發人員通常不需要直接使用 MimeFormatter 或其下階的類別。 相反地，當 Wsdl.exe 工具產生用戶端 proxy 程式碼，根據 HTTP GET 或 HTTP POST 的實作，它會套用<xref:System.Web.Services.Protocols.HttpMethodAttribute>每個 Web 方法，並設定的屬性<xref:System.Web.Services.Protocols.HttpMethodAttribute.ParameterFormatter%2A>和<xref:System.Web.Services.Protocols.HttpMethodAttribute.ReturnFormatter%2A>屬性，以適當的型別衍生自 MimeFormatter 類別</xref:System.Web.Services.Protocols.HttpMethodAttribute.ReturnFormatter%2A></xref:System.Web.Services.Protocols.HttpMethodAttribute.ParameterFormatter%2A></xref:System.Web.Services.Protocols.HttpMethodAttribute> 在伺服器上，適當的衍生型別會使用根據 ASP.NET 組態檔 (Web.config) 中的設定。 在用戶端會從 WSDL 決定適當的衍生型別。"
  syntax:
    content: public abstract class MimeFormatter
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.MimeFormatter.#ctor
  id: '#ctor'
  parent: System.Web.Services.Protocols.MimeFormatter
  langs:
  - csharp
  name: MimeFormatter()
  nameWithType: MimeFormatter.MimeFormatter()
  fullName: System.Web.Services.Protocols.MimeFormatter.MimeFormatter()
  type: Constructor
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "初始化的新執行個體<xref href=&quot;System.Web.Services.Protocols.MimeFormatter&quot;></xref>類別。"
  syntax:
    content: protected MimeFormatter ();
    parameters: []
  overload: System.Web.Services.Protocols.MimeFormatter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.MimeFormatter.CreateInstance(System.Type,System.Object)
  id: CreateInstance(System.Type,System.Object)
  parent: System.Web.Services.Protocols.MimeFormatter
  langs:
  - csharp
  name: CreateInstance(Type,Object)
  nameWithType: MimeFormatter.CreateInstance(Type,Object)
  fullName: System.Web.Services.Protocols.MimeFormatter.CreateInstance(Type,Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "建立並初始化衍生自的具象類別的執行個體<xref href=&quot;System.Web.Services.Protocols.MimeFormatter&quot;> </xref>。"
  remarks: "CreateInstance 方法會建立衍生類別的執行個體，並叫用抽象的衍生的類別的實作<xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>方法。</xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> CreateInstance 方法叫用處理要求或回應的時間。       初始設定式會當做參數傳遞的物件<xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>方法。</xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> CreateInstance 方法當做參數傳遞的初始設定式透過另一個執行個體的衍生類別中叫用<xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>用戶端或服務的初始化期間的方法。</xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>"
  syntax:
    content: public static System.Web.Services.Protocols.MimeFormatter CreateInstance (Type type, object initializer);
    parameters:
    - id: type
      type: System.Type
      description: "型別，衍生自<xref href=&quot;System.Web.Services.Protocols.MimeFormatter&quot;> </xref>，要在其中建立執行個體。"
    - id: initializer
      type: System.Object
      description: "用來初始化執行個體的物件會在透過衍生的類別的實作稍早取得<xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer*>方法。</xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer*>"
    return:
      type: System.Web.Services.Protocols.MimeFormatter
      description: "A <xref href=&quot;System.Web.Services.Protocols.MimeFormatter&quot;></xref> object."
  overload: System.Web.Services.Protocols.MimeFormatter.CreateInstance*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)
  id: GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)
  parent: System.Web.Services.Protocols.MimeFormatter
  langs:
  - csharp
  name: GetInitializer(LogicalMethodInfo)
  nameWithType: MimeFormatter.GetInitializer(LogicalMethodInfo)
  fullName: System.Web.Services.Protocols.MimeFormatter.GetInitializer(LogicalMethodInfo)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "當在衍生類別中覆寫時，傳回指定之方法的初始設定式。"
  remarks: "初始設定式會當做參數傳遞的物件<xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>方法。</xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>       GetInitializer 執行個體方法的衍生的類別的實作會在用戶端或服務的初始化期間叫用。 更新版本中，處理要求或回應的時間，在初始設定式物件被傳遞給靜態<xref:System.Web.Services.Protocols.MimeFormatter.CreateInstance%2A>方法，它會建立另一個物件的衍生類別中，然後在<xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>方法來初始化該</xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>執行個體</xref:System.Web.Services.Protocols.MimeFormatter.CreateInstance%2A> 另一個物件會執行實際的讀取或寫入。"
  syntax:
    content: public abstract object GetInitializer (System.Web.Services.Protocols.LogicalMethodInfo methodInfo);
    parameters:
    - id: methodInfo
      type: System.Web.Services.Protocols.LogicalMethodInfo
      description: "A <xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref>可指定取得初始設定式的 Web 方法。"
    return:
      type: System.Object
      description: "<xref:System.Object>，其中包含指定之方法的初始設定式。</xref:System.Object>"
  overload: System.Web.Services.Protocols.MimeFormatter.GetInitializer*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Type,System.Web.Services.Protocols.LogicalMethodInfo)
  id: GetInitializer(System.Type,System.Web.Services.Protocols.LogicalMethodInfo)
  parent: System.Web.Services.Protocols.MimeFormatter
  langs:
  - csharp
  name: GetInitializer(Type,LogicalMethodInfo)
  nameWithType: MimeFormatter.GetInitializer(Type,LogicalMethodInfo)
  fullName: System.Web.Services.Protocols.MimeFormatter.GetInitializer(Type,LogicalMethodInfo)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "傳回指定之方法的初始設定式。"
  remarks: "初始設定式會當做參數傳遞的物件<xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>方法。</xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>       靜態 GetInitializer 方法會叫用在衍生的類別的<xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>方法，以隱含方式建立衍生類別的執行個體</xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A> 在處理要求或回應的時間，初始設定式物件傳遞至<xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>方法的另一個執行個體的衍生類別。</xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> 第二個物件會執行實際的讀取或寫入。"
  syntax:
    content: public static object GetInitializer (Type type, System.Web.Services.Protocols.LogicalMethodInfo methodInfo);
    parameters:
    - id: type
      type: System.Type
      description: "型別，衍生自<xref href=&quot;System.Web.Services.Protocols.MimeFormatter&quot;> </xref>，-如果要讓取得初始設定式。"
    - id: methodInfo
      type: System.Web.Services.Protocols.LogicalMethodInfo
      description: "A <xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref>可指定取得初始設定式的 Web 方法。"
    return:
      type: System.Object
      description: "A<xref:System.Object>物件，其中包含指定之方法的初始設定式。</xref:System.Object>"
  overload: System.Web.Services.Protocols.MimeFormatter.GetInitializer*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.MimeFormatter.GetInitializers(System.Web.Services.Protocols.LogicalMethodInfo[])
  id: GetInitializers(System.Web.Services.Protocols.LogicalMethodInfo[])
  parent: System.Web.Services.Protocols.MimeFormatter
  langs:
  - csharp
  name: GetInitializers(LogicalMethodInfo[])
  nameWithType: MimeFormatter.GetInitializers(LogicalMethodInfo[])
  fullName: System.Web.Services.Protocols.MimeFormatter.GetInitializers(LogicalMethodInfo[])
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "當在衍生類別中覆寫時，傳回陣列的初始設定式方法定義的輸入陣列對應的物件。"
  remarks: "初始設定式會當做參數傳遞的物件<xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>方法。</xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>       GetInitializers 執行個體方法會叫用<xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>每個執行個體方法中輸入 Web 方法。</xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A> 這表示衍生自類別的執行個體<xref:System.Web.Services.Protocols.MimeFormatter>已經建立。</xref:System.Web.Services.Protocols.MimeFormatter> 在處理要求或回應的時間，在初始設定式會傳遞至<xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>方法的另一個執行個體的衍生類別。</xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A> 第二個物件會執行實際的讀取或寫入。"
  syntax:
    content: public virtual object[] GetInitializers (System.Web.Services.Protocols.LogicalMethodInfo[] methodInfos);
    parameters:
    - id: methodInfos
      type: System.Web.Services.Protocols.LogicalMethodInfo[]
      description: "Web 方法，其中，每個方法傳回的初始設定式陣列中對應的索引取得物件的陣列。"
    return:
      type: System.Object[]
      description: "對應的方法定義的輸入陣列的初始設定式物件的陣列。"
  overload: System.Web.Services.Protocols.MimeFormatter.GetInitializers*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.MimeFormatter.GetInitializers(System.Type,System.Web.Services.Protocols.LogicalMethodInfo[])
  id: GetInitializers(System.Type,System.Web.Services.Protocols.LogicalMethodInfo[])
  parent: System.Web.Services.Protocols.MimeFormatter
  langs:
  - csharp
  name: GetInitializers(Type,LogicalMethodInfo[])
  nameWithType: MimeFormatter.GetInitializers(Type,LogicalMethodInfo[])
  fullName: System.Web.Services.Protocols.MimeFormatter.GetInitializers(Type,LogicalMethodInfo[])
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "傳回陣列的初始設定式物件指定的類別衍生自對應方法定義的輸入陣列<xref href=&quot;System.Web.Services.Protocols.MimeFormatter&quot;> </xref>。"
  remarks: "初始設定式會當做參數傳遞的物件<xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>方法。</xref:System.Web.Services.Protocols.MimeFormatter.Initialize%2A>       靜態 GetInitializersmethod 會導致叫用<xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>屬於所指定的衍生類別方法`type`參數。</xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>"
  syntax:
    content: public static object[] GetInitializers (Type type, System.Web.Services.Protocols.LogicalMethodInfo[] methodInfos);
    parameters:
    - id: type
      type: System.Type
      description: "型別，衍生自<xref href=&quot;System.Web.Services.Protocols.MimeFormatter&quot;> </xref>，哪一個初始設定式會取得。"
    - id: methodInfos
      type: System.Web.Services.Protocols.LogicalMethodInfo[]
      description: "類型的陣列<xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref> ，指定 Web 方法，取得其初始設定式。"
    return:
      type: System.Object[]
      description: "指定的類別衍生自對應方法定義的輸入陣列的初始設定式物件的陣列， <xref href=&quot;System.Web.Services.Protocols.MimeFormatter&quot;> </xref>。"
  overload: System.Web.Services.Protocols.MimeFormatter.GetInitializers*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.MimeFormatter.Initialize(System.Object)
  id: Initialize(System.Object)
  parent: System.Web.Services.Protocols.MimeFormatter
  langs:
  - csharp
  name: Initialize(Object)
  nameWithType: MimeFormatter.Initialize(Object)
  fullName: System.Web.Services.Protocols.MimeFormatter.Initialize(Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "當在衍生類別中覆寫時，初始化執行個體。"
  remarks: "Initialize 方法會在要求或回應已處理的時間叫用不過，初始設定式透過呼叫<xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>用戶端或服務的初始化期間的另一個執行個體上的方法。</xref:System.Web.Services.Protocols.MimeFormatter.GetInitializer%2A>"
  syntax:
    content: public abstract void Initialize (object initializer);
    parameters:
    - id: initializer
      type: System.Object
      description: "適用於實作方法的特定類別類型的物件。"
  overload: System.Web.Services.Protocols.MimeFormatter.Initialize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.Services.Protocols.MimeFormatter.#ctor
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: MimeFormatter()
  nameWithType: MimeFormatter.MimeFormatter()
  fullName: System.Web.Services.Protocols.MimeFormatter.MimeFormatter()
- uid: System.Web.Services.Protocols.MimeFormatter.CreateInstance(System.Type,System.Object)
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: CreateInstance(Type,Object)
  nameWithType: MimeFormatter.CreateInstance(Type,Object)
  fullName: System.Web.Services.Protocols.MimeFormatter.CreateInstance(Type,Object)
- uid: System.Web.Services.Protocols.MimeFormatter
  parent: System.Web.Services.Protocols
  isExternal: false
  name: MimeFormatter
  nameWithType: MimeFormatter
  fullName: System.Web.Services.Protocols.MimeFormatter
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo)
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: GetInitializer(LogicalMethodInfo)
  nameWithType: MimeFormatter.GetInitializer(LogicalMethodInfo)
  fullName: System.Web.Services.Protocols.MimeFormatter.GetInitializer(LogicalMethodInfo)
- uid: System.Web.Services.Protocols.LogicalMethodInfo
  parent: System.Web.Services.Protocols
  isExternal: false
  name: LogicalMethodInfo
  nameWithType: LogicalMethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo
- uid: System.Web.Services.Protocols.MimeFormatter.GetInitializer(System.Type,System.Web.Services.Protocols.LogicalMethodInfo)
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: GetInitializer(Type,LogicalMethodInfo)
  nameWithType: MimeFormatter.GetInitializer(Type,LogicalMethodInfo)
  fullName: System.Web.Services.Protocols.MimeFormatter.GetInitializer(Type,LogicalMethodInfo)
- uid: System.Web.Services.Protocols.MimeFormatter.GetInitializers(System.Web.Services.Protocols.LogicalMethodInfo[])
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: GetInitializers(LogicalMethodInfo[])
  nameWithType: MimeFormatter.GetInitializers(LogicalMethodInfo[])
  fullName: System.Web.Services.Protocols.MimeFormatter.GetInitializers(LogicalMethodInfo[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.Services.Protocols.LogicalMethodInfo[]
  parent: System.Web.Services.Protocols
  isExternal: false
  name: LogicalMethodInfo
  nameWithType: LogicalMethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo[]
  spec.csharp:
  - uid: System.Web.Services.Protocols.LogicalMethodInfo
    name: LogicalMethodInfo
    nameWithType: LogicalMethodInfo
    fullName: LogicalMethodInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.Services.Protocols.MimeFormatter.GetInitializers(System.Type,System.Web.Services.Protocols.LogicalMethodInfo[])
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: GetInitializers(Type,LogicalMethodInfo[])
  nameWithType: MimeFormatter.GetInitializers(Type,LogicalMethodInfo[])
  fullName: System.Web.Services.Protocols.MimeFormatter.GetInitializers(Type,LogicalMethodInfo[])
- uid: System.Web.Services.Protocols.MimeFormatter.Initialize(System.Object)
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: Initialize(Object)
  nameWithType: MimeFormatter.Initialize(Object)
  fullName: System.Web.Services.Protocols.MimeFormatter.Initialize(Object)
- uid: System.Web.Services.Protocols.MimeFormatter.#ctor*
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: MimeFormatter
  nameWithType: MimeFormatter.MimeFormatter
- uid: System.Web.Services.Protocols.MimeFormatter.CreateInstance*
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: CreateInstance
  nameWithType: MimeFormatter.CreateInstance
- uid: System.Web.Services.Protocols.MimeFormatter.GetInitializer*
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: GetInitializer
  nameWithType: MimeFormatter.GetInitializer
- uid: System.Web.Services.Protocols.MimeFormatter.GetInitializers*
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: GetInitializers
  nameWithType: MimeFormatter.GetInitializers
- uid: System.Web.Services.Protocols.MimeFormatter.Initialize*
  parent: System.Web.Services.Protocols.MimeFormatter
  isExternal: false
  name: Initialize
  nameWithType: MimeFormatter.Initialize
