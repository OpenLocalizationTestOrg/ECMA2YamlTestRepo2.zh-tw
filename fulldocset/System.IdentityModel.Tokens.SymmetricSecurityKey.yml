### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey
  id: SymmetricSecurityKey
  children:
  - System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor
  - System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])
  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])
  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(System.String)
  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)
  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey
  langs:
  - csharp
  name: SymmetricSecurityKey
  nameWithType: SymmetricSecurityKey
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey
  type: Class
  summary: "表示使用對稱演算法產生的所有索引鍵的抽象基底類別。"
  remarks: "通常，這個類別是由基礎結構用來轉換使用對稱金鑰的 XML。"
  syntax:
    content: 'public abstract class SymmetricSecurityKey : System.IdentityModel.Tokens.SecurityKey'
  inheritance:
  - System.Object
  - System.IdentityModel.Tokens.SecurityKey
  implements: []
  inheritedMembers:
  - System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)
  - System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.SecurityKey.KeySize
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  langs:
  - csharp
  name: SymmetricSecurityKey()
  nameWithType: SymmetricSecurityKey.SymmetricSecurityKey()
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.SymmetricSecurityKey()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "初始化的新執行個體<xref href=&quot;System.IdentityModel.Tokens.SymmetricSecurityKey&quot;></xref>類別。"
  syntax:
    content: protected SymmetricSecurityKey ();
    parameters: []
  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  id: GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  langs:
  - csharp
  name: GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  nameWithType: SymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "當在衍生類別中覆寫時，會產生衍生的金鑰目前機碼中使用指定密碼編譯演算法和參數。"
  remarks: "若要指定 p-sha1 做為密碼編譯演算法，請使用<xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>欄位。</xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>"
  syntax:
    content: public abstract byte[] GenerateDerivedKey (string algorithm, byte[] label, byte[] nonce, int derivedKeyLength, int offset);
    parameters:
    - id: algorithm
      type: System.String
      description: "表示要用來產生衍生的金鑰的密碼編譯演算法的 URI。"
    - id: label
      type: System.Byte[]
      description: "陣列<xref:System.Byte>包含密碼編譯演算法的標籤參數。</xref:System.Byte>"
    - id: nonce
      type: System.Byte[]
      description: "陣列<xref:System.Byte>其中包含用來建立衍生的金鑰的 nonce。</xref:System.Byte>"
    - id: derivedKeyLength
      type: System.Int32
      description: "衍生金鑰的大小。"
    - id: offset
      type: System.Int32
      description: "衍生的金鑰位從這個方法會傳回位元組陣列中的位置。"
    return:
      type: System.Byte[]
      description: "陣列<xref:System.Byte>，其中包含衍生的金鑰。</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])
  id: GetDecryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  langs:
  - csharp
  name: GetDecryptionTransform(String,Byte[])
  nameWithType: SymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "當在衍生類別中覆寫時，取得加密的轉換來解密使用指定的密碼編譯演算法的文字。"
  remarks: "使用代表解密演算法中的欄位<xref:System.IdentityModel.Tokens.SecurityAlgorithms>類別，即可指定演算法。</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public abstract System.Security.Cryptography.ICryptoTransform GetDecryptionTransform (string algorithm, byte[] iv);
    parameters:
    - id: algorithm
      type: System.String
      description: "密碼編譯演算法，解密加密文字，例如加密的 XML。"
    - id: iv
      type: System.Byte[]
      description: "陣列<xref:System.Byte>，其中包含的初始化向量 (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>) 針對指定的演算法。</xref:System.Byte>"
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "<xref href=&quot;System.Security.Cryptography.ICryptoTransform&quot;> </xref>表示解密轉換。"
  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])
  id: GetEncryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  langs:
  - csharp
  name: GetEncryptionTransform(String,Byte[])
  nameWithType: SymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "當在衍生類別中覆寫時，取得的轉換會使用指定的密碼編譯演算法的 XML 來加密。"
  remarks: "使用代表解密演算法中的欄位<xref:System.IdentityModel.Tokens.SecurityAlgorithms>類別，即可指定演算法。</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public abstract System.Security.Cryptography.ICryptoTransform GetEncryptionTransform (string algorithm, byte[] iv);
    parameters:
    - id: algorithm
      type: System.String
      description: "密碼編譯演算法，加密 XML。"
    - id: iv
      type: System.Byte[]
      description: "陣列<xref:System.Byte>，其中包含的初始化向量 (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>) 針對指定的演算法。</xref:System.Byte>"
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "<xref href=&quot;System.Security.Cryptography.ICryptoTransform&quot;> </xref>表示加密轉換。"
  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(System.String)
  id: GetIVSize(System.String)
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  langs:
  - csharp
  name: GetIVSize(String)
  nameWithType: SymmetricSecurityKey.GetIVSize(String)
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "當在衍生類別中覆寫時，取得大小，以位元為單位的初始化向量 (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>)，並在需要針對指定的密碼編譯演算法。"
  syntax:
    content: public abstract int GetIVSize (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "若要取得的初始化向量大小的密碼編譯演算法 (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>)。"
    return:
      type: System.Int32
      description: "大小，以位元為單位的初始化向量 (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>)，並在需要針對在指定的密碼編譯演算法<code> algorithm </code>參數。"
  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)
  id: GetKeyedHashAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  langs:
  - csharp
  name: GetKeyedHashAlgorithm(String)
  nameWithType: SymmetricSecurityKey.GetKeyedHashAlgorithm(String)
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "當在衍生類別中覆寫時，取得指定索引雜湊演算法的執行個體。"
  remarks: "表示索引雜湊演算法中的欄位<xref:System.IdentityModel.Tokens.SecurityAlgorithms>類別，即可指定演算法。</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public abstract System.Security.Cryptography.KeyedHashAlgorithm GetKeyedHashAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "要取得的執行個體的金鑰雜湊演算法。"
    return:
      type: System.Security.Cryptography.KeyedHashAlgorithm
      description: "A <xref href=&quot;System.Security.Cryptography.KeyedHashAlgorithm&quot;> </xref>表示索引雜湊演算法。"
  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(System.String)
  id: GetSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  langs:
  - csharp
  name: GetSymmetricAlgorithm(String)
  nameWithType: SymmetricSecurityKey.GetSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "當在衍生類別中覆寫時，取得指定的對稱演算法的執行個體。"
  remarks: "表示對稱演算法中的欄位<xref:System.IdentityModel.Tokens.SecurityAlgorithms>類別，即可指定演算法。</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public abstract System.Security.Cryptography.SymmetricAlgorithm GetSymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "要取得的執行個體的對稱演算法。"
    return:
      type: System.Security.Cryptography.SymmetricAlgorithm
      description: "A <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;> </xref>表示對稱演算法。"
  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey
  id: GetSymmetricKey
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  langs:
  - csharp
  name: GetSymmetricKey()
  nameWithType: SymmetricSecurityKey.GetSymmetricKey()
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "當在衍生類別中覆寫時，取得表示對稱金鑰的位元組。"
  syntax:
    content: public abstract byte[] GetSymmetricKey ();
    parameters: []
    return:
      type: System.Byte[]
      description: "陣列<xref:System.Byte>，其中包含對稱金鑰。</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey*
  exceptions: []
  platform:
  - net462
references:
- uid: System.IdentityModel.Tokens.SecurityKey
  isExternal: false
  name: System.IdentityModel.Tokens.SecurityKey
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: SymmetricSecurityKey()
  nameWithType: SymmetricSecurityKey.SymmetricSecurityKey()
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.SymmetricSecurityKey()
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  nameWithType: SymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetDecryptionTransform(String,Byte[])
  nameWithType: SymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetEncryptionTransform(String,Byte[])
  nameWithType: SymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(System.String)
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetIVSize(String)
  nameWithType: SymmetricSecurityKey.GetIVSize(String)
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(String)
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetKeyedHashAlgorithm(String)
  nameWithType: SymmetricSecurityKey.GetKeyedHashAlgorithm(String)
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(String)
- uid: System.Security.Cryptography.KeyedHashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: KeyedHashAlgorithm
  nameWithType: KeyedHashAlgorithm
  fullName: System.Security.Cryptography.KeyedHashAlgorithm
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetSymmetricAlgorithm(String)
  nameWithType: SymmetricSecurityKey.GetSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(String)
- uid: System.Security.Cryptography.SymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: SymmetricAlgorithm
  nameWithType: SymmetricAlgorithm
  fullName: System.Security.Cryptography.SymmetricAlgorithm
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetSymmetricKey()
  nameWithType: SymmetricSecurityKey.GetSymmetricKey()
  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey()
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor*
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: SymmetricSecurityKey
  nameWithType: SymmetricSecurityKey.SymmetricSecurityKey
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey*
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GenerateDerivedKey
  nameWithType: SymmetricSecurityKey.GenerateDerivedKey
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform*
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetDecryptionTransform
  nameWithType: SymmetricSecurityKey.GetDecryptionTransform
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform*
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetEncryptionTransform
  nameWithType: SymmetricSecurityKey.GetEncryptionTransform
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize*
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetIVSize
  nameWithType: SymmetricSecurityKey.GetIVSize
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm*
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetKeyedHashAlgorithm
  nameWithType: SymmetricSecurityKey.GetKeyedHashAlgorithm
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetSymmetricAlgorithm
  nameWithType: SymmetricSecurityKey.GetSymmetricAlgorithm
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey*
  parent: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: GetSymmetricKey
  nameWithType: SymmetricSecurityKey.GetSymmetricKey
